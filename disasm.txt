
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d f4 00 00       	call   c000f45d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 51 02 00       	call   c0025178 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 10 5d 02 c0       	mov    ebx,0xc0025d10
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 1c 5d 02 c0    	cmp    ebx,0xc0025d1c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 6c 9b 02 c0       	mov    eax,0xc0029b6c
c0000049:	3d 6c 9b 02 c0       	cmp    eax,0xc0029b6c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 6c 9b 02 c0       	push   0xc0029b6c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 6c 9b 02 c0       	mov    eax,0xc0029b6c
c0000075:	2d 6c 9b 02 c0       	sub    eax,0xc0029b6c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 6c 9b 02 c0       	push   0xc0029b6c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 9c a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a19c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 24 5d 02 c0       	mov    ebx,0xc0025d24
c00000bb:	81 eb 20 5d 02 c0    	sub    ebx,0xc0025d20
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 20 5d 02 c0       	mov    esi,0xc0025d20
c00000ca:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a0 a1 02 c0       	mov    ds:0xc002a1a0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 6c 9b 02 c0       	push   0xc0029b6c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 9c a1 02 c0 01 	mov    BYTE PTR ds:0xc002a19c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a4 a1 02 c0       	push   0xc002a1a4
c000012c:	68 6c 9b 02 c0       	push   0xc0029b6c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 09 1d 01 00       	call   c001204c <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 fd b2 01 00       	call   c001b64a <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 e9 b6 01 00       	call   c001ba5d <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 8f bc 01 00       	call   c001c00c <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 be b2 01 00       	call   c001b64a <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 7b 02 00 00       	jmp    c000061e <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 d0 a5 02 c0 	lgdtd  ds:0xc002a5d0
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 11 01 00 00       	jmp    c000060a <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	54                   	push   esp
c00005f1:	e8 39 39 01 00       	call   c0013f2f <int_handler>
c00005f6:	81 c4 04 00 00 00    	add    esp,0x4
c00005fc:	0f a9                	pop    gs
c00005fe:	0f a1                	pop    fs
c0000600:	07                   	pop    es
c0000601:	1f                   	pop    ds
c0000602:	61                   	popa   
c0000603:	81 c4 08 00 00 00    	add    esp,0x8
c0000609:	cf                   	iret   

c000060a <syscall_common_stub>:
c000060a:	60                   	pusha  
c000060b:	1e                   	push   ds
c000060c:	06                   	push   es
c000060d:	0f a0                	push   fs
c000060f:	0f a8                	push   gs
c0000611:	54                   	push   esp
c0000612:	fb                   	sti    
c0000613:	e8 17 39 01 00       	call   c0013f2f <int_handler>
c0000618:	81 c4 04 00 00 00    	add    esp,0x4

c000061e <offAForkJumpThingy>:
c000061e:	0f a9                	pop    gs
c0000620:	0f a1                	pop    fs
c0000622:	07                   	pop    es
c0000623:	1f                   	pop    ds
c0000624:	61                   	popa   
c0000625:	81 c4 08 00 00 00    	add    esp,0x8
c000062b:	cf                   	iret   

c000062c <memcmp>:
c000062c:	56                   	push   esi
c000062d:	53                   	push   ebx
c000062e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000632:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000636:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000063a:	01 d6                	add    esi,edx
c000063c:	39 f2                	cmp    edx,esi
c000063e:	74 0e                	je     c000064e <memcmp+0x22>
c0000640:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000643:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000646:	38 c8                	cmp    al,cl
c0000648:	75 08                	jne    c0000652 <memcmp+0x26>
c000064a:	42                   	inc    edx
c000064b:	43                   	inc    ebx
c000064c:	eb ee                	jmp    c000063c <memcmp+0x10>
c000064e:	31 c0                	xor    eax,eax
c0000650:	eb 02                	jmp    c0000654 <memcmp+0x28>
c0000652:	29 c8                	sub    eax,ecx
c0000654:	5b                   	pop    ebx
c0000655:	5e                   	pop    esi
c0000656:	c3                   	ret    

c0000657 <memmove>:
c0000657:	56                   	push   esi
c0000658:	53                   	push   ebx
c0000659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000065d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000665:	39 c8                	cmp    eax,ecx
c0000667:	73 12                	jae    c000067b <memmove+0x24>
c0000669:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000066c:	89 c3                	mov    ebx,eax
c000066e:	39 f1                	cmp    ecx,esi
c0000670:	74 1a                	je     c000068c <memmove+0x35>
c0000672:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000674:	43                   	inc    ebx
c0000675:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000678:	41                   	inc    ecx
c0000679:	eb f3                	jmp    c000066e <memmove+0x17>
c000067b:	76 0f                	jbe    c000068c <memmove+0x35>
c000067d:	85 d2                	test   edx,edx
c000067f:	74 0b                	je     c000068c <memmove+0x35>
c0000681:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000685:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000689:	4a                   	dec    edx
c000068a:	eb f1                	jmp    c000067d <memmove+0x26>
c000068c:	5b                   	pop    ebx
c000068d:	5e                   	pop    esi
c000068e:	c3                   	ret    

c000068f <memcpy>:
c000068f:	57                   	push   edi
c0000690:	56                   	push   esi
c0000691:	53                   	push   ebx
c0000692:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000069a:	89 da                	mov    edx,ebx
c000069c:	89 d9                	mov    ecx,ebx
c000069e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a2:	83 e2 fc             	and    edx,0xfffffffc
c00006a5:	c1 e9 02             	shr    ecx,0x2
c00006a8:	89 c7                	mov    edi,eax
c00006aa:	fc                   	cld    
c00006ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ad:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b0:	01 c2                	add    edx,eax
c00006b2:	01 de                	add    esi,ebx
c00006b4:	39 f1                	cmp    ecx,esi
c00006b6:	74 09                	je     c00006c1 <memcpy+0x32>
c00006b8:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006ba:	42                   	inc    edx
c00006bb:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006be:	41                   	inc    ecx
c00006bf:	eb f3                	jmp    c00006b4 <memcpy+0x25>
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	5f                   	pop    edi
c00006c4:	c3                   	ret    

c00006c5 <memset>:
c00006c5:	53                   	push   ebx
c00006c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ce:	89 c2                	mov    edx,eax
c00006d0:	01 c1                	add    ecx,eax
c00006d2:	39 ca                	cmp    edx,ecx
c00006d4:	74 0a                	je     c00006e0 <memset+0x1b>
c00006d6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006da:	42                   	inc    edx
c00006db:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006de:	eb f2                	jmp    c00006d2 <memset+0xd>
c00006e0:	5b                   	pop    ebx
c00006e1:	c3                   	ret    

c00006e2 <strlen>:
c00006e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e6:	31 c0                	xor    eax,eax
c00006e8:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006ec:	74 03                	je     c00006f1 <strlen+0xf>
c00006ee:	40                   	inc    eax
c00006ef:	eb f7                	jmp    c00006e8 <strlen+0x6>
c00006f1:	c3                   	ret    

c00006f2 <strpbrk>:
c00006f2:	53                   	push   ebx
c00006f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f7:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f9:	84 c9                	test   cl,cl
c00006fb:	74 14                	je     c0000711 <strpbrk+0x1f>
c00006fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000701:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000703:	84 db                	test   bl,bl
c0000705:	74 07                	je     c000070e <strpbrk+0x1c>
c0000707:	38 cb                	cmp    bl,cl
c0000709:	74 08                	je     c0000713 <strpbrk+0x21>
c000070b:	42                   	inc    edx
c000070c:	eb f3                	jmp    c0000701 <strpbrk+0xf>
c000070e:	40                   	inc    eax
c000070f:	eb e6                	jmp    c00006f7 <strpbrk+0x5>
c0000711:	31 c0                	xor    eax,eax
c0000713:	5b                   	pop    ebx
c0000714:	c3                   	ret    

c0000715 <strtok>:
c0000715:	56                   	push   esi
c0000716:	53                   	push   ebx
c0000717:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071f:	85 db                	test   ebx,ebx
c0000721:	75 0e                	jne    c0000731 <strtok+0x1c>
c0000723:	8b 1d bc a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a1bc
c0000729:	85 db                	test   ebx,ebx
c000072b:	75 04                	jne    c0000731 <strtok+0x1c>
c000072d:	31 db                	xor    ebx,ebx
c000072f:	eb 2e                	jmp    c000075f <strtok+0x4a>
c0000731:	56                   	push   esi
c0000732:	53                   	push   ebx
c0000733:	e8 ba ff ff ff       	call   c00006f2 <strpbrk>
c0000738:	5a                   	pop    edx
c0000739:	a3 bc a1 02 c0       	mov    ds:0xc002a1bc,eax
c000073e:	59                   	pop    ecx
c000073f:	a1 bc a1 02 c0       	mov    eax,ds:0xc002a1bc
c0000744:	39 d8                	cmp    eax,ebx
c0000746:	75 07                	jne    c000074f <strtok+0x3a>
c0000748:	43                   	inc    ebx
c0000749:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074d:	eb e2                	jmp    c0000731 <strtok+0x1c>
c000074f:	85 c0                	test   eax,eax
c0000751:	74 da                	je     c000072d <strtok+0x18>
c0000753:	8d 50 01             	lea    edx,[eax+0x1]
c0000756:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000759:	89 15 bc a1 02 c0    	mov    DWORD PTR ds:0xc002a1bc,edx
c000075f:	89 d8                	mov    eax,ebx
c0000761:	5b                   	pop    ebx
c0000762:	5e                   	pop    esi
c0000763:	c3                   	ret    

c0000764 <strcpy>:
c0000764:	53                   	push   ebx
c0000765:	31 d2                	xor    edx,edx
c0000767:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076f:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000772:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000775:	84 c9                	test   cl,cl
c0000777:	74 06                	je     c000077f <strcpy+0x1b>
c0000779:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077c:	42                   	inc    edx
c000077d:	eb ec                	jmp    c000076b <strcpy+0x7>
c000077f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000782:	5b                   	pop    ebx
c0000783:	c3                   	ret    

c0000784 <strncpy>:
c0000784:	56                   	push   esi
c0000785:	53                   	push   ebx
c0000786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000792:	89 c3                	mov    ebx,eax
c0000794:	85 c9                	test   ecx,ecx
c0000796:	74 1a                	je     c00007b2 <strncpy+0x2e>
c0000798:	46                   	inc    esi
c0000799:	43                   	inc    ebx
c000079a:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a1:	84 d2                	test   dl,dl
c00007a3:	75 ef                	jne    c0000794 <strncpy+0x10>
c00007a5:	31 d2                	xor    edx,edx
c00007a7:	39 d1                	cmp    ecx,edx
c00007a9:	74 07                	je     c00007b2 <strncpy+0x2e>
c00007ab:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007af:	42                   	inc    edx
c00007b0:	eb f5                	jmp    c00007a7 <strncpy+0x23>
c00007b2:	5b                   	pop    ebx
c00007b3:	5e                   	pop    esi
c00007b4:	c3                   	ret    

c00007b5 <strcmp>:
c00007b5:	31 c9                	xor    ecx,ecx
c00007b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bf:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c3:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c7:	38 d0                	cmp    al,dl
c00007c9:	75 08                	jne    c00007d3 <strcmp+0x1e>
c00007cb:	41                   	inc    ecx
c00007cc:	84 c0                	test   al,al
c00007ce:	75 e7                	jne    c00007b7 <strcmp+0x2>
c00007d0:	31 c0                	xor    eax,eax
c00007d2:	c3                   	ret    
c00007d3:	29 d0                	sub    eax,edx
c00007d5:	c3                   	ret    

c00007d6 <strchr>:
c00007d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007da:	8a 10                	mov    dl,BYTE PTR [eax]
c00007dc:	84 d2                	test   dl,dl
c00007de:	74 09                	je     c00007e9 <strchr+0x13>
c00007e0:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e4:	74 05                	je     c00007eb <strchr+0x15>
c00007e6:	40                   	inc    eax
c00007e7:	eb f1                	jmp    c00007da <strchr+0x4>
c00007e9:	31 c0                	xor    eax,eax
c00007eb:	c3                   	ret    

c00007ec <strncmp>:
c00007ec:	56                   	push   esi
c00007ed:	53                   	push   ebx
c00007ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007fa:	01 d6                	add    esi,edx
c00007fc:	39 f2                	cmp    edx,esi
c00007fe:	74 12                	je     c0000812 <strncmp+0x26>
c0000800:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000803:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000806:	38 c8                	cmp    al,cl
c0000808:	75 0c                	jne    c0000816 <strncmp+0x2a>
c000080a:	42                   	inc    edx
c000080b:	84 c0                	test   al,al
c000080d:	74 03                	je     c0000812 <strncmp+0x26>
c000080f:	43                   	inc    ebx
c0000810:	eb ea                	jmp    c00007fc <strncmp+0x10>
c0000812:	31 c0                	xor    eax,eax
c0000814:	eb 02                	jmp    c0000818 <strncmp+0x2c>
c0000816:	29 c8                	sub    eax,ecx
c0000818:	5b                   	pop    ebx
c0000819:	5e                   	pop    esi
c000081a:	c3                   	ret    

c000081b <strcat>:
c000081b:	53                   	push   ebx
c000081c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000820:	89 c1                	mov    ecx,eax
c0000822:	8d 51 01             	lea    edx,[ecx+0x1]
c0000825:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000829:	74 04                	je     c000082f <strcat+0x14>
c000082b:	89 d1                	mov    ecx,edx
c000082d:	eb f3                	jmp    c0000822 <strcat+0x7>
c000082f:	31 d2                	xor    edx,edx
c0000831:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000835:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000838:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083b:	42                   	inc    edx
c000083c:	84 db                	test   bl,bl
c000083e:	75 f1                	jne    c0000831 <strcat+0x16>
c0000840:	5b                   	pop    ebx
c0000841:	c3                   	ret    

c0000842 <strncat>:
c0000842:	56                   	push   esi
c0000843:	53                   	push   ebx
c0000844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000848:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000850:	89 c2                	mov    edx,eax
c0000852:	85 db                	test   ebx,ebx
c0000854:	74 23                	je     c0000879 <strncat+0x37>
c0000856:	8d 72 01             	lea    esi,[edx+0x1]
c0000859:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085d:	74 04                	je     c0000863 <strncat+0x21>
c000085f:	89 f2                	mov    edx,esi
c0000861:	eb f3                	jmp    c0000856 <strncat+0x14>
c0000863:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000866:	41                   	inc    ecx
c0000867:	42                   	inc    edx
c0000868:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086b:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086e:	84 db                	test   bl,bl
c0000870:	74 07                	je     c0000879 <strncat+0x37>
c0000872:	39 f1                	cmp    ecx,esi
c0000874:	75 f0                	jne    c0000866 <strncat+0x24>
c0000876:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	5e                   	pop    esi
c000087b:	c3                   	ret    

c000087c <strstr>:
c000087c:	57                   	push   edi
c000087d:	56                   	push   esi
c000087e:	53                   	push   ebx
c000087f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000883:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000887:	57                   	push   edi
c0000888:	e8 55 fe ff ff       	call   c00006e2 <strlen>
c000088d:	59                   	pop    ecx
c000088e:	89 c6                	mov    esi,eax
c0000890:	85 c0                	test   eax,eax
c0000892:	74 1f                	je     c00008b3 <strstr+0x37>
c0000894:	53                   	push   ebx
c0000895:	e8 48 fe ff ff       	call   c00006e2 <strlen>
c000089a:	5a                   	pop    edx
c000089b:	39 f0                	cmp    eax,esi
c000089d:	72 12                	jb     c00008b1 <strstr+0x35>
c000089f:	56                   	push   esi
c00008a0:	57                   	push   edi
c00008a1:	53                   	push   ebx
c00008a2:	e8 85 fd ff ff       	call   c000062c <memcmp>
c00008a7:	83 c4 0c             	add    esp,0xc
c00008aa:	85 c0                	test   eax,eax
c00008ac:	74 05                	je     c00008b3 <strstr+0x37>
c00008ae:	43                   	inc    ebx
c00008af:	eb e3                	jmp    c0000894 <strstr+0x18>
c00008b1:	31 db                	xor    ebx,ebx
c00008b3:	89 d8                	mov    eax,ebx
c00008b5:	5b                   	pop    ebx
c00008b6:	5e                   	pop    esi
c00008b7:	5f                   	pop    edi
c00008b8:	c3                   	ret    

c00008b9 <toupper>:
c00008b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bd:	0f b6 d0             	movzx  edx,al
c00008c0:	f6 82 40 5d 02 c0 02 	test   BYTE PTR [edx-0x3ffda2c0],0x2
c00008c7:	74 03                	je     c00008cc <toupper+0x13>
c00008c9:	83 e8 20             	sub    eax,0x20
c00008cc:	c3                   	ret    

c00008cd <tolower>:
c00008cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d1:	0f b6 d0             	movzx  edx,al
c00008d4:	f6 82 40 5d 02 c0 01 	test   BYTE PTR [edx-0x3ffda2c0],0x1
c00008db:	74 03                	je     c00008e0 <tolower+0x13>
c00008dd:	83 c0 20             	add    eax,0x20
c00008e0:	c3                   	ret    

c00008e1 <simple_strtoul>:
c00008e1:	55                   	push   ebp
c00008e2:	57                   	push   edi
c00008e3:	56                   	push   esi
c00008e4:	53                   	push   ebx
c00008e5:	83 ec 08             	sub    esp,0x8
c00008e8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f0:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f3:	f6 82 40 5d 02 c0 08 	test   BYTE PTR [edx-0x3ffda2c0],0x8
c00008fa:	74 03                	je     c00008ff <simple_strtoul+0x1e>
c00008fc:	41                   	inc    ecx
c00008fd:	eb f1                	jmp    c00008f0 <simple_strtoul+0xf>
c00008ff:	80 fa 09             	cmp    dl,0x9
c0000902:	74 f8                	je     c00008fc <simple_strtoul+0x1b>
c0000904:	80 fa 2d             	cmp    dl,0x2d
c0000907:	75 0b                	jne    c0000914 <simple_strtoul+0x33>
c0000909:	41                   	inc    ecx
c000090a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000912:	eb 0e                	jmp    c0000922 <simple_strtoul+0x41>
c0000914:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091c:	80 fa 2b             	cmp    dl,0x2b
c000091f:	75 01                	jne    c0000922 <simple_strtoul+0x41>
c0000921:	41                   	inc    ecx
c0000922:	85 f6                	test   esi,esi
c0000924:	75 22                	jne    c0000948 <simple_strtoul+0x67>
c0000926:	be 0a 00 00 00       	mov    esi,0xa
c000092b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092e:	75 5a                	jne    c000098a <simple_strtoul+0xa9>
c0000930:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000934:	50                   	push   eax
c0000935:	e8 93 ff ff ff       	call   c00008cd <tolower>
c000093a:	5a                   	pop    edx
c000093b:	83 f8 78             	cmp    eax,0x78
c000093e:	74 03                	je     c0000943 <simple_strtoul+0x62>
c0000940:	41                   	inc    ecx
c0000941:	eb 16                	jmp    c0000959 <simple_strtoul+0x78>
c0000943:	83 c1 02             	add    ecx,0x2
c0000946:	eb 22                	jmp    c000096a <simple_strtoul+0x89>
c0000948:	8d 46 fe             	lea    eax,[esi-0x2]
c000094b:	83 f8 22             	cmp    eax,0x22
c000094e:	0f 87 b7 00 00 00    	ja     c0000a0b <simple_strtoul+0x12a>
c0000954:	83 fe 08             	cmp    esi,0x8
c0000957:	75 0c                	jne    c0000965 <simple_strtoul+0x84>
c0000959:	be 08 00 00 00       	mov    esi,0x8
c000095e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000961:	75 27                	jne    c000098a <simple_strtoul+0xa9>
c0000963:	eb 1f                	jmp    c0000984 <simple_strtoul+0xa3>
c0000965:	83 fe 10             	cmp    esi,0x10
c0000968:	75 20                	jne    c000098a <simple_strtoul+0xa9>
c000096a:	be 10 00 00 00       	mov    esi,0x10
c000096f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000972:	75 16                	jne    c000098a <simple_strtoul+0xa9>
c0000974:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000978:	50                   	push   eax
c0000979:	e8 4f ff ff ff       	call   c00008cd <tolower>
c000097e:	5d                   	pop    ebp
c000097f:	83 f8 78             	cmp    eax,0x78
c0000982:	74 03                	je     c0000987 <simple_strtoul+0xa6>
c0000984:	41                   	inc    ecx
c0000985:	eb 03                	jmp    c000098a <simple_strtoul+0xa9>
c0000987:	83 c1 02             	add    ecx,0x2
c000098a:	31 ed                	xor    ebp,ebp
c000098c:	31 db                	xor    ebx,ebx
c000098e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000995:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 27                	je     c00009c2 <simple_strtoul+0xe1>
c000099b:	0f b6 fa             	movzx  edi,dl
c000099e:	f6 87 40 5d 02 c0 04 	test   BYTE PTR [edi-0x3ffda2c0],0x4
c00009a5:	74 05                	je     c00009ac <simple_strtoul+0xcb>
c00009a7:	83 ef 30             	sub    edi,0x30
c00009aa:	eb 22                	jmp    c00009ce <simple_strtoul+0xed>
c00009ac:	0f be d2             	movsx  edx,dl
c00009af:	52                   	push   edx
c00009b0:	e8 04 ff ff ff       	call   c00008b9 <toupper>
c00009b5:	5f                   	pop    edi
c00009b6:	0f b6 d0             	movzx  edx,al
c00009b9:	f6 82 40 5d 02 c0 01 	test   BYTE PTR [edx-0x3ffda2c0],0x1
c00009c0:	75 09                	jne    c00009cb <simple_strtoul+0xea>
c00009c2:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c7:	75 2d                	jne    c00009f6 <simple_strtoul+0x115>
c00009c9:	eb 57                	jmp    c0000a22 <simple_strtoul+0x141>
c00009cb:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ce:	39 f7                	cmp    edi,esi
c00009d0:	73 f0                	jae    c00009c2 <simple_strtoul+0xe1>
c00009d2:	31 d2                	xor    edx,edx
c00009d4:	89 f8                	mov    eax,edi
c00009d6:	f7 d0                	not    eax
c00009d8:	f7 f6                	div    esi
c00009da:	39 d8                	cmp    eax,ebx
c00009dc:	72 0e                	jb     c00009ec <simple_strtoul+0x10b>
c00009de:	0f af de             	imul   ebx,esi
c00009e1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e8:	01 fb                	add    ebx,edi
c00009ea:	eb 07                	jmp    c00009f3 <simple_strtoul+0x112>
c00009ec:	bd 01 00 00 00       	mov    ebp,0x1
c00009f1:	31 db                	xor    ebx,ebx
c00009f3:	41                   	inc    ecx
c00009f4:	eb 9f                	jmp    c0000995 <simple_strtoul+0xb4>
c00009f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f9:	09 d8                	or     eax,ebx
c00009fb:	75 1f                	jne    c0000a1c <simple_strtoul+0x13b>
c00009fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a01:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a05:	31 db                	xor    ebx,ebx
c0000a07:	89 38                	mov    DWORD PTR [eax],edi
c0000a09:	eb 17                	jmp    c0000a22 <simple_strtoul+0x141>
c0000a0b:	31 db                	xor    ebx,ebx
c0000a0d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a12:	74 14                	je     c0000a28 <simple_strtoul+0x147>
c0000a14:	31 ed                	xor    ebp,ebp
c0000a16:	85 c9                	test   ecx,ecx
c0000a18:	75 e3                	jne    c00009fd <simple_strtoul+0x11c>
c0000a1a:	31 db                	xor    ebx,ebx
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	89 08                	mov    DWORD PTR [eax],ecx
c0000a22:	4d                   	dec    ebp
c0000a23:	75 03                	jne    c0000a28 <simple_strtoul+0x147>
c0000a25:	83 cb ff             	or     ebx,0xffffffff
c0000a28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2d:	75 02                	jne    c0000a31 <simple_strtoul+0x150>
c0000a2f:	f7 db                	neg    ebx
c0000a31:	83 c4 08             	add    esp,0x8
c0000a34:	89 d8                	mov    eax,ebx
c0000a36:	5b                   	pop    ebx
c0000a37:	5e                   	pop    esi
c0000a38:	5f                   	pop    edi
c0000a39:	5d                   	pop    ebp
c0000a3a:	c3                   	ret    

c0000a3b <largebin_index>:
c0000a3b:	89 c2                	mov    edx,eax
c0000a3d:	c1 ea 08             	shr    edx,0x8
c0000a40:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a46:	77 10                	ja     c0000a58 <largebin_index+0x1d>
c0000a48:	0f bd d2             	bsr    edx,edx
c0000a4b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4e:	d3 e8                	shr    eax,cl
c0000a50:	83 e0 03             	and    eax,0x3
c0000a53:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a57:	c3                   	ret    
c0000a58:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5d:	c3                   	ret    

c0000a5e <malloc_init_state>:
c0000a5e:	53                   	push   ebx
c0000a5f:	8d 50 34             	lea    edx,[eax+0x34]
c0000a62:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a68:	89 d1                	mov    ecx,edx
c0000a6a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a70:	83 c2 08             	add    edx,0x8
c0000a73:	39 da                	cmp    edx,ebx
c0000a75:	75 f3                	jne    c0000a6a <malloc_init_state+0xc>
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a83:	83 e2 03             	and    edx,0x3
c0000a86:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a90:	83 ca 48             	or     edx,0x48
c0000a93:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aae:	89 10                	mov    DWORD PTR [eax],edx
c0000ab0:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab3:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abd:	5b                   	pop    ebx
c0000abe:	c3                   	ret    

c0000abf <malloc_consolidate>:
c0000abf:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac1:	85 d2                	test   edx,edx
c0000ac3:	0f 84 d8 00 00 00    	je     c0000ba1 <malloc_consolidate+0xe2>
c0000ac9:	55                   	push   ebp
c0000aca:	83 e2 fd             	and    edx,0xfffffffd
c0000acd:	57                   	push   edi
c0000ace:	89 c5                	mov    ebp,eax
c0000ad0:	56                   	push   esi
c0000ad1:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad4:	53                   	push   ebx
c0000ad5:	83 ec 10             	sub    esp,0x10
c0000ad8:	89 10                	mov    DWORD PTR [eax],edx
c0000ada:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ade:	c1 ea 03             	shr    edx,0x3
c0000ae1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	0f 84 98 00 00 00    	je     c0000b8c <malloc_consolidate+0xcd>
c0000af4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b01:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b05:	89 f9                	mov    ecx,edi
c0000b07:	83 e1 fe             	and    ecx,0xfffffffe
c0000b0a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b10:	83 e3 fc             	and    ebx,0xfffffffc
c0000b13:	83 e7 01             	and    edi,0x1
c0000b16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b19:	75 14                	jne    c0000b2f <malloc_consolidate+0x70>
c0000b1b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1d:	29 fa                	sub    edx,edi
c0000b1f:	01 f9                	add    ecx,edi
c0000b21:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b24:	89 fb                	mov    ebx,edi
c0000b26:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b29:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b32:	74 40                	je     c0000b74 <malloc_consolidate+0xb5>
c0000b34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b37:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b3a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b41:	83 e7 01             	and    edi,0x1
c0000b44:	75 0e                	jne    c0000b54 <malloc_consolidate+0x95>
c0000b46:	01 d9                	add    ecx,ebx
c0000b48:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b51:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b54:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b57:	89 ce                	mov    esi,ecx
c0000b59:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5c:	83 ce 01             	or     esi,0x1
c0000b5f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b62:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b68:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b72:	eb 0c                	jmp    c0000b80 <malloc_consolidate+0xc1>
c0000b74:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b77:	83 c9 01             	or     ecx,0x1
c0000b7a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b84:	85 d2                	test   edx,edx
c0000b86:	0f 85 6f ff ff ff    	jne    c0000afb <malloc_consolidate+0x3c>
c0000b8c:	83 c5 04             	add    ebp,0x4
c0000b8f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b93:	0f 85 50 ff ff ff    	jne    c0000ae9 <malloc_consolidate+0x2a>
c0000b99:	83 c4 10             	add    esp,0x10
c0000b9c:	5b                   	pop    ebx
c0000b9d:	5e                   	pop    esi
c0000b9e:	5f                   	pop    edi
c0000b9f:	5d                   	pop    ebp
c0000ba0:	c3                   	ret    
c0000ba1:	e9 b8 fe ff ff       	jmp    c0000a5e <malloc_init_state>

c0000ba6 <dlfree>:
c0000ba6:	57                   	push   edi
c0000ba7:	56                   	push   esi
c0000ba8:	53                   	push   ebx
c0000ba9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bad:	85 db                	test   ebx,ebx
c0000baf:	0f 84 e2 00 00 00    	je     c0000c97 <dlfree+0xf1>
c0000bb5:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb8:	8b 0d c0 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1c0
c0000bbe:	89 f0                	mov    eax,esi
c0000bc0:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc3:	83 e0 fc             	and    eax,0xfffffffc
c0000bc6:	39 c1                	cmp    ecx,eax
c0000bc8:	72 24                	jb     c0000bee <dlfree+0x48>
c0000bca:	83 c9 03             	or     ecx,0x3
c0000bcd:	c1 e8 03             	shr    eax,0x3
c0000bd0:	89 0d c0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c0,ecx
c0000bd6:	83 e8 02             	sub    eax,0x2
c0000bd9:	8b 0c 85 c4 a1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5e3c]
c0000be0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be2:	89 14 85 c4 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5e3c],edx
c0000be9:	e9 a9 00 00 00       	jmp    c0000c97 <dlfree+0xf1>
c0000bee:	83 e6 02             	and    esi,0x2
c0000bf1:	0f 85 a0 00 00 00    	jne    c0000c97 <dlfree+0xf1>
c0000bf7:	83 c9 01             	or     ecx,0x1
c0000bfa:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfd:	89 0d c0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1c0,ecx
c0000c03:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c06:	83 e1 fc             	and    ecx,0xfffffffc
c0000c09:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0d:	75 13                	jne    c0000c22 <dlfree+0x7c>
c0000c0f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c12:	29 da                	sub    edx,ebx
c0000c14:	01 d8                	add    eax,ebx
c0000c16:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c19:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c22:	39 35 ec a1 02 c0    	cmp    DWORD PTR ds:0xc002a1ec,esi
c0000c28:	74 40                	je     c0000c6a <dlfree+0xc4>
c0000c2a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c31:	80 e3 01             	and    bl,0x1
c0000c34:	75 0e                	jne    c0000c44 <dlfree+0x9e>
c0000c36:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c39:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3c:	01 c8                	add    eax,ecx
c0000c3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c44:	8b 0d fc a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1fc
c0000c4a:	c7 42 0c f4 a1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a1f4
c0000c51:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c54:	89 15 fc a1 02 c0    	mov    DWORD PTR ds:0xc002a1fc,edx
c0000c5a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5d:	89 c1                	mov    ecx,eax
c0000c5f:	83 c9 01             	or     ecx,0x1
c0000c62:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c65:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c68:	eb 10                	jmp    c0000c7a <dlfree+0xd4>
c0000c6a:	01 c8                	add    eax,ecx
c0000c6c:	89 c1                	mov    ecx,eax
c0000c6e:	83 c9 01             	or     ecx,0x1
c0000c71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c74:	89 15 ec a1 02 c0    	mov    DWORD PTR ds:0xc002a1ec,edx
c0000c7a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7f:	76 16                	jbe    c0000c97 <dlfree+0xf1>
c0000c81:	f6 05 c0 a1 02 c0 02 	test   BYTE PTR ds:0xc002a1c0,0x2
c0000c88:	74 0d                	je     c0000c97 <dlfree+0xf1>
c0000c8a:	5b                   	pop    ebx
c0000c8b:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	e9 28 fe ff ff       	jmp    c0000abf <malloc_consolidate>
c0000c97:	5b                   	pop    ebx
c0000c98:	5e                   	pop    esi
c0000c99:	5f                   	pop    edi
c0000c9a:	c3                   	ret    

c0000c9b <sYSMALLOc>:
c0000c9b:	55                   	push   ebp
c0000c9c:	57                   	push   edi
c0000c9d:	56                   	push   esi
c0000c9e:	53                   	push   ebx
c0000c9f:	89 d3                	mov    ebx,edx
c0000ca1:	83 ec 2c             	sub    esp,0x2c
c0000ca4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca8:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cae:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb1:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb8:	74 1f                	je     c0000cd9 <sYSMALLOc+0x3e>
c0000cba:	89 d8                	mov    eax,ebx
c0000cbc:	e8 fe fd ff ff       	call   c0000abf <malloc_consolidate>
c0000cc1:	83 ec 0c             	sub    esp,0xc
c0000cc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc8:	83 e8 07             	sub    eax,0x7
c0000ccb:	50                   	push   eax
c0000ccc:	e8 30 02 00 00       	call   c0000f01 <dlmalloc>
c0000cd1:	83 c4 10             	add    esp,0x10
c0000cd4:	e9 20 02 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000cd9:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdc:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cf0:	83 c0 10             	add    eax,0x10
c0000cf3:	01 c1                	add    ecx,eax
c0000cf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf9:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d00:	74 04                	je     c0000d06 <sYSMALLOc+0x6b>
c0000d02:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d06:	f7 da                	neg    edx
c0000d08:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d10:	21 d1                	and    ecx,edx
c0000d12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d16:	7f 07                	jg     c0000d1f <sYSMALLOc+0x84>
c0000d18:	31 c0                	xor    eax,eax
c0000d1a:	e9 da 01 00 00       	jmp    c0000ef9 <sYSMALLOc+0x25e>
c0000d1f:	83 ec 0c             	sub    esp,0xc
c0000d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d26:	e8 90 e2 00 00       	call   c000efbb <sbrk>
c0000d2b:	83 c4 10             	add    esp,0x10
c0000d2e:	89 c6                	mov    esi,eax
c0000d30:	83 f8 ff             	cmp    eax,0xffffffff
c0000d33:	74 e3                	je     c0000d18 <sYSMALLOc+0x7d>
c0000d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d39:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d40:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d46:	39 f1                	cmp    ecx,esi
c0000d48:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4e:	75 13                	jne    c0000d63 <sYSMALLOc+0xc8>
c0000d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d54:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d58:	83 c8 01             	or     eax,0x1
c0000d5b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5e:	e9 3e 01 00 00       	jmp    c0000ea1 <sYSMALLOc+0x206>
c0000d63:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d69:	88 d0                	mov    al,dl
c0000d6b:	83 e0 01             	and    eax,0x1
c0000d6e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d73:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d77:	0f 95 c0             	setne  al
c0000d7a:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7e:	39 f1                	cmp    ecx,esi
c0000d80:	76 12                	jbe    c0000d94 <sYSMALLOc+0xf9>
c0000d82:	84 c0                	test   al,al
c0000d84:	74 0e                	je     c0000d94 <sYSMALLOc+0xf9>
c0000d86:	83 e2 fe             	and    edx,0xfffffffe
c0000d89:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8f:	e9 83 00 00 00       	jmp    c0000e17 <sYSMALLOc+0x17c>
c0000d94:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d99:	74 7c                	je     c0000e17 <sYSMALLOc+0x17c>
c0000d9b:	84 c0                	test   al,al
c0000d9d:	74 0c                	je     c0000dab <sYSMALLOc+0x110>
c0000d9f:	89 f0                	mov    eax,esi
c0000da1:	29 c8                	sub    eax,ecx
c0000da3:	01 e8                	add    eax,ebp
c0000da5:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dab:	89 f2                	mov    edx,esi
c0000dad:	83 e2 07             	and    edx,0x7
c0000db0:	74 0c                	je     c0000dbe <sYSMALLOc+0x123>
c0000db2:	b8 08 00 00 00       	mov    eax,0x8
c0000db7:	29 d0                	sub    eax,edx
c0000db9:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbc:	eb 04                	jmp    c0000dc2 <sYSMALLOc+0x127>
c0000dbe:	89 f5                	mov    ebp,esi
c0000dc0:	31 c0                	xor    eax,eax
c0000dc2:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dce:	01 c1                	add    ecx,eax
c0000dd0:	83 ec 0c             	sub    esp,0xc
c0000dd3:	01 f1                	add    ecx,esi
c0000dd5:	01 ca                	add    edx,ecx
c0000dd7:	29 c8                	sub    eax,ecx
c0000dd9:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddd:	01 c2                	add    edx,eax
c0000ddf:	52                   	push   edx
c0000de0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de4:	e8 d2 e1 00 00       	call   c000efbb <sbrk>
c0000de9:	83 c4 10             	add    esp,0x10
c0000dec:	83 f8 ff             	cmp    eax,0xffffffff
c0000def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df3:	75 0f                	jne    c0000e04 <sYSMALLOc+0x169>
c0000df5:	83 ec 0c             	sub    esp,0xc
c0000df8:	6a 00                	push   0x0
c0000dfa:	e8 bc e1 00 00       	call   c000efbb <sbrk>
c0000dff:	83 c4 10             	add    esp,0x10
c0000e02:	eb 30                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e04:	39 c6                	cmp    esi,eax
c0000e06:	76 33                	jbe    c0000e3b <sYSMALLOc+0x1a0>
c0000e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e13:	01 f0                	add    eax,esi
c0000e15:	eb 1d                	jmp    c0000e34 <sYSMALLOc+0x199>
c0000e17:	83 ec 0c             	sub    esp,0xc
c0000e1a:	89 f5                	mov    ebp,esi
c0000e1c:	6a 00                	push   0x0
c0000e1e:	e8 98 e1 00 00       	call   c000efbb <sbrk>
c0000e23:	89 c2                	mov    edx,eax
c0000e25:	29 f2                	sub    edx,esi
c0000e27:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2b:	83 c4 10             	add    esp,0x10
c0000e2e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e34:	31 d2                	xor    edx,edx
c0000e36:	83 f8 ff             	cmp    eax,0xffffffff
c0000e39:	74 66                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e3b:	29 e8                	sub    eax,ebp
c0000e3d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e40:	01 d0                	add    eax,edx
c0000e42:	83 c8 01             	or     eax,0x1
c0000e45:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e53:	74 4c                	je     c0000ea1 <sYSMALLOc+0x206>
c0000e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e59:	83 e8 0c             	sub    eax,0xc
c0000e5c:	83 e0 f8             	and    eax,0xfffffff8
c0000e5f:	89 c2                	mov    edx,eax
c0000e61:	83 ca 01             	or     edx,0x1
c0000e64:	83 f8 0f             	cmp    eax,0xf
c0000e67:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e6a:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e72:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e7a:	76 25                	jbe    c0000ea1 <sYSMALLOc+0x206>
c0000e7c:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e82:	83 ec 0c             	sub    esp,0xc
c0000e85:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8f:	83 c7 08             	add    edi,0x8
c0000e92:	57                   	push   edi
c0000e93:	e8 0e fd ff ff       	call   c0000ba6 <dlfree>
c0000e98:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9e:	83 c4 10             	add    esp,0x10
c0000ea1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ead:	73 06                	jae    c0000eb5 <sYSMALLOc+0x21a>
c0000eaf:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ebb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec1:	73 06                	jae    c0000ec9 <sYSMALLOc+0x22e>
c0000ec3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ecf:	83 e2 fc             	and    edx,0xfffffffc
c0000ed2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed6:	0f 82 3c fe ff ff    	jb     c0000d18 <sYSMALLOc+0x7d>
c0000edc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ee0:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee3:	29 fa                	sub    edx,edi
c0000ee5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee8:	83 ca 01             	or     edx,0x1
c0000eeb:	89 fb                	mov    ebx,edi
c0000eed:	83 c0 08             	add    eax,0x8
c0000ef0:	83 cb 01             	or     ebx,0x1
c0000ef3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef9:	83 c4 2c             	add    esp,0x2c
c0000efc:	5b                   	pop    ebx
c0000efd:	5e                   	pop    esi
c0000efe:	5f                   	pop    edi
c0000eff:	5d                   	pop    ebp
c0000f00:	c3                   	ret    

c0000f01 <dlmalloc>:
c0000f01:	55                   	push   ebp
c0000f02:	57                   	push   edi
c0000f03:	56                   	push   esi
c0000f04:	53                   	push   ebx
c0000f05:	83 ec 1c             	sub    esp,0x1c
c0000f08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0c:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0f:	0f 87 70 03 00 00    	ja     c0001285 <dlmalloc+0x384>
c0000f15:	83 c0 0b             	add    eax,0xb
c0000f18:	be 10 00 00 00       	mov    esi,0x10
c0000f1d:	83 f8 0f             	cmp    eax,0xf
c0000f20:	76 05                	jbe    c0000f27 <dlmalloc+0x26>
c0000f22:	83 e0 f8             	and    eax,0xfffffff8
c0000f25:	89 c6                	mov    esi,eax
c0000f27:	8b 3d c0 a1 02 c0    	mov    edi,DWORD PTR ds:0xc002a1c0
c0000f2d:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f33:	75 17                	jne    c0000f4c <dlmalloc+0x4b>
c0000f35:	85 ff                	test   edi,edi
c0000f37:	0f 85 05 03 00 00    	jne    c0001242 <dlmalloc+0x341>
c0000f3d:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0000f42:	e8 78 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000f47:	e9 f6 02 00 00       	jmp    c0001242 <dlmalloc+0x341>
c0000f4c:	39 f7                	cmp    edi,esi
c0000f4e:	72 1f                	jb     c0000f6f <dlmalloc+0x6e>
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	c1 ea 03             	shr    edx,0x3
c0000f55:	83 ea 02             	sub    edx,0x2
c0000f58:	8b 04 95 c4 a1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5e3c]
c0000f5f:	85 c0                	test   eax,eax
c0000f61:	74 0c                	je     c0000f6f <dlmalloc+0x6e>
c0000f63:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f66:	89 0c 95 c4 a1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5e3c],ecx
c0000f6d:	eb 30                	jmp    c0000f9f <dlmalloc+0x9e>
c0000f6f:	89 f0                	mov    eax,esi
c0000f71:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f77:	77 2e                	ja     c0000fa7 <dlmalloc+0xa6>
c0000f79:	c1 e8 03             	shr    eax,0x3
c0000f7c:	8d 14 c5 f4 a1 02 c0 	lea    edx,[eax*8-0x3ffd5e0c]
c0000f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f87:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8d:	39 c3                	cmp    ebx,eax
c0000f8f:	74 2e                	je     c0000fbf <dlmalloc+0xbe>
c0000f91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f94:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f99:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9c:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9f:	83 c0 08             	add    eax,0x8
c0000fa2:	e9 e0 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0000fa7:	e8 8f fa ff ff       	call   c0000a3b <largebin_index>
c0000fac:	83 e7 02             	and    edi,0x2
c0000faf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb3:	74 0a                	je     c0000fbf <dlmalloc+0xbe>
c0000fb5:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0000fba:	e8 00 fb ff ff       	call   c0000abf <malloc_consolidate>
c0000fbf:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc6:	8b 1d 00 a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a200
c0000fcc:	81 fb f4 a1 02 c0    	cmp    ebx,0xc002a1f4
c0000fd2:	0f 84 13 01 00 00    	je     c00010eb <dlmalloc+0x1ea>
c0000fd8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fdb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fde:	83 e7 fc             	and    edi,0xfffffffc
c0000fe1:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe7:	77 4c                	ja     c0001035 <dlmalloc+0x134>
c0000fe9:	3d f4 a1 02 c0       	cmp    eax,0xc002a1f4
c0000fee:	75 45                	jne    c0001035 <dlmalloc+0x134>
c0000ff0:	39 1d f0 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1f0,ebx
c0000ff6:	75 3d                	jne    c0001035 <dlmalloc+0x134>
c0000ff8:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffc:	73 37                	jae    c0001035 <dlmalloc+0x134>
c0000ffe:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001001:	89 fa                	mov    edx,edi
c0001003:	a3 fc a1 02 c0       	mov    ds:0xc002a1fc,eax
c0001008:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c000100d:	a3 f0 a1 02 c0       	mov    ds:0xc002a1f0,eax
c0001012:	29 f2                	sub    edx,esi
c0001014:	c7 40 08 f4 a1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a1f4
c000101b:	c7 40 0c f4 a1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a1f4
c0001022:	83 ce 01             	or     esi,0x1
c0001025:	89 d1                	mov    ecx,edx
c0001027:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000102a:	83 c9 01             	or     ecx,0x1
c000102d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001030:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001033:	eb 15                	jmp    c000104a <dlmalloc+0x149>
c0001035:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c000103a:	39 fe                	cmp    esi,edi
c000103c:	c7 40 08 f4 a1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a1f4
c0001043:	75 0d                	jne    c0001052 <dlmalloc+0x151>
c0001045:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104a:	8d 43 08             	lea    eax,[ebx+0x8]
c000104d:	e9 35 02 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001052:	89 f8                	mov    eax,edi
c0001054:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105a:	77 19                	ja     c0001075 <dlmalloc+0x174>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 00             	lea    edx,[eax+eax*1]
c0001062:	83 c2 0d             	add    edx,0xd
c0001065:	8d 2c 95 b8 a1 02 c0 	lea    ebp,[edx*4-0x3ffd5e48]
c000106c:	8b 14 95 c0 a1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5e40]
c0001073:	eb 46                	jmp    c00010bb <dlmalloc+0x1ba>
c0001075:	e8 c1 f9 ff ff       	call   c0000a3b <largebin_index>
c000107a:	8d 14 00             	lea    edx,[eax+eax*1]
c000107d:	83 c2 0d             	add    edx,0xd
c0001080:	8d 0c 95 c0 a1 02 c0 	lea    ecx,[edx*4-0x3ffd5e40]
c0001087:	8b 14 95 c0 a1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5e40]
c000108e:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001091:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001095:	89 d5                	mov    ebp,edx
c0001097:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109b:	74 1e                	je     c00010bb <dlmalloc+0x1ba>
c000109d:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a0:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a3:	77 12                	ja     c00010b7 <dlmalloc+0x1b6>
c00010a5:	83 cf 01             	or     edi,0x1
c00010a8:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010ab:	76 05                	jbe    c00010b2 <dlmalloc+0x1b1>
c00010ad:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b0:	eb f6                	jmp    c00010a8 <dlmalloc+0x1a7>
c00010b2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b5:	eb 04                	jmp    c00010bb <dlmalloc+0x1ba>
c00010b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010bb:	89 c7                	mov    edi,eax
c00010bd:	88 c1                	mov    cl,al
c00010bf:	c1 ff 05             	sar    edi,0x5
c00010c2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c6:	bf 01 00 00 00       	mov    edi,0x1
c00010cb:	d3 e7                	shl    edi,cl
c00010cd:	89 f8                	mov    eax,edi
c00010cf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d3:	09 04 bd f4 a4 02 c0 	or     DWORD PTR [edi*4-0x3ffd5b0c],eax
c00010da:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e0:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e3:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e6:	e9 db fe ff ff       	jmp    c0000fc6 <dlmalloc+0xc5>
c00010eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f1:	76 78                	jbe    c000116b <dlmalloc+0x26a>
c00010f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f7:	8d 04 c5 f4 a1 02 c0 	lea    eax,[eax*8-0x3ffd5e0c]
c00010fe:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001101:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001104:	39 ca                	cmp    edx,ecx
c0001106:	74 63                	je     c000116b <dlmalloc+0x26a>
c0001108:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110e:	83 e3 fc             	and    ebx,0xfffffffc
c0001111:	39 de                	cmp    esi,ebx
c0001113:	77 52                	ja     c0001167 <dlmalloc+0x266>
c0001115:	89 df                	mov    edi,ebx
c0001117:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111a:	29 f7                	sub    edi,esi
c000111c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111f:	01 d3                	add    ebx,edx
c0001121:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001124:	83 ff 0f             	cmp    edi,0xf
c0001127:	8d 42 08             	lea    eax,[edx+0x8]
c000112a:	77 09                	ja     c0001135 <dlmalloc+0x234>
c000112c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001130:	e9 52 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001135:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001138:	83 ce 01             	or     esi,0x1
c000113b:	89 0d fc a1 02 c0    	mov    DWORD PTR ds:0xc002a1fc,ecx
c0001141:	89 0d 00 a2 02 c0    	mov    DWORD PTR ds:0xc002a200,ecx
c0001147:	c7 41 08 f4 a1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a1f4
c000114e:	c7 41 0c f4 a1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a1f4
c0001155:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001158:	89 fa                	mov    edx,edi
c000115a:	83 ca 01             	or     edx,0x1
c000115d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001160:	89 3b                	mov    DWORD PTR [ebx],edi
c0001162:	e9 20 01 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001167:	89 c2                	mov    edx,eax
c0001169:	eb 99                	jmp    c0001104 <dlmalloc+0x203>
c000116b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116f:	b8 01 00 00 00       	mov    eax,0x1
c0001174:	41                   	inc    ecx
c0001175:	89 cb                	mov    ebx,ecx
c0001177:	8d 14 cd ec a1 02 c0 	lea    edx,[ecx*8-0x3ffd5e14]
c000117e:	c1 eb 05             	shr    ebx,0x5
c0001181:	d3 e0                	shl    eax,cl
c0001183:	8b 3c 9d f4 a4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5b0c]
c000118a:	39 f8                	cmp    eax,edi
c000118c:	77 04                	ja     c0001192 <dlmalloc+0x291>
c000118e:	85 c0                	test   eax,eax
c0001190:	75 26                	jne    c00011b8 <dlmalloc+0x2b7>
c0001192:	43                   	inc    ebx
c0001193:	83 fb 02             	cmp    ebx,0x2
c0001196:	0f 87 a6 00 00 00    	ja     c0001242 <dlmalloc+0x341>
c000119c:	8b 3c 9d f4 a4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5b0c]
c00011a3:	85 ff                	test   edi,edi
c00011a5:	74 eb                	je     c0001192 <dlmalloc+0x291>
c00011a7:	89 d8                	mov    eax,ebx
c00011a9:	c1 e0 06             	shl    eax,0x6
c00011ac:	8d 14 85 ec a1 02 c0 	lea    edx,[eax*4-0x3ffd5e14]
c00011b3:	b8 01 00 00 00       	mov    eax,0x1
c00011b8:	85 f8                	test   eax,edi
c00011ba:	75 07                	jne    c00011c3 <dlmalloc+0x2c2>
c00011bc:	83 c2 08             	add    edx,0x8
c00011bf:	01 c0                	add    eax,eax
c00011c1:	eb f5                	jmp    c00011b8 <dlmalloc+0x2b7>
c00011c3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c6:	39 ca                	cmp    edx,ecx
c00011c8:	75 14                	jne    c00011de <dlmalloc+0x2dd>
c00011ca:	89 c1                	mov    ecx,eax
c00011cc:	83 c2 08             	add    edx,0x8
c00011cf:	f7 d1                	not    ecx
c00011d1:	01 c0                	add    eax,eax
c00011d3:	21 cf                	and    edi,ecx
c00011d5:	89 3c 9d f4 a4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5b0c],edi
c00011dc:	eb ac                	jmp    c000118a <dlmalloc+0x289>
c00011de:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e1:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e4:	83 e0 fc             	and    eax,0xfffffffc
c00011e7:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011ea:	89 c3                	mov    ebx,eax
c00011ec:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ef:	29 f3                	sub    ebx,esi
c00011f1:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f4:	83 fb 0f             	cmp    ebx,0xf
c00011f7:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fa:	77 09                	ja     c0001205 <dlmalloc+0x304>
c00011fc:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001200:	e9 82 00 00 00       	jmp    c0001287 <dlmalloc+0x386>
c0001205:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001208:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120e:	89 3d fc a1 02 c0    	mov    DWORD PTR ds:0xc002a1fc,edi
c0001214:	89 3d 00 a2 02 c0    	mov    DWORD PTR ds:0xc002a200,edi
c000121a:	c7 47 08 f4 a1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a1f4
c0001221:	c7 47 0c f4 a1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a1f4
c0001228:	77 06                	ja     c0001230 <dlmalloc+0x32f>
c000122a:	89 3d f0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1f0,edi
c0001230:	83 ce 01             	or     esi,0x1
c0001233:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001236:	89 d9                	mov    ecx,ebx
c0001238:	83 c9 01             	or     ecx,0x1
c000123b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123e:	89 1a                	mov    DWORD PTR [edx],ebx
c0001240:	eb 45                	jmp    c0001287 <dlmalloc+0x386>
c0001242:	a1 ec a1 02 c0       	mov    eax,ds:0xc002a1ec
c0001247:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124d:	83 e2 fc             	and    edx,0xfffffffc
c0001250:	39 d1                	cmp    ecx,edx
c0001252:	77 1e                	ja     c0001272 <dlmalloc+0x371>
c0001254:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001257:	89 f3                	mov    ebx,esi
c0001259:	89 0d ec a1 02 c0    	mov    DWORD PTR ds:0xc002a1ec,ecx
c000125f:	83 cb 01             	or     ebx,0x1
c0001262:	29 f2                	sub    edx,esi
c0001264:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001267:	83 ca 01             	or     edx,0x1
c000126a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126d:	e9 2d fd ff ff       	jmp    c0000f9f <dlmalloc+0x9e>
c0001272:	83 c4 1c             	add    esp,0x1c
c0001275:	89 f0                	mov    eax,esi
c0001277:	5b                   	pop    ebx
c0001278:	ba c0 a1 02 c0       	mov    edx,0xc002a1c0
c000127d:	5e                   	pop    esi
c000127e:	5f                   	pop    edi
c000127f:	5d                   	pop    ebp
c0001280:	e9 16 fa ff ff       	jmp    c0000c9b <sYSMALLOc>
c0001285:	31 c0                	xor    eax,eax
c0001287:	83 c4 1c             	add    esp,0x1c
c000128a:	5b                   	pop    ebx
c000128b:	5e                   	pop    esi
c000128c:	5f                   	pop    edi
c000128d:	5d                   	pop    ebp
c000128e:	c3                   	ret    

c000128f <iALLOc>:
c000128f:	55                   	push   ebp
c0001290:	89 c5                	mov    ebp,eax
c0001292:	57                   	push   edi
c0001293:	56                   	push   esi
c0001294:	53                   	push   ebx
c0001295:	83 ec 2c             	sub    esp,0x2c
c0001298:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a4:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c00012ab:	75 12                	jne    c00012bf <iALLOc+0x30>
c00012ad:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b1:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c00012b6:	e8 04 f8 ff ff       	call   c0000abf <malloc_consolidate>
c00012bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c4:	74 12                	je     c00012d8 <iALLOc+0x49>
c00012c6:	85 ed                	test   ebp,ebp
c00012c8:	0f 84 64 01 00 00    	je     c0001432 <iALLOc+0x1a3>
c00012ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d6:	eb 33                	jmp    c000130b <iALLOc+0x7c>
c00012d8:	85 ed                	test   ebp,ebp
c00012da:	75 14                	jne    c00012f0 <iALLOc+0x61>
c00012dc:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e4:	83 c4 2c             	add    esp,0x2c
c00012e7:	5b                   	pop    ebx
c00012e8:	5e                   	pop    esi
c00012e9:	5f                   	pop    edi
c00012ea:	5d                   	pop    ebp
c00012eb:	e9 11 fc ff ff       	jmp    c0000f01 <dlmalloc>
c00012f0:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f7:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012ff:	83 f8 0f             	cmp    eax,0xf
c0001302:	76 07                	jbe    c000130b <iALLOc+0x7c>
c0001304:	83 e0 f8             	and    eax,0xfffffff8
c0001307:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001310:	75 09                	jne    c000131b <iALLOc+0x8c>
c0001312:	89 d0                	mov    eax,edx
c0001314:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001317:	31 f6                	xor    esi,esi
c0001319:	eb 3b                	jmp    c0001356 <iALLOc+0xc7>
c000131b:	8b 02                	mov    eax,DWORD PTR [edx]
c000131d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001325:	83 c0 0b             	add    eax,0xb
c0001328:	83 f8 0f             	cmp    eax,0xf
c000132b:	76 07                	jbe    c0001334 <iALLOc+0xa5>
c000132d:	83 e0 f8             	and    eax,0xfffffff8
c0001330:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001334:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001338:	0f af f5             	imul   esi,ebp
c000133b:	eb 25                	jmp    c0001362 <iALLOc+0xd3>
c000133d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001342:	bb 10 00 00 00       	mov    ebx,0x10
c0001347:	83 f9 0f             	cmp    ecx,0xf
c000134a:	76 05                	jbe    c0001351 <iALLOc+0xc2>
c000134c:	83 e1 f8             	and    ecx,0xfffffff8
c000134f:	89 cb                	mov    ebx,ecx
c0001351:	01 de                	add    esi,ebx
c0001353:	83 c0 04             	add    eax,0x4
c0001356:	39 c7                	cmp    edi,eax
c0001358:	75 e3                	jne    c000133d <iALLOc+0xae>
c000135a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001362:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001366:	8b 1d 14 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a514
c000136c:	83 ec 0c             	sub    esp,0xc
c000136f:	c7 05 14 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a514,0x0
c0001379:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137d:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001381:	50                   	push   eax
c0001382:	e8 7a fb ff ff       	call   c0000f01 <dlmalloc>
c0001387:	83 c4 10             	add    esp,0x10
c000138a:	89 1d 14 a5 02 c0    	mov    DWORD PTR ds:0xc002a514,ebx
c0001390:	85 c0                	test   eax,eax
c0001392:	0f 84 92 00 00 00    	je     c000142a <iALLOc+0x19b>
c0001398:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139b:	8d 78 f8             	lea    edi,[eax-0x8]
c000139e:	83 e3 fc             	and    ebx,0xfffffffc
c00013a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a5:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013aa:	74 1e                	je     c00013ca <iALLOc+0x13b>
c00013ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b0:	89 d9                	mov    ecx,ebx
c00013b2:	52                   	push   edx
c00013b3:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b7:	83 e9 04             	sub    ecx,0x4
c00013ba:	51                   	push   ecx
c00013bb:	6a 00                	push   0x0
c00013bd:	50                   	push   eax
c00013be:	e8 02 f3 ff ff       	call   c00006c5 <memset>
c00013c3:	83 c4 10             	add    esp,0x10
c00013c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013ca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013cf:	75 14                	jne    c00013e5 <iALLOc+0x156>
c00013d1:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d4:	29 f3                	sub    ebx,esi
c00013d6:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d9:	83 cb 01             	or     ebx,0x1
c00013dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e3:	89 f3                	mov    ebx,esi
c00013e5:	31 c0                	xor    eax,eax
c00013e7:	4d                   	dec    ebp
c00013e8:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013eb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ef:	39 c5                	cmp    ebp,eax
c00013f1:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f4:	74 2c                	je     c0001422 <iALLOc+0x193>
c00013f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fa:	85 c9                	test   ecx,ecx
c00013fc:	75 15                	jne    c0001413 <iALLOc+0x184>
c00013fe:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001401:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001404:	b9 10 00 00 00       	mov    ecx,0x10
c0001409:	83 fe 0f             	cmp    esi,0xf
c000140c:	76 05                	jbe    c0001413 <iALLOc+0x184>
c000140e:	83 e6 f8             	and    esi,0xfffffff8
c0001411:	89 f1                	mov    ecx,esi
c0001413:	89 ce                	mov    esi,ecx
c0001415:	29 cb                	sub    ebx,ecx
c0001417:	83 ce 01             	or     esi,0x1
c000141a:	40                   	inc    eax
c000141b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141e:	01 cf                	add    edi,ecx
c0001420:	eb c6                	jmp    c00013e8 <iALLOc+0x159>
c0001422:	83 cb 01             	or     ebx,0x1
c0001425:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001428:	eb 08                	jmp    c0001432 <iALLOc+0x1a3>
c000142a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001436:	83 c4 2c             	add    esp,0x2c
c0001439:	5b                   	pop    ebx
c000143a:	5e                   	pop    esi
c000143b:	5f                   	pop    edi
c000143c:	5d                   	pop    ebp
c000143d:	c3                   	ret    

c000143e <dlrealloc>:
c000143e:	55                   	push   ebp
c000143f:	57                   	push   edi
c0001440:	56                   	push   esi
c0001441:	53                   	push   ebx
c0001442:	83 ec 1c             	sub    esp,0x1c
c0001445:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001449:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144d:	85 db                	test   ebx,ebx
c000144f:	75 10                	jne    c0001461 <dlrealloc+0x23>
c0001451:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	5b                   	pop    ebx
c0001459:	5e                   	pop    esi
c000145a:	5f                   	pop    edi
c000145b:	5d                   	pop    ebp
c000145c:	e9 a0 fa ff ff       	jmp    c0000f01 <dlmalloc>
c0001461:	83 f8 df             	cmp    eax,0xffffffdf
c0001464:	76 07                	jbe    c000146d <dlrealloc+0x2f>
c0001466:	31 db                	xor    ebx,ebx
c0001468:	e9 7c 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c000146d:	83 c0 0b             	add    eax,0xb
c0001470:	bf 10 00 00 00       	mov    edi,0x10
c0001475:	83 f8 0f             	cmp    eax,0xf
c0001478:	76 05                	jbe    c000147f <dlrealloc+0x41>
c000147a:	83 e0 f8             	and    eax,0xfffffff8
c000147d:	89 c7                	mov    edi,eax
c000147f:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001482:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001485:	89 c6                	mov    esi,eax
c0001487:	83 e6 fc             	and    esi,0xfffffffc
c000148a:	a8 02                	test   al,0x2
c000148c:	75 d8                	jne    c0001466 <dlrealloc+0x28>
c000148e:	39 f7                	cmp    edi,esi
c0001490:	0f 86 15 01 00 00    	jbe    c00015ab <dlrealloc+0x16d>
c0001496:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	39 15 ec a1 02 c0    	cmp    DWORD PTR ds:0xc002a1ec,edx
c00014a3:	75 33                	jne    c00014d8 <dlrealloc+0x9a>
c00014a5:	83 e1 fc             	and    ecx,0xfffffffc
c00014a8:	01 f1                	add    ecx,esi
c00014aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ae:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b1:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b5:	77 49                	ja     c0001500 <dlrealloc+0xc2>
c00014b7:	01 fd                	add    ebp,edi
c00014b9:	83 e0 01             	and    eax,0x1
c00014bc:	09 f8                	or     eax,edi
c00014be:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c1:	89 2d ec a1 02 c0    	mov    DWORD PTR ds:0xc002a1ec,ebp
c00014c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014cb:	29 f8                	sub    eax,edi
c00014cd:	83 c8 01             	or     eax,0x1
c00014d0:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d3:	e9 11 01 00 00       	jmp    c00015e9 <dlrealloc+0x1ab>
c00014d8:	89 c8                	mov    eax,ecx
c00014da:	83 e0 fe             	and    eax,0xfffffffe
c00014dd:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e2:	75 1c                	jne    c0001500 <dlrealloc+0xc2>
c00014e4:	83 e1 fc             	and    ecx,0xfffffffc
c00014e7:	01 f1                	add    ecx,esi
c00014e9:	39 cf                	cmp    edi,ecx
c00014eb:	77 13                	ja     c0001500 <dlrealloc+0xc2>
c00014ed:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f0:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f3:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f6:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f9:	89 ce                	mov    esi,ecx
c00014fb:	e9 ab 00 00 00       	jmp    c00015ab <dlrealloc+0x16d>
c0001500:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001504:	8d 47 f9             	lea    eax,[edi-0x7]
c0001507:	83 ec 0c             	sub    esp,0xc
c000150a:	50                   	push   eax
c000150b:	e8 f1 f9 ff ff       	call   c0000f01 <dlmalloc>
c0001510:	83 c4 10             	add    esp,0x10
c0001513:	89 c1                	mov    ecx,eax
c0001515:	85 c0                	test   eax,eax
c0001517:	0f 84 49 ff ff ff    	je     c0001466 <dlrealloc+0x28>
c000151d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001520:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001524:	39 c2                	cmp    edx,eax
c0001526:	75 0a                	jne    c0001532 <dlrealloc+0xf4>
c0001528:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	01 c6                	add    esi,eax
c0001530:	eb 79                	jmp    c00015ab <dlrealloc+0x16d>
c0001532:	83 ee 04             	sub    esi,0x4
c0001535:	83 fe 27             	cmp    esi,0x27
c0001538:	76 16                	jbe    c0001550 <dlrealloc+0x112>
c000153a:	50                   	push   eax
c000153b:	56                   	push   esi
c000153c:	53                   	push   ebx
c000153d:	51                   	push   ecx
c000153e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001542:	e8 48 f1 ff ff       	call   c000068f <memcpy>
c0001547:	83 c4 10             	add    esp,0x10
c000154a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154e:	eb 43                	jmp    c0001593 <dlrealloc+0x155>
c0001550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001552:	83 fe 13             	cmp    esi,0x13
c0001555:	89 01                	mov    DWORD PTR [ecx],eax
c0001557:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155a:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001560:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001563:	76 2e                	jbe    c0001593 <dlrealloc+0x155>
c0001565:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001568:	83 fe 1b             	cmp    esi,0x1b
c000156b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001571:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001574:	76 1d                	jbe    c0001593 <dlrealloc+0x155>
c0001576:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001579:	83 fe 23             	cmp    esi,0x23
c000157c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001582:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001585:	76 0c                	jbe    c0001593 <dlrealloc+0x155>
c0001587:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158a:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001590:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001593:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001597:	83 ec 0c             	sub    esp,0xc
c000159a:	53                   	push   ebx
c000159b:	e8 06 f6 ff ff       	call   c0000ba6 <dlfree>
c00015a0:	83 c4 10             	add    esp,0x10
c00015a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a7:	89 cb                	mov    ebx,ecx
c00015a9:	eb 3e                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015ab:	89 f2                	mov    edx,esi
c00015ad:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b0:	29 fa                	sub    edx,edi
c00015b2:	83 e1 01             	and    ecx,0x1
c00015b5:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b9:	83 fa 0f             	cmp    edx,0xf
c00015bc:	77 0b                	ja     c00015c9 <dlrealloc+0x18b>
c00015be:	09 ce                	or     esi,ecx
c00015c0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c7:	eb 20                	jmp    c00015e9 <dlrealloc+0x1ab>
c00015c9:	01 fd                	add    ebp,edi
c00015cb:	83 ec 0c             	sub    esp,0xc
c00015ce:	09 cf                	or     edi,ecx
c00015d0:	83 ca 01             	or     edx,0x1
c00015d3:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d6:	83 c5 08             	add    ebp,0x8
c00015d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015dc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e0:	55                   	push   ebp
c00015e1:	e8 c0 f5 ff ff       	call   c0000ba6 <dlfree>
c00015e6:	83 c4 10             	add    esp,0x10
c00015e9:	83 c4 1c             	add    esp,0x1c
c00015ec:	89 d8                	mov    eax,ebx
c00015ee:	5b                   	pop    ebx
c00015ef:	5e                   	pop    esi
c00015f0:	5f                   	pop    edi
c00015f1:	5d                   	pop    ebp
c00015f2:	c3                   	ret    

c00015f3 <dlmemalign>:
c00015f3:	55                   	push   ebp
c00015f4:	57                   	push   edi
c00015f5:	56                   	push   esi
c00015f6:	53                   	push   ebx
c00015f7:	83 ec 0c             	sub    esp,0xc
c00015fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001602:	83 fa 08             	cmp    edx,0x8
c0001605:	77 10                	ja     c0001617 <dlmemalign+0x24>
c0001607:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160b:	83 c4 0c             	add    esp,0xc
c000160e:	5b                   	pop    ebx
c000160f:	5e                   	pop    esi
c0001610:	5f                   	pop    edi
c0001611:	5d                   	pop    ebp
c0001612:	e9 ea f8 ff ff       	jmp    c0000f01 <dlmalloc>
c0001617:	bf 10 00 00 00       	mov    edi,0x10
c000161c:	83 fa 0f             	cmp    edx,0xf
c000161f:	76 13                	jbe    c0001634 <dlmemalign+0x41>
c0001621:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001624:	85 d1                	test   ecx,edx
c0001626:	75 04                	jne    c000162c <dlmemalign+0x39>
c0001628:	89 d7                	mov    edi,edx
c000162a:	eb 08                	jmp    c0001634 <dlmemalign+0x41>
c000162c:	39 d7                	cmp    edi,edx
c000162e:	73 04                	jae    c0001634 <dlmemalign+0x41>
c0001630:	01 ff                	add    edi,edi
c0001632:	eb f8                	jmp    c000162c <dlmemalign+0x39>
c0001634:	83 f8 df             	cmp    eax,0xffffffdf
c0001637:	76 07                	jbe    c0001640 <dlmemalign+0x4d>
c0001639:	31 c0                	xor    eax,eax
c000163b:	e9 ce 00 00 00       	jmp    c000170e <dlmemalign+0x11b>
c0001640:	83 c0 0b             	add    eax,0xb
c0001643:	bd 10 00 00 00       	mov    ebp,0x10
c0001648:	83 f8 0f             	cmp    eax,0xf
c000164b:	76 05                	jbe    c0001652 <dlmemalign+0x5f>
c000164d:	83 e0 f8             	and    eax,0xfffffff8
c0001650:	89 c5                	mov    ebp,eax
c0001652:	83 ec 0c             	sub    esp,0xc
c0001655:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001659:	50                   	push   eax
c000165a:	e8 a2 f8 ff ff       	call   c0000f01 <dlmalloc>
c000165f:	83 c4 10             	add    esp,0x10
c0001662:	89 c1                	mov    ecx,eax
c0001664:	85 c0                	test   eax,eax
c0001666:	74 d1                	je     c0001639 <dlmemalign+0x46>
c0001668:	31 d2                	xor    edx,edx
c000166a:	8d 70 f8             	lea    esi,[eax-0x8]
c000166d:	f7 f7                	div    edi
c000166f:	85 d2                	test   edx,edx
c0001671:	74 62                	je     c00016d5 <dlmemalign+0xe2>
c0001673:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001677:	89 f8                	mov    eax,edi
c0001679:	f7 d8                	neg    eax
c000167b:	21 c3                	and    ebx,eax
c000167d:	83 eb 08             	sub    ebx,0x8
c0001680:	89 d8                	mov    eax,ebx
c0001682:	29 f0                	sub    eax,esi
c0001684:	83 f8 0f             	cmp    eax,0xf
c0001687:	77 02                	ja     c000168b <dlmemalign+0x98>
c0001689:	01 fb                	add    ebx,edi
c000168b:	89 d8                	mov    eax,ebx
c000168d:	29 f0                	sub    eax,esi
c000168f:	89 c6                	mov    esi,eax
c0001691:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001694:	89 c2                	mov    edx,eax
c0001696:	83 e2 fc             	and    edx,0xfffffffc
c0001699:	29 f2                	sub    edx,esi
c000169b:	a8 02                	test   al,0x2
c000169d:	74 10                	je     c00016af <dlmemalign+0xbc>
c000169f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a2:	83 ca 02             	or     edx,0x2
c00016a5:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a8:	89 33                	mov    DWORD PTR [ebx],esi
c00016aa:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ad:	eb 5f                	jmp    c000170e <dlmemalign+0x11b>
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	89 d0                	mov    eax,edx
c00016b4:	83 c8 01             	or     eax,0x1
c00016b7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016ba:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016bf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 f0                	or     eax,esi
c00016c7:	89 de                	mov    esi,ebx
c00016c9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cc:	51                   	push   ecx
c00016cd:	e8 d4 f4 ff ff       	call   c0000ba6 <dlfree>
c00016d2:	83 c4 10             	add    esp,0x10
c00016d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d8:	a8 02                	test   al,0x2
c00016da:	75 2f                	jne    c000170b <dlmemalign+0x118>
c00016dc:	83 e0 fc             	and    eax,0xfffffffc
c00016df:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e2:	39 c2                	cmp    edx,eax
c00016e4:	73 25                	jae    c000170b <dlmemalign+0x118>
c00016e6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e9:	83 ec 0c             	sub    esp,0xc
c00016ec:	29 e8                	sub    eax,ebp
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	83 c8 01             	or     eax,0x1
c00016f4:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fa:	83 e0 01             	and    eax,0x1
c00016fd:	09 c5                	or     ebp,eax
c00016ff:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001702:	52                   	push   edx
c0001703:	e8 9e f4 ff ff       	call   c0000ba6 <dlfree>
c0001708:	83 c4 10             	add    esp,0x10
c000170b:	8d 46 08             	lea    eax,[esi+0x8]
c000170e:	83 c4 0c             	add    esp,0xc
c0001711:	5b                   	pop    ebx
c0001712:	5e                   	pop    esi
c0001713:	5f                   	pop    edi
c0001714:	5d                   	pop    ebp
c0001715:	c3                   	ret    

c0001716 <dlcalloc>:
c0001716:	53                   	push   ebx
c0001717:	83 ec 14             	sub    esp,0x14
c000171a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001723:	50                   	push   eax
c0001724:	e8 d8 f7 ff ff       	call   c0000f01 <dlmalloc>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	89 c3                	mov    ebx,eax
c000172e:	85 c0                	test   eax,eax
c0001730:	74 77                	je     c00017a9 <dlcalloc+0x93>
c0001732:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001735:	89 d0                	mov    eax,edx
c0001737:	83 e0 fc             	and    eax,0xfffffffc
c000173a:	80 e2 02             	and    dl,0x2
c000173d:	75 5a                	jne    c0001799 <dlcalloc+0x83>
c000173f:	83 e8 04             	sub    eax,0x4
c0001742:	83 f8 27             	cmp    eax,0x27
c0001745:	76 03                	jbe    c000174a <dlcalloc+0x34>
c0001747:	51                   	push   ecx
c0001748:	eb 53                	jmp    c000179d <dlcalloc+0x87>
c000174a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001750:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001757:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175e:	83 f8 13             	cmp    eax,0x13
c0001761:	76 46                	jbe    c00017a9 <dlcalloc+0x93>
c0001763:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001771:	83 f8 1b             	cmp    eax,0x1b
c0001774:	76 33                	jbe    c00017a9 <dlcalloc+0x93>
c0001776:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001784:	83 f8 23             	cmp    eax,0x23
c0001787:	76 20                	jbe    c00017a9 <dlcalloc+0x93>
c0001789:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001790:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001797:	eb 10                	jmp    c00017a9 <dlcalloc+0x93>
c0001799:	83 e8 08             	sub    eax,0x8
c000179c:	52                   	push   edx
c000179d:	50                   	push   eax
c000179e:	6a 00                	push   0x0
c00017a0:	53                   	push   ebx
c00017a1:	e8 1f ef ff ff       	call   c00006c5 <memset>
c00017a6:	83 c4 10             	add    esp,0x10
c00017a9:	89 d8                	mov    eax,ebx
c00017ab:	83 c4 08             	add    esp,0x8
c00017ae:	5b                   	pop    ebx
c00017af:	c3                   	ret    

c00017b0 <dlcfree>:
c00017b0:	e9 f1 f3 ff ff       	jmp    c0000ba6 <dlfree>

c00017b5 <dlindependent_calloc>:
c00017b5:	83 ec 28             	sub    esp,0x28
c00017b8:	b9 03 00 00 00       	mov    ecx,0x3
c00017bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d1:	e8 b9 fa ff ff       	call   c000128f <iALLOc>
c00017d6:	83 c4 2c             	add    esp,0x2c
c00017d9:	c3                   	ret    

c00017da <dlindependent_comalloc>:
c00017da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e2:	31 c9                	xor    ecx,ecx
c00017e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017ec:	e9 9e fa ff ff       	jmp    c000128f <iALLOc>

c00017f1 <dlvalloc>:
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c00017fb:	75 0a                	jne    c0001807 <dlvalloc+0x16>
c00017fd:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0001802:	e8 b8 f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001807:	50                   	push   eax
c0001808:	50                   	push   eax
c0001809:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180d:	ff 35 1c a5 02 c0    	push   DWORD PTR ds:0xc002a51c
c0001813:	e8 db fd ff ff       	call   c00015f3 <dlmemalign>
c0001818:	83 c4 1c             	add    esp,0x1c
c000181b:	c3                   	ret    

c000181c <dlpvalloc>:
c000181c:	83 ec 0c             	sub    esp,0xc
c000181f:	83 3d c0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1c0,0x0
c0001826:	75 0a                	jne    c0001832 <dlpvalloc+0x16>
c0001828:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c000182d:	e8 8d f2 ff ff       	call   c0000abf <malloc_consolidate>
c0001832:	a1 1c a5 02 c0       	mov    eax,ds:0xc002a51c
c0001837:	89 c1                	mov    ecx,eax
c0001839:	52                   	push   edx
c000183a:	f7 d9                	neg    ecx
c000183c:	52                   	push   edx
c000183d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001841:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001845:	21 ca                	and    edx,ecx
c0001847:	52                   	push   edx
c0001848:	50                   	push   eax
c0001849:	e8 a5 fd ff ff       	call   c00015f3 <dlmemalign>
c000184e:	83 c4 1c             	add    esp,0x1c
c0001851:	c3                   	ret    

c0001852 <dlmalloc_trim>:
c0001852:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0001857:	e8 63 f2 ff ff       	call   c0000abf <malloc_consolidate>
c000185c:	31 c0                	xor    eax,eax
c000185e:	c3                   	ret    

c000185f <dlmalloc_usable_size>:
c000185f:	53                   	push   ebx
c0001860:	31 c0                	xor    eax,eax
c0001862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001866:	85 c9                	test   ecx,ecx
c0001868:	74 24                	je     c000188e <dlmalloc_usable_size+0x2f>
c000186a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186d:	f6 c2 02             	test   dl,0x2
c0001870:	74 08                	je     c000187a <dlmalloc_usable_size+0x1b>
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	8d 42 f8             	lea    eax,[edx-0x8]
c0001878:	eb 14                	jmp    c000188e <dlmalloc_usable_size+0x2f>
c000187a:	89 d3                	mov    ebx,edx
c000187c:	31 c0                	xor    eax,eax
c000187e:	83 e3 fe             	and    ebx,0xfffffffe
c0001881:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001886:	74 06                	je     c000188e <dlmalloc_usable_size+0x2f>
c0001888:	83 e2 fc             	and    edx,0xfffffffc
c000188b:	8d 42 fc             	lea    eax,[edx-0x4]
c000188e:	5b                   	pop    ebx
c000188f:	c3                   	ret    

c0001890 <dlmallinfo>:
c0001890:	55                   	push   ebp
c0001891:	57                   	push   edi
c0001892:	56                   	push   esi
c0001893:	53                   	push   ebx
c0001894:	83 ec 08             	sub    esp,0x8
c0001897:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189b:	83 3d ec a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1ec,0x0
c00018a2:	75 0a                	jne    c00018ae <dlmallinfo+0x1e>
c00018a4:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c00018a9:	e8 11 f2 ff ff       	call   c0000abf <malloc_consolidate>
c00018ae:	a1 ec a1 02 c0       	mov    eax,ds:0xc002a1ec
c00018b3:	31 ed                	xor    ebp,ebp
c00018b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b8:	31 c9                	xor    ecx,ecx
c00018ba:	83 e0 fc             	and    eax,0xfffffffc
c00018bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c1:	31 c0                	xor    eax,eax
c00018c3:	8b 14 85 c4 a1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5e3c]
c00018ca:	85 d2                	test   edx,edx
c00018cc:	74 0e                	je     c00018dc <dlmallinfo+0x4c>
c00018ce:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d1:	45                   	inc    ebp
c00018d2:	83 e6 fc             	and    esi,0xfffffffc
c00018d5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d8:	01 f1                	add    ecx,esi
c00018da:	eb ee                	jmp    c00018ca <dlmallinfo+0x3a>
c00018dc:	40                   	inc    eax
c00018dd:	83 f8 0a             	cmp    eax,0xa
c00018e0:	75 e1                	jne    c00018c3 <dlmallinfo+0x33>
c00018e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f0:	b8 f4 a1 02 c0       	mov    eax,0xc002a1f4
c00018f5:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f8:	39 f0                	cmp    eax,esi
c00018fa:	74 10                	je     c000190c <dlmallinfo+0x7c>
c00018fc:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018ff:	ff 04 24             	inc    DWORD PTR [esp]
c0001902:	83 e7 fc             	and    edi,0xfffffffc
c0001905:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001908:	01 fa                	add    edx,edi
c000190a:	eb ec                	jmp    c00018f8 <dlmallinfo+0x68>
c000190c:	83 c0 08             	add    eax,0x8
c000190f:	3d ec a4 02 c0       	cmp    eax,0xc002a4ec
c0001914:	75 df                	jne    c00018f5 <dlmallinfo+0x65>
c0001916:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001919:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191f:	a1 28 a5 02 c0       	mov    eax,ds:0xc002a528
c0001924:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001927:	89 03                	mov    DWORD PTR [ebx],eax
c0001929:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192c:	8b 35 10 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a510
c0001932:	29 d0                	sub    eax,edx
c0001934:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001937:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000193a:	8b 35 24 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a524
c0001940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001944:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001947:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000194a:	8b 35 34 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a534
c0001950:	89 d8                	mov    eax,ebx
c0001952:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001955:	83 c4 08             	add    esp,0x8
c0001958:	5b                   	pop    ebx
c0001959:	5e                   	pop    esi
c000195a:	5f                   	pop    edi
c000195b:	5d                   	pop    ebp
c000195c:	c2 04 00             	ret    0x4

c000195f <dlmalloc_stats>:
c000195f:	83 ec 30             	sub    esp,0x30
c0001962:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001966:	50                   	push   eax
c0001967:	e8 24 ff ff ff       	call   c0001890 <dlmallinfo>
c000196c:	83 c4 30             	add    esp,0x30
c000196f:	c3                   	ret    

c0001970 <dlmallopt>:
c0001970:	56                   	push   esi
c0001971:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0001976:	53                   	push   ebx
c0001977:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197f:	e8 3b f1 ff ff       	call   c0000abf <malloc_consolidate>
c0001984:	8d 46 04             	lea    eax,[esi+0x4]
c0001987:	83 f8 05             	cmp    eax,0x5
c000198a:	77 67                	ja     c00019f3 <dlmallopt+0x83>
c000198c:	ff 24 85 44 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda1bc]
c0001993:	83 fb 50             	cmp    ebx,0x50
c0001996:	77 5b                	ja     c00019f3 <dlmallopt+0x83>
c0001998:	ba 08 00 00 00       	mov    edx,0x8
c000199d:	85 db                	test   ebx,ebx
c000199f:	74 12                	je     c00019b3 <dlmallopt+0x43>
c00019a1:	83 c3 0b             	add    ebx,0xb
c00019a4:	ba 10 00 00 00       	mov    edx,0x10
c00019a9:	83 fb 0f             	cmp    ebx,0xf
c00019ac:	76 05                	jbe    c00019b3 <dlmallopt+0x43>
c00019ae:	89 da                	mov    edx,ebx
c00019b0:	83 e2 f8             	and    edx,0xfffffff8
c00019b3:	a1 c0 a1 02 c0       	mov    eax,ds:0xc002a1c0
c00019b8:	83 e0 03             	and    eax,0x3
c00019bb:	09 d0                	or     eax,edx
c00019bd:	a3 c0 a1 02 c0       	mov    ds:0xc002a1c0,eax
c00019c2:	eb 31                	jmp    c00019f5 <dlmallopt+0x85>
c00019c4:	89 1d 04 a5 02 c0    	mov    DWORD PTR ds:0xc002a504,ebx
c00019ca:	eb 06                	jmp    c00019d2 <dlmallopt+0x62>
c00019cc:	89 1d 08 a5 02 c0    	mov    DWORD PTR ds:0xc002a508,ebx
c00019d2:	be 01 00 00 00       	mov    esi,0x1
c00019d7:	eb 1c                	jmp    c00019f5 <dlmallopt+0x85>
c00019d9:	89 1d 0c a5 02 c0    	mov    DWORD PTR ds:0xc002a50c,ebx
c00019df:	eb f1                	jmp    c00019d2 <dlmallopt+0x62>
c00019e1:	31 f6                	xor    esi,esi
c00019e3:	85 db                	test   ebx,ebx
c00019e5:	75 0e                	jne    c00019f5 <dlmallopt+0x85>
c00019e7:	c7 05 14 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a514,0x0
c00019f1:	eb df                	jmp    c00019d2 <dlmallopt+0x62>
c00019f3:	31 f6                	xor    esi,esi
c00019f5:	89 f0                	mov    eax,esi
c00019f7:	5b                   	pop    ebx
c00019f8:	5e                   	pop    esi
c00019f9:	c3                   	ret    

c00019fa <disk_status>:
c00019fa:	31 c0                	xor    eax,eax
c00019fc:	c3                   	ret    

c00019fd <disk_initialize>:
c00019fd:	31 c0                	xor    eax,eax
c00019ff:	c3                   	ret    

c0001a00 <disk_read>:
c0001a00:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a05:	0f b6 04 85 80 bb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4480]
c0001a0d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a11:	e9 60 cc 01 00       	jmp    c001e676 <fatWrapperReadDisk>

c0001a16 <disk_write>:
c0001a16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1b:	0f b6 04 85 80 bb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4480]
c0001a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a27:	e9 91 cc 01 00       	jmp    c001e6bd <fatWrapperWriteDisk>

c0001a2c <disk_ioctl>:
c0001a2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a35:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3a:	0f b6 04 85 80 bb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4480]
c0001a42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a46:	e9 b9 cc 01 00       	jmp    c001e704 <fatWrapperIoctl>

c0001a4b <ld_word>:
c0001a4b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a52:	c1 e2 08             	shl    edx,0x8
c0001a55:	09 d0                	or     eax,edx
c0001a57:	c3                   	ret    

c0001a58 <ld_dword>:
c0001a58:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5c:	89 d1                	mov    ecx,edx
c0001a5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a62:	c1 e1 08             	shl    ecx,0x8
c0001a65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a68:	09 ca                	or     edx,ecx
c0001a6a:	c1 e2 08             	shl    edx,0x8
c0001a6d:	09 d0                	or     eax,edx
c0001a6f:	c3                   	ret    

c0001a70 <ld_qword>:
c0001a70:	57                   	push   edi
c0001a71:	56                   	push   esi
c0001a72:	53                   	push   ebx
c0001a73:	31 db                	xor    ebx,ebx
c0001a75:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a78:	89 df                	mov    edi,ebx
c0001a7a:	89 ce                	mov    esi,ecx
c0001a7c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a80:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a84:	c1 e6 08             	shl    esi,0x8
c0001a87:	09 f2                	or     edx,esi
c0001a89:	89 d6                	mov    esi,edx
c0001a8b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a93:	c1 e6 08             	shl    esi,0x8
c0001a96:	09 f2                	or     edx,esi
c0001a98:	89 d6                	mov    esi,edx
c0001a9a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	89 fb                	mov    ebx,edi
c0001aaa:	09 f2                	or     edx,esi
c0001aac:	89 d1                	mov    ecx,edx
c0001aae:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab2:	c1 e1 08             	shl    ecx,0x8
c0001ab5:	89 da                	mov    edx,ebx
c0001ab7:	09 c8                	or     eax,ecx
c0001ab9:	5b                   	pop    ebx
c0001aba:	5e                   	pop    esi
c0001abb:	5f                   	pop    edi
c0001abc:	c3                   	ret    

c0001abd <st_word>:
c0001abd:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac0:	c3                   	ret    

c0001ac1 <st_dword>:
c0001ac1:	89 10                	mov    DWORD PTR [eax],edx
c0001ac3:	c3                   	ret    

c0001ac4 <st_qword>:
c0001ac4:	89 10                	mov    DWORD PTR [eax],edx
c0001ac6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac9:	c3                   	ret    

c0001aca <mem_cpy>:
c0001aca:	85 c9                	test   ecx,ecx
c0001acc:	74 10                	je     c0001ade <mem_cpy+0x14>
c0001ace:	57                   	push   edi
c0001acf:	01 c1                	add    ecx,eax
c0001ad1:	56                   	push   esi
c0001ad2:	89 c7                	mov    edi,eax
c0001ad4:	89 d6                	mov    esi,edx
c0001ad6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad7:	39 f9                	cmp    ecx,edi
c0001ad9:	75 fb                	jne    c0001ad6 <mem_cpy+0xc>
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    
c0001ade:	c3                   	ret    

c0001adf <mem_set>:
c0001adf:	01 c1                	add    ecx,eax
c0001ae1:	40                   	inc    eax
c0001ae2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae5:	39 c8                	cmp    eax,ecx
c0001ae7:	75 f8                	jne    c0001ae1 <mem_set+0x2>
c0001ae9:	c3                   	ret    

c0001aea <mem_cmp>:
c0001aea:	57                   	push   edi
c0001aeb:	56                   	push   esi
c0001aec:	89 c6                	mov    esi,eax
c0001aee:	53                   	push   ebx
c0001aef:	46                   	inc    esi
c0001af0:	42                   	inc    edx
c0001af1:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af9:	29 fb                	sub    ebx,edi
c0001afb:	89 cf                	mov    edi,ecx
c0001afd:	29 f7                	sub    edi,esi
c0001aff:	01 c7                	add    edi,eax
c0001b01:	74 04                	je     c0001b07 <mem_cmp+0x1d>
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	74 e8                	je     c0001aef <mem_cmp+0x5>
c0001b07:	89 d8                	mov    eax,ebx
c0001b09:	5b                   	pop    ebx
c0001b0a:	5e                   	pop    esi
c0001b0b:	5f                   	pop    edi
c0001b0c:	c3                   	ret    

c0001b0d <chk_chr>:
c0001b0d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b10:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b13:	74 07                	je     c0001b1c <chk_chr+0xf>
c0001b15:	39 d1                	cmp    ecx,edx
c0001b17:	74 03                	je     c0001b1c <chk_chr+0xf>
c0001b19:	40                   	inc    eax
c0001b1a:	eb f1                	jmp    c0001b0d <chk_chr>
c0001b1c:	89 c8                	mov    eax,ecx
c0001b1e:	c3                   	ret    

c0001b1f <dbc_1st>:
c0001b1f:	31 c0                	xor    eax,eax
c0001b21:	c3                   	ret    

c0001b22 <dbc_2nd>:
c0001b22:	31 c0                	xor    eax,eax
c0001b24:	c3                   	ret    

c0001b25 <tchar2uni>:
c0001b25:	57                   	push   edi
c0001b26:	89 c7                	mov    edi,eax
c0001b28:	56                   	push   esi
c0001b29:	53                   	push   ebx
c0001b2a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b31:	84 c9                	test   cl,cl
c0001b33:	78 0a                	js     c0001b3f <tchar2uni+0x1a>
c0001b35:	0f b6 d1             	movzx  edx,cl
c0001b38:	89 f3                	mov    ebx,esi
c0001b3a:	e9 9f 00 00 00       	jmp    c0001bde <tchar2uni+0xb9>
c0001b3f:	88 ca                	mov    dl,cl
c0001b41:	83 e2 e0             	and    edx,0xffffffe0
c0001b44:	80 fa c0             	cmp    dl,0xc0
c0001b47:	75 0c                	jne    c0001b55 <tchar2uni+0x30>
c0001b49:	89 ca                	mov    edx,ecx
c0001b4b:	b9 01 00 00 00       	mov    ecx,0x1
c0001b50:	83 e2 1f             	and    edx,0x1f
c0001b53:	eb 2e                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b55:	88 ca                	mov    dl,cl
c0001b57:	83 e2 f0             	and    edx,0xfffffff0
c0001b5a:	80 fa e0             	cmp    dl,0xe0
c0001b5d:	75 0c                	jne    c0001b6b <tchar2uni+0x46>
c0001b5f:	89 ca                	mov    edx,ecx
c0001b61:	b9 02 00 00 00       	mov    ecx,0x2
c0001b66:	83 e2 0f             	and    edx,0xf
c0001b69:	eb 18                	jmp    c0001b83 <tchar2uni+0x5e>
c0001b6b:	88 ca                	mov    dl,cl
c0001b6d:	83 e2 f8             	and    edx,0xfffffff8
c0001b70:	88 d0                	mov    al,dl
c0001b72:	83 ca ff             	or     edx,0xffffffff
c0001b75:	3c f0                	cmp    al,0xf0
c0001b77:	75 6c                	jne    c0001be5 <tchar2uni+0xc0>
c0001b79:	89 ca                	mov    edx,ecx
c0001b7b:	b9 03 00 00 00       	mov    ecx,0x3
c0001b80:	83 e2 07             	and    edx,0x7
c0001b83:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b87:	46                   	inc    esi
c0001b88:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8b:	88 c8                	mov    al,cl
c0001b8d:	83 e0 c0             	and    eax,0xffffffc0
c0001b90:	3c 80                	cmp    al,0x80
c0001b92:	75 4e                	jne    c0001be2 <tchar2uni+0xbd>
c0001b94:	c1 e2 06             	shl    edx,0x6
c0001b97:	83 e1 3f             	and    ecx,0x3f
c0001b9a:	09 ca                	or     edx,ecx
c0001b9c:	39 de                	cmp    esi,ebx
c0001b9e:	75 e7                	jne    c0001b87 <tchar2uni+0x62>
c0001ba0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba9:	77 37                	ja     c0001be2 <tchar2uni+0xbd>
c0001bab:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb7:	76 29                	jbe    c0001be2 <tchar2uni+0xbd>
c0001bb9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbf:	76 1d                	jbe    c0001bde <tchar2uni+0xb9>
c0001bc1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcd:	c1 e1 06             	shl    ecx,0x6
c0001bd0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd6:	09 ca                	or     edx,ecx
c0001bd8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bde:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be0:	eb 03                	jmp    c0001be5 <tchar2uni+0xc0>
c0001be2:	83 ca ff             	or     edx,0xffffffff
c0001be5:	5b                   	pop    ebx
c0001be6:	89 d0                	mov    eax,edx
c0001be8:	5e                   	pop    esi
c0001be9:	5f                   	pop    edi
c0001bea:	c3                   	ret    

c0001beb <put_utf>:
c0001beb:	53                   	push   ebx
c0001bec:	83 f8 7f             	cmp    eax,0x7f
c0001bef:	89 c3                	mov    ebx,eax
c0001bf1:	b0 00                	mov    al,0x0
c0001bf3:	77 11                	ja     c0001c06 <put_utf+0x1b>
c0001bf5:	85 c9                	test   ecx,ecx
c0001bf7:	0f 84 e5 00 00 00    	je     c0001ce2 <put_utf+0xf7>
c0001bfd:	88 1a                	mov    BYTE PTR [edx],bl
c0001bff:	b0 01                	mov    al,0x1
c0001c01:	e9 dc 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c06:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0c:	77 23                	ja     c0001c31 <put_utf+0x46>
c0001c0e:	83 f9 01             	cmp    ecx,0x1
c0001c11:	0f 86 cb 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	83 e3 3f             	and    ebx,0x3f
c0001c1c:	c1 e8 06             	shr    eax,0x6
c0001c1f:	83 cb 80             	or     ebx,0xffffff80
c0001c22:	83 c8 c0             	or     eax,0xffffffc0
c0001c25:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c28:	88 02                	mov    BYTE PTR [edx],al
c0001c2a:	b0 02                	mov    al,0x2
c0001c2c:	e9 b1 00 00 00       	jmp    c0001ce2 <put_utf+0xf7>
c0001c31:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c37:	77 40                	ja     c0001c79 <put_utf+0x8e>
c0001c39:	83 f9 02             	cmp    ecx,0x2
c0001c3c:	0f 86 a0 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c42:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c48:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4e:	0f 86 8e 00 00 00    	jbe    c0001ce2 <put_utf+0xf7>
c0001c54:	89 d8                	mov    eax,ebx
c0001c56:	c1 e8 0c             	shr    eax,0xc
c0001c59:	83 c8 e0             	or     eax,0xffffffe0
c0001c5c:	88 02                	mov    BYTE PTR [edx],al
c0001c5e:	89 d8                	mov    eax,ebx
c0001c60:	83 e3 3f             	and    ebx,0x3f
c0001c63:	c1 e8 06             	shr    eax,0x6
c0001c66:	83 cb 80             	or     ebx,0xffffff80
c0001c69:	83 e0 3f             	and    eax,0x3f
c0001c6c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6f:	83 c8 80             	or     eax,0xffffff80
c0001c72:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c75:	b0 03                	mov    al,0x3
c0001c77:	eb 69                	jmp    c0001ce2 <put_utf+0xf7>
c0001c79:	83 f9 03             	cmp    ecx,0x3
c0001c7c:	76 64                	jbe    c0001ce2 <put_utf+0xf7>
c0001c7e:	89 d9                	mov    ecx,ebx
c0001c80:	0f b7 c3             	movzx  eax,bx
c0001c83:	66 31 c9             	xor    cx,cx
c0001c86:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c92:	c1 e9 06             	shr    ecx,0x6
c0001c95:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9b:	77 43                	ja     c0001ce0 <put_utf+0xf5>
c0001c9d:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca3:	77 3b                	ja     c0001ce0 <put_utf+0xf5>
c0001ca5:	09 cb                	or     ebx,ecx
c0001ca7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cad:	89 d8                	mov    eax,ebx
c0001caf:	c1 e8 12             	shr    eax,0x12
c0001cb2:	83 c8 f0             	or     eax,0xfffffff0
c0001cb5:	88 02                	mov    BYTE PTR [edx],al
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	c1 e8 0c             	shr    eax,0xc
c0001cbc:	83 e0 3f             	and    eax,0x3f
c0001cbf:	83 c8 80             	or     eax,0xffffff80
c0001cc2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc5:	89 d8                	mov    eax,ebx
c0001cc7:	83 e3 3f             	and    ebx,0x3f
c0001cca:	c1 e8 06             	shr    eax,0x6
c0001ccd:	83 cb 80             	or     ebx,0xffffff80
c0001cd0:	83 e0 3f             	and    eax,0x3f
c0001cd3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd6:	83 c8 80             	or     eax,0xffffff80
c0001cd9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdc:	b0 04                	mov    al,0x4
c0001cde:	eb 02                	jmp    c0001ce2 <put_utf+0xf7>
c0001ce0:	31 c0                	xor    eax,eax
c0001ce2:	5b                   	pop    ebx
c0001ce3:	c3                   	ret    

c0001ce4 <clst2sect>:
c0001ce4:	89 c1                	mov    ecx,eax
c0001ce6:	83 ea 02             	sub    edx,0x2
c0001ce9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cec:	83 e8 02             	sub    eax,0x2
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	76 0d                	jbe    c0001d00 <clst2sect+0x1c>
c0001cf3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf7:	f7 e2                	mul    edx
c0001cf9:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfc:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cff:	c3                   	ret    
c0001d00:	31 c0                	xor    eax,eax
c0001d02:	31 d2                	xor    edx,edx
c0001d04:	c3                   	ret    

c0001d05 <clmt_clust>:
c0001d05:	57                   	push   edi
c0001d06:	89 cf                	mov    edi,ecx
c0001d08:	56                   	push   esi
c0001d09:	89 d6                	mov    esi,edx
c0001d0b:	53                   	push   ebx
c0001d0c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d10:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d13:	89 f2                	mov    edx,esi
c0001d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d17:	c1 ef 09             	shr    edi,0x9
c0001d1a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d21:	89 f9                	mov    ecx,edi
c0001d23:	31 ff                	xor    edi,edi
c0001d25:	57                   	push   edi
c0001d26:	56                   	push   esi
c0001d27:	51                   	push   ecx
c0001d28:	52                   	push   edx
c0001d29:	e8 ae 17 02 00       	call   c00234dc <__udivdi3>
c0001d2e:	83 c4 10             	add    esp,0x10
c0001d31:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d33:	85 d2                	test   edx,edx
c0001d35:	74 10                	je     c0001d47 <clmt_clust+0x42>
c0001d37:	39 d0                	cmp    eax,edx
c0001d39:	72 07                	jb     c0001d42 <clmt_clust+0x3d>
c0001d3b:	29 d0                	sub    eax,edx
c0001d3d:	83 c3 08             	add    ebx,0x8
c0001d40:	eb ef                	jmp    c0001d31 <clmt_clust+0x2c>
c0001d42:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d45:	89 c2                	mov    edx,eax
c0001d47:	5b                   	pop    ebx
c0001d48:	89 d0                	mov    eax,edx
c0001d4a:	5e                   	pop    esi
c0001d4b:	5f                   	pop    edi
c0001d4c:	c3                   	ret    

c0001d4d <pick_lfn>:
c0001d4d:	55                   	push   ebp
c0001d4e:	57                   	push   edi
c0001d4f:	56                   	push   esi
c0001d50:	89 d6                	mov    esi,edx
c0001d52:	53                   	push   ebx
c0001d53:	89 c3                	mov    ebx,eax
c0001d55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d58:	e8 ee fc ff ff       	call   c0001a4b <ld_word>
c0001d5d:	66 85 c0             	test   ax,ax
c0001d60:	74 04                	je     c0001d66 <pick_lfn+0x19>
c0001d62:	31 c0                	xor    eax,eax
c0001d64:	eb 5c                	jmp    c0001dc2 <pick_lfn+0x75>
c0001d66:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d69:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6e:	83 e1 bf             	and    ecx,0xffffffbf
c0001d71:	31 ff                	xor    edi,edi
c0001d73:	49                   	dec    ecx
c0001d74:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d77:	0f b6 87 60 5f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda0a0]
c0001d7e:	01 f0                	add    eax,esi
c0001d80:	e8 c6 fc ff ff       	call   c0001a4b <ld_word>
c0001d85:	66 85 ed             	test   bp,bp
c0001d88:	74 11                	je     c0001d9b <pick_lfn+0x4e>
c0001d8a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d90:	77 d0                	ja     c0001d62 <pick_lfn+0x15>
c0001d92:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d96:	89 c5                	mov    ebp,eax
c0001d98:	41                   	inc    ecx
c0001d99:	eb 04                	jmp    c0001d9f <pick_lfn+0x52>
c0001d9b:	66 40                	inc    ax
c0001d9d:	75 c3                	jne    c0001d62 <pick_lfn+0x15>
c0001d9f:	47                   	inc    edi
c0001da0:	83 ff 0d             	cmp    edi,0xd
c0001da3:	75 d2                	jne    c0001d77 <pick_lfn+0x2a>
c0001da5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da8:	74 13                	je     c0001dbd <pick_lfn+0x70>
c0001daa:	66 85 ed             	test   bp,bp
c0001dad:	74 0e                	je     c0001dbd <pick_lfn+0x70>
c0001daf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db5:	77 ab                	ja     c0001d62 <pick_lfn+0x15>
c0001db7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbd:	b8 01 00 00 00       	mov    eax,0x1
c0001dc2:	5b                   	pop    ebx
c0001dc3:	5e                   	pop    esi
c0001dc4:	5f                   	pop    edi
c0001dc5:	5d                   	pop    ebp
c0001dc6:	c3                   	ret    

c0001dc7 <put_lfn>:
c0001dc7:	55                   	push   ebp
c0001dc8:	31 ed                	xor    ebp,ebp
c0001dca:	57                   	push   edi
c0001dcb:	89 d7                	mov    edi,edx
c0001dcd:	56                   	push   esi
c0001dce:	31 f6                	xor    esi,esi
c0001dd0:	53                   	push   ebx
c0001dd1:	83 ec 08             	sub    esp,0x8
c0001dd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddf:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001deb:	31 d2                	xor    edx,edx
c0001ded:	e8 cb fc ff ff       	call   c0001abd <st_word>
c0001df2:	0f b6 d9             	movzx  ebx,cl
c0001df5:	4b                   	dec    ebx
c0001df6:	6b db 0d             	imul   ebx,ebx,0xd
c0001df9:	66 83 fe ff          	cmp    si,0xffff
c0001dfd:	74 08                	je     c0001e07 <put_lfn+0x40>
c0001dff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e02:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e06:	43                   	inc    ebx
c0001e07:	0f b6 85 60 5f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda0a0]
c0001e0e:	0f b7 d6             	movzx  edx,si
c0001e11:	01 f8                	add    eax,edi
c0001e13:	e8 a5 fc ff ff       	call   c0001abd <st_word>
c0001e18:	66 85 f6             	test   si,si
c0001e1b:	75 03                	jne    c0001e20 <put_lfn+0x59>
c0001e1d:	83 ce ff             	or     esi,0xffffffff
c0001e20:	45                   	inc    ebp
c0001e21:	83 fd 0d             	cmp    ebp,0xd
c0001e24:	75 d3                	jne    c0001df9 <put_lfn+0x32>
c0001e26:	66 46                	inc    si
c0001e28:	74 0a                	je     c0001e34 <put_lfn+0x6d>
c0001e2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e32:	75 09                	jne    c0001e3d <put_lfn+0x76>
c0001e34:	88 c8                	mov    al,cl
c0001e36:	83 c8 40             	or     eax,0x40
c0001e39:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e41:	88 07                	mov    BYTE PTR [edi],al
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c3                   	ret    

c0001e4b <gen_numname>:
c0001e4b:	57                   	push   edi
c0001e4c:	89 cf                	mov    edi,ecx
c0001e4e:	56                   	push   esi
c0001e4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e54:	53                   	push   ebx
c0001e55:	89 c6                	mov    esi,eax
c0001e57:	83 ec 10             	sub    esp,0x10
c0001e5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5e:	e8 67 fc ff ff       	call   c0001aca <mem_cpy>
c0001e63:	83 fb 05             	cmp    ebx,0x5
c0001e66:	76 2d                	jbe    c0001e95 <gen_numname+0x4a>
c0001e68:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6b:	66 85 c0             	test   ax,ax
c0001e6e:	74 25                	je     c0001e95 <gen_numname+0x4a>
c0001e70:	83 c7 02             	add    edi,0x2
c0001e73:	ba 10 00 00 00       	mov    edx,0x10
c0001e78:	01 db                	add    ebx,ebx
c0001e7a:	89 c1                	mov    ecx,eax
c0001e7c:	66 d1 e8             	shr    ax,1
c0001e7f:	83 e1 01             	and    ecx,0x1
c0001e82:	01 cb                	add    ebx,ecx
c0001e84:	0f ba e3 10          	bt     ebx,0x10
c0001e88:	73 06                	jae    c0001e90 <gen_numname+0x45>
c0001e8a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e90:	4a                   	dec    edx
c0001e91:	75 e5                	jne    c0001e78 <gen_numname+0x2d>
c0001e93:	eb d3                	jmp    c0001e68 <gen_numname+0x1d>
c0001e95:	b8 07 00 00 00       	mov    eax,0x7
c0001e9a:	88 d9                	mov    cl,bl
c0001e9c:	83 e1 0f             	and    ecx,0xf
c0001e9f:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea2:	80 fa 39             	cmp    dl,0x39
c0001ea5:	76 03                	jbe    c0001eaa <gen_numname+0x5f>
c0001ea7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eaa:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ead:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb1:	89 da                	mov    edx,ebx
c0001eb3:	c1 ea 04             	shr    edx,0x4
c0001eb6:	83 fb 0f             	cmp    ebx,0xf
c0001eb9:	76 06                	jbe    c0001ec1 <gen_numname+0x76>
c0001ebb:	89 c8                	mov    eax,ecx
c0001ebd:	89 d3                	mov    ebx,edx
c0001ebf:	eb d9                	jmp    c0001e9a <gen_numname+0x4f>
c0001ec1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec6:	31 d2                	xor    edx,edx
c0001ec8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ecb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ece:	39 ca                	cmp    edx,ecx
c0001ed0:	73 18                	jae    c0001eea <gen_numname+0x9f>
c0001ed2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed5:	3c 20                	cmp    al,0x20
c0001ed7:	74 11                	je     c0001eea <gen_numname+0x9f>
c0001ed9:	e8 41 fc ff ff       	call   c0001b1f <dbc_1st>
c0001ede:	85 c0                	test   eax,eax
c0001ee0:	74 05                	je     c0001ee7 <gen_numname+0x9c>
c0001ee2:	39 d3                	cmp    ebx,edx
c0001ee4:	74 04                	je     c0001eea <gen_numname+0x9f>
c0001ee6:	42                   	inc    edx
c0001ee7:	42                   	inc    edx
c0001ee8:	eb e1                	jmp    c0001ecb <gen_numname+0x80>
c0001eea:	b0 20                	mov    al,0x20
c0001eec:	83 f9 07             	cmp    ecx,0x7
c0001eef:	77 05                	ja     c0001ef6 <gen_numname+0xab>
c0001ef1:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef5:	41                   	inc    ecx
c0001ef6:	42                   	inc    edx
c0001ef7:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efb:	83 fa 07             	cmp    edx,0x7
c0001efe:	76 ea                	jbe    c0001eea <gen_numname+0x9f>
c0001f00:	83 c4 10             	add    esp,0x10
c0001f03:	5b                   	pop    ebx
c0001f04:	5e                   	pop    esi
c0001f05:	5f                   	pop    edi
c0001f06:	c3                   	ret    

c0001f07 <sum_sfn>:
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	31 d2                	xor    edx,edx
c0001f0b:	d0 ca                	ror    dl,1
c0001f0d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f10:	41                   	inc    ecx
c0001f11:	83 f9 0b             	cmp    ecx,0xb
c0001f14:	75 f5                	jne    c0001f0b <sum_sfn+0x4>
c0001f16:	88 d0                	mov    al,dl
c0001f18:	c3                   	ret    

c0001f19 <xdir_sum>:
c0001f19:	56                   	push   esi
c0001f1a:	31 c9                	xor    ecx,ecx
c0001f1c:	53                   	push   ebx
c0001f1d:	31 d2                	xor    edx,edx
c0001f1f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f23:	43                   	inc    ebx
c0001f24:	c1 e3 05             	shl    ebx,0x5
c0001f27:	83 fa 02             	cmp    edx,0x2
c0001f2a:	74 0b                	je     c0001f37 <xdir_sum+0x1e>
c0001f2c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f30:	66 d1 c9             	ror    cx,1
c0001f33:	01 f1                	add    ecx,esi
c0001f35:	eb 05                	jmp    c0001f3c <xdir_sum+0x23>
c0001f37:	ba 03 00 00 00       	mov    edx,0x3
c0001f3c:	42                   	inc    edx
c0001f3d:	39 d3                	cmp    ebx,edx
c0001f3f:	77 e6                	ja     c0001f27 <xdir_sum+0xe>
c0001f41:	89 c8                	mov    eax,ecx
c0001f43:	5b                   	pop    ebx
c0001f44:	5e                   	pop    esi
c0001f45:	c3                   	ret    

c0001f46 <xsum32>:
c0001f46:	d1 ca                	ror    edx,1
c0001f48:	0f b6 c0             	movzx  eax,al
c0001f4b:	01 d0                	add    eax,edx
c0001f4d:	c3                   	ret    

c0001f4e <get_xfileinfo>:
c0001f4e:	55                   	push   ebp
c0001f4f:	31 c9                	xor    ecx,ecx
c0001f51:	57                   	push   edi
c0001f52:	bd 40 00 00 00       	mov    ebp,0x40
c0001f57:	56                   	push   esi
c0001f58:	31 ff                	xor    edi,edi
c0001f5a:	53                   	push   ebx
c0001f5b:	89 c6                	mov    esi,eax
c0001f5d:	83 ec 0c             	sub    esp,0xc
c0001f60:	89 d3                	mov    ebx,edx
c0001f62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f69:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f70:	76 6d                	jbe    c0001fdf <get_xfileinfo+0x91>
c0001f72:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f78:	76 0b                	jbe    c0001f85 <get_xfileinfo+0x37>
c0001f7a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7e:	bf 01 00 00 00       	mov    edi,0x1
c0001f83:	eb 63                	jmp    c0001fe8 <get_xfileinfo+0x9a>
c0001f85:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8b:	75 03                	jne    c0001f90 <get_xfileinfo+0x42>
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f93:	83 c5 02             	add    ebp,0x2
c0001f96:	e8 b0 fa ff ff       	call   c0001a4b <ld_word>
c0001f9b:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9e:	66 85 c9             	test   cx,cx
c0001fa1:	75 0d                	jne    c0001fb0 <get_xfileinfo+0x62>
c0001fa3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa9:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fae:	76 2b                	jbe    c0001fdb <get_xfileinfo+0x8d>
c0001fb0:	c1 e1 10             	shl    ecx,0x10
c0001fb3:	ba ff 00 00 00       	mov    edx,0xff
c0001fb8:	0f b7 c0             	movzx  eax,ax
c0001fbb:	29 fa                	sub    edx,edi
c0001fbd:	09 c8                	or     eax,ecx
c0001fbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fcb:	e8 1b fc ff ff       	call   c0001beb <put_utf>
c0001fd0:	84 c0                	test   al,al
c0001fd2:	74 a6                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fd4:	0f b6 c0             	movzx  eax,al
c0001fd7:	01 c7                	add    edi,eax
c0001fd9:	31 c0                	xor    eax,eax
c0001fdb:	89 c1                	mov    ecx,eax
c0001fdd:	eb 8a                	jmp    c0001f69 <get_xfileinfo+0x1b>
c0001fdf:	85 ff                	test   edi,edi
c0001fe1:	74 97                	je     c0001f7a <get_xfileinfo+0x2c>
c0001fe3:	66 85 c9             	test   cx,cx
c0001fe6:	75 92                	jne    c0001f7a <get_xfileinfo+0x2c>
c0001fe8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fed:	31 c0                	xor    eax,eax
c0001fef:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff8:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffb:	80 e1 10             	and    cl,0x10
c0001ffe:	75 08                	jne    c0002008 <get_xfileinfo+0xba>
c0002000:	8d 46 38             	lea    eax,[esi+0x38]
c0002003:	e8 68 fa ff ff       	call   c0001a70 <ld_qword>
c0002008:	89 03                	mov    DWORD PTR [ebx],eax
c000200a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002010:	e8 36 fa ff ff       	call   c0001a4b <ld_word>
c0002015:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002019:	8d 46 0e             	lea    eax,[esi+0xe]
c000201c:	e8 2a fa ff ff       	call   c0001a4b <ld_word>
c0002021:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002025:	83 c4 0c             	add    esp,0xc
c0002028:	5b                   	pop    ebx
c0002029:	5e                   	pop    esi
c000202a:	5f                   	pop    edi
c000202b:	5d                   	pop    ebp
c000202c:	c3                   	ret    

c000202d <get_ldnumber>:
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 14                	je     c0002047 <get_ldnumber+0x1a>
c0002033:	56                   	push   esi
c0002034:	53                   	push   ebx
c0002035:	89 d3                	mov    ebx,edx
c0002037:	43                   	inc    ebx
c0002038:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203b:	80 f9 1f             	cmp    cl,0x1f
c000203e:	76 0d                	jbe    c000204d <get_ldnumber+0x20>
c0002040:	80 f9 3a             	cmp    cl,0x3a
c0002043:	75 f2                	jne    c0002037 <get_ldnumber+0xa>
c0002045:	eb 0a                	jmp    c0002051 <get_ldnumber+0x24>
c0002047:	83 c9 ff             	or     ecx,0xffffffff
c000204a:	89 c8                	mov    eax,ecx
c000204c:	c3                   	ret    
c000204d:	31 c9                	xor    ecx,ecx
c000204f:	eb 24                	jmp    c0002075 <get_ldnumber+0x48>
c0002051:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002054:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002057:	80 f9 09             	cmp    cl,0x9
c000205a:	77 16                	ja     c0002072 <get_ldnumber+0x45>
c000205c:	83 c2 02             	add    edx,0x2
c000205f:	83 c9 ff             	or     ecx,0xffffffff
c0002062:	39 d3                	cmp    ebx,edx
c0002064:	75 0f                	jne    c0002075 <get_ldnumber+0x48>
c0002066:	89 f2                	mov    edx,esi
c0002068:	89 18                	mov    DWORD PTR [eax],ebx
c000206a:	0f be ca             	movsx  ecx,dl
c000206d:	83 e9 30             	sub    ecx,0x30
c0002070:	eb 03                	jmp    c0002075 <get_ldnumber+0x48>
c0002072:	83 c9 ff             	or     ecx,0xffffffff
c0002075:	89 c8                	mov    eax,ecx
c0002077:	5b                   	pop    ebx
c0002078:	5e                   	pop    esi
c0002079:	c3                   	ret    

c000207a <crc32>:
c000207a:	56                   	push   esi
c000207b:	89 d6                	mov    esi,edx
c000207d:	53                   	push   ebx
c000207e:	b2 01                	mov    dl,0x1
c0002080:	bb 08 00 00 00       	mov    ebx,0x8
c0002085:	89 f1                	mov    ecx,esi
c0002087:	84 d1                	test   cl,dl
c0002089:	0f 95 c1             	setne  cl
c000208c:	0f b6 c9             	movzx  ecx,cl
c000208f:	31 c1                	xor    ecx,eax
c0002091:	89 c8                	mov    eax,ecx
c0002093:	d1 e8                	shr    eax,1
c0002095:	80 e1 01             	and    cl,0x1
c0002098:	74 05                	je     c000209f <crc32+0x25>
c000209a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209f:	d1 e2                	shl    edx,1
c00020a1:	4b                   	dec    ebx
c00020a2:	75 e1                	jne    c0002085 <crc32+0xb>
c00020a4:	5b                   	pop    ebx
c00020a5:	5e                   	pop    esi
c00020a6:	c3                   	ret    

c00020a7 <test_gpt_header>:
c00020a7:	55                   	push   ebp
c00020a8:	b9 10 00 00 00       	mov    ecx,0x10
c00020ad:	57                   	push   edi
c00020ae:	ba 60 5e 02 c0       	mov    edx,0xc0025e60
c00020b3:	56                   	push   esi
c00020b4:	31 ff                	xor    edi,edi
c00020b6:	53                   	push   ebx
c00020b7:	89 c3                	mov    ebx,eax
c00020b9:	e8 2c fa ff ff       	call   c0001aea <mem_cmp>
c00020be:	85 c0                	test   eax,eax
c00020c0:	75 55                	jne    c0002117 <test_gpt_header+0x70>
c00020c2:	89 c7                	mov    edi,eax
c00020c4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c9:	83 ce ff             	or     esi,0xffffffff
c00020cc:	31 d2                	xor    edx,edx
c00020ce:	83 fd 03             	cmp    ebp,0x3
c00020d1:	76 05                	jbe    c00020d8 <test_gpt_header+0x31>
c00020d3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d8:	89 f0                	mov    eax,esi
c00020da:	45                   	inc    ebp
c00020db:	e8 9a ff ff ff       	call   c000207a <crc32>
c00020e0:	83 fd 4c             	cmp    ebp,0x4c
c00020e3:	89 c6                	mov    esi,eax
c00020e5:	75 e5                	jne    c00020cc <test_gpt_header+0x25>
c00020e7:	8d 43 10             	lea    eax,[ebx+0x10]
c00020ea:	f7 d6                	not    esi
c00020ec:	e8 67 f9 ff ff       	call   c0001a58 <ld_dword>
c00020f1:	39 c6                	cmp    esi,eax
c00020f3:	75 22                	jne    c0002117 <test_gpt_header+0x70>
c00020f5:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f8:	e8 5b f9 ff ff       	call   c0001a58 <ld_dword>
c00020fd:	83 c0 80             	add    eax,0xffffff80
c0002100:	75 15                	jne    c0002117 <test_gpt_header+0x70>
c0002102:	8d 43 50             	lea    eax,[ebx+0x50]
c0002105:	e8 4e f9 ff ff       	call   c0001a58 <ld_dword>
c000210a:	3d 80 00 00 00       	cmp    eax,0x80
c000210f:	0f 96 c0             	setbe  al
c0002112:	0f b6 c0             	movzx  eax,al
c0002115:	89 c7                	mov    edi,eax
c0002117:	5b                   	pop    ebx
c0002118:	89 f8                	mov    eax,edi
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	5d                   	pop    ebp
c000211d:	c3                   	ret    

c000211e <make_rand>:
c000211e:	56                   	push   esi
c000211f:	85 c0                	test   eax,eax
c0002121:	53                   	push   ebx
c0002122:	75 05                	jne    c0002129 <make_rand+0xb>
c0002124:	b8 01 00 00 00       	mov    eax,0x1
c0002129:	01 d1                	add    ecx,edx
c000212b:	bb 08 00 00 00       	mov    ebx,0x8
c0002130:	89 c6                	mov    esi,eax
c0002132:	d1 e8                	shr    eax,1
c0002134:	83 e6 01             	and    esi,0x1
c0002137:	85 f6                	test   esi,esi
c0002139:	74 05                	je     c0002140 <make_rand+0x22>
c000213b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002140:	4b                   	dec    ebx
c0002141:	75 ed                	jne    c0002130 <make_rand+0x12>
c0002143:	42                   	inc    edx
c0002144:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002147:	39 ca                	cmp    edx,ecx
c0002149:	75 e0                	jne    c000212b <make_rand+0xd>
c000214b:	5b                   	pop    ebx
c000214c:	5e                   	pop    esi
c000214d:	c3                   	ret    

c000214e <validate>:
c000214e:	56                   	push   esi
c000214f:	53                   	push   ebx
c0002150:	89 d6                	mov    esi,edx
c0002152:	51                   	push   ecx
c0002153:	85 c0                	test   eax,eax
c0002155:	75 09                	jne    c0002160 <validate+0x12>
c0002157:	b8 09 00 00 00       	mov    eax,0x9
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	eb 2f                	jmp    c000218f <validate+0x41>
c0002160:	89 c3                	mov    ebx,eax
c0002162:	8b 00                	mov    eax,DWORD PTR [eax]
c0002164:	85 c0                	test   eax,eax
c0002166:	74 ef                	je     c0002157 <validate+0x9>
c0002168:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216b:	74 ea                	je     c0002157 <validate+0x9>
c000216d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002171:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002175:	75 e0                	jne    c0002157 <validate+0x9>
c0002177:	83 ec 0c             	sub    esp,0xc
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 76 f8 ff ff       	call   c00019fa <disk_status>
c0002184:	83 c4 10             	add    esp,0x10
c0002187:	a8 01                	test   al,0x1
c0002189:	75 cc                	jne    c0002157 <validate+0x9>
c000218b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218d:	31 c0                	xor    eax,eax
c000218f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002191:	5a                   	pop    edx
c0002192:	5b                   	pop    ebx
c0002193:	5e                   	pop    esi
c0002194:	c3                   	ret    

c0002195 <sync_window>:
c0002195:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002199:	0f 84 85 00 00 00    	je     c0002224 <sync_window+0x8f>
c000219f:	55                   	push   ebp
c00021a0:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a3:	57                   	push   edi
c00021a4:	56                   	push   esi
c00021a5:	53                   	push   ebx
c00021a6:	89 c3                	mov    ebx,eax
c00021a8:	83 ec 28             	sub    esp,0x28
c00021ab:	6a 01                	push   0x1
c00021ad:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b3:	55                   	push   ebp
c00021b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b8:	50                   	push   eax
c00021b9:	e8 58 f8 ff ff       	call   c0001a16 <disk_write>
c00021be:	83 c4 20             	add    esp,0x20
c00021c1:	ba 01 00 00 00       	mov    edx,0x1
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 50                	jne    c000221a <sync_window+0x85>
c00021ca:	31 ff                	xor    edi,edi
c00021cc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021da:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dd:	89 c6                	mov    esi,eax
c00021df:	89 d7                	mov    edi,edx
c00021e1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021eb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ef:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f3:	73 23                	jae    c0002218 <sync_window+0x83>
c00021f5:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f9:	75 1d                	jne    c0002218 <sync_window+0x83>
c00021fb:	83 ec 0c             	sub    esp,0xc
c00021fe:	6a 01                	push   0x1
c0002200:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002204:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002208:	52                   	push   edx
c0002209:	50                   	push   eax
c000220a:	55                   	push   ebp
c000220b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220f:	50                   	push   eax
c0002210:	e8 01 f8 ff ff       	call   c0001a16 <disk_write>
c0002215:	83 c4 20             	add    esp,0x20
c0002218:	31 d2                	xor    edx,edx
c000221a:	83 c4 1c             	add    esp,0x1c
c000221d:	89 d0                	mov    eax,edx
c000221f:	5b                   	pop    ebx
c0002220:	5e                   	pop    esi
c0002221:	5f                   	pop    edi
c0002222:	5d                   	pop    ebp
c0002223:	c3                   	ret    
c0002224:	31 d2                	xor    edx,edx
c0002226:	89 d0                	mov    eax,edx
c0002228:	c3                   	ret    

c0002229 <move_window>:
c0002229:	56                   	push   esi
c000222a:	53                   	push   ebx
c000222b:	89 c3                	mov    ebx,eax
c000222d:	83 ec 14             	sub    esp,0x14
c0002230:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002233:	75 07                	jne    c000223c <move_window+0x13>
c0002235:	31 f6                	xor    esi,esi
c0002237:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000223a:	74 59                	je     c0002295 <move_window+0x6c>
c000223c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002240:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002244:	89 d8                	mov    eax,ebx
c0002246:	e8 4a ff ff ff       	call   c0002195 <sync_window>
c000224b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224f:	89 c6                	mov    esi,eax
c0002251:	85 c0                	test   eax,eax
c0002253:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002257:	75 3c                	jne    c0002295 <move_window+0x6c>
c0002259:	83 ec 0c             	sub    esp,0xc
c000225c:	8d 43 54             	lea    eax,[ebx+0x54]
c000225f:	6a 01                	push   0x1
c0002261:	51                   	push   ecx
c0002262:	52                   	push   edx
c0002263:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002267:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226b:	50                   	push   eax
c000226c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002270:	50                   	push   eax
c0002271:	e8 8a f7 ff ff       	call   c0001a00 <disk_read>
c0002276:	83 c4 20             	add    esp,0x20
c0002279:	85 c0                	test   eax,eax
c000227b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002283:	74 0a                	je     c000228f <move_window+0x66>
c0002285:	83 ca ff             	or     edx,0xffffffff
c0002288:	be 01 00 00 00       	mov    esi,0x1
c000228d:	89 d1                	mov    ecx,edx
c000228f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002292:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002295:	89 f0                	mov    eax,esi
c0002297:	83 c4 14             	add    esp,0x14
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <check_fs>:
c000229d:	53                   	push   ebx
c000229e:	89 c3                	mov    ebx,eax
c00022a0:	83 ec 08             	sub    esp,0x8
c00022a3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ae:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b5:	e8 6f ff ff ff       	call   c0002229 <move_window>
c00022ba:	ba 04 00 00 00       	mov    edx,0x4
c00022bf:	85 c0                	test   eax,eax
c00022c1:	0f 85 89 00 00 00    	jne    c0002350 <check_fs+0xb3>
c00022c7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cd:	e8 79 f7 ff ff       	call   c0001a4b <ld_word>
c00022d2:	ba 03 00 00 00       	mov    edx,0x3
c00022d7:	66 3d 55 aa          	cmp    ax,0xaa55
c00022db:	75 73                	jne    c0002350 <check_fs+0xb3>
c00022dd:	ba 80 5f 02 c0       	mov    edx,0xc0025f80
c00022e2:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00022ea:	e8 fb f7 ff ff       	call   c0001aea <mem_cmp>
c00022ef:	ba 01 00 00 00       	mov    edx,0x1
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 58                	je     c0002350 <check_fs+0xb3>
c00022f8:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fb:	8d 50 18             	lea    edx,[eax+0x18]
c00022fe:	80 fa 01             	cmp    dl,0x1
c0002301:	76 09                	jbe    c000230c <check_fs+0x6f>
c0002303:	ba 02 00 00 00       	mov    edx,0x2
c0002308:	3c eb                	cmp    al,0xeb
c000230a:	75 44                	jne    c0002350 <check_fs+0xb3>
c000230c:	ba 74 8c 02 c0       	mov    edx,0xc0028c74
c0002311:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002317:	b9 03 00 00 00       	mov    ecx,0x3
c000231c:	e8 c9 f7 ff ff       	call   c0001aea <mem_cmp>
c0002321:	31 d2                	xor    edx,edx
c0002323:	85 c0                	test   eax,eax
c0002325:	74 29                	je     c0002350 <check_fs+0xb3>
c0002327:	ba 8c 5f 02 c0       	mov    edx,0xc0025f8c
c000232c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002332:	b9 05 00 00 00       	mov    ecx,0x5
c0002337:	e8 ae f7 ff ff       	call   c0001aea <mem_cmp>
c000233c:	31 d2                	xor    edx,edx
c000233e:	85 c0                	test   eax,eax
c0002340:	74 0e                	je     c0002350 <check_fs+0xb3>
c0002342:	31 d2                	xor    edx,edx
c0002344:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234b:	0f 95 c2             	setne  dl
c000234e:	01 d2                	add    edx,edx
c0002350:	89 d0                	mov    eax,edx
c0002352:	83 c4 08             	add    esp,0x8
c0002355:	5b                   	pop    ebx
c0002356:	c3                   	ret    

c0002357 <find_volume>:
c0002357:	55                   	push   ebp
c0002358:	31 c9                	xor    ecx,ecx
c000235a:	57                   	push   edi
c000235b:	56                   	push   esi
c000235c:	89 d6                	mov    esi,edx
c000235e:	53                   	push   ebx
c000235f:	31 d2                	xor    edx,edx
c0002361:	83 ec 3c             	sub    esp,0x3c
c0002364:	89 c3                	mov    ebx,eax
c0002366:	e8 32 ff ff ff       	call   c000229d <check_fs>
c000236b:	83 f8 02             	cmp    eax,0x2
c000236e:	74 0e                	je     c000237e <find_volume+0x27>
c0002370:	0f 87 5d 01 00 00    	ja     c00024d3 <find_volume+0x17c>
c0002376:	85 f6                	test   esi,esi
c0002378:	0f 84 55 01 00 00    	je     c00024d3 <find_volume+0x17c>
c000237e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002385:	0f 85 dd 00 00 00    	jne    c0002468 <find_volume+0x111>
c000238b:	31 c9                	xor    ecx,ecx
c000238d:	ba 01 00 00 00       	mov    edx,0x1
c0002392:	89 d8                	mov    eax,ebx
c0002394:	e8 90 fe ff ff       	call   c0002229 <move_window>
c0002399:	85 c0                	test   eax,eax
c000239b:	74 0a                	je     c00023a7 <find_volume+0x50>
c000239d:	b8 04 00 00 00       	mov    eax,0x4
c00023a2:	e9 2c 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023a7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023aa:	89 e8                	mov    eax,ebp
c00023ac:	e8 f6 fc ff ff       	call   c00020a7 <test_gpt_header>
c00023b1:	85 c0                	test   eax,eax
c00023b3:	75 0a                	jne    c00023bf <find_volume+0x68>
c00023b5:	b8 03 00 00 00       	mov    eax,0x3
c00023ba:	e9 14 01 00 00       	jmp    c00024d3 <find_volume+0x17c>
c00023bf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c5:	e8 8e f6 ff ff       	call   c0001a58 <ld_dword>
c00023ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ce:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d4:	e8 97 f6 ff ff       	call   c0001a70 <ld_qword>
c00023d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f5:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f9:	74 ba                	je     c00023b5 <find_volume+0x5e>
c00023fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023ff:	31 c9                	xor    ecx,ecx
c0002401:	c1 e7 07             	shl    edi,0x7
c0002404:	89 d8                	mov    eax,ebx
c0002406:	89 fa                	mov    edx,edi
c0002408:	c1 ea 09             	shr    edx,0x9
c000240b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002413:	e8 11 fe ff ff       	call   c0002229 <move_window>
c0002418:	85 c0                	test   eax,eax
c000241a:	75 81                	jne    c000239d <find_volume+0x46>
c000241c:	81 e7 80 01 00 00    	and    edi,0x180
c0002422:	b9 10 00 00 00       	mov    ecx,0x10
c0002427:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242b:	ba 70 5f 02 c0       	mov    edx,0xc0025f70
c0002430:	e8 b5 f6 ff ff       	call   c0001aea <mem_cmp>
c0002435:	85 c0                	test   eax,eax
c0002437:	75 29                	jne    c0002462 <find_volume+0x10b>
c0002439:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002441:	e8 2a f6 ff ff       	call   c0001a70 <ld_qword>
c0002446:	89 d1                	mov    ecx,edx
c0002448:	89 c2                	mov    edx,eax
c000244a:	89 d8                	mov    eax,ebx
c000244c:	e8 4c fe ff ff       	call   c000229d <check_fs>
c0002451:	85 f6                	test   esi,esi
c0002453:	75 07                	jne    c000245c <find_volume+0x105>
c0002455:	83 f8 01             	cmp    eax,0x1
c0002458:	77 08                	ja     c0002462 <find_volume+0x10b>
c000245a:	eb 77                	jmp    c00024d3 <find_volume+0x17c>
c000245c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002460:	74 71                	je     c00024d3 <find_volume+0x17c>
c0002462:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002466:	eb 89                	jmp    c00023f1 <find_volume+0x9a>
c0002468:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002472:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002478:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247c:	89 cd                	mov    ebp,ecx
c000247e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002482:	89 f8                	mov    eax,edi
c0002484:	83 c7 10             	add    edi,0x10
c0002487:	e8 cc f5 ff ff       	call   c0001a58 <ld_dword>
c000248c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002490:	89 01                	mov    DWORD PTR [ecx],eax
c0002492:	83 c1 04             	add    ecx,0x4
c0002495:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002499:	75 e3                	jne    c000247e <find_volume+0x127>
c000249b:	31 ff                	xor    edi,edi
c000249d:	85 f6                	test   esi,esi
c000249f:	74 03                	je     c00024a4 <find_volume+0x14d>
c00024a1:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a8:	85 d2                	test   edx,edx
c00024aa:	74 14                	je     c00024c0 <find_volume+0x169>
c00024ac:	31 c9                	xor    ecx,ecx
c00024ae:	89 d8                	mov    eax,ebx
c00024b0:	e8 e8 fd ff ff       	call   c000229d <check_fs>
c00024b5:	83 f8 01             	cmp    eax,0x1
c00024b8:	76 19                	jbe    c00024d3 <find_volume+0x17c>
c00024ba:	85 f6                	test   esi,esi
c00024bc:	74 0f                	je     c00024cd <find_volume+0x176>
c00024be:	eb 13                	jmp    c00024d3 <find_volume+0x17c>
c00024c0:	85 f6                	test   esi,esi
c00024c2:	0f 85 ed fe ff ff    	jne    c00023b5 <find_volume+0x5e>
c00024c8:	b8 03 00 00 00       	mov    eax,0x3
c00024cd:	47                   	inc    edi
c00024ce:	83 ff 03             	cmp    edi,0x3
c00024d1:	76 d1                	jbe    c00024a4 <find_volume+0x14d>
c00024d3:	83 c4 3c             	add    esp,0x3c
c00024d6:	5b                   	pop    ebx
c00024d7:	5e                   	pop    esi
c00024d8:	5f                   	pop    edi
c00024d9:	5d                   	pop    ebp
c00024da:	c3                   	ret    

c00024db <mount_volume>:
c00024db:	55                   	push   ebp
c00024dc:	57                   	push   edi
c00024dd:	89 cf                	mov    edi,ecx
c00024df:	56                   	push   esi
c00024e0:	53                   	push   ebx
c00024e1:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e6:	83 ec 3c             	sub    esp,0x3c
c00024e9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f3:	e8 35 fb ff ff       	call   c000202d <get_ldnumber>
c00024f8:	85 c0                	test   eax,eax
c00024fa:	0f 88 3a 05 00 00    	js     c0002a3a <mount_volume+0x55f>
c0002500:	8b 2c 85 60 a5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5aa0]
c0002507:	89 c6                	mov    esi,eax
c0002509:	bb 0c 00 00 00       	mov    ebx,0xc
c000250e:	85 ed                	test   ebp,ebp
c0002510:	0f 84 24 05 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000251a:	83 e7 fe             	and    edi,0xfffffffe
c000251d:	89 2a                	mov    DWORD PTR [edx],ebp
c000251f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002523:	74 32                	je     c0002557 <mount_volume+0x7c>
c0002525:	83 ec 0c             	sub    esp,0xc
c0002528:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252c:	50                   	push   eax
c000252d:	e8 c8 f4 ff ff       	call   c00019fa <disk_status>
c0002532:	83 c4 10             	add    esp,0x10
c0002535:	a8 01                	test   al,0x1
c0002537:	75 1e                	jne    c0002557 <mount_volume+0x7c>
c0002539:	31 db                	xor    ebx,ebx
c000253b:	89 f9                	mov    ecx,edi
c000253d:	84 c9                	test   cl,cl
c000253f:	0f 84 f5 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c0002545:	a8 04                	test   al,0x4
c0002547:	0f 84 ed 04 00 00    	je     c0002a3a <mount_volume+0x55f>
c000254d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002552:	e9 e3 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c0002557:	83 ec 0c             	sub    esp,0xc
c000255a:	89 f0                	mov    eax,esi
c000255c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002560:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002563:	0f b6 f0             	movzx  esi,al
c0002566:	bb 03 00 00 00       	mov    ebx,0x3
c000256b:	56                   	push   esi
c000256c:	e8 8c f4 ff ff       	call   c00019fd <disk_initialize>
c0002571:	83 c4 10             	add    esp,0x10
c0002574:	a8 01                	test   al,0x1
c0002576:	0f 85 be 04 00 00    	jne    c0002a3a <mount_volume+0x55f>
c000257c:	89 f9                	mov    ecx,edi
c000257e:	84 c9                	test   cl,cl
c0002580:	74 04                	je     c0002586 <mount_volume+0xab>
c0002582:	a8 04                	test   al,0x4
c0002584:	75 c7                	jne    c000254d <mount_volume+0x72>
c0002586:	31 d2                	xor    edx,edx
c0002588:	89 e8                	mov    eax,ebp
c000258a:	e8 c8 fd ff ff       	call   c0002357 <find_volume>
c000258f:	83 f8 04             	cmp    eax,0x4
c0002592:	75 0a                	jne    c000259e <mount_volume+0xc3>
c0002594:	bb 01 00 00 00       	mov    ebx,0x1
c0002599:	e9 9c 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000259e:	83 f8 01             	cmp    eax,0x1
c00025a1:	76 0a                	jbe    c00025ad <mount_volume+0xd2>
c00025a3:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a8:	e9 8d 04 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c00025ad:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025bb:	75 17                	jne    c00025d4 <mount_volume+0xf9>
c00025bd:	b8 0b 00 00 00       	mov    eax,0xb
c00025c2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c7:	75 da                	jne    c00025a3 <mount_volume+0xc8>
c00025c9:	40                   	inc    eax
c00025ca:	83 f8 40             	cmp    eax,0x40
c00025cd:	75 f3                	jne    c00025c2 <mount_volume+0xe7>
c00025cf:	e9 5a 02 00 00       	jmp    c000282e <mount_volume+0x353>
c00025d4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d7:	e8 6f f4 ff ff       	call   c0001a4b <ld_word>
c00025dc:	66 3d 00 02          	cmp    ax,0x200
c00025e0:	75 c1                	jne    c00025a3 <mount_volume+0xc8>
c00025e2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e5:	e8 61 f4 ff ff       	call   c0001a4b <ld_word>
c00025ea:	0f b7 c0             	movzx  eax,ax
c00025ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f1:	85 c0                	test   eax,eax
c00025f3:	75 0c                	jne    c0002601 <mount_volume+0x126>
c00025f5:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f8:	e8 5b f4 ff ff       	call   c0001a58 <ld_dword>
c00025fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002605:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002608:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002612:	48                   	dec    eax
c0002613:	3c 01                	cmp    al,0x1
c0002615:	77 8c                	ja     c00025a3 <mount_volume+0xc8>
c0002617:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261b:	89 c3                	mov    ebx,eax
c000261d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002621:	66 85 c0             	test   ax,ax
c0002624:	0f 84 79 ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c000262a:	8d 40 ff             	lea    eax,[eax-0x1]
c000262d:	85 d8                	test   eax,ebx
c000262f:	0f 85 6e ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002635:	8d 45 65             	lea    eax,[ebp+0x65]
c0002638:	e8 0e f4 ff ff       	call   c0001a4b <ld_word>
c000263d:	89 c7                	mov    edi,eax
c000263f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002643:	a8 0f                	test   al,0xf
c0002645:	0f 85 58 ff ff ff    	jne    c00025a3 <mount_volume+0xc8>
c000264b:	8d 45 67             	lea    eax,[ebp+0x67]
c000264e:	e8 f8 f3 ff ff       	call   c0001a4b <ld_word>
c0002653:	0f b7 f0             	movzx  esi,ax
c0002656:	85 f6                	test   esi,esi
c0002658:	75 0a                	jne    c0002664 <mount_volume+0x189>
c000265a:	8d 45 74             	lea    eax,[ebp+0x74]
c000265d:	e8 f6 f3 ff ff       	call   c0001a58 <ld_dword>
c0002662:	89 c6                	mov    esi,eax
c0002664:	8d 45 62             	lea    eax,[ebp+0x62]
c0002667:	e8 df f3 ff ff       	call   c0001a4b <ld_word>
c000266c:	66 85 c0             	test   ax,ax
c000266f:	0f 84 2e ff ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002675:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000267a:	0f b7 c8             	movzx  ecx,ax
c000267d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002682:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002686:	89 fa                	mov    edx,edi
c0002688:	66 c1 ea 04          	shr    dx,0x4
c000268c:	0f b7 d2             	movzx  edx,dx
c000268f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002693:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002696:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000269a:	39 c6                	cmp    esi,eax
c000269c:	0f 82 01 ff ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026a2:	29 c6                	sub    esi,eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 f0                	mov    eax,esi
c00026a8:	f7 f3                	div    ebx
c00026aa:	39 de                	cmp    esi,ebx
c00026ac:	0f 82 f1 fe ff ff    	jb     c00025a3 <mount_volume+0xc8>
c00026b2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b7:	0f 87 e6 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00026bd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c2:	0f 86 63 03 00 00    	jbe    c0002a2b <mount_volume+0x550>
c00026c8:	bb 03 00 00 00       	mov    ebx,0x3
c00026cd:	8d 70 02             	lea    esi,[eax+0x2]
c00026d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026db:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026de:	31 d2                	xor    edx,edx
c00026e0:	89 c8                	mov    eax,ecx
c00026e2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f5:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f8:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026ff:	31 d2                	xor    edx,edx
c0002701:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002705:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002709:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270f:	83 fb 03             	cmp    ebx,0x3
c0002712:	75 2b                	jne    c000273f <mount_volume+0x264>
c0002714:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002717:	e8 2f f3 ff ff       	call   c0001a4b <ld_word>
c000271c:	66 09 c7             	or     di,ax
c000271f:	0f 85 7e fe ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002725:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272b:	c1 e6 02             	shl    esi,0x2
c000272e:	e8 25 f3 ff ff       	call   c0001a58 <ld_dword>
c0002733:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000273a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273d:	eb 30                	jmp    c000276f <mount_volume+0x294>
c000273f:	66 85 ff             	test   di,di
c0002742:	0f 84 5b fe ff ff    	je     c00025a3 <mount_volume+0xc8>
c0002748:	31 d2                	xor    edx,edx
c000274a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002752:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002756:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002759:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275c:	83 fb 02             	cmp    ebx,0x2
c000275f:	75 04                	jne    c0002765 <mount_volume+0x28a>
c0002761:	01 f6                	add    esi,esi
c0002763:	eb 0a                	jmp    c000276f <mount_volume+0x294>
c0002765:	8d 04 76             	lea    eax,[esi+esi*2]
c0002768:	83 e6 01             	and    esi,0x1
c000276b:	d1 e8                	shr    eax,1
c000276d:	01 c6                	add    esi,eax
c000276f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002775:	c1 ee 09             	shr    esi,0x9
c0002778:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277c:	0f 87 21 fe ff ff    	ja     c00025a3 <mount_volume+0xc8>
c0002782:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002789:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002790:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002794:	83 fb 03             	cmp    ebx,0x3
c0002797:	75 7a                	jne    c0002813 <mount_volume+0x338>
c0002799:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279f:	e8 a7 f2 ff ff       	call   c0001a4b <ld_word>
c00027a4:	66 48                	dec    ax
c00027a6:	75 6b                	jne    c0002813 <mount_volume+0x338>
c00027a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b0:	83 c2 01             	add    edx,0x1
c00027b3:	89 e8                	mov    eax,ebp
c00027b5:	83 d1 00             	adc    ecx,0x0
c00027b8:	e8 6c fa ff ff       	call   c0002229 <move_window>
c00027bd:	85 c0                	test   eax,eax
c00027bf:	75 52                	jne    c0002813 <mount_volume+0x338>
c00027c1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027cb:	e8 7b f2 ff ff       	call   c0001a4b <ld_word>
c00027d0:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d4:	75 3d                	jne    c0002813 <mount_volume+0x338>
c00027d6:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d9:	e8 7a f2 ff ff       	call   c0001a58 <ld_dword>
c00027de:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e3:	75 2e                	jne    c0002813 <mount_volume+0x338>
c00027e5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027eb:	e8 68 f2 ff ff       	call   c0001a58 <ld_dword>
c00027f0:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f5:	75 1c                	jne    c0002813 <mount_volume+0x338>
c00027f7:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fd:	e8 56 f2 ff ff       	call   c0001a58 <ld_dword>
c0002802:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002805:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280b:	e8 48 f2 ff ff       	call   c0001a58 <ld_dword>
c0002810:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002813:	66 a1 40 a5 02 c0    	mov    ax,ds:0xc002a540
c0002819:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281c:	40                   	inc    eax
c000281d:	31 db                	xor    ebx,ebx
c000281f:	66 a3 40 a5 02 c0    	mov    ds:0xc002a540,ax
c0002825:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002829:	e9 0c 02 00 00       	jmp    c0002a3a <mount_volume+0x55f>
c000282e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002834:	e8 12 f2 ff ff       	call   c0001a4b <ld_word>
c0002839:	66 3d 00 01          	cmp    ax,0x100
c000283d:	0f 85 60 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002843:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000284a:	0f 85 53 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002850:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002856:	e8 15 f2 ff ff       	call   c0001a70 <ld_qword>
c000285b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002863:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002869:	e8 ea f1 ff ff       	call   c0001a58 <ld_dword>
c000286e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002871:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002877:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000287a:	fe c8                	dec    al
c000287c:	0f 85 21 fd ff ff    	jne    c00025a3 <mount_volume+0xc8>
c0002882:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002889:	bb 01 00 00 00       	mov    ebx,0x1
c000288e:	d3 e3                	shl    ebx,cl
c0002890:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002894:	66 85 db             	test   bx,bx
c0002897:	0f 84 06 fd ff ff    	je     c00025a3 <mount_volume+0xc8>
c000289d:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a3:	e8 b0 f1 ff ff       	call   c0001a58 <ld_dword>
c00028a8:	89 c6                	mov    esi,eax
c00028aa:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028af:	0f 87 ee fc ff ff    	ja     c00025a3 <mount_volume+0xc8>
c00028b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b9:	8d 40 02             	lea    eax,[eax+0x2]
c00028bc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028cf:	e8 84 f1 ff ff       	call   c0001a58 <ld_dword>
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028da:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028ec:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f2:	e8 61 f1 ff ff       	call   c0001a58 <ld_dword>
c00028f7:	31 d2                	xor    edx,edx
c00028f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002905:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002908:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290b:	0f b7 c3             	movzx  eax,bx
c000290e:	31 d2                	xor    edx,edx
c0002910:	0f af f0             	imul   esi,eax
c0002913:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002917:	89 f0                	mov    eax,esi
c0002919:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002921:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002925:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002929:	39 c1                	cmp    ecx,eax
c000292b:	89 df                	mov    edi,ebx
c000292d:	19 d7                	sbb    edi,edx
c000292f:	0f 82 6e fc ff ff    	jb     c00025a3 <mount_volume+0xc8>
c0002935:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293b:	31 db                	xor    ebx,ebx
c000293d:	e8 16 f1 ff ff       	call   c0001a58 <ld_dword>
c0002942:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002949:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002954:	85 db                	test   ebx,ebx
c0002956:	75 39                	jne    c0002991 <mount_volume+0x4b6>
c0002958:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002960:	0f 86 3d fc ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c0002966:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002969:	31 ff                	xor    edi,edi
c000296b:	89 e8                	mov    eax,ebp
c000296d:	e8 72 f3 ff ff       	call   c0001ce4 <clst2sect>
c0002972:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002976:	01 c6                	add    esi,eax
c0002978:	89 e8                	mov    eax,ebp
c000297a:	11 d7                	adc    edi,edx
c000297c:	89 f2                	mov    edx,esi
c000297e:	89 f9                	mov    ecx,edi
c0002980:	e8 a4 f8 ff ff       	call   c0002229 <move_window>
c0002985:	85 c0                	test   eax,eax
c0002987:	0f 85 07 fc ff ff    	jne    c0002594 <mount_volume+0xb9>
c000298d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002991:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002996:	74 0b                	je     c00029a3 <mount_volume+0x4c8>
c0002998:	83 c3 20             	add    ebx,0x20
c000299b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a1:	eb b1                	jmp    c0002954 <mount_volume+0x479>
c00029a3:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029aa:	e8 a9 f0 ff ff       	call   c0001a58 <ld_dword>
c00029af:	89 c3                	mov    ebx,eax
c00029b1:	83 f8 01             	cmp    eax,0x1
c00029b4:	0f 86 e9 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bd:	0f 86 e0 fb ff ff    	jbe    c00025a3 <mount_volume+0xc8>
c00029c3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029ca:	0f af c2             	imul   eax,edx
c00029cd:	31 d2                	xor    edx,edx
c00029cf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029db:	31 c9                	xor    ecx,ecx
c00029dd:	89 da                	mov    edx,ebx
c00029df:	89 e8                	mov    eax,ebp
c00029e1:	c1 ea 07             	shr    edx,0x7
c00029e4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029ea:	e8 3a f8 ff ff       	call   c0002229 <move_window>
c00029ef:	85 c0                	test   eax,eax
c00029f1:	0f 85 9d fb ff ff    	jne    c0002594 <mount_volume+0xb9>
c00029f7:	89 d8                	mov    eax,ebx
c00029f9:	83 e0 7f             	and    eax,0x7f
c00029fc:	8d 04 86             	lea    eax,[esi+eax*4]
c00029ff:	e8 54 f0 ff ff       	call   c0001a58 <ld_dword>
c0002a04:	83 f8 ff             	cmp    eax,0xffffffff
c0002a07:	74 0a                	je     c0002a13 <mount_volume+0x538>
c0002a09:	43                   	inc    ebx
c0002a0a:	39 d8                	cmp    eax,ebx
c0002a0c:	74 cd                	je     c00029db <mount_volume+0x500>
c0002a0e:	e9 90 fb ff ff       	jmp    c00025a3 <mount_volume+0xc8>
c0002a13:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a1a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a21:	bb 04 00 00 00       	mov    ebx,0x4
c0002a26:	e9 e8 fd ff ff       	jmp    c0002813 <mount_volume+0x338>
c0002a2b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a30:	19 db                	sbb    ebx,ebx
c0002a32:	83 c3 02             	add    ebx,0x2
c0002a35:	e9 93 fc ff ff       	jmp    c00026cd <mount_volume+0x1f2>
c0002a3a:	83 c4 3c             	add    esp,0x3c
c0002a3d:	89 d8                	mov    eax,ebx
c0002a3f:	5b                   	pop    ebx
c0002a40:	5e                   	pop    esi
c0002a41:	5f                   	pop    edi
c0002a42:	5d                   	pop    ebp
c0002a43:	c3                   	ret    

c0002a44 <find_bitmap>:
c0002a44:	55                   	push   ebp
c0002a45:	57                   	push   edi
c0002a46:	89 c7                	mov    edi,eax
c0002a48:	56                   	push   esi
c0002a49:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4c:	53                   	push   ebx
c0002a4d:	83 ec 1c             	sub    esp,0x1c
c0002a50:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a53:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a57:	83 e8 02             	sub    eax,0x2
c0002a5a:	39 f0                	cmp    eax,esi
c0002a5c:	77 02                	ja     c0002a60 <find_bitmap+0x1c>
c0002a5e:	31 f6                	xor    esi,esi
c0002a60:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a64:	89 f3                	mov    ebx,esi
c0002a66:	31 ed                	xor    ebp,ebp
c0002a68:	31 c9                	xor    ecx,ecx
c0002a6a:	89 da                	mov    edx,ebx
c0002a6c:	89 f8                	mov    eax,edi
c0002a6e:	c1 ea 0c             	shr    edx,0xc
c0002a71:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a74:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a77:	e8 ad f7 ff ff       	call   c0002229 <move_window>
c0002a7c:	85 c0                	test   eax,eax
c0002a7e:	75 68                	jne    c0002ae8 <find_bitmap+0xa4>
c0002a80:	89 da                	mov    edx,ebx
c0002a82:	89 d9                	mov    ecx,ebx
c0002a84:	c1 ea 03             	shr    edx,0x3
c0002a87:	83 e1 07             	and    ecx,0x7
c0002a8a:	b8 01 00 00 00       	mov    eax,0x1
c0002a8f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a95:	d3 e0                	shl    eax,cl
c0002a97:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a9a:	83 e9 02             	sub    ecx,0x2
c0002a9d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa5:	43                   	inc    ebx
c0002aa6:	21 c1                	and    ecx,eax
c0002aa8:	d1 e0                	shl    eax,1
c0002aaa:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aae:	77 09                	ja     c0002ab9 <find_bitmap+0x75>
c0002ab0:	31 db                	xor    ebx,ebx
c0002ab2:	ba 00 02 00 00       	mov    edx,0x200
c0002ab7:	31 c0                	xor    eax,eax
c0002ab9:	84 c9                	test   cl,cl
c0002abb:	75 10                	jne    c0002acd <find_bitmap+0x89>
c0002abd:	45                   	inc    ebp
c0002abe:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac2:	75 0f                	jne    c0002ad3 <find_bitmap+0x8f>
c0002ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac8:	83 c0 02             	add    eax,0x2
c0002acb:	eb 22                	jmp    c0002aef <find_bitmap+0xab>
c0002acd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad1:	31 ed                	xor    ebp,ebp
c0002ad3:	39 de                	cmp    esi,ebx
c0002ad5:	74 16                	je     c0002aed <find_bitmap+0xa9>
c0002ad7:	84 c0                	test   al,al
c0002ad9:	75 c6                	jne    c0002aa1 <find_bitmap+0x5d>
c0002adb:	42                   	inc    edx
c0002adc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae2:	77 84                	ja     c0002a68 <find_bitmap+0x24>
c0002ae4:	b0 01                	mov    al,0x1
c0002ae6:	eb b9                	jmp    c0002aa1 <find_bitmap+0x5d>
c0002ae8:	83 c8 ff             	or     eax,0xffffffff
c0002aeb:	eb 02                	jmp    c0002aef <find_bitmap+0xab>
c0002aed:	31 c0                	xor    eax,eax
c0002aef:	83 c4 1c             	add    esp,0x1c
c0002af2:	5b                   	pop    ebx
c0002af3:	5e                   	pop    esi
c0002af4:	5f                   	pop    edi
c0002af5:	5d                   	pop    ebp
c0002af6:	c3                   	ret    

c0002af7 <change_bitmap>:
c0002af7:	55                   	push   ebp
c0002af8:	89 cd                	mov    ebp,ecx
c0002afa:	57                   	push   edi
c0002afb:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afe:	56                   	push   esi
c0002aff:	89 c7                	mov    edi,eax
c0002b01:	53                   	push   ebx
c0002b02:	89 c8                	mov    eax,ecx
c0002b04:	83 ec 1c             	sub    esp,0x1c
c0002b07:	31 d2                	xor    edx,edx
c0002b09:	89 ce                	mov    esi,ecx
c0002b0b:	c1 e8 0c             	shr    eax,0xc
c0002b0e:	bb 01 00 00 00       	mov    ebx,0x1
c0002b13:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b16:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b19:	c1 ee 03             	shr    esi,0x3
c0002b1c:	83 e1 07             	and    ecx,0x7
c0002b1f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b25:	d3 e3                	shl    ebx,cl
c0002b27:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2b:	89 c1                	mov    ecx,eax
c0002b2d:	89 d3                	mov    ebx,edx
c0002b2f:	83 c1 01             	add    ecx,0x1
c0002b32:	83 d3 00             	adc    ebx,0x0
c0002b35:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b39:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3d:	89 d1                	mov    ecx,edx
c0002b3f:	89 c2                	mov    edx,eax
c0002b41:	89 f8                	mov    eax,edi
c0002b43:	e8 e1 f6 ff ff       	call   c0002229 <move_window>
c0002b48:	89 c1                	mov    ecx,eax
c0002b4a:	85 c0                	test   eax,eax
c0002b4c:	75 48                	jne    c0002b96 <change_bitmap+0x9f>
c0002b4e:	31 d2                	xor    edx,edx
c0002b50:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b54:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b58:	0f 95 c2             	setne  dl
c0002b5b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5f:	74 3c                	je     c0002b9d <change_bitmap+0xa6>
c0002b61:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b65:	4d                   	dec    ebp
c0002b66:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b6a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6e:	74 32                	je     c0002ba2 <change_bitmap+0xab>
c0002b70:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b74:	75 d8                	jne    c0002b4e <change_bitmap+0x57>
c0002b76:	8d 46 01             	lea    eax,[esi+0x1]
c0002b79:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7e:	89 c3                	mov    ebx,eax
c0002b80:	31 f6                	xor    esi,esi
c0002b82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b8a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b90:	74 99                	je     c0002b2b <change_bitmap+0x34>
c0002b92:	89 de                	mov    esi,ebx
c0002b94:	eb b8                	jmp    c0002b4e <change_bitmap+0x57>
c0002b96:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9b:	eb 05                	jmp    c0002ba2 <change_bitmap+0xab>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	83 c4 1c             	add    esp,0x1c
c0002ba5:	89 c8                	mov    eax,ecx
c0002ba7:	5b                   	pop    ebx
c0002ba8:	5e                   	pop    esi
c0002ba9:	5f                   	pop    edi
c0002baa:	5d                   	pop    ebp
c0002bab:	c3                   	ret    

c0002bac <put_fat>:
c0002bac:	83 fa 01             	cmp    edx,0x1
c0002baf:	0f 86 7b 01 00 00    	jbe    c0002d30 <put_fat+0x184>
c0002bb5:	55                   	push   ebp
c0002bb6:	57                   	push   edi
c0002bb7:	89 cf                	mov    edi,ecx
c0002bb9:	56                   	push   esi
c0002bba:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbf:	53                   	push   ebx
c0002bc0:	89 c6                	mov    esi,eax
c0002bc2:	83 ec 1c             	sub    esp,0x1c
c0002bc5:	89 d3                	mov    ebx,edx
c0002bc7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bca:	0f 86 68 01 00 00    	jbe    c0002d38 <put_fat+0x18c>
c0002bd0:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd2:	3c 02                	cmp    al,0x2
c0002bd4:	0f 84 c7 00 00 00    	je     c0002ca1 <put_fat+0xf5>
c0002bda:	77 09                	ja     c0002be5 <put_fat+0x39>
c0002bdc:	fe c8                	dec    al
c0002bde:	74 17                	je     c0002bf7 <put_fat+0x4b>
c0002be0:	e9 53 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002be5:	b9 02 00 00 00       	mov    ecx,0x2
c0002bea:	3c 04                	cmp    al,0x4
c0002bec:	0f 86 e1 00 00 00    	jbe    c0002cd3 <put_fat+0x127>
c0002bf2:	e9 41 01 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002bf7:	89 d5                	mov    ebp,edx
c0002bf9:	31 c9                	xor    ecx,ecx
c0002bfb:	d1 ed                	shr    ebp,1
c0002bfd:	89 f0                	mov    eax,esi
c0002bff:	01 d5                	add    ebp,edx
c0002c01:	89 ea                	mov    edx,ebp
c0002c03:	c1 ea 09             	shr    edx,0x9
c0002c06:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c09:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0c:	e8 18 f6 ff ff       	call   c0002229 <move_window>
c0002c11:	89 c1                	mov    ecx,eax
c0002c13:	85 c0                	test   eax,eax
c0002c15:	0f 85 1d 01 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c1b:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c22:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c25:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c33:	89 f8                	mov    eax,edi
c0002c35:	83 e3 01             	and    ebx,0x1
c0002c38:	74 0d                	je     c0002c47 <put_fat+0x9b>
c0002c3a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3d:	89 fa                	mov    edx,edi
c0002c3f:	83 e0 0f             	and    eax,0xf
c0002c42:	c1 e2 04             	shl    edx,0x4
c0002c45:	09 d0                	or     eax,edx
c0002c47:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4e:	31 c9                	xor    ecx,ecx
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	c1 ea 09             	shr    edx,0x9
c0002c57:	89 f0                	mov    eax,esi
c0002c59:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5f:	e8 c5 f5 ff ff       	call   c0002229 <move_window>
c0002c64:	89 c1                	mov    ecx,eax
c0002c66:	85 c0                	test   eax,eax
c0002c68:	0f 85 ca 00 00 00    	jne    c0002d38 <put_fat+0x18c>
c0002c6e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c72:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c78:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7c:	85 db                	test   ebx,ebx
c0002c7e:	74 07                	je     c0002c87 <put_fat+0xdb>
c0002c80:	c1 ef 04             	shr    edi,0x4
c0002c83:	89 fa                	mov    edx,edi
c0002c85:	eb 0e                	jmp    c0002c95 <put_fat+0xe9>
c0002c87:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c8a:	c1 ef 08             	shr    edi,0x8
c0002c8d:	83 e2 f0             	and    edx,0xfffffff0
c0002c90:	83 e7 0f             	and    edi,0xf
c0002c93:	09 fa                	or     edx,edi
c0002c95:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c98:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9c:	e9 97 00 00 00       	jmp    c0002d38 <put_fat+0x18c>
c0002ca1:	31 c9                	xor    ecx,ecx
c0002ca3:	c1 ea 08             	shr    edx,0x8
c0002ca6:	89 f0                	mov    eax,esi
c0002ca8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cab:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cae:	e8 76 f5 ff ff       	call   c0002229 <move_window>
c0002cb3:	89 c1                	mov    ecx,eax
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 7f                	jne    c0002d38 <put_fat+0x18c>
c0002cb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbd:	01 db                	add    ebx,ebx
c0002cbf:	0f b7 d7             	movzx  edx,di
c0002cc2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccc:	e8 ec ed ff ff       	call   c0001abd <st_word>
c0002cd1:	eb 53                	jmp    c0002d26 <put_fat+0x17a>
c0002cd3:	31 c9                	xor    ecx,ecx
c0002cd5:	c1 ea 07             	shr    edx,0x7
c0002cd8:	89 f0                	mov    eax,esi
c0002cda:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce0:	e8 44 f5 ff ff       	call   c0002229 <move_window>
c0002ce5:	89 c1                	mov    ecx,eax
c0002ce7:	85 c0                	test   eax,eax
c0002ce9:	75 4d                	jne    c0002d38 <put_fat+0x18c>
c0002ceb:	c1 e3 02             	shl    ebx,0x2
c0002cee:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf7:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfb:	74 1c                	je     c0002d19 <put_fat+0x16d>
c0002cfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d01:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d07:	89 d8                	mov    eax,ebx
c0002d09:	e8 4a ed ff ff       	call   c0001a58 <ld_dword>
c0002d0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d12:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d17:	09 c7                	or     edi,eax
c0002d19:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1d:	89 fa                	mov    edx,edi
c0002d1f:	89 d8                	mov    eax,ebx
c0002d21:	e8 9b ed ff ff       	call   c0001ac1 <st_dword>
c0002d26:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2e:	eb 08                	jmp    c0002d38 <put_fat+0x18c>
c0002d30:	b9 02 00 00 00       	mov    ecx,0x2
c0002d35:	89 c8                	mov    eax,ecx
c0002d37:	c3                   	ret    
c0002d38:	83 c4 1c             	add    esp,0x1c
c0002d3b:	89 c8                	mov    eax,ecx
c0002d3d:	5b                   	pop    ebx
c0002d3e:	5e                   	pop    esi
c0002d3f:	5f                   	pop    edi
c0002d40:	5d                   	pop    ebp
c0002d41:	c3                   	ret    

c0002d42 <fill_last_frag>:
c0002d42:	57                   	push   edi
c0002d43:	89 cf                	mov    edi,ecx
c0002d45:	56                   	push   esi
c0002d46:	89 d6                	mov    esi,edx
c0002d48:	53                   	push   ebx
c0002d49:	89 c3                	mov    ebx,eax
c0002d4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	74 21                	je     c0002d73 <fill_last_frag+0x31>
c0002d52:	89 f9                	mov    ecx,edi
c0002d54:	83 f8 01             	cmp    eax,0x1
c0002d57:	76 05                	jbe    c0002d5e <fill_last_frag+0x1c>
c0002d59:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5c:	29 c1                	sub    ecx,eax
c0002d5e:	8d 56 01             	lea    edx,[esi+0x1]
c0002d61:	29 c2                	sub    edx,eax
c0002d63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d65:	e8 42 fe ff ff       	call   c0002bac <put_fat>
c0002d6a:	85 c0                	test   eax,eax
c0002d6c:	75 05                	jne    c0002d73 <fill_last_frag+0x31>
c0002d6e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d71:	eb d8                	jmp    c0002d4b <fill_last_frag+0x9>
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <fill_first_frag>:
c0002d77:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7b:	75 2d                	jne    c0002daa <fill_first_frag+0x33>
c0002d7d:	57                   	push   edi
c0002d7e:	56                   	push   esi
c0002d7f:	53                   	push   ebx
c0002d80:	89 c3                	mov    ebx,eax
c0002d82:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d85:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d88:	01 d7                	add    edi,edx
c0002d8a:	39 fa                	cmp    edx,edi
c0002d8c:	74 14                	je     c0002da2 <fill_first_frag+0x2b>
c0002d8e:	8d 72 01             	lea    esi,[edx+0x1]
c0002d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d93:	89 f1                	mov    ecx,esi
c0002d95:	e8 12 fe ff ff       	call   c0002bac <put_fat>
c0002d9a:	89 f2                	mov    edx,esi
c0002d9c:	85 c0                	test   eax,eax
c0002d9e:	74 ea                	je     c0002d8a <fill_first_frag+0x13>
c0002da0:	eb 0b                	jmp    c0002dad <fill_first_frag+0x36>
c0002da2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da6:	31 c0                	xor    eax,eax
c0002da8:	eb 03                	jmp    c0002dad <fill_first_frag+0x36>
c0002daa:	31 c0                	xor    eax,eax
c0002dac:	c3                   	ret    
c0002dad:	5b                   	pop    ebx
c0002dae:	5e                   	pop    esi
c0002daf:	5f                   	pop    edi
c0002db0:	c3                   	ret    

c0002db1 <get_fat>:
c0002db1:	83 fa 01             	cmp    edx,0x1
c0002db4:	0f 86 db 01 00 00    	jbe    c0002f95 <get_fat+0x1e4>
c0002dba:	55                   	push   ebp
c0002dbb:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc0:	57                   	push   edi
c0002dc1:	56                   	push   esi
c0002dc2:	53                   	push   ebx
c0002dc3:	83 ec 1c             	sub    esp,0x1c
c0002dc6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dcb:	0f 86 cc 01 00 00    	jbe    c0002f9d <get_fat+0x1ec>
c0002dd1:	89 c3                	mov    ebx,eax
c0002dd3:	89 d6                	mov    esi,edx
c0002dd5:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd7:	3c 02                	cmp    al,0x2
c0002dd9:	0f 84 99 00 00 00    	je     c0002e78 <get_fat+0xc7>
c0002ddf:	77 09                	ja     c0002dea <get_fat+0x39>
c0002de1:	fe c8                	dec    al
c0002de3:	74 1a                	je     c0002dff <get_fat+0x4e>
c0002de5:	e9 b3 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dea:	3c 03                	cmp    al,0x3
c0002dec:	0f 84 b5 00 00 00    	je     c0002ea7 <get_fat+0xf6>
c0002df2:	3c 04                	cmp    al,0x4
c0002df4:	0f 84 e3 00 00 00    	je     c0002edd <get_fat+0x12c>
c0002dfa:	e9 9e 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	31 c9                	xor    ecx,ecx
c0002e03:	d1 eb                	shr    ebx,1
c0002e05:	89 f8                	mov    eax,edi
c0002e07:	01 d3                	add    ebx,edx
c0002e09:	89 da                	mov    edx,ebx
c0002e0b:	c1 ea 09             	shr    edx,0x9
c0002e0e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e11:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e14:	e8 10 f4 ff ff       	call   c0002229 <move_window>
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	74 08                	je     c0002e25 <get_fat+0x74>
c0002e1d:	83 c9 ff             	or     ecx,0xffffffff
c0002e20:	e9 78 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e25:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e30:	89 ea                	mov    edx,ebp
c0002e32:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e36:	c1 ea 09             	shr    edx,0x9
c0002e39:	89 f8                	mov    eax,edi
c0002e3b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e41:	e8 e3 f3 ff ff       	call   c0002229 <move_window>
c0002e46:	85 c0                	test   eax,eax
c0002e48:	75 d3                	jne    c0002e1d <get_fat+0x6c>
c0002e4a:	0f b6 c3             	movzx  eax,bl
c0002e4d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e53:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e58:	c1 e3 08             	shl    ebx,0x8
c0002e5b:	09 c3                	or     ebx,eax
c0002e5d:	89 d9                	mov    ecx,ebx
c0002e5f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e65:	83 e6 01             	and    esi,0x1
c0002e68:	0f 84 2f 01 00 00    	je     c0002f9d <get_fat+0x1ec>
c0002e6e:	89 d9                	mov    ecx,ebx
c0002e70:	c1 e9 04             	shr    ecx,0x4
c0002e73:	e9 25 01 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002e78:	31 c9                	xor    ecx,ecx
c0002e7a:	c1 ea 08             	shr    edx,0x8
c0002e7d:	89 f8                	mov    eax,edi
c0002e7f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e82:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e85:	e8 9f f3 ff ff       	call   c0002229 <move_window>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 8f                	jne    c0002e1d <get_fat+0x6c>
c0002e8e:	01 f6                	add    esi,esi
c0002e90:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e96:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e9a:	e8 ac eb ff ff       	call   c0001a4b <ld_word>
c0002e9f:	0f b7 c8             	movzx  ecx,ax
c0002ea2:	e9 f6 00 00 00       	jmp    c0002f9d <get_fat+0x1ec>
c0002ea7:	31 c9                	xor    ecx,ecx
c0002ea9:	c1 ea 07             	shr    edx,0x7
c0002eac:	89 f8                	mov    eax,edi
c0002eae:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb4:	e8 70 f3 ff ff       	call   c0002229 <move_window>
c0002eb9:	85 c0                	test   eax,eax
c0002ebb:	0f 85 5c ff ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002ec1:	c1 e6 02             	shl    esi,0x2
c0002ec4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ece:	e8 85 eb ff ff       	call   c0001a58 <ld_dword>
c0002ed3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed8:	e9 b4 00 00 00       	jmp    c0002f91 <get_fat+0x1e0>
c0002edd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee3:	89 d1                	mov    ecx,edx
c0002ee5:	09 c1                	or     ecx,eax
c0002ee7:	74 06                	je     c0002eef <get_fat+0x13e>
c0002ee9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eed:	75 0f                	jne    c0002efe <get_fat+0x14d>
c0002eef:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef4:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef8:	0f 85 9f 00 00 00    	jne    c0002f9d <get_fat+0x1ec>
c0002efe:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f02:	89 f5                	mov    ebp,esi
c0002f04:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f09:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0f:	80 f9 02             	cmp    cl,0x2
c0002f12:	75 35                	jne    c0002f49 <get_fat+0x198>
c0002f14:	83 c0 ff             	add    eax,0xffffffff
c0002f17:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1c:	83 d2 ff             	adc    edx,0xffffffff
c0002f1f:	31 db                	xor    ebx,ebx
c0002f21:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f25:	53                   	push   ebx
c0002f26:	c1 ea 09             	shr    edx,0x9
c0002f29:	51                   	push   ecx
c0002f2a:	52                   	push   edx
c0002f2b:	50                   	push   eax
c0002f2c:	e8 ab 05 02 00       	call   c00234dc <__udivdi3>
c0002f31:	83 c4 10             	add    esp,0x10
c0002f34:	b9 01 00 00 00       	mov    ecx,0x1
c0002f39:	39 c5                	cmp    ebp,eax
c0002f3b:	77 60                	ja     c0002f9d <get_fat+0x1ec>
c0002f3d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f42:	74 59                	je     c0002f9d <get_fat+0x1ec>
c0002f44:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f47:	eb 54                	jmp    c0002f9d <get_fat+0x1ec>
c0002f49:	80 f9 03             	cmp    cl,0x3
c0002f4c:	75 05                	jne    c0002f53 <get_fat+0x1a2>
c0002f4e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f51:	77 f1                	ja     c0002f44 <get_fat+0x193>
c0002f53:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f58:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5c:	75 3f                	jne    c0002f9d <get_fat+0x1ec>
c0002f5e:	31 c9                	xor    ecx,ecx
c0002f60:	89 f2                	mov    edx,esi
c0002f62:	89 f8                	mov    eax,edi
c0002f64:	c1 ea 07             	shr    edx,0x7
c0002f67:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6d:	e8 b7 f2 ff ff       	call   c0002229 <move_window>
c0002f72:	85 c0                	test   eax,eax
c0002f74:	0f 85 a3 fe ff ff    	jne    c0002e1d <get_fat+0x6c>
c0002f7a:	c1 e6 02             	shl    esi,0x2
c0002f7d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f87:	e8 cc ea ff ff       	call   c0001a58 <ld_dword>
c0002f8c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f91:	89 c1                	mov    ecx,eax
c0002f93:	eb 08                	jmp    c0002f9d <get_fat+0x1ec>
c0002f95:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9a:	89 c8                	mov    eax,ecx
c0002f9c:	c3                   	ret    
c0002f9d:	83 c4 1c             	add    esp,0x1c
c0002fa0:	89 c8                	mov    eax,ecx
c0002fa2:	5b                   	pop    ebx
c0002fa3:	5e                   	pop    esi
c0002fa4:	5f                   	pop    edi
c0002fa5:	5d                   	pop    ebp
c0002fa6:	c3                   	ret    

c0002fa7 <dir_sdi>:
c0002fa7:	55                   	push   ebp
c0002fa8:	57                   	push   edi
c0002fa9:	56                   	push   esi
c0002faa:	53                   	push   ebx
c0002fab:	89 c3                	mov    ebx,eax
c0002fad:	83 ec 1c             	sub    esp,0x1c
c0002fb0:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb2:	31 c0                	xor    eax,eax
c0002fb4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb7:	0f 94 c0             	sete   al
c0002fba:	48                   	dec    eax
c0002fbb:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc0:	05 00 00 00 10       	add    eax,0x10000000
c0002fc5:	39 d0                	cmp    eax,edx
c0002fc7:	77 0a                	ja     c0002fd3 <dir_sdi+0x2c>
c0002fc9:	b8 02 00 00 00       	mov    eax,0x2
c0002fce:	e9 c4 00 00 00       	jmp    c0003097 <dir_sdi+0xf0>
c0002fd3:	89 d6                	mov    esi,edx
c0002fd5:	f6 c2 1f             	test   dl,0x1f
c0002fd8:	75 ef                	jne    c0002fc9 <dir_sdi+0x22>
c0002fda:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe0:	85 c9                	test   ecx,ecx
c0002fe2:	75 2d                	jne    c0003011 <dir_sdi+0x6a>
c0002fe4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe7:	77 1b                	ja     c0003004 <dir_sdi+0x5d>
c0002fe9:	89 f2                	mov    edx,esi
c0002feb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fef:	c1 ea 05             	shr    edx,0x5
c0002ff2:	39 c2                	cmp    edx,eax
c0002ff4:	73 d3                	jae    c0002fc9 <dir_sdi+0x22>
c0002ff6:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff9:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003002:	eb 4b                	jmp    c000304f <dir_sdi+0xa8>
c0003004:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003007:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300b:	85 c0                	test   eax,eax
c000300d:	74 da                	je     c0002fe9 <dir_sdi+0x42>
c000300f:	89 c1                	mov    ecx,eax
c0003011:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003015:	c1 e5 09             	shl    ebp,0x9
c0003018:	89 ca                	mov    edx,ecx
c000301a:	39 ee                	cmp    esi,ebp
c000301c:	72 1c                	jb     c000303a <dir_sdi+0x93>
c000301e:	89 d8                	mov    eax,ebx
c0003020:	e8 8c fd ff ff       	call   c0002db1 <get_fat>
c0003025:	89 c1                	mov    ecx,eax
c0003027:	83 f8 ff             	cmp    eax,0xffffffff
c000302a:	74 66                	je     c0003092 <dir_sdi+0xeb>
c000302c:	83 f8 01             	cmp    eax,0x1
c000302f:	76 98                	jbe    c0002fc9 <dir_sdi+0x22>
c0003031:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003034:	76 93                	jbe    c0002fc9 <dir_sdi+0x22>
c0003036:	29 ee                	sub    esi,ebp
c0003038:	eb de                	jmp    c0003018 <dir_sdi+0x71>
c000303a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303e:	89 f8                	mov    eax,edi
c0003040:	e8 9f ec ff ff       	call   c0001ce4 <clst2sect>
c0003045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003049:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003052:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003055:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003058:	89 d1                	mov    ecx,edx
c000305a:	09 c1                	or     ecx,eax
c000305c:	0f 84 67 ff ff ff    	je     c0002fc9 <dir_sdi+0x22>
c0003062:	89 f1                	mov    ecx,esi
c0003064:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306c:	c1 e9 09             	shr    ecx,0x9
c000306f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003073:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003077:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003087:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308e:	31 c0                	xor    eax,eax
c0003090:	eb 05                	jmp    c0003097 <dir_sdi+0xf0>
c0003092:	b8 01 00 00 00       	mov    eax,0x1
c0003097:	83 c4 1c             	add    esp,0x1c
c000309a:	5b                   	pop    ebx
c000309b:	5e                   	pop    esi
c000309c:	5f                   	pop    edi
c000309d:	5d                   	pop    ebp
c000309e:	c3                   	ret    

c000309f <create_chain>:
c000309f:	55                   	push   ebp
c00030a0:	89 c5                	mov    ebp,eax
c00030a2:	57                   	push   edi
c00030a3:	56                   	push   esi
c00030a4:	53                   	push   ebx
c00030a5:	83 ec 1c             	sub    esp,0x1c
c00030a8:	85 d2                	test   edx,edx
c00030aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b0:	75 0e                	jne    c00030c0 <create_chain+0x21>
c00030b2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b5:	85 ff                	test   edi,edi
c00030b7:	74 39                	je     c00030f2 <create_chain+0x53>
c00030b9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bc:	77 39                	ja     c00030f7 <create_chain+0x58>
c00030be:	eb 32                	jmp    c00030f2 <create_chain+0x53>
c00030c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c4:	e8 e8 fc ff ff       	call   c0002db1 <get_fat>
c00030c9:	89 c3                	mov    ebx,eax
c00030cb:	83 f8 01             	cmp    eax,0x1
c00030ce:	77 0a                	ja     c00030da <create_chain+0x3b>
c00030d0:	bb 01 00 00 00       	mov    ebx,0x1
c00030d5:	e9 ba 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c00030da:	83 f8 ff             	cmp    eax,0xffffffff
c00030dd:	0f 84 62 01 00 00    	je     c0003245 <create_chain+0x1a6>
c00030e3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e6:	0f 87 a8 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c00030ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f0:	eb 05                	jmp    c00030f7 <create_chain+0x58>
c00030f2:	bf 01 00 00 00       	mov    edi,0x1
c00030f7:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fb:	75 07                	jne    c0003104 <create_chain+0x65>
c00030fd:	31 db                	xor    ebx,ebx
c00030ff:	e9 90 01 00 00       	jmp    c0003294 <create_chain+0x1f5>
c0003104:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003107:	75 74                	jne    c000317d <create_chain+0xde>
c0003109:	b9 01 00 00 00       	mov    ecx,0x1
c000310e:	89 fa                	mov    edx,edi
c0003110:	89 f0                	mov    eax,esi
c0003112:	e8 2d f9 ff ff       	call   c0002a44 <find_bitmap>
c0003117:	89 c3                	mov    ebx,eax
c0003119:	8d 40 ff             	lea    eax,[eax-0x1]
c000311c:	83 f8 fd             	cmp    eax,0xfffffffd
c000311f:	0f 87 6f 01 00 00    	ja     c0003294 <create_chain+0x1f5>
c0003125:	83 ec 0c             	sub    esp,0xc
c0003128:	b9 01 00 00 00       	mov    ecx,0x1
c000312d:	6a 01                	push   0x1
c000312f:	89 da                	mov    edx,ebx
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 bf f9 ff ff       	call   c0002af7 <change_bitmap>
c0003138:	83 c4 10             	add    esp,0x10
c000313b:	83 f8 02             	cmp    eax,0x2
c000313e:	74 90                	je     c00030d0 <create_chain+0x31>
c0003140:	83 f8 01             	cmp    eax,0x1
c0003143:	0f 84 fc 00 00 00    	je     c0003245 <create_chain+0x1a6>
c0003149:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314e:	75 09                	jne    c0003159 <create_chain+0xba>
c0003150:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003154:	e9 0c 01 00 00       	jmp    c0003265 <create_chain+0x1c6>
c0003159:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315d:	0f 85 e7 00 00 00    	jne    c000324a <create_chain+0x1ab>
c0003163:	8d 57 01             	lea    edx,[edi+0x1]
c0003166:	39 da                	cmp    edx,ebx
c0003168:	0f 84 f7 00 00 00    	je     c0003265 <create_chain+0x1c6>
c000316e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003171:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003175:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003178:	e9 cd 00 00 00       	jmp    c000324a <create_chain+0x1ab>
c000317d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003181:	75 41                	jne    c00031c4 <create_chain+0x125>
c0003183:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003186:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003189:	77 05                	ja     c0003190 <create_chain+0xf1>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 18 fc ff ff       	call   c0002db1 <get_fat>
c0003199:	83 f8 01             	cmp    eax,0x1
c000319c:	0f 84 2e ff ff ff    	je     c00030d0 <create_chain+0x31>
c00031a2:	83 f8 ff             	cmp    eax,0xffffffff
c00031a5:	0f 84 9a 00 00 00    	je     c0003245 <create_chain+0x1a6>
c00031ab:	85 c0                	test   eax,eax
c00031ad:	74 11                	je     c00031c0 <create_chain+0x121>
c00031af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b2:	83 f8 01             	cmp    eax,0x1
c00031b5:	76 0d                	jbe    c00031c4 <create_chain+0x125>
c00031b7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ba:	76 08                	jbe    c00031c4 <create_chain+0x125>
c00031bc:	89 c7                	mov    edi,eax
c00031be:	eb 04                	jmp    c00031c4 <create_chain+0x125>
c00031c0:	85 db                	test   ebx,ebx
c00031c2:	75 38                	jne    c00031fc <create_chain+0x15d>
c00031c4:	89 fb                	mov    ebx,edi
c00031c6:	43                   	inc    ebx
c00031c7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031ca:	77 0e                	ja     c00031da <create_chain+0x13b>
c00031cc:	83 ff 01             	cmp    edi,0x1
c00031cf:	0f 86 28 ff ff ff    	jbe    c00030fd <create_chain+0x5e>
c00031d5:	bb 02 00 00 00       	mov    ebx,0x2
c00031da:	89 da                	mov    edx,ebx
c00031dc:	89 e8                	mov    eax,ebp
c00031de:	e8 ce fb ff ff       	call   c0002db1 <get_fat>
c00031e3:	85 c0                	test   eax,eax
c00031e5:	74 15                	je     c00031fc <create_chain+0x15d>
c00031e7:	83 f8 01             	cmp    eax,0x1
c00031ea:	0f 84 e0 fe ff ff    	je     c00030d0 <create_chain+0x31>
c00031f0:	40                   	inc    eax
c00031f1:	74 52                	je     c0003245 <create_chain+0x1a6>
c00031f3:	39 fb                	cmp    ebx,edi
c00031f5:	75 cf                	jne    c00031c6 <create_chain+0x127>
c00031f7:	e9 01 ff ff ff       	jmp    c00030fd <create_chain+0x5e>
c00031fc:	83 c9 ff             	or     ecx,0xffffffff
c00031ff:	89 da                	mov    edx,ebx
c0003201:	89 f0                	mov    eax,esi
c0003203:	e8 a4 f9 ff ff       	call   c0002bac <put_fat>
c0003208:	85 c0                	test   eax,eax
c000320a:	75 32                	jne    c000323e <create_chain+0x19f>
c000320c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003211:	74 11                	je     c0003224 <create_chain+0x185>
c0003213:	89 d9                	mov    ecx,ebx
c0003215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003219:	89 f0                	mov    eax,esi
c000321b:	e8 8c f9 ff ff       	call   c0002bac <put_fat>
c0003220:	85 c0                	test   eax,eax
c0003222:	75 1a                	jne    c000323e <create_chain+0x19f>
c0003224:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003227:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000322a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003230:	39 d0                	cmp    eax,edx
c0003232:	77 04                	ja     c0003238 <create_chain+0x199>
c0003234:	48                   	dec    eax
c0003235:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003238:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323c:	eb 56                	jmp    c0003294 <create_chain+0x1f5>
c000323e:	48                   	dec    eax
c000323f:	0f 85 8b fe ff ff    	jne    c00030d0 <create_chain+0x31>
c0003245:	83 cb ff             	or     ebx,0xffffffff
c0003248:	eb 4a                	jmp    c0003294 <create_chain+0x1f5>
c000324a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003251:	41                   	inc    ecx
c0003252:	39 d9                	cmp    ecx,ebx
c0003254:	75 19                	jne    c000326f <create_chain+0x1d0>
c0003256:	b9 02 00 00 00       	mov    ecx,0x2
c000325b:	85 d2                	test   edx,edx
c000325d:	74 03                	je     c0003262 <create_chain+0x1c3>
c000325f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003262:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003265:	85 c0                	test   eax,eax
c0003267:	0f 85 63 fe ff ff    	jne    c00030d0 <create_chain+0x31>
c000326d:	eb b5                	jmp    c0003224 <create_chain+0x185>
c000326f:	85 d2                	test   edx,edx
c0003271:	75 07                	jne    c000327a <create_chain+0x1db>
c0003273:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000327a:	89 d9                	mov    ecx,ebx
c000327c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003280:	89 e8                	mov    eax,ebp
c0003282:	e8 bb fa ff ff       	call   c0002d42 <fill_last_frag>
c0003287:	85 c0                	test   eax,eax
c0003289:	75 b3                	jne    c000323e <create_chain+0x19f>
c000328b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003292:	eb 90                	jmp    c0003224 <create_chain+0x185>
c0003294:	83 c4 1c             	add    esp,0x1c
c0003297:	89 d8                	mov    eax,ebx
c0003299:	5b                   	pop    ebx
c000329a:	5e                   	pop    esi
c000329b:	5f                   	pop    edi
c000329c:	5d                   	pop    ebp
c000329d:	c3                   	ret    

c000329e <remove_chain>:
c000329e:	55                   	push   ebp
c000329f:	57                   	push   edi
c00032a0:	56                   	push   esi
c00032a1:	53                   	push   ebx
c00032a2:	83 ec 1c             	sub    esp,0x1c
c00032a5:	83 fa 01             	cmp    edx,0x1
c00032a8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ae:	77 0a                	ja     c00032ba <remove_chain+0x1c>
c00032b0:	b8 02 00 00 00       	mov    eax,0x2
c00032b5:	e9 24 01 00 00       	jmp    c00033de <remove_chain+0x140>
c00032ba:	89 d6                	mov    esi,edx
c00032bc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032bf:	76 ef                	jbe    c00032b0 <remove_chain+0x12>
c00032c1:	89 c7                	mov    edi,eax
c00032c3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c8:	75 06                	jne    c00032d0 <remove_chain+0x32>
c00032ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ce:	eb 54                	jmp    c0003324 <remove_chain+0x86>
c00032d0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d3:	75 06                	jne    c00032db <remove_chain+0x3d>
c00032d5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d9:	74 ef                	je     c00032ca <remove_chain+0x2c>
c00032db:	83 c9 ff             	or     ecx,0xffffffff
c00032de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e2:	89 d8                	mov    eax,ebx
c00032e4:	e8 c3 f8 ff ff       	call   c0002bac <put_fat>
c00032e9:	85 c0                	test   eax,eax
c00032eb:	74 dd                	je     c00032ca <remove_chain+0x2c>
c00032ed:	e9 ec 00 00 00       	jmp    c00033de <remove_chain+0x140>
c00032f2:	83 f8 01             	cmp    eax,0x1
c00032f5:	74 b9                	je     c00032b0 <remove_chain+0x12>
c00032f7:	83 f8 ff             	cmp    eax,0xffffffff
c00032fa:	74 6d                	je     c0003369 <remove_chain+0xcb>
c00032fc:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ff:	75 6f                	jne    c0003370 <remove_chain+0xd2>
c0003301:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003304:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003307:	8d 51 fe             	lea    edx,[ecx-0x2]
c000330a:	39 d0                	cmp    eax,edx
c000330c:	73 08                	jae    c0003316 <remove_chain+0x78>
c000330e:	40                   	inc    eax
c000330f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003313:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003316:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003319:	39 e9                	cmp    ecx,ebp
c000331b:	75 64                	jne    c0003381 <remove_chain+0xe3>
c000331d:	89 ee                	mov    esi,ebp
c000331f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003322:	76 0f                	jbe    c0003333 <remove_chain+0x95>
c0003324:	89 f2                	mov    edx,esi
c0003326:	89 f8                	mov    eax,edi
c0003328:	e8 84 fa ff ff       	call   c0002db1 <get_fat>
c000332d:	89 c5                	mov    ebp,eax
c000332f:	85 c0                	test   eax,eax
c0003331:	75 bf                	jne    c00032f2 <remove_chain+0x54>
c0003333:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003336:	0f 85 a0 00 00 00    	jne    c00033dc <remove_chain+0x13e>
c000333c:	eb 6c                	jmp    c00033aa <remove_chain+0x10c>
c000333e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003341:	84 c0                	test   al,al
c0003343:	75 7d                	jne    c00033c2 <remove_chain+0x124>
c0003345:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003348:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334c:	0f 84 86 00 00 00    	je     c00033d8 <remove_chain+0x13a>
c0003352:	89 da                	mov    edx,ebx
c0003354:	89 f8                	mov    eax,edi
c0003356:	e8 56 fa ff ff       	call   c0002db1 <get_fat>
c000335b:	83 f8 01             	cmp    eax,0x1
c000335e:	0f 86 4c ff ff ff    	jbe    c00032b0 <remove_chain+0x12>
c0003364:	83 f8 ff             	cmp    eax,0xffffffff
c0003367:	75 4e                	jne    c00033b7 <remove_chain+0x119>
c0003369:	b8 01 00 00 00       	mov    eax,0x1
c000336e:	eb 6e                	jmp    c00033de <remove_chain+0x140>
c0003370:	31 c9                	xor    ecx,ecx
c0003372:	89 f2                	mov    edx,esi
c0003374:	89 d8                	mov    eax,ebx
c0003376:	e8 31 f8 ff ff       	call   c0002bac <put_fat>
c000337b:	85 c0                	test   eax,eax
c000337d:	74 82                	je     c0003301 <remove_chain+0x63>
c000337f:	eb 5d                	jmp    c00033de <remove_chain+0x140>
c0003381:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003384:	75 1b                	jne    c00033a1 <remove_chain+0x103>
c0003386:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000338a:	89 d8                	mov    eax,ebx
c000338c:	83 ec 0c             	sub    esp,0xc
c000338f:	6a 00                	push   0x0
c0003391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003395:	e8 5d f7 ff ff       	call   c0002af7 <change_bitmap>
c000339a:	83 c4 10             	add    esp,0x10
c000339d:	85 c0                	test   eax,eax
c000339f:	75 3d                	jne    c00033de <remove_chain+0x140>
c00033a1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a5:	e9 73 ff ff ff       	jmp    c000331d <remove_chain+0x7f>
c00033aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033af:	75 8d                	jne    c000333e <remove_chain+0xa0>
c00033b1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b5:	eb 25                	jmp    c00033dc <remove_chain+0x13e>
c00033b7:	8d 53 01             	lea    edx,[ebx+0x1]
c00033ba:	89 c3                	mov    ebx,eax
c00033bc:	39 c2                	cmp    edx,eax
c00033be:	74 88                	je     c0003348 <remove_chain+0xaa>
c00033c0:	eb 1a                	jmp    c00033dc <remove_chain+0x13e>
c00033c2:	3c 03                	cmp    al,0x3
c00033c4:	75 16                	jne    c00033dc <remove_chain+0x13e>
c00033c6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cd:	77 0d                	ja     c00033dc <remove_chain+0x13e>
c00033cf:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d6:	72 04                	jb     c00033dc <remove_chain+0x13e>
c00033d8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033dc:	31 c0                	xor    eax,eax
c00033de:	83 c4 1c             	add    esp,0x1c
c00033e1:	5b                   	pop    ebx
c00033e2:	5e                   	pop    esi
c00033e3:	5f                   	pop    edi
c00033e4:	5d                   	pop    ebp
c00033e5:	c3                   	ret    

c00033e6 <dir_clear>:
c00033e6:	55                   	push   ebp
c00033e7:	57                   	push   edi
c00033e8:	56                   	push   esi
c00033e9:	89 c6                	mov    esi,eax
c00033eb:	53                   	push   ebx
c00033ec:	83 ec 1c             	sub    esp,0x1c
c00033ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f3:	e8 9d ed ff ff       	call   c0002195 <sync_window>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	0f 85 de 00 00 00    	jne    c00034de <dir_clear+0xf8>
c0003400:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003404:	89 f0                	mov    eax,esi
c0003406:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003409:	e8 d6 e8 ff ff       	call   c0001ce4 <clst2sect>
c000340e:	b9 00 02 00 00       	mov    ecx,0x200
c0003413:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003421:	89 e8                	mov    eax,ebp
c0003423:	31 d2                	xor    edx,edx
c0003425:	e8 b5 e6 ff ff       	call   c0001adf <mem_set>
c000342a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342e:	c1 e3 09             	shl    ebx,0x9
c0003431:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003437:	76 1f                	jbe    c0003458 <dir_clear+0x72>
c0003439:	bb 00 80 00 00       	mov    ebx,0x8000
c000343e:	eb 18                	jmp    c0003458 <dir_clear+0x72>
c0003440:	83 ec 0c             	sub    esp,0xc
c0003443:	53                   	push   ebx
c0003444:	e8 35 4e 00 00       	call   c000827e <ff_memalloc>
c0003449:	83 c4 10             	add    esp,0x10
c000344c:	89 c7                	mov    edi,eax
c000344e:	85 c0                	test   eax,eax
c0003450:	0f 85 8f 00 00 00    	jne    c00034e5 <dir_clear+0xff>
c0003456:	d1 eb                	shr    ebx,1
c0003458:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345e:	77 e0                	ja     c0003440 <dir_clear+0x5a>
c0003460:	31 db                	xor    ebx,ebx
c0003462:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003466:	39 d8                	cmp    eax,ebx
c0003468:	76 66                	jbe    c00034d0 <dir_clear+0xea>
c000346a:	83 ec 0c             	sub    esp,0xc
c000346d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003471:	6a 01                	push   0x1
c0003473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347b:	55                   	push   ebp
c000347c:	50                   	push   eax
c000347d:	e8 94 e5 ff ff       	call   c0001a16 <disk_write>
c0003482:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003487:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348c:	83 c4 20             	add    esp,0x20
c000348f:	85 c0                	test   eax,eax
c0003491:	75 3d                	jne    c00034d0 <dir_clear+0xea>
c0003493:	43                   	inc    ebx
c0003494:	eb cc                	jmp    c0003462 <dir_clear+0x7c>
c0003496:	83 ec 0c             	sub    esp,0xc
c0003499:	31 d2                	xor    edx,edx
c000349b:	55                   	push   ebp
c000349c:	89 d8                	mov    eax,ebx
c000349e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a6:	52                   	push   edx
c00034a7:	50                   	push   eax
c00034a8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ac:	57                   	push   edi
c00034ad:	50                   	push   eax
c00034ae:	e8 63 e5 ff ff       	call   c0001a16 <disk_write>
c00034b3:	83 c4 20             	add    esp,0x20
c00034b6:	85 c0                	test   eax,eax
c00034b8:	75 0a                	jne    c00034c4 <dir_clear+0xde>
c00034ba:	01 eb                	add    ebx,ebp
c00034bc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c0:	39 d8                	cmp    eax,ebx
c00034c2:	77 d2                	ja     c0003496 <dir_clear+0xb0>
c00034c4:	83 ec 0c             	sub    esp,0xc
c00034c7:	57                   	push   edi
c00034c8:	e8 c7 4d 00 00       	call   c0008294 <ff_memfree>
c00034cd:	83 c4 10             	add    esp,0x10
c00034d0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d4:	39 d8                	cmp    eax,ebx
c00034d6:	0f 95 c0             	setne  al
c00034d9:	0f b6 c0             	movzx  eax,al
c00034dc:	eb 19                	jmp    c00034f7 <dir_clear+0x111>
c00034de:	b8 01 00 00 00       	mov    eax,0x1
c00034e3:	eb 12                	jmp    c00034f7 <dir_clear+0x111>
c00034e5:	89 d9                	mov    ecx,ebx
c00034e7:	31 d2                	xor    edx,edx
c00034e9:	c1 eb 09             	shr    ebx,0x9
c00034ec:	e8 ee e5 ff ff       	call   c0001adf <mem_set>
c00034f1:	89 dd                	mov    ebp,ebx
c00034f3:	31 db                	xor    ebx,ebx
c00034f5:	eb c5                	jmp    c00034bc <dir_clear+0xd6>
c00034f7:	83 c4 1c             	add    esp,0x1c
c00034fa:	5b                   	pop    ebx
c00034fb:	5e                   	pop    esi
c00034fc:	5f                   	pop    edi
c00034fd:	5d                   	pop    ebp
c00034fe:	c3                   	ret    

c00034ff <dir_next>:
c00034ff:	55                   	push   ebp
c0003500:	57                   	push   edi
c0003501:	56                   	push   esi
c0003502:	53                   	push   ebx
c0003503:	89 c3                	mov    ebx,eax
c0003505:	83 ec 1c             	sub    esp,0x1c
c0003508:	8b 28                	mov    ebp,DWORD PTR [eax]
c000350a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003511:	8d 78 20             	lea    edi,[eax+0x20]
c0003514:	31 c0                	xor    eax,eax
c0003516:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000351a:	0f 94 c0             	sete   al
c000351d:	48                   	dec    eax
c000351e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003523:	05 00 00 00 10       	add    eax,0x10000000
c0003528:	39 f8                	cmp    eax,edi
c000352a:	77 0e                	ja     c000353a <dir_next+0x3b>
c000352c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003533:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000353a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003540:	b8 04 00 00 00       	mov    eax,0x4
c0003545:	89 ce                	mov    esi,ecx
c0003547:	09 d6                	or     esi,edx
c0003549:	0f 84 da 00 00 00    	je     c0003629 <dir_next+0x12a>
c000354f:	89 f8                	mov    eax,edi
c0003551:	25 ff 01 00 00       	and    eax,0x1ff
c0003556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000355a:	0f 85 b9 00 00 00    	jne    c0003619 <dir_next+0x11a>
c0003560:	83 c2 01             	add    edx,0x1
c0003563:	83 d1 00             	adc    ecx,0x0
c0003566:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003569:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356f:	85 d2                	test   edx,edx
c0003571:	75 29                	jne    c000359c <dir_next+0x9d>
c0003573:	89 fa                	mov    edx,edi
c0003575:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003579:	c1 ea 05             	shr    edx,0x5
c000357c:	39 c2                	cmp    edx,eax
c000357e:	0f 82 95 00 00 00    	jb     c0003619 <dir_next+0x11a>
c0003584:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003592:	b8 04 00 00 00       	mov    eax,0x4
c0003597:	e9 8d 00 00 00       	jmp    c0003629 <dir_next+0x12a>
c000359c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a0:	89 f9                	mov    ecx,edi
c00035a2:	48                   	dec    eax
c00035a3:	c1 e9 09             	shr    ecx,0x9
c00035a6:	85 c8                	test   eax,ecx
c00035a8:	75 6f                	jne    c0003619 <dir_next+0x11a>
c00035aa:	89 d8                	mov    eax,ebx
c00035ac:	e8 00 f8 ff ff       	call   c0002db1 <get_fat>
c00035b1:	89 c6                	mov    esi,eax
c00035b3:	83 f8 01             	cmp    eax,0x1
c00035b6:	77 07                	ja     c00035bf <dir_next+0xc0>
c00035b8:	b8 02 00 00 00       	mov    eax,0x2
c00035bd:	eb 6a                	jmp    c0003629 <dir_next+0x12a>
c00035bf:	83 f8 ff             	cmp    eax,0xffffffff
c00035c2:	75 07                	jne    c00035cb <dir_next+0xcc>
c00035c4:	b8 01 00 00 00       	mov    eax,0x1
c00035c9:	eb 5e                	jmp    c0003629 <dir_next+0x12a>
c00035cb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ce:	77 37                	ja     c0003607 <dir_next+0x108>
c00035d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d5:	74 ad                	je     c0003584 <dir_next+0x85>
c00035d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035da:	89 d8                	mov    eax,ebx
c00035dc:	e8 be fa ff ff       	call   c000309f <create_chain>
c00035e1:	89 c6                	mov    esi,eax
c00035e3:	b8 07 00 00 00       	mov    eax,0x7
c00035e8:	85 f6                	test   esi,esi
c00035ea:	74 3d                	je     c0003629 <dir_next+0x12a>
c00035ec:	83 fe 01             	cmp    esi,0x1
c00035ef:	74 c7                	je     c00035b8 <dir_next+0xb9>
c00035f1:	83 fe ff             	cmp    esi,0xffffffff
c00035f4:	74 ce                	je     c00035c4 <dir_next+0xc5>
c00035f6:	89 f2                	mov    edx,esi
c00035f8:	89 e8                	mov    eax,ebp
c00035fa:	e8 e7 fd ff ff       	call   c00033e6 <dir_clear>
c00035ff:	85 c0                	test   eax,eax
c0003601:	75 c1                	jne    c00035c4 <dir_next+0xc5>
c0003603:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003607:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000360a:	89 f2                	mov    edx,esi
c000360c:	89 e8                	mov    eax,ebp
c000360e:	e8 d1 e6 ff ff       	call   c0001ce4 <clst2sect>
c0003613:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003616:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003619:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003620:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003624:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003627:	31 c0                	xor    eax,eax
c0003629:	83 c4 1c             	add    esp,0x1c
c000362c:	5b                   	pop    ebx
c000362d:	5e                   	pop    esi
c000362e:	5f                   	pop    edi
c000362f:	5d                   	pop    ebp
c0003630:	c3                   	ret    

c0003631 <load_xdir>:
c0003631:	55                   	push   ebp
c0003632:	57                   	push   edi
c0003633:	56                   	push   esi
c0003634:	89 c6                	mov    esi,eax
c0003636:	53                   	push   ebx
c0003637:	83 ec 1c             	sub    esp,0x1c
c000363a:	8b 00                	mov    eax,DWORD PTR [eax]
c000363c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003642:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003645:	e8 df eb ff ff       	call   c0002229 <move_window>
c000364a:	89 c3                	mov    ebx,eax
c000364c:	85 c0                	test   eax,eax
c000364e:	0f 85 0c 01 00 00    	jne    c0003760 <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000365a:	0f 85 fb 00 00 00    	jne    c000375b <load_xdir+0x12a>
c0003660:	89 f8                	mov    eax,edi
c0003662:	b9 20 00 00 00       	mov    ecx,0x20
c0003667:	e8 5e e4 ff ff       	call   c0001aca <mem_cpy>
c000366c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003670:	40                   	inc    eax
c0003671:	c1 e0 05             	shl    eax,0x5
c0003674:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003678:	83 e8 60             	sub    eax,0x60
c000367b:	3d 00 02 00 00       	cmp    eax,0x200
c0003680:	0f 87 d5 00 00 00    	ja     c000375b <load_xdir+0x12a>
c0003686:	31 d2                	xor    edx,edx
c0003688:	89 f0                	mov    eax,esi
c000368a:	e8 70 fe ff ff       	call   c00034ff <dir_next>
c000368f:	89 c3                	mov    ebx,eax
c0003691:	83 f8 04             	cmp    eax,0x4
c0003694:	0f 84 c1 00 00 00    	je     c000375b <load_xdir+0x12a>
c000369a:	85 c0                	test   eax,eax
c000369c:	0f 85 be 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036a2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00036aa:	e8 7a eb ff ff       	call   c0002229 <move_window>
c00036af:	89 c3                	mov    ebx,eax
c00036b1:	85 c0                	test   eax,eax
c00036b3:	0f 85 a7 00 00 00    	jne    c0003760 <load_xdir+0x12f>
c00036b9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036bf:	0f 85 96 00 00 00    	jne    c000375b <load_xdir+0x12a>
c00036c5:	8d 47 20             	lea    eax,[edi+0x20]
c00036c8:	b9 20 00 00 00       	mov    ecx,0x20
c00036cd:	e8 f8 e3 ff ff       	call   c0001aca <mem_cpy>
c00036d2:	31 d2                	xor    edx,edx
c00036d4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d8:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dd:	83 c0 2c             	add    eax,0x2c
c00036e0:	f7 f1                	div    ecx
c00036e2:	c1 e0 05             	shl    eax,0x5
c00036e5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e9:	77 70                	ja     c000375b <load_xdir+0x12a>
c00036eb:	bd 40 00 00 00       	mov    ebp,0x40
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 f0                	mov    eax,esi
c00036f4:	e8 06 fe ff ff       	call   c00034ff <dir_next>
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 f8 04             	cmp    eax,0x4
c00036fe:	74 5b                	je     c000375b <load_xdir+0x12a>
c0003700:	85 c0                	test   eax,eax
c0003702:	75 5c                	jne    c0003760 <load_xdir+0x12f>
c0003704:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003707:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000370a:	8b 06                	mov    eax,DWORD PTR [esi]
c000370c:	e8 18 eb ff ff       	call   c0002229 <move_window>
c0003711:	89 c3                	mov    ebx,eax
c0003713:	85 c0                	test   eax,eax
c0003715:	75 49                	jne    c0003760 <load_xdir+0x12f>
c0003717:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000371a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371d:	75 3c                	jne    c000375b <load_xdir+0x12a>
c000371f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003725:	77 0d                	ja     c0003734 <load_xdir+0x103>
c0003727:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000372a:	b9 20 00 00 00       	mov    ecx,0x20
c000372f:	e8 96 e3 ff ff       	call   c0001aca <mem_cpy>
c0003734:	83 c5 20             	add    ebp,0x20
c0003737:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373b:	77 b3                	ja     c00036f0 <load_xdir+0xbf>
c000373d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003743:	77 1b                	ja     c0003760 <load_xdir+0x12f>
c0003745:	89 f8                	mov    eax,edi
c0003747:	e8 cd e7 ff ff       	call   c0001f19 <xdir_sum>
c000374c:	89 c1                	mov    ecx,eax
c000374e:	8d 47 02             	lea    eax,[edi+0x2]
c0003751:	e8 f5 e2 ff ff       	call   c0001a4b <ld_word>
c0003756:	66 39 c1             	cmp    cx,ax
c0003759:	74 05                	je     c0003760 <load_xdir+0x12f>
c000375b:	bb 02 00 00 00       	mov    ebx,0x2
c0003760:	83 c4 1c             	add    esp,0x1c
c0003763:	89 d8                	mov    eax,ebx
c0003765:	5b                   	pop    ebx
c0003766:	5e                   	pop    esi
c0003767:	5f                   	pop    edi
c0003768:	5d                   	pop    ebp
c0003769:	c3                   	ret    

c000376a <load_obj_xdir>:
c000376a:	53                   	push   ebx
c000376b:	89 c3                	mov    ebx,eax
c000376d:	83 ec 08             	sub    esp,0x8
c0003770:	8b 02                	mov    eax,DWORD PTR [edx]
c0003772:	89 03                	mov    DWORD PTR [ebx],eax
c0003774:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003777:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000377a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003780:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003783:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000378a:	30 c0                	xor    al,al
c000378c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003793:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003796:	89 d8                	mov    eax,ebx
c0003798:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379b:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379e:	e8 04 f8 ff ff       	call   c0002fa7 <dir_sdi>
c00037a3:	85 c0                	test   eax,eax
c00037a5:	75 0b                	jne    c00037b2 <load_obj_xdir+0x48>
c00037a7:	89 d8                	mov    eax,ebx
c00037a9:	83 c4 08             	add    esp,0x8
c00037ac:	5b                   	pop    ebx
c00037ad:	e9 7f fe ff ff       	jmp    c0003631 <load_xdir>
c00037b2:	83 c4 08             	add    esp,0x8
c00037b5:	5b                   	pop    ebx
c00037b6:	c3                   	ret    

c00037b7 <dir_read>:
c00037b7:	55                   	push   ebp
c00037b8:	bd 04 00 00 00       	mov    ebp,0x4
c00037bd:	57                   	push   edi
c00037be:	56                   	push   esi
c00037bf:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c4:	53                   	push   ebx
c00037c5:	89 c3                	mov    ebx,eax
c00037c7:	83 ec 1c             	sub    esp,0x1c
c00037ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ce:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037db:	89 c8                	mov    eax,ecx
c00037dd:	09 d0                	or     eax,edx
c00037df:	0f 84 25 01 00 00    	je     c000390a <dir_read+0x153>
c00037e5:	89 f8                	mov    eax,edi
c00037e7:	e8 3d ea ff ff       	call   c0002229 <move_window>
c00037ec:	89 c5                	mov    ebp,eax
c00037ee:	85 c0                	test   eax,eax
c00037f0:	0f 85 23 01 00 00    	jne    c0003919 <dir_read+0x162>
c00037f6:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fb:	84 c9                	test   cl,cl
c00037fd:	0f 84 11 01 00 00    	je     c0003914 <dir_read+0x15d>
c0003803:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003806:	75 48                	jne    c0003850 <dir_read+0x99>
c0003808:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380d:	74 10                	je     c000381f <dir_read+0x68>
c000380f:	80 f9 83             	cmp    cl,0x83
c0003812:	0f 85 dd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003818:	31 ed                	xor    ebp,ebp
c000381a:	e9 08 01 00 00       	jmp    c0003927 <dir_read+0x170>
c000381f:	80 f9 85             	cmp    cl,0x85
c0003822:	0f 85 cd 00 00 00    	jne    c00038f5 <dir_read+0x13e>
c0003828:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382e:	89 d8                	mov    eax,ebx
c0003830:	e8 fc fd ff ff       	call   c0003631 <load_xdir>
c0003835:	89 c5                	mov    ebp,eax
c0003837:	85 c0                	test   eax,eax
c0003839:	0f 85 da 00 00 00    	jne    c0003919 <dir_read+0x162>
c000383f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003842:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003845:	83 e0 3f             	and    eax,0x3f
c0003848:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384b:	e9 d7 00 00 00       	jmp    c0003927 <dir_read+0x170>
c0003850:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003853:	83 e0 3f             	and    eax,0x3f
c0003856:	80 f9 2e             	cmp    cl,0x2e
c0003859:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003860:	0f 84 8a 00 00 00    	je     c00038f0 <dir_read+0x139>
c0003866:	80 f9 e5             	cmp    cl,0xe5
c0003869:	0f 84 81 00 00 00    	je     c00038f0 <dir_read+0x139>
c000386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003873:	83 e0 1f             	and    eax,0x1f
c0003876:	83 f8 08             	cmp    eax,0x8
c0003879:	0f 94 c0             	sete   al
c000387c:	0f b6 c0             	movzx  eax,al
c000387f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003883:	75 6b                	jne    c00038f0 <dir_read+0x139>
c0003885:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000388a:	75 44                	jne    c00038d0 <dir_read+0x119>
c000388c:	f6 c1 40             	test   cl,0x40
c000388f:	74 12                	je     c00038a3 <dir_read+0xec>
c0003891:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003894:	83 e1 bf             	and    ecx,0xffffffbf
c0003897:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a1:	eb 06                	jmp    c00038a9 <dir_read+0xf2>
c00038a3:	89 f0                	mov    eax,esi
c00038a5:	38 c8                	cmp    al,cl
c00038a7:	75 47                	jne    c00038f0 <dir_read+0x139>
c00038a9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ad:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b5:	75 3e                	jne    c00038f5 <dir_read+0x13e>
c00038b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038be:	e8 8a e4 ff ff       	call   c0001d4d <pick_lfn>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	74 2e                	je     c00038f5 <dir_read+0x13e>
c00038c7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038cb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ce:	eb 25                	jmp    c00038f5 <dir_read+0x13e>
c00038d0:	89 f0                	mov    eax,esi
c00038d2:	84 c0                	test   al,al
c00038d4:	75 11                	jne    c00038e7 <dir_read+0x130>
c00038d6:	89 d0                	mov    eax,edx
c00038d8:	e8 2a e6 ff ff       	call   c0001f07 <sum_sfn>
c00038dd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e1:	0f 84 31 ff ff ff    	je     c0003818 <dir_read+0x61>
c00038e7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ee:	eb 37                	jmp    c0003927 <dir_read+0x170>
c00038f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f5:	31 d2                	xor    edx,edx
c00038f7:	89 d8                	mov    eax,ebx
c00038f9:	e8 01 fc ff ff       	call   c00034ff <dir_next>
c00038fe:	89 c5                	mov    ebp,eax
c0003900:	85 c0                	test   eax,eax
c0003902:	0f 84 cd fe ff ff    	je     c00037d5 <dir_read+0x1e>
c0003908:	eb 0f                	jmp    c0003919 <dir_read+0x162>
c000390a:	85 ed                	test   ebp,ebp
c000390c:	0f 84 06 ff ff ff    	je     c0003818 <dir_read+0x61>
c0003912:	eb 05                	jmp    c0003919 <dir_read+0x162>
c0003914:	bd 04 00 00 00       	mov    ebp,0x4
c0003919:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003920:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003927:	83 c4 1c             	add    esp,0x1c
c000392a:	89 e8                	mov    eax,ebp
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_alloc>:
c0003931:	55                   	push   ebp
c0003932:	89 d5                	mov    ebp,edx
c0003934:	57                   	push   edi
c0003935:	31 d2                	xor    edx,edx
c0003937:	56                   	push   esi
c0003938:	53                   	push   ebx
c0003939:	89 c3                	mov    ebx,eax
c000393b:	83 ec 0c             	sub    esp,0xc
c000393e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003940:	e8 62 f6 ff ff       	call   c0002fa7 <dir_sdi>
c0003945:	85 c0                	test   eax,eax
c0003947:	75 4e                	jne    c0003997 <dir_alloc+0x66>
c0003949:	31 f6                	xor    esi,esi
c000394b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003951:	89 f8                	mov    eax,edi
c0003953:	e8 d1 e8 ff ff       	call   c0002229 <move_window>
c0003958:	85 c0                	test   eax,eax
c000395a:	75 3b                	jne    c0003997 <dir_alloc+0x66>
c000395c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003962:	8a 12                	mov    dl,BYTE PTR [edx]
c0003964:	75 07                	jne    c000396d <dir_alloc+0x3c>
c0003966:	f7 d2                	not    edx
c0003968:	c0 ea 07             	shr    dl,0x7
c000396b:	eb 0d                	jmp    c000397a <dir_alloc+0x49>
c000396d:	84 d2                	test   dl,dl
c000396f:	0f 94 c1             	sete   cl
c0003972:	80 fa e5             	cmp    dl,0xe5
c0003975:	0f 94 c2             	sete   dl
c0003978:	09 ca                	or     edx,ecx
c000397a:	84 d2                	test   dl,dl
c000397c:	74 07                	je     c0003985 <dir_alloc+0x54>
c000397e:	46                   	inc    esi
c000397f:	39 ee                	cmp    esi,ebp
c0003981:	75 04                	jne    c0003987 <dir_alloc+0x56>
c0003983:	eb 1c                	jmp    c00039a1 <dir_alloc+0x70>
c0003985:	31 f6                	xor    esi,esi
c0003987:	ba 01 00 00 00       	mov    edx,0x1
c000398c:	89 d8                	mov    eax,ebx
c000398e:	e8 6c fb ff ff       	call   c00034ff <dir_next>
c0003993:	85 c0                	test   eax,eax
c0003995:	74 b4                	je     c000394b <dir_alloc+0x1a>
c0003997:	83 f8 04             	cmp    eax,0x4
c000399a:	75 05                	jne    c00039a1 <dir_alloc+0x70>
c000399c:	b8 07 00 00 00       	mov    eax,0x7
c00039a1:	83 c4 0c             	add    esp,0xc
c00039a4:	5b                   	pop    ebx
c00039a5:	5e                   	pop    esi
c00039a6:	5f                   	pop    edi
c00039a7:	5d                   	pop    ebp
c00039a8:	c3                   	ret    

c00039a9 <store_xdir>:
c00039a9:	55                   	push   ebp
c00039aa:	57                   	push   edi
c00039ab:	89 c7                	mov    edi,eax
c00039ad:	56                   	push   esi
c00039ae:	53                   	push   ebx
c00039af:	83 ec 0c             	sub    esp,0xc
c00039b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b7:	89 e8                	mov    eax,ebp
c00039b9:	e8 5b e5 ff ff       	call   c0001f19 <xdir_sum>
c00039be:	0f b7 d0             	movzx  edx,ax
c00039c1:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c4:	e8 f4 e0 ff ff       	call   c0001abd <st_word>
c00039c9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cd:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d0:	89 f8                	mov    eax,edi
c00039d2:	e8 d0 f5 ff ff       	call   c0002fa7 <dir_sdi>
c00039d7:	89 c6                	mov    esi,eax
c00039d9:	85 f6                	test   esi,esi
c00039db:	75 3d                	jne    c0003a1a <store_xdir+0x71>
c00039dd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e3:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e5:	e8 3f e8 ff ff       	call   c0002229 <move_window>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	75 2a                	jne    c0003a1a <store_xdir+0x71>
c00039f0:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f3:	b9 20 00 00 00       	mov    ecx,0x20
c00039f8:	89 ea                	mov    edx,ebp
c00039fa:	e8 cb e0 ff ff       	call   c0001aca <mem_cpy>
c00039ff:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a01:	85 db                	test   ebx,ebx
c0003a03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a07:	74 11                	je     c0003a1a <store_xdir+0x71>
c0003a09:	31 d2                	xor    edx,edx
c0003a0b:	89 f8                	mov    eax,edi
c0003a0d:	83 c5 20             	add    ebp,0x20
c0003a10:	e8 ea fa ff ff       	call   c00034ff <dir_next>
c0003a15:	4b                   	dec    ebx
c0003a16:	89 c6                	mov    esi,eax
c0003a18:	eb bf                	jmp    c00039d9 <store_xdir+0x30>
c0003a1a:	89 f0                	mov    eax,esi
c0003a1c:	83 fe 02             	cmp    esi,0x2
c0003a1f:	76 05                	jbe    c0003a26 <store_xdir+0x7d>
c0003a21:	b8 02 00 00 00       	mov    eax,0x2
c0003a26:	83 c4 0c             	add    esp,0xc
c0003a29:	5b                   	pop    ebx
c0003a2a:	5e                   	pop    esi
c0003a2b:	5f                   	pop    edi
c0003a2c:	5d                   	pop    ebp
c0003a2d:	c3                   	ret    

c0003a2e <dir_remove>:
c0003a2e:	57                   	push   edi
c0003a2f:	56                   	push   esi
c0003a30:	53                   	push   ebx
c0003a31:	89 c3                	mov    ebx,eax
c0003a33:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a36:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a38:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3b:	83 fa ff             	cmp    edx,0xffffffff
c0003a3e:	74 09                	je     c0003a49 <dir_remove+0x1b>
c0003a40:	e8 62 f5 ff ff       	call   c0002fa7 <dir_sdi>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 41                	jne    c0003a8a <dir_remove+0x5c>
c0003a49:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4f:	89 f0                	mov    eax,esi
c0003a51:	e8 d3 e7 ff ff       	call   c0002229 <move_window>
c0003a56:	85 c0                	test   eax,eax
c0003a58:	75 26                	jne    c0003a80 <dir_remove+0x52>
c0003a5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a60:	75 05                	jne    c0003a67 <dir_remove+0x39>
c0003a62:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a65:	eb 03                	jmp    c0003a6a <dir_remove+0x3c>
c0003a67:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a6a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a71:	73 17                	jae    c0003a8a <dir_remove+0x5c>
c0003a73:	31 d2                	xor    edx,edx
c0003a75:	89 d8                	mov    eax,ebx
c0003a77:	e8 83 fa ff ff       	call   c00034ff <dir_next>
c0003a7c:	85 c0                	test   eax,eax
c0003a7e:	74 c9                	je     c0003a49 <dir_remove+0x1b>
c0003a80:	83 f8 04             	cmp    eax,0x4
c0003a83:	75 05                	jne    c0003a8a <dir_remove+0x5c>
c0003a85:	b8 02 00 00 00       	mov    eax,0x2
c0003a8a:	5b                   	pop    ebx
c0003a8b:	5e                   	pop    esi
c0003a8c:	5f                   	pop    edi
c0003a8d:	c3                   	ret    

c0003a8e <create_name>:
c0003a8e:	55                   	push   ebp
c0003a8f:	89 d5                	mov    ebp,edx
c0003a91:	57                   	push   edi
c0003a92:	89 c7                	mov    edi,eax
c0003a94:	56                   	push   esi
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	53                   	push   ebx
c0003a98:	83 ec 3c             	sub    esp,0x3c
c0003a9b:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aaa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aae:	e8 72 e0 ff ff       	call   c0001b25 <tchar2uni>
c0003ab3:	89 c3                	mov    ebx,eax
c0003ab5:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab8:	75 0a                	jne    c0003ac4 <create_name+0x36>
c0003aba:	b8 06 00 00 00       	mov    eax,0x6
c0003abf:	e9 9e 02 00 00       	jmp    c0003d62 <create_name+0x2d4>
c0003ac4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac9:	76 0c                	jbe    c0003ad7 <create_name+0x49>
c0003acb:	c1 e8 10             	shr    eax,0x10
c0003ace:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad6:	46                   	inc    esi
c0003ad7:	66 83 fb 1f          	cmp    bx,0x1f
c0003adb:	76 4f                	jbe    c0003b2c <create_name+0x9e>
c0003add:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae1:	74 35                	je     c0003b18 <create_name+0x8a>
c0003ae3:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae7:	74 2f                	je     c0003b18 <create_name+0x8a>
c0003ae9:	66 83 fb 7f          	cmp    bx,0x7f
c0003aed:	77 11                	ja     c0003b00 <create_name+0x72>
c0003aef:	0f b7 d3             	movzx  edx,bx
c0003af2:	b8 92 5f 02 c0       	mov    eax,0xc0025f92
c0003af7:	e8 11 e0 ff ff       	call   c0001b0d <chk_chr>
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 ba                	jne    c0003aba <create_name+0x2c>
c0003b00:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b06:	77 b2                	ja     c0003aba <create_name+0x2c>
c0003b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b10:	46                   	inc    esi
c0003b11:	eb 97                	jmp    c0003aaa <create_name+0x1c>
c0003b13:	40                   	inc    eax
c0003b14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1e:	80 fa 2f             	cmp    dl,0x2f
c0003b21:	74 f0                	je     c0003b13 <create_name+0x85>
c0003b23:	80 fa 5c             	cmp    dl,0x5c
c0003b26:	74 eb                	je     c0003b13 <create_name+0x85>
c0003b28:	31 db                	xor    ebx,ebx
c0003b2a:	eb 02                	jmp    c0003b2e <create_name+0xa0>
c0003b2c:	b3 04                	mov    bl,0x4
c0003b2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b32:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b35:	85 f6                	test   esi,esi
c0003b37:	74 18                	je     c0003b51 <create_name+0xc3>
c0003b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b42:	66 83 f8 20          	cmp    ax,0x20
c0003b46:	74 06                	je     c0003b4e <create_name+0xc0>
c0003b48:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4c:	75 03                	jne    c0003b51 <create_name+0xc3>
c0003b4e:	4e                   	dec    esi
c0003b4f:	eb e4                	jmp    c0003b35 <create_name+0xa7>
c0003b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b55:	31 ed                	xor    ebp,ebp
c0003b57:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5d:	85 f6                	test   esi,esi
c0003b5f:	0f 84 55 ff ff ff    	je     c0003aba <create_name+0x2c>
c0003b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b69:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b70:	66 83 f8 20          	cmp    ax,0x20
c0003b74:	75 04                	jne    c0003b7a <create_name+0xec>
c0003b76:	89 d5                	mov    ebp,edx
c0003b78:	eb eb                	jmp    c0003b65 <create_name+0xd7>
c0003b7a:	85 ed                	test   ebp,ebp
c0003b7c:	75 06                	jne    c0003b84 <create_name+0xf6>
c0003b7e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b82:	75 08                	jne    c0003b8c <create_name+0xfe>
c0003b84:	83 cb 03             	or     ebx,0x3
c0003b87:	eb 03                	jmp    c0003b8c <create_name+0xfe>
c0003b89:	4e                   	dec    esi
c0003b8a:	74 0c                	je     c0003b98 <create_name+0x10a>
c0003b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b90:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b96:	75 f1                	jne    c0003b89 <create_name+0xfb>
c0003b98:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9d:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba0:	ba 20 00 00 00       	mov    edx,0x20
c0003ba5:	e8 35 df ff ff       	call   c0001adf <mem_set>
c0003baa:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb2:	31 c9                	xor    ecx,ecx
c0003bb4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc8:	66 85 ed             	test   bp,bp
c0003bcb:	0f 84 30 01 00 00    	je     c0003d01 <create_name+0x273>
c0003bd1:	66 83 fd 20          	cmp    bp,0x20
c0003bd5:	74 10                	je     c0003be7 <create_name+0x159>
c0003bd7:	66 83 fd 2e          	cmp    bp,0x2e
c0003bdb:	75 13                	jne    c0003bf0 <create_name+0x162>
c0003bdd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be1:	0f 84 6b 01 00 00    	je     c0003d52 <create_name+0x2c4>
c0003be7:	83 cb 03             	or     ebx,0x3
c0003bea:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bee:	eb c9                	jmp    c0003bb9 <create_name+0x12b>
c0003bf0:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf4:	73 0b                	jae    c0003c01 <create_name+0x173>
c0003bf6:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bfa:	75 47                	jne    c0003c43 <create_name+0x1b5>
c0003bfc:	e9 51 01 00 00       	jmp    c0003d52 <create_name+0x2c4>
c0003c01:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c06:	75 10                	jne    c0003c18 <create_name+0x18a>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c13:	e9 e9 00 00 00       	jmp    c0003d01 <create_name+0x273>
c0003c18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1c:	74 0d                	je     c0003c2b <create_name+0x19d>
c0003c1e:	83 cb 03             	or     ebx,0x3
c0003c21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c25:	0f 87 d6 00 00 00    	ja     c0003d01 <create_name+0x273>
c0003c2b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c30:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c34:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3c:	b9 08 00 00 00       	mov    ecx,0x8
c0003c41:	eb a7                	jmp    c0003bea <create_name+0x15c>
c0003c43:	66 83 fd 7f          	cmp    bp,0x7f
c0003c47:	76 68                	jbe    c0003cb1 <create_name+0x223>
c0003c49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4d:	88 da                	mov    dl,bl
c0003c4f:	83 ca 02             	or     edx,0x2
c0003c52:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c56:	50                   	push   eax
c0003c57:	50                   	push   eax
c0003c58:	68 b5 01 00 00       	push   0x1b5
c0003c5d:	55                   	push   ebp
c0003c5e:	e8 48 46 00 00       	call   c00082ab <ff_uni2oem>
c0003c63:	83 c4 10             	add    esp,0x10
c0003c66:	89 c5                	mov    ebp,eax
c0003c68:	a8 80                	test   al,0x80
c0003c6a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c72:	74 0c                	je     c0003c80 <create_name+0x1f2>
c0003c74:	83 e5 7f             	and    ebp,0x7f
c0003c77:	0f b6 ad e0 5e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda120]
c0003c7e:	eb 2a                	jmp    c0003caa <create_name+0x21c>
c0003c80:	66 3d ff 00          	cmp    ax,0xff
c0003c84:	76 24                	jbe    c0003caa <create_name+0x21c>
c0003c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c8a:	48                   	dec    eax
c0003c8b:	39 c8                	cmp    eax,ecx
c0003c8d:	77 0c                	ja     c0003c9b <create_name+0x20d>
c0003c8f:	83 cb 03             	or     ebx,0x3
c0003c92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c96:	e9 4f ff ff ff       	jmp    c0003bea <create_name+0x15c>
c0003c9b:	89 e8                	mov    eax,ebp
c0003c9d:	88 d3                	mov    bl,dl
c0003c9f:	66 c1 e8 08          	shr    ax,0x8
c0003ca3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca7:	41                   	inc    ecx
c0003ca8:	eb 4b                	jmp    c0003cf5 <create_name+0x267>
c0003caa:	88 d3                	mov    bl,dl
c0003cac:	66 85 ed             	test   bp,bp
c0003caf:	74 19                	je     c0003cca <create_name+0x23c>
c0003cb1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb5:	0f b7 d5             	movzx  edx,bp
c0003cb8:	b8 9b 5f 02 c0       	mov    eax,0xc0025f9b
c0003cbd:	e8 4b de ff ff       	call   c0001b0d <chk_chr>
c0003cc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc6:	85 c0                	test   eax,eax
c0003cc8:	74 0a                	je     c0003cd4 <create_name+0x246>
c0003cca:	83 cb 03             	or     ebx,0x3
c0003ccd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd2:	eb 21                	jmp    c0003cf5 <create_name+0x267>
c0003cd4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd7:	66 83 f8 19          	cmp    ax,0x19
c0003cdb:	77 07                	ja     c0003ce4 <create_name+0x256>
c0003cdd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce2:	eb 11                	jmp    c0003cf5 <create_name+0x267>
c0003ce4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce7:	66 83 f8 19          	cmp    ax,0x19
c0003ceb:	77 08                	ja     c0003cf5 <create_name+0x267>
c0003ced:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf2:	83 ed 20             	sub    ebp,0x20
c0003cf5:	89 e8                	mov    eax,ebp
c0003cf7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfb:	41                   	inc    ecx
c0003cfc:	e9 e9 fe ff ff       	jmp    c0003bea <create_name+0x15c>
c0003d01:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d05:	75 04                	jne    c0003d0b <create_name+0x27d>
c0003d07:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d10:	75 05                	jne    c0003d17 <create_name+0x289>
c0003d12:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1b:	83 e0 0c             	and    eax,0xc
c0003d1e:	3c 0c                	cmp    al,0xc
c0003d20:	74 0b                	je     c0003d2d <create_name+0x29f>
c0003d22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d26:	83 e0 03             	and    eax,0x3
c0003d29:	3c 03                	cmp    al,0x3
c0003d2b:	75 05                	jne    c0003d32 <create_name+0x2a4>
c0003d2d:	83 cb 02             	or     ebx,0x2
c0003d30:	eb 19                	jmp    c0003d4b <create_name+0x2bd>
c0003d32:	f6 c3 02             	test   bl,0x2
c0003d35:	75 14                	jne    c0003d4b <create_name+0x2bd>
c0003d37:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3c:	74 03                	je     c0003d41 <create_name+0x2b3>
c0003d3e:	83 cb 10             	or     ebx,0x10
c0003d41:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d46:	74 03                	je     c0003d4b <create_name+0x2bd>
c0003d48:	83 cb 08             	or     ebx,0x8
c0003d4b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	eb 10                	jmp    c0003d62 <create_name+0x2d4>
c0003d52:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d57:	0f 85 ce fe ff ff    	jne    c0003c2b <create_name+0x19d>
c0003d5d:	e9 a6 fe ff ff       	jmp    c0003c08 <create_name+0x17a>
c0003d62:	83 c4 3c             	add    esp,0x3c
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	5f                   	pop    edi
c0003d68:	5d                   	pop    ebp
c0003d69:	c3                   	ret    

c0003d6a <xname_sum>:
c0003d6a:	56                   	push   esi
c0003d6b:	53                   	push   ebx
c0003d6c:	89 c6                	mov    esi,eax
c0003d6e:	51                   	push   ecx
c0003d6f:	31 db                	xor    ebx,ebx
c0003d71:	83 c6 02             	add    esi,0x2
c0003d74:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d78:	66 85 c0             	test   ax,ax
c0003d7b:	74 1f                	je     c0003d9c <xname_sum+0x32>
c0003d7d:	83 ec 0c             	sub    esp,0xc
c0003d80:	66 d1 cb             	ror    bx,1
c0003d83:	50                   	push   eax
c0003d84:	e8 1e 46 00 00       	call   c00083a7 <ff_wtoupper>
c0003d89:	83 c4 10             	add    esp,0x10
c0003d8c:	0f b6 d0             	movzx  edx,al
c0003d8f:	66 c1 e8 08          	shr    ax,0x8
c0003d93:	01 d3                	add    ebx,edx
c0003d95:	66 d1 cb             	ror    bx,1
c0003d98:	01 c3                	add    ebx,eax
c0003d9a:	eb d5                	jmp    c0003d71 <xname_sum+0x7>
c0003d9c:	89 d8                	mov    eax,ebx
c0003d9e:	5a                   	pop    edx
c0003d9f:	5b                   	pop    ebx
c0003da0:	5e                   	pop    esi
c0003da1:	c3                   	ret    

c0003da2 <create_xdir>:
c0003da2:	55                   	push   ebp
c0003da3:	b9 40 00 00 00       	mov    ecx,0x40
c0003da8:	57                   	push   edi
c0003da9:	bd 01 00 00 00       	mov    ebp,0x1
c0003dae:	56                   	push   esi
c0003daf:	31 ff                	xor    edi,edi
c0003db1:	53                   	push   ebx
c0003db2:	be 40 00 00 00       	mov    esi,0x40
c0003db7:	89 c3                	mov    ebx,eax
c0003db9:	83 ec 1c             	sub    esp,0x1c
c0003dbc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dc0:	31 d2                	xor    edx,edx
c0003dc2:	e8 18 dd ff ff       	call   c0001adf <mem_set>
c0003dc7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dca:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dce:	31 c9                	xor    ecx,ecx
c0003dd0:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd7:	83 c6 02             	add    esi,0x2
c0003dda:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	74 12                	je     c0003df5 <create_xdir+0x53>
c0003de3:	0f b6 c1             	movzx  eax,cl
c0003de6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dea:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dee:	66 83 fd 01          	cmp    bp,0x1
c0003df2:	80 d9 ff             	sbb    cl,0xff
c0003df5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df8:	0f b7 d5             	movzx  edx,bp
c0003dfb:	83 c6 02             	add    esi,0x2
c0003dfe:	e8 ba dc ff ff       	call   c0001abd <st_word>
c0003e03:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e09:	75 d3                	jne    c0003dde <create_xdir+0x3c>
c0003e0b:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e16:	0f b6 c1             	movzx  eax,cl
c0003e19:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1e:	74 07                	je     c0003e27 <create_xdir+0x85>
c0003e20:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e25:	eb a9                	jmp    c0003dd0 <create_xdir+0x2e>
c0003e27:	8d 47 02             	lea    eax,[edi+0x2]
c0003e2a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e30:	89 d0                	mov    eax,edx
c0003e32:	e8 33 ff ff ff       	call   c0003d6a <xname_sum>
c0003e37:	83 c4 1c             	add    esp,0x1c
c0003e3a:	0f b7 d0             	movzx  edx,ax
c0003e3d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e40:	5b                   	pop    ebx
c0003e41:	5e                   	pop    esi
c0003e42:	5f                   	pop    edi
c0003e43:	5d                   	pop    ebp
c0003e44:	e9 74 dc ff ff       	jmp    c0001abd <st_word>

c0003e49 <cmp_lfn>:
c0003e49:	55                   	push   ebp
c0003e4a:	57                   	push   edi
c0003e4b:	89 d7                	mov    edi,edx
c0003e4d:	56                   	push   esi
c0003e4e:	53                   	push   ebx
c0003e4f:	83 ec 1c             	sub    esp,0x1c
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e59:	e8 ed db ff ff       	call   c0001a4b <ld_word>
c0003e5e:	66 85 c0             	test   ax,ax
c0003e61:	74 07                	je     c0003e6a <cmp_lfn+0x21>
c0003e63:	31 c0                	xor    eax,eax
c0003e65:	e9 9a 00 00 00       	jmp    c0003f04 <cmp_lfn+0xbb>
c0003e6a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6c:	bd 01 00 00 00       	mov    ebp,0x1
c0003e71:	83 e3 3f             	and    ebx,0x3f
c0003e74:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7c:	4b                   	dec    ebx
c0003e7d:	6b db 0d             	imul   ebx,ebx,0xd
c0003e80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e84:	0f b6 80 60 5f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda0a0]
c0003e8b:	01 f8                	add    eax,edi
c0003e8d:	e8 b9 db ff ff       	call   c0001a4b <ld_word>
c0003e92:	66 85 ed             	test   bp,bp
c0003e95:	89 c6                	mov    esi,eax
c0003e97:	74 3c                	je     c0003ed5 <cmp_lfn+0x8c>
c0003e99:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9f:	77 c2                	ja     c0003e63 <cmp_lfn+0x1a>
c0003ea1:	83 ec 0c             	sub    esp,0xc
c0003ea4:	0f b7 c0             	movzx  eax,ax
c0003ea7:	50                   	push   eax
c0003ea8:	e8 fa 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ead:	89 c5                	mov    ebp,eax
c0003eaf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eba:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec1:	e8 e1 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003ec6:	83 c4 10             	add    esp,0x10
c0003ec9:	39 c5                	cmp    ebp,eax
c0003ecb:	75 96                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ecd:	89 f5                	mov    ebp,esi
c0003ecf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed3:	eb 04                	jmp    c0003ed9 <cmp_lfn+0x90>
c0003ed5:	66 46                	inc    si
c0003ed7:	75 8a                	jne    c0003e63 <cmp_lfn+0x1a>
c0003ed9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee2:	75 9c                	jne    c0003e80 <cmp_lfn+0x37>
c0003ee4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee7:	74 16                	je     c0003eff <cmp_lfn+0xb6>
c0003ee9:	66 85 ed             	test   bp,bp
c0003eec:	74 11                	je     c0003eff <cmp_lfn+0xb6>
c0003eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef2:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef7:	0f 94 c0             	sete   al
c0003efa:	0f b6 c0             	movzx  eax,al
c0003efd:	eb 05                	jmp    c0003f04 <cmp_lfn+0xbb>
c0003eff:	b8 01 00 00 00       	mov    eax,0x1
c0003f04:	83 c4 1c             	add    esp,0x1c
c0003f07:	5b                   	pop    ebx
c0003f08:	5e                   	pop    esi
c0003f09:	5f                   	pop    edi
c0003f0a:	5d                   	pop    ebp
c0003f0b:	c3                   	ret    

c0003f0c <dir_find>:
c0003f0c:	55                   	push   ebp
c0003f0d:	31 d2                	xor    edx,edx
c0003f0f:	57                   	push   edi
c0003f10:	56                   	push   esi
c0003f11:	53                   	push   ebx
c0003f12:	89 c3                	mov    ebx,eax
c0003f14:	83 ec 1c             	sub    esp,0x1c
c0003f17:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f19:	e8 89 f0 ff ff       	call   c0002fa7 <dir_sdi>
c0003f1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f21:	85 c0                	test   eax,eax
c0003f23:	0f 85 9e 01 00 00    	jne    c00040c7 <dir_find+0x1bb>
c0003f29:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2c:	0f 85 8d 00 00 00    	jne    c0003fbf <dir_find+0xb3>
c0003f32:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f35:	e8 30 fe ff ff       	call   c0003d6a <xname_sum>
c0003f3a:	89 c7                	mov    edi,eax
c0003f3c:	31 d2                	xor    edx,edx
c0003f3e:	89 d8                	mov    eax,ebx
c0003f40:	e8 72 f8 ff ff       	call   c00037b7 <dir_read>
c0003f45:	85 c0                	test   eax,eax
c0003f47:	0f 85 5e 01 00 00    	jne    c00040ab <dir_find+0x19f>
c0003f4d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f50:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f53:	e8 f3 da ff ff       	call   c0001a4b <ld_word>
c0003f58:	66 39 f8             	cmp    ax,di
c0003f5b:	75 df                	jne    c0003f3c <dir_find+0x30>
c0003f5d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f60:	31 ed                	xor    ebp,ebp
c0003f62:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f66:	ba 40 00 00 00       	mov    edx,0x40
c0003f6b:	89 e9                	mov    ecx,ebp
c0003f6d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f71:	0f 84 42 01 00 00    	je     c00040b9 <dir_find+0x1ad>
c0003f77:	f6 c2 1f             	test   dl,0x1f
c0003f7a:	75 03                	jne    c0003f7f <dir_find+0x73>
c0003f7c:	83 c2 02             	add    edx,0x2
c0003f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f83:	89 d0                	mov    eax,edx
c0003f85:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f88:	e8 be da ff ff       	call   c0001a4b <ld_word>
c0003f8d:	83 ec 0c             	sub    esp,0xc
c0003f90:	0f b7 c0             	movzx  eax,ax
c0003f93:	50                   	push   eax
c0003f94:	e8 0e 44 00 00       	call   c00083a7 <ff_wtoupper>
c0003f99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fa0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa7:	e8 fb 43 00 00       	call   c00083a7 <ff_wtoupper>
c0003fac:	83 c4 10             	add    esp,0x10
c0003faf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb3:	75 87                	jne    c0003f3c <dir_find+0x30>
c0003fb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb9:	45                   	inc    ebp
c0003fba:	83 c2 02             	add    edx,0x2
c0003fbd:	eb ac                	jmp    c0003f6b <dir_find+0x5f>
c0003fbf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fcb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fd0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd6:	89 f0                	mov    eax,esi
c0003fd8:	e8 4c e2 ff ff       	call   c0002229 <move_window>
c0003fdd:	85 c0                	test   eax,eax
c0003fdf:	0f 85 c6 00 00 00    	jne    c00040ab <dir_find+0x19f>
c0003fe5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003feb:	84 c9                	test   cl,cl
c0003fed:	0f 84 bd 00 00 00    	je     c00040b0 <dir_find+0x1a4>
c0003ff3:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff6:	88 d0                	mov    al,dl
c0003ff8:	83 e0 3f             	and    eax,0x3f
c0003ffb:	80 f9 e5             	cmp    cl,0xe5
c0003ffe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004001:	0f 84 87 00 00 00    	je     c000408e <dir_find+0x182>
c0004007:	80 e2 08             	and    dl,0x8
c000400a:	74 06                	je     c0004012 <dir_find+0x106>
c000400c:	3c 0f                	cmp    al,0xf
c000400e:	75 7e                	jne    c000408e <dir_find+0x182>
c0004010:	eb 04                	jmp    c0004016 <dir_find+0x10a>
c0004012:	3c 0f                	cmp    al,0xf
c0004014:	75 4c                	jne    c0004062 <dir_find+0x156>
c0004016:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000401a:	75 7e                	jne    c000409a <dir_find+0x18e>
c000401c:	f6 c1 40             	test   cl,0x40
c000401f:	74 12                	je     c0004033 <dir_find+0x127>
c0004021:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004024:	83 e1 bf             	and    ecx,0xffffffbf
c0004027:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004031:	eb 06                	jmp    c0004039 <dir_find+0x12d>
c0004033:	89 f8                	mov    eax,edi
c0004035:	38 c8                	cmp    al,cl
c0004037:	75 5c                	jne    c0004095 <dir_find+0x189>
c0004039:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004042:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004045:	75 53                	jne    c000409a <dir_find+0x18e>
c0004047:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404e:	89 ea                	mov    edx,ebp
c0004050:	e8 f4 fd ff ff       	call   c0003e49 <cmp_lfn>
c0004055:	85 c0                	test   eax,eax
c0004057:	74 41                	je     c000409a <dir_find+0x18e>
c0004059:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004060:	eb 38                	jmp    c000409a <dir_find+0x18e>
c0004062:	89 f8                	mov    eax,edi
c0004064:	84 c0                	test   al,al
c0004066:	75 0d                	jne    c0004075 <dir_find+0x169>
c0004068:	89 e8                	mov    eax,ebp
c000406a:	e8 98 de ff ff       	call   c0001f07 <sum_sfn>
c000406f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004073:	74 52                	je     c00040c7 <dir_find+0x1bb>
c0004075:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004079:	75 13                	jne    c000408e <dir_find+0x182>
c000407b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004083:	89 e8                	mov    eax,ebp
c0004085:	e8 60 da ff ff       	call   c0001aea <mem_cmp>
c000408a:	85 c0                	test   eax,eax
c000408c:	74 39                	je     c00040c7 <dir_find+0x1bb>
c000408e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004095:	bf ff ff ff ff       	mov    edi,0xffffffff
c000409a:	31 d2                	xor    edx,edx
c000409c:	89 d8                	mov    eax,ebx
c000409e:	e8 5c f4 ff ff       	call   c00034ff <dir_next>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 84 25 ff ff ff    	je     c0003fd0 <dir_find+0xc4>
c00040ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ae:	eb 17                	jmp    c00040c7 <dir_find+0x1bb>
c00040b0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b7:	eb 0e                	jmp    c00040c7 <dir_find+0x1bb>
c00040b9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c1:	0f 85 75 fe ff ff    	jne    c0003f3c <dir_find+0x30>
c00040c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040ca:	83 c4 1c             	add    esp,0x1c
c00040cd:	5b                   	pop    ebx
c00040ce:	5e                   	pop    esi
c00040cf:	5f                   	pop    edi
c00040d0:	5d                   	pop    ebp
c00040d1:	c3                   	ret    

c00040d2 <dir_register>:
c00040d2:	55                   	push   ebp
c00040d3:	57                   	push   edi
c00040d4:	56                   	push   esi
c00040d5:	be 06 00 00 00       	mov    esi,0x6
c00040da:	53                   	push   ebx
c00040db:	83 ec 6c             	sub    esp,0x6c
c00040de:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e2:	0f 85 62 02 00 00    	jne    c000434a <dir_register+0x278>
c00040e8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040ea:	31 ff                	xor    edi,edi
c00040ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ef:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f4:	74 03                	je     c00040f9 <dir_register+0x27>
c00040f6:	47                   	inc    edi
c00040f7:	eb f6                	jmp    c00040ef <dir_register+0x1d>
c00040f9:	89 c3                	mov    ebx,eax
c00040fb:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040ff:	0f 85 e1 00 00 00    	jne    c00041e6 <dir_register+0x114>
c0004105:	83 c7 0e             	add    edi,0xe
c0004108:	b9 0f 00 00 00       	mov    ecx,0xf
c000410d:	89 f8                	mov    eax,edi
c000410f:	31 d2                	xor    edx,edx
c0004111:	f7 f1                	div    ecx
c0004113:	8d 50 02             	lea    edx,[eax+0x2]
c0004116:	89 c7                	mov    edi,eax
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 12 f8 ff ff       	call   c0003931 <dir_alloc>
c000411f:	89 c6                	mov    esi,eax
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 21 02 00 00    	jne    c000434a <dir_register+0x278>
c0004129:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004132:	c1 e7 05             	shl    edi,0x5
c0004135:	29 f8                	sub    eax,edi
c0004137:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000413a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413d:	a8 04                	test   al,0x4
c000413f:	0f 84 91 00 00 00    	je     c00041d6 <dir_register+0x104>
c0004145:	83 e0 fb             	and    eax,0xfffffffb
c0004148:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414b:	89 d8                	mov    eax,ebx
c000414d:	e8 25 ec ff ff       	call   c0002d77 <fill_first_frag>
c0004152:	85 c0                	test   eax,eax
c0004154:	0f 85 ee 01 00 00    	jne    c0004348 <dir_register+0x276>
c000415a:	83 c9 ff             	or     ecx,0xffffffff
c000415d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004160:	89 d8                	mov    eax,ebx
c0004162:	e8 db eb ff ff       	call   c0002d42 <fill_last_frag>
c0004167:	85 c0                	test   eax,eax
c0004169:	0f 85 d9 01 00 00    	jne    c0004348 <dir_register+0x276>
c000416f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004173:	74 61                	je     c00041d6 <dir_register+0x104>
c0004175:	89 da                	mov    edx,ebx
c0004177:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417b:	e8 ea f5 ff ff       	call   c000376a <load_obj_xdir>
c0004180:	85 c0                	test   eax,eax
c0004182:	0f 85 c0 01 00 00    	jne    c0004348 <dir_register+0x276>
c0004188:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418c:	31 c9                	xor    ecx,ecx
c000418e:	c1 e2 09             	shl    edx,0x9
c0004191:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004194:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004197:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000419a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a0:	83 c0 38             	add    eax,0x38
c00041a3:	e8 1c d9 ff ff       	call   c0001ac4 <st_qword>
c00041a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ae:	83 c0 28             	add    eax,0x28
c00041b1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b4:	e8 0b d9 ff ff       	call   c0001ac4 <st_qword>
c00041b9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041bf:	83 c8 01             	or     eax,0x1
c00041c2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c9:	e8 db f7 ff ff       	call   c00039a9 <store_xdir>
c00041ce:	85 c0                	test   eax,eax
c00041d0:	0f 85 72 01 00 00    	jne    c0004348 <dir_register+0x276>
c00041d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041dc:	e8 c1 fb ff ff       	call   c0003da2 <create_xdir>
c00041e1:	e9 64 01 00 00       	jmp    c000434a <dir_register+0x278>
c00041e6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e9:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f2:	89 c2                	mov    edx,eax
c00041f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f8:	e8 cd d8 ff ff       	call   c0001aca <mem_cpy>
c00041fd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004202:	74 58                	je     c000425c <dir_register+0x18a>
c0004204:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004208:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004210:	83 ec 0c             	sub    esp,0xc
c0004213:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000421a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004222:	e8 24 dc ff ff       	call   c0001e4b <gen_numname>
c0004227:	89 d8                	mov    eax,ebx
c0004229:	e8 de fc ff ff       	call   c0003f0c <dir_find>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	89 c6                	mov    esi,eax
c0004233:	85 c0                	test   eax,eax
c0004235:	75 15                	jne    c000424c <dir_register+0x17a>
c0004237:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004240:	75 ce                	jne    c0004210 <dir_register+0x13e>
c0004242:	be 07 00 00 00       	mov    esi,0x7
c0004247:	e9 fe 00 00 00       	jmp    c000434a <dir_register+0x278>
c000424c:	83 f8 04             	cmp    eax,0x4
c000424f:	0f 85 f5 00 00 00    	jne    c000434a <dir_register+0x278>
c0004255:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004259:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425c:	b9 01 00 00 00       	mov    ecx,0x1
c0004261:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004266:	74 0f                	je     c0004277 <dir_register+0x1a5>
c0004268:	b9 0d 00 00 00       	mov    ecx,0xd
c000426d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004270:	31 d2                	xor    edx,edx
c0004272:	f7 f1                	div    ecx
c0004274:	8d 48 01             	lea    ecx,[eax+0x1]
c0004277:	89 ca                	mov    edx,ecx
c0004279:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427d:	89 d8                	mov    eax,ebx
c000427f:	e8 ad f6 ff ff       	call   c0003931 <dir_alloc>
c0004284:	89 c6                	mov    esi,eax
c0004286:	85 c0                	test   eax,eax
c0004288:	0f 85 bc 00 00 00    	jne    c000434a <dir_register+0x278>
c000428e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004292:	49                   	dec    ecx
c0004293:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004297:	74 6a                	je     c0004303 <dir_register+0x231>
c0004299:	89 c8                	mov    eax,ecx
c000429b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429e:	c1 e0 05             	shl    eax,0x5
c00042a1:	29 c2                	sub    edx,eax
c00042a3:	89 d8                	mov    eax,ebx
c00042a5:	e8 fd ec ff ff       	call   c0002fa7 <dir_sdi>
c00042aa:	89 c6                	mov    esi,eax
c00042ac:	85 c0                	test   eax,eax
c00042ae:	0f 85 96 00 00 00    	jne    c000434a <dir_register+0x278>
c00042b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b8:	e8 4a dc ff ff       	call   c0001f07 <sum_sfn>
c00042bd:	0f b6 f8             	movzx  edi,al
c00042c0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c6:	89 e8                	mov    eax,ebp
c00042c8:	e8 5c df ff ff       	call   c0002229 <move_window>
c00042cd:	89 c6                	mov    esi,eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	75 77                	jne    c000434a <dir_register+0x278>
c00042d3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042db:	83 ec 0c             	sub    esp,0xc
c00042de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e1:	57                   	push   edi
c00042e2:	e8 e0 da ff ff       	call   c0001dc7 <put_lfn>
c00042e7:	31 d2                	xor    edx,edx
c00042e9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ed:	89 d8                	mov    eax,ebx
c00042ef:	e8 0b f2 ff ff       	call   c00034ff <dir_next>
c00042f4:	83 c4 10             	add    esp,0x10
c00042f7:	89 c6                	mov    esi,eax
c00042f9:	85 c0                	test   eax,eax
c00042fb:	75 4d                	jne    c000434a <dir_register+0x278>
c00042fd:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004301:	75 bd                	jne    c00042c0 <dir_register+0x1ee>
c0004303:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004306:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004309:	89 e8                	mov    eax,ebp
c000430b:	e8 19 df ff ff       	call   c0002229 <move_window>
c0004310:	89 c6                	mov    esi,eax
c0004312:	85 c0                	test   eax,eax
c0004314:	75 34                	jne    c000434a <dir_register+0x278>
c0004316:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004319:	b9 20 00 00 00       	mov    ecx,0x20
c000431e:	31 d2                	xor    edx,edx
c0004320:	e8 ba d7 ff ff       	call   c0001adf <mem_set>
c0004325:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004331:	e8 94 d7 ff ff       	call   c0001aca <mem_cpy>
c0004336:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004339:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433c:	83 e0 18             	and    eax,0x18
c000433f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004342:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004346:	eb 02                	jmp    c000434a <dir_register+0x278>
c0004348:	89 c6                	mov    esi,eax
c000434a:	83 c4 6c             	add    esp,0x6c
c000434d:	89 f0                	mov    eax,esi
c000434f:	5b                   	pop    ebx
c0004350:	5e                   	pop    esi
c0004351:	5f                   	pop    edi
c0004352:	5d                   	pop    ebp
c0004353:	c3                   	ret    

c0004354 <sync_fs>:
c0004354:	56                   	push   esi
c0004355:	53                   	push   ebx
c0004356:	53                   	push   ebx
c0004357:	89 c3                	mov    ebx,eax
c0004359:	e8 37 de ff ff       	call   c0002195 <sync_window>
c000435e:	85 c0                	test   eax,eax
c0004360:	0f 85 b1 00 00 00    	jne    c0004417 <sync_fs+0xc3>
c0004366:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004369:	0f 85 8e 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c000436f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004373:	0f 85 84 00 00 00    	jne    c00043fd <sync_fs+0xa9>
c0004379:	b9 00 02 00 00       	mov    ecx,0x200
c000437e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 f0                	mov    eax,esi
c0004385:	e8 55 d7 ff ff       	call   c0001adf <mem_set>
c000438a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004390:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004395:	e8 23 d7 ff ff       	call   c0001abd <st_word>
c000439a:	ba 52 52 61 41       	mov    edx,0x41615252
c000439f:	89 f0                	mov    eax,esi
c00043a1:	e8 1b d7 ff ff       	call   c0001ac1 <st_dword>
c00043a6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ac:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b1:	e8 0b d7 ff ff       	call   c0001ac1 <st_dword>
c00043b6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043bf:	e8 fd d6 ff ff       	call   c0001ac1 <st_dword>
c00043c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cd:	e8 ef d6 ff ff       	call   c0001ac1 <st_dword>
c00043d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d8:	83 c0 01             	add    eax,0x1
c00043db:	83 d2 00             	adc    edx,0x0
c00043de:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e1:	83 ec 0c             	sub    esp,0xc
c00043e4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e7:	6a 01                	push   0x1
c00043e9:	52                   	push   edx
c00043ea:	50                   	push   eax
c00043eb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ef:	56                   	push   esi
c00043f0:	50                   	push   eax
c00043f1:	e8 20 d6 ff ff       	call   c0001a16 <disk_write>
c00043f6:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043fa:	83 c4 20             	add    esp,0x20
c00043fd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004401:	51                   	push   ecx
c0004402:	6a 00                	push   0x0
c0004404:	6a 00                	push   0x0
c0004406:	50                   	push   eax
c0004407:	e8 20 d6 ff ff       	call   c0001a2c <disk_ioctl>
c000440c:	83 c4 10             	add    esp,0x10
c000440f:	85 c0                	test   eax,eax
c0004411:	0f 95 c0             	setne  al
c0004414:	0f b6 c0             	movzx  eax,al
c0004417:	5a                   	pop    edx
c0004418:	5b                   	pop    ebx
c0004419:	5e                   	pop    esi
c000441a:	c3                   	ret    

c000441b <create_partition>:
c000441b:	55                   	push   ebp
c000441c:	0f b6 c0             	movzx  eax,al
c000441f:	57                   	push   edi
c0004420:	56                   	push   esi
c0004421:	53                   	push   ebx
c0004422:	83 ec 60             	sub    esp,0x60
c0004425:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004429:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004431:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004435:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004439:	50                   	push   eax
c000443a:	6a 01                	push   0x1
c000443c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004440:	e8 e7 d5 ff ff       	call   c0001a2c <disk_ioctl>
c0004445:	83 c4 10             	add    esp,0x10
c0004448:	85 c0                	test   eax,eax
c000444a:	74 0a                	je     c0004456 <create_partition+0x3b>
c000444c:	b8 01 00 00 00       	mov    eax,0x1
c0004451:	e9 67 05 00 00       	jmp    c00049bd <create_partition+0x5a2>
c0004456:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000445a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004462:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004466:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446b:	0f 86 ed 03 00 00    	jbe    c000485e <create_partition+0x443>
c0004471:	83 c0 df             	add    eax,0xffffffdf
c0004474:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447c:	83 d2 ff             	adc    edx,0xffffffff
c000447f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448f:	83 c0 bd             	add    eax,0xffffffbd
c0004492:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004499:	83 d2 ff             	adc    edx,0xffffffff
c000449c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044a0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ac:	be 22 00 00 00       	mov    esi,0x22
c00044b1:	31 ff                	xor    edi,edi
c00044b3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044bb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d5:	75 0e                	jne    c00044e5 <create_partition+0xca>
c00044d7:	b9 00 02 00 00       	mov    ecx,0x200
c00044dc:	31 d2                	xor    edx,edx
c00044de:	89 d8                	mov    eax,ebx
c00044e0:	e8 fa d5 ff ff       	call   c0001adf <mem_set>
c00044e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f4:	0f 84 23 01 00 00    	je     c000461d <create_partition+0x202>
c00044fa:	89 f0                	mov    eax,esi
c00044fc:	89 fa                	mov    edx,edi
c00044fe:	05 ff 07 00 00       	add    eax,0x7ff
c0004503:	83 d2 00             	adc    edx,0x0
c0004506:	89 c1                	mov    ecx,eax
c0004508:	89 d7                	mov    edi,edx
c000450a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004510:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004514:	89 ce                	mov    esi,ecx
c0004516:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000451a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004522:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004525:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004529:	89 04 24             	mov    DWORD PTR [esp],eax
c000452c:	b8 64 00 00 00       	mov    eax,0x64
c0004531:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004534:	b8 00 00 00 00       	mov    eax,0x0
c0004539:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453d:	72 41                	jb     c0004580 <create_partition+0x165>
c000453f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004547:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004550:	01 c1                	add    ecx,eax
c0004552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004556:	f7 24 24             	mul    DWORD PTR [esp]
c0004559:	6a 00                	push   0x0
c000455b:	01 ca                	add    edx,ecx
c000455d:	6a 64                	push   0x64
c000455f:	52                   	push   edx
c0004560:	50                   	push   eax
c0004561:	e8 76 ef 01 00       	call   c00234dc <__udivdi3>
c0004566:	83 c4 10             	add    esp,0x10
c0004569:	05 ff 07 00 00       	add    eax,0x7ff
c000456e:	83 d2 00             	adc    edx,0x0
c0004571:	89 c1                	mov    ecx,eax
c0004573:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004577:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004580:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004587:	01 f0                	add    eax,esi
c0004589:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458d:	11 fa                	adc    edx,edi
c000458f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004593:	19 d1                	sbb    ecx,edx
c0004595:	73 2e                	jae    c00045c5 <create_partition+0x1aa>
c0004597:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459b:	89 f8                	mov    eax,edi
c000459d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b0:	73 6b                	jae    c000461d <create_partition+0x202>
c00045b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045ba:	29 f0                	sub    eax,esi
c00045bc:	19 fa                	sbb    edx,edi
c00045be:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cc:	74 4f                	je     c000461d <create_partition+0x202>
c00045ce:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d1:	b9 10 00 00 00       	mov    ecx,0x10
c00045d6:	ba 70 5f 02 c0       	mov    edx,0xc0025f70
c00045db:	e8 ea d4 ff ff       	call   c0001aca <mem_cpy>
c00045e0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e4:	b9 10 00 00 00       	mov    ecx,0x10
c00045e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ed:	e8 2c db ff ff       	call   c000211e <make_rand>
c00045f2:	89 f2                	mov    edx,esi
c00045f4:	89 f9                	mov    ecx,edi
c00045f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045fa:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fe:	e8 c1 d4 ff ff       	call   c0001ac4 <st_qword>
c0004603:	03 34 24             	add    esi,DWORD PTR [esp]
c0004606:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000460a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460e:	89 f2                	mov    edx,esi
c0004610:	89 f9                	mov    ecx,edi
c0004612:	83 c2 ff             	add    edx,0xffffffff
c0004615:	83 d1 ff             	adc    ecx,0xffffffff
c0004618:	e8 a7 d4 ff ff       	call   c0001ac4 <st_qword>
c000461d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004621:	83 e8 80             	sub    eax,0xffffff80
c0004624:	89 c5                	mov    ebp,eax
c0004626:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000462a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004630:	75 6b                	jne    c000469d <create_partition+0x282>
c0004632:	45                   	inc    ebp
c0004633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004637:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463c:	e8 39 da ff ff       	call   c000207a <crc32>
c0004641:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004647:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464b:	75 e5                	jne    c0004632 <create_partition+0x217>
c000464d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004651:	31 d2                	xor    edx,edx
c0004653:	83 ec 0c             	sub    esp,0xc
c0004656:	c1 ed 09             	shr    ebp,0x9
c0004659:	6a 01                	push   0x1
c000465b:	8d 45 02             	lea    eax,[ebp+0x2]
c000465e:	52                   	push   edx
c000465f:	50                   	push   eax
c0004660:	53                   	push   ebx
c0004661:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004665:	e8 ac d3 ff ff       	call   c0001a16 <disk_write>
c000466a:	83 c4 20             	add    esp,0x20
c000466d:	85 c0                	test   eax,eax
c000466f:	0f 85 d7 fd ff ff    	jne    c000444c <create_partition+0x31>
c0004675:	83 ec 0c             	sub    esp,0xc
c0004678:	31 d2                	xor    edx,edx
c000467a:	6a 01                	push   0x1
c000467c:	89 e8                	mov    eax,ebp
c000467e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004682:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004686:	52                   	push   edx
c0004687:	50                   	push   eax
c0004688:	53                   	push   ebx
c0004689:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468d:	e8 84 d3 ff ff       	call   c0001a16 <disk_write>
c0004692:	83 c4 20             	add    esp,0x20
c0004695:	85 c0                	test   eax,eax
c0004697:	0f 85 af fd ff ff    	jne    c000444c <create_partition+0x31>
c000469d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a5:	3d 00 40 00 00       	cmp    eax,0x4000
c00046aa:	74 0d                	je     c00046b9 <create_partition+0x29e>
c00046ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b4:	e9 12 fe ff ff       	jmp    c00044cb <create_partition+0xb0>
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	b9 00 02 00 00       	mov    ecx,0x200
c00046c0:	89 d8                	mov    eax,ebx
c00046c2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c5:	e8 15 d4 ff ff       	call   c0001adf <mem_set>
c00046ca:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cd:	b9 10 00 00 00       	mov    ecx,0x10
c00046d2:	ba 60 5e 02 c0       	mov    edx,0xc0025e60
c00046d7:	89 d8                	mov    eax,ebx
c00046d9:	e8 ec d3 ff ff       	call   c0001aca <mem_cpy>
c00046de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e2:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e5:	f7 d2                	not    edx
c00046e7:	e8 d5 d3 ff ff       	call   c0001ac1 <st_dword>
c00046ec:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f4:	ba 01 00 00 00       	mov    edx,0x1
c00046f9:	e8 c6 d3 ff ff       	call   c0001ac4 <st_qword>
c00046fe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004702:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004706:	83 c2 ff             	add    edx,0xffffffff
c0004709:	89 e8                	mov    eax,ebp
c000470b:	83 d1 ff             	adc    ecx,0xffffffff
c000470e:	e8 b1 d3 ff ff       	call   c0001ac4 <st_qword>
c0004713:	31 c9                	xor    ecx,ecx
c0004715:	8d 43 28             	lea    eax,[ebx+0x28]
c0004718:	ba 22 00 00 00       	mov    edx,0x22
c000471d:	e8 a2 d3 ff ff       	call   c0001ac4 <st_qword>
c0004722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472a:	83 c2 de             	add    edx,0xffffffde
c000472d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004730:	83 d1 ff             	adc    ecx,0xffffffff
c0004733:	31 f6                	xor    esi,esi
c0004735:	e8 8a d3 ff ff       	call   c0001ac4 <st_qword>
c000473a:	8d 43 54             	lea    eax,[ebx+0x54]
c000473d:	ba 80 00 00 00       	mov    edx,0x80
c0004742:	e8 7a d3 ff ff       	call   c0001ac1 <st_dword>
c0004747:	8d 43 50             	lea    eax,[ebx+0x50]
c000474a:	ba 80 00 00 00       	mov    edx,0x80
c000474f:	e8 6d d3 ff ff       	call   c0001ac1 <st_dword>
c0004754:	ba 02 00 00 00       	mov    edx,0x2
c0004759:	89 f8                	mov    eax,edi
c000475b:	e8 61 d3 ff ff       	call   c0001ac1 <st_dword>
c0004760:	8d 53 38             	lea    edx,[ebx+0x38]
c0004763:	b9 10 00 00 00       	mov    ecx,0x10
c0004768:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476c:	e8 ad d9 ff ff       	call   c000211e <make_rand>
c0004771:	83 c8 ff             	or     eax,0xffffffff
c0004774:	46                   	inc    esi
c0004775:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000477a:	e8 fb d8 ff ff       	call   c000207a <crc32>
c000477f:	83 fe 5c             	cmp    esi,0x5c
c0004782:	75 f0                	jne    c0004774 <create_partition+0x359>
c0004784:	f7 d0                	not    eax
c0004786:	8d 73 10             	lea    esi,[ebx+0x10]
c0004789:	89 c2                	mov    edx,eax
c000478b:	89 f0                	mov    eax,esi
c000478d:	e8 2f d3 ff ff       	call   c0001ac1 <st_dword>
c0004792:	83 ec 0c             	sub    esp,0xc
c0004795:	6a 01                	push   0x1
c0004797:	6a 00                	push   0x0
c0004799:	6a 01                	push   0x1
c000479b:	53                   	push   ebx
c000479c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047a0:	e8 71 d2 ff ff       	call   c0001a16 <disk_write>
c00047a5:	83 c4 20             	add    esp,0x20
c00047a8:	85 c0                	test   eax,eax
c00047aa:	0f 85 9c fc ff ff    	jne    c000444c <create_partition+0x31>
c00047b0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b8:	83 c2 ff             	add    edx,0xffffffff
c00047bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047be:	83 d1 ff             	adc    ecx,0xffffffff
c00047c1:	e8 fe d2 ff ff       	call   c0001ac4 <st_qword>
c00047c6:	ba 01 00 00 00       	mov    edx,0x1
c00047cb:	31 c9                	xor    ecx,ecx
c00047cd:	89 e8                	mov    eax,ebp
c00047cf:	e8 f0 d2 ff ff       	call   c0001ac4 <st_qword>
c00047d4:	89 f8                	mov    eax,edi
c00047d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047da:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047de:	31 ff                	xor    edi,edi
c00047e0:	e8 df d2 ff ff       	call   c0001ac4 <st_qword>
c00047e5:	89 f0                	mov    eax,esi
c00047e7:	31 d2                	xor    edx,edx
c00047e9:	e8 d3 d2 ff ff       	call   c0001ac1 <st_dword>
c00047ee:	83 c8 ff             	or     eax,0xffffffff
c00047f1:	47                   	inc    edi
c00047f2:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f7:	e8 7e d8 ff ff       	call   c000207a <crc32>
c00047fc:	83 ff 5c             	cmp    edi,0x5c
c00047ff:	75 f0                	jne    c00047f1 <create_partition+0x3d6>
c0004801:	f7 d0                	not    eax
c0004803:	89 c2                	mov    edx,eax
c0004805:	89 f0                	mov    eax,esi
c0004807:	e8 b5 d2 ff ff       	call   c0001ac1 <st_dword>
c000480c:	83 ec 0c             	sub    esp,0xc
c000480f:	6a 01                	push   0x1
c0004811:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004815:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004819:	83 c0 ff             	add    eax,0xffffffff
c000481c:	83 d2 ff             	adc    edx,0xffffffff
c000481f:	52                   	push   edx
c0004820:	50                   	push   eax
c0004821:	53                   	push   ebx
c0004822:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004826:	e8 eb d1 ff ff       	call   c0001a16 <disk_write>
c000482b:	83 c4 20             	add    esp,0x20
c000482e:	85 c0                	test   eax,eax
c0004830:	0f 85 16 fc ff ff    	jne    c000444c <create_partition+0x31>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	b9 00 02 00 00       	mov    ecx,0x200
c000483f:	e8 9b d2 ff ff       	call   c0001adf <mem_set>
c0004844:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000484a:	b9 10 00 00 00       	mov    ecx,0x10
c000484f:	ba 70 5e 02 c0       	mov    edx,0xc0025e70
c0004854:	e8 71 d2 ff ff       	call   c0001aca <mem_cpy>
c0004859:	e9 21 01 00 00       	jmp    c000497f <create_partition+0x564>
c000485e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004862:	b9 05 00 00 00       	mov    ecx,0x5
c0004867:	89 04 24             	mov    DWORD PTR [esp],eax
c000486a:	bf 08 00 00 00       	mov    edi,0x8
c000486f:	89 f8                	mov    eax,edi
c0004871:	31 d2                	xor    edx,edx
c0004873:	0f b6 f0             	movzx  esi,al
c0004876:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004879:	f7 f6                	div    esi
c000487b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004880:	76 0a                	jbe    c000488c <create_partition+0x471>
c0004882:	d1 e7                	shl    edi,1
c0004884:	49                   	dec    ecx
c0004885:	75 e8                	jne    c000486f <create_partition+0x454>
c0004887:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488c:	b9 00 02 00 00       	mov    ecx,0x200
c0004891:	31 d2                	xor    edx,edx
c0004893:	89 d8                	mov    eax,ebx
c0004895:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489b:	e8 3f d2 ff ff       	call   c0001adf <mem_set>
c00048a0:	b9 64 00 00 00       	mov    ecx,0x64
c00048a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a8:	31 d2                	xor    edx,edx
c00048aa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b2:	f7 f1                	div    ecx
c00048b4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bd:	89 f8                	mov    eax,edi
c00048bf:	0f b6 c0             	movzx  eax,al
c00048c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c6:	e9 80 00 00 00       	jmp    c000494b <create_partition+0x530>
c00048cb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ce:	29 cf                	sub    edi,ecx
c00048d0:	89 ca                	mov    edx,ecx
c00048d2:	89 f0                	mov    eax,esi
c00048d4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d9:	e8 e3 d1 ff ff       	call   c0001ac1 <st_dword>
c00048de:	8d 46 04             	lea    eax,[esi+0x4]
c00048e1:	89 fa                	mov    edx,edi
c00048e3:	83 c6 10             	add    esi,0x10
c00048e6:	e8 d6 d1 ff ff       	call   c0001ac1 <st_dword>
c00048eb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f4:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f8:	89 c8                	mov    eax,ecx
c00048fa:	01 f9                	add    ecx,edi
c00048fc:	f7 f5                	div    ebp
c00048fe:	89 d5                	mov    ebp,edx
c0004900:	31 d2                	xor    edx,edx
c0004902:	45                   	inc    ebp
c0004903:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004907:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000490a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490d:	89 c2                	mov    edx,eax
c000490f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004912:	c1 ea 02             	shr    edx,0x2
c0004915:	83 e2 c0             	and    edx,0xffffffc0
c0004918:	09 ea                	or     edx,ebp
c000491a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 f5                	div    ebp
c0004926:	89 d7                	mov    edi,edx
c0004928:	31 d2                	xor    edx,edx
c000492a:	47                   	inc    edi
c000492b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004932:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004935:	89 c5                	mov    ebp,eax
c0004937:	c1 ed 02             	shr    ebp,0x2
c000493a:	83 e5 c0             	and    ebp,0xffffffc0
c000493d:	09 ef                	or     edi,ebp
c000493f:	89 fa                	mov    edx,edi
c0004941:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004944:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004949:	74 34                	je     c000497f <create_partition+0x564>
c000494b:	85 c9                	test   ecx,ecx
c000494d:	74 30                	je     c000497f <create_partition+0x564>
c000494f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004952:	76 2b                	jbe    c000497f <create_partition+0x564>
c0004954:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004958:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495f:	83 ff 64             	cmp    edi,0x64
c0004962:	76 4b                	jbe    c00049af <create_partition+0x594>
c0004964:	89 f8                	mov    eax,edi
c0004966:	01 c8                	add    eax,ecx
c0004968:	0f 82 5d ff ff ff    	jb     c00048cb <create_partition+0x4b0>
c000496e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004971:	0f 87 54 ff ff ff    	ja     c00048cb <create_partition+0x4b0>
c0004977:	85 ff                	test   edi,edi
c0004979:	0f 85 51 ff ff ff    	jne    c00048d0 <create_partition+0x4b5>
c000497f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004985:	ba 55 aa 00 00       	mov    edx,0xaa55
c000498a:	e8 2e d1 ff ff       	call   c0001abd <st_word>
c000498f:	83 ec 0c             	sub    esp,0xc
c0004992:	6a 01                	push   0x1
c0004994:	6a 00                	push   0x0
c0004996:	6a 00                	push   0x0
c0004998:	53                   	push   ebx
c0004999:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499d:	e8 74 d0 ff ff       	call   c0001a16 <disk_write>
c00049a2:	83 c4 20             	add    esp,0x20
c00049a5:	85 c0                	test   eax,eax
c00049a7:	0f 95 c0             	setne  al
c00049aa:	0f b6 c0             	movzx  eax,al
c00049ad:	eb 0e                	jmp    c00049bd <create_partition+0x5a2>
c00049af:	74 07                	je     c00049b8 <create_partition+0x59d>
c00049b1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b6:	eb ac                	jmp    c0004964 <create_partition+0x549>
c00049b8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049bb:	eb a7                	jmp    c0004964 <create_partition+0x549>
c00049bd:	83 c4 5c             	add    esp,0x5c
c00049c0:	5b                   	pop    ebx
c00049c1:	5e                   	pop    esi
c00049c2:	5f                   	pop    edi
c00049c3:	5d                   	pop    ebp
c00049c4:	c3                   	ret    

c00049c5 <get_fileinfo>:
c00049c5:	55                   	push   ebp
c00049c6:	57                   	push   edi
c00049c7:	56                   	push   esi
c00049c8:	53                   	push   ebx
c00049c9:	83 ec 1c             	sub    esp,0x1c
c00049cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ce:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049dc:	0f 84 dc 01 00 00    	je     c0004bbe <get_fileinfo+0x1f9>
c00049e2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e5:	75 0f                	jne    c00049f6 <get_fileinfo+0x31>
c00049e7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049ea:	83 c4 1c             	add    esp,0x1c
c00049ed:	5b                   	pop    ebx
c00049ee:	5e                   	pop    esi
c00049ef:	5f                   	pop    edi
c00049f0:	5d                   	pop    ebp
c00049f1:	e9 58 d5 ff ff       	jmp    c0001f4e <get_xfileinfo>
c00049f6:	89 d3                	mov    ebx,edx
c00049f8:	89 c6                	mov    esi,eax
c00049fa:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fe:	74 6a                	je     c0004a6a <get_fileinfo+0xa5>
c0004a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a08:	31 ed                	xor    ebp,ebp
c0004a0a:	31 ff                	xor    edi,edi
c0004a0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a17:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1b:	66 85 d2             	test   dx,dx
c0004a1e:	74 3e                	je     c0004a5e <get_fileinfo+0x99>
c0004a20:	66 85 ed             	test   bp,bp
c0004a23:	75 0c                	jne    c0004a31 <get_fileinfo+0x6c>
c0004a25:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2b:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2f:	76 22                	jbe    c0004a53 <get_fileinfo+0x8e>
c0004a31:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a36:	89 e8                	mov    eax,ebp
c0004a38:	29 f9                	sub    ecx,edi
c0004a3a:	c1 e0 10             	shl    eax,0x10
c0004a3d:	09 d0                	or     eax,edx
c0004a3f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a43:	e8 a3 d1 ff ff       	call   c0001beb <put_utf>
c0004a48:	84 c0                	test   al,al
c0004a4a:	74 10                	je     c0004a5c <get_fileinfo+0x97>
c0004a4c:	0f b6 c0             	movzx  eax,al
c0004a4f:	31 d2                	xor    edx,edx
c0004a51:	01 c7                	add    edi,eax
c0004a53:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a58:	89 d5                	mov    ebp,edx
c0004a5a:	eb b0                	jmp    c0004a0c <get_fileinfo+0x47>
c0004a5c:	31 ff                	xor    edi,edi
c0004a5e:	66 85 ed             	test   bp,bp
c0004a61:	74 02                	je     c0004a65 <get_fileinfo+0xa0>
c0004a63:	31 ff                	xor    edi,edi
c0004a65:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	31 c9                	xor    ecx,ecx
c0004a6e:	83 f9 0a             	cmp    ecx,0xa
c0004a71:	0f 87 ad 00 00 00    	ja     c0004b24 <get_fileinfo+0x15f>
c0004a77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a81:	66 83 fa 20          	cmp    dx,0x20
c0004a85:	0f 84 92 00 00 00    	je     c0004b1d <get_fileinfo+0x158>
c0004a8b:	66 83 fa 05          	cmp    dx,0x5
c0004a8f:	75 05                	jne    c0004a96 <get_fileinfo+0xd1>
c0004a91:	ba e5 00 00 00       	mov    edx,0xe5
c0004a96:	83 ff 0b             	cmp    edi,0xb
c0004a99:	77 0b                	ja     c0004aa6 <get_fileinfo+0xe1>
c0004a9b:	83 fd 09             	cmp    ebp,0x9
c0004a9e:	75 06                	jne    c0004aa6 <get_fileinfo+0xe1>
c0004aa0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa5:	47                   	inc    edi
c0004aa6:	0f b7 c2             	movzx  eax,dx
c0004aa9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aad:	e8 6d d0 ff ff       	call   c0001b1f <dbc_1st>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 2f                	je     c0004ae5 <get_fileinfo+0x120>
c0004ab6:	83 fd 08             	cmp    ebp,0x8
c0004ab9:	74 2a                	je     c0004ae5 <get_fileinfo+0x120>
c0004abb:	83 fd 0b             	cmp    ebp,0xb
c0004abe:	74 25                	je     c0004ae5 <get_fileinfo+0x120>
c0004ac0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004acb:	e8 52 d0 ff ff       	call   c0001b22 <dbc_2nd>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	74 11                	je     c0004ae5 <get_fileinfo+0x120>
c0004ad4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004add:	c1 e2 08             	shl    edx,0x8
c0004ae0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae3:	09 c2                	or     edx,eax
c0004ae5:	0f b7 d2             	movzx  edx,dx
c0004ae8:	50                   	push   eax
c0004ae9:	50                   	push   eax
c0004aea:	68 b5 01 00 00       	push   0x1b5
c0004aef:	52                   	push   edx
c0004af0:	e8 46 38 00 00       	call   c000833b <ff_oem2uni>
c0004af5:	83 c4 10             	add    esp,0x10
c0004af8:	66 85 c0             	test   ax,ax
c0004afb:	75 04                	jne    c0004b01 <get_fileinfo+0x13c>
c0004afd:	31 ff                	xor    edi,edi
c0004aff:	eb 23                	jmp    c0004b24 <get_fileinfo+0x15f>
c0004b01:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b06:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b0a:	29 f9                	sub    ecx,edi
c0004b0c:	0f b7 c0             	movzx  eax,ax
c0004b0f:	e8 d7 d0 ff ff       	call   c0001beb <put_utf>
c0004b14:	84 c0                	test   al,al
c0004b16:	74 e5                	je     c0004afd <get_fileinfo+0x138>
c0004b18:	0f b6 c0             	movzx  eax,al
c0004b1b:	01 c7                	add    edi,eax
c0004b1d:	89 e9                	mov    ecx,ebp
c0004b1f:	e9 4a ff ff ff       	jmp    c0004a6e <get_fileinfo+0xa9>
c0004b24:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b29:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2d:	75 54                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b2f:	85 ff                	test   edi,edi
c0004b31:	75 0b                	jne    c0004b3e <get_fileinfo+0x179>
c0004b33:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b37:	ba 01 00 00 00       	mov    edx,0x1
c0004b3c:	eb 33                	jmp    c0004b71 <get_fileinfo+0x1ac>
c0004b3e:	b1 08                	mov    cl,0x8
c0004b40:	31 d2                	xor    edx,edx
c0004b42:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b48:	84 c0                	test   al,al
c0004b4a:	74 25                	je     c0004b71 <get_fileinfo+0x1ac>
c0004b4c:	66 83 f8 2e          	cmp    ax,0x2e
c0004b50:	74 16                	je     c0004b68 <get_fileinfo+0x1a3>
c0004b52:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b55:	66 83 ff 19          	cmp    di,0x19
c0004b59:	77 0f                	ja     c0004b6a <get_fileinfo+0x1a5>
c0004b5b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b61:	74 07                	je     c0004b6a <get_fileinfo+0x1a5>
c0004b63:	83 c0 20             	add    eax,0x20
c0004b66:	eb 02                	jmp    c0004b6a <get_fileinfo+0x1a5>
c0004b68:	b1 10                	mov    cl,0x10
c0004b6a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6e:	42                   	inc    edx
c0004b6f:	eb d1                	jmp    c0004b42 <get_fileinfo+0x17d>
c0004b71:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b79:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7d:	75 04                	jne    c0004b83 <get_fileinfo+0x1be>
c0004b7f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b86:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b89:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8f:	83 c0 1c             	add    eax,0x1c
c0004b92:	e8 c1 ce ff ff       	call   c0001a58 <ld_dword>
c0004b97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba3:	83 c0 16             	add    eax,0x16
c0004ba6:	e8 a0 ce ff ff       	call   c0001a4b <ld_word>
c0004bab:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004baf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb2:	83 c0 18             	add    eax,0x18
c0004bb5:	e8 91 ce ff ff       	call   c0001a4b <ld_word>
c0004bba:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbe:	83 c4 1c             	add    esp,0x1c
c0004bc1:	5b                   	pop    ebx
c0004bc2:	5e                   	pop    esi
c0004bc3:	5f                   	pop    edi
c0004bc4:	5d                   	pop    ebp
c0004bc5:	c3                   	ret    

c0004bc6 <ld_clust.isra.0>:
c0004bc6:	56                   	push   esi
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	53                   	push   ebx
c0004bca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcd:	89 d3                	mov    ebx,edx
c0004bcf:	e8 77 ce ff ff       	call   c0001a4b <ld_word>
c0004bd4:	0f b7 c8             	movzx  ecx,ax
c0004bd7:	89 f0                	mov    eax,esi
c0004bd9:	3c 03                	cmp    al,0x3
c0004bdb:	75 0d                	jne    c0004bea <ld_clust.isra.0+0x24>
c0004bdd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be0:	e8 66 ce ff ff       	call   c0001a4b <ld_word>
c0004be5:	c1 e0 10             	shl    eax,0x10
c0004be8:	09 c1                	or     ecx,eax
c0004bea:	89 c8                	mov    eax,ecx
c0004bec:	5b                   	pop    ebx
c0004bed:	5e                   	pop    esi
c0004bee:	c3                   	ret    

c0004bef <st_clust.isra.1>:
c0004bef:	56                   	push   esi
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	53                   	push   ebx
c0004bf3:	89 d3                	mov    ebx,edx
c0004bf5:	0f b7 d1             	movzx  edx,cx
c0004bf8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfb:	e8 bd ce ff ff       	call   c0001abd <st_word>
c0004c00:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c03:	75 0f                	jne    c0004c14 <st_clust.isra.1+0x25>
c0004c05:	c1 e9 10             	shr    ecx,0x10
c0004c08:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0b:	89 ca                	mov    edx,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	e9 a9 ce ff ff       	jmp    c0001abd <st_word>
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <init_alloc_info.isra.2>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c6                	mov    esi,eax
c0004c1b:	89 d3                	mov    ebx,edx
c0004c1d:	51                   	push   ecx
c0004c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 30 ce ff ff       	call   c0001a58 <ld_dword>
c0004c28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2d:	83 c0 38             	add    eax,0x38
c0004c30:	e8 3b ce ff ff       	call   c0001a70 <ld_qword>
c0004c35:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c38:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c40:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c47:	83 e0 02             	and    eax,0x2
c0004c4a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5b                   	pop    ebx
c0004c4f:	5e                   	pop    esi
c0004c50:	c3                   	ret    

c0004c51 <follow_path>:
c0004c51:	56                   	push   esi
c0004c52:	53                   	push   ebx
c0004c53:	89 c3                	mov    ebx,eax
c0004c55:	83 ec 14             	sub    esp,0x14
c0004c58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c62:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c64:	80 fa 5c             	cmp    dl,0x5c
c0004c67:	75 07                	jne    c0004c70 <follow_path+0x1f>
c0004c69:	40                   	inc    eax
c0004c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6e:	eb ee                	jmp    c0004c5e <follow_path+0xd>
c0004c70:	80 fa 2f             	cmp    dl,0x2f
c0004c73:	74 f4                	je     c0004c69 <follow_path+0x18>
c0004c75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c83:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c86:	77 52                	ja     c0004cda <follow_path+0x89>
c0004c88:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8c:	31 d2                	xor    edx,edx
c0004c8e:	89 d8                	mov    eax,ebx
c0004c90:	e8 12 e3 ff ff       	call   c0002fa7 <dir_sdi>
c0004c95:	eb 7c                	jmp    c0004d13 <follow_path+0xc2>
c0004c97:	89 d8                	mov    eax,ebx
c0004c99:	e8 6e f2 ff ff       	call   c0003f0c <dir_find>
c0004c9e:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca1:	85 c0                	test   eax,eax
c0004ca3:	75 46                	jne    c0004ceb <follow_path+0x9a>
c0004ca5:	80 e2 04             	and    dl,0x4
c0004ca8:	75 69                	jne    c0004d13 <follow_path+0xc2>
c0004caa:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cae:	74 5e                	je     c0004d0e <follow_path+0xbd>
c0004cb0:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb2:	3c 04                	cmp    al,0x4
c0004cb4:	75 41                	jne    c0004cf7 <follow_path+0xa6>
c0004cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc3:	30 c0                	xor    al,al
c0004cc5:	09 d0                	or     eax,edx
c0004cc7:	89 da                	mov    edx,ebx
c0004cc9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ccf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd2:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd5:	e8 3d ff ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004cda:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cde:	89 d8                	mov    eax,ebx
c0004ce0:	e8 a9 ed ff ff       	call   c0003a8e <create_name>
c0004ce5:	85 c0                	test   eax,eax
c0004ce7:	74 ae                	je     c0004c97 <follow_path+0x46>
c0004ce9:	eb 28                	jmp    c0004d13 <follow_path+0xc2>
c0004ceb:	83 f8 04             	cmp    eax,0x4
c0004cee:	75 23                	jne    c0004d13 <follow_path+0xc2>
c0004cf0:	80 e2 04             	and    dl,0x4
c0004cf3:	74 19                	je     c0004d0e <follow_path+0xbd>
c0004cf5:	eb 1c                	jmp    c0004d13 <follow_path+0xc2>
c0004cf7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cfa:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d00:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d04:	e8 bd fe ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004d09:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0c:	eb cc                	jmp    c0004cda <follow_path+0x89>
c0004d0e:	b8 05 00 00 00       	mov    eax,0x5
c0004d13:	83 c4 14             	add    esp,0x14
c0004d16:	5b                   	pop    ebx
c0004d17:	5e                   	pop    esi
c0004d18:	c3                   	ret    

c0004d19 <f_mount>:
c0004d19:	53                   	push   ebx
c0004d1a:	83 ec 18             	sub    esp,0x18
c0004d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2d:	e8 fb d2 ff ff       	call   c000202d <get_ldnumber>
c0004d32:	89 c2                	mov    edx,eax
c0004d34:	b8 0b 00 00 00       	mov    eax,0xb
c0004d39:	85 d2                	test   edx,edx
c0004d3b:	78 39                	js     c0004d76 <f_mount+0x5d>
c0004d3d:	8b 04 95 60 a5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5aa0]
c0004d44:	85 c0                	test   eax,eax
c0004d46:	74 03                	je     c0004d4b <f_mount+0x32>
c0004d48:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4f:	85 c0                	test   eax,eax
c0004d51:	74 03                	je     c0004d56 <f_mount+0x3d>
c0004d53:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d5a:	89 04 95 60 a5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5aa0],eax
c0004d61:	31 c0                	xor    eax,eax
c0004d63:	84 db                	test   bl,bl
c0004d65:	74 0f                	je     c0004d76 <f_mount+0x5d>
c0004d67:	31 c9                	xor    ecx,ecx
c0004d69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d71:	e8 65 d7 ff ff       	call   c00024db <mount_volume>
c0004d76:	83 c4 18             	add    esp,0x18
c0004d79:	5b                   	pop    ebx
c0004d7a:	c3                   	ret    

c0004d7b <f_open>:
c0004d7b:	55                   	push   ebp
c0004d7c:	bd 09 00 00 00       	mov    ebp,0x9
c0004d81:	57                   	push   edi
c0004d82:	56                   	push   esi
c0004d83:	53                   	push   ebx
c0004d84:	83 ec 7c             	sub    esp,0x7c
c0004d87:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d95:	85 db                	test   ebx,ebx
c0004d97:	0f 84 10 04 00 00    	je     c00051ad <f_open+0x432>
c0004d9d:	89 fe                	mov    esi,edi
c0004d9f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da3:	83 e6 3f             	and    esi,0x3f
c0004da6:	89 f0                	mov    eax,esi
c0004da8:	0f b6 c8             	movzx  ecx,al
c0004dab:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db2:	e8 24 d7 ff ff       	call   c00024db <mount_volume>
c0004db7:	89 c5                	mov    ebp,eax
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	0f 85 e6 03 00 00    	jne    c00051a7 <f_open+0x42c>
c0004dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc5:	bd 11 00 00 00       	mov    ebp,0x11
c0004dca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dce:	83 ec 0c             	sub    esp,0xc
c0004dd1:	68 60 04 00 00       	push   0x460
c0004dd6:	e8 a3 34 00 00       	call   c000827e <ff_memalloc>
c0004ddb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ddf:	83 c4 10             	add    esp,0x10
c0004de2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de7:	0f 84 c0 03 00 00    	je     c00051ad <f_open+0x432>
c0004ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df5:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfb:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e01:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0c:	e8 40 fe ff ff       	call   c0004c51 <follow_path>
c0004e11:	89 c5                	mov    ebp,eax
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 0c                	jne    c0004e23 <f_open+0xa8>
c0004e17:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1c:	79 05                	jns    c0004e23 <f_open+0xa8>
c0004e1e:	bd 06 00 00 00       	mov    ebp,0x6
c0004e23:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e29:	0f 84 84 01 00 00    	je     c0004fb3 <f_open+0x238>
c0004e2f:	85 ed                	test   ebp,ebp
c0004e31:	74 20                	je     c0004e53 <f_open+0xd8>
c0004e33:	83 fd 04             	cmp    ebp,0x4
c0004e36:	0f 85 58 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e3c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e40:	83 ce 08             	or     esi,0x8
c0004e43:	e8 8a f2 ff ff       	call   c00040d2 <dir_register>
c0004e48:	89 c5                	mov    ebp,eax
c0004e4a:	85 c0                	test   eax,eax
c0004e4c:	74 2f                	je     c0004e7d <f_open+0x102>
c0004e4e:	e9 41 03 00 00       	jmp    c0005194 <f_open+0x419>
c0004e53:	bd 07 00 00 00       	mov    ebp,0x7
c0004e58:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5d:	0f 85 31 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e63:	bd 08 00 00 00       	mov    ebp,0x8
c0004e68:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6e:	0f 85 20 03 00 00    	jne    c0005194 <f_open+0x419>
c0004e74:	83 e7 08             	and    edi,0x8
c0004e77:	0f 84 65 01 00 00    	je     c0004fe2 <f_open+0x267>
c0004e7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e81:	8a 02                	mov    al,BYTE PTR [edx]
c0004e83:	3c 04                	cmp    al,0x4
c0004e85:	0f 85 97 00 00 00    	jne    c0004f22 <f_open+0x1a7>
c0004e8b:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8e:	89 13                	mov    DWORD PTR [ebx],edx
c0004e90:	89 da                	mov    edx,ebx
c0004e92:	e8 80 fd ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0004e97:	31 d2                	xor    edx,edx
c0004e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea5:	83 c0 02             	add    eax,0x2
c0004ea8:	e8 32 cc ff ff       	call   c0001adf <mem_set>
c0004ead:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb2:	31 d2                	xor    edx,edx
c0004eb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ebb:	83 c0 26             	add    eax,0x26
c0004ebe:	e8 1c cc ff ff       	call   c0001adf <mem_set>
c0004ec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eca:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ece:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed6:	83 c0 08             	add    eax,0x8
c0004ed9:	e8 e3 cb ff ff       	call   c0001ac1 <st_dword>
c0004ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eed:	e8 b7 ea ff ff       	call   c00039a9 <store_xdir>
c0004ef2:	89 c5                	mov    ebp,eax
c0004ef4:	85 c0                	test   eax,eax
c0004ef6:	0f 85 98 02 00 00    	jne    c0005194 <f_open+0x419>
c0004efc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eff:	85 d2                	test   edx,edx
c0004f01:	0f 84 db 00 00 00    	je     c0004fe2 <f_open+0x267>
c0004f07:	31 c9                	xor    ecx,ecx
c0004f09:	89 d8                	mov    eax,ebx
c0004f0b:	e8 8e e3 ff ff       	call   c000329e <remove_chain>
c0004f10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f14:	89 c5                	mov    ebp,eax
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	48                   	dec    eax
c0004f1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1d:	e9 b8 00 00 00       	jmp    c0004fda <f_open+0x25f>
c0004f22:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f26:	89 ea                	mov    edx,ebp
c0004f28:	e8 99 fc ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0004f2d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f32:	89 c7                	mov    edi,eax
c0004f34:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f37:	e8 85 cb ff ff       	call   c0001ac1 <st_dword>
c0004f3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f40:	31 c9                	xor    ecx,ecx
c0004f42:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4e:	e8 9c fc ff ff       	call   c0004bef <st_clust.isra.1>
c0004f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f57:	31 d2                	xor    edx,edx
c0004f59:	83 c0 1c             	add    eax,0x1c
c0004f5c:	e8 60 cb ff ff       	call   c0001ac1 <st_dword>
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 ff                	test   edi,edi
c0004f67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6b:	74 75                	je     c0004fe2 <f_open+0x267>
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	31 c9                	xor    ecx,ecx
c0004f73:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f76:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f81:	89 fa                	mov    edx,edi
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 12 e3 ff ff       	call   c000329e <remove_chain>
c0004f8c:	89 c5                	mov    ebp,eax
c0004f8e:	85 c0                	test   eax,eax
c0004f90:	0f 85 fe 01 00 00    	jne    c0005194 <f_open+0x419>
c0004f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa2:	4f                   	dec    edi
c0004fa3:	e8 81 d2 ff ff       	call   c0002229 <move_window>
c0004fa8:	89 c5                	mov    ebp,eax
c0004faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fae:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb1:	eb 27                	jmp    c0004fda <f_open+0x25f>
c0004fb3:	85 ed                	test   ebp,ebp
c0004fb5:	0f 85 d9 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fbb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbf:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc4:	a8 10                	test   al,0x10
c0004fc6:	0f 85 c8 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fcc:	83 e7 02             	and    edi,0x2
c0004fcf:	74 11                	je     c0004fe2 <f_open+0x267>
c0004fd1:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd6:	a8 01                	test   al,0x1
c0004fd8:	eb 02                	jmp    c0004fdc <f_open+0x261>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 b2 01 00 00    	jne    c0005194 <f_open+0x419>
c0004fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe8:	74 03                	je     c0004fed <f_open+0x272>
c0004fea:	83 ce 40             	or     esi,0x40
c0004fed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff1:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff4:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff7:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ffa:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffd:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005001:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005004:	8a 02                	mov    al,BYTE PTR [edx]
c0005006:	3c 04                	cmp    al,0x4
c0005008:	75 2a                	jne    c0005034 <f_open+0x2b9>
c000500a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005013:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005016:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000501a:	30 c0                	xor    al,al
c000501c:	09 c8                	or     eax,ecx
c000501e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005021:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005025:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005028:	8d 42 10             	lea    eax,[edx+0x10]
c000502b:	89 da                	mov    edx,ebx
c000502d:	e8 e5 fb ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005032:	eb 1c                	jmp    c0005050 <f_open+0x2d5>
c0005034:	89 fa                	mov    edx,edi
c0005036:	e8 8b fb ff ff       	call   c0004bc6 <ld_clust.isra.0>
c000503b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005041:	e8 12 ca ff ff       	call   c0001a58 <ld_dword>
c0005046:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005054:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505b:	89 03                	mov    DWORD PTR [ebx],eax
c000505d:	31 d2                	xor    edx,edx
c000505f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005063:	b9 00 02 00 00       	mov    ecx,0x200
c0005068:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005070:	89 f0                	mov    eax,esi
c0005072:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005079:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005083:	8d 43 50             	lea    eax,[ebx+0x50]
c0005086:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005094:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005098:	e8 42 ca ff ff       	call   c0001adf <mem_set>
c000509d:	83 e6 20             	and    esi,0x20
c00050a0:	75 07                	jne    c00050a9 <f_open+0x32e>
c00050a2:	31 ed                	xor    ebp,ebp
c00050a4:	e9 eb 00 00 00       	jmp    c0005194 <f_open+0x419>
c00050a9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ac:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050bb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050bf:	74 e1                	je     c00050a2 <f_open+0x327>
c00050c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050da:	31 ff                	xor    edi,edi
c00050dc:	c1 e5 09             	shl    ebp,0x9
c00050df:	89 ee                	mov    esi,ebp
c00050e1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e5:	89 f8                	mov    eax,edi
c00050e7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050eb:	73 22                	jae    c000510f <f_open+0x394>
c00050ed:	89 d8                	mov    eax,ebx
c00050ef:	e8 bd dc ff ff       	call   c0002db1 <get_fat>
c00050f4:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f8:	89 c2                	mov    edx,eax
c00050fa:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fe:	83 f8 01             	cmp    eax,0x1
c0005101:	76 10                	jbe    c0005113 <f_open+0x398>
c0005103:	83 f8 ff             	cmp    eax,0xffffffff
c0005106:	75 d9                	jne    c00050e1 <f_open+0x366>
c0005108:	bd 01 00 00 00       	mov    ebp,0x1
c000510d:	eb 09                	jmp    c0005118 <f_open+0x39d>
c000510f:	31 ed                	xor    ebp,ebp
c0005111:	eb 05                	jmp    c0005118 <f_open+0x39d>
c0005113:	bd 02 00 00 00       	mov    ebp,0x2
c0005118:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511b:	85 ed                	test   ebp,ebp
c000511d:	75 75                	jne    c0005194 <f_open+0x419>
c000511f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005123:	25 ff 01 00 00       	and    eax,0x1ff
c0005128:	0f 84 74 ff ff ff    	je     c00050a2 <f_open+0x327>
c000512e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005132:	bd 02 00 00 00       	mov    ebp,0x2
c0005137:	89 c8                	mov    eax,ecx
c0005139:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513d:	e8 a2 cb ff ff       	call   c0001ce4 <clst2sect>
c0005142:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005146:	89 d7                	mov    edi,edx
c0005148:	09 c7                	or     edi,eax
c000514a:	74 48                	je     c0005194 <f_open+0x419>
c000514c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005150:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005160:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005164:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005168:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516f:	83 ec 0c             	sub    esp,0xc
c0005172:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005175:	6a 01                	push   0x1
c0005177:	52                   	push   edx
c0005178:	50                   	push   eax
c0005179:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005181:	50                   	push   eax
c0005182:	e8 79 c8 ff ff       	call   c0001a00 <disk_read>
c0005187:	83 c4 20             	add    esp,0x20
c000518a:	85 c0                	test   eax,eax
c000518c:	0f 95 c0             	setne  al
c000518f:	0f b6 c0             	movzx  eax,al
c0005192:	89 c5                	mov    ebp,eax
c0005194:	83 ec 0c             	sub    esp,0xc
c0005197:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519b:	e8 f4 30 00 00       	call   c0008294 <ff_memfree>
c00051a0:	83 c4 10             	add    esp,0x10
c00051a3:	85 ed                	test   ebp,ebp
c00051a5:	74 06                	je     c00051ad <f_open+0x432>
c00051a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ad:	83 c4 7c             	add    esp,0x7c
c00051b0:	89 e8                	mov    eax,ebp
c00051b2:	5b                   	pop    ebx
c00051b3:	5e                   	pop    esi
c00051b4:	5f                   	pop    edi
c00051b5:	5d                   	pop    ebp
c00051b6:	c3                   	ret    

c00051b7 <f_read>:
c00051b7:	55                   	push   ebp
c00051b8:	57                   	push   edi
c00051b9:	56                   	push   esi
c00051ba:	53                   	push   ebx
c00051bb:	83 ec 2c             	sub    esp,0x2c
c00051be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d0:	89 d8                	mov    eax,ebx
c00051d2:	e8 77 cf ff ff       	call   c000214e <validate>
c00051d7:	89 c5                	mov    ebp,eax
c00051d9:	85 c0                	test   eax,eax
c00051db:	0f 85 4c 02 00 00    	jne    c000542d <f_read+0x276>
c00051e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e5:	85 ed                	test   ebp,ebp
c00051e7:	0f 85 40 02 00 00    	jne    c000542d <f_read+0x276>
c00051ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f1:	0f 84 31 02 00 00    	je     c0005428 <f_read+0x271>
c00051f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005200:	bf 00 00 00 00       	mov    edi,0x0
c0005205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520c:	89 d1                	mov    ecx,edx
c000520e:	19 f9                	sbb    ecx,edi
c0005210:	0f 83 cf 00 00 00    	jae    c00052e5 <f_read+0x12e>
c0005216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000521a:	e9 c6 00 00 00       	jmp    c00052e5 <f_read+0x12e>
c000521f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005222:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005225:	89 d0                	mov    eax,edx
c0005227:	25 ff 01 00 00       	and    eax,0x1ff
c000522c:	0f 85 c9 01 00 00    	jne    c00053fb <f_read+0x244>
c0005232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005236:	89 d6                	mov    esi,edx
c0005238:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523c:	89 cf                	mov    edi,ecx
c000523e:	48                   	dec    eax
c000523f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005243:	21 f0                	and    eax,esi
c0005245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005249:	0f 84 a6 00 00 00    	je     c00052f5 <f_read+0x13e>
c000524f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005253:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005256:	89 c8                	mov    eax,ecx
c0005258:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525b:	e8 84 ca ff ff       	call   c0001ce4 <clst2sect>
c0005260:	89 d7                	mov    edi,edx
c0005262:	09 c7                	or     edi,eax
c0005264:	0f 84 b4 00 00 00    	je     c000531e <f_read+0x167>
c000526a:	31 ff                	xor    edi,edi
c000526c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005270:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005273:	01 c6                	add    esi,eax
c0005275:	11 d7                	adc    edi,edx
c0005277:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527f:	0f 86 fd 00 00 00    	jbe    c0005382 <f_read+0x1cb>
c0005285:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005289:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528d:	c1 e8 09             	shr    eax,0x9
c0005290:	89 04 24             	mov    DWORD PTR [esp],eax
c0005293:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005297:	03 14 24             	add    edx,DWORD PTR [esp]
c000529a:	39 c2                	cmp    edx,eax
c000529c:	76 07                	jbe    c00052a5 <f_read+0xee>
c000529e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a5:	83 ec 0c             	sub    esp,0xc
c00052a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ac:	57                   	push   edi
c00052ad:	56                   	push   esi
c00052ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b6:	50                   	push   eax
c00052b7:	e8 44 c7 ff ff       	call   c0001a00 <disk_read>
c00052bc:	83 c4 20             	add    esp,0x20
c00052bf:	85 c0                	test   eax,eax
c00052c1:	75 6e                	jne    c0005331 <f_read+0x17a>
c00052c3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c7:	78 7e                	js     c0005347 <f_read+0x190>
c00052c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cc:	c1 e6 09             	shl    esi,0x9
c00052cf:	31 ff                	xor    edi,edi
c00052d1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dd:	01 30                	add    DWORD PTR [eax],esi
c00052df:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052ea:	0f 85 2f ff ff ff    	jne    c000521f <f_read+0x68>
c00052f0:	e9 38 01 00 00       	jmp    c000542d <f_read+0x276>
c00052f5:	89 c8                	mov    eax,ecx
c00052f7:	09 d0                	or     eax,edx
c00052f9:	75 05                	jne    c0005300 <f_read+0x149>
c00052fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fe:	eb 19                	jmp    c0005319 <f_read+0x162>
c0005300:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005304:	74 09                	je     c000530f <f_read+0x158>
c0005306:	89 d8                	mov    eax,ebx
c0005308:	e8 f8 c9 ff ff       	call   c0001d05 <clmt_clust>
c000530d:	eb 0a                	jmp    c0005319 <f_read+0x162>
c000530f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005312:	89 d8                	mov    eax,ebx
c0005314:	e8 98 da ff ff       	call   c0002db1 <get_fat>
c0005319:	83 f8 01             	cmp    eax,0x1
c000531c:	77 0e                	ja     c000532c <f_read+0x175>
c000531e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005322:	bd 02 00 00 00       	mov    ebp,0x2
c0005327:	e9 01 01 00 00       	jmp    c000542d <f_read+0x276>
c000532c:	83 f8 ff             	cmp    eax,0xffffffff
c000532f:	75 0e                	jne    c000533f <f_read+0x188>
c0005331:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005335:	bd 01 00 00 00       	mov    ebp,0x1
c000533a:	e9 ee 00 00 00       	jmp    c000542d <f_read+0x276>
c000533f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005342:	e9 08 ff ff ff       	jmp    c000524f <f_read+0x98>
c0005347:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534d:	29 f0                	sub    eax,esi
c000534f:	19 fa                	sbb    edx,edi
c0005351:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005354:	89 d7                	mov    edi,edx
c0005356:	ba 00 00 00 00       	mov    edx,0x0
c000535b:	89 f9                	mov    ecx,edi
c000535d:	19 d1                	sbb    ecx,edx
c000535f:	0f 83 64 ff ff ff    	jae    c00052c9 <f_read+0x112>
c0005365:	89 c7                	mov    edi,eax
c0005367:	8d 53 50             	lea    edx,[ebx+0x50]
c000536a:	c1 e7 09             	shl    edi,0x9
c000536d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005371:	b9 00 02 00 00       	mov    ecx,0x200
c0005376:	01 f8                	add    eax,edi
c0005378:	e8 4d c7 ff ff       	call   c0001aca <mem_cpy>
c000537d:	e9 47 ff ff ff       	jmp    c00052c9 <f_read+0x112>
c0005382:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005385:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005388:	89 04 24             	mov    DWORD PTR [esp],eax
c000538b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005393:	75 05                	jne    c000539a <f_read+0x1e3>
c0005395:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005398:	74 5b                	je     c00053f5 <f_read+0x23e>
c000539a:	8d 43 50             	lea    eax,[ebx+0x50]
c000539d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a5:	79 2a                	jns    c00053d1 <f_read+0x21a>
c00053a7:	83 ec 0c             	sub    esp,0xc
c00053aa:	6a 01                	push   0x1
c00053ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bc:	50                   	push   eax
c00053bd:	e8 54 c6 ff ff       	call   c0001a16 <disk_write>
c00053c2:	83 c4 20             	add    esp,0x20
c00053c5:	85 c0                	test   eax,eax
c00053c7:	0f 85 64 ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053cd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d1:	83 ec 0c             	sub    esp,0xc
c00053d4:	6a 01                	push   0x1
c00053d6:	57                   	push   edi
c00053d7:	56                   	push   esi
c00053d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e4:	50                   	push   eax
c00053e5:	e8 16 c6 ff ff       	call   c0001a00 <disk_read>
c00053ea:	83 c4 20             	add    esp,0x20
c00053ed:	85 c0                	test   eax,eax
c00053ef:	0f 85 3c ff ff ff    	jne    c0005331 <f_read+0x17a>
c00053f5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fe:	ba 00 02 00 00       	mov    edx,0x200
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540c:	29 c2                	sub    edx,eax
c000540e:	39 d6                	cmp    esi,edx
c0005410:	76 02                	jbe    c0005414 <f_read+0x25d>
c0005412:	89 d6                	mov    esi,edx
c0005414:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005418:	89 f1                	mov    ecx,esi
c000541a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541e:	e8 a7 c6 ff ff       	call   c0001aca <mem_cpy>
c0005423:	e9 a7 fe ff ff       	jmp    c00052cf <f_read+0x118>
c0005428:	bd 07 00 00 00       	mov    ebp,0x7
c000542d:	83 c4 2c             	add    esp,0x2c
c0005430:	89 e8                	mov    eax,ebp
c0005432:	5b                   	pop    ebx
c0005433:	5e                   	pop    esi
c0005434:	5f                   	pop    edi
c0005435:	5d                   	pop    ebp
c0005436:	c3                   	ret    

c0005437 <f_write>:
c0005437:	55                   	push   ebp
c0005438:	57                   	push   edi
c0005439:	56                   	push   esi
c000543a:	53                   	push   ebx
c000543b:	83 ec 2c             	sub    esp,0x2c
c000543e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005442:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005446:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005450:	89 d8                	mov    eax,ebx
c0005452:	e8 f7 cc ff ff       	call   c000214e <validate>
c0005457:	89 c5                	mov    ebp,eax
c0005459:	85 c0                	test   eax,eax
c000545b:	0f 85 86 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c0005461:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005465:	85 ed                	test   ebp,ebp
c0005467:	0f 85 7a 02 00 00    	jne    c00056e7 <f_write+0x2b0>
c000546d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005471:	0f 84 6b 02 00 00    	je     c00056e2 <f_write+0x2ab>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547e:	0f 84 43 01 00 00    	je     c00055c7 <f_write+0x190>
c0005484:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005487:	89 c1                	mov    ecx,eax
c0005489:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548d:	0f 83 34 01 00 00    	jae    c00055c7 <f_write+0x190>
c0005493:	f7 d0                	not    eax
c0005495:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005499:	e9 29 01 00 00       	jmp    c00055c7 <f_write+0x190>
c000549e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a4:	89 d0                	mov    eax,edx
c00054a6:	25 ff 01 00 00       	and    eax,0x1ff
c00054ab:	0f 85 00 02 00 00    	jne    c00056b1 <f_write+0x27a>
c00054b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b5:	89 d6                	mov    esi,edx
c00054b7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054bb:	89 cf                	mov    edi,ecx
c00054bd:	48                   	dec    eax
c00054be:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c2:	21 f0                	and    eax,esi
c00054c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c8:	0f 84 06 01 00 00    	je     c00055d4 <f_write+0x19d>
c00054ce:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d2:	0f 88 6e 01 00 00    	js     c0005646 <f_write+0x20f>
c00054d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054dc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054df:	89 c8                	mov    eax,ecx
c00054e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e5:	e8 fa c7 ff ff       	call   c0001ce4 <clst2sect>
c00054ea:	89 d1                	mov    ecx,edx
c00054ec:	09 c1                	or     ecx,eax
c00054ee:	0f 84 1c 01 00 00    	je     c0005610 <f_write+0x1d9>
c00054f4:	31 ff                	xor    edi,edi
c00054f6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fe:	01 c6                	add    esi,eax
c0005500:	11 d7                	adc    edi,edx
c0005502:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000550a:	0f 86 63 01 00 00    	jbe    c0005673 <f_write+0x23c>
c0005510:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005514:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005518:	c1 e8 09             	shr    eax,0x9
c000551b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005523:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005527:	39 c2                	cmp    edx,eax
c0005529:	76 08                	jbe    c0005533 <f_write+0xfc>
c000552b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005533:	83 ec 0c             	sub    esp,0xc
c0005536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000553a:	57                   	push   edi
c000553b:	56                   	push   esi
c000553c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005540:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005544:	50                   	push   eax
c0005545:	e8 cc c4 ff ff       	call   c0001a16 <disk_write>
c000554a:	83 c4 20             	add    esp,0x20
c000554d:	85 c0                	test   eax,eax
c000554f:	0f 85 ce 00 00 00    	jne    c0005623 <f_write+0x1ec>
c0005555:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005558:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555b:	29 f0                	sub    eax,esi
c000555d:	19 fa                	sbb    edx,edi
c000555f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005563:	89 d7                	mov    edi,edx
c0005565:	ba 00 00 00 00       	mov    edx,0x0
c000556a:	89 f9                	mov    ecx,edi
c000556c:	19 d1                	sbb    ecx,edx
c000556e:	73 1c                	jae    c000558c <f_write+0x155>
c0005570:	89 c7                	mov    edi,eax
c0005572:	b9 00 02 00 00       	mov    ecx,0x200
c0005577:	c1 e7 09             	shl    edi,0x9
c000557a:	8d 43 50             	lea    eax,[ebx+0x50]
c000557d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005581:	89 fa                	mov    edx,edi
c0005583:	e8 42 c5 ff ff       	call   c0001aca <mem_cpy>
c0005588:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005590:	c1 e6 09             	shl    esi,0x9
c0005593:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005597:	31 ff                	xor    edi,edi
c0005599:	01 30                	add    DWORD PTR [eax],esi
c000559b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ac:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055af:	89 c1                	mov    ecx,eax
c00055b1:	39 f2                	cmp    edx,esi
c00055b3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b9:	19 f9                	sbb    ecx,edi
c00055bb:	73 04                	jae    c00055c1 <f_write+0x18a>
c00055bd:	89 f2                	mov    edx,esi
c00055bf:	89 f8                	mov    eax,edi
c00055c1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cc:	0f 85 cc fe ff ff    	jne    c000549e <f_write+0x67>
c00055d2:	eb 2e                	jmp    c0005602 <f_write+0x1cb>
c00055d4:	89 c8                	mov    eax,ecx
c00055d6:	09 d0                	or     eax,edx
c00055d8:	75 0b                	jne    c00055e5 <f_write+0x1ae>
c00055da:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dd:	31 d2                	xor    edx,edx
c00055df:	85 c0                	test   eax,eax
c00055e1:	75 28                	jne    c000560b <f_write+0x1d4>
c00055e3:	eb 12                	jmp    c00055f7 <f_write+0x1c0>
c00055e5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e9:	74 09                	je     c00055f4 <f_write+0x1bd>
c00055eb:	89 d8                	mov    eax,ebx
c00055ed:	e8 13 c7 ff ff       	call   c0001d05 <clmt_clust>
c00055f2:	eb 0a                	jmp    c00055fe <f_write+0x1c7>
c00055f4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f7:	89 d8                	mov    eax,ebx
c00055f9:	e8 a1 da ff ff       	call   c000309f <create_chain>
c00055fe:	85 c0                	test   eax,eax
c0005600:	75 09                	jne    c000560b <f_write+0x1d4>
c0005602:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005606:	e9 dc 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000560b:	83 f8 01             	cmp    eax,0x1
c000560e:	75 0e                	jne    c000561e <f_write+0x1e7>
c0005610:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005614:	bd 02 00 00 00       	mov    ebp,0x2
c0005619:	e9 c9 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c000561e:	83 f8 ff             	cmp    eax,0xffffffff
c0005621:	75 0e                	jne    c0005631 <f_write+0x1fa>
c0005623:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005627:	bd 01 00 00 00       	mov    ebp,0x1
c000562c:	e9 b6 00 00 00       	jmp    c00056e7 <f_write+0x2b0>
c0005631:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005634:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005638:	0f 85 90 fe ff ff    	jne    c00054ce <f_write+0x97>
c000563e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005641:	e9 88 fe ff ff       	jmp    c00054ce <f_write+0x97>
c0005646:	83 ec 0c             	sub    esp,0xc
c0005649:	8d 43 50             	lea    eax,[ebx+0x50]
c000564c:	6a 01                	push   0x1
c000564e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005651:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005654:	50                   	push   eax
c0005655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005659:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565d:	50                   	push   eax
c000565e:	e8 b3 c3 ff ff       	call   c0001a16 <disk_write>
c0005663:	83 c4 20             	add    esp,0x20
c0005666:	85 c0                	test   eax,eax
c0005668:	75 b9                	jne    c0005623 <f_write+0x1ec>
c000566a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566e:	e9 65 fe ff ff       	jmp    c00054d8 <f_write+0xa1>
c0005673:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005676:	75 05                	jne    c000567d <f_write+0x246>
c0005678:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567b:	74 2e                	je     c00056ab <f_write+0x274>
c000567d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005680:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005683:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005686:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005689:	73 20                	jae    c00056ab <f_write+0x274>
c000568b:	83 ec 0c             	sub    esp,0xc
c000568e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005691:	6a 01                	push   0x1
c0005693:	57                   	push   edi
c0005694:	56                   	push   esi
c0005695:	50                   	push   eax
c0005696:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000569a:	50                   	push   eax
c000569b:	e8 60 c3 ff ff       	call   c0001a00 <disk_read>
c00056a0:	83 c4 20             	add    esp,0x20
c00056a3:	85 c0                	test   eax,eax
c00056a5:	0f 85 78 ff ff ff    	jne    c0005623 <f_write+0x1ec>
c00056ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b4:	ba 00 02 00 00       	mov    edx,0x200
c00056b9:	25 ff 01 00 00       	and    eax,0x1ff
c00056be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c2:	29 c2                	sub    edx,eax
c00056c4:	39 d6                	cmp    esi,edx
c00056c6:	76 02                	jbe    c00056ca <f_write+0x293>
c00056c8:	89 d6                	mov    esi,edx
c00056ca:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ce:	89 f1                	mov    ecx,esi
c00056d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d4:	e8 f1 c3 ff ff       	call   c0001aca <mem_cpy>
c00056d9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dd:	e9 b1 fe ff ff       	jmp    c0005593 <f_write+0x15c>
c00056e2:	bd 07 00 00 00       	mov    ebp,0x7
c00056e7:	83 c4 2c             	add    esp,0x2c
c00056ea:	89 e8                	mov    eax,ebp
c00056ec:	5b                   	pop    ebx
c00056ed:	5e                   	pop    esi
c00056ee:	5f                   	pop    edi
c00056ef:	5d                   	pop    ebp
c00056f0:	c3                   	ret    

c00056f1 <f_sync>:
c00056f1:	56                   	push   esi
c00056f2:	53                   	push   ebx
c00056f3:	83 ec 64             	sub    esp,0x64
c00056f6:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fe:	89 d8                	mov    eax,ebx
c0005700:	e8 49 ca ff ff       	call   c000214e <validate>
c0005705:	85 c0                	test   eax,eax
c0005707:	0f 85 ba 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000570d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005710:	f6 c2 40             	test   dl,0x40
c0005713:	0f 84 ae 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c0005719:	84 d2                	test   dl,dl
c000571b:	79 33                	jns    c0005750 <f_sync+0x5f>
c000571d:	83 ec 0c             	sub    esp,0xc
c0005720:	8d 43 50             	lea    eax,[ebx+0x50]
c0005723:	6a 01                	push   0x1
c0005725:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005728:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572b:	50                   	push   eax
c000572c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005730:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005734:	50                   	push   eax
c0005735:	e8 dc c2 ff ff       	call   c0001a16 <disk_write>
c000573a:	83 c4 20             	add    esp,0x20
c000573d:	89 c2                	mov    edx,eax
c000573f:	b8 01 00 00 00       	mov    eax,0x1
c0005744:	85 d2                	test   edx,edx
c0005746:	0f 85 7b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000574c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005754:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005757:	0f 85 11 01 00 00    	jne    c000586e <f_sync+0x17d>
c000575d:	89 d8                	mov    eax,ebx
c000575f:	e8 13 d6 ff ff       	call   c0002d77 <fill_first_frag>
c0005764:	85 c0                	test   eax,eax
c0005766:	0f 85 5b 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c000576c:	83 c9 ff             	or     ecx,0xffffffff
c000576f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005772:	89 d8                	mov    eax,ebx
c0005774:	e8 c9 d5 ff ff       	call   c0002d42 <fill_last_frag>
c0005779:	85 c0                	test   eax,eax
c000577b:	0f 85 46 01 00 00    	jne    c00058c7 <f_sync+0x1d6>
c0005781:	83 ec 0c             	sub    esp,0xc
c0005784:	68 60 04 00 00       	push   0x460
c0005789:	e8 f0 2a 00 00       	call   c000827e <ff_memalloc>
c000578e:	83 c4 10             	add    esp,0x10
c0005791:	89 c6                	mov    esi,eax
c0005793:	b8 11 00 00 00       	mov    eax,0x11
c0005798:	85 f6                	test   esi,esi
c000579a:	0f 84 27 01 00 00    	je     c00058c7 <f_sync+0x1d6>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057aa:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ad:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057b0:	89 da                	mov    edx,ebx
c00057b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b6:	e8 af df ff ff       	call   c000376a <load_obj_xdir>
c00057bb:	85 c0                	test   eax,eax
c00057bd:	0f 85 95 00 00 00    	jne    c0005858 <f_sync+0x167>
c00057c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ca:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ce:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d4:	83 ca 01             	or     edx,0x1
c00057d7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e0:	83 c0 34             	add    eax,0x34
c00057e3:	e8 d9 c2 ff ff       	call   c0001ac1 <st_dword>
c00057e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f5:	83 c0 38             	add    eax,0x38
c00057f8:	e8 c7 c2 ff ff       	call   c0001ac4 <st_qword>
c00057fd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005804:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005807:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000580a:	83 c0 28             	add    eax,0x28
c000580d:	e8 b2 c2 ff ff       	call   c0001ac4 <st_qword>
c0005812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005816:	ba 00 00 21 50       	mov    edx,0x50210000
c000581b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581e:	83 c0 0c             	add    eax,0xc
c0005821:	e8 9b c2 ff ff       	call   c0001ac1 <st_dword>
c0005826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005831:	31 d2                	xor    edx,edx
c0005833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005836:	83 c0 10             	add    eax,0x10
c0005839:	e8 83 c2 ff ff       	call   c0001ac1 <st_dword>
c000583e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005842:	e8 62 e1 ff ff       	call   c00039a9 <store_xdir>
c0005847:	85 c0                	test   eax,eax
c0005849:	75 0d                	jne    c0005858 <f_sync+0x167>
c000584b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584f:	e8 00 eb ff ff       	call   c0004354 <sync_fs>
c0005854:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005858:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	56                   	push   esi
c0005860:	e8 2f 2a 00 00       	call   c0008294 <ff_memfree>
c0005865:	83 c4 10             	add    esp,0x10
c0005868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586c:	eb 59                	jmp    c00058c7 <f_sync+0x1d6>
c000586e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005871:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005874:	e8 b0 c9 ff ff       	call   c0002229 <move_window>
c0005879:	85 c0                	test   eax,eax
c000587b:	75 4a                	jne    c00058c7 <f_sync+0x1d6>
c000587d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005880:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005884:	89 f2                	mov    edx,esi
c0005886:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005889:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588b:	e8 5f f3 ff ff       	call   c0004bef <st_clust.isra.1>
c0005890:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005893:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005896:	e8 26 c2 ff ff       	call   c0001ac1 <st_dword>
c000589b:	8d 46 16             	lea    eax,[esi+0x16]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 19 c2 ff ff       	call   c0001ac1 <st_dword>
c00058a8:	8d 46 12             	lea    eax,[esi+0x12]
c00058ab:	31 d2                	xor    edx,edx
c00058ad:	e8 0b c2 ff ff       	call   c0001abd <st_word>
c00058b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058be:	e8 91 ea ff ff       	call   c0004354 <sync_fs>
c00058c3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c7:	83 c4 64             	add    esp,0x64
c00058ca:	5b                   	pop    ebx
c00058cb:	5e                   	pop    esi
c00058cc:	c3                   	ret    

c00058cd <f_close>:
c00058cd:	53                   	push   ebx
c00058ce:	83 ec 24             	sub    esp,0x24
c00058d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d5:	53                   	push   ebx
c00058d6:	e8 16 fe ff ff       	call   c00056f1 <f_sync>
c00058db:	83 c4 10             	add    esp,0x10
c00058de:	85 c0                	test   eax,eax
c00058e0:	75 15                	jne    c00058f7 <f_close+0x2a>
c00058e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e6:	89 d8                	mov    eax,ebx
c00058e8:	e8 61 c8 ff ff       	call   c000214e <validate>
c00058ed:	85 c0                	test   eax,eax
c00058ef:	75 06                	jne    c00058f7 <f_close+0x2a>
c00058f1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f7:	83 c4 18             	add    esp,0x18
c00058fa:	5b                   	pop    ebx
c00058fb:	c3                   	ret    

c00058fc <f_lseek>:
c00058fc:	55                   	push   ebp
c00058fd:	57                   	push   edi
c00058fe:	56                   	push   esi
c00058ff:	53                   	push   ebx
c0005900:	83 ec 3c             	sub    esp,0x3c
c0005903:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005907:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005912:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005916:	89 d8                	mov    eax,ebx
c0005918:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591c:	e8 2d c8 ff ff       	call   c000214e <validate>
c0005921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005925:	85 c0                	test   eax,eax
c0005927:	0f 85 7a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000592d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005931:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005935:	85 c0                	test   eax,eax
c0005937:	0f 85 6a 04 00 00    	jne    c0005da7 <f_lseek+0x4ab>
c000593d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005941:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005944:	74 0c                	je     c0005952 <f_lseek+0x56>
c0005946:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005949:	85 c0                	test   eax,eax
c000594b:	75 1f                	jne    c000596c <f_lseek+0x70>
c000594d:	e9 b5 01 00 00       	jmp    c0005b07 <f_lseek+0x20b>
c0005952:	83 c9 ff             	or     ecx,0xffffffff
c0005955:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005958:	89 d8                	mov    eax,ebx
c000595a:	e8 e3 d3 ff ff       	call   c0002d42 <fill_last_frag>
c000595f:	85 c0                	test   eax,eax
c0005961:	74 e3                	je     c0005946 <f_lseek+0x4a>
c0005963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005967:	e9 3b 04 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c000596c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005971:	0f 85 ac 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005977:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597b:	0f 85 a2 00 00 00    	jne    c0005a23 <f_lseek+0x127>
c0005981:	8d 78 04             	lea    edi,[eax+0x4]
c0005984:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005987:	8b 00                	mov    eax,DWORD PTR [eax]
c0005989:	be 02 00 00 00       	mov    esi,0x2
c000598e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005992:	85 ed                	test   ebp,ebp
c0005994:	74 73                	je     c0005a09 <f_lseek+0x10d>
c0005996:	89 e9                	mov    ecx,ebp
c0005998:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599f:	ff 04 24             	inc    DWORD PTR [esp]
c00059a2:	89 ca                	mov    edx,ecx
c00059a4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a8:	89 d8                	mov    eax,ebx
c00059aa:	e8 02 d4 ff ff       	call   c0002db1 <get_fat>
c00059af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b3:	83 f8 01             	cmp    eax,0x1
c00059b6:	77 11                	ja     c00059c9 <f_lseek+0xcd>
c00059b8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c4:	e9 de 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059c9:	83 f8 ff             	cmp    eax,0xffffffff
c00059cc:	75 11                	jne    c00059df <f_lseek+0xe3>
c00059ce:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059da:	e9 c8 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c00059df:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e2:	89 c1                	mov    ecx,eax
c00059e4:	39 c2                	cmp    edx,eax
c00059e6:	74 b7                	je     c000599f <f_lseek+0xa3>
c00059e8:	83 c6 02             	add    esi,0x2
c00059eb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ef:	72 0b                	jb     c00059fc <f_lseek+0x100>
c00059f1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f4:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f7:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f9:	83 c7 08             	add    edi,0x8
c00059fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a00:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a03:	76 04                	jbe    c0005a09 <f_lseek+0x10d>
c0005a05:	89 c5                	mov    ebp,eax
c0005a07:	eb 8d                	jmp    c0005996 <f_lseek+0x9a>
c0005a09:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a10:	89 30                	mov    DWORD PTR [eax],esi
c0005a12:	0f 87 87 03 00 00    	ja     c0005d9f <f_lseek+0x4a3>
c0005a18:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1e:	e9 84 03 00 00       	jmp    c0005da7 <f_lseek+0x4ab>
c0005a23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a26:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a40:	73 0f                	jae    c0005a51 <f_lseek+0x155>
c0005a42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a59:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a63:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a67:	0f 84 3a 03 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005a6d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a71:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a75:	83 c6 ff             	add    esi,0xffffffff
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	83 d7 ff             	adc    edi,0xffffffff
c0005a7d:	89 f2                	mov    edx,esi
c0005a7f:	89 f9                	mov    ecx,edi
c0005a81:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a85:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a88:	e8 78 c2 ff ff       	call   c0001d05 <clmt_clust>
c0005a8d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a91:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a94:	89 c2                	mov    edx,eax
c0005a96:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a9a:	89 c8                	mov    eax,ecx
c0005a9c:	e8 43 c2 ff ff       	call   c0001ce4 <clst2sect>
c0005aa1:	89 d7                	mov    edi,edx
c0005aa3:	09 c7                	or     edi,eax
c0005aa5:	0f 84 0d ff ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005aab:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aaf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab5:	0f 84 ec 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aca:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ace:	4d                   	dec    ebp
c0005acf:	31 ff                	xor    edi,edi
c0005ad1:	21 ee                	and    esi,ebp
c0005ad3:	01 c6                	add    esi,eax
c0005ad5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad8:	11 d7                	adc    edi,edx
c0005ada:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005add:	39 fa                	cmp    edx,edi
c0005adf:	75 08                	jne    c0005ae9 <f_lseek+0x1ed>
c0005ae1:	39 f0                	cmp    eax,esi
c0005ae3:	0f 84 be 02 00 00    	je     c0005da7 <f_lseek+0x4ab>
c0005ae9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aec:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005af0:	0f 89 80 02 00 00    	jns    c0005d76 <f_lseek+0x47a>
c0005af6:	83 ec 0c             	sub    esp,0xc
c0005af9:	6a 01                	push   0x1
c0005afb:	52                   	push   edx
c0005afc:	50                   	push   eax
c0005afd:	55                   	push   ebp
c0005afe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b02:	e9 5a 02 00 00       	jmp    c0005d61 <f_lseek+0x465>
c0005b07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0e:	74 16                	je     c0005b26 <f_lseek+0x22a>
c0005b10:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b15:	76 0f                	jbe    c0005b26 <f_lseek+0x22a>
c0005b17:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b29:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2f:	89 c7                	mov    edi,eax
c0005b31:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b35:	73 0d                	jae    c0005b44 <f_lseek+0x248>
c0005b37:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3b:	75 07                	jne    c0005b44 <f_lseek+0x248>
c0005b3d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b44:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b47:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b55:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5f:	75 09                	jne    c0005b6a <f_lseek+0x26e>
c0005b61:	31 f6                	xor    esi,esi
c0005b63:	31 ff                	xor    edi,edi
c0005b65:	e9 af 01 00 00       	jmp    c0005d19 <f_lseek+0x41d>
c0005b6a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6e:	89 d7                	mov    edi,edx
c0005b70:	c1 e1 09             	shl    ecx,0x9
c0005b73:	09 c7                	or     edi,eax
c0005b75:	89 cd                	mov    ebp,ecx
c0005b77:	74 6d                	je     c0005be6 <f_lseek+0x2ea>
c0005b79:	83 c0 ff             	add    eax,0xffffffff
c0005b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b80:	83 d2 ff             	adc    edx,0xffffffff
c0005b83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b8a:	83 c0 ff             	add    eax,0xffffffff
c0005b8d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b91:	83 d2 ff             	adc    edx,0xffffffff
c0005b94:	31 ff                	xor    edi,edi
c0005b96:	57                   	push   edi
c0005b97:	51                   	push   ecx
c0005b98:	52                   	push   edx
c0005b99:	50                   	push   eax
c0005b9a:	e8 3d d9 01 00       	call   c00234dc <__udivdi3>
c0005b9f:	83 c4 10             	add    esp,0x10
c0005ba2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005baa:	57                   	push   edi
c0005bab:	55                   	push   ebp
c0005bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb4:	e8 23 d9 01 00       	call   c00234dc <__udivdi3>
c0005bb9:	83 c4 10             	add    esp,0x10
c0005bbc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bc0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc4:	19 d1                	sbb    ecx,edx
c0005bc6:	72 1e                	jb     c0005be6 <f_lseek+0x2ea>
c0005bc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcc:	89 e9                	mov    ecx,ebp
c0005bce:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd1:	f7 d9                	neg    ecx
c0005bd3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bda:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005be0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be4:	eb 28                	jmp    c0005c0e <f_lseek+0x312>
c0005be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be9:	85 c0                	test   eax,eax
c0005beb:	75 1e                	jne    c0005c0b <f_lseek+0x30f>
c0005bed:	31 d2                	xor    edx,edx
c0005bef:	89 d8                	mov    eax,ebx
c0005bf1:	e8 a9 d4 ff ff       	call   c000309f <create_chain>
c0005bf6:	83 f8 01             	cmp    eax,0x1
c0005bf9:	0f 84 b9 fd ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005bff:	83 f8 ff             	cmp    eax,0xffffffff
c0005c02:	0f 84 c6 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005c08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0e:	85 c0                	test   eax,eax
c0005c10:	0f 84 4b ff ff ff    	je     c0005b61 <f_lseek+0x265>
c0005c16:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c29:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c33:	0f 83 9d 00 00 00    	jae    c0005cd6 <f_lseek+0x3da>
c0005c39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c41:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c44:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c48:	01 f2                	add    edx,esi
c0005c4a:	11 f9                	adc    ecx,edi
c0005c4c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c50:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c54:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c57:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c5a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5d:	f6 c1 02             	test   cl,0x2
c0005c60:	74 35                	je     c0005c97 <f_lseek+0x39b>
c0005c62:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c66:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c69:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c70:	73 16                	jae    c0005c88 <f_lseek+0x38c>
c0005c72:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c76:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c7a:	88 ca                	mov    dl,cl
c0005c7c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7f:	83 ca 40             	or     edx,0x40
c0005c82:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c85:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c88:	89 c2                	mov    edx,eax
c0005c8a:	89 d8                	mov    eax,ebx
c0005c8c:	e8 0e d4 ff ff       	call   c000309f <create_chain>
c0005c91:	85 c0                	test   eax,eax
c0005c93:	75 0b                	jne    c0005ca0 <f_lseek+0x3a4>
c0005c95:	eb 30                	jmp    c0005cc7 <f_lseek+0x3cb>
c0005c97:	89 c2                	mov    edx,eax
c0005c99:	89 d8                	mov    eax,ebx
c0005c9b:	e8 11 d1 ff ff       	call   c0002db1 <get_fat>
c0005ca0:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca3:	0f 84 25 fd ff ff    	je     c00059ce <f_lseek+0xd2>
c0005ca9:	83 f8 01             	cmp    eax,0x1
c0005cac:	0f 86 06 fd ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb9:	0f 86 f9 fc ff ff    	jbe    c00059b8 <f_lseek+0xbc>
c0005cbf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc2:	e9 5b ff ff ff       	jmp    c0005c22 <f_lseek+0x326>
c0005cc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ce0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cec:	0f 84 6f fe ff ff    	je     c0005b61 <f_lseek+0x265>
c0005cf2:	89 c2                	mov    edx,eax
c0005cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf8:	e8 e7 bf ff ff       	call   c0001ce4 <clst2sect>
c0005cfd:	89 d7                	mov    edi,edx
c0005cff:	09 c7                	or     edi,eax
c0005d01:	0f 84 b1 fc ff ff    	je     c00059b8 <f_lseek+0xbc>
c0005d07:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d12:	c1 ef 09             	shr    edi,0x9
c0005d15:	01 c6                	add    esi,eax
c0005d17:	11 d7                	adc    edi,edx
c0005d19:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d22:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d25:	19 d1                	sbb    ecx,edx
c0005d27:	73 0a                	jae    c0005d33 <f_lseek+0x437>
c0005d29:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d33:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d38:	74 6d                	je     c0005da7 <f_lseek+0x4ab>
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d40:	39 fa                	cmp    edx,edi
c0005d42:	75 04                	jne    c0005d48 <f_lseek+0x44c>
c0005d44:	39 f0                	cmp    eax,esi
c0005d46:	74 5f                	je     c0005da7 <f_lseek+0x4ab>
c0005d48:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4f:	79 25                	jns    c0005d76 <f_lseek+0x47a>
c0005d51:	83 ec 0c             	sub    esp,0xc
c0005d54:	6a 01                	push   0x1
c0005d56:	52                   	push   edx
c0005d57:	50                   	push   eax
c0005d58:	55                   	push   ebp
c0005d59:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d61:	50                   	push   eax
c0005d62:	e8 af bc ff ff       	call   c0001a16 <disk_write>
c0005d67:	83 c4 20             	add    esp,0x20
c0005d6a:	85 c0                	test   eax,eax
c0005d6c:	0f 85 5c fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d72:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d76:	83 ec 0c             	sub    esp,0xc
c0005d79:	6a 01                	push   0x1
c0005d7b:	57                   	push   edi
c0005d7c:	56                   	push   esi
c0005d7d:	55                   	push   ebp
c0005d7e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d82:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d86:	50                   	push   eax
c0005d87:	e8 74 bc ff ff       	call   c0001a00 <disk_read>
c0005d8c:	83 c4 20             	add    esp,0x20
c0005d8f:	85 c0                	test   eax,eax
c0005d91:	0f 85 37 fc ff ff    	jne    c00059ce <f_lseek+0xd2>
c0005d97:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d9a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9d:	eb 08                	jmp    c0005da7 <f_lseek+0x4ab>
c0005d9f:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dab:	83 c4 3c             	add    esp,0x3c
c0005dae:	5b                   	pop    ebx
c0005daf:	5e                   	pop    esi
c0005db0:	5f                   	pop    edi
c0005db1:	5d                   	pop    ebp
c0005db2:	c3                   	ret    

c0005db3 <f_opendir>:
c0005db3:	56                   	push   esi
c0005db4:	b8 09 00 00 00       	mov    eax,0x9
c0005db9:	53                   	push   ebx
c0005dba:	83 ec 24             	sub    esp,0x24
c0005dbd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc1:	85 db                	test   ebx,ebx
c0005dc3:	0f 84 e6 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005dc9:	31 c9                	xor    ecx,ecx
c0005dcb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dcf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd3:	e8 03 c7 ff ff       	call   c00024db <mount_volume>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	0f 85 c9 00 00 00    	jne    c0005ea9 <f_opendir+0xf6>
c0005de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de4:	83 ec 0c             	sub    esp,0xc
c0005de7:	89 03                	mov    DWORD PTR [ebx],eax
c0005de9:	68 60 04 00 00       	push   0x460
c0005dee:	e8 8b 24 00 00       	call   c000827e <ff_memalloc>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	89 c6                	mov    esi,eax
c0005df8:	b8 11 00 00 00       	mov    eax,0x11
c0005dfd:	85 f6                	test   esi,esi
c0005dff:	0f 84 aa 00 00 00    	je     c0005eaf <f_opendir+0xfc>
c0005e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e09:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e12:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e15:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e19:	89 d8                	mov    eax,ebx
c0005e1b:	e8 31 ee ff ff       	call   c0004c51 <follow_path>
c0005e20:	85 c0                	test   eax,eax
c0005e22:	75 61                	jne    c0005e85 <f_opendir+0xd2>
c0005e24:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e28:	78 46                	js     c0005e70 <f_opendir+0xbd>
c0005e2a:	b8 05 00 00 00       	mov    eax,0x5
c0005e2f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e33:	74 50                	je     c0005e85 <f_opendir+0xd2>
c0005e35:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e39:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3b:	3c 04                	cmp    al,0x4
c0005e3d:	75 26                	jne    c0005e65 <f_opendir+0xb2>
c0005e3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e42:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e45:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e48:	30 d2                	xor    dl,dl
c0005e4a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4e:	09 c2                	or     edx,eax
c0005e50:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e53:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e56:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e59:	89 da                	mov    edx,ebx
c0005e5b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5e:	e8 b4 ed ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0005e63:	eb 0b                	jmp    c0005e70 <f_opendir+0xbd>
c0005e65:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e68:	e8 59 ed ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0005e6d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e74:	31 d2                	xor    edx,edx
c0005e76:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e7a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7e:	89 d8                	mov    eax,ebx
c0005e80:	e8 22 d1 ff ff       	call   c0002fa7 <dir_sdi>
c0005e85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e89:	83 ec 0c             	sub    esp,0xc
c0005e8c:	56                   	push   esi
c0005e8d:	e8 02 24 00 00       	call   c0008294 <ff_memfree>
c0005e92:	83 c4 10             	add    esp,0x10
c0005e95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e99:	83 f8 04             	cmp    eax,0x4
c0005e9c:	74 06                	je     c0005ea4 <f_opendir+0xf1>
c0005e9e:	85 c0                	test   eax,eax
c0005ea0:	74 0d                	je     c0005eaf <f_opendir+0xfc>
c0005ea2:	eb 05                	jmp    c0005ea9 <f_opendir+0xf6>
c0005ea4:	b8 05 00 00 00       	mov    eax,0x5
c0005ea9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eaf:	83 c4 24             	add    esp,0x24
c0005eb2:	5b                   	pop    ebx
c0005eb3:	5e                   	pop    esi
c0005eb4:	c3                   	ret    

c0005eb5 <f_closedir>:
c0005eb5:	53                   	push   ebx
c0005eb6:	83 ec 18             	sub    esp,0x18
c0005eb9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec1:	89 d8                	mov    eax,ebx
c0005ec3:	e8 86 c2 ff ff       	call   c000214e <validate>
c0005ec8:	85 c0                	test   eax,eax
c0005eca:	75 06                	jne    c0005ed2 <f_closedir+0x1d>
c0005ecc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed2:	83 c4 18             	add    esp,0x18
c0005ed5:	5b                   	pop    ebx
c0005ed6:	c3                   	ret    

c0005ed7 <f_readdir>:
c0005ed7:	57                   	push   edi
c0005ed8:	56                   	push   esi
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 20             	sub    esp,0x20
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee9:	89 d8                	mov    eax,ebx
c0005eeb:	e8 5e c2 ff ff       	call   c000214e <validate>
c0005ef0:	85 c0                	test   eax,eax
c0005ef2:	75 77                	jne    c0005f6b <f_readdir+0x94>
c0005ef4:	85 ff                	test   edi,edi
c0005ef6:	75 0b                	jne    c0005f03 <f_readdir+0x2c>
c0005ef8:	31 d2                	xor    edx,edx
c0005efa:	89 d8                	mov    eax,ebx
c0005efc:	e8 a6 d0 ff ff       	call   c0002fa7 <dir_sdi>
c0005f01:	eb 68                	jmp    c0005f6b <f_readdir+0x94>
c0005f03:	83 ec 0c             	sub    esp,0xc
c0005f06:	68 60 04 00 00       	push   0x460
c0005f0b:	e8 6e 23 00 00       	call   c000827e <ff_memalloc>
c0005f10:	83 c4 10             	add    esp,0x10
c0005f13:	89 c6                	mov    esi,eax
c0005f15:	b8 11 00 00 00       	mov    eax,0x11
c0005f1a:	85 f6                	test   esi,esi
c0005f1c:	74 4d                	je     c0005f6b <f_readdir+0x94>
c0005f1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f22:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f28:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2e:	31 d2                	xor    edx,edx
c0005f30:	89 d8                	mov    eax,ebx
c0005f32:	e8 80 d8 ff ff       	call   c00037b7 <dir_read>
c0005f37:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3c:	75 19                	jne    c0005f57 <f_readdir+0x80>
c0005f3e:	89 fa                	mov    edx,edi
c0005f40:	89 d8                	mov    eax,ebx
c0005f42:	e8 7e ea ff ff       	call   c00049c5 <get_fileinfo>
c0005f47:	31 d2                	xor    edx,edx
c0005f49:	89 d8                	mov    eax,ebx
c0005f4b:	e8 af d5 ff ff       	call   c00034ff <dir_next>
c0005f50:	83 f8 04             	cmp    eax,0x4
c0005f53:	75 02                	jne    c0005f57 <f_readdir+0x80>
c0005f55:	31 c0                	xor    eax,eax
c0005f57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5b:	83 ec 0c             	sub    esp,0xc
c0005f5e:	56                   	push   esi
c0005f5f:	e8 30 23 00 00       	call   c0008294 <ff_memfree>
c0005f64:	83 c4 10             	add    esp,0x10
c0005f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6b:	83 c4 20             	add    esp,0x20
c0005f6e:	5b                   	pop    ebx
c0005f6f:	5e                   	pop    esi
c0005f70:	5f                   	pop    edi
c0005f71:	c3                   	ret    

c0005f72 <f_stat>:
c0005f72:	57                   	push   edi
c0005f73:	31 c9                	xor    ecx,ecx
c0005f75:	56                   	push   esi
c0005f76:	53                   	push   ebx
c0005f77:	83 ec 50             	sub    esp,0x50
c0005f7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f82:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f86:	e8 50 c5 ff ff       	call   c00024db <mount_volume>
c0005f8b:	89 c3                	mov    ebx,eax
c0005f8d:	85 c0                	test   eax,eax
c0005f8f:	75 67                	jne    c0005ff8 <f_stat+0x86>
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	bb 11 00 00 00       	mov    ebx,0x11
c0005f99:	68 60 04 00 00       	push   0x460
c0005f9e:	e8 db 22 00 00       	call   c000827e <ff_memalloc>
c0005fa3:	83 c4 10             	add    esp,0x10
c0005fa6:	89 c6                	mov    esi,eax
c0005fa8:	85 c0                	test   eax,eax
c0005faa:	74 4c                	je     c0005ff8 <f_stat+0x86>
c0005fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fc0:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc4:	e8 88 ec ff ff       	call   c0004c51 <follow_path>
c0005fc9:	89 c3                	mov    ebx,eax
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	75 1d                	jne    c0005fec <f_stat+0x7a>
c0005fcf:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd4:	78 11                	js     c0005fe7 <f_stat+0x75>
c0005fd6:	85 ff                	test   edi,edi
c0005fd8:	74 12                	je     c0005fec <f_stat+0x7a>
c0005fda:	89 fa                	mov    edx,edi
c0005fdc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe0:	e8 e0 e9 ff ff       	call   c00049c5 <get_fileinfo>
c0005fe5:	eb 05                	jmp    c0005fec <f_stat+0x7a>
c0005fe7:	bb 06 00 00 00       	mov    ebx,0x6
c0005fec:	83 ec 0c             	sub    esp,0xc
c0005fef:	56                   	push   esi
c0005ff0:	e8 9f 22 00 00       	call   c0008294 <ff_memfree>
c0005ff5:	83 c4 10             	add    esp,0x10
c0005ff8:	83 c4 50             	add    esp,0x50
c0005ffb:	89 d8                	mov    eax,ebx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	c3                   	ret    

c0006001 <f_getfree>:
c0006001:	55                   	push   ebp
c0006002:	31 c9                	xor    ecx,ecx
c0006004:	57                   	push   edi
c0006005:	56                   	push   esi
c0006006:	53                   	push   ebx
c0006007:	83 ec 5c             	sub    esp,0x5c
c000600a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006012:	e8 c4 c4 ff ff       	call   c00024db <mount_volume>
c0006017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601b:	85 c0                	test   eax,eax
c000601d:	0f 85 9d 01 00 00    	jne    c00061c0 <f_getfree+0x1bf>
c0006023:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006027:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602b:	89 02                	mov    DWORD PTR [edx],eax
c000602d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006030:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006033:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006036:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000603a:	39 f2                	cmp    edx,esi
c000603c:	77 0b                	ja     c0006049 <f_getfree+0x48>
c000603e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006042:	89 10                	mov    DWORD PTR [eax],edx
c0006044:	e9 77 01 00 00       	jmp    c00061c0 <f_getfree+0x1bf>
c0006049:	8a 10                	mov    dl,BYTE PTR [eax]
c000604b:	80 fa 01             	cmp    dl,0x1
c000604e:	75 3a                	jne    c000608a <f_getfree+0x89>
c0006050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006054:	be 02 00 00 00       	mov    esi,0x2
c0006059:	31 db                	xor    ebx,ebx
c000605b:	89 f2                	mov    edx,esi
c000605d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006061:	e8 4b cd ff ff       	call   c0002db1 <get_fat>
c0006066:	83 f8 ff             	cmp    eax,0xffffffff
c0006069:	0f 84 28 01 00 00    	je     c0006197 <f_getfree+0x196>
c000606f:	83 f8 01             	cmp    eax,0x1
c0006072:	0f 84 29 01 00 00    	je     c00061a1 <f_getfree+0x1a0>
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	46                   	inc    esi
c0006080:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006083:	77 d6                	ja     c000605b <f_getfree+0x5a>
c0006085:	e9 25 01 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000608a:	80 fa 04             	cmp    dl,0x4
c000608d:	0f 85 88 00 00 00    	jne    c000611b <f_getfree+0x11a>
c0006093:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006096:	31 ed                	xor    ebp,ebp
c0006098:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	85 ed                	test   ebp,ebp
c00060a7:	75 3f                	jne    c00060e8 <f_getfree+0xe7>
c00060a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b1:	83 c0 01             	add    eax,0x1
c00060b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b8:	83 d2 00             	adc    edx,0x0
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060cb:	e8 59 c1 ff ff       	call   c0002229 <move_window>
c00060d0:	85 c0                	test   eax,eax
c00060d2:	0f 85 d3 00 00 00    	jne    c00061ab <f_getfree+0x1aa>
c00060d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ef:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f3:	89 cf                	mov    edi,ecx
c00060f5:	85 f6                	test   esi,esi
c00060f7:	74 12                	je     c000610b <f_getfree+0x10a>
c00060f9:	88 c1                	mov    cl,al
c00060fb:	83 e1 01             	and    ecx,0x1
c00060fe:	80 f9 01             	cmp    cl,0x1
c0006101:	83 d3 00             	adc    ebx,0x0
c0006104:	d0 e8                	shr    al,1
c0006106:	4e                   	dec    esi
c0006107:	39 fe                	cmp    esi,edi
c0006109:	75 ea                	jne    c00060f5 <f_getfree+0xf4>
c000610b:	45                   	inc    ebp
c000610c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006112:	85 f6                	test   esi,esi
c0006114:	75 8f                	jne    c00060a5 <f_getfree+0xa4>
c0006116:	e9 94 00 00 00       	jmp    c00061af <f_getfree+0x1ae>
c000611b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006121:	31 f6                	xor    esi,esi
c0006123:	31 db                	xor    ebx,ebx
c0006125:	85 f6                	test   esi,esi
c0006127:	75 1b                	jne    c0006144 <f_getfree+0x143>
c0006129:	89 d7                	mov    edi,edx
c000612b:	89 cd                	mov    ebp,ecx
c000612d:	83 c7 01             	add    edi,0x1
c0006130:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006134:	83 d5 00             	adc    ebp,0x0
c0006137:	e8 ed c0 ff ff       	call   c0002229 <move_window>
c000613c:	85 c0                	test   eax,eax
c000613e:	75 6b                	jne    c00061ab <f_getfree+0x1aa>
c0006140:	89 fa                	mov    edx,edi
c0006142:	89 e9                	mov    ecx,ebp
c0006144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006148:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006150:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006153:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006157:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615b:	75 11                	jne    c000616e <f_getfree+0x16d>
c000615d:	e8 e9 b8 ff ff       	call   c0001a4b <ld_word>
c0006162:	66 83 f8 01          	cmp    ax,0x1
c0006166:	83 d3 00             	adc    ebx,0x0
c0006169:	83 c6 02             	add    esi,0x2
c000616c:	eb 13                	jmp    c0006181 <f_getfree+0x180>
c000616e:	e8 e5 b8 ff ff       	call   c0001a58 <ld_dword>
c0006173:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006178:	83 f8 01             	cmp    eax,0x1
c000617b:	83 d3 00             	adc    ebx,0x0
c000617e:	83 c6 04             	add    esi,0x4
c0006181:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006193:	75 90                	jne    c0006125 <f_getfree+0x124>
c0006195:	eb 18                	jmp    c00061af <f_getfree+0x1ae>
c0006197:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619f:	eb 0e                	jmp    c00061af <f_getfree+0x1ae>
c00061a1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a9:	eb 04                	jmp    c00061af <f_getfree+0x1ae>
c00061ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b3:	89 18                	mov    DWORD PTR [eax],ebx
c00061b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c4:	83 c4 5c             	add    esp,0x5c
c00061c7:	5b                   	pop    ebx
c00061c8:	5e                   	pop    esi
c00061c9:	5f                   	pop    edi
c00061ca:	5d                   	pop    ebp
c00061cb:	c3                   	ret    

c00061cc <f_truncate>:
c00061cc:	56                   	push   esi
c00061cd:	53                   	push   ebx
c00061ce:	83 ec 14             	sub    esp,0x14
c00061d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d9:	89 d8                	mov    eax,ebx
c00061db:	e8 6e bf ff ff       	call   c000214e <validate>
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	0f 85 d2 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061ea:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ee:	85 f6                	test   esi,esi
c00061f0:	0f 85 c6 00 00 00    	jne    c00062bc <f_truncate+0xf0>
c00061f6:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061fa:	0f 84 b7 00 00 00    	je     c00062b7 <f_truncate+0xeb>
c0006200:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006206:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006209:	89 d1                	mov    ecx,edx
c000620b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620e:	0f 83 a8 00 00 00    	jae    c00062bc <f_truncate+0xf0>
c0006214:	09 c2                	or     edx,eax
c0006216:	75 15                	jne    c000622d <f_truncate+0x61>
c0006218:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621b:	31 c9                	xor    ecx,ecx
c000621d:	89 d8                	mov    eax,ebx
c000621f:	e8 7a d0 ff ff       	call   c000329e <remove_chain>
c0006224:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622b:	eb 35                	jmp    c0006262 <f_truncate+0x96>
c000622d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006230:	89 d8                	mov    eax,ebx
c0006232:	e8 7a cb ff ff       	call   c0002db1 <get_fat>
c0006237:	89 c2                	mov    edx,eax
c0006239:	b8 01 00 00 00       	mov    eax,0x1
c000623e:	83 fa ff             	cmp    edx,0xffffffff
c0006241:	74 1f                	je     c0006262 <f_truncate+0x96>
c0006243:	b8 02 00 00 00       	mov    eax,0x2
c0006248:	83 fa 01             	cmp    edx,0x1
c000624b:	74 15                	je     c0006262 <f_truncate+0x96>
c000624d:	31 c0                	xor    eax,eax
c000624f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006253:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006256:	76 0a                	jbe    c0006262 <f_truncate+0x96>
c0006258:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625b:	89 d8                	mov    eax,ebx
c000625d:	e8 3c d0 ff ff       	call   c000329e <remove_chain>
c0006262:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006265:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006268:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006271:	83 ca 40             	or     edx,0x40
c0006274:	85 c0                	test   eax,eax
c0006276:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006279:	75 35                	jne    c00062b0 <f_truncate+0xe4>
c000627b:	84 d2                	test   dl,dl
c000627d:	79 3d                	jns    c00062bc <f_truncate+0xf0>
c000627f:	83 ec 0c             	sub    esp,0xc
c0006282:	8d 43 50             	lea    eax,[ebx+0x50]
c0006285:	6a 01                	push   0x1
c0006287:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000628a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628d:	50                   	push   eax
c000628e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006292:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006296:	50                   	push   eax
c0006297:	e8 7a b7 ff ff       	call   c0001a16 <disk_write>
c000629c:	83 c4 20             	add    esp,0x20
c000629f:	85 c0                	test   eax,eax
c00062a1:	75 08                	jne    c00062ab <f_truncate+0xdf>
c00062a3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a7:	31 f6                	xor    esi,esi
c00062a9:	eb 11                	jmp    c00062bc <f_truncate+0xf0>
c00062ab:	b8 01 00 00 00       	mov    eax,0x1
c00062b0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b3:	89 c6                	mov    esi,eax
c00062b5:	eb 05                	jmp    c00062bc <f_truncate+0xf0>
c00062b7:	be 07 00 00 00       	mov    esi,0x7
c00062bc:	89 f0                	mov    eax,esi
c00062be:	83 c4 14             	add    esp,0x14
c00062c1:	5b                   	pop    ebx
c00062c2:	5e                   	pop    esi
c00062c3:	c3                   	ret    

c00062c4 <f_unlink>:
c00062c4:	56                   	push   esi
c00062c5:	b9 02 00 00 00       	mov    ecx,0x2
c00062ca:	53                   	push   ebx
c00062cb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062dc:	e8 fa c1 ff ff       	call   c00024db <mount_volume>
c00062e1:	85 c0                	test   eax,eax
c00062e3:	0f 85 55 01 00 00    	jne    c000643e <f_unlink+0x17a>
c00062e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ed:	83 ec 0c             	sub    esp,0xc
c00062f0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f4:	68 60 04 00 00       	push   0x460
c00062f9:	e8 80 1f 00 00       	call   c000827e <ff_memalloc>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	89 c3                	mov    ebx,eax
c0006303:	b8 11 00 00 00       	mov    eax,0x11
c0006308:	85 db                	test   ebx,ebx
c000630a:	0f 84 2e 01 00 00    	je     c000643e <f_unlink+0x17a>
c0006310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006314:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000631a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006320:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006327:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632b:	e8 21 e9 ff ff       	call   c0004c51 <follow_path>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 f2 00 00 00    	jne    c000642a <f_unlink+0x166>
c0006338:	b8 06 00 00 00       	mov    eax,0x6
c000633d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006345:	0f 88 df 00 00 00    	js     c000642a <f_unlink+0x166>
c000634b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006350:	74 0a                	je     c000635c <f_unlink+0x98>
c0006352:	b8 07 00 00 00       	mov    eax,0x7
c0006357:	e9 ce 00 00 00       	jmp    c000642a <f_unlink+0x166>
c000635c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006360:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006364:	8a 02                	mov    al,BYTE PTR [edx]
c0006366:	3c 04                	cmp    al,0x4
c0006368:	75 12                	jne    c000637c <f_unlink+0xb8>
c000636a:	8d 42 10             	lea    eax,[edx+0x10]
c000636d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006371:	e8 a1 e8 ff ff       	call   c0004c17 <init_alloc_info.isra.2>
c0006376:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000637a:	eb 0e                	jmp    c000638a <f_unlink+0xc6>
c000637c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006383:	e8 3e e8 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c0006388:	89 c6                	mov    esi,eax
c000638a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638f:	75 12                	jne    c00063a3 <f_unlink+0xdf>
c0006391:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006395:	e8 94 d6 ff ff       	call   c0003a2e <dir_remove>
c000639a:	85 c0                	test   eax,eax
c000639c:	74 6c                	je     c000640a <f_unlink+0x146>
c000639e:	e9 87 00 00 00       	jmp    c000642a <f_unlink+0x166>
c00063a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ae:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b8:	75 21                	jne    c00063db <f_unlink+0x117>
c00063ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063d0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063db:	31 d2                	xor    edx,edx
c00063dd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e4:	e8 be cb ff ff       	call   c0002fa7 <dir_sdi>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	75 3d                	jne    c000642a <f_unlink+0x166>
c00063ed:	31 d2                	xor    edx,edx
c00063ef:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f6:	e8 bc d3 ff ff       	call   c00037b7 <dir_read>
c00063fb:	85 c0                	test   eax,eax
c00063fd:	0f 84 4f ff ff ff    	je     c0006352 <f_unlink+0x8e>
c0006403:	83 f8 04             	cmp    eax,0x4
c0006406:	75 22                	jne    c000642a <f_unlink+0x166>
c0006408:	eb 87                	jmp    c0006391 <f_unlink+0xcd>
c000640a:	85 f6                	test   esi,esi
c000640c:	75 0b                	jne    c0006419 <f_unlink+0x155>
c000640e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006412:	e8 3d df ff ff       	call   c0004354 <sync_fs>
c0006417:	eb 11                	jmp    c000642a <f_unlink+0x166>
c0006419:	31 c9                	xor    ecx,ecx
c000641b:	89 f2                	mov    edx,esi
c000641d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006421:	e8 78 ce ff ff       	call   c000329e <remove_chain>
c0006426:	85 c0                	test   eax,eax
c0006428:	74 e4                	je     c000640e <f_unlink+0x14a>
c000642a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642e:	83 ec 0c             	sub    esp,0xc
c0006431:	53                   	push   ebx
c0006432:	e8 5d 1e 00 00       	call   c0008294 <ff_memfree>
c0006437:	83 c4 10             	add    esp,0x10
c000643a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	c3                   	ret    

c0006447 <f_mkdir>:
c0006447:	57                   	push   edi
c0006448:	b9 02 00 00 00       	mov    ecx,0x2
c000644d:	56                   	push   esi
c000644e:	53                   	push   ebx
c000644f:	83 c4 80             	add    esp,0xffffff80
c0006452:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006456:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645d:	e8 79 c0 ff ff       	call   c00024db <mount_volume>
c0006462:	89 c3                	mov    ebx,eax
c0006464:	85 c0                	test   eax,eax
c0006466:	0f 85 fe 01 00 00    	jne    c000666a <f_mkdir+0x223>
c000646c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006470:	bb 11 00 00 00       	mov    ebx,0x11
c0006475:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006479:	83 ec 0c             	sub    esp,0xc
c000647c:	68 60 04 00 00       	push   0x460
c0006481:	e8 f8 1d 00 00       	call   c000827e <ff_memalloc>
c0006486:	83 c4 10             	add    esp,0x10
c0006489:	89 c7                	mov    edi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	0f 84 d7 01 00 00    	je     c000666a <f_mkdir+0x223>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ae:	e8 9e e7 ff ff       	call   c0004c51 <follow_path>
c00064b3:	89 c3                	mov    ebx,eax
c00064b5:	85 c0                	test   eax,eax
c00064b7:	74 3e                	je     c00064f7 <f_mkdir+0xb0>
c00064b9:	83 f8 04             	cmp    eax,0x4
c00064bc:	75 3e                	jne    c00064fc <f_mkdir+0xb5>
c00064be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c2:	31 d2                	xor    edx,edx
c00064c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cc:	e8 ce cb ff ff       	call   c000309f <create_chain>
c00064d1:	89 c6                	mov    esi,eax
c00064d3:	85 c0                	test   eax,eax
c00064d5:	74 0c                	je     c00064e3 <f_mkdir+0x9c>
c00064d7:	bb 02 00 00 00       	mov    ebx,0x2
c00064dc:	83 f8 01             	cmp    eax,0x1
c00064df:	74 07                	je     c00064e8 <f_mkdir+0xa1>
c00064e1:	eb 2a                	jmp    c000650d <f_mkdir+0xc6>
c00064e3:	bb 07 00 00 00       	mov    ebx,0x7
c00064e8:	31 c9                	xor    ecx,ecx
c00064ea:	89 f2                	mov    edx,esi
c00064ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f0:	e8 a9 cd ff ff       	call   c000329e <remove_chain>
c00064f5:	eb 05                	jmp    c00064fc <f_mkdir+0xb5>
c00064f7:	bb 08 00 00 00       	mov    ebx,0x8
c00064fc:	83 ec 0c             	sub    esp,0xc
c00064ff:	57                   	push   edi
c0006500:	e8 8f 1d 00 00       	call   c0008294 <ff_memfree>
c0006505:	83 c4 10             	add    esp,0x10
c0006508:	e9 5d 01 00 00       	jmp    c000666a <f_mkdir+0x223>
c000650d:	bb 01 00 00 00       	mov    ebx,0x1
c0006512:	83 f8 ff             	cmp    eax,0xffffffff
c0006515:	74 d1                	je     c00064e8 <f_mkdir+0xa1>
c0006517:	89 f2                	mov    edx,esi
c0006519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651d:	e8 c4 ce ff ff       	call   c00033e6 <dir_clear>
c0006522:	89 c3                	mov    ebx,eax
c0006524:	85 c0                	test   eax,eax
c0006526:	75 c0                	jne    c00064e8 <f_mkdir+0xa1>
c0006528:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652f:	74 69                	je     c000659a <f_mkdir+0x153>
c0006531:	b9 0b 00 00 00       	mov    ecx,0xb
c0006536:	83 c0 54             	add    eax,0x54
c0006539:	ba 20 00 00 00       	mov    edx,0x20
c000653e:	e8 9c b5 ff ff       	call   c0001adf <mem_set>
c0006543:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006547:	ba 00 00 21 50       	mov    edx,0x50210000
c000654c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006550:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006554:	83 c0 6a             	add    eax,0x6a
c0006557:	e8 65 b5 ff ff       	call   c0001ac1 <st_dword>
c000655c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006560:	89 f1                	mov    ecx,esi
c0006562:	8d 50 54             	lea    edx,[eax+0x54]
c0006565:	e8 85 e6 ff ff       	call   c0004bef <st_clust.isra.1>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	b9 20 00 00 00       	mov    ecx,0x20
c0006573:	8d 50 54             	lea    edx,[eax+0x54]
c0006576:	83 c0 74             	add    eax,0x74
c0006579:	e8 4c b5 ff ff       	call   c0001aca <mem_cpy>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006586:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000658a:	8d 50 74             	lea    edx,[eax+0x74]
c000658d:	e8 5d e6 ff ff       	call   c0004bef <st_clust.isra.1>
c0006592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006596:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659e:	e8 2f db ff ff       	call   c00040d2 <dir_register>
c00065a3:	89 c3                	mov    ebx,eax
c00065a5:	85 c0                	test   eax,eax
c00065a7:	0f 85 3b ff ff ff    	jne    c00064e8 <f_mkdir+0xa1>
c00065ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b4:	75 74                	jne    c000662a <f_mkdir+0x1e3>
c00065b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065be:	83 c0 0c             	add    eax,0xc
c00065c1:	e8 fb b4 ff ff       	call   c0001ac1 <st_dword>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	89 f2                	mov    edx,esi
c00065cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065cf:	83 c0 34             	add    eax,0x34
c00065d2:	e8 ea b4 ff ff       	call   c0001ac1 <st_dword>
c00065d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065db:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065df:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e2:	c1 e2 09             	shl    edx,0x9
c00065e5:	83 c0 38             	add    eax,0x38
c00065e8:	e8 d4 b4 ff ff       	call   c0001ac1 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f8:	c1 e2 09             	shl    edx,0x9
c00065fb:	83 c0 28             	add    eax,0x28
c00065fe:	e8 be b4 ff ff       	call   c0001ac1 <st_dword>
c0006603:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006607:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000660a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006611:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006615:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006619:	e8 8b d3 ff ff       	call   c00039a9 <store_xdir>
c000661e:	89 c3                	mov    ebx,eax
c0006620:	85 c0                	test   eax,eax
c0006622:	0f 85 d4 fe ff ff    	jne    c00064fc <f_mkdir+0xb5>
c0006628:	eb 30                	jmp    c000665a <f_mkdir+0x213>
c000662a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006633:	83 c0 16             	add    eax,0x16
c0006636:	e8 86 b4 ff ff       	call   c0001ac1 <st_dword>
c000663b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663f:	89 f1                	mov    ecx,esi
c0006641:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006645:	e8 a5 e5 ff ff       	call   c0004bef <st_clust.isra.1>
c000664a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006652:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006656:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000665a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665e:	e8 f1 dc ff ff       	call   c0004354 <sync_fs>
c0006663:	89 c3                	mov    ebx,eax
c0006665:	e9 92 fe ff ff       	jmp    c00064fc <f_mkdir+0xb5>
c000666a:	83 ec 80             	sub    esp,0xffffff80
c000666d:	89 d8                	mov    eax,ebx
c000666f:	5b                   	pop    ebx
c0006670:	5e                   	pop    esi
c0006671:	5f                   	pop    edi
c0006672:	c3                   	ret    

c0006673 <f_rename>:
c0006673:	55                   	push   ebp
c0006674:	57                   	push   edi
c0006675:	56                   	push   esi
c0006676:	53                   	push   ebx
c0006677:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006684:	e8 a4 b9 ff ff       	call   c000202d <get_ldnumber>
c0006689:	b9 02 00 00 00       	mov    ecx,0x2
c000668e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006692:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006699:	e8 3d be ff ff       	call   c00024db <mount_volume>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 b5 02 00 00    	jne    c000695b <f_rename+0x2e8>
c00066a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066aa:	83 ec 0c             	sub    esp,0xc
c00066ad:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b1:	68 60 04 00 00       	push   0x460
c00066b6:	e8 c3 1b 00 00       	call   c000827e <ff_memalloc>
c00066bb:	83 c4 10             	add    esp,0x10
c00066be:	89 c3                	mov    ebx,eax
c00066c0:	b8 11 00 00 00       	mov    eax,0x11
c00066c5:	85 db                	test   ebx,ebx
c00066c7:	0f 84 8e 02 00 00    	je     c000695b <f_rename+0x2e8>
c00066cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e8:	e8 64 e5 ff ff       	call   c0004c51 <follow_path>
c00066ed:	85 c0                	test   eax,eax
c00066ef:	0f 85 52 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c00066f5:	b8 06 00 00 00       	mov    eax,0x6
c00066fa:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006702:	0f 85 3f 02 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670f:	0f 85 05 01 00 00    	jne    c000681a <f_rename+0x1a7>
c0006715:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006718:	b9 40 00 00 00       	mov    ecx,0x40
c000671d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006721:	e8 a4 b3 ff ff       	call   c0001aca <mem_cpy>
c0006726:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 8f b3 ff ff       	call   c0001aca <mem_cpy>
c000673b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006742:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006749:	e8 03 e5 ff ff       	call   c0004c51 <follow_path>
c000674e:	85 c0                	test   eax,eax
c0006750:	75 29                	jne    c000677b <f_rename+0x108>
c0006752:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006756:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675d:	74 0a                	je     c0006769 <f_rename+0xf6>
c000675f:	b8 08 00 00 00       	mov    eax,0x8
c0006764:	e9 de 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c0006769:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006770:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006777:	75 e6                	jne    c000675f <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x111>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 c3 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 42 d9 ff ff       	call   c00040d2 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 af 01 00 00    	jne    c0006947 <f_rename+0x2d4>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a2:	89 c5                	mov    ebp,eax
c00067a4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067ab:	8d 46 24             	lea    eax,[esi+0x24]
c00067ae:	e8 98 b2 ff ff       	call   c0001a4b <ld_word>
c00067b3:	b9 40 00 00 00       	mov    ecx,0x40
c00067b8:	89 c7                	mov    edi,eax
c00067ba:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067be:	89 f0                	mov    eax,esi
c00067c0:	e8 05 b3 ff ff       	call   c0001aca <mem_cpy>
c00067c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c9:	89 e9                	mov    ecx,ebp
c00067cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ce:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067dc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067df:	0f b7 d7             	movzx  edx,di
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 24             	add    eax,0x24
c00067e8:	e8 d0 b2 ff ff       	call   c0001abd <st_word>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f4:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f7:	a8 10                	test   al,0x10
c00067f9:	75 06                	jne    c0006801 <f_rename+0x18e>
c00067fb:	83 c8 20             	or     eax,0x20
c00067fe:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 9c d1 ff ff       	call   c00039a9 <store_xdir>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 84 1c 01 00 00    	je     c0006931 <f_rename+0x2be>
c0006815:	e9 2d 01 00 00       	jmp    c0006947 <f_rename+0x2d4>
c000681a:	b9 20 00 00 00       	mov    ecx,0x20
c000681f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006826:	8d 44 24 18          	lea    eax,[esp+0x18]
c000682a:	e8 9b b2 ff ff       	call   c0001aca <mem_cpy>
c000682f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006834:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006838:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683f:	e8 86 b2 ff ff       	call   c0001aca <mem_cpy>
c0006844:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006852:	e8 fa e3 ff ff       	call   c0004c51 <follow_path>
c0006857:	85 c0                	test   eax,eax
c0006859:	75 27                	jne    c0006882 <f_rename+0x20f>
c000685b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006866:	0f 85 f3 fe ff ff    	jne    c000675f <f_rename+0xec>
c000686c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006873:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687a:	0f 85 df fe ff ff    	jne    c000675f <f_rename+0xec>
c0006880:	eb 09                	jmp    c000688b <f_rename+0x218>
c0006882:	83 f8 04             	cmp    eax,0x4
c0006885:	0f 85 bc 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000688b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006892:	e8 3b d8 ff ff       	call   c00040d2 <dir_register>
c0006897:	85 c0                	test   eax,eax
c0006899:	0f 85 a8 00 00 00    	jne    c0006947 <f_rename+0x2d4>
c000689f:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a6:	b9 13 00 00 00       	mov    ecx,0x13
c00068ab:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ae:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b2:	e8 13 b2 ff ff       	call   c0001aca <mem_cpy>
c00068b7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068bb:	a8 10                	test   al,0x10
c00068bd:	75 03                	jne    c00068c2 <f_rename+0x24f>
c00068bf:	83 c8 20             	or     eax,0x20
c00068c2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d1:	74 5e                	je     c0006931 <f_rename+0x2be>
c00068d3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068da:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068de:	74 51                	je     c0006931 <f_rename+0x2be>
c00068e0:	89 f2                	mov    edx,esi
c00068e2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e6:	8a 07                	mov    al,BYTE PTR [edi]
c00068e8:	e8 d9 e2 ff ff       	call   c0004bc6 <ld_clust.isra.0>
c00068ed:	89 c2                	mov    edx,eax
c00068ef:	89 f8                	mov    eax,edi
c00068f1:	e8 ee b3 ff ff       	call   c0001ce4 <clst2sect>
c00068f6:	89 c6                	mov    esi,eax
c00068f8:	89 d1                	mov    ecx,edx
c00068fa:	b8 02 00 00 00       	mov    eax,0x2
c00068ff:	09 f2                	or     edx,esi
c0006901:	74 44                	je     c0006947 <f_rename+0x2d4>
c0006903:	89 f2                	mov    edx,esi
c0006905:	89 f8                	mov    eax,edi
c0006907:	e8 1d b9 ff ff       	call   c0002229 <move_window>
c000690c:	85 c0                	test   eax,eax
c000690e:	75 37                	jne    c0006947 <f_rename+0x2d4>
c0006910:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006914:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006918:	75 17                	jne    c0006931 <f_rename+0x2be>
c000691a:	8d 50 74             	lea    edx,[eax+0x74]
c000691d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006924:	e8 c6 e2 ff ff       	call   c0004bef <st_clust.isra.1>
c0006929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006931:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006935:	e8 f4 d0 ff ff       	call   c0003a2e <dir_remove>
c000693a:	85 c0                	test   eax,eax
c000693c:	75 09                	jne    c0006947 <f_rename+0x2d4>
c000693e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006942:	e8 0d da ff ff       	call   c0004354 <sync_fs>
c0006947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694b:	83 ec 0c             	sub    esp,0xc
c000694e:	53                   	push   ebx
c000694f:	e8 40 19 00 00       	call   c0008294 <ff_memfree>
c0006954:	83 c4 10             	add    esp,0x10
c0006957:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006961:	5b                   	pop    ebx
c0006962:	5e                   	pop    esi
c0006963:	5f                   	pop    edi
c0006964:	5d                   	pop    ebp
c0006965:	c3                   	ret    

c0006966 <f_chmod>:
c0006966:	57                   	push   edi
c0006967:	b9 02 00 00 00       	mov    ecx,0x2
c000696c:	56                   	push   esi
c000696d:	53                   	push   ebx
c000696e:	83 ec 60             	sub    esp,0x60
c0006971:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006975:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006979:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006981:	e8 55 bb ff ff       	call   c00024db <mount_volume>
c0006986:	85 c0                	test   eax,eax
c0006988:	0f 85 af 00 00 00    	jne    c0006a3d <f_chmod+0xd7>
c000698e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006992:	83 ec 0c             	sub    esp,0xc
c0006995:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006999:	68 60 04 00 00       	push   0x460
c000699e:	e8 db 18 00 00       	call   c000827e <ff_memalloc>
c00069a3:	83 c4 10             	add    esp,0x10
c00069a6:	89 c6                	mov    esi,eax
c00069a8:	b8 11 00 00 00       	mov    eax,0x11
c00069ad:	85 f6                	test   esi,esi
c00069af:	0f 84 88 00 00 00    	je     c0006a3d <f_chmod+0xd7>
c00069b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069bf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cd:	e8 7f e2 ff ff       	call   c0004c51 <follow_path>
c00069d2:	85 c0                	test   eax,eax
c00069d4:	75 53                	jne    c0006a29 <f_chmod+0xc3>
c00069d6:	b8 06 00 00 00       	mov    eax,0x6
c00069db:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069e0:	75 47                	jne    c0006a29 <f_chmod+0xc3>
c00069e2:	89 f9                	mov    ecx,edi
c00069e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e8:	83 e1 27             	and    ecx,0x27
c00069eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ee:	75 1d                	jne    c0006a0d <f_chmod+0xa7>
c00069f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f6:	21 cb                	and    ebx,ecx
c00069f8:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fb:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a02:	e8 a2 cf ff ff       	call   c00039a9 <store_xdir>
c0006a07:	85 c0                	test   eax,eax
c0006a09:	75 1e                	jne    c0006a29 <f_chmod+0xc3>
c0006a0b:	eb 13                	jmp    c0006a20 <f_chmod+0xba>
c0006a0d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a11:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a14:	21 cb                	and    ebx,ecx
c0006a16:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a19:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a24:	e8 2b d9 ff ff       	call   c0004354 <sync_fs>
c0006a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2d:	83 ec 0c             	sub    esp,0xc
c0006a30:	56                   	push   esi
c0006a31:	e8 5e 18 00 00       	call   c0008294 <ff_memfree>
c0006a36:	83 c4 10             	add    esp,0x10
c0006a39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3d:	83 c4 60             	add    esp,0x60
c0006a40:	5b                   	pop    ebx
c0006a41:	5e                   	pop    esi
c0006a42:	5f                   	pop    edi
c0006a43:	c3                   	ret    

c0006a44 <f_utime>:
c0006a44:	56                   	push   esi
c0006a45:	b9 02 00 00 00       	mov    ecx,0x2
c0006a4a:	53                   	push   ebx
c0006a4b:	83 ec 64             	sub    esp,0x64
c0006a4e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a56:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a5a:	e8 7c ba ff ff       	call   c00024db <mount_volume>
c0006a5f:	85 c0                	test   eax,eax
c0006a61:	0f 85 b5 00 00 00    	jne    c0006b1c <f_utime+0xd8>
c0006a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a72:	68 60 04 00 00       	push   0x460
c0006a77:	e8 02 18 00 00       	call   c000827e <ff_memalloc>
c0006a7c:	83 c4 10             	add    esp,0x10
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	b8 11 00 00 00       	mov    eax,0x11
c0006a86:	85 db                	test   ebx,ebx
c0006a88:	0f 84 8e 00 00 00    	je     c0006b1c <f_utime+0xd8>
c0006a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a92:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a98:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9e:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 a6 e1 ff ff       	call   c0004c51 <follow_path>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 59                	jne    c0006b08 <f_utime+0xc4>
c0006aaf:	b8 06 00 00 00       	mov    eax,0x6
c0006ab4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab9:	75 4d                	jne    c0006b08 <f_utime+0xc4>
c0006abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac7:	c1 e2 10             	shl    edx,0x10
c0006aca:	09 ca                	or     edx,ecx
c0006acc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006acf:	75 1a                	jne    c0006aeb <f_utime+0xa7>
c0006ad1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad4:	83 c0 0c             	add    eax,0xc
c0006ad7:	e8 e5 af ff ff       	call   c0001ac1 <st_dword>
c0006adc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae0:	e8 c4 ce ff ff       	call   c00039a9 <store_xdir>
c0006ae5:	85 c0                	test   eax,eax
c0006ae7:	75 1f                	jne    c0006b08 <f_utime+0xc4>
c0006ae9:	eb 14                	jmp    c0006aff <f_utime+0xbb>
c0006aeb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aef:	83 c0 16             	add    eax,0x16
c0006af2:	e8 ca af ff ff       	call   c0001ac1 <st_dword>
c0006af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b03:	e8 4c d8 ff ff       	call   c0004354 <sync_fs>
c0006b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0c:	83 ec 0c             	sub    esp,0xc
c0006b0f:	53                   	push   ebx
c0006b10:	e8 7f 17 00 00       	call   c0008294 <ff_memfree>
c0006b15:	83 c4 10             	add    esp,0x10
c0006b18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1c:	83 c4 64             	add    esp,0x64
c0006b1f:	5b                   	pop    ebx
c0006b20:	5e                   	pop    esi
c0006b21:	c3                   	ret    

c0006b22 <f_getlabel>:
c0006b22:	55                   	push   ebp
c0006b23:	31 c9                	xor    ecx,ecx
c0006b25:	57                   	push   edi
c0006b26:	56                   	push   esi
c0006b27:	53                   	push   ebx
c0006b28:	83 ec 6c             	sub    esp,0x6c
c0006b2b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b36:	e8 a0 b9 ff ff       	call   c00024db <mount_volume>
c0006b3b:	89 c6                	mov    esi,eax
c0006b3d:	85 c0                	test   eax,eax
c0006b3f:	0f 85 c1 01 00 00    	jne    c0006d06 <f_getlabel+0x1e4>
c0006b45:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4d:	0f 84 5f 01 00 00    	je     c0006cb2 <f_getlabel+0x190>
c0006b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b57:	31 d2                	xor    edx,edx
c0006b59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b69:	e8 39 c4 ff ff       	call   c0002fa7 <dir_sdi>
c0006b6e:	85 c0                	test   eax,eax
c0006b70:	0f 85 2d 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b76:	ba 01 00 00 00       	mov    edx,0x1
c0006b7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7f:	e8 33 cc ff ff       	call   c00037b7 <dir_read>
c0006b84:	85 c0                	test   eax,eax
c0006b86:	0f 85 17 01 00 00    	jne    c0006ca3 <f_getlabel+0x181>
c0006b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b90:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b93:	74 09                	je     c0006b9e <f_getlabel+0x7c>
c0006b95:	31 db                	xor    ebx,ebx
c0006b97:	31 c9                	xor    ecx,ecx
c0006b99:	e9 c8 00 00 00       	jmp    c0006c66 <f_getlabel+0x144>
c0006b9e:	31 ed                	xor    ebp,ebp
c0006ba0:	31 db                	xor    ebx,ebx
c0006ba2:	31 ff                	xor    edi,edi
c0006ba4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bac:	39 fa                	cmp    edx,edi
c0006bae:	76 4b                	jbe    c0006bfb <f_getlabel+0xd9>
c0006bb0:	47                   	inc    edi
c0006bb1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb4:	01 d0                	add    eax,edx
c0006bb6:	e8 90 ae ff ff       	call   c0001a4b <ld_word>
c0006bbb:	66 85 ed             	test   bp,bp
c0006bbe:	75 0d                	jne    c0006bcd <f_getlabel+0xab>
c0006bc0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bcb:	76 28                	jbe    c0006bf5 <f_getlabel+0xd3>
c0006bcd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd4:	89 e9                	mov    ecx,ebp
c0006bd6:	01 da                	add    edx,ebx
c0006bd8:	c1 e1 10             	shl    ecx,0x10
c0006bdb:	0f b7 c0             	movzx  eax,ax
c0006bde:	09 c8                	or     eax,ecx
c0006be0:	b9 04 00 00 00       	mov    ecx,0x4
c0006be5:	e8 01 b0 ff ff       	call   c0001beb <put_utf>
c0006bea:	84 c0                	test   al,al
c0006bec:	74 0b                	je     c0006bf9 <f_getlabel+0xd7>
c0006bee:	0f b6 c0             	movzx  eax,al
c0006bf1:	01 c3                	add    ebx,eax
c0006bf3:	31 c0                	xor    eax,eax
c0006bf5:	89 c5                	mov    ebp,eax
c0006bf7:	eb ab                	jmp    c0006ba4 <f_getlabel+0x82>
c0006bf9:	31 db                	xor    ebx,ebx
c0006bfb:	66 85 ed             	test   bp,bp
c0006bfe:	74 02                	je     c0006c02 <f_getlabel+0xe0>
c0006c00:	31 db                	xor    ebx,ebx
c0006c02:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c09:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0d:	e9 a0 00 00 00       	jmp    c0006cb2 <f_getlabel+0x190>
c0006c12:	83 ff 0b             	cmp    edi,0xb
c0006c15:	74 11                	je     c0006c28 <f_getlabel+0x106>
c0006c17:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c20:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c23:	c1 e0 08             	shl    eax,0x8
c0006c26:	09 c2                	or     edx,eax
c0006c28:	0f b7 d2             	movzx  edx,dx
c0006c2b:	50                   	push   eax
c0006c2c:	50                   	push   eax
c0006c2d:	68 b5 01 00 00       	push   0x1b5
c0006c32:	52                   	push   edx
c0006c33:	e8 03 17 00 00       	call   c000833b <ff_oem2uni>
c0006c38:	83 c4 10             	add    esp,0x10
c0006c3b:	66 85 c0             	test   ax,ax
c0006c3e:	74 46                	je     c0006c86 <f_getlabel+0x164>
c0006c40:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c47:	0f b7 c0             	movzx  eax,ax
c0006c4a:	01 da                	add    edx,ebx
c0006c4c:	b9 04 00 00 00       	mov    ecx,0x4
c0006c51:	e8 95 af ff ff       	call   c0001beb <put_utf>
c0006c56:	84 c0                	test   al,al
c0006c58:	74 2c                	je     c0006c86 <f_getlabel+0x164>
c0006c5a:	0f b6 c0             	movzx  eax,al
c0006c5d:	01 c3                	add    ebx,eax
c0006c5f:	83 ff 0b             	cmp    edi,0xb
c0006c62:	74 24                	je     c0006c88 <f_getlabel+0x166>
c0006c64:	89 f9                	mov    ecx,edi
c0006c66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c6a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c72:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7b:	e8 9f ae ff ff       	call   c0001b1f <dbc_1st>
c0006c80:	85 c0                	test   eax,eax
c0006c82:	74 a4                	je     c0006c28 <f_getlabel+0x106>
c0006c84:	eb 8c                	jmp    c0006c12 <f_getlabel+0xf0>
c0006c86:	31 db                	xor    ebx,ebx
c0006c88:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c92:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c99:	74 17                	je     c0006cb2 <f_getlabel+0x190>
c0006c9b:	4b                   	dec    ebx
c0006c9c:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9f:	74 ee                	je     c0006c8f <f_getlabel+0x16d>
c0006ca1:	eb 0f                	jmp    c0006cb2 <f_getlabel+0x190>
c0006ca3:	83 f8 04             	cmp    eax,0x4
c0006ca6:	75 5c                	jne    c0006d04 <f_getlabel+0x1e2>
c0006ca8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006caf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cba:	74 4a                	je     c0006d06 <f_getlabel+0x1e4>
c0006cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc6:	e8 5e b5 ff ff       	call   c0002229 <move_window>
c0006ccb:	89 c6                	mov    esi,eax
c0006ccd:	85 c0                	test   eax,eax
c0006ccf:	75 35                	jne    c0006d06 <f_getlabel+0x1e4>
c0006cd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd5:	b8 43 00 00 00       	mov    eax,0x43
c0006cda:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdc:	80 f9 03             	cmp    cl,0x3
c0006cdf:	74 0f                	je     c0006cf0 <f_getlabel+0x1ce>
c0006ce1:	31 c0                	xor    eax,eax
c0006ce3:	80 f9 04             	cmp    cl,0x4
c0006ce6:	0f 94 c0             	sete   al
c0006ce9:	48                   	dec    eax
c0006cea:	83 e0 c3             	and    eax,0xffffffc3
c0006ced:	83 c0 64             	add    eax,0x64
c0006cf0:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf4:	e8 5f ad ff ff       	call   c0001a58 <ld_dword>
c0006cf9:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d00:	89 07                	mov    DWORD PTR [edi],eax
c0006d02:	eb 02                	jmp    c0006d06 <f_getlabel+0x1e4>
c0006d04:	89 c6                	mov    esi,eax
c0006d06:	83 c4 6c             	add    esp,0x6c
c0006d09:	89 f0                	mov    eax,esi
c0006d0b:	5b                   	pop    ebx
c0006d0c:	5e                   	pop    esi
c0006d0d:	5f                   	pop    edi
c0006d0e:	5d                   	pop    ebp
c0006d0f:	c3                   	ret    

c0006d10 <f_setlabel>:
c0006d10:	56                   	push   esi
c0006d11:	b9 02 00 00 00       	mov    ecx,0x2
c0006d16:	53                   	push   ebx
c0006d17:	83 ec 74             	sub    esp,0x74
c0006d1a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d25:	e8 b1 b7 ff ff       	call   c00024db <mount_volume>
c0006d2a:	89 c6                	mov    esi,eax
c0006d2c:	85 c0                	test   eax,eax
c0006d2e:	0f 85 41 02 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006d34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d38:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3b:	0f 85 8e 00 00 00    	jne    c0006dcf <f_setlabel+0xbf>
c0006d41:	b9 16 00 00 00       	mov    ecx,0x16
c0006d46:	31 d2                	xor    edx,edx
c0006d48:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4c:	31 db                	xor    ebx,ebx
c0006d4e:	e8 8c ad ff ff       	call   c0001adf <mem_set>
c0006d53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d5a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5d:	0f 86 0a 01 00 00    	jbe    c0006e6d <f_setlabel+0x15d>
c0006d63:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d6a:	e8 b6 ad ff ff       	call   c0001b25 <tchar2uni>
c0006d6f:	89 c6                	mov    esi,eax
c0006d71:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d76:	76 2a                	jbe    c0006da2 <f_setlabel+0x92>
c0006d78:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7b:	74 05                	je     c0006d82 <f_setlabel+0x72>
c0006d7d:	83 fb 09             	cmp    ebx,0x9
c0006d80:	76 0a                	jbe    c0006d8c <f_setlabel+0x7c>
c0006d82:	be 06 00 00 00       	mov    esi,0x6
c0006d87:	e9 e9 01 00 00       	jmp    c0006f75 <f_setlabel+0x265>
c0006d8c:	89 c2                	mov    edx,eax
c0006d8e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d92:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d95:	c1 ea 10             	shr    edx,0x10
c0006d98:	01 c8                	add    eax,ecx
c0006d9a:	43                   	inc    ebx
c0006d9b:	e8 1d ad ff ff       	call   c0001abd <st_word>
c0006da0:	eb 04                	jmp    c0006da6 <f_setlabel+0x96>
c0006da2:	85 c0                	test   eax,eax
c0006da4:	74 dc                	je     c0006d82 <f_setlabel+0x72>
c0006da6:	89 f2                	mov    edx,esi
c0006da8:	b8 b7 5e 02 c0       	mov    eax,0xc0025eb7
c0006dad:	e8 5b ad ff ff       	call   c0001b0d <chk_chr>
c0006db2:	85 c0                	test   eax,eax
c0006db4:	75 cc                	jne    c0006d82 <f_setlabel+0x72>
c0006db6:	83 fb 0a             	cmp    ebx,0xa
c0006db9:	77 c7                	ja     c0006d82 <f_setlabel+0x72>
c0006dbb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbe:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc2:	0f b7 d6             	movzx  edx,si
c0006dc5:	01 c8                	add    eax,ecx
c0006dc7:	43                   	inc    ebx
c0006dc8:	e8 f0 ac ff ff       	call   c0001abd <st_word>
c0006dcd:	eb 84                	jmp    c0006d53 <f_setlabel+0x43>
c0006dcf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd4:	ba 20 00 00 00       	mov    edx,0x20
c0006dd9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddd:	31 db                	xor    ebx,ebx
c0006ddf:	e8 fb ac ff ff       	call   c0001adf <mem_set>
c0006de4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006deb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006dee:	76 60                	jbe    c0006e50 <f_setlabel+0x140>
c0006df0:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df7:	e8 29 ad ff ff       	call   c0001b25 <tchar2uni>
c0006dfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e01:	0f 87 7b ff ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006e07:	83 ec 0c             	sub    esp,0xc
c0006e0a:	50                   	push   eax
c0006e0b:	e8 97 15 00 00       	call   c00083a7 <ff_wtoupper>
c0006e10:	5a                   	pop    edx
c0006e11:	59                   	pop    ecx
c0006e12:	68 b5 01 00 00       	push   0x1b5
c0006e17:	50                   	push   eax
c0006e18:	e8 8e 14 00 00       	call   c00082ab <ff_uni2oem>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	89 c6                	mov    esi,eax
c0006e22:	66 85 c0             	test   ax,ax
c0006e25:	0f 84 57 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e2b:	0f b7 d0             	movzx  edx,ax
c0006e2e:	b8 b0 5e 02 c0       	mov    eax,0xc0025eb0
c0006e33:	e8 d5 ac ff ff       	call   c0001b0d <chk_chr>
c0006e38:	85 c0                	test   eax,eax
c0006e3a:	0f 85 42 ff ff ff    	jne    c0006d82 <f_setlabel+0x72>
c0006e40:	66 81 fe ff 00       	cmp    si,0xff
c0006e45:	0f 87 14 01 00 00    	ja     c0006f5f <f_setlabel+0x24f>
c0006e4b:	e9 fa 00 00 00       	jmp    c0006f4a <f_setlabel+0x23a>
c0006e50:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e55:	0f 84 27 ff ff ff    	je     c0006d82 <f_setlabel+0x72>
c0006e5b:	85 db                	test   ebx,ebx
c0006e5d:	74 0e                	je     c0006e6d <f_setlabel+0x15d>
c0006e5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e62:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e67:	75 04                	jne    c0006e6d <f_setlabel+0x15d>
c0006e69:	89 c3                	mov    ebx,eax
c0006e6b:	eb ee                	jmp    c0006e5b <f_setlabel+0x14b>
c0006e6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e71:	31 d2                	xor    edx,edx
c0006e73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e77:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e83:	e8 1f c1 ff ff       	call   c0002fa7 <dir_sdi>
c0006e88:	89 c6                	mov    esi,eax
c0006e8a:	85 c0                	test   eax,eax
c0006e8c:	0f 85 e3 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006e92:	ba 01 00 00 00       	mov    edx,0x1
c0006e97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9b:	e8 17 c9 ff ff       	call   c00037b7 <dir_read>
c0006ea0:	85 c0                	test   eax,eax
c0006ea2:	75 21                	jne    c0006ec5 <f_setlabel+0x1b5>
c0006ea4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eac:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eaf:	74 5d                	je     c0006f0e <f_setlabel+0x1fe>
c0006eb1:	85 db                	test   ebx,ebx
c0006eb3:	74 0b                	je     c0006ec0 <f_setlabel+0x1b0>
c0006eb5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eba:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebe:	eb 70                	jmp    c0006f30 <f_setlabel+0x220>
c0006ec0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec3:	eb 70                	jmp    c0006f35 <f_setlabel+0x225>
c0006ec5:	83 f8 04             	cmp    eax,0x4
c0006ec8:	75 7c                	jne    c0006f46 <f_setlabel+0x236>
c0006eca:	85 db                	test   ebx,ebx
c0006ecc:	0f 84 a3 00 00 00    	je     c0006f75 <f_setlabel+0x265>
c0006ed2:	ba 01 00 00 00       	mov    edx,0x1
c0006ed7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006edb:	e8 51 ca ff ff       	call   c0003931 <dir_alloc>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 8b 00 00 00    	jne    c0006f75 <f_setlabel+0x265>
c0006eea:	31 d2                	xor    edx,edx
c0006eec:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef0:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef5:	e8 e5 ab ff ff       	call   c0001adf <mem_set>
c0006efa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f01:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f05:	75 18                	jne    c0006f1f <f_setlabel+0x20f>
c0006f07:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f0a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f11:	b9 16 00 00 00       	mov    ecx,0x16
c0006f16:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f1a:	83 c0 02             	add    eax,0x2
c0006f1d:	eb 9b                	jmp    c0006eba <f_setlabel+0x1aa>
c0006f1f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f23:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f28:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f30:	e8 95 ab ff ff       	call   c0001aca <mem_cpy>
c0006f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f39:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f41:	e8 0e d4 ff ff       	call   c0004354 <sync_fs>
c0006f46:	89 c6                	mov    esi,eax
c0006f48:	eb 2b                	jmp    c0006f75 <f_setlabel+0x265>
c0006f4a:	83 fb 0a             	cmp    ebx,0xa
c0006f4d:	0f 87 2f fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f53:	89 f0                	mov    eax,esi
c0006f55:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f59:	43                   	inc    ebx
c0006f5a:	e9 85 fe ff ff       	jmp    c0006de4 <f_setlabel+0xd4>
c0006f5f:	83 fb 09             	cmp    ebx,0x9
c0006f62:	0f 87 1a fe ff ff    	ja     c0006d82 <f_setlabel+0x72>
c0006f68:	89 f0                	mov    eax,esi
c0006f6a:	66 c1 e8 08          	shr    ax,0x8
c0006f6e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f72:	43                   	inc    ebx
c0006f73:	eb de                	jmp    c0006f53 <f_setlabel+0x243>
c0006f75:	89 f0                	mov    eax,esi
c0006f77:	83 c4 74             	add    esp,0x74
c0006f7a:	5b                   	pop    ebx
c0006f7b:	5e                   	pop    esi
c0006f7c:	c3                   	ret    

c0006f7d <f_forward>:
c0006f7d:	55                   	push   ebp
c0006f7e:	57                   	push   edi
c0006f7f:	56                   	push   esi
c0006f80:	53                   	push   ebx
c0006f81:	83 ec 2c             	sub    esp,0x2c
c0006f84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f88:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f92:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f96:	89 d8                	mov    eax,ebx
c0006f98:	e8 b1 b1 ff ff       	call   c000214e <validate>
c0006f9d:	89 c5                	mov    ebp,eax
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	0f 85 aa 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fa7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fab:	85 ed                	test   ebp,ebp
c0006fad:	0f 85 9e 01 00 00    	jne    c0007151 <f_forward+0x1d4>
c0006fb3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb7:	0f 84 8f 01 00 00    	je     c000714c <f_forward+0x1cf>
c0006fbd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fc0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc6:	bf 00 00 00 00       	mov    edi,0x0
c0006fcb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd2:	89 d1                	mov    ecx,edx
c0006fd4:	19 f9                	sbb    ecx,edi
c0006fd6:	0f 83 cf 00 00 00    	jae    c00070ab <f_forward+0x12e>
c0006fdc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fe0:	e9 c6 00 00 00       	jmp    c00070ab <f_forward+0x12e>
c0006fe5:	50                   	push   eax
c0006fe6:	50                   	push   eax
c0006fe7:	6a 00                	push   0x0
c0006fe9:	6a 00                	push   0x0
c0006feb:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fef:	83 c4 10             	add    esp,0x10
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 84 57 01 00 00    	je     c0007151 <f_forward+0x1d4>
c0006ffa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007001:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007004:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007008:	89 d7                	mov    edi,edx
c000700a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700d:	89 c6                	mov    esi,eax
c000700f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007013:	21 ce                	and    esi,ecx
c0007015:	89 c1                	mov    ecx,eax
c0007017:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701d:	0f 84 98 00 00 00    	je     c00070bb <f_forward+0x13e>
c0007023:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007027:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000702a:	89 c8                	mov    eax,ecx
c000702c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007030:	e8 af ac ff ff       	call   c0001ce4 <clst2sect>
c0007035:	89 d7                	mov    edi,edx
c0007037:	09 c7                	or     edi,eax
c0007039:	0f 84 9e 00 00 00    	je     c00070dd <f_forward+0x160>
c000703f:	31 ff                	xor    edi,edi
c0007041:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007044:	01 c6                	add    esi,eax
c0007046:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000704a:	11 d7                	adc    edi,edx
c000704c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007052:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007056:	39 fa                	cmp    edx,edi
c0007058:	0f 85 a2 00 00 00    	jne    c0007100 <f_forward+0x183>
c000705e:	39 f0                	cmp    eax,esi
c0007060:	0f 85 9a 00 00 00    	jne    c0007100 <f_forward+0x183>
c0007066:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007069:	ba 00 02 00 00       	mov    edx,0x200
c000706e:	25 ff 01 00 00       	and    eax,0x1ff
c0007073:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007077:	29 c2                	sub    edx,eax
c0007079:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707c:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707f:	39 d1                	cmp    ecx,edx
c0007081:	76 02                	jbe    c0007085 <f_forward+0x108>
c0007083:	89 d1                	mov    ecx,edx
c0007085:	8d 73 50             	lea    esi,[ebx+0x50]
c0007088:	52                   	push   edx
c0007089:	01 c6                	add    esi,eax
c000708b:	52                   	push   edx
c000708c:	51                   	push   ecx
c000708d:	56                   	push   esi
c000708e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007092:	83 c4 10             	add    esp,0x10
c0007095:	85 c0                	test   eax,eax
c0007097:	74 44                	je     c00070dd <f_forward+0x160>
c0007099:	31 ff                	xor    edi,edi
c000709b:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709e:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a5:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a9:	01 07                	add    DWORD PTR [edi],eax
c00070ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070b0:	0f 85 2f ff ff ff    	jne    c0006fe5 <f_forward+0x68>
c00070b6:	e9 96 00 00 00       	jmp    c0007151 <f_forward+0x1d4>
c00070bb:	85 f6                	test   esi,esi
c00070bd:	0f 85 60 ff ff ff    	jne    c0007023 <f_forward+0xa6>
c00070c3:	89 d7                	mov    edi,edx
c00070c5:	09 c7                	or     edi,eax
c00070c7:	75 05                	jne    c00070ce <f_forward+0x151>
c00070c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cc:	eb 0a                	jmp    c00070d8 <f_forward+0x15b>
c00070ce:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d1:	89 d8                	mov    eax,ebx
c00070d3:	e8 d9 bc ff ff       	call   c0002db1 <get_fat>
c00070d8:	83 f8 01             	cmp    eax,0x1
c00070db:	77 0b                	ja     c00070e8 <f_forward+0x16b>
c00070dd:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e1:	bd 02 00 00 00       	mov    ebp,0x2
c00070e6:	eb 69                	jmp    c0007151 <f_forward+0x1d4>
c00070e8:	83 f8 ff             	cmp    eax,0xffffffff
c00070eb:	75 0b                	jne    c00070f8 <f_forward+0x17b>
c00070ed:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f1:	bd 01 00 00 00       	mov    ebp,0x1
c00070f6:	eb 59                	jmp    c0007151 <f_forward+0x1d4>
c00070f8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fb:	e9 23 ff ff ff       	jmp    c0007023 <f_forward+0xa6>
c0007100:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007104:	79 20                	jns    c0007126 <f_forward+0x1a9>
c0007106:	83 ec 0c             	sub    esp,0xc
c0007109:	6a 01                	push   0x1
c000710b:	52                   	push   edx
c000710c:	50                   	push   eax
c000710d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007111:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007115:	50                   	push   eax
c0007116:	e8 fb a8 ff ff       	call   c0001a16 <disk_write>
c000711b:	83 c4 20             	add    esp,0x20
c000711e:	85 c0                	test   eax,eax
c0007120:	75 cb                	jne    c00070ed <f_forward+0x170>
c0007122:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	6a 01                	push   0x1
c000712b:	57                   	push   edi
c000712c:	56                   	push   esi
c000712d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007131:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007135:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007139:	50                   	push   eax
c000713a:	e8 c1 a8 ff ff       	call   c0001a00 <disk_read>
c000713f:	83 c4 20             	add    esp,0x20
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 84 1c ff ff ff    	je     c0007066 <f_forward+0xe9>
c000714a:	eb a1                	jmp    c00070ed <f_forward+0x170>
c000714c:	bd 07 00 00 00       	mov    ebp,0x7
c0007151:	83 c4 2c             	add    esp,0x2c
c0007154:	89 e8                	mov    eax,ebp
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	5f                   	pop    edi
c0007159:	5d                   	pop    ebp
c000715a:	c3                   	ret    

c000715b <f_mkfs>:
c000715b:	55                   	push   ebp
c000715c:	57                   	push   edi
c000715d:	56                   	push   esi
c000715e:	53                   	push   ebx
c000715f:	bb 0b 00 00 00       	mov    ebx,0xb
c0007164:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000716a:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007171:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007178:	e8 b0 ae ff ff       	call   c000202d <get_ldnumber>
c000717d:	85 c0                	test   eax,eax
c000717f:	0f 88 ec 10 00 00    	js     c0008271 <f_mkfs+0x1116>
c0007185:	8b 14 85 60 a5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5aa0]
c000718c:	85 d2                	test   edx,edx
c000718e:	74 03                	je     c0007193 <f_mkfs+0x38>
c0007190:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007193:	85 f6                	test   esi,esi
c0007195:	75 05                	jne    c000719c <f_mkfs+0x41>
c0007197:	be a0 5e 02 c0       	mov    esi,0xc0025ea0
c000719c:	83 ec 0c             	sub    esp,0xc
c000719f:	0f b6 c0             	movzx  eax,al
c00071a2:	bb 03 00 00 00       	mov    ebx,0x3
c00071a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071af:	e8 49 a8 ff ff       	call   c00019fd <disk_initialize>
c00071b4:	83 c4 10             	add    esp,0x10
c00071b7:	a8 01                	test   al,0x1
c00071b9:	0f 85 b2 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071bf:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c4:	a8 04                	test   al,0x4
c00071c6:	0f 85 a5 10 00 00    	jne    c0008271 <f_mkfs+0x1116>
c00071cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071cf:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d3:	85 c0                	test   eax,eax
c00071d5:	75 20                	jne    c00071f7 <f_mkfs+0x9c>
c00071d7:	51                   	push   ecx
c00071d8:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071dc:	50                   	push   eax
c00071dd:	6a 03                	push   0x3
c00071df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e3:	e8 44 a8 ff ff       	call   c0001a2c <disk_ioctl>
c00071e8:	83 c4 10             	add    esp,0x10
c00071eb:	85 c0                	test   eax,eax
c00071ed:	74 08                	je     c00071f7 <f_mkfs+0x9c>
c00071ef:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f7:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fb:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fe:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007203:	77 04                	ja     c0007209 <f_mkfs+0xae>
c0007205:	85 c2                	test   edx,eax
c0007207:	74 08                	je     c0007211 <f_mkfs+0xb6>
c0007209:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007211:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007214:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007218:	48                   	dec    eax
c0007219:	3c 01                	cmp    al,0x1
c000721b:	76 05                	jbe    c0007222 <f_mkfs+0xc7>
c000721d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007222:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007229:	48                   	dec    eax
c000722a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722f:	77 07                	ja     c0007238 <f_mkfs+0xdd>
c0007231:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007236:	74 08                	je     c0007240 <f_mkfs+0xe5>
c0007238:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007240:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007243:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007249:	77 07                	ja     c0007252 <f_mkfs+0xf7>
c000724b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724e:	85 d8                	test   eax,ebx
c0007250:	74 02                	je     c0007254 <f_mkfs+0xf9>
c0007252:	31 db                	xor    ebx,ebx
c0007254:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725f:	77 0a                	ja     c000726b <f_mkfs+0x110>
c0007261:	bb 11 00 00 00       	mov    ebx,0x11
c0007266:	e9 06 10 00 00       	jmp    c0008271 <f_mkfs+0x1116>
c000726b:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007272:	8b 36                	mov    esi,DWORD PTR [esi]
c0007274:	85 ed                	test   ebp,ebp
c0007276:	75 1e                	jne    c0007296 <f_mkfs+0x13b>
c0007278:	83 ec 0c             	sub    esp,0xc
c000727b:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007282:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007287:	50                   	push   eax
c0007288:	e8 f1 0f 00 00       	call   c000827e <ff_memalloc>
c000728d:	83 c4 10             	add    esp,0x10
c0007290:	89 c5                	mov    ebp,eax
c0007292:	85 c0                	test   eax,eax
c0007294:	74 cb                	je     c0007261 <f_mkfs+0x106>
c0007296:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729e:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a6:	52                   	push   edx
c00072a7:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072ab:	50                   	push   eax
c00072ac:	6a 01                	push   0x1
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	e8 75 a7 ff ff       	call   c0001a2c <disk_ioctl>
c00072b7:	83 c4 10             	add    esp,0x10
c00072ba:	85 c0                	test   eax,eax
c00072bc:	0f 85 4a 0f 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00072c2:	89 f1                	mov    ecx,esi
c00072c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cc:	83 e1 0f             	and    ecx,0xf
c00072cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d7:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072db:	83 e6 08             	and    esi,0x8
c00072de:	75 56                	jne    c0007336 <f_mkfs+0x1db>
c00072e0:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e4:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e8:	83 ff 00             	cmp    edi,0x0
c00072eb:	76 20                	jbe    c000730d <f_mkfs+0x1b2>
c00072ed:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f2:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072fa:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007300:	83 d7 ff             	adc    edi,0xffffffff
c0007303:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007307:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730b:	eb 21                	jmp    c000732e <f_mkfs+0x1d3>
c000730d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007312:	39 f2                	cmp    edx,esi
c0007314:	19 f8                	sbb    eax,edi
c0007316:	73 1e                	jae    c0007336 <f_mkfs+0x1db>
c0007318:	83 c6 c1             	add    esi,0xffffffc1
c000731b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007323:	83 d7 ff             	adc    edi,0xffffffff
c0007326:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000732a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007336:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000733a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007345:	31 c0                	xor    eax,eax
c0007347:	ba 7f 00 00 00       	mov    edx,0x7f
c000734c:	89 c7                	mov    edi,eax
c000734e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007351:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007355:	0f 83 c5 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c000735b:	89 df                	mov    edi,ebx
c000735d:	c1 ef 09             	shr    edi,0x9
c0007360:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007364:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736b:	c1 ef 09             	shr    edi,0x9
c000736e:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007373:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007377:	74 29                	je     c00073a2 <f_mkfs+0x247>
c0007379:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737f:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007384:	0f 97 c2             	seta   dl
c0007387:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000738a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738e:	0f 92 c0             	setb   al
c0007391:	08 c2                	or     dl,al
c0007393:	75 5b                	jne    c00073f0 <f_mkfs+0x295>
c0007395:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007399:	83 e0 07             	and    eax,0x7
c000739c:	3c 04                	cmp    al,0x4
c000739e:	74 50                	je     c00073f0 <f_mkfs+0x295>
c00073a0:	eb 1b                	jmp    c00073bd <f_mkfs+0x262>
c00073a2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a7:	0f 87 73 0a 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c00073ad:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b3:	76 08                	jbe    c00073bd <f_mkfs+0x262>
c00073b5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c1:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c5:	83 e0 01             	and    eax,0x1
c00073c8:	80 e1 02             	and    cl,0x2
c00073cb:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073cf:	74 0d                	je     c00073de <f_mkfs+0x283>
c00073d1:	84 c0                	test   al,al
c00073d3:	0f 84 53 09 00 00    	je     c0007d2c <f_mkfs+0xbd1>
c00073d9:	e9 12 08 00 00       	jmp    c0007bf0 <f_mkfs+0xa95>
c00073de:	bb 13 00 00 00       	mov    ebx,0x13
c00073e3:	84 c0                	test   al,al
c00073e5:	0f 85 05 08 00 00    	jne    c0007bf0 <f_mkfs+0xa95>
c00073eb:	e9 39 0e 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c00073f0:	31 c0                	xor    eax,eax
c00073f2:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f7:	89 c7                	mov    edi,eax
c00073f9:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fc:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007400:	0f 83 1a 0a 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c0007406:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740c:	77 39                	ja     c0007447 <f_mkfs+0x2ec>
c000740e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007413:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007422:	73 08                	jae    c000742c <f_mkfs+0x2d1>
c0007424:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007431:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007434:	b8 00 00 00 00       	mov    eax,0x0
c0007439:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743d:	73 08                	jae    c0007447 <f_mkfs+0x2ec>
c000743f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744f:	83 c0 20             	add    eax,0x20
c0007452:	83 d2 00             	adc    edx,0x0
c0007455:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007459:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007461:	31 d2                	xor    edx,edx
c0007463:	31 ff                	xor    edi,edi
c0007465:	52                   	push   edx
c0007466:	89 fb                	mov    ebx,edi
c0007468:	50                   	push   eax
c0007469:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007471:	e8 66 c0 01 00       	call   c00234dc <__udivdi3>
c0007476:	83 c4 10             	add    esp,0x10
c0007479:	c1 e0 02             	shl    eax,0x2
c000747c:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007480:	05 07 02 00 00       	add    eax,0x207
c0007485:	89 f1                	mov    ecx,esi
c0007487:	c1 e8 09             	shr    eax,0x9
c000748a:	83 c1 ff             	add    ecx,0xffffffff
c000748d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007491:	83 d3 ff             	adc    ebx,0xffffffff
c0007494:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007498:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749c:	31 d2                	xor    edx,edx
c000749e:	01 c8                	add    eax,ecx
c00074a0:	11 da                	adc    edx,ebx
c00074a2:	89 c1                	mov    ecx,eax
c00074a4:	f7 de                	neg    esi
c00074a6:	89 d0                	mov    eax,edx
c00074a8:	83 d7 00             	adc    edi,0x0
c00074ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074af:	f7 df                	neg    edi
c00074b1:	21 f1                	and    ecx,esi
c00074b3:	21 f8                	and    eax,edi
c00074b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c5:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cc:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074d0:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d4:	89 df                	mov    edi,ebx
c00074d6:	d1 ea                	shr    edx,1
c00074d8:	39 c1                	cmp    ecx,eax
c00074da:	19 d7                	sbb    edi,edx
c00074dc:	0f 83 3e 09 00 00    	jae    c0007e20 <f_mkfs+0xcc5>
c00074e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e6:	31 d2                	xor    edx,edx
c00074e8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074f0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fb:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074ff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007503:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007507:	83 f8 0f             	cmp    eax,0xf
c000750a:	0f 86 10 09 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007510:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007518:	0f 87 02 09 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c000751e:	31 d2                	xor    edx,edx
c0007520:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007524:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752c:	83 c0 07             	add    eax,0x7
c000752f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007537:	c1 e8 03             	shr    eax,0x3
c000753a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007541:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007545:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007549:	c1 e0 09             	shl    eax,0x9
c000754c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007550:	48                   	dec    eax
c0007551:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007555:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007559:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007561:	31 d2                	xor    edx,edx
c0007563:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007567:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007572:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007577:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007583:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007587:	31 ff                	xor    edi,edi
c0007589:	31 f6                	xor    esi,esi
c000758b:	31 db                	xor    ebx,ebx
c000758d:	85 ff                	test   edi,edi
c000758f:	74 05                	je     c0007596 <f_mkfs+0x43b>
c0007591:	4f                   	dec    edi
c0007592:	74 44                	je     c00075d8 <f_mkfs+0x47d>
c0007594:	eb 4f                	jmp    c00075e5 <f_mkfs+0x48a>
c0007596:	83 ec 0c             	sub    esp,0xc
c0007599:	0f b7 c3             	movzx  eax,bx
c000759c:	50                   	push   eax
c000759d:	e8 05 0e 00 00       	call   c00083a7 <ff_wtoupper>
c00075a2:	83 c4 10             	add    esp,0x10
c00075a5:	89 c1                	mov    ecx,eax
c00075a7:	8d 53 01             	lea    edx,[ebx+0x1]
c00075aa:	66 39 c3             	cmp    bx,ax
c00075ad:	75 3e                	jne    c00075ed <f_mkfs+0x492>
c00075af:	be 01 00 00 00       	mov    esi,0x1
c00075b4:	89 df                	mov    edi,ebx
c00075b6:	66 01 f7             	add    di,si
c00075b9:	75 07                	jne    c00075c2 <f_mkfs+0x467>
c00075bb:	83 fe 7f             	cmp    esi,0x7f
c00075be:	77 31                	ja     c00075f1 <f_mkfs+0x496>
c00075c0:	eb 16                	jmp    c00075d8 <f_mkfs+0x47d>
c00075c2:	83 ec 0c             	sub    esp,0xc
c00075c5:	0f b7 ff             	movzx  edi,di
c00075c8:	57                   	push   edi
c00075c9:	e8 d9 0d 00 00       	call   c00083a7 <ff_wtoupper>
c00075ce:	83 c4 10             	add    esp,0x10
c00075d1:	39 c7                	cmp    edi,eax
c00075d3:	75 e6                	jne    c00075bb <f_mkfs+0x460>
c00075d5:	46                   	inc    esi
c00075d6:	eb dc                	jmp    c00075b4 <f_mkfs+0x459>
c00075d8:	31 c0                	xor    eax,eax
c00075da:	89 d9                	mov    ecx,ebx
c00075dc:	4e                   	dec    esi
c00075dd:	0f 95 c0             	setne  al
c00075e0:	43                   	inc    ebx
c00075e1:	89 c7                	mov    edi,eax
c00075e3:	eb 14                	jmp    c00075f9 <f_mkfs+0x49e>
c00075e5:	89 f1                	mov    ecx,esi
c00075e7:	01 f3                	add    ebx,esi
c00075e9:	31 ff                	xor    edi,edi
c00075eb:	eb 0c                	jmp    c00075f9 <f_mkfs+0x49e>
c00075ed:	89 d3                	mov    ebx,edx
c00075ef:	eb 08                	jmp    c00075f9 <f_mkfs+0x49e>
c00075f1:	bf 02 00 00 00       	mov    edi,0x2
c00075f6:	83 c9 ff             	or     ecx,0xffffffff
c00075f9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007600:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007604:	0f b6 c1             	movzx  eax,cl
c0007607:	e8 3a a9 ff ff       	call   c0001f46 <xsum32>
c000760c:	66 c1 e9 08          	shr    cx,0x8
c0007610:	89 c2                	mov    edx,eax
c0007612:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007615:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007619:	0f b7 c1             	movzx  eax,cx
c000761c:	e8 25 a9 ff ff       	call   c0001f46 <xsum32>
c0007621:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007626:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000762a:	66 85 db             	test   bx,bx
c000762d:	74 1f                	je     c000764e <f_mkfs+0x4f3>
c000762f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007632:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007639:	83 c0 02             	add    eax,0x2
c000763c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007642:	39 c2                	cmp    edx,eax
c0007644:	74 08                	je     c000764e <f_mkfs+0x4f3>
c0007646:	89 04 24             	mov    DWORD PTR [esp],eax
c0007649:	e9 3f ff ff ff       	jmp    c000758d <f_mkfs+0x432>
c000764e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	05 01 02 00 00       	add    eax,0x201
c0007659:	c1 e8 09             	shr    eax,0x9
c000765c:	50                   	push   eax
c000765d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007661:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007665:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007669:	55                   	push   ebp
c000766a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766e:	e8 a3 a3 ff ff       	call   c0001a16 <disk_write>
c0007673:	83 c4 20             	add    esp,0x20
c0007676:	85 c0                	test   eax,eax
c0007678:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767b:	0f 85 8b 0b 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007681:	89 d0                	mov    eax,edx
c0007683:	31 d2                	xor    edx,edx
c0007685:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007689:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768d:	66 85 db             	test   bx,bx
c0007690:	74 04                	je     c0007696 <f_mkfs+0x53b>
c0007692:	31 c0                	xor    eax,eax
c0007694:	eb b0                	jmp    c0007646 <f_mkfs+0x4eb>
c0007696:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000769a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769e:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a2:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a8:	31 d2                	xor    edx,edx
c00076aa:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b9:	c1 eb 09             	shr    ebx,0x9
c00076bc:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c7:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076cf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d3:	8d 70 01             	lea    esi,[eax+0x1]
c00076d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076de:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e5:	31 d2                	xor    edx,edx
c00076e7:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ef:	89 c1                	mov    ecx,eax
c00076f1:	89 e8                	mov    eax,ebp
c00076f3:	e8 e7 a3 ff ff       	call   c0001adf <mem_set>
c00076f8:	31 c0                	xor    eax,eax
c00076fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fd:	76 10                	jbe    c000770f <f_mkfs+0x5b4>
c00076ff:	83 fe 07             	cmp    esi,0x7
c0007702:	76 0b                	jbe    c000770f <f_mkfs+0x5b4>
c0007704:	40                   	inc    eax
c0007705:	83 ee 08             	sub    esi,0x8
c0007708:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770d:	eb eb                	jmp    c00076fa <f_mkfs+0x59f>
c000770f:	b2 01                	mov    dl,0x1
c0007711:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007715:	85 f6                	test   esi,esi
c0007717:	74 0c                	je     c0007725 <f_mkfs+0x5ca>
c0007719:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771c:	76 07                	jbe    c0007725 <f_mkfs+0x5ca>
c000771e:	08 11                	or     BYTE PTR [ecx],dl
c0007720:	4e                   	dec    esi
c0007721:	d1 e2                	shl    edx,1
c0007723:	eb f0                	jmp    c0007715 <f_mkfs+0x5ba>
c0007725:	89 df                	mov    edi,ebx
c0007727:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772b:	76 04                	jbe    c0007731 <f_mkfs+0x5d6>
c000772d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007731:	83 ec 0c             	sub    esp,0xc
c0007734:	57                   	push   edi
c0007735:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007739:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773d:	55                   	push   ebp
c000773e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007742:	e8 cf a2 ff ff       	call   c0001a16 <disk_write>
c0007747:	83 c4 20             	add    esp,0x20
c000774a:	85 c0                	test   eax,eax
c000774c:	0f 85 ba 0a 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007752:	31 d2                	xor    edx,edx
c0007754:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007758:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775c:	29 fb                	sub    ebx,edi
c000775e:	0f 85 7a ff ff ff    	jne    c00076de <f_mkfs+0x583>
c0007764:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007768:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007770:	31 f6                	xor    esi,esi
c0007772:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007776:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007779:	31 d2                	xor    edx,edx
c000777b:	89 e8                	mov    eax,ebp
c000777d:	e8 5d a3 ff ff       	call   c0001adf <mem_set>
c0007782:	31 c9                	xor    ecx,ecx
c0007784:	85 db                	test   ebx,ebx
c0007786:	75 40                	jne    c00077c8 <f_mkfs+0x66d>
c0007788:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778d:	89 e8                	mov    eax,ebp
c000778f:	bb 02 00 00 00       	mov    ebx,0x2
c0007794:	e8 28 a3 ff ff       	call   c0001ac1 <st_dword>
c0007799:	8d 45 04             	lea    eax,[ebp+0x4]
c000779c:	83 ca ff             	or     edx,0xffffffff
c000779f:	e8 1d a3 ff ff       	call   c0001ac1 <st_dword>
c00077a4:	b9 08 00 00 00       	mov    ecx,0x8
c00077a9:	eb 1d                	jmp    c00077c8 <f_mkfs+0x66d>
c00077ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ae:	76 3b                	jbe    c00077eb <f_mkfs+0x690>
c00077b0:	43                   	inc    ebx
c00077b1:	83 fe 01             	cmp    esi,0x1
c00077b4:	89 da                	mov    edx,ebx
c00077b6:	77 03                	ja     c00077bb <f_mkfs+0x660>
c00077b8:	83 ca ff             	or     edx,0xffffffff
c00077bb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077bf:	4e                   	dec    esi
c00077c0:	e8 fc a2 ff ff       	call   c0001ac1 <st_dword>
c00077c5:	83 c1 04             	add    ecx,0x4
c00077c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cc:	85 f6                	test   esi,esi
c00077ce:	75 db                	jne    c00077ab <f_mkfs+0x650>
c00077d0:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d5:	77 14                	ja     c00077eb <f_mkfs+0x690>
c00077d7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077db:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e2:	85 f6                	test   esi,esi
c00077e4:	74 05                	je     c00077eb <f_mkfs+0x690>
c00077e6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e9:	77 dd                	ja     c00077c8 <f_mkfs+0x66d>
c00077eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f3:	39 cf                	cmp    edi,ecx
c00077f5:	76 02                	jbe    c00077f9 <f_mkfs+0x69e>
c00077f7:	89 cf                	mov    edi,ecx
c00077f9:	83 ec 0c             	sub    esp,0xc
c00077fc:	57                   	push   edi
c00077fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007801:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007805:	55                   	push   ebp
c0007806:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000780a:	e8 07 a2 ff ff       	call   c0001a16 <disk_write>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	85 c0                	test   eax,eax
c0007814:	0f 85 f2 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000781a:	31 d2                	xor    edx,edx
c000781c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007820:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007824:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007828:	0f 85 48 ff ff ff    	jne    c0007776 <f_mkfs+0x61b>
c000782e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007831:	31 d2                	xor    edx,edx
c0007833:	89 e8                	mov    eax,ebp
c0007835:	31 ff                	xor    edi,edi
c0007837:	e8 a3 a2 ff ff       	call   c0001adf <mem_set>
c000783c:	8d 45 34             	lea    eax,[ebp+0x34]
c000783f:	ba 02 00 00 00       	mov    edx,0x2
c0007844:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007848:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784c:	e8 70 a2 ff ff       	call   c0001ac1 <st_dword>
c0007851:	8d 45 38             	lea    eax,[ebp+0x38]
c0007854:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007858:	e8 64 a2 ff ff       	call   c0001ac1 <st_dword>
c000785d:	8d 45 44             	lea    eax,[ebp+0x44]
c0007860:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007864:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007868:	e8 54 a2 ff ff       	call   c0001ac1 <st_dword>
c000786d:	8d 45 54             	lea    eax,[ebp+0x54]
c0007870:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007874:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007878:	83 c2 02             	add    edx,0x2
c000787b:	e8 41 a2 ff ff       	call   c0001ac1 <st_dword>
c0007880:	8d 45 58             	lea    eax,[ebp+0x58]
c0007883:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007887:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788b:	e8 31 a2 ff ff       	call   c0001ac1 <st_dword>
c0007890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007894:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007899:	89 c6                	mov    esi,eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a6:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078aa:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ad:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b1:	39 cb                	cmp    ebx,ecx
c00078b3:	76 02                	jbe    c00078b7 <f_mkfs+0x75c>
c00078b5:	89 cb                	mov    ebx,ecx
c00078b7:	83 ec 0c             	sub    esp,0xc
c00078ba:	53                   	push   ebx
c00078bb:	57                   	push   edi
c00078bc:	56                   	push   esi
c00078bd:	55                   	push   ebp
c00078be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c2:	e8 4f a1 ff ff       	call   c0001a16 <disk_write>
c00078c7:	83 c4 20             	add    esp,0x20
c00078ca:	85 c0                	test   eax,eax
c00078cc:	0f 85 3a 09 00 00    	jne    c000820c <f_mkfs+0x10b1>
c00078d2:	31 d2                	xor    edx,edx
c00078d4:	b9 00 02 00 00       	mov    ecx,0x200
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 ff a1 ff ff       	call   c0001adf <mem_set>
c00078e0:	31 d2                	xor    edx,edx
c00078e2:	01 de                	add    esi,ebx
c00078e4:	11 d7                	adc    edi,edx
c00078e6:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e9:	75 bf                	jne    c00078aa <f_mkfs+0x74f>
c00078eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f3:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fb:	b9 00 02 00 00       	mov    ecx,0x200
c0007900:	31 d2                	xor    edx,edx
c0007902:	89 e8                	mov    eax,ebp
c0007904:	e8 d6 a1 ff ff       	call   c0001adf <mem_set>
c0007909:	b9 0b 00 00 00       	mov    ecx,0xb
c000790e:	ba 80 5f 02 c0       	mov    edx,0xc0025f80
c0007913:	89 e8                	mov    eax,ebp
c0007915:	e8 b0 a1 ff ff       	call   c0001aca <mem_cpy>
c000791a:	8d 45 40             	lea    eax,[ebp+0x40]
c000791d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007921:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007925:	e8 9a a1 ff ff       	call   c0001ac4 <st_qword>
c000792a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007931:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007935:	e8 8a a1 ff ff       	call   c0001ac4 <st_qword>
c000793a:	8d 45 50             	lea    eax,[ebp+0x50]
c000793d:	ba 20 00 00 00       	mov    edx,0x20
c0007942:	e8 7a a1 ff ff       	call   c0001ac1 <st_dword>
c0007947:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794f:	e8 6d a1 ff ff       	call   c0001ac1 <st_dword>
c0007954:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007958:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795c:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007960:	e8 5c a1 ff ff       	call   c0001ac1 <st_dword>
c0007965:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007968:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796c:	e8 50 a1 ff ff       	call   c0001ac1 <st_dword>
c0007971:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007975:	8d 50 02             	lea    edx,[eax+0x2]
c0007978:	8d 45 60             	lea    eax,[ebp+0x60]
c000797b:	e8 41 a1 ff ff       	call   c0001ac1 <st_dword>
c0007980:	8d 45 64             	lea    eax,[ebp+0x64]
c0007983:	ba 00 00 21 50       	mov    edx,0x50210000
c0007988:	e8 34 a1 ff ff       	call   c0001ac1 <st_dword>
c000798d:	8d 45 68             	lea    eax,[ebp+0x68]
c0007990:	ba 00 01 00 00       	mov    edx,0x100
c0007995:	e8 23 a1 ff ff       	call   c0001abd <st_word>
c000799a:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799e:	b8 0a 00 00 00       	mov    eax,0xa
c00079a3:	48                   	dec    eax
c00079a4:	74 05                	je     c00079ab <f_mkfs+0x850>
c00079a6:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a9:	eb f8                	jmp    c00079a3 <f_mkfs+0x848>
c00079ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079af:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b7:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079bb:	74 05                	je     c00079c2 <f_mkfs+0x867>
c00079bd:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079c0:	eb f5                	jmp    c00079b7 <f_mkfs+0x85c>
c00079c2:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c5:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079ca:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079d0:	31 db                	xor    ebx,ebx
c00079d2:	e8 e6 a0 ff ff       	call   c0001abd <st_word>
c00079d7:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e5:	e8 d3 a0 ff ff       	call   c0001abd <st_word>
c00079ea:	31 c9                	xor    ecx,ecx
c00079ec:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ef:	83 f8 01             	cmp    eax,0x1
c00079f2:	76 13                	jbe    c0007a07 <f_mkfs+0x8ac>
c00079f4:	83 f9 70             	cmp    ecx,0x70
c00079f7:	74 0e                	je     c0007a07 <f_mkfs+0x8ac>
c00079f9:	89 da                	mov    edx,ebx
c00079fb:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a00:	e8 41 a5 ff ff       	call   c0001f46 <xsum32>
c0007a05:	89 c3                	mov    ebx,eax
c0007a07:	41                   	inc    ecx
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 dc                	jne    c00079ec <f_mkfs+0x891>
c0007a10:	89 f0                	mov    eax,esi
c0007a12:	89 fa                	mov    edx,edi
c0007a14:	83 c0 01             	add    eax,0x1
c0007a17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1b:	83 d2 00             	adc    edx,0x0
c0007a1e:	83 ec 0c             	sub    esp,0xc
c0007a21:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a25:	6a 01                	push   0x1
c0007a27:	57                   	push   edi
c0007a28:	56                   	push   esi
c0007a29:	55                   	push   ebp
c0007a2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2e:	e8 e3 9f ff ff       	call   c0001a16 <disk_write>
c0007a33:	83 c4 20             	add    esp,0x20
c0007a36:	85 c0                	test   eax,eax
c0007a38:	0f 85 ce 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007a3e:	31 d2                	xor    edx,edx
c0007a40:	b9 00 02 00 00       	mov    ecx,0x200
c0007a45:	89 e8                	mov    eax,ebp
c0007a47:	e8 93 a0 ff ff       	call   c0001adf <mem_set>
c0007a4c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a54:	e8 64 a0 ff ff       	call   c0001abd <st_word>
c0007a59:	89 f0                	mov    eax,esi
c0007a5b:	89 fa                	mov    edx,edi
c0007a5d:	83 c0 09             	add    eax,0x9
c0007a60:	83 d2 00             	adc    edx,0x0
c0007a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a6a:	31 c9                	xor    ecx,ecx
c0007a6c:	41                   	inc    ecx
c0007a6d:	89 da                	mov    edx,ebx
c0007a6f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a74:	e8 cd a4 ff ff       	call   c0001f46 <xsum32>
c0007a79:	89 c3                	mov    ebx,eax
c0007a7b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a81:	75 e9                	jne    c0007a6c <f_mkfs+0x911>
c0007a83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8b:	83 c0 01             	add    eax,0x1
c0007a8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a92:	83 d2 00             	adc    edx,0x0
c0007a95:	83 ec 0c             	sub    esp,0xc
c0007a98:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9c:	6a 01                	push   0x1
c0007a9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa6:	55                   	push   ebp
c0007aa7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aab:	e8 66 9f ff ff       	call   c0001a16 <disk_write>
c0007ab0:	83 c4 20             	add    esp,0x20
c0007ab3:	85 c0                	test   eax,eax
c0007ab5:	0f 85 51 07 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abf:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac3:	75 09                	jne    c0007ace <f_mkfs+0x973>
c0007ac5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acc:	74 12                	je     c0007ae0 <f_mkfs+0x985>
c0007ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ade:	eb 8a                	jmp    c0007a6a <f_mkfs+0x90f>
c0007ae0:	31 d2                	xor    edx,edx
c0007ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae7:	89 e8                	mov    eax,ebp
c0007ae9:	e8 f1 9f ff ff       	call   c0001adf <mem_set>
c0007aee:	83 c6 0b             	add    esi,0xb
c0007af1:	83 d7 00             	adc    edi,0x0
c0007af4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afc:	31 c9                	xor    ecx,ecx
c0007afe:	41                   	inc    ecx
c0007aff:	89 da                	mov    edx,ebx
c0007b01:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b06:	e8 3b a4 ff ff       	call   c0001f46 <xsum32>
c0007b0b:	89 c3                	mov    ebx,eax
c0007b0d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b13:	75 e9                	jne    c0007afe <f_mkfs+0x9a3>
c0007b15:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b18:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1c:	83 c6 01             	add    esi,0x1
c0007b1f:	83 d7 00             	adc    edi,0x0
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	6a 01                	push   0x1
c0007b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2f:	55                   	push   ebp
c0007b30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b34:	e8 dd 9e ff ff       	call   c0001a16 <disk_write>
c0007b39:	83 c4 20             	add    esp,0x20
c0007b3c:	85 c0                	test   eax,eax
c0007b3e:	0f 85 c8 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007b44:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b48:	75 06                	jne    c0007b50 <f_mkfs+0x9f5>
c0007b4a:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4e:	74 09                	je     c0007b59 <f_mkfs+0x9fe>
c0007b50:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b53:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b57:	eb a3                	jmp    c0007afc <f_mkfs+0x9a1>
c0007b59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5d:	89 da                	mov    edx,ebx
c0007b5f:	01 e8                	add    eax,ebp
c0007b61:	e8 5b 9f ff ff       	call   c0001ac1 <st_dword>
c0007b66:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6b:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b73:	75 e4                	jne    c0007b59 <f_mkfs+0x9fe>
c0007b75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7c:	83 c6 02             	add    esi,0x2
c0007b7f:	83 d7 00             	adc    edi,0x0
c0007b82:	83 ec 0c             	sub    esp,0xc
c0007b85:	6a 01                	push   0x1
c0007b87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8f:	55                   	push   ebp
c0007b90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b94:	e8 7d 9e ff ff       	call   c0001a16 <disk_write>
c0007b99:	83 c4 20             	add    esp,0x20
c0007b9c:	85 c0                	test   eax,eax
c0007b9e:	0f 85 68 06 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007ba4:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba9:	74 0d                	je     c0007bb8 <f_mkfs+0xa5d>
c0007bab:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb3:	e9 43 fd ff ff       	jmp    c00078fb <f_mkfs+0x7a0>
c0007bb8:	b1 07                	mov    cl,0x7
c0007bba:	e9 e3 05 00 00       	jmp    c00081a2 <f_mkfs+0x1047>
c0007bbf:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc4:	0f 85 4f 02 00 00    	jne    c0007e19 <f_mkfs+0xcbe>
c0007bca:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bcf:	0f 86 22 02 00 00    	jbe    c0007df7 <f_mkfs+0xc9c>
c0007bd5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bda:	0f 85 81 06 00 00    	jne    c0008261 <f_mkfs+0x1106>
c0007be0:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be7:	83 f8 40             	cmp    eax,0x40
c0007bea:	0f 87 51 06 00 00    	ja     c0008241 <f_mkfs+0x10e6>
c0007bf0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf4:	85 ff                	test   edi,edi
c0007bf6:	75 1c                	jne    c0007c14 <f_mkfs+0xab9>
c0007bf8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfb:	ba 80 5e 02 c0       	mov    edx,0xc0025e80
c0007c00:	c1 e9 0c             	shr    ecx,0xc
c0007c03:	bf 01 00 00 00       	mov    edi,0x1
c0007c08:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0b:	66 85 c0             	test   ax,ax
c0007c0e:	0f 85 95 01 00 00    	jne    c0007da9 <f_mkfs+0xc4e>
c0007c14:	31 d2                	xor    edx,edx
c0007c16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c19:	f7 f7                	div    edi
c0007c1b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c20:	0f 86 95 01 00 00    	jbe    c0007dbb <f_mkfs+0xc60>
c0007c26:	83 c0 02             	add    eax,0x2
c0007c29:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2e:	01 c0                	add    eax,eax
c0007c30:	05 ff 01 00 00       	add    eax,0x1ff
c0007c35:	be 01 00 00 00       	mov    esi,0x1
c0007c3a:	c1 e8 09             	shr    eax,0x9
c0007c3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c45:	c1 e0 05             	shl    eax,0x5
c0007c48:	c1 e8 09             	shr    eax,0x9
c0007c4b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4f:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c5a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5e:	89 f0                	mov    eax,esi
c0007c60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c64:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c74:	31 d2                	xor    edx,edx
c0007c76:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7b:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7f:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c83:	31 db                	xor    ebx,ebx
c0007c85:	01 c8                	add    eax,ecx
c0007c87:	11 da                	adc    edx,ebx
c0007c89:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c91:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c95:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c99:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9d:	f7 da                	neg    edx
c0007c9f:	21 d1                	and    ecx,edx
c0007ca1:	29 d9                	sub    ecx,ebx
c0007ca3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca8:	0f 85 20 01 00 00    	jne    c0007dce <f_mkfs+0xc73>
c0007cae:	31 db                	xor    ebx,ebx
c0007cb0:	01 ce                	add    esi,ecx
c0007cb2:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb6:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cba:	31 d2                	xor    edx,edx
c0007cbc:	89 f8                	mov    eax,edi
c0007cbe:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc2:	c1 e0 04             	shl    eax,0x4
c0007cc5:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc9:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccd:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd1:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd5:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd8:	19 d3                	sbb    ebx,edx
c0007cda:	0f 82 40 01 00 00    	jb     c0007e20 <f_mkfs+0xcc5>
c0007ce0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce7:	89 c8                	mov    eax,ecx
c0007ce9:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cee:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf2:	29 f0                	sub    eax,esi
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	f7 f7                	div    edi
c0007cfa:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cff:	89 c3                	mov    ebx,eax
c0007d01:	0f 85 b8 fe ff ff    	jne    c0007bbf <f_mkfs+0xa64>
c0007d07:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0c:	0f 87 1d 01 00 00    	ja     c0007e2f <f_mkfs+0xcd4>
c0007d12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d17:	0f 85 03 01 00 00    	jne    c0007e20 <f_mkfs+0xcc5>
c0007d1d:	83 ff 01             	cmp    edi,0x1
c0007d20:	0f 86 fa 00 00 00    	jbe    c0007e20 <f_mkfs+0xcc5>
c0007d26:	d1 ef                	shr    edi,1
c0007d28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d30:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d33:	85 db                	test   ebx,ebx
c0007d35:	75 2d                	jne    c0007d64 <f_mkfs+0xc09>
c0007d37:	89 cb                	mov    ebx,ecx
c0007d39:	ba 90 5e 02 c0       	mov    edx,0xc0025e90
c0007d3e:	c1 eb 11             	shr    ebx,0x11
c0007d41:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d49:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4c:	66 85 c0             	test   ax,ax
c0007d4f:	74 11                	je     c0007d62 <f_mkfs+0xc07>
c0007d51:	83 c2 02             	add    edx,0x2
c0007d54:	39 d8                	cmp    eax,ebx
c0007d56:	77 0a                	ja     c0007d62 <f_mkfs+0xc07>
c0007d58:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5c:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d60:	eb e7                	jmp    c0007d49 <f_mkfs+0xbee>
c0007d62:	31 db                	xor    ebx,ebx
c0007d64:	31 d2                	xor    edx,edx
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6c:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d73:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d78:	c1 ea 09             	shr    edx,0x9
c0007d7b:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d80:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d84:	0f 87 96 00 00 00    	ja     c0007e20 <f_mkfs+0xcc5>
c0007d8a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8e:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d96:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d9a:	be 20 00 00 00       	mov    esi,0x20
c0007d9f:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da4:	e9 a6 fe ff ff       	jmp    c0007c4f <f_mkfs+0xaf4>
c0007da9:	83 c2 02             	add    edx,0x2
c0007dac:	39 c8                	cmp    eax,ecx
c0007dae:	0f 87 60 fe ff ff    	ja     c0007c14 <f_mkfs+0xab9>
c0007db4:	01 ff                	add    edi,edi
c0007db6:	e9 4d fe ff ff       	jmp    c0007c08 <f_mkfs+0xaad>
c0007dbb:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbe:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc3:	40                   	inc    eax
c0007dc4:	d1 e8                	shr    eax,1
c0007dc6:	83 c0 03             	add    eax,0x3
c0007dc9:	e9 62 fe ff ff       	jmp    c0007c30 <f_mkfs+0xad5>
c0007dce:	31 d2                	xor    edx,edx
c0007dd0:	89 c8                	mov    eax,ecx
c0007dd2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd6:	85 d2                	test   edx,edx
c0007dd8:	74 0c                	je     c0007de6 <f_mkfs+0xc8b>
c0007dda:	49                   	dec    ecx
c0007ddb:	46                   	inc    esi
c0007ddc:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de1:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de6:	89 c8                	mov    eax,ecx
c0007de8:	31 d2                	xor    edx,edx
c0007dea:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dee:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df2:	e9 c3 fe ff ff       	jmp    c0007cba <f_mkfs+0xb5f>
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	77 31                	ja     c0007e2f <f_mkfs+0xcd4>
c0007dfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e03:	75 1b                	jne    c0007e20 <f_mkfs+0xcc5>
c0007e05:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0c:	3d 80 00 00 00       	cmp    eax,0x80
c0007e11:	0f 86 d9 fd ff ff    	jbe    c0007bf0 <f_mkfs+0xa95>
c0007e17:	eb 07                	jmp    c0007e20 <f_mkfs+0xcc5>
c0007e19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1e:	76 0a                	jbe    c0007e2a <f_mkfs+0xccf>
c0007e20:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e25:	e9 ff 03 00 00       	jmp    c0008229 <f_mkfs+0x10ce>
c0007e2a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2f:	31 d2                	xor    edx,edx
c0007e31:	b9 00 02 00 00       	mov    ecx,0x200
c0007e36:	89 e8                	mov    eax,ebp
c0007e38:	e8 a2 9c ff ff       	call   c0001adf <mem_set>
c0007e3d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e42:	ba a2 5f 02 c0       	mov    edx,0xc0025fa2
c0007e47:	89 e8                	mov    eax,ebp
c0007e49:	e8 7c 9c ff ff       	call   c0001aca <mem_cpy>
c0007e4e:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e51:	ba 00 02 00 00       	mov    edx,0x200
c0007e56:	e8 62 9c ff ff       	call   c0001abd <st_word>
c0007e5b:	89 f8                	mov    eax,edi
c0007e5d:	0f b7 d6             	movzx  edx,si
c0007e60:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e63:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e66:	e8 52 9c ff ff       	call   c0001abd <st_word>
c0007e6b:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e74:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e77:	75 08                	jne    c0007e81 <f_mkfs+0xd26>
c0007e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e81:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e88:	e8 30 9c ff ff       	call   c0001abd <st_word>
c0007e8d:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e92:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e96:	39 d0                	cmp    eax,edx
c0007e98:	b8 00 00 00 00       	mov    eax,0x0
c0007e9d:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea1:	72 0a                	jb     c0007ead <f_mkfs+0xd52>
c0007ea3:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea6:	e8 12 9c ff ff       	call   c0001abd <st_word>
c0007eab:	eb 08                	jmp    c0007eb5 <f_mkfs+0xd5a>
c0007ead:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eb0:	e8 0c 9c ff ff       	call   c0001ac1 <st_dword>
c0007eb5:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb8:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebd:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec1:	e8 f7 9b ff ff       	call   c0001abd <st_word>
c0007ec6:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec9:	ba ff 00 00 00       	mov    edx,0xff
c0007ece:	e8 ea 9b ff ff       	call   c0001abd <st_word>
c0007ed3:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007eda:	e8 e2 9b ff ff       	call   c0001ac1 <st_dword>
c0007edf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee4:	75 57                	jne    c0007f3d <f_mkfs+0xde2>
c0007ee6:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eee:	e8 ce 9b ff ff       	call   c0001ac1 <st_dword>
c0007ef3:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efa:	e8 c2 9b ff ff       	call   c0001ac1 <st_dword>
c0007eff:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f02:	ba 02 00 00 00       	mov    edx,0x2
c0007f07:	e8 b5 9b ff ff       	call   c0001ac1 <st_dword>
c0007f0c:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0f:	ba 01 00 00 00       	mov    edx,0x1
c0007f14:	e8 a4 9b ff ff       	call   c0001abd <st_word>
c0007f19:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1c:	ba 06 00 00 00       	mov    edx,0x6
c0007f21:	e8 97 9b ff ff       	call   c0001abd <st_word>
c0007f26:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f2a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2e:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f31:	b9 13 00 00 00       	mov    ecx,0x13
c0007f36:	ba ae 5f 02 c0       	mov    edx,0xc0025fae
c0007f3b:	eb 2f                	jmp    c0007f6c <f_mkfs+0xe11>
c0007f3d:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f40:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f45:	e8 77 9b ff ff       	call   c0001ac1 <st_dword>
c0007f4a:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f52:	e8 66 9b ff ff       	call   c0001abd <st_word>
c0007f57:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5b:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5f:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f62:	b9 13 00 00 00       	mov    ecx,0x13
c0007f67:	ba c2 5f 02 c0       	mov    edx,0xc0025fc2
c0007f6c:	e8 59 9b ff ff       	call   c0001aca <mem_cpy>
c0007f71:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f77:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7c:	89 f0                	mov    eax,esi
c0007f7e:	e8 3a 9b ff ff       	call   c0001abd <st_word>
c0007f83:	83 ec 0c             	sub    esp,0xc
c0007f86:	6a 01                	push   0x1
c0007f88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f90:	55                   	push   ebp
c0007f91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f95:	e8 7c 9a ff ff       	call   c0001a16 <disk_write>
c0007f9a:	83 c4 20             	add    esp,0x20
c0007f9d:	85 c0                	test   eax,eax
c0007f9f:	0f 85 67 02 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0007fa5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007faa:	0f 85 b7 00 00 00    	jne    c0008067 <f_mkfs+0xf0c>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	6a 01                	push   0x1
c0007fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbd:	83 c0 06             	add    eax,0x6
c0007fc0:	83 d2 00             	adc    edx,0x0
c0007fc3:	52                   	push   edx
c0007fc4:	50                   	push   eax
c0007fc5:	55                   	push   ebp
c0007fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fca:	e8 47 9a ff ff       	call   c0001a16 <disk_write>
c0007fcf:	83 c4 20             	add    esp,0x20
c0007fd2:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd7:	31 d2                	xor    edx,edx
c0007fd9:	89 e8                	mov    eax,ebp
c0007fdb:	e8 ff 9a ff ff       	call   c0001adf <mem_set>
c0007fe0:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe5:	89 e8                	mov    eax,ebp
c0007fe7:	e8 d5 9a ff ff       	call   c0001ac1 <st_dword>
c0007fec:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff2:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff7:	e8 c5 9a ff ff       	call   c0001ac1 <st_dword>
c0007ffc:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fff:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008005:	e8 b7 9a ff ff       	call   c0001ac1 <st_dword>
c000800a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008010:	ba 02 00 00 00       	mov    edx,0x2
c0008015:	e8 a7 9a ff ff       	call   c0001ac1 <st_dword>
c000801a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801f:	89 f0                	mov    eax,esi
c0008021:	e8 97 9a ff ff       	call   c0001abd <st_word>
c0008026:	83 ec 0c             	sub    esp,0xc
c0008029:	6a 01                	push   0x1
c000802b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008033:	83 c0 07             	add    eax,0x7
c0008036:	83 d2 00             	adc    edx,0x0
c0008039:	52                   	push   edx
c000803a:	50                   	push   eax
c000803b:	55                   	push   ebp
c000803c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008040:	e8 d1 99 ff ff       	call   c0001a16 <disk_write>
c0008045:	83 c4 14             	add    esp,0x14
c0008048:	6a 01                	push   0x1
c000804a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008052:	83 c0 01             	add    eax,0x1
c0008055:	83 d2 00             	adc    edx,0x0
c0008058:	52                   	push   edx
c0008059:	50                   	push   eax
c000805a:	55                   	push   ebp
c000805b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805f:	e8 b2 99 ff ff       	call   c0001a16 <disk_write>
c0008064:	83 c4 20             	add    esp,0x20
c0008067:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806e:	31 d2                	xor    edx,edx
c0008070:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008076:	31 db                	xor    ebx,ebx
c0008078:	89 e8                	mov    eax,ebp
c000807a:	e8 60 9a ff ff       	call   c0001adf <mem_set>
c000807f:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008084:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808b:	0f 94 c3             	sete   bl
c000808e:	4b                   	dec    ebx
c000808f:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008095:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a0:	75 21                	jne    c00080c3 <f_mkfs+0xf68>
c00080a2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 13 9a ff ff       	call   c0001ac1 <st_dword>
c00080ae:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b1:	83 ca ff             	or     edx,0xffffffff
c00080b4:	e8 08 9a ff ff       	call   c0001ac1 <st_dword>
c00080b9:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bc:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c1:	eb 04                	jmp    c00080c7 <f_mkfs+0xf6c>
c00080c3:	89 da                	mov    edx,ebx
c00080c5:	89 e8                	mov    eax,ebp
c00080c7:	e8 f5 99 ff ff       	call   c0001ac1 <st_dword>
c00080cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080dc:	39 ce                	cmp    esi,ecx
c00080de:	76 02                	jbe    c00080e2 <f_mkfs+0xf87>
c00080e0:	89 ce                	mov    esi,ecx
c00080e2:	83 ec 0c             	sub    esp,0xc
c00080e5:	56                   	push   esi
c00080e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ee:	55                   	push   ebp
c00080ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f3:	e8 1e 99 ff ff       	call   c0001a16 <disk_write>
c00080f8:	83 c4 20             	add    esp,0x20
c00080fb:	85 c0                	test   eax,eax
c00080fd:	0f 85 09 01 00 00    	jne    c000820c <f_mkfs+0x10b1>
c0008103:	31 d2                	xor    edx,edx
c0008105:	b9 00 02 00 00       	mov    ecx,0x200
c000810a:	89 e8                	mov    eax,ebp
c000810c:	e8 ce 99 ff ff       	call   c0001adf <mem_set>
c0008111:	31 d2                	xor    edx,edx
c0008113:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008117:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811f:	75 b3                	jne    c00080d4 <f_mkfs+0xf79>
c0008121:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008124:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812b:	40                   	inc    eax
c000812c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008130:	0f 87 65 ff ff ff    	ja     c000809b <f_mkfs+0xf40>
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 04                	je     c0008141 <f_mkfs+0xfe6>
c000813d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008141:	89 fb                	mov    ebx,edi
c0008143:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008147:	76 04                	jbe    c000814d <f_mkfs+0xff2>
c0008149:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814d:	83 ec 0c             	sub    esp,0xc
c0008150:	53                   	push   ebx
c0008151:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008155:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008159:	55                   	push   ebp
c000815a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815e:	e8 b3 98 ff ff       	call   c0001a16 <disk_write>
c0008163:	83 c4 20             	add    esp,0x20
c0008166:	85 c0                	test   eax,eax
c0008168:	0f 85 9e 00 00 00    	jne    c000820c <f_mkfs+0x10b1>
c000816e:	31 d2                	xor    edx,edx
c0008170:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008174:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008178:	29 df                	sub    edi,ebx
c000817a:	75 c5                	jne    c0008141 <f_mkfs+0xfe6>
c000817c:	b1 0c                	mov    cl,0xc
c000817e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008183:	74 1d                	je     c00081a2 <f_mkfs+0x1047>
c0008185:	b8 ff ff 00 00       	mov    eax,0xffff
c000818a:	b1 06                	mov    cl,0x6
c000818c:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008190:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008194:	72 0c                	jb     c00081a2 <f_mkfs+0x1047>
c0008196:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819b:	0f 94 c1             	sete   cl
c000819e:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a2:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a7:	75 4c                	jne    c00081f5 <f_mkfs+0x109a>
c00081a9:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ad:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081bf:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081ca:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d5:	0f b6 c9             	movzx  ecx,cl
c00081d8:	83 ec 0c             	sub    esp,0xc
c00081db:	55                   	push   ebp
c00081dc:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e7:	e8 2f c2 ff ff       	call   c000441b <create_partition>
c00081ec:	83 c4 10             	add    esp,0x10
c00081ef:	89 c3                	mov    ebx,eax
c00081f1:	85 c0                	test   eax,eax
c00081f3:	75 34                	jne    c0008229 <f_mkfs+0x10ce>
c00081f5:	31 db                	xor    ebx,ebx
c00081f7:	50                   	push   eax
c00081f8:	6a 00                	push   0x0
c00081fa:	6a 00                	push   0x0
c00081fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008200:	e8 27 98 ff ff       	call   c0001a2c <disk_ioctl>
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	85 c0                	test   eax,eax
c000820a:	74 1d                	je     c0008229 <f_mkfs+0x10ce>
c000820c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008214:	75 0c                	jne    c0008222 <f_mkfs+0x10c7>
c0008216:	83 ec 0c             	sub    esp,0xc
c0008219:	55                   	push   ebp
c000821a:	e8 75 00 00 00       	call   c0008294 <ff_memfree>
c000821f:	83 c4 10             	add    esp,0x10
c0008222:	bb 01 00 00 00       	mov    ebx,0x1
c0008227:	eb 48                	jmp    c0008271 <f_mkfs+0x1116>
c0008229:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008231:	75 3e                	jne    c0008271 <f_mkfs+0x1116>
c0008233:	83 ec 0c             	sub    esp,0xc
c0008236:	55                   	push   ebp
c0008237:	e8 58 00 00 00       	call   c0008294 <ff_memfree>
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	eb 30                	jmp    c0008271 <f_mkfs+0x1116>
c0008241:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008246:	0f 85 eb fa ff ff    	jne    c0007d37 <f_mkfs+0xbdc>
c000824c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008250:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008256:	0f 86 b8 f9 ff ff    	jbe    c0007c14 <f_mkfs+0xab9>
c000825c:	e9 bf fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008261:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008266:	0f 85 c0 fa ff ff    	jne    c0007d2c <f_mkfs+0xbd1>
c000826c:	e9 af fb ff ff       	jmp    c0007e20 <f_mkfs+0xcc5>
c0008271:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008277:	89 d8                	mov    eax,ebx
c0008279:	5b                   	pop    ebx
c000827a:	5e                   	pop    esi
c000827b:	5f                   	pop    edi
c000827c:	5d                   	pop    ebp
c000827d:	c3                   	ret    

c000827e <ff_memalloc>:
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	83 ec 0c             	sub    esp,0xc
c0008284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008288:	e8 e1 6e 00 00       	call   c000f16e <malloc>
c000828d:	83 c4 10             	add    esp,0x10
c0008290:	83 c4 0c             	add    esp,0xc
c0008293:	c3                   	ret    

c0008294 <ff_memfree>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	83 ec 0c             	sub    esp,0xc
c000829a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829e:	e8 db 6e 00 00       	call   c000f17e <free>
c00082a3:	83 c4 10             	add    esp,0x10
c00082a6:	90                   	nop
c00082a7:	83 c4 0c             	add    esp,0xc
c00082aa:	c3                   	ret    

c00082ab <ff_uni2oem>:
c00082ab:	83 ec 14             	sub    esp,0x14
c00082ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b2:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b6:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bd:	c7 44 24 0c e0 62 02 c0 	mov    DWORD PTR [esp+0xc],0xc00262e0
c00082c5:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082ca:	77 0b                	ja     c00082d7 <ff_uni2oem+0x2c>
c00082cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d5:	eb 5b                	jmp    c0008332 <ff_uni2oem+0x87>
c00082d7:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082df:	77 51                	ja     c0008332 <ff_uni2oem+0x87>
c00082e1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e7:	75 49                	jne    c0008332 <ff_uni2oem+0x87>
c00082e9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082f0:	eb 0b                	jmp    c00082fd <ff_uni2oem+0x52>
c00082f2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f7:	40                   	inc    eax
c00082f8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fd:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008303:	77 1b                	ja     c0008320 <ff_uni2oem+0x75>
c0008305:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000830a:	01 c0                	add    eax,eax
c000830c:	89 c2                	mov    edx,eax
c000830e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008312:	01 d0                	add    eax,edx
c0008314:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008317:	0f b7 c0             	movzx  eax,ax
c000831a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831e:	75 d2                	jne    c00082f2 <ff_uni2oem+0x47>
c0008320:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008325:	83 e8 80             	sub    eax,0xffffff80
c0008328:	25 ff 00 00 00       	and    eax,0xff
c000832d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008332:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008337:	83 c4 14             	add    esp,0x14
c000833a:	c3                   	ret    

c000833b <ff_oem2uni>:
c000833b:	83 ec 18             	sub    esp,0x18
c000833e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008346:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834f:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008356:	c7 44 24 10 e0 62 02 c0 	mov    DWORD PTR [esp+0x10],0xc00262e0
c000835e:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008364:	77 0b                	ja     c0008371 <ff_oem2uni+0x36>
c0008366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000836a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836f:	eb 2d                	jmp    c000839e <ff_oem2uni+0x63>
c0008371:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008377:	75 25                	jne    c000839e <ff_oem2uni+0x63>
c0008379:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008380:	77 1c                	ja     c000839e <ff_oem2uni+0x63>
c0008382:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008387:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838c:	01 c0                	add    eax,eax
c000838e:	89 c2                	mov    edx,eax
c0008390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008394:	01 d0                	add    eax,edx
c0008396:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008399:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839e:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a3:	83 c4 18             	add    esp,0x18
c00083a6:	c3                   	ret    

c00083a7 <ff_wtoupper>:
c00083a7:	83 ec 10             	sub    esp,0x10
c00083aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b2:	0f 87 3e 01 00 00    	ja     c00084f6 <ff_wtoupper+0x14f>
c00083b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c1:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c8:	77 07                	ja     c00083d1 <ff_wtoupper+0x2a>
c00083ca:	b8 e0 60 02 c0       	mov    eax,0xc00260e0
c00083cf:	eb 05                	jmp    c00083d6 <ff_wtoupper+0x2f>
c00083d1:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00083d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083de:	8d 50 02             	lea    edx,[eax+0x2]
c00083e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ed:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f3:	0f 84 f4 00 00 00    	je     c00084ed <ff_wtoupper+0x146>
c00083f9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fe:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008403:	0f 82 e4 00 00 00    	jb     c00084ed <ff_wtoupper+0x146>
c0008409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840d:	8d 50 02             	lea    edx,[eax+0x2]
c0008410:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008414:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008417:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008421:	66 c1 e8 08          	shr    ax,0x8
c0008425:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000842a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008431:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008436:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008440:	01 ca                	add    edx,ecx
c0008442:	39 d0                	cmp    eax,edx
c0008444:	0f 8d 86 00 00 00    	jge    c00084d0 <ff_wtoupper+0x129>
c000844a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844f:	83 f8 08             	cmp    eax,0x8
c0008452:	0f 87 94 00 00 00    	ja     c00084ec <ff_wtoupper+0x145>
c0008458:	8b 04 85 e0 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda020]
c000845f:	ff e0                	jmp    eax
c0008461:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008466:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846b:	29 c2                	sub    edx,eax
c000846d:	89 d0                	mov    eax,edx
c000846f:	01 c0                	add    eax,eax
c0008471:	89 c2                	mov    edx,eax
c0008473:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008477:	01 d0                	add    eax,edx
c0008479:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008481:	eb 4b                	jmp    c00084ce <ff_wtoupper+0x127>
c0008483:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008488:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848c:	83 e0 01             	and    eax,0x1
c000848f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008494:	eb 38                	jmp    c00084ce <ff_wtoupper+0x127>
c0008496:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849c:	eb 30                	jmp    c00084ce <ff_wtoupper+0x127>
c000849e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a4:	eb 28                	jmp    c00084ce <ff_wtoupper+0x127>
c00084a6:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ac:	eb 20                	jmp    c00084ce <ff_wtoupper+0x127>
c00084ae:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b4:	eb 18                	jmp    c00084ce <ff_wtoupper+0x127>
c00084b6:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bc:	eb 10                	jmp    c00084ce <ff_wtoupper+0x127>
c00084be:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c4:	eb 08                	jmp    c00084ce <ff_wtoupper+0x127>
c00084c6:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cd:	90                   	nop
c00084ce:	eb 1c                	jmp    c00084ec <ff_wtoupper+0x145>
c00084d0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d6:	0f 85 fe fe ff ff    	jne    c00083da <ff_wtoupper+0x33>
c00084dc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e1:	01 c0                	add    eax,eax
c00084e3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e7:	e9 ee fe ff ff       	jmp    c00083da <ff_wtoupper+0x33>
c00084ec:	90                   	nop
c00084ed:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	c3                   	ret    

c00084fe <is_bad_src_ratio>:
c00084fe:	83 ec 1c             	sub    esp,0x1c
c0008501:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008509:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000850d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008511:	b8 00 00 00 00       	mov    eax,0x0
c0008516:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000851b:	52                   	push   edx
c000851c:	50                   	push   eax
c000851d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008525:	e8 85 ca 01 00       	call   c0024faf <__ltdf2>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	85 c0                	test   eax,eax
c000852f:	78 20                	js     c0008551 <is_bad_src_ratio+0x53>
c0008531:	b8 00 00 00 00       	mov    eax,0x0
c0008536:	ba 00 00 70 40       	mov    edx,0x40700000
c000853b:	52                   	push   edx
c000853c:	50                   	push   eax
c000853d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008545:	e8 47 ca 01 00       	call   c0024f91 <__gtdf2>
c000854a:	83 c4 10             	add    esp,0x10
c000854d:	85 c0                	test   eax,eax
c000854f:	7e 07                	jle    c0008558 <is_bad_src_ratio+0x5a>
c0008551:	b8 01 00 00 00       	mov    eax,0x1
c0008556:	eb 05                	jmp    c000855d <is_bad_src_ratio+0x5f>
c0008558:	b8 00 00 00 00       	mov    eax,0x0
c000855d:	83 c4 1c             	add    esp,0x1c
c0008560:	c3                   	ret    

c0008561 <psrc_set_converter>:
c0008561:	56                   	push   esi
c0008562:	89 d6                	mov    esi,edx
c0008564:	53                   	push   ebx
c0008565:	89 c3                	mov    ebx,eax
c0008567:	83 ec 0c             	sub    esp,0xc
c000856a:	52                   	push   edx
c000856b:	50                   	push   eax
c000856c:	e8 58 51 00 00       	call   c000d6c9 <sinc_set_converter>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	85 c0                	test   eax,eax
c0008576:	74 25                	je     c000859d <psrc_set_converter+0x3c>
c0008578:	50                   	push   eax
c0008579:	50                   	push   eax
c000857a:	56                   	push   esi
c000857b:	53                   	push   ebx
c000857c:	e8 2a 59 00 00       	call   c000deab <zoh_set_converter>
c0008581:	83 c4 10             	add    esp,0x10
c0008584:	85 c0                	test   eax,eax
c0008586:	74 15                	je     c000859d <psrc_set_converter+0x3c>
c0008588:	51                   	push   ecx
c0008589:	51                   	push   ecx
c000858a:	56                   	push   esi
c000858b:	53                   	push   ebx
c000858c:	e8 77 10 00 00       	call   c0009608 <linear_set_converter>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	ba 0a 00 00 00       	mov    edx,0xa
c0008599:	85 c0                	test   eax,eax
c000859b:	75 02                	jne    c000859f <psrc_set_converter+0x3e>
c000859d:	31 d2                	xor    edx,edx
c000859f:	89 d0                	mov    eax,edx
c00085a1:	5a                   	pop    edx
c00085a2:	5b                   	pop    ebx
c00085a3:	5e                   	pop    esi
c00085a4:	c3                   	ret    

c00085a5 <src_delete>:
c00085a5:	53                   	push   ebx
c00085a6:	83 ec 08             	sub    esp,0x8
c00085a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085ad:	85 db                	test   ebx,ebx
c00085af:	74 29                	je     c00085da <src_delete+0x35>
c00085b1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085b4:	85 c0                	test   eax,eax
c00085b6:	74 0c                	je     c00085c4 <src_delete+0x1f>
c00085b8:	83 ec 0c             	sub    esp,0xc
c00085bb:	50                   	push   eax
c00085bc:	e8 bd 6b 00 00       	call   c000f17e <free>
c00085c1:	83 c4 10             	add    esp,0x10
c00085c4:	50                   	push   eax
c00085c5:	6a 3c                	push   0x3c
c00085c7:	6a 00                	push   0x0
c00085c9:	53                   	push   ebx
c00085ca:	e8 f6 80 ff ff       	call   c00006c5 <memset>
c00085cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d2:	e8 a7 6b 00 00       	call   c000f17e <free>
c00085d7:	83 c4 10             	add    esp,0x10
c00085da:	31 c0                	xor    eax,eax
c00085dc:	83 c4 08             	add    esp,0x8
c00085df:	5b                   	pop    ebx
c00085e0:	c3                   	ret    

c00085e1 <src_process>:
c00085e1:	56                   	push   esi
c00085e2:	53                   	push   ebx
c00085e3:	83 ec 14             	sub    esp,0x14
c00085e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085ea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085ee:	85 f6                	test   esi,esi
c00085f0:	0f 84 2a 01 00 00    	je     c0008720 <src_process+0x13f>
c00085f6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085fa:	0f 84 27 01 00 00    	je     c0008727 <src_process+0x146>
c0008600:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008604:	0f 84 1d 01 00 00    	je     c0008727 <src_process+0x146>
c000860a:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008611:	0f 85 17 01 00 00    	jne    c000872e <src_process+0x14d>
c0008617:	85 db                	test   ebx,ebx
c0008619:	0f 84 16 01 00 00    	je     c0008735 <src_process+0x154>
c000861f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008622:	0f 84 14 01 00 00    	je     c000873c <src_process+0x15b>
c0008628:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000862c:	0f 84 0a 01 00 00    	je     c000873c <src_process+0x15b>
c0008632:	50                   	push   eax
c0008633:	50                   	push   eax
c0008634:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008637:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000863a:	e8 bf fe ff ff       	call   c00084fe <is_bad_src_ratio>
c000863f:	83 c4 10             	add    esp,0x10
c0008642:	85 c0                	test   eax,eax
c0008644:	0f 85 f9 00 00 00    	jne    c0008743 <src_process+0x162>
c000864a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000864e:	79 07                	jns    c0008657 <src_process+0x76>
c0008650:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008657:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000865b:	79 07                	jns    c0008664 <src_process+0x83>
c000865d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008664:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008666:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008669:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000866c:	39 ca                	cmp    edx,ecx
c000866e:	73 0b                	jae    c000867b <src_process+0x9a>
c0008670:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008674:	8d 04 82             	lea    eax,[edx+eax*4]
c0008677:	39 c1                	cmp    ecx,eax
c0008679:	eb 09                	jmp    c0008684 <src_process+0xa3>
c000867b:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000867f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008682:	39 c2                	cmp    edx,eax
c0008684:	0f 82 c0 00 00 00    	jb     c000874a <src_process+0x169>
c000868a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008691:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008698:	68 00 00 70 3f       	push   0x3f700000
c000869d:	6a 00                	push   0x0
c000869f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086a2:	ff 36                	push   DWORD PTR [esi]
c00086a4:	e8 06 c9 01 00       	call   c0024faf <__ltdf2>
c00086a9:	83 c4 10             	add    esp,0x10
c00086ac:	85 c0                	test   eax,eax
c00086ae:	79 0b                	jns    c00086bb <src_process+0xda>
c00086b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086b3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086b6:	89 06                	mov    DWORD PTR [esi],eax
c00086b8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086bb:	83 ec 10             	sub    esp,0x10
c00086be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086c1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086c4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c7:	ff 36                	push   DWORD PTR [esi]
c00086c9:	e8 e6 bf 01 00       	call   c00246b4 <__subdf3>
c00086ce:	83 c4 18             	add    esp,0x18
c00086d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086d9:	52                   	push   edx
c00086da:	50                   	push   eax
c00086db:	e8 60 ca 01 00       	call   c0025140 <fabs>
c00086e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086e8:	83 c4 10             	add    esp,0x10
c00086eb:	68 af 03 d2 3c       	push   0x3cd203af
c00086f0:	68 16 56 e7 9e       	push   0x9ee75616
c00086f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086fd:	e8 ad c8 01 00       	call   c0024faf <__ltdf2>
c0008702:	83 c4 10             	add    esp,0x10
c0008705:	85 c0                	test   eax,eax
c0008707:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000870b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000870f:	79 05                	jns    c0008716 <src_process+0x135>
c0008711:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008714:	eb 03                	jmp    c0008719 <src_process+0x138>
c0008716:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008719:	83 c4 14             	add    esp,0x14
c000871c:	5b                   	pop    ebx
c000871d:	5e                   	pop    esi
c000871e:	ff e0                	jmp    eax
c0008720:	b8 02 00 00 00       	mov    eax,0x2
c0008725:	eb 28                	jmp    c000874f <src_process+0x16e>
c0008727:	b8 07 00 00 00       	mov    eax,0x7
c000872c:	eb 21                	jmp    c000874f <src_process+0x16e>
c000872e:	b8 12 00 00 00       	mov    eax,0x12
c0008733:	eb 1a                	jmp    c000874f <src_process+0x16e>
c0008735:	b8 03 00 00 00       	mov    eax,0x3
c000873a:	eb 13                	jmp    c000874f <src_process+0x16e>
c000873c:	b8 04 00 00 00       	mov    eax,0x4
c0008741:	eb 0c                	jmp    c000874f <src_process+0x16e>
c0008743:	b8 06 00 00 00       	mov    eax,0x6
c0008748:	eb 05                	jmp    c000874f <src_process+0x16e>
c000874a:	b8 10 00 00 00       	mov    eax,0x10
c000874f:	83 c4 14             	add    esp,0x14
c0008752:	5b                   	pop    ebx
c0008753:	5e                   	pop    esi
c0008754:	c3                   	ret    

c0008755 <src_callback_read>:
c0008755:	55                   	push   ebp
c0008756:	57                   	push   edi
c0008757:	56                   	push   esi
c0008758:	53                   	push   ebx
c0008759:	83 ec 3c             	sub    esp,0x3c
c000875c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008760:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008764:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008768:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000876c:	85 ed                	test   ebp,ebp
c000876e:	0f 8e 30 01 00 00    	jle    c00088a4 <src_callback_read+0x14f>
c0008774:	85 db                	test   ebx,ebx
c0008776:	0f 84 28 01 00 00    	je     c00088a4 <src_callback_read+0x14f>
c000877c:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008783:	74 0c                	je     c0008791 <src_callback_read+0x3c>
c0008785:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000878c:	e9 13 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c0008791:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008795:	75 0c                	jne    c00087a3 <src_callback_read+0x4e>
c0008797:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000879e:	e9 01 01 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087a3:	51                   	push   ecx
c00087a4:	6a 24                	push   0x24
c00087a6:	6a 00                	push   0x0
c00087a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087ac:	50                   	push   eax
c00087ad:	e8 13 7f ff ff       	call   c00006c5 <memset>
c00087b2:	58                   	pop    eax
c00087b3:	5a                   	pop    edx
c00087b4:	57                   	push   edi
c00087b5:	56                   	push   esi
c00087b6:	e8 43 fd ff ff       	call   c00084fe <is_bad_src_ratio>
c00087bb:	83 c4 10             	add    esp,0x10
c00087be:	85 c0                	test   eax,eax
c00087c0:	74 0c                	je     c00087ce <src_callback_read+0x79>
c00087c2:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087c9:	e9 d6 00 00 00       	jmp    c00088a4 <src_callback_read+0x14f>
c00087ce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087d2:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087da:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087e1:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087e9:	31 f6                	xor    esi,esi
c00087eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087f7:	75 30                	jne    c0008829 <src_callback_read+0xd4>
c00087f9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008801:	52                   	push   edx
c0008802:	52                   	push   edx
c0008803:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008807:	50                   	push   eax
c0008808:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000880b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000880e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008812:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008816:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000881a:	83 c4 10             	add    esp,0x10
c000881d:	85 c0                	test   eax,eax
c000881f:	75 08                	jne    c0008829 <src_callback_read+0xd4>
c0008821:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008829:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008830:	50                   	push   eax
c0008831:	50                   	push   eax
c0008832:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008836:	50                   	push   eax
c0008837:	53                   	push   ebx
c0008838:	e8 a4 fd ff ff       	call   c00085e1 <src_process>
c000883d:	83 c4 10             	add    esp,0x10
c0008840:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008847:	85 c0                	test   eax,eax
c0008849:	75 42                	jne    c000888d <src_callback_read+0x138>
c000884b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000884f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008852:	89 f9                	mov    ecx,edi
c0008854:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008858:	0f af ca             	imul   ecx,edx
c000885b:	c1 e1 02             	shl    ecx,0x2
c000885e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008862:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008866:	0f af d1             	imul   edx,ecx
c0008869:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000886d:	c1 e2 02             	shl    edx,0x2
c0008870:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008874:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008877:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000887c:	75 04                	jne    c0008882 <src_callback_read+0x12d>
c000887e:	85 c9                	test   ecx,ecx
c0008880:	74 0b                	je     c000888d <src_callback_read+0x138>
c0008882:	39 d5                	cmp    ebp,edx
c0008884:	7e 09                	jle    c000888f <src_callback_read+0x13a>
c0008886:	89 d6                	mov    esi,edx
c0008888:	e9 65 ff ff ff       	jmp    c00087f2 <src_callback_read+0x9d>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x151>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	b8 02 00 00 00       	mov    eax,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 2d                	je     c00088f5 <src_set_ratio+0x45>
c00088c8:	b8 07 00 00 00       	mov    eax,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 22                	je     c00088f5 <src_set_ratio+0x45>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 1c                	je     c00088f5 <src_set_ratio+0x45>
c00088d9:	50                   	push   eax
c00088da:	50                   	push   eax
c00088db:	57                   	push   edi
c00088dc:	56                   	push   esi
c00088dd:	e8 1c fc ff ff       	call   c00084fe <is_bad_src_ratio>
c00088e2:	83 c4 10             	add    esp,0x10
c00088e5:	85 c0                	test   eax,eax
c00088e7:	75 07                	jne    c00088f0 <src_set_ratio+0x40>
c00088e9:	89 33                	mov    DWORD PTR [ebx],esi
c00088eb:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088ee:	eb 05                	jmp    c00088f5 <src_set_ratio+0x45>
c00088f0:	b8 06 00 00 00       	mov    eax,0x6
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	c3                   	ret    

c00088f9 <src_get_channels>:
c00088f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088fd:	b8 02 00 00 00       	mov    eax,0x2
c0008902:	85 d2                	test   edx,edx
c0008904:	74 14                	je     c000891a <src_get_channels+0x21>
c0008906:	b8 07 00 00 00       	mov    eax,0x7
c000890b:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c000890f:	74 09                	je     c000891a <src_get_channels+0x21>
c0008911:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008915:	74 03                	je     c000891a <src_get_channels+0x21>
c0008917:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000891a:	c3                   	ret    

c000891b <src_reset>:
c000891b:	53                   	push   ebx
c000891c:	b8 02 00 00 00       	mov    eax,0x2
c0008921:	83 ec 08             	sub    esp,0x8
c0008924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008928:	85 db                	test   ebx,ebx
c000892a:	74 36                	je     c0008962 <src_reset+0x47>
c000892c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000892f:	85 c0                	test   eax,eax
c0008931:	74 09                	je     c000893c <src_reset+0x21>
c0008933:	83 ec 0c             	sub    esp,0xc
c0008936:	53                   	push   ebx
c0008937:	ff d0                	call   eax
c0008939:	83 c4 10             	add    esp,0x10
c000893c:	31 c0                	xor    eax,eax
c000893e:	31 d2                	xor    edx,edx
c0008940:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008943:	89 03                	mov    DWORD PTR [ebx],eax
c0008945:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008948:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000894b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008952:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008959:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008960:	31 c0                	xor    eax,eax
c0008962:	83 c4 08             	add    esp,0x8
c0008965:	5b                   	pop    ebx
c0008966:	c3                   	ret    

c0008967 <src_new>:
c0008967:	57                   	push   edi
c0008968:	56                   	push   esi
c0008969:	53                   	push   ebx
c000896a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000896e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008972:	85 f6                	test   esi,esi
c0008974:	74 73                	je     c00089e9 <src_new+0x82>
c0008976:	85 ff                	test   edi,edi
c0008978:	7f 08                	jg     c0008982 <src_new+0x1b>
c000897a:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008980:	eb 1e                	jmp    c00089a0 <src_new+0x39>
c0008982:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008988:	50                   	push   eax
c0008989:	50                   	push   eax
c000898a:	6a 3c                	push   0x3c
c000898c:	6a 01                	push   0x1
c000898e:	e8 0b 68 00 00       	call   c000f19e <calloc>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	89 c3                	mov    ebx,eax
c0008998:	85 c0                	test   eax,eax
c000899a:	75 10                	jne    c00089ac <src_new+0x45>
c000899c:	85 f6                	test   esi,esi
c000899e:	75 04                	jne    c00089a4 <src_new+0x3d>
c00089a0:	31 db                	xor    ebx,ebx
c00089a2:	eb 4b                	jmp    c00089ef <src_new+0x88>
c00089a4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089aa:	eb 43                	jmp    c00089ef <src_new+0x88>
c00089ac:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089af:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089ba:	e8 a2 fb ff ff       	call   c0008561 <psrc_set_converter>
c00089bf:	85 c0                	test   eax,eax
c00089c1:	74 18                	je     c00089db <src_new+0x74>
c00089c3:	85 f6                	test   esi,esi
c00089c5:	74 06                	je     c00089cd <src_new+0x66>
c00089c7:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089cd:	83 ec 0c             	sub    esp,0xc
c00089d0:	53                   	push   ebx
c00089d1:	31 db                	xor    ebx,ebx
c00089d3:	e8 a6 67 00 00       	call   c000f17e <free>
c00089d8:	83 c4 10             	add    esp,0x10
c00089db:	83 ec 0c             	sub    esp,0xc
c00089de:	53                   	push   ebx
c00089df:	e8 37 ff ff ff       	call   c000891b <src_reset>
c00089e4:	83 c4 10             	add    esp,0x10
c00089e7:	eb 06                	jmp    c00089ef <src_new+0x88>
c00089e9:	85 ff                	test   edi,edi
c00089eb:	7f 9b                	jg     c0008988 <src_new+0x21>
c00089ed:	eb b1                	jmp    c00089a0 <src_new+0x39>
c00089ef:	89 d8                	mov    eax,ebx
c00089f1:	5b                   	pop    ebx
c00089f2:	5e                   	pop    esi
c00089f3:	5f                   	pop    edi
c00089f4:	c3                   	ret    

c00089f5 <src_callback_new>:
c00089f5:	56                   	push   esi
c00089f6:	53                   	push   ebx
c00089f7:	53                   	push   ebx
c00089f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a00:	85 f6                	test   esi,esi
c0008a02:	75 0e                	jne    c0008a12 <src_callback_new+0x1d>
c0008a04:	31 db                	xor    ebx,ebx
c0008a06:	85 c0                	test   eax,eax
c0008a08:	74 47                	je     c0008a51 <src_callback_new+0x5c>
c0008a0a:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a10:	eb 3f                	jmp    c0008a51 <src_callback_new+0x5c>
c0008a12:	85 c0                	test   eax,eax
c0008a14:	74 06                	je     c0008a1c <src_callback_new+0x27>
c0008a16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1c:	51                   	push   ecx
c0008a1d:	50                   	push   eax
c0008a1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a26:	e8 3c ff ff ff       	call   c0008967 <src_new>
c0008a2b:	83 c4 10             	add    esp,0x10
c0008a2e:	89 c3                	mov    ebx,eax
c0008a30:	85 c0                	test   eax,eax
c0008a32:	74 1d                	je     c0008a51 <src_callback_new+0x5c>
c0008a34:	83 ec 0c             	sub    esp,0xc
c0008a37:	50                   	push   eax
c0008a38:	e8 de fe ff ff       	call   c000891b <src_reset>
c0008a3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a41:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a48:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a4b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 d8                	mov    eax,ebx
c0008a53:	5a                   	pop    edx
c0008a54:	5b                   	pop    ebx
c0008a55:	5e                   	pop    esi
c0008a56:	c3                   	ret    

c0008a57 <src_get_name>:
c0008a57:	53                   	push   ebx
c0008a58:	83 ec 14             	sub    esp,0x14
c0008a5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a5f:	53                   	push   ebx
c0008a60:	e8 3e 4c 00 00       	call   c000d6a3 <sinc_get_name>
c0008a65:	83 c4 10             	add    esp,0x10
c0008a68:	85 c0                	test   eax,eax
c0008a6a:	75 1d                	jne    c0008a89 <src_get_name+0x32>
c0008a6c:	83 ec 0c             	sub    esp,0xc
c0008a6f:	53                   	push   ebx
c0008a70:	e8 18 54 00 00       	call   c000de8d <zoh_get_name>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	85 c0                	test   eax,eax
c0008a7a:	75 0d                	jne    c0008a89 <src_get_name+0x32>
c0008a7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a80:	83 c4 08             	add    esp,0x8
c0008a83:	5b                   	pop    ebx
c0008a84:	e9 61 0b 00 00       	jmp    c00095ea <linear_get_name>
c0008a89:	83 c4 08             	add    esp,0x8
c0008a8c:	5b                   	pop    ebx
c0008a8d:	c3                   	ret    

c0008a8e <src_get_description>:
c0008a8e:	53                   	push   ebx
c0008a8f:	83 ec 14             	sub    esp,0x14
c0008a92:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a96:	53                   	push   ebx
c0008a97:	e8 1a 4c 00 00       	call   c000d6b6 <sinc_get_description>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 1d                	jne    c0008ac0 <src_get_description+0x32>
c0008aa3:	83 ec 0c             	sub    esp,0xc
c0008aa6:	53                   	push   ebx
c0008aa7:	e8 f0 53 00 00       	call   c000de9c <zoh_get_description>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	85 c0                	test   eax,eax
c0008ab1:	75 0d                	jne    c0008ac0 <src_get_description+0x32>
c0008ab3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ab7:	83 c4 08             	add    esp,0x8
c0008aba:	5b                   	pop    ebx
c0008abb:	e9 39 0b 00 00       	jmp    c00095f9 <linear_get_description>
c0008ac0:	83 c4 08             	add    esp,0x8
c0008ac3:	5b                   	pop    ebx
c0008ac4:	c3                   	ret    

c0008ac5 <src_get_version>:
c0008ac5:	b8 e0 63 02 c0       	mov    eax,0xc00263e0
c0008aca:	c3                   	ret    

c0008acb <src_is_valid_ratio>:
c0008acb:	83 ec 14             	sub    esp,0x14
c0008ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad6:	e8 23 fa ff ff       	call   c00084fe <is_bad_src_ratio>
c0008adb:	85 c0                	test   eax,eax
c0008add:	0f 94 c0             	sete   al
c0008ae0:	83 c4 1c             	add    esp,0x1c
c0008ae3:	0f b6 c0             	movzx  eax,al
c0008ae6:	c3                   	ret    

c0008ae7 <src_error>:
c0008ae7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aeb:	31 c0                	xor    eax,eax
c0008aed:	85 d2                	test   edx,edx
c0008aef:	74 03                	je     c0008af4 <src_error+0xd>
c0008af1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008af4:	c3                   	ret    

c0008af5 <src_strerror>:
c0008af5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008af9:	31 c0                	xor    eax,eax
c0008afb:	83 fa 17             	cmp    edx,0x17
c0008afe:	77 07                	ja     c0008b07 <src_strerror+0x12>
c0008b00:	8b 04 95 40 68 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd97c0]
c0008b07:	c3                   	ret    

c0008b08 <src_simple>:
c0008b08:	56                   	push   esi
c0008b09:	53                   	push   ebx
c0008b0a:	83 ec 18             	sub    esp,0x18
c0008b0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b11:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b15:	50                   	push   eax
c0008b16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b1e:	e8 44 fe ff ff       	call   c0008967 <src_new>
c0008b23:	83 c4 10             	add    esp,0x10
c0008b26:	85 c0                	test   eax,eax
c0008b28:	75 06                	jne    c0008b30 <src_simple+0x28>
c0008b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b2e:	eb 25                	jmp    c0008b55 <src_simple+0x4d>
c0008b30:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b37:	89 c3                	mov    ebx,eax
c0008b39:	50                   	push   eax
c0008b3a:	50                   	push   eax
c0008b3b:	56                   	push   esi
c0008b3c:	53                   	push   ebx
c0008b3d:	e8 9f fa ff ff       	call   c00085e1 <src_process>
c0008b42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b49:	e8 57 fa ff ff       	call   c00085a5 <src_delete>
c0008b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	83 c4 14             	add    esp,0x14
c0008b58:	5b                   	pop    ebx
c0008b59:	5e                   	pop    esi
c0008b5a:	c3                   	ret    

c0008b5b <src_short_to_float_array>:
c0008b5b:	53                   	push   ebx
c0008b5c:	83 ec 18             	sub    esp,0x18
c0008b5f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b63:	85 db                	test   ebx,ebx
c0008b65:	74 54                	je     c0008bbb <src_short_to_float_array+0x60>
c0008b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b6b:	4b                   	dec    ebx
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b73:	50                   	push   eax
c0008b74:	e8 ca c1 01 00       	call   c0024d43 <__floatsidf>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b84:	68 00 00 00 3f       	push   0x3f000000
c0008b89:	6a 00                	push   0x0
c0008b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b93:	e8 48 bb 01 00       	call   c00246e0 <__muldf3>
c0008b98:	59                   	pop    ecx
c0008b99:	59                   	pop    ecx
c0008b9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ba2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baa:	e8 04 c4 01 00       	call   c0024fb3 <__truncdfsf2>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bb6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bb9:	eb a8                	jmp    c0008b63 <src_short_to_float_array+0x8>
c0008bbb:	83 c4 18             	add    esp,0x18
c0008bbe:	5b                   	pop    ebx
c0008bbf:	c3                   	ret    

c0008bc0 <src_float_to_short_array>:
c0008bc0:	56                   	push   esi
c0008bc1:	53                   	push   ebx
c0008bc2:	83 ec 14             	sub    esp,0x14
c0008bc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bc9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bcd:	85 db                	test   ebx,ebx
c0008bcf:	0f 84 a4 00 00 00    	je     c0008c79 <src_float_to_short_array+0xb9>
c0008bd5:	83 ec 0c             	sub    esp,0xc
c0008bd8:	4b                   	dec    ebx
c0008bd9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bdd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008be0:	e8 f2 c4 01 00       	call   c00250d7 <__extendsfdf2>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bf0:	68 00 00 e0 41       	push   0x41e00000
c0008bf5:	6a 00                	push   0x0
c0008bf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	e8 dc ba 01 00       	call   c00246e0 <__muldf3>
c0008c04:	83 c4 10             	add    esp,0x10
c0008c07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c0f:	68 ff ff df 41       	push   0x41dfffff
c0008c14:	68 00 00 c0 ff       	push   0xffc00000
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c21:	e8 87 c3 01 00       	call   c0024fad <__gedf2>
c0008c26:	83 c4 10             	add    esp,0x10
c0008c29:	85 c0                	test   eax,eax
c0008c2b:	78 08                	js     c0008c35 <src_float_to_short_array+0x75>
c0008c2d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c33:	eb 98                	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c35:	68 00 00 e0 c1       	push   0xc1e00000
c0008c3a:	6a 00                	push   0x0
c0008c3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	e8 68 c3 01 00       	call   c0024fb1 <__ledf2>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	85 c0                	test   eax,eax
c0008c4e:	7f 0b                	jg     c0008c5b <src_float_to_short_array+0x9b>
c0008c50:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c56:	e9 72 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c5b:	50                   	push   eax
c0008c5c:	50                   	push   eax
c0008c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c65:	e8 f6 c4 01 00       	call   c0025160 <lrint>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	c1 f8 10             	sar    eax,0x10
c0008c70:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c74:	e9 54 ff ff ff       	jmp    c0008bcd <src_float_to_short_array+0xd>
c0008c79:	83 c4 14             	add    esp,0x14
c0008c7c:	5b                   	pop    ebx
c0008c7d:	5e                   	pop    esi
c0008c7e:	c3                   	ret    

c0008c7f <src_int_to_float_array>:
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 18             	sub    esp,0x18
c0008c83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c87:	85 db                	test   ebx,ebx
c0008c89:	74 52                	je     c0008cdd <src_int_to_float_array+0x5e>
c0008c8b:	83 ec 0c             	sub    esp,0xc
c0008c8e:	4b                   	dec    ebx
c0008c8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c96:	e8 a8 c0 01 00       	call   c0024d43 <__floatsidf>
c0008c9b:	83 c4 10             	add    esp,0x10
c0008c9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ca2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ca6:	68 00 00 00 3e       	push   0x3e000000
c0008cab:	6a 00                	push   0x0
c0008cad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb5:	e8 26 ba 01 00       	call   c00246e0 <__muldf3>
c0008cba:	59                   	pop    ecx
c0008cbb:	59                   	pop    ecx
c0008cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ccc:	e8 e2 c2 01 00       	call   c0024fb3 <__truncdfsf2>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cdb:	eb aa                	jmp    c0008c87 <src_int_to_float_array+0x8>
c0008cdd:	83 c4 18             	add    esp,0x18
c0008ce0:	5b                   	pop    ebx
c0008ce1:	c3                   	ret    

c0008ce2 <src_float_to_int_array>:
c0008ce2:	56                   	push   esi
c0008ce3:	53                   	push   ebx
c0008ce4:	83 ec 14             	sub    esp,0x14
c0008ce7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ceb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cef:	85 db                	test   ebx,ebx
c0008cf1:	0f 84 a2 00 00 00    	je     c0008d99 <src_float_to_int_array+0xb7>
c0008cf7:	83 ec 0c             	sub    esp,0xc
c0008cfa:	4b                   	dec    ebx
c0008cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cff:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d02:	e8 d0 c3 01 00       	call   c00250d7 <__extendsfdf2>
c0008d07:	83 c4 10             	add    esp,0x10
c0008d0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	68 00 00 e0 41       	push   0x41e00000
c0008d17:	6a 00                	push   0x0
c0008d19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	e8 ba b9 01 00       	call   c00246e0 <__muldf3>
c0008d26:	83 c4 10             	add    esp,0x10
c0008d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d31:	68 ff ff df 41       	push   0x41dfffff
c0008d36:	68 00 00 c0 ff       	push   0xffc00000
c0008d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d43:	e8 65 c2 01 00       	call   c0024fad <__gedf2>
c0008d48:	83 c4 10             	add    esp,0x10
c0008d4b:	85 c0                	test   eax,eax
c0008d4d:	78 09                	js     c0008d58 <src_float_to_int_array+0x76>
c0008d4f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d56:	eb 97                	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d58:	68 00 00 e0 c1       	push   0xc1e00000
c0008d5d:	6a 00                	push   0x0
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d67:	e8 45 c2 01 00       	call   c0024fb1 <__ledf2>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	85 c0                	test   eax,eax
c0008d71:	7f 0c                	jg     c0008d7f <src_float_to_int_array+0x9d>
c0008d73:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d7a:	e9 70 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d7f:	50                   	push   eax
c0008d80:	50                   	push   eax
c0008d81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d89:	e8 d2 c3 01 00       	call   c0025160 <lrint>
c0008d8e:	83 c4 10             	add    esp,0x10
c0008d91:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d94:	e9 56 ff ff ff       	jmp    c0008cef <src_float_to_int_array+0xd>
c0008d99:	83 c4 14             	add    esp,0x14
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    

c0008d9f <is_bad_src_ratio>:
c0008d9f:	83 ec 1c             	sub    esp,0x1c
c0008da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008daa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db2:	b8 00 00 00 00       	mov    eax,0x0
c0008db7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008dbc:	52                   	push   edx
c0008dbd:	50                   	push   eax
c0008dbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc6:	e8 e4 c1 01 00       	call   c0024faf <__ltdf2>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	85 c0                	test   eax,eax
c0008dd0:	78 20                	js     c0008df2 <is_bad_src_ratio+0x53>
c0008dd2:	b8 00 00 00 00       	mov    eax,0x0
c0008dd7:	ba 00 00 70 40       	mov    edx,0x40700000
c0008ddc:	52                   	push   edx
c0008ddd:	50                   	push   eax
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de6:	e8 a6 c1 01 00       	call   c0024f91 <__gtdf2>
c0008deb:	83 c4 10             	add    esp,0x10
c0008dee:	85 c0                	test   eax,eax
c0008df0:	7e 07                	jle    c0008df9 <is_bad_src_ratio+0x5a>
c0008df2:	b8 01 00 00 00       	mov    eax,0x1
c0008df7:	eb 05                	jmp    c0008dfe <is_bad_src_ratio+0x5f>
c0008df9:	b8 00 00 00 00       	mov    eax,0x0
c0008dfe:	83 c4 1c             	add    esp,0x1c
c0008e01:	c3                   	ret    

c0008e02 <fmod_one>:
c0008e02:	83 ec 2c             	sub    esp,0x2c
c0008e05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e15:	83 ec 08             	sub    esp,0x8
c0008e18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e20:	e8 3b c3 01 00       	call   c0025160 <lrint>
c0008e25:	83 c4 10             	add    esp,0x10
c0008e28:	83 ec 0c             	sub    esp,0xc
c0008e2b:	50                   	push   eax
c0008e2c:	e8 12 bf 01 00       	call   c0024d43 <__floatsidf>
c0008e31:	83 c4 10             	add    esp,0x10
c0008e34:	52                   	push   edx
c0008e35:	50                   	push   eax
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 71 b8 01 00       	call   c00246b4 <__subdf3>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e4e:	b8 00 00 00 00       	mov    eax,0x0
c0008e53:	ba 00 00 00 00       	mov    edx,0x0
c0008e58:	52                   	push   edx
c0008e59:	50                   	push   eax
c0008e5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e62:	e8 48 c1 01 00       	call   c0024faf <__ltdf2>
c0008e67:	83 c4 10             	add    esp,0x10
c0008e6a:	85 c0                	test   eax,eax
c0008e6c:	79 1e                	jns    c0008e8c <fmod_one+0x8a>
c0008e6e:	b8 00 00 00 00       	mov    eax,0x0
c0008e73:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e78:	52                   	push   edx
c0008e79:	50                   	push   eax
c0008e7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e82:	e8 dc b1 01 00       	call   c0024063 <__adddf3>
c0008e87:	83 c4 10             	add    esp,0x10
c0008e8a:	eb 08                	jmp    c0008e94 <fmod_one+0x92>
c0008e8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e94:	83 c4 2c             	add    esp,0x2c
c0008e97:	c3                   	ret    

c0008e98 <linear_vari_process>:
c0008e98:	55                   	push   ebp
c0008e99:	57                   	push   edi
c0008e9a:	56                   	push   esi
c0008e9b:	53                   	push   ebx
c0008e9c:	83 ec 3c             	sub    esp,0x3c
c0008e9f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ea3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008eab:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008eaf:	0f 8e f7 06 00 00    	jle    c00095ac <linear_vari_process+0x714>
c0008eb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eb9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ec1:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ec4:	85 db                	test   ebx,ebx
c0008ec6:	0f 84 e0 06 00 00    	je     c00095ac <linear_vari_process+0x714>
c0008ecc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ecf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ed3:	74 19                	je     c0008eee <linear_vari_process+0x56>
c0008ed5:	31 d2                	xor    edx,edx
c0008ed7:	39 c2                	cmp    edx,eax
c0008ed9:	7d 0c                	jge    c0008ee7 <linear_vari_process+0x4f>
c0008edb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008edd:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008ee0:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008ee4:	42                   	inc    edx
c0008ee5:	eb f0                	jmp    c0008ed7 <linear_vari_process+0x3f>
c0008ee7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008eee:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ef1:	0f af d0             	imul   edx,eax
c0008ef4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ef7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008efb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f02:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f05:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f0c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f1d:	57                   	push   edi
c0008f1e:	57                   	push   edi
c0008f1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f27:	e8 73 fe ff ff       	call   c0008d9f <is_bad_src_ratio>
c0008f2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f30:	83 c4 10             	add    esp,0x10
c0008f33:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f38:	0f 85 66 06 00 00    	jne    c00095a4 <linear_vari_process+0x70c>
c0008f3e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f50:	68 00 00 f0 3f       	push   0x3ff00000
c0008f55:	6a 00                	push   0x0
c0008f57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5f:	e8 4b c0 01 00       	call   c0024faf <__ltdf2>
c0008f64:	83 c4 10             	add    esp,0x10
c0008f67:	85 c0                	test   eax,eax
c0008f69:	0f 89 89 02 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c0008f6f:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f72:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f75:	0f 8d 7d 02 00 00    	jge    c00091f8 <linear_vari_process+0x360>
c0008f7b:	83 ec 0c             	sub    esp,0xc
c0008f7e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f81:	e8 bd bd 01 00       	call   c0024d43 <__floatsidf>
c0008f86:	83 c4 10             	add    esp,0x10
c0008f89:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f90:	68 00 00 f0 3f       	push   0x3ff00000
c0008f95:	6a 00                	push   0x0
c0008f97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9f:	e8 bf b0 01 00       	call   c0024063 <__adddf3>
c0008fa4:	83 c4 10             	add    esp,0x10
c0008fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008faf:	52                   	push   edx
c0008fb0:	50                   	push   eax
c0008fb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb9:	e8 22 b7 01 00       	call   c00246e0 <__muldf3>
c0008fbe:	5d                   	pop    ebp
c0008fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fc3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fc7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008fca:	e8 74 bd 01 00       	call   c0024d43 <__floatsidf>
c0008fcf:	83 c4 10             	add    esp,0x10
c0008fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fda:	52                   	push   edx
c0008fdb:	50                   	push   eax
c0008fdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe4:	e8 7a b0 01 00       	call   c0024063 <__adddf3>
c0008fe9:	59                   	pop    ecx
c0008fea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008ff2:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008ff5:	e8 49 bd 01 00       	call   c0024d43 <__floatsidf>
c0008ffa:	83 c4 10             	add    esp,0x10
c0008ffd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009001:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009005:	52                   	push   edx
c0009006:	50                   	push   eax
c0009007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900f:	e8 99 bf 01 00       	call   c0024fad <__gedf2>
c0009014:	83 c4 10             	add    esp,0x10
c0009017:	85 c0                	test   eax,eax
c0009019:	0f 89 d9 01 00 00    	jns    c00091f8 <linear_vari_process+0x360>
c000901f:	85 ff                	test   edi,edi
c0009021:	0f 8e f4 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c0009027:	83 ec 10             	sub    esp,0x10
c000902a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000902d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009030:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009034:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009037:	ff 30                	push   DWORD PTR [eax]
c0009039:	e8 76 b6 01 00       	call   c00246b4 <__subdf3>
c000903e:	83 c4 18             	add    esp,0x18
c0009041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009049:	52                   	push   edx
c000904a:	50                   	push   eax
c000904b:	e8 f0 c0 01 00       	call   c0025140 <fabs>
c0009050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009054:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009060:	68 23 42 92 0c       	push   0xc924223
c0009065:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009069:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000906d:	e8 1f bf 01 00       	call   c0024f91 <__gtdf2>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	85 c0                	test   eax,eax
c0009077:	0f 8e 9e 00 00 00    	jle    c000911b <linear_vari_process+0x283>
c000907d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009081:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009084:	8b 00                	mov    eax,DWORD PTR [eax]
c0009086:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	52                   	push   edx
c000908e:	50                   	push   eax
c000908f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009092:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009095:	e8 1a b6 01 00       	call   c00246b4 <__subdf3>
c000909a:	59                   	pop    ecx
c000909b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000909f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090a3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090a6:	e8 98 bc 01 00       	call   c0024d43 <__floatsidf>
c00090ab:	83 c4 10             	add    esp,0x10
c00090ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090b6:	52                   	push   edx
c00090b7:	50                   	push   eax
c00090b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c0:	e8 1b b6 01 00       	call   c00246e0 <__muldf3>
c00090c5:	5f                   	pop    edi
c00090c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090ca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ce:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090d1:	e8 6d bc 01 00       	call   c0024d43 <__floatsidf>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090e1:	52                   	push   edx
c00090e2:	50                   	push   eax
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090eb:	e8 d4 b8 01 00       	call   c00249c4 <__divdf3>
c00090f0:	83 c4 10             	add    esp,0x10
c00090f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090fb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090ff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009103:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910b:	e8 53 af 01 00       	call   c0024063 <__adddf3>
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009117:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000911b:	31 ff                	xor    edi,edi
c000911d:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009120:	0f 8e 9d 00 00 00    	jle    c00091c3 <linear_vari_process+0x32b>
c0009126:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009129:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000912d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009130:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009134:	89 04 24             	mov    DWORD PTR [esp],eax
c0009137:	8b 06                	mov    eax,DWORD PTR [esi]
c0009139:	52                   	push   edx
c000913a:	52                   	push   edx
c000913b:	55                   	push   ebp
c000913c:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000913f:	47                   	inc    edi
c0009140:	e8 b3 a8 01 00       	call   c00239f8 <__subsf3>
c0009145:	89 04 24             	mov    DWORD PTR [esp],eax
c0009148:	e8 8a bf 01 00       	call   c00250d7 <__extendsfdf2>
c000914d:	83 c4 10             	add    esp,0x10
c0009150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009154:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009158:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009160:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009168:	e8 73 b5 01 00       	call   c00246e0 <__muldf3>
c000916d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009174:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009178:	e8 5a bf 01 00       	call   c00250d7 <__extendsfdf2>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009184:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009188:	52                   	push   edx
c0009189:	50                   	push   eax
c000918a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009192:	e8 cc ae 01 00       	call   c0024063 <__adddf3>
c0009197:	59                   	pop    ecx
c0009198:	5d                   	pop    ebp
c0009199:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000919d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a9:	e8 05 be 01 00       	call   c0024fb3 <__truncdfsf2>
c00091ae:	83 c4 10             	add    esp,0x10
c00091b1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091b8:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091bb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091be:	e9 5a ff ff ff       	jmp    c000911d <linear_vari_process+0x285>
c00091c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	e8 ed b7 01 00       	call   c00249c4 <__divdf3>
c00091d7:	83 c4 10             	add    esp,0x10
c00091da:	89 04 24             	mov    DWORD PTR [esp],eax
c00091dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e1:	52                   	push   edx
c00091e2:	50                   	push   eax
c00091e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091eb:	e8 73 ae 01 00       	call   c0024063 <__adddf3>
c00091f0:	83 c4 10             	add    esp,0x10
c00091f3:	e9 50 fd ff ff       	jmp    c0008f48 <linear_vari_process+0xb0>
c00091f8:	50                   	push   eax
c00091f9:	50                   	push   eax
c00091fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009202:	e8 fb fb ff ff       	call   c0008e02 <fmod_one>
c0009207:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000920a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009212:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009216:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000921e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009222:	e8 8d b4 01 00       	call   c00246b4 <__subdf3>
c0009227:	83 c4 18             	add    esp,0x18
c000922a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000922e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	e8 27 bf 01 00       	call   c0025160 <lrint>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	0f af f8             	imul   edi,eax
c000923f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009242:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009245:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009248:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000924b:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000924e:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009252:	0f 8d b4 02 00 00    	jge    c000950c <linear_vari_process+0x674>
c0009258:	83 ec 0c             	sub    esp,0xc
c000925b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000925e:	e8 e0 ba 01 00       	call   c0024d43 <__floatsidf>
c0009263:	83 c4 10             	add    esp,0x10
c0009266:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000926a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000926e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009272:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000927e:	e8 5d b4 01 00       	call   c00246e0 <__muldf3>
c0009283:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000928a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000928e:	e8 b0 ba 01 00       	call   c0024d43 <__floatsidf>
c0009293:	83 c4 10             	add    esp,0x10
c0009296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000929a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929e:	52                   	push   edx
c000929f:	50                   	push   eax
c00092a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a8:	e8 b6 ad 01 00       	call   c0024063 <__adddf3>
c00092ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b8:	e8 86 ba 01 00       	call   c0024d43 <__floatsidf>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d2:	e8 d8 bc 01 00       	call   c0024faf <__ltdf2>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	85 c0                	test   eax,eax
c00092dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092e0:	0f 89 26 02 00 00    	jns    c000950c <linear_vari_process+0x674>
c00092e6:	85 c9                	test   ecx,ecx
c00092e8:	0f 8e f5 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c00092ee:	83 ec 10             	sub    esp,0x10
c00092f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092fe:	ff 30                	push   DWORD PTR [eax]
c0009300:	e8 af b3 01 00       	call   c00246b4 <__subdf3>
c0009305:	83 c4 18             	add    esp,0x18
c0009308:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000930c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009310:	52                   	push   edx
c0009311:	50                   	push   eax
c0009312:	e8 29 be 01 00       	call   c0025140 <fabs>
c0009317:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000931f:	83 c4 10             	add    esp,0x10
c0009322:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009327:	68 23 42 92 0c       	push   0xc924223
c000932c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009330:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009334:	e8 58 bc 01 00       	call   c0024f91 <__gtdf2>
c0009339:	83 c4 10             	add    esp,0x10
c000933c:	85 c0                	test   eax,eax
c000933e:	0f 8e 9f 00 00 00    	jle    c00093e3 <linear_vari_process+0x54b>
c0009344:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000934b:	8b 00                	mov    eax,DWORD PTR [eax]
c000934d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009351:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009355:	52                   	push   edx
c0009356:	50                   	push   eax
c0009357:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000935a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000935d:	e8 52 b3 01 00       	call   c00246b4 <__subdf3>
c0009362:	5f                   	pop    edi
c0009363:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000936b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000936e:	e8 d0 b9 01 00       	call   c0024d43 <__floatsidf>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000937a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000937e:	52                   	push   edx
c000937f:	50                   	push   eax
c0009380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009388:	e8 53 b3 01 00       	call   c00246e0 <__muldf3>
c000938d:	5d                   	pop    ebp
c000938e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009392:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009396:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009399:	e8 a5 b9 01 00       	call   c0024d43 <__floatsidf>
c000939e:	83 c4 10             	add    esp,0x10
c00093a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093a9:	52                   	push   edx
c00093aa:	50                   	push   eax
c00093ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b3:	e8 0c b6 01 00       	call   c00249c4 <__divdf3>
c00093b8:	83 c4 10             	add    esp,0x10
c00093bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d3:	e8 8b ac 01 00       	call   c0024063 <__adddf3>
c00093d8:	83 c4 10             	add    esp,0x10
c00093db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e3:	31 ff                	xor    edi,edi
c00093e5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093e8:	39 f8                	cmp    eax,edi
c00093ea:	0f 8e ac 00 00 00    	jle    c000949c <linear_vari_process+0x604>
c00093f0:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093f5:	29 c1                	sub    ecx,eax
c00093f7:	89 c8                	mov    eax,ecx
c00093f9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093fc:	01 f8                	add    eax,edi
c00093fe:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009402:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009405:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000940c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000940f:	51                   	push   ecx
c0009410:	01 f8                	add    eax,edi
c0009412:	51                   	push   ecx
c0009413:	47                   	inc    edi
c0009414:	55                   	push   ebp
c0009415:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009418:	e8 db a5 01 00       	call   c00239f8 <__subsf3>
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	e8 b2 bc 01 00       	call   c00250d7 <__extendsfdf2>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000942c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009430:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009434:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009438:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009440:	e8 9b b2 01 00       	call   c00246e0 <__muldf3>
c0009445:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009448:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000944c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009450:	e8 82 bc 01 00       	call   c00250d7 <__extendsfdf2>
c0009455:	83 c4 10             	add    esp,0x10
c0009458:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000945c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009460:	52                   	push   edx
c0009461:	50                   	push   eax
c0009462:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009466:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946a:	e8 f4 ab 01 00       	call   c0024063 <__adddf3>
c000946f:	5d                   	pop    ebp
c0009470:	59                   	pop    ecx
c0009471:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009475:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000947d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009481:	e8 2d bb 01 00       	call   c0024fb3 <__truncdfsf2>
c0009486:	83 c4 10             	add    esp,0x10
c0009489:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000948d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009491:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009494:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009497:	e9 49 ff ff ff       	jmp    c00093e5 <linear_vari_process+0x54d>
c000949c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	68 00 00 f0 3f       	push   0x3ff00000
c00094a9:	6a 00                	push   0x0
c00094ab:	e8 14 b5 01 00       	call   c00249c4 <__divdf3>
c00094b0:	83 c4 10             	add    esp,0x10
c00094b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094bb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094bf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cb:	e8 93 ab 01 00       	call   c0024063 <__adddf3>
c00094d0:	59                   	pop    ecx
c00094d1:	5f                   	pop    edi
c00094d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e2:	e8 1b f9 ff ff       	call   c0008e02 <fmod_one>
c00094e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009502:	e8 ad b1 01 00       	call   c00246b4 <__subdf3>
c0009507:	e9 1b fd ff ff       	jmp    c0009227 <linear_vari_process+0x38f>
c000950c:	39 fd                	cmp    ebp,edi
c000950e:	7d 38                	jge    c0009548 <linear_vari_process+0x6b0>
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	89 f8                	mov    eax,edi
c0009515:	29 e8                	sub    eax,ebp
c0009517:	99                   	cdq    
c0009518:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951b:	50                   	push   eax
c000951c:	e8 22 b8 01 00       	call   c0024d43 <__floatsidf>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009528:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952c:	52                   	push   edx
c000952d:	50                   	push   eax
c000952e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009532:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009536:	e8 28 ab 01 00       	call   c0024063 <__adddf3>
c000953b:	83 c4 10             	add    esp,0x10
c000953e:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009541:	89 04 24             	mov    DWORD PTR [esp],eax
c0009544:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009548:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000954f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009553:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009556:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009559:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955c:	85 c0                	test   eax,eax
c000955e:	7f 27                	jg     c0009587 <linear_vari_process+0x6ef>
c0009560:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956c:	89 01                	mov    DWORD PTR [ecx],eax
c000956e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009571:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009574:	99                   	cdq    
c0009575:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009578:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000957e:	99                   	cdq    
c000957f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009582:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0009585:	eb 25                	jmp    c00095ac <linear_vari_process+0x714>
c0009587:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958a:	31 d2                	xor    edx,edx
c000958c:	29 c8                	sub    eax,ecx
c000958e:	c1 e0 02             	shl    eax,0x2
c0009591:	39 d1                	cmp    ecx,edx
c0009593:	7e cb                	jle    c0009560 <linear_vari_process+0x6c8>
c0009595:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009597:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959a:	83 c0 04             	add    eax,0x4
c000959d:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a1:	42                   	inc    edx
c00095a2:	eb ed                	jmp    c0009591 <linear_vari_process+0x6f9>
c00095a4:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095b0:	83 c4 3c             	add    esp,0x3c
c00095b3:	5b                   	pop    ebx
c00095b4:	5e                   	pop    esi
c00095b5:	5f                   	pop    edi
c00095b6:	5d                   	pop    ebp
c00095b7:	c3                   	ret    

c00095b8 <linear_reset>:
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095bf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095c2:	85 c0                	test   eax,eax
c00095c4:	74 20                	je     c00095e6 <linear_reset+0x2e>
c00095c6:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c9:	83 c0 1c             	add    eax,0x1c
c00095cc:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095cf:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d6:	c1 e2 02             	shl    edx,0x2
c00095d9:	51                   	push   ecx
c00095da:	52                   	push   edx
c00095db:	6a 00                	push   0x0
c00095dd:	50                   	push   eax
c00095de:	e8 e2 70 ff ff       	call   c00006c5 <memset>
c00095e3:	83 c4 10             	add    esp,0x10
c00095e6:	83 c4 0c             	add    esp,0xc
c00095e9:	c3                   	ret    

c00095ea <linear_get_name>:
c00095ea:	31 c0                	xor    eax,eax
c00095ec:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095f1:	75 05                	jne    c00095f8 <linear_get_name+0xe>
c00095f3:	b8 a0 68 02 c0       	mov    eax,0xc00268a0
c00095f8:	c3                   	ret    

c00095f9 <linear_get_description>:
c00095f9:	31 c0                	xor    eax,eax
c00095fb:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009600:	75 05                	jne    c0009607 <linear_get_description+0xe>
c0009602:	b8 b4 68 02 c0       	mov    eax,0xc00268b4
c0009607:	c3                   	ret    

c0009608 <linear_set_converter>:
c0009608:	53                   	push   ebx
c0009609:	b8 0a 00 00 00       	mov    eax,0xa
c000960e:	83 ec 08             	sub    esp,0x8
c0009611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009615:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000961a:	75 6e                	jne    c000968a <linear_set_converter+0x82>
c000961c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961f:	85 c0                	test   eax,eax
c0009621:	74 13                	je     c0009636 <linear_set_converter+0x2e>
c0009623:	83 ec 0c             	sub    esp,0xc
c0009626:	50                   	push   eax
c0009627:	e8 52 5b 00 00       	call   c000f17e <free>
c000962c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009633:	83 c4 10             	add    esp,0x10
c0009636:	50                   	push   eax
c0009637:	50                   	push   eax
c0009638:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000963b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009642:	50                   	push   eax
c0009643:	6a 01                	push   0x1
c0009645:	e8 54 5b 00 00       	call   c000f19e <calloc>
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	89 c2                	mov    edx,eax
c000964f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009652:	85 d2                	test   edx,edx
c0009654:	b8 01 00 00 00       	mov    eax,0x1
c0009659:	74 2f                	je     c000968a <linear_set_converter+0x82>
c000965b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000965e:	83 ec 0c             	sub    esp,0xc
c0009661:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009664:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000966a:	c7 43 24 98 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e98
c0009671:	c7 43 20 98 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e98
c0009678:	c7 43 28 b8 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b8
c000967f:	53                   	push   ebx
c0009680:	e8 33 ff ff ff       	call   c00095b8 <linear_reset>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	31 c0                	xor    eax,eax
c000968a:	83 c4 08             	add    esp,0x8
c000968d:	5b                   	pop    ebx
c000968e:	c3                   	ret    

c000968f <is_bad_src_ratio>:
c000968f:	83 ec 1c             	sub    esp,0x1c
c0009692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000969a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096a2:	b8 00 00 00 00       	mov    eax,0x0
c00096a7:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096ac:	52                   	push   edx
c00096ad:	50                   	push   eax
c00096ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b6:	e8 f4 b8 01 00       	call   c0024faf <__ltdf2>
c00096bb:	83 c4 10             	add    esp,0x10
c00096be:	85 c0                	test   eax,eax
c00096c0:	78 20                	js     c00096e2 <is_bad_src_ratio+0x53>
c00096c2:	b8 00 00 00 00       	mov    eax,0x0
c00096c7:	ba 00 00 70 40       	mov    edx,0x40700000
c00096cc:	52                   	push   edx
c00096cd:	50                   	push   eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 b6 b8 01 00       	call   c0024f91 <__gtdf2>
c00096db:	83 c4 10             	add    esp,0x10
c00096de:	85 c0                	test   eax,eax
c00096e0:	7e 07                	jle    c00096e9 <is_bad_src_ratio+0x5a>
c00096e2:	b8 01 00 00 00       	mov    eax,0x1
c00096e7:	eb 05                	jmp    c00096ee <is_bad_src_ratio+0x5f>
c00096e9:	b8 00 00 00 00       	mov    eax,0x0
c00096ee:	83 c4 1c             	add    esp,0x1c
c00096f1:	c3                   	ret    

c00096f2 <int_to_fp>:
c00096f2:	c1 e0 0c             	shl    eax,0xc
c00096f5:	c3                   	ret    

c00096f6 <fp_to_int>:
c00096f6:	c1 f8 0c             	sar    eax,0xc
c00096f9:	c3                   	ret    

c00096fa <fp_fraction_part>:
c00096fa:	25 ff 0f 00 00       	and    eax,0xfff
c00096ff:	c3                   	ret    

c0009700 <fp_to_double>:
c0009700:	83 ec 1c             	sub    esp,0x1c
c0009703:	e8 f2 ff ff ff       	call   c00096fa <fp_fraction_part>
c0009708:	83 ec 0c             	sub    esp,0xc
c000970b:	50                   	push   eax
c000970c:	e8 32 b6 01 00       	call   c0024d43 <__floatsidf>
c0009711:	83 c4 10             	add    esp,0x10
c0009714:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009718:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000971c:	68 00 00 30 3f       	push   0x3f300000
c0009721:	6a 00                	push   0x0
c0009723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972b:	e8 b0 af 01 00       	call   c00246e0 <__muldf3>
c0009730:	83 c4 2c             	add    esp,0x2c
c0009733:	c3                   	ret    

c0009734 <calc_output_single>:
c0009734:	55                   	push   ebp
c0009735:	57                   	push   edi
c0009736:	56                   	push   esi
c0009737:	89 c6                	mov    esi,eax
c0009739:	53                   	push   ebx
c000973a:	89 d3                	mov    ebx,edx
c000973c:	83 ec 4c             	sub    esp,0x4c
c000973f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009743:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009746:	e8 a7 ff ff ff       	call   c00096f2 <int_to_fp>
c000974b:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000974e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009752:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009756:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000975a:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000975d:	99                   	cdq    
c000975e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009766:	f7 fb                	idiv   ebx
c0009768:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009770:	89 da                	mov    edx,ebx
c0009772:	0f af d0             	imul   edx,eax
c0009775:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009779:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000977d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009781:	29 c2                	sub    edx,eax
c0009783:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000978a:	83 c5 04             	add    ebp,0x4
c000978d:	e8 6e ff ff ff       	call   c0009700 <fp_to_double>
c0009792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009796:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979e:	e8 53 ff ff ff       	call   c00096f6 <fp_to_int>
c00097a3:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097a6:	52                   	push   edx
c00097a7:	52                   	push   edx
c00097a8:	51                   	push   ecx
c00097a9:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097ad:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097b1:	e8 42 a2 01 00       	call   c00239f8 <__subsf3>
c00097b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00097b9:	e8 19 b9 01 00       	call   c00250d7 <__extendsfdf2>
c00097be:	83 c4 10             	add    esp,0x10
c00097c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097c5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097d9:	e8 02 af 01 00       	call   c00246e0 <__muldf3>
c00097de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097e2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097e9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097ed:	e8 e5 b8 01 00       	call   c00250d7 <__extendsfdf2>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009803:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009807:	e8 57 a8 01 00       	call   c0024063 <__adddf3>
c000980c:	59                   	pop    ecx
c000980d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009811:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009815:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000981b:	e8 b7 b8 01 00       	call   c00250d7 <__extendsfdf2>
c0009820:	83 c4 10             	add    esp,0x10
c0009823:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009827:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000982b:	52                   	push   edx
c000982c:	50                   	push   eax
c000982d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009831:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009835:	e8 a6 ae 01 00       	call   c00246e0 <__muldf3>
c000983a:	83 c4 10             	add    esp,0x10
c000983d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009841:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009845:	52                   	push   edx
c0009846:	50                   	push   eax
c0009847:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000984f:	e8 0f a8 01 00       	call   c0024063 <__adddf3>
c0009854:	83 c4 10             	add    esp,0x10
c0009857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000985b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000985f:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009863:	0f 89 1d ff ff ff    	jns    c0009786 <calc_output_single+0x52>
c0009869:	89 d9                	mov    ecx,ebx
c000986b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000986f:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009873:	89 dd                	mov    ebp,ebx
c0009875:	29 c8                	sub    eax,ecx
c0009877:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000987f:	99                   	cdq    
c0009880:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009888:	f7 fb                	idiv   ebx
c000988a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000988e:	0f af e8             	imul   ebp,eax
c0009891:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009895:	01 cd                	add    ebp,ecx
c0009897:	8d 34 86             	lea    esi,[esi+eax*4]
c000989a:	89 e8                	mov    eax,ebp
c000989c:	83 ee 04             	sub    esi,0x4
c000989f:	e8 5c fe ff ff       	call   c0009700 <fp_to_double>
c00098a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098ac:	89 e8                	mov    eax,ebp
c00098ae:	29 dd                	sub    ebp,ebx
c00098b0:	e8 41 fe ff ff       	call   c00096f6 <fp_to_int>
c00098b5:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098b8:	52                   	push   edx
c00098b9:	52                   	push   edx
c00098ba:	51                   	push   ecx
c00098bb:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098bf:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098c3:	e8 30 a1 01 00       	call   c00239f8 <__subsf3>
c00098c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00098cb:	e8 07 b8 01 00       	call   c00250d7 <__extendsfdf2>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098eb:	e8 f0 ad 01 00       	call   c00246e0 <__muldf3>
c00098f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098ff:	e8 d3 b7 01 00       	call   c00250d7 <__extendsfdf2>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009915:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009919:	e8 45 a7 01 00       	call   c0024063 <__adddf3>
c000991e:	59                   	pop    ecx
c000991f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009923:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009927:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000992d:	e8 a5 b7 01 00       	call   c00250d7 <__extendsfdf2>
c0009932:	83 c4 10             	add    esp,0x10
c0009935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009939:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000993d:	52                   	push   edx
c000993e:	50                   	push   eax
c000993f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009943:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009947:	e8 94 ad 01 00       	call   c00246e0 <__muldf3>
c000994c:	83 c4 10             	add    esp,0x10
c000994f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009957:	52                   	push   edx
c0009958:	50                   	push   eax
c0009959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000995d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009961:	e8 fd a6 01 00       	call   c0024063 <__adddf3>
c0009966:	83 c4 10             	add    esp,0x10
c0009969:	85 ed                	test   ebp,ebp
c000996b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000996f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009973:	0f 8f 21 ff ff ff    	jg     c000989a <calc_output_single+0x166>
c0009979:	52                   	push   edx
c000997a:	50                   	push   eax
c000997b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000997f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009983:	e8 db a6 01 00       	call   c0024063 <__adddf3>
c0009988:	83 c4 5c             	add    esp,0x5c
c000998b:	5b                   	pop    ebx
c000998c:	5e                   	pop    esi
c000998d:	5f                   	pop    edi
c000998e:	5d                   	pop    ebp
c000998f:	c3                   	ret    

c0009990 <calc_output_stereo>:
c0009990:	55                   	push   ebp
c0009991:	89 cd                	mov    ebp,ecx
c0009993:	57                   	push   edi
c0009994:	56                   	push   esi
c0009995:	53                   	push   ebx
c0009996:	89 c3                	mov    ebx,eax
c0009998:	83 ec 6c             	sub    esp,0x6c
c000999b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000999f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099a6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099b1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099b5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099b8:	e8 35 fd ff ff       	call   c00096f2 <int_to_fp>
c00099bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099d1:	29 c8                	sub    eax,ecx
c00099d3:	99                   	cdq    
c00099d4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099dc:	0f af d0             	imul   edx,eax
c00099df:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099e2:	31 d2                	xor    edx,edx
c00099e4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099ec:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099ef:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099f3:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099f6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099fa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099fe:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a01:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a06:	29 c1                	sub    ecx,eax
c0009a08:	31 c0                	xor    eax,eax
c0009a0a:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a15:	83 c7 08             	add    edi,0x8
c0009a18:	e8 e3 fc ff ff       	call   c0009700 <fp_to_double>
c0009a1d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a29:	e8 c8 fc ff ff       	call   c00096f6 <fp_to_int>
c0009a2e:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a31:	52                   	push   edx
c0009a32:	52                   	push   edx
c0009a33:	51                   	push   ecx
c0009a34:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a38:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a3c:	e8 b7 9f 01 00       	call   c00239f8 <__subsf3>
c0009a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a44:	e8 8e b6 01 00       	call   c00250d7 <__extendsfdf2>
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a50:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a60:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a64:	e8 77 ac 01 00       	call   c00246e0 <__muldf3>
c0009a69:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a6d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a74:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a78:	e8 5a b6 01 00       	call   c00250d7 <__extendsfdf2>
c0009a7d:	83 c4 10             	add    esp,0x10
c0009a80:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a84:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a88:	52                   	push   edx
c0009a89:	50                   	push   eax
c0009a8a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a8e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a92:	e8 cc a5 01 00       	call   c0024063 <__adddf3>
c0009a97:	59                   	pop    ecx
c0009a98:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a9c:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009aa0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009aa6:	e8 2c b6 01 00       	call   c00250d7 <__extendsfdf2>
c0009aab:	83 c4 10             	add    esp,0x10
c0009aae:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ab6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009abe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac6:	e8 15 ac 01 00       	call   c00246e0 <__muldf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad6:	52                   	push   edx
c0009ad7:	50                   	push   eax
c0009ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae0:	e8 7e a5 01 00       	call   c0024063 <__adddf3>
c0009ae5:	59                   	pop    ecx
c0009ae6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aee:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009af4:	e8 de b5 01 00       	call   c00250d7 <__extendsfdf2>
c0009af9:	83 c4 10             	add    esp,0x10
c0009afc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b0c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b14:	e8 c7 ab 01 00       	call   c00246e0 <__muldf3>
c0009b19:	83 c4 10             	add    esp,0x10
c0009b1c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b20:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b24:	52                   	push   edx
c0009b25:	50                   	push   eax
c0009b26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b2e:	e8 30 a5 01 00       	call   c0024063 <__adddf3>
c0009b33:	83 c4 10             	add    esp,0x10
c0009b36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b42:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b46:	0f 89 c5 fe ff ff    	jns    c0009a11 <calc_output_stereo+0x81>
c0009b4c:	29 e9                	sub    ecx,ebp
c0009b4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b52:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b56:	29 c8                	sub    eax,ecx
c0009b58:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b60:	99                   	cdq    
c0009b61:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b65:	31 d2                	xor    edx,edx
c0009b67:	0f af f8             	imul   edi,eax
c0009b6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6e:	40                   	inc    eax
c0009b6f:	01 cf                	add    edi,ecx
c0009b71:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b76:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b82:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b85:	31 c0                	xor    eax,eax
c0009b87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b8b:	89 f8                	mov    eax,edi
c0009b8d:	83 eb 08             	sub    ebx,0x8
c0009b90:	e8 6b fb ff ff       	call   c0009700 <fp_to_double>
c0009b95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b9d:	89 f8                	mov    eax,edi
c0009b9f:	e8 52 fb ff ff       	call   c00096f6 <fp_to_int>
c0009ba4:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009ba7:	52                   	push   edx
c0009ba8:	52                   	push   edx
c0009ba9:	55                   	push   ebp
c0009baa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bae:	e8 45 9e 01 00       	call   c00239f8 <__subsf3>
c0009bb3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb6:	e8 1c b5 01 00       	call   c00250d7 <__extendsfdf2>
c0009bbb:	83 c4 10             	add    esp,0x10
c0009bbe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd6:	e8 05 ab 01 00       	call   c00246e0 <__muldf3>
c0009bdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bde:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009be2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009be6:	e8 ec b4 01 00       	call   c00250d7 <__extendsfdf2>
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf6:	52                   	push   edx
c0009bf7:	50                   	push   eax
c0009bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c00:	e8 5e a4 01 00       	call   c0024063 <__adddf3>
c0009c05:	59                   	pop    ecx
c0009c06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c0a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c0e:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c14:	e8 be b4 01 00       	call   c00250d7 <__extendsfdf2>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c34:	e8 a7 aa 01 00       	call   c00246e0 <__muldf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c44:	52                   	push   edx
c0009c45:	50                   	push   eax
c0009c46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c4e:	e8 10 a4 01 00       	call   c0024063 <__adddf3>
c0009c53:	5d                   	pop    ebp
c0009c54:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c58:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c5c:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c62:	e8 70 b4 01 00       	call   c00250d7 <__extendsfdf2>
c0009c67:	83 c4 10             	add    esp,0x10
c0009c6a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c6e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c82:	e8 59 aa 01 00       	call   c00246e0 <__muldf3>
c0009c87:	83 c4 10             	add    esp,0x10
c0009c8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c8e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c92:	52                   	push   edx
c0009c93:	50                   	push   eax
c0009c94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9c:	e8 c2 a3 01 00       	call   c0024063 <__adddf3>
c0009ca1:	83 c4 10             	add    esp,0x10
c0009ca4:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cb0:	85 ff                	test   edi,edi
c0009cb2:	0f 8f d3 fe ff ff    	jg     c0009b8b <calc_output_stereo+0x1fb>
c0009cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 96 a3 01 00       	call   c0024063 <__adddf3>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cd8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cdc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce8:	e8 f3 a9 01 00       	call   c00246e0 <__muldf3>
c0009ced:	59                   	pop    ecx
c0009cee:	5b                   	pop    ebx
c0009cef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cff:	e8 af b2 01 00       	call   c0024fb3 <__truncdfsf2>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d0e:	89 03                	mov    DWORD PTR [ebx],eax
c0009d10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d20:	e8 3e a3 01 00       	call   c0024063 <__adddf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d40:	e8 9b a9 01 00       	call   c00246e0 <__muldf3>
c0009d45:	5e                   	pop    esi
c0009d46:	5f                   	pop    edi
c0009d47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d57:	e8 57 b2 01 00       	call   c0024fb3 <__truncdfsf2>
c0009d5c:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d63:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d66:	83 c4 7c             	add    esp,0x7c
c0009d69:	5b                   	pop    ebx
c0009d6a:	5e                   	pop    esi
c0009d6b:	5f                   	pop    edi
c0009d6c:	5d                   	pop    ebp
c0009d6d:	c3                   	ret    

c0009d6e <calc_output_quad>:
c0009d6e:	55                   	push   ebp
c0009d6f:	57                   	push   edi
c0009d70:	56                   	push   esi
c0009d71:	89 c6                	mov    esi,eax
c0009d73:	53                   	push   ebx
c0009d74:	83 ec 7c             	sub    esp,0x7c
c0009d77:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d7b:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d7f:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d86:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d8d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d95:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d98:	e8 55 f9 ff ff       	call   c00096f2 <int_to_fp>
c0009d9d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009da0:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009da3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009da7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009daf:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009db3:	99                   	cdq    
c0009db4:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009db8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dbc:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009dbf:	31 d2                	xor    edx,edx
c0009dc1:	0f af d8             	imul   ebx,eax
c0009dc4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009dcc:	0f af c7             	imul   eax,edi
c0009dcf:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dd3:	29 c1                	sub    ecx,eax
c0009dd5:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009ddd:	31 c0                	xor    eax,eax
c0009ddf:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009de2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009de6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dfa:	89 d8                	mov    eax,ebx
c0009dfc:	83 c7 10             	add    edi,0x10
c0009dff:	e8 fc f8 ff ff       	call   c0009700 <fp_to_double>
c0009e04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e0c:	89 d8                	mov    eax,ebx
c0009e0e:	e8 e3 f8 ff ff       	call   c00096f6 <fp_to_int>
c0009e13:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e17:	52                   	push   edx
c0009e18:	52                   	push   edx
c0009e19:	51                   	push   ecx
c0009e1a:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e1e:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e22:	e8 d1 9b 01 00       	call   c00239f8 <__subsf3>
c0009e27:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e2a:	e8 a8 b2 01 00       	call   c00250d7 <__extendsfdf2>
c0009e2f:	83 c4 10             	add    esp,0x10
c0009e32:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e36:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e42:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e4a:	e8 91 a8 01 00       	call   c00246e0 <__muldf3>
c0009e4f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e57:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	e8 74 b2 01 00       	call   c00250d7 <__extendsfdf2>
c0009e63:	83 c4 10             	add    esp,0x10
c0009e66:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6e:	52                   	push   edx
c0009e6f:	50                   	push   eax
c0009e70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e78:	e8 e6 a1 01 00       	call   c0024063 <__adddf3>
c0009e7d:	59                   	pop    ecx
c0009e7e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e82:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e86:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e8c:	e8 46 b2 01 00       	call   c00250d7 <__extendsfdf2>
c0009e91:	83 c4 10             	add    esp,0x10
c0009e94:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e98:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ea8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eac:	e8 2f a8 01 00       	call   c00246e0 <__muldf3>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebc:	52                   	push   edx
c0009ebd:	50                   	push   eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	e8 98 a1 01 00       	call   c0024063 <__adddf3>
c0009ecb:	59                   	pop    ecx
c0009ecc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ed0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ed4:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eda:	e8 f8 b1 01 00       	call   c00250d7 <__extendsfdf2>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ee6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ef6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efa:	e8 e1 a7 01 00       	call   c00246e0 <__muldf3>
c0009eff:	83 c4 10             	add    esp,0x10
c0009f02:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f06:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0a:	52                   	push   edx
c0009f0b:	50                   	push   eax
c0009f0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f14:	e8 4a a1 01 00       	call   c0024063 <__adddf3>
c0009f19:	59                   	pop    ecx
c0009f1a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f1e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f22:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f28:	e8 aa b1 01 00       	call   c00250d7 <__extendsfdf2>
c0009f2d:	83 c4 10             	add    esp,0x10
c0009f30:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f34:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f44:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f48:	e8 93 a7 01 00       	call   c00246e0 <__muldf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f54:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f58:	52                   	push   edx
c0009f59:	50                   	push   eax
c0009f5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f62:	e8 fc a0 01 00       	call   c0024063 <__adddf3>
c0009f67:	59                   	pop    ecx
c0009f68:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f6c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f70:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f76:	e8 5c b1 01 00       	call   c00250d7 <__extendsfdf2>
c0009f7b:	83 c4 10             	add    esp,0x10
c0009f7e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f82:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f92:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f96:	e8 45 a7 01 00       	call   c00246e0 <__muldf3>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fa6:	52                   	push   edx
c0009fa7:	50                   	push   eax
c0009fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb0:	e8 ae a0 01 00       	call   c0024063 <__adddf3>
c0009fb5:	83 c4 10             	add    esp,0x10
c0009fb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fbc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fc0:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fc4:	0f 89 30 fe ff ff    	jns    c0009dfa <calc_output_quad+0x8c>
c0009fca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fd6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fda:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fe2:	29 c8                	sub    eax,ecx
c0009fe4:	99                   	cdq    
c0009fe5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fe9:	31 d2                	xor    edx,edx
c0009feb:	0f af d8             	imul   ebx,eax
c0009fee:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ff2:	40                   	inc    eax
c0009ff3:	01 cb                	add    ebx,ecx
c0009ff5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009ffa:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009ffe:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a002:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a006:	8d 34 86             	lea    esi,[esi+eax*4]
c000a009:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a011:	31 c0                	xor    eax,eax
c000a013:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a017:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01f:	89 d8                	mov    eax,ebx
c000a021:	83 ee 10             	sub    esi,0x10
c000a024:	e8 d7 f6 ff ff       	call   c0009700 <fp_to_double>
c000a029:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a02d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a031:	89 d8                	mov    eax,ebx
c000a033:	e8 be f6 ff ff       	call   c00096f6 <fp_to_int>
c000a038:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a03c:	52                   	push   edx
c000a03d:	52                   	push   edx
c000a03e:	57                   	push   edi
c000a03f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a043:	e8 b0 99 01 00       	call   c00239f8 <__subsf3>
c000a048:	89 04 24             	mov    DWORD PTR [esp],eax
c000a04b:	e8 87 b0 01 00       	call   c00250d7 <__extendsfdf2>
c000a050:	83 c4 10             	add    esp,0x10
c000a053:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a057:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a063:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a067:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a06b:	e8 70 a6 01 00       	call   c00246e0 <__muldf3>
c000a070:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a07b:	e8 57 b0 01 00       	call   c00250d7 <__extendsfdf2>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a087:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08b:	52                   	push   edx
c000a08c:	50                   	push   eax
c000a08d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a095:	e8 c9 9f 01 00       	call   c0024063 <__adddf3>
c000a09a:	59                   	pop    ecx
c000a09b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a09f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0a3:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0a9:	e8 29 b0 01 00       	call   c00250d7 <__extendsfdf2>
c000a0ae:	83 c4 10             	add    esp,0x10
c000a0b1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c9:	e8 12 a6 01 00       	call   c00246e0 <__muldf3>
c000a0ce:	83 c4 10             	add    esp,0x10
c000a0d1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d9:	52                   	push   edx
c000a0da:	50                   	push   eax
c000a0db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0e3:	e8 7b 9f 01 00       	call   c0024063 <__adddf3>
c000a0e8:	5f                   	pop    edi
c000a0e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0ed:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0f1:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0f7:	e8 db af 01 00       	call   c00250d7 <__extendsfdf2>
c000a0fc:	83 c4 10             	add    esp,0x10
c000a0ff:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a103:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a10f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a113:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a117:	e8 c4 a5 01 00       	call   c00246e0 <__muldf3>
c000a11c:	83 c4 10             	add    esp,0x10
c000a11f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a123:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a127:	52                   	push   edx
c000a128:	50                   	push   eax
c000a129:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a12d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a131:	e8 2d 9f 01 00       	call   c0024063 <__adddf3>
c000a136:	59                   	pop    ecx
c000a137:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a13b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a13f:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a145:	e8 8d af 01 00       	call   c00250d7 <__extendsfdf2>
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a151:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a161:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a165:	e8 76 a5 01 00       	call   c00246e0 <__muldf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a171:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a175:	52                   	push   edx
c000a176:	50                   	push   eax
c000a177:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a17f:	e8 df 9e 01 00       	call   c0024063 <__adddf3>
c000a184:	5f                   	pop    edi
c000a185:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a189:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a18d:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a193:	e8 3f af 01 00       	call   c00250d7 <__extendsfdf2>
c000a198:	83 c4 10             	add    esp,0x10
c000a19b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a19f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1b3:	e8 28 a5 01 00       	call   c00246e0 <__muldf3>
c000a1b8:	83 c4 10             	add    esp,0x10
c000a1bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1c3:	52                   	push   edx
c000a1c4:	50                   	push   eax
c000a1c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1c9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1cd:	e8 91 9e 01 00       	call   c0024063 <__adddf3>
c000a1d2:	83 c4 10             	add    esp,0x10
c000a1d5:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1dd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1e1:	85 db                	test   ebx,ebx
c000a1e3:	0f 8f 36 fe ff ff    	jg     c000a01f <calc_output_quad+0x2b1>
c000a1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f9:	e8 65 9e 01 00       	call   c0024063 <__adddf3>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a205:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a215:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a219:	e8 c2 a4 01 00       	call   c00246e0 <__muldf3>
c000a21e:	59                   	pop    ecx
c000a21f:	5b                   	pop    ebx
c000a220:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a224:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a230:	e8 7e ad 01 00       	call   c0024fb3 <__truncdfsf2>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a23f:	89 06                	mov    DWORD PTR [esi],eax
c000a241:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a245:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a249:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a24d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a251:	e8 0d 9e 01 00       	call   c0024063 <__adddf3>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a25d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a269:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a271:	e8 6a a4 01 00       	call   c00246e0 <__muldf3>
c000a276:	5e                   	pop    esi
c000a277:	5f                   	pop    edi
c000a278:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a27c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a280:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a288:	e8 26 ad 01 00       	call   c0024fb3 <__truncdfsf2>
c000a28d:	83 c4 10             	add    esp,0x10
c000a290:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a297:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a29a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a29e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2aa:	e8 b4 9d 01 00       	call   c0024063 <__adddf3>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ca:	e8 11 a4 01 00       	call   c00246e0 <__muldf3>
c000a2cf:	5d                   	pop    ebp
c000a2d0:	59                   	pop    ecx
c000a2d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e1:	e8 cd ac 01 00       	call   c0024fb3 <__truncdfsf2>
c000a2e6:	83 c4 10             	add    esp,0x10
c000a2e9:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2f0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a303:	e8 5b 9d 01 00       	call   c0024063 <__adddf3>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a317:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a323:	e8 b8 a3 01 00       	call   c00246e0 <__muldf3>
c000a328:	5b                   	pop    ebx
c000a329:	5e                   	pop    esi
c000a32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a32e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33a:	e8 74 ac 01 00       	call   c0024fb3 <__truncdfsf2>
c000a33f:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a346:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a349:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a34f:	5b                   	pop    ebx
c000a350:	5e                   	pop    esi
c000a351:	5f                   	pop    edi
c000a352:	5d                   	pop    ebp
c000a353:	c3                   	ret    

c000a354 <calc_output_hex>:
c000a354:	55                   	push   ebp
c000a355:	89 cd                	mov    ebp,ecx
c000a357:	57                   	push   edi
c000a358:	56                   	push   esi
c000a359:	53                   	push   ebx
c000a35a:	89 c3                	mov    ebx,eax
c000a35c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a362:	89 14 24             	mov    DWORD PTR [esp],edx
c000a365:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a36c:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a37b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a37e:	e8 6f f3 ff ff       	call   c00096f2 <int_to_fp>
c000a383:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a386:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a38a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a38d:	29 c8                	sub    eax,ecx
c000a38f:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a393:	99                   	cdq    
c000a394:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a39c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a39f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3a7:	0f af f8             	imul   edi,eax
c000a3aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3ad:	01 cf                	add    edi,ecx
c000a3af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3b3:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3b6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3ba:	0f af c2             	imul   eax,edx
c000a3bd:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3c1:	29 c1                	sub    ecx,eax
c000a3c3:	31 d2                	xor    edx,edx
c000a3c5:	31 c0                	xor    eax,eax
c000a3c7:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3d6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3de:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3e6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3f2:	89 f8                	mov    eax,edi
c000a3f4:	e8 07 f3 ff ff       	call   c0009700 <fp_to_double>
c000a3f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a401:	89 f8                	mov    eax,edi
c000a403:	e8 ee f2 ff ff       	call   c00096f6 <fp_to_int>
c000a408:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40c:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a40f:	52                   	push   edx
c000a410:	52                   	push   edx
c000a411:	51                   	push   ecx
c000a412:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a416:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a41d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a421:	e8 d2 95 01 00       	call   c00239f8 <__subsf3>
c000a426:	89 04 24             	mov    DWORD PTR [esp],eax
c000a429:	e8 a9 ac 01 00       	call   c00250d7 <__extendsfdf2>
c000a42e:	83 c4 10             	add    esp,0x10
c000a431:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a435:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a441:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a445:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a449:	e8 92 a2 01 00       	call   c00246e0 <__muldf3>
c000a44e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a452:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a456:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a459:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a45d:	e8 75 ac 01 00       	call   c00250d7 <__extendsfdf2>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a469:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46d:	52                   	push   edx
c000a46e:	50                   	push   eax
c000a46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a477:	e8 e7 9b 01 00       	call   c0024063 <__adddf3>
c000a47c:	59                   	pop    ecx
c000a47d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a481:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a485:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a48b:	e8 47 ac 01 00       	call   c00250d7 <__extendsfdf2>
c000a490:	83 c4 10             	add    esp,0x10
c000a493:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a497:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a49b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a49f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ab:	e8 30 a2 01 00       	call   c00246e0 <__muldf3>
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bb:	52                   	push   edx
c000a4bc:	50                   	push   eax
c000a4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c5:	e8 99 9b 01 00       	call   c0024063 <__adddf3>
c000a4ca:	59                   	pop    ecx
c000a4cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4d3:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4d9:	e8 f9 ab 01 00       	call   c00250d7 <__extendsfdf2>
c000a4de:	83 c4 10             	add    esp,0x10
c000a4e1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4e5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4f9:	e8 e2 a1 01 00       	call   c00246e0 <__muldf3>
c000a4fe:	83 c4 10             	add    esp,0x10
c000a501:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a505:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a509:	52                   	push   edx
c000a50a:	50                   	push   eax
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a513:	e8 4b 9b 01 00       	call   c0024063 <__adddf3>
c000a518:	59                   	pop    ecx
c000a519:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a51d:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a521:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a527:	e8 ab ab 01 00       	call   c00250d7 <__extendsfdf2>
c000a52c:	83 c4 10             	add    esp,0x10
c000a52f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a533:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a537:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a53f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a543:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a547:	e8 94 a1 01 00       	call   c00246e0 <__muldf3>
c000a54c:	83 c4 10             	add    esp,0x10
c000a54f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a553:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a557:	52                   	push   edx
c000a558:	50                   	push   eax
c000a559:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a55d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a561:	e8 fd 9a 01 00       	call   c0024063 <__adddf3>
c000a566:	59                   	pop    ecx
c000a567:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a575:	e8 5d ab 01 00       	call   c00250d7 <__extendsfdf2>
c000a57a:	83 c4 10             	add    esp,0x10
c000a57d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a581:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a585:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a591:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a595:	e8 46 a1 01 00       	call   c00246e0 <__muldf3>
c000a59a:	83 c4 10             	add    esp,0x10
c000a59d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a5:	52                   	push   edx
c000a5a6:	50                   	push   eax
c000a5a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5af:	e8 af 9a 01 00       	call   c0024063 <__adddf3>
c000a5b4:	59                   	pop    ecx
c000a5b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5b9:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5bd:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5c3:	e8 0f ab 01 00       	call   c00250d7 <__extendsfdf2>
c000a5c8:	83 c4 10             	add    esp,0x10
c000a5cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5df:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e3:	e8 f8 a0 01 00       	call   c00246e0 <__muldf3>
c000a5e8:	83 c4 10             	add    esp,0x10
c000a5eb:	83 c6 18             	add    esi,0x18
c000a5ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f6:	52                   	push   edx
c000a5f7:	50                   	push   eax
c000a5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a600:	e8 5e 9a 01 00       	call   c0024063 <__adddf3>
c000a605:	59                   	pop    ecx
c000a606:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a60a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a60e:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a614:	e8 be aa 01 00       	call   c00250d7 <__extendsfdf2>
c000a619:	83 c4 10             	add    esp,0x10
c000a61c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a620:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a630:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a634:	e8 a7 a0 01 00       	call   c00246e0 <__muldf3>
c000a639:	83 c4 10             	add    esp,0x10
c000a63c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a640:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a644:	52                   	push   edx
c000a645:	50                   	push   eax
c000a646:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a64e:	e8 10 9a 01 00       	call   c0024063 <__adddf3>
c000a653:	83 c4 10             	add    esp,0x10
c000a656:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a65a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a65e:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a661:	0f 89 8b fd ff ff    	jns    c000a3f2 <calc_output_hex+0x9e>
c000a667:	31 f6                	xor    esi,esi
c000a669:	31 ff                	xor    edi,edi
c000a66b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a66f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a672:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a676:	29 e9                	sub    ecx,ebp
c000a678:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a67c:	29 c8                	sub    eax,ecx
c000a67e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a681:	99                   	cdq    
c000a682:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a686:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a689:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a68d:	0f af e8             	imul   ebp,eax
c000a690:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a694:	40                   	inc    eax
c000a695:	01 cd                	add    ebp,ecx
c000a697:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a69c:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6a0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6a4:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6a8:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6ab:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6b3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6b7:	89 e8                	mov    eax,ebp
c000a6b9:	e8 42 f0 ff ff       	call   c0009700 <fp_to_double>
c000a6be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6c6:	89 e8                	mov    eax,ebp
c000a6c8:	e8 29 f0 ff ff       	call   c00096f6 <fp_to_int>
c000a6cd:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6d1:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6d4:	52                   	push   edx
c000a6d5:	52                   	push   edx
c000a6d6:	51                   	push   ecx
c000a6d7:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6de:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6e5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6e9:	e8 0a 93 01 00       	call   c00239f8 <__subsf3>
c000a6ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6f1:	e8 e1 a9 01 00       	call   c00250d7 <__extendsfdf2>
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a705:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a709:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a711:	e8 ca 9f 01 00       	call   c00246e0 <__muldf3>
c000a716:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a71d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a721:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a724:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a728:	e8 aa a9 01 00       	call   c00250d7 <__extendsfdf2>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a734:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a738:	52                   	push   edx
c000a739:	50                   	push   eax
c000a73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a742:	e8 1c 99 01 00       	call   c0024063 <__adddf3>
c000a747:	59                   	pop    ecx
c000a748:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a74c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a750:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a756:	e8 7c a9 01 00       	call   c00250d7 <__extendsfdf2>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a762:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a766:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a76e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a772:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a776:	e8 65 9f 01 00       	call   c00246e0 <__muldf3>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a782:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a786:	52                   	push   edx
c000a787:	50                   	push   eax
c000a788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a78c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a790:	e8 ce 98 01 00       	call   c0024063 <__adddf3>
c000a795:	59                   	pop    ecx
c000a796:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a79a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a79e:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7a4:	e8 2e a9 01 00       	call   c00250d7 <__extendsfdf2>
c000a7a9:	83 c4 10             	add    esp,0x10
c000a7ac:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c4:	e8 17 9f 01 00       	call   c00246e0 <__muldf3>
c000a7c9:	83 c4 10             	add    esp,0x10
c000a7cc:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d4:	52                   	push   edx
c000a7d5:	50                   	push   eax
c000a7d6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7da:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7de:	e8 80 98 01 00       	call   c0024063 <__adddf3>
c000a7e3:	59                   	pop    ecx
c000a7e4:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7e8:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7ec:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7f2:	e8 e0 a8 01 00       	call   c00250d7 <__extendsfdf2>
c000a7f7:	83 c4 10             	add    esp,0x10
c000a7fa:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7fe:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a80e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a812:	e8 c9 9e 01 00       	call   c00246e0 <__muldf3>
c000a817:	83 c4 10             	add    esp,0x10
c000a81a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a822:	52                   	push   edx
c000a823:	50                   	push   eax
c000a824:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a828:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82c:	e8 32 98 01 00       	call   c0024063 <__adddf3>
c000a831:	59                   	pop    ecx
c000a832:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a836:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a83a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a840:	e8 92 a8 01 00       	call   c00250d7 <__extendsfdf2>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a84c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a850:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a858:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a85c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a860:	e8 7b 9e 01 00       	call   c00246e0 <__muldf3>
c000a865:	83 c4 10             	add    esp,0x10
c000a868:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a870:	52                   	push   edx
c000a871:	50                   	push   eax
c000a872:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a876:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a87a:	e8 e4 97 01 00       	call   c0024063 <__adddf3>
c000a87f:	59                   	pop    ecx
c000a880:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a884:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a888:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a88e:	e8 44 a8 01 00       	call   c00250d7 <__extendsfdf2>
c000a893:	83 c4 10             	add    esp,0x10
c000a896:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a89a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a89e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8aa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ae:	e8 2d 9e 01 00       	call   c00246e0 <__muldf3>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	83 eb 18             	sub    ebx,0x18
c000a8b9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c1:	52                   	push   edx
c000a8c2:	50                   	push   eax
c000a8c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8cb:	e8 93 97 01 00       	call   c0024063 <__adddf3>
c000a8d0:	59                   	pop    ecx
c000a8d1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8d5:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8d9:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8df:	e8 f3 a7 01 00       	call   c00250d7 <__extendsfdf2>
c000a8e4:	83 c4 10             	add    esp,0x10
c000a8e7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8eb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8ff:	e8 dc 9d 01 00       	call   c00246e0 <__muldf3>
c000a904:	83 c4 10             	add    esp,0x10
c000a907:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a90b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a90f:	52                   	push   edx
c000a910:	50                   	push   eax
c000a911:	57                   	push   edi
c000a912:	56                   	push   esi
c000a913:	e8 4b 97 01 00       	call   c0024063 <__adddf3>
c000a918:	83 c4 10             	add    esp,0x10
c000a91b:	89 c6                	mov    esi,eax
c000a91d:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a920:	89 d7                	mov    edi,edx
c000a922:	85 ed                	test   ebp,ebp
c000a924:	0f 8f 8d fd ff ff    	jg     c000a6b7 <calc_output_hex+0x363>
c000a92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a932:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a936:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93a:	e8 24 97 01 00       	call   c0024063 <__adddf3>
c000a93f:	83 c4 10             	add    esp,0x10
c000a942:	89 04 24             	mov    DWORD PTR [esp],eax
c000a945:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a949:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a955:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a959:	e8 82 9d 01 00       	call   c00246e0 <__muldf3>
c000a95e:	59                   	pop    ecx
c000a95f:	5b                   	pop    ebx
c000a960:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a968:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a970:	e8 3e a6 01 00       	call   c0024fb3 <__truncdfsf2>
c000a975:	83 c4 10             	add    esp,0x10
c000a978:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a97f:	89 03                	mov    DWORD PTR [ebx],eax
c000a981:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a985:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a989:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a98d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a991:	e8 cd 96 01 00       	call   c0024063 <__adddf3>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	89 04 24             	mov    DWORD PTR [esp],eax
c000a99c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b0:	e8 2b 9d 01 00       	call   c00246e0 <__muldf3>
c000a9b5:	5d                   	pop    ebp
c000a9b6:	59                   	pop    ecx
c000a9b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c7:	e8 e7 a5 01 00       	call   c0024fb3 <__truncdfsf2>
c000a9cc:	83 c4 10             	add    esp,0x10
c000a9cf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9d6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9dd:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9e9:	e8 75 96 01 00       	call   c0024063 <__adddf3>
c000a9ee:	83 c4 10             	add    esp,0x10
c000a9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa08:	e8 d3 9c 01 00       	call   c00246e0 <__muldf3>
c000aa0d:	5b                   	pop    ebx
c000aa0e:	5d                   	pop    ebp
c000aa0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa17:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1f:	e8 8f a5 01 00       	call   c0024fb3 <__truncdfsf2>
c000aa24:	83 c4 10             	add    esp,0x10
c000aa27:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa41:	e8 1d 96 01 00       	call   c0024063 <__adddf3>
c000aa46:	83 c4 10             	add    esp,0x10
c000aa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa60:	e8 7b 9c 01 00       	call   c00246e0 <__muldf3>
c000aa65:	59                   	pop    ecx
c000aa66:	5b                   	pop    ebx
c000aa67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa77:	e8 37 a5 01 00       	call   c0024fb3 <__truncdfsf2>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa86:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa89:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa99:	e8 c5 95 01 00       	call   c0024063 <__adddf3>
c000aa9e:	83 c4 10             	add    esp,0x10
c000aaa1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaa4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaa8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab8:	e8 23 9c 01 00       	call   c00246e0 <__muldf3>
c000aabd:	5d                   	pop    ebp
c000aabe:	59                   	pop    ecx
c000aabf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aac3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	e8 df a4 01 00       	call   c0024fb3 <__truncdfsf2>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aade:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aae1:	57                   	push   edi
c000aae2:	56                   	push   esi
c000aae3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aae7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaeb:	e8 73 95 01 00       	call   c0024063 <__adddf3>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aafa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0a:	e8 d1 9b 01 00       	call   c00246e0 <__muldf3>
c000ab0f:	5b                   	pop    ebx
c000ab10:	5e                   	pop    esi
c000ab11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab21:	e8 8d a4 01 00       	call   c0024fb3 <__truncdfsf2>
c000ab26:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab2d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab30:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab36:	5b                   	pop    ebx
c000ab37:	5e                   	pop    esi
c000ab38:	5f                   	pop    edi
c000ab39:	5d                   	pop    ebp
c000ab3a:	c3                   	ret    

c000ab3b <sinc_reset>:
c000ab3b:	56                   	push   esi
c000ab3c:	53                   	push   ebx
c000ab3d:	51                   	push   ecx
c000ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab42:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab45:	85 db                	test   ebx,ebx
c000ab47:	74 59                	je     c000aba2 <sinc_reset+0x67>
c000ab49:	31 d2                	xor    edx,edx
c000ab4b:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab52:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab55:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab58:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab5f:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab66:	31 c0                	xor    eax,eax
c000ab68:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab6e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab71:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab74:	52                   	push   edx
c000ab75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab78:	c1 e0 02             	shl    eax,0x2
c000ab7b:	50                   	push   eax
c000ab7c:	6a 00                	push   0x0
c000ab7e:	56                   	push   esi
c000ab7f:	e8 41 5b ff ff       	call   c00006c5 <memset>
c000ab84:	83 c4 0c             	add    esp,0xc
c000ab87:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab8a:	c1 e0 02             	shl    eax,0x2
c000ab8d:	50                   	push   eax
c000ab8e:	68 aa 00 00 00       	push   0xaa
c000ab93:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab96:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab99:	50                   	push   eax
c000ab9a:	e8 26 5b ff ff       	call   c00006c5 <memset>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	58                   	pop    eax
c000aba3:	5b                   	pop    ebx
c000aba4:	5e                   	pop    esi
c000aba5:	c3                   	ret    

c000aba6 <calc_output_multi>:
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	56                   	push   esi
c000aba9:	89 c6                	mov    esi,eax
c000abab:	53                   	push   ebx
c000abac:	83 ec 4c             	sub    esp,0x4c
c000abaf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abb3:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abbb:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abbf:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abcb:	8d 46 44             	lea    eax,[esi+0x44]
c000abce:	89 04 24             	mov    DWORD PTR [esp],eax
c000abd1:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abd7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abdb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abde:	e8 0f eb ff ff       	call   c00096f2 <int_to_fp>
c000abe3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abe6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abea:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abee:	99                   	cdq    
c000abef:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abf7:	0f af d0             	imul   edx,eax
c000abfa:	0f af c3             	imul   eax,ebx
c000abfd:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac01:	29 c1                	sub    ecx,eax
c000ac03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac07:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac0b:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac16:	57                   	push   edi
c000ac17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac1b:	6a 00                	push   0x0
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	e8 9f 5a ff ff       	call   c00006c5 <memset>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac2d:	89 df                	mov    edi,ebx
c000ac2f:	e8 cc ea ff ff       	call   c0009700 <fp_to_double>
c000ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac40:	e8 b1 ea ff ff       	call   c00096f6 <fp_to_int>
c000ac45:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac48:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac4b:	51                   	push   ecx
c000ac4c:	51                   	push   ecx
c000ac4d:	55                   	push   ebp
c000ac4e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac52:	e8 a1 8d 01 00       	call   c00239f8 <__subsf3>
c000ac57:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac5a:	e8 78 a4 01 00       	call   c00250d7 <__extendsfdf2>
c000ac5f:	83 c4 10             	add    esp,0x10
c000ac62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac7a:	e8 61 9a 01 00       	call   c00246e0 <__muldf3>
c000ac7f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac86:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac8a:	e8 48 a4 01 00       	call   c00250d7 <__extendsfdf2>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9a:	52                   	push   edx
c000ac9b:	50                   	push   eax
c000ac9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca4:	e8 ba 93 01 00       	call   c0024063 <__adddf3>
c000aca9:	83 c4 10             	add    esp,0x10
c000acac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acb4:	89 f8                	mov    eax,edi
c000acb6:	b9 08 00 00 00       	mov    ecx,0x8
c000acbb:	99                   	cdq    
c000acbc:	f7 f9                	idiv   ecx
c000acbe:	4a                   	dec    edx
c000acbf:	83 fa 06             	cmp    edx,0x6
c000acc2:	77 07                	ja     c000accb <calc_output_multi+0x125>
c000acc4:	ff 24 95 e4 68 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd971c]
c000accb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acce:	4f                   	dec    edi
c000accf:	83 ec 0c             	sub    esp,0xc
c000acd2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ace0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ace4:	e8 ee a3 01 00       	call   c00250d7 <__extendsfdf2>
c000ace9:	83 c4 10             	add    esp,0x10
c000acec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad04:	e8 d7 99 01 00       	call   c00246e0 <__muldf3>
c000ad09:	83 c4 10             	add    esp,0x10
c000ad0c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad10:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad14:	52                   	push   edx
c000ad15:	50                   	push   eax
c000ad16:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad19:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad1c:	e8 42 93 01 00       	call   c0024063 <__adddf3>
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad27:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad2d:	4f                   	dec    edi
c000ad2e:	83 ec 0c             	sub    esp,0xc
c000ad31:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad38:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad3f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad43:	e8 8f a3 01 00       	call   c00250d7 <__extendsfdf2>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad4f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad63:	e8 78 99 01 00       	call   c00246e0 <__muldf3>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad73:	52                   	push   edx
c000ad74:	50                   	push   eax
c000ad75:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad78:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad7b:	e8 e3 92 01 00       	call   c0024063 <__adddf3>
c000ad80:	83 c4 10             	add    esp,0x10
c000ad83:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad86:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad8c:	4f                   	dec    edi
c000ad8d:	83 ec 0c             	sub    esp,0xc
c000ad90:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad97:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad9e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ada2:	e8 30 a3 01 00       	call   c00250d7 <__extendsfdf2>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adbe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc2:	e8 19 99 01 00       	call   c00246e0 <__muldf3>
c000adc7:	83 c4 10             	add    esp,0x10
c000adca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add2:	52                   	push   edx
c000add3:	50                   	push   eax
c000add4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000add7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adda:	e8 84 92 01 00       	call   c0024063 <__adddf3>
c000addf:	83 c4 10             	add    esp,0x10
c000ade2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ade5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ade8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adeb:	4f                   	dec    edi
c000adec:	83 ec 0c             	sub    esp,0xc
c000adef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adf2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adf6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adfd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae01:	e8 d1 a2 01 00       	call   c00250d7 <__extendsfdf2>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae0d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae19:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae21:	e8 ba 98 01 00       	call   c00246e0 <__muldf3>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae31:	52                   	push   edx
c000ae32:	50                   	push   eax
c000ae33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae39:	e8 25 92 01 00       	call   c0024063 <__adddf3>
c000ae3e:	83 c4 10             	add    esp,0x10
c000ae41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae44:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae4a:	4f                   	dec    edi
c000ae4b:	83 ec 0c             	sub    esp,0xc
c000ae4e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae55:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae5c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae60:	e8 72 a2 01 00       	call   c00250d7 <__extendsfdf2>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae80:	e8 5b 98 01 00       	call   c00246e0 <__muldf3>
c000ae85:	83 c4 10             	add    esp,0x10
c000ae88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae90:	52                   	push   edx
c000ae91:	50                   	push   eax
c000ae92:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae95:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae98:	e8 c6 91 01 00       	call   c0024063 <__adddf3>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aea3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aea6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea9:	4f                   	dec    edi
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeb4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aebb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aebf:	e8 13 a2 01 00       	call   c00250d7 <__extendsfdf2>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aecb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aedf:	e8 fc 97 01 00       	call   c00246e0 <__muldf3>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeeb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeef:	52                   	push   edx
c000aef0:	50                   	push   eax
c000aef1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aef4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aef7:	e8 67 91 01 00       	call   c0024063 <__adddf3>
c000aefc:	83 c4 10             	add    esp,0x10
c000aeff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af02:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af08:	4f                   	dec    edi
c000af09:	83 ec 0c             	sub    esp,0xc
c000af0c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af13:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af1a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af1e:	e8 b4 a1 01 00       	call   c00250d7 <__extendsfdf2>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af2a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af3e:	e8 9d 97 01 00       	call   c00246e0 <__muldf3>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4e:	52                   	push   edx
c000af4f:	50                   	push   eax
c000af50:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af53:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af56:	e8 08 91 01 00       	call   c0024063 <__adddf3>
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af61:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af67:	4f                   	dec    edi
c000af68:	83 ec 0c             	sub    esp,0xc
c000af6b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af72:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af79:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af7d:	e8 55 a1 01 00       	call   c00250d7 <__extendsfdf2>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af89:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af9d:	e8 3e 97 01 00       	call   c00246e0 <__muldf3>
c000afa2:	83 c4 10             	add    esp,0x10
c000afa5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afad:	52                   	push   edx
c000afae:	50                   	push   eax
c000afaf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afb2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afb5:	e8 a9 90 01 00       	call   c0024063 <__adddf3>
c000afba:	83 c4 10             	add    esp,0x10
c000afbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afc0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afc3:	85 ff                	test   edi,edi
c000afc5:	0f 8f e9 fc ff ff    	jg     c000acb4 <calc_output_multi+0x10e>
c000afcb:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afcf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afd3:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afd7:	0f 89 4c fc ff ff    	jns    c000ac29 <calc_output_multi+0x83>
c000afdd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afe1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afe5:	29 c8                	sub    eax,ecx
c000afe7:	99                   	cdq    
c000afe8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aff0:	0f af d0             	imul   edx,eax
c000aff3:	40                   	inc    eax
c000aff4:	01 d1                	add    ecx,edx
c000aff6:	0f af c3             	imul   eax,ebx
c000aff9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000affd:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b004:	55                   	push   ebp
c000b005:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b009:	6a 00                	push   0x0
c000b00b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b00f:	e8 b1 56 ff ff       	call   c00006c5 <memset>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b01b:	e8 e0 e6 ff ff       	call   c0009700 <fp_to_double>
c000b020:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b024:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b028:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b02c:	e8 c5 e6 ff ff       	call   c00096f6 <fp_to_int>
c000b031:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b034:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b037:	57                   	push   edi
c000b038:	57                   	push   edi
c000b039:	89 df                	mov    edi,ebx
c000b03b:	55                   	push   ebp
c000b03c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b040:	e8 b3 89 01 00       	call   c00239f8 <__subsf3>
c000b045:	89 04 24             	mov    DWORD PTR [esp],eax
c000b048:	e8 8a a0 01 00       	call   c00250d7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b054:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b068:	e8 73 96 01 00       	call   c00246e0 <__muldf3>
c000b06d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b074:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b078:	e8 5a a0 01 00       	call   c00250d7 <__extendsfdf2>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b088:	52                   	push   edx
c000b089:	50                   	push   eax
c000b08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b092:	e8 cc 8f 01 00       	call   c0024063 <__adddf3>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0a2:	89 f8                	mov    eax,edi
c000b0a4:	b9 08 00 00 00       	mov    ecx,0x8
c000b0a9:	99                   	cdq    
c000b0aa:	f7 f9                	idiv   ecx
c000b0ac:	4a                   	dec    edx
c000b0ad:	83 fa 06             	cmp    edx,0x6
c000b0b0:	77 07                	ja     c000b0b9 <calc_output_multi+0x513>
c000b0b2:	ff 24 95 00 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9700]
c000b0b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0bd:	4f                   	dec    edi
c000b0be:	83 ec 0c             	sub    esp,0xc
c000b0c1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0cf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0d3:	e8 ff 9f 01 00       	call   c00250d7 <__extendsfdf2>
c000b0d8:	83 c4 10             	add    esp,0x10
c000b0db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0f3:	e8 e8 95 01 00       	call   c00246e0 <__muldf3>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b103:	52                   	push   edx
c000b104:	50                   	push   eax
c000b105:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b108:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b10b:	e8 53 8f 01 00       	call   c0024063 <__adddf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b116:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b11d:	4f                   	dec    edi
c000b11e:	83 ec 0c             	sub    esp,0xc
c000b121:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b124:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b128:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b12f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b133:	e8 9f 9f 01 00       	call   c00250d7 <__extendsfdf2>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b13f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b14b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b153:	e8 88 95 01 00       	call   c00246e0 <__muldf3>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b15f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b163:	52                   	push   edx
c000b164:	50                   	push   eax
c000b165:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b168:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b16b:	e8 f3 8e 01 00       	call   c0024063 <__adddf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b176:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b17d:	4f                   	dec    edi
c000b17e:	83 ec 0c             	sub    esp,0xc
c000b181:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b184:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b188:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b18f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b193:	e8 3f 9f 01 00       	call   c00250d7 <__extendsfdf2>
c000b198:	83 c4 10             	add    esp,0x10
c000b19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b3:	e8 28 95 01 00       	call   c00246e0 <__muldf3>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c3:	52                   	push   edx
c000b1c4:	50                   	push   eax
c000b1c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1cb:	e8 93 8e 01 00       	call   c0024063 <__adddf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1d6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1dd:	4f                   	dec    edi
c000b1de:	83 ec 0c             	sub    esp,0xc
c000b1e1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1ef:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1f3:	e8 df 9e 01 00       	call   c00250d7 <__extendsfdf2>
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b207:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b213:	e8 c8 94 01 00       	call   c00246e0 <__muldf3>
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b223:	52                   	push   edx
c000b224:	50                   	push   eax
c000b225:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b228:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b22b:	e8 33 8e 01 00       	call   c0024063 <__adddf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b236:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23d:	4f                   	dec    edi
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b244:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b248:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b24f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b253:	e8 7f 9e 01 00       	call   c00250d7 <__extendsfdf2>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b267:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b273:	e8 68 94 01 00       	call   c00246e0 <__muldf3>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b27f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b283:	52                   	push   edx
c000b284:	50                   	push   eax
c000b285:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b288:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b28b:	e8 d3 8d 01 00       	call   c0024063 <__adddf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b296:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b299:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b29d:	4f                   	dec    edi
c000b29e:	83 ec 0c             	sub    esp,0xc
c000b2a1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2af:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2b3:	e8 1f 9e 01 00       	call   c00250d7 <__extendsfdf2>
c000b2b8:	83 c4 10             	add    esp,0x10
c000b2bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d3:	e8 08 94 01 00       	call   c00246e0 <__muldf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e3:	52                   	push   edx
c000b2e4:	50                   	push   eax
c000b2e5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2eb:	e8 73 8d 01 00       	call   c0024063 <__adddf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2f6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2fd:	4f                   	dec    edi
c000b2fe:	83 ec 0c             	sub    esp,0xc
c000b301:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b308:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b30f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b313:	e8 bf 9d 01 00       	call   c00250d7 <__extendsfdf2>
c000b318:	83 c4 10             	add    esp,0x10
c000b31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b327:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b333:	e8 a8 93 01 00       	call   c00246e0 <__muldf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b33f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b343:	52                   	push   edx
c000b344:	50                   	push   eax
c000b345:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b348:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b34b:	e8 13 8d 01 00       	call   c0024063 <__adddf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b356:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b359:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b35d:	4f                   	dec    edi
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b368:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b36f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b373:	e8 5f 9d 01 00       	call   c00250d7 <__extendsfdf2>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b37f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b383:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b387:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b38f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b393:	e8 48 93 01 00       	call   c00246e0 <__muldf3>
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3a3:	52                   	push   edx
c000b3a4:	50                   	push   eax
c000b3a5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3a8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3ab:	e8 b3 8c 01 00       	call   c0024063 <__adddf3>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3b6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3b9:	85 ff                	test   edi,edi
c000b3bb:	0f 8f e1 fc ff ff    	jg     c000b0a2 <calc_output_multi+0x4fc>
c000b3c1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3c5:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3c9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3d2:	0f 8f 3f fc ff ff    	jg     c000b017 <calc_output_multi+0x471>
c000b3d8:	be 08 00 00 00       	mov    esi,0x8
c000b3dd:	89 d8                	mov    eax,ebx
c000b3df:	99                   	cdq    
c000b3e0:	f7 fe                	idiv   esi
c000b3e2:	4a                   	dec    edx
c000b3e3:	83 fa 06             	cmp    edx,0x6
c000b3e6:	77 07                	ja     c000b3ef <calc_output_multi+0x849>
c000b3e8:	ff 24 95 1c 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd96e4]
c000b3ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3f3:	4b                   	dec    ebx
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b403:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b406:	e8 58 8c 01 00       	call   c0024063 <__adddf3>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b412:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b426:	e8 b5 92 01 00       	call   c00246e0 <__muldf3>
c000b42b:	5d                   	pop    ebp
c000b42c:	59                   	pop    ecx
c000b42d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b431:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43d:	e8 71 9b 01 00       	call   c0024fb3 <__truncdfsf2>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b449:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b450:	4b                   	dec    ebx
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b45c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b460:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b463:	e8 fb 8b 01 00       	call   c0024063 <__adddf3>
c000b468:	83 c4 10             	add    esp,0x10
c000b46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b483:	e8 58 92 01 00       	call   c00246e0 <__muldf3>
c000b488:	59                   	pop    ecx
c000b489:	5f                   	pop    edi
c000b48a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b48e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49a:	e8 14 9b 01 00       	call   c0024fb3 <__truncdfsf2>
c000b49f:	83 c4 10             	add    esp,0x10
c000b4a2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4a6:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ad:	4b                   	dec    ebx
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4c0:	e8 9e 8b 01 00       	call   c0024063 <__adddf3>
c000b4c5:	83 c4 10             	add    esp,0x10
c000b4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e0:	e8 fb 91 01 00       	call   c00246e0 <__muldf3>
c000b4e5:	5f                   	pop    edi
c000b4e6:	5d                   	pop    ebp
c000b4e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f7:	e8 b7 9a 01 00       	call   c0024fb3 <__truncdfsf2>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b503:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50a:	4b                   	dec    ebx
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b516:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b51a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b51d:	e8 41 8b 01 00       	call   c0024063 <__adddf3>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53d:	e8 9e 91 01 00       	call   c00246e0 <__muldf3>
c000b542:	5d                   	pop    ebp
c000b543:	59                   	pop    ecx
c000b544:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b548:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b554:	e8 5a 9a 01 00       	call   c0024fb3 <__truncdfsf2>
c000b559:	83 c4 10             	add    esp,0x10
c000b55c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b560:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b567:	4b                   	dec    ebx
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b573:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b577:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b57a:	e8 e4 8a 01 00       	call   c0024063 <__adddf3>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b596:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b59a:	e8 41 91 01 00       	call   c00246e0 <__muldf3>
c000b59f:	59                   	pop    ecx
c000b5a0:	5f                   	pop    edi
c000b5a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b1:	e8 fd 99 01 00       	call   c0024fb3 <__truncdfsf2>
c000b5b6:	83 c4 10             	add    esp,0x10
c000b5b9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5bd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c4:	4b                   	dec    ebx
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d7:	e8 87 8a 01 00       	call   c0024063 <__adddf3>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f7:	e8 e4 90 01 00       	call   c00246e0 <__muldf3>
c000b5fc:	5f                   	pop    edi
c000b5fd:	5d                   	pop    ebp
c000b5fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b602:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 a0 99 01 00       	call   c0024fb3 <__truncdfsf2>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b61a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b621:	4b                   	dec    ebx
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b631:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b634:	e8 2a 8a 01 00       	call   c0024063 <__adddf3>
c000b639:	83 c4 10             	add    esp,0x10
c000b63c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b640:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b654:	e8 87 90 01 00       	call   c00246e0 <__muldf3>
c000b659:	5d                   	pop    ebp
c000b65a:	59                   	pop    ecx
c000b65b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b65f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 43 99 01 00       	call   c0024fb3 <__truncdfsf2>
c000b670:	83 c4 10             	add    esp,0x10
c000b673:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b677:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b67a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67e:	4b                   	dec    ebx
c000b67f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b683:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b68e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b691:	e8 cd 89 01 00       	call   c0024063 <__adddf3>
c000b696:	83 c4 10             	add    esp,0x10
c000b699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b1:	e8 2a 90 01 00       	call   c00246e0 <__muldf3>
c000b6b6:	59                   	pop    ecx
c000b6b7:	5f                   	pop    edi
c000b6b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 e6 98 01 00       	call   c0024fb3 <__truncdfsf2>
c000b6cd:	83 c4 10             	add    esp,0x10
c000b6d0:	85 db                	test   ebx,ebx
c000b6d2:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6d6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6d9:	0f 8f fe fc ff ff    	jg     c000b3dd <calc_output_multi+0x837>
c000b6df:	83 c4 4c             	add    esp,0x4c
c000b6e2:	5b                   	pop    ebx
c000b6e3:	5e                   	pop    esi
c000b6e4:	5f                   	pop    edi
c000b6e5:	5d                   	pop    ebp
c000b6e6:	c3                   	ret    

c000b6e7 <double_to_fp>:
c000b6e7:	83 ec 0c             	sub    esp,0xc
c000b6ea:	68 00 00 b0 40       	push   0x40b00000
c000b6ef:	6a 00                	push   0x0
c000b6f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f9:	e8 e2 8f 01 00       	call   c00246e0 <__muldf3>
c000b6fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b706:	83 c4 1c             	add    esp,0x1c
c000b709:	e9 52 9a 01 00       	jmp    c0025160 <lrint>

c000b70e <fmod_one>:
c000b70e:	83 ec 2c             	sub    esp,0x2c
c000b711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b715:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b719:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b721:	83 ec 08             	sub    esp,0x8
c000b724:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72c:	e8 2f 9a 01 00       	call   c0025160 <lrint>
c000b731:	83 c4 10             	add    esp,0x10
c000b734:	83 ec 0c             	sub    esp,0xc
c000b737:	50                   	push   eax
c000b738:	e8 06 96 01 00       	call   c0024d43 <__floatsidf>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	52                   	push   edx
c000b741:	50                   	push   eax
c000b742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b746:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74a:	e8 65 8f 01 00       	call   c00246b4 <__subdf3>
c000b74f:	83 c4 10             	add    esp,0x10
c000b752:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b756:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b75a:	b8 00 00 00 00       	mov    eax,0x0
c000b75f:	ba 00 00 00 00       	mov    edx,0x0
c000b764:	52                   	push   edx
c000b765:	50                   	push   eax
c000b766:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b76e:	e8 3c 98 01 00       	call   c0024faf <__ltdf2>
c000b773:	83 c4 10             	add    esp,0x10
c000b776:	85 c0                	test   eax,eax
c000b778:	79 1e                	jns    c000b798 <fmod_one+0x8a>
c000b77a:	b8 00 00 00 00       	mov    eax,0x0
c000b77f:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b784:	52                   	push   edx
c000b785:	50                   	push   eax
c000b786:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78e:	e8 d0 88 01 00       	call   c0024063 <__adddf3>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	eb 08                	jmp    c000b7a0 <fmod_one+0x92>
c000b798:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b79c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7a0:	83 c4 2c             	add    esp,0x2c
c000b7a3:	c3                   	ret    

c000b7a4 <prepare_data>:
c000b7a4:	55                   	push   ebp
c000b7a5:	57                   	push   edi
c000b7a6:	56                   	push   esi
c000b7a7:	53                   	push   ebx
c000b7a8:	83 ec 1c             	sub    esp,0x1c
c000b7ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7b3:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7b7:	0f 89 57 01 00 00    	jns    c000b914 <prepare_data+0x170>
c000b7bd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7c3:	85 d2                	test   edx,edx
c000b7c5:	75 0d                	jne    c000b7d4 <prepare_data+0x30>
c000b7c7:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7ca:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7cd:	29 d0                	sub    eax,edx
c000b7cf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7d2:	eb 44                	jmp    c000b818 <prepare_data+0x74>
c000b7d4:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7d7:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7da:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7dd:	39 c1                	cmp    ecx,eax
c000b7df:	7d 04                	jge    c000b7e5 <prepare_data+0x41>
c000b7e1:	29 d0                	sub    eax,edx
c000b7e3:	eb 2d                	jmp    c000b812 <prepare_data+0x6e>
c000b7e5:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7eb:	29 d7                	sub    edi,edx
c000b7ed:	01 f7                	add    edi,esi
c000b7ef:	51                   	push   ecx
c000b7f0:	29 f2                	sub    edx,esi
c000b7f2:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7f9:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7fc:	51                   	push   ecx
c000b7fd:	52                   	push   edx
c000b7fe:	50                   	push   eax
c000b7ff:	e8 53 4e ff ff       	call   c0000657 <memmove>
c000b804:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b807:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b80a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b80d:	29 f0                	sub    eax,esi
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	29 f0                	sub    eax,esi
c000b814:	79 02                	jns    c000b818 <prepare_data+0x74>
c000b816:	31 c0                	xor    eax,eax
c000b818:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b81b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b81e:	29 ef                	sub    edi,ebp
c000b820:	39 c7                	cmp    edi,eax
c000b822:	7e 02                	jle    c000b826 <prepare_data+0x82>
c000b824:	89 c7                	mov    edi,eax
c000b826:	89 f8                	mov    eax,edi
c000b828:	99                   	cdq    
c000b829:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b82c:	b8 15 00 00 00       	mov    eax,0x15
c000b831:	29 d7                	sub    edi,edx
c000b833:	0f 88 dd 00 00 00    	js     c000b916 <prepare_data+0x172>
c000b839:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b83c:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b83f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b842:	0f 8f ce 00 00 00    	jg     c000b916 <prepare_data+0x172>
c000b848:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b84e:	50                   	push   eax
c000b84f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b856:	50                   	push   eax
c000b857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b85b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b85d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b860:	50                   	push   eax
c000b861:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b864:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b868:	50                   	push   eax
c000b869:	e8 21 4e ff ff       	call   c000068f <memcpy>
c000b86e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b871:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b874:	01 fd                	add    ebp,edi
c000b876:	01 f9                	add    ecx,edi
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b87e:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b881:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b888:	0f 85 86 00 00 00    	jne    c000b914 <prepare_data+0x170>
c000b88e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b891:	89 e8                	mov    eax,ebp
c000b893:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b896:	29 c8                	sub    eax,ecx
c000b898:	39 f8                	cmp    eax,edi
c000b89a:	7d 78                	jge    c000b914 <prepare_data+0x170>
c000b89c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8a0:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8a4:	74 6e                	je     c000b914 <prepare_data+0x170>
c000b8a6:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8ad:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8b0:	29 ef                	sub    edi,ebp
c000b8b2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8b6:	7c 29                	jl     c000b8e1 <prepare_data+0x13d>
c000b8b8:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8bb:	29 f1                	sub    ecx,esi
c000b8bd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8c4:	55                   	push   ebp
c000b8c5:	50                   	push   eax
c000b8c6:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8c9:	50                   	push   eax
c000b8ca:	52                   	push   edx
c000b8cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8cf:	e8 83 4d ff ff       	call   c0000657 <memmove>
c000b8d4:	83 c4 10             	add    esp,0x10
c000b8d7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8da:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b8e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b8e7:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8ea:	83 c6 05             	add    esi,0x5
c000b8ed:	78 07                	js     c000b8f6 <prepare_data+0x152>
c000b8ef:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8f2:	39 cf                	cmp    edi,ecx
c000b8f4:	7e 04                	jle    c000b8fa <prepare_data+0x156>
c000b8f6:	89 ce                	mov    esi,ecx
c000b8f8:	29 c6                	sub    esi,eax
c000b8fa:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8fd:	51                   	push   ecx
c000b8fe:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b905:	51                   	push   ecx
c000b906:	6a 00                	push   0x0
c000b908:	50                   	push   eax
c000b909:	e8 b7 4d ff ff       	call   c00006c5 <memset>
c000b90e:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	31 c0                	xor    eax,eax
c000b916:	83 c4 1c             	add    esp,0x1c
c000b919:	5b                   	pop    ebx
c000b91a:	5e                   	pop    esi
c000b91b:	5f                   	pop    edi
c000b91c:	5d                   	pop    ebp
c000b91d:	c3                   	ret    

c000b91e <sinc_multichan_vari_process>:
c000b91e:	55                   	push   ebp
c000b91f:	b8 05 00 00 00       	mov    eax,0x5
c000b924:	57                   	push   edi
c000b925:	56                   	push   esi
c000b926:	53                   	push   ebx
c000b927:	83 ec 4c             	sub    esp,0x4c
c000b92a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b92e:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b932:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b935:	85 db                	test   ebx,ebx
c000b937:	0f 84 b5 05 00 00    	je     c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b93d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b940:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b943:	0f af d0             	imul   edx,eax
c000b946:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b949:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b94d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b954:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b957:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b95e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b961:	8b 06                	mov    eax,DWORD PTR [esi]
c000b963:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b96b:	57                   	push   edi
c000b96c:	57                   	push   edi
c000b96d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b971:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b975:	e8 15 dd ff ff       	call   c000968f <is_bad_src_ratio>
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	89 c2                	mov    edx,eax
c000b97f:	b8 16 00 00 00       	mov    eax,0x16
c000b984:	85 d2                	test   edx,edx
c000b986:	0f 85 66 05 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000b98c:	83 ec 0c             	sub    esp,0xc
c000b98f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b992:	e8 ac 93 01 00       	call   c0024d43 <__floatsidf>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9a1:	68 00 00 00 40       	push   0x40000000
c000b9a6:	6a 00                	push   0x0
c000b9a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b0:	e8 ae 86 01 00       	call   c0024063 <__adddf3>
c000b9b5:	59                   	pop    ecx
c000b9b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9c1:	e8 7d 93 01 00       	call   c0024d43 <__floatsidf>
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9d1:	52                   	push   edx
c000b9d2:	50                   	push   eax
c000b9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9db:	e8 e4 8f 01 00       	call   c00249c4 <__divdf3>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9eb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9ed:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9f7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9fa:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba05:	52                   	push   edx
c000ba06:	50                   	push   eax
c000ba07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba0f:	e8 9b 95 01 00       	call   c0024faf <__ltdf2>
c000ba14:	83 c4 10             	add    esp,0x10
c000ba17:	85 c0                	test   eax,eax
c000ba19:	79 1d                	jns    c000ba38 <sinc_multichan_vari_process+0x11a>
c000ba1b:	68 00 00 f0 3f       	push   0x3ff00000
c000ba20:	6a 00                	push   0x0
c000ba22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2a:	e8 80 95 01 00       	call   c0024faf <__ltdf2>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	85 c0                	test   eax,eax
c000ba34:	78 2c                	js     c000ba62 <sinc_multichan_vari_process+0x144>
c000ba36:	eb 4a                	jmp    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba38:	68 00 00 f0 3f       	push   0x3ff00000
c000ba3d:	6a 00                	push   0x0
c000ba3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba47:	e8 63 95 01 00       	call   c0024faf <__ltdf2>
c000ba4c:	83 c4 10             	add    esp,0x10
c000ba4f:	85 c0                	test   eax,eax
c000ba51:	79 2f                	jns    c000ba82 <sinc_multichan_vari_process+0x164>
c000ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba66:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba72:	e8 4d 8f 01 00       	call   c00249c4 <__divdf3>
c000ba77:	83 c4 10             	add    esp,0x10
c000ba7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba82:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba85:	50                   	push   eax
c000ba86:	50                   	push   eax
c000ba87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8f:	e8 cc 96 01 00       	call   c0025160 <lrint>
c000ba94:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba97:	40                   	inc    eax
c000ba98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba9c:	0f af c7             	imul   eax,edi
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000baa6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baaa:	58                   	pop    eax
c000baab:	5a                   	pop    edx
c000baac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab4:	e8 55 fc ff ff       	call   c000b70e <fmod_one>
c000bab9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000babc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bac4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bac7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000badb:	e8 d4 8b 01 00       	call   c00246b4 <__subdf3>
c000bae0:	83 c4 18             	add    esp,0x18
c000bae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bae7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baeb:	52                   	push   edx
c000baec:	50                   	push   eax
c000baed:	e8 6e 96 01 00       	call   c0025160 <lrint>
c000baf2:	0f af f8             	imul   edi,eax
c000baf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000baf9:	01 f8                	add    eax,edi
c000bafb:	99                   	cdq    
c000bafc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000baff:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0a:	68 00 00 f0 3f       	push   0x3ff00000
c000bb0f:	6a 00                	push   0x0
c000bb11:	e8 ae 8e 01 00       	call   c00249c4 <__divdf3>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb21:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb26:	68 23 42 92 0c       	push   0xc924223
c000bb2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb33:	e8 2b 85 01 00       	call   c0024063 <__adddf3>
c000bb38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb40:	83 c4 20             	add    esp,0x20
c000bb43:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb4b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb56:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb59:	7d 4e                	jge    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bb5b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb61:	01 c8                	add    eax,ecx
c000bb63:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb66:	99                   	cdq    
c000bb67:	f7 f9                	idiv   ecx
c000bb69:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb6d:	7d 0c                	jge    c000bb7b <sinc_multichan_vari_process+0x25d>
c000bb6f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb72:	85 ff                	test   edi,edi
c000bb74:	79 68                	jns    c000bbde <sinc_multichan_vari_process+0x2c0>
c000bb76:	e9 e3 00 00 00       	jmp    c000bc5e <sinc_multichan_vari_process+0x340>
c000bb7b:	50                   	push   eax
c000bb7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb80:	55                   	push   ebp
c000bb81:	53                   	push   ebx
c000bb82:	e8 1d fc ff ff       	call   c000b7a4 <prepare_data>
c000bb87:	83 c4 10             	add    esp,0x10
c000bb8a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	0f 85 5d 03 00 00    	jne    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bb95:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb98:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb9b:	01 c8                	add    eax,ecx
c000bb9d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bba0:	99                   	cdq    
c000bba1:	f7 f9                	idiv   ecx
c000bba3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bba7:	7c c6                	jl     c000bb6f <sinc_multichan_vari_process+0x251>
c000bba9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbb0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbb3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbbe:	89 06                	mov    DWORD PTR [esi],eax
c000bbc0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbc3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbc6:	99                   	cdq    
c000bbc7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbd0:	99                   	cdq    
c000bbd1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbd4:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbd7:	31 c0                	xor    eax,eax
c000bbd9:	e9 14 03 00 00       	jmp    c000bef2 <sinc_multichan_vari_process+0x5d4>
c000bbde:	83 ec 0c             	sub    esp,0xc
c000bbe1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbe4:	e8 5a 91 01 00       	call   c0024d43 <__floatsidf>
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc04:	e8 5a 84 01 00       	call   c0024063 <__adddf3>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	e8 3a 84 01 00       	call   c0024063 <__adddf3>
c000bc29:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	e8 0a 91 01 00       	call   c0024d43 <__floatsidf>
c000bc39:	83 c4 10             	add    esp,0x10
c000bc3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc44:	52                   	push   edx
c000bc45:	50                   	push   eax
c000bc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4e:	e8 5a 93 01 00       	call   c0024fad <__gedf2>
c000bc53:	83 c4 10             	add    esp,0x10
c000bc56:	85 c0                	test   eax,eax
c000bc58:	0f 89 4b ff ff ff    	jns    c000bba9 <sinc_multichan_vari_process+0x28b>
c000bc5e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc62:	0f 8e ed 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bc68:	83 ec 10             	sub    esp,0x10
c000bc6b:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc6e:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc74:	ff 36                	push   DWORD PTR [esi]
c000bc76:	e8 39 8a 01 00       	call   c00246b4 <__subdf3>
c000bc7b:	83 c4 18             	add    esp,0x18
c000bc7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc86:	52                   	push   edx
c000bc87:	50                   	push   eax
c000bc88:	e8 b3 94 01 00       	call   c0025140 <fabs>
c000bc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc9d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bca2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcaa:	e8 e2 92 01 00       	call   c0024f91 <__gtdf2>
c000bcaf:	83 c4 10             	add    esp,0x10
c000bcb2:	85 c0                	test   eax,eax
c000bcb4:	0f 8e 9b 00 00 00    	jle    c000bd55 <sinc_multichan_vari_process+0x437>
c000bcba:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcc7:	52                   	push   edx
c000bcc8:	50                   	push   eax
c000bcc9:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bccc:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bccf:	e8 e0 89 01 00       	call   c00246b4 <__subdf3>
c000bcd4:	59                   	pop    ecx
c000bcd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcd9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bce0:	e8 5e 90 01 00       	call   c0024d43 <__floatsidf>
c000bce5:	83 c4 10             	add    esp,0x10
c000bce8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf0:	52                   	push   edx
c000bcf1:	50                   	push   eax
c000bcf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfa:	e8 e1 89 01 00       	call   c00246e0 <__muldf3>
c000bcff:	5f                   	pop    edi
c000bd00:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd04:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd08:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd0b:	e8 33 90 01 00       	call   c0024d43 <__floatsidf>
c000bd10:	83 c4 10             	add    esp,0x10
c000bd13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd1b:	52                   	push   edx
c000bd1c:	50                   	push   eax
c000bd1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd25:	e8 9a 8c 01 00       	call   c00249c4 <__divdf3>
c000bd2a:	83 c4 10             	add    esp,0x10
c000bd2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd45:	e8 19 83 01 00       	call   c0024063 <__adddf3>
c000bd4a:	83 c4 10             	add    esp,0x10
c000bd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd55:	83 ec 0c             	sub    esp,0xc
c000bd58:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd5b:	e8 e3 8f 01 00       	call   c0024d43 <__floatsidf>
c000bd60:	83 c4 10             	add    esp,0x10
c000bd63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7b:	e8 2f 92 01 00       	call   c0024faf <__ltdf2>
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	85 c0                	test   eax,eax
c000bd85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd95:	78 10                	js     c000bda7 <sinc_multichan_vari_process+0x489>
c000bd97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bda3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb7:	e8 24 89 01 00       	call   c00246e0 <__muldf3>
c000bdbc:	59                   	pop    ecx
c000bdbd:	5f                   	pop    edi
c000bdbe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdc2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdce:	e8 14 f9 ff ff       	call   c000b6e7 <double_to_fp>
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	89 c7                	mov    edi,eax
c000bdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde5:	e8 f6 88 01 00       	call   c00246e0 <__muldf3>
c000bdea:	83 c4 18             	add    esp,0x18
c000bded:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdf5:	52                   	push   edx
c000bdf6:	50                   	push   eax
c000bdf7:	e8 eb f8 ff ff       	call   c000b6e7 <double_to_fp>
c000bdfc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be03:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be06:	8d 04 90             	lea    eax,[eax+edx*4]
c000be09:	50                   	push   eax
c000be0a:	50                   	push   eax
c000be0b:	50                   	push   eax
c000be0c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be0f:	e8 2f 8f 01 00       	call   c0024d43 <__floatsidf>
c000be14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be18:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be2c:	e8 93 8b 01 00       	call   c00249c4 <__divdf3>
c000be31:	83 c4 1c             	add    esp,0x1c
c000be34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be38:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be3c:	52                   	push   edx
c000be3d:	89 fa                	mov    edx,edi
c000be3f:	50                   	push   eax
c000be40:	89 d8                	mov    eax,ebx
c000be42:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be45:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be49:	e8 58 ed ff ff       	call   c000aba6 <calc_output_multi>
c000be4e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be51:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be64:	e8 5b 8b 01 00       	call   c00249c4 <__divdf3>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be84:	e8 da 81 01 00       	call   c0024063 <__adddf3>
c000be89:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be8d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be91:	83 c4 28             	add    esp,0x28
c000be94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9c:	e8 6d f8 ff ff       	call   c000b70e <fmod_one>
c000bea1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bea8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beac:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bebb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bebf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bec3:	e8 ec 87 01 00       	call   c00246b4 <__subdf3>
c000bec8:	83 c4 18             	add    esp,0x18
c000becb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000becf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bed3:	52                   	push   edx
c000bed4:	50                   	push   eax
c000bed5:	e8 86 92 01 00       	call   c0025160 <lrint>
c000beda:	0f af f8             	imul   edi,eax
c000bedd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	01 f8                	add    eax,edi
c000bee6:	99                   	cdq    
c000bee7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000beea:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000beed:	e9 61 fc ff ff       	jmp    c000bb53 <sinc_multichan_vari_process+0x235>
c000bef2:	83 c4 4c             	add    esp,0x4c
c000bef5:	5b                   	pop    ebx
c000bef6:	5e                   	pop    esi
c000bef7:	5f                   	pop    edi
c000bef8:	5d                   	pop    ebp
c000bef9:	c3                   	ret    

c000befa <sinc_hex_vari_process>:
c000befa:	55                   	push   ebp
c000befb:	b8 05 00 00 00       	mov    eax,0x5
c000bf00:	57                   	push   edi
c000bf01:	56                   	push   esi
c000bf02:	53                   	push   ebx
c000bf03:	83 ec 4c             	sub    esp,0x4c
c000bf06:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf0a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf0e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf11:	85 db                	test   ebx,ebx
c000bf13:	0f 84 b7 05 00 00    	je     c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf19:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf1c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf1f:	0f af d0             	imul   edx,eax
c000bf22:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf25:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf29:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf33:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf3a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf3d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf40:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf48:	57                   	push   edi
c000bf49:	57                   	push   edi
c000bf4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf52:	e8 38 d7 ff ff       	call   c000968f <is_bad_src_ratio>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	89 c2                	mov    edx,eax
c000bf5c:	b8 16 00 00 00       	mov    eax,0x16
c000bf61:	85 d2                	test   edx,edx
c000bf63:	0f 85 67 05 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000bf69:	83 ec 0c             	sub    esp,0xc
c000bf6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf6f:	e8 cf 8d 01 00       	call   c0024d43 <__floatsidf>
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf7e:	68 00 00 00 40       	push   0x40000000
c000bf83:	6a 00                	push   0x0
c000bf85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf8d:	e8 d1 80 01 00       	call   c0024063 <__adddf3>
c000bf92:	59                   	pop    ecx
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf9b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf9e:	e8 a0 8d 01 00       	call   c0024d43 <__floatsidf>
c000bfa3:	83 c4 10             	add    esp,0x10
c000bfa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfaa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfae:	52                   	push   edx
c000bfaf:	50                   	push   eax
c000bfb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb8:	e8 07 8a 01 00       	call   c00249c4 <__divdf3>
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfcb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfce:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfd5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd8:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfdf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfe3:	52                   	push   edx
c000bfe4:	50                   	push   eax
c000bfe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfed:	e8 bd 8f 01 00       	call   c0024faf <__ltdf2>
c000bff2:	83 c4 10             	add    esp,0x10
c000bff5:	85 c0                	test   eax,eax
c000bff7:	79 1d                	jns    c000c016 <sinc_hex_vari_process+0x11c>
c000bff9:	68 00 00 f0 3f       	push   0x3ff00000
c000bffe:	6a 00                	push   0x0
c000c000:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c008:	e8 a2 8f 01 00       	call   c0024faf <__ltdf2>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	85 c0                	test   eax,eax
c000c012:	78 2c                	js     c000c040 <sinc_hex_vari_process+0x146>
c000c014:	eb 4a                	jmp    c000c060 <sinc_hex_vari_process+0x166>
c000c016:	68 00 00 f0 3f       	push   0x3ff00000
c000c01b:	6a 00                	push   0x0
c000c01d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c025:	e8 85 8f 01 00       	call   c0024faf <__ltdf2>
c000c02a:	83 c4 10             	add    esp,0x10
c000c02d:	85 c0                	test   eax,eax
c000c02f:	79 2f                	jns    c000c060 <sinc_hex_vari_process+0x166>
c000c031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c035:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c039:	89 04 24             	mov    DWORD PTR [esp],eax
c000c03c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c048:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c050:	e8 6f 89 01 00       	call   c00249c4 <__divdf3>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c060:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c063:	50                   	push   eax
c000c064:	50                   	push   eax
c000c065:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06d:	e8 ee 90 01 00       	call   c0025160 <lrint>
c000c072:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c075:	40                   	inc    eax
c000c076:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c07a:	0f af c7             	imul   eax,edi
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c084:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c088:	58                   	pop    eax
c000c089:	5a                   	pop    edx
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c092:	e8 77 f6 ff ff       	call   c000b70e <fmod_one>
c000c097:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c09a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c09e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0a2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b9:	e8 f6 85 01 00       	call   c00246b4 <__subdf3>
c000c0be:	83 c4 18             	add    esp,0x18
c000c0c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0c9:	52                   	push   edx
c000c0ca:	50                   	push   eax
c000c0cb:	e8 90 90 01 00       	call   c0025160 <lrint>
c000c0d0:	0f af f8             	imul   edi,eax
c000c0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d7:	01 f8                	add    eax,edi
c000c0d9:	99                   	cdq    
c000c0da:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0dd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	e8 d0 88 01 00       	call   c00249c4 <__divdf3>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c104:	68 23 42 92 0c       	push   0xc924223
c000c109:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c10d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c111:	e8 4d 7f 01 00       	call   c0024063 <__adddf3>
c000c116:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c11a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c11e:	83 c4 20             	add    esp,0x20
c000c121:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c129:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c131:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c134:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c137:	7d 4e                	jge    c000c187 <sinc_hex_vari_process+0x28d>
c000c139:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c13c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c13f:	01 c8                	add    eax,ecx
c000c141:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c144:	99                   	cdq    
c000c145:	f7 f9                	idiv   ecx
c000c147:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c14b:	7d 0c                	jge    c000c159 <sinc_hex_vari_process+0x25f>
c000c14d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c150:	85 ff                	test   edi,edi
c000c152:	79 69                	jns    c000c1bd <sinc_hex_vari_process+0x2c3>
c000c154:	e9 e4 00 00 00       	jmp    c000c23d <sinc_hex_vari_process+0x343>
c000c159:	50                   	push   eax
c000c15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c15e:	56                   	push   esi
c000c15f:	53                   	push   ebx
c000c160:	e8 3f f6 ff ff       	call   c000b7a4 <prepare_data>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c16b:	85 c0                	test   eax,eax
c000c16d:	0f 85 5d 03 00 00    	jne    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c173:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c176:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c179:	01 c8                	add    eax,ecx
c000c17b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c17e:	99                   	cdq    
c000c17f:	f7 f9                	idiv   ecx
c000c181:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c185:	7c c6                	jl     c000c14d <sinc_hex_vari_process+0x253>
c000c187:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c18a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c18e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c191:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c19c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c19f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1a5:	99                   	cdq    
c000c1a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1a9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1af:	99                   	cdq    
c000c1b0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1b3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1b6:	31 c0                	xor    eax,eax
c000c1b8:	e9 13 03 00 00       	jmp    c000c4d0 <sinc_hex_vari_process+0x5d6>
c000c1bd:	83 ec 0c             	sub    esp,0xc
c000c1c0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1c3:	e8 7b 8b 01 00       	call   c0024d43 <__floatsidf>
c000c1c8:	83 c4 10             	add    esp,0x10
c000c1cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e3:	e8 7b 7e 01 00       	call   c0024063 <__adddf3>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c203:	e8 5b 7e 01 00       	call   c0024063 <__adddf3>
c000c208:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c20f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c213:	e8 2b 8b 01 00       	call   c0024d43 <__floatsidf>
c000c218:	83 c4 10             	add    esp,0x10
c000c21b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c21f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c223:	52                   	push   edx
c000c224:	50                   	push   eax
c000c225:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c229:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c22d:	e8 7b 8d 01 00       	call   c0024fad <__gedf2>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	85 c0                	test   eax,eax
c000c237:	0f 89 4a ff ff ff    	jns    c000c187 <sinc_hex_vari_process+0x28d>
c000c23d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c241:	0f 8e ef 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c247:	83 ec 10             	sub    esp,0x10
c000c24a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c24d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c250:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c253:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c256:	e8 59 84 01 00       	call   c00246b4 <__subdf3>
c000c25b:	83 c4 18             	add    esp,0x18
c000c25e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c262:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c266:	52                   	push   edx
c000c267:	50                   	push   eax
c000c268:	e8 d3 8e 01 00       	call   c0025140 <fabs>
c000c26d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c271:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c275:	83 c4 10             	add    esp,0x10
c000c278:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c27d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c282:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	e8 02 8d 01 00       	call   c0024f91 <__gtdf2>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	85 c0                	test   eax,eax
c000c294:	0f 8e 9c 00 00 00    	jle    c000c336 <sinc_hex_vari_process+0x43c>
c000c29a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c29d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a8:	52                   	push   edx
c000c2a9:	50                   	push   eax
c000c2aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ad:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b0:	e8 ff 83 01 00       	call   c00246b4 <__subdf3>
c000c2b5:	59                   	pop    ecx
c000c2b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2be:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2c1:	e8 7d 8a 01 00       	call   c0024d43 <__floatsidf>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d1:	52                   	push   edx
c000c2d2:	50                   	push   eax
c000c2d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2db:	e8 00 84 01 00       	call   c00246e0 <__muldf3>
c000c2e0:	5f                   	pop    edi
c000c2e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2e9:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2ec:	e8 52 8a 01 00       	call   c0024d43 <__floatsidf>
c000c2f1:	83 c4 10             	add    esp,0x10
c000c2f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fc:	52                   	push   edx
c000c2fd:	50                   	push   eax
c000c2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c302:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c306:	e8 b9 86 01 00       	call   c00249c4 <__divdf3>
c000c30b:	83 c4 10             	add    esp,0x10
c000c30e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c312:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c316:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c31e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c322:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c326:	e8 38 7d 01 00       	call   c0024063 <__adddf3>
c000c32b:	83 c4 10             	add    esp,0x10
c000c32e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c332:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c336:	83 ec 0c             	sub    esp,0xc
c000c339:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c33c:	e8 02 8a 01 00       	call   c0024d43 <__floatsidf>
c000c341:	83 c4 10             	add    esp,0x10
c000c344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c348:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c34c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c350:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c35c:	e8 4e 8c 01 00       	call   c0024faf <__ltdf2>
c000c361:	83 c4 10             	add    esp,0x10
c000c364:	85 c0                	test   eax,eax
c000c366:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c36a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c36e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c372:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c376:	78 10                	js     c000c388 <sinc_hex_vari_process+0x48e>
c000c378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c37c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c380:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c384:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 43 83 01 00       	call   c00246e0 <__muldf3>
c000c39d:	59                   	pop    ecx
c000c39e:	5f                   	pop    edi
c000c39f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3af:	e8 33 f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3b8:	89 c7                	mov    edi,eax
c000c3ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	e8 15 83 01 00       	call   c00246e0 <__muldf3>
c000c3cb:	83 c4 18             	add    esp,0x18
c000c3ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3d6:	52                   	push   edx
c000c3d7:	50                   	push   eax
c000c3d8:	e8 0a f3 ff ff       	call   c000b6e7 <double_to_fp>
c000c3dd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c3e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c3e4:	83 c4 0c             	add    esp,0xc
c000c3e7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3ea:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3ed:	50                   	push   eax
c000c3ee:	50                   	push   eax
c000c3ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3f2:	e8 4c 89 01 00       	call   c0024d43 <__floatsidf>
c000c3f7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3fb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c403:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c407:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c40f:	e8 b0 85 01 00       	call   c00249c4 <__divdf3>
c000c414:	83 c4 18             	add    esp,0x18
c000c417:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c41b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c41f:	52                   	push   edx
c000c420:	89 fa                	mov    edx,edi
c000c422:	50                   	push   eax
c000c423:	89 d8                	mov    eax,ebx
c000c425:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c429:	e8 26 df ff ff       	call   c000a354 <calc_output_hex>
c000c42e:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c436:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c442:	e8 7d 85 01 00       	call   c00249c4 <__divdf3>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c452:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c45a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c462:	e8 fc 7b 01 00       	call   c0024063 <__adddf3>
c000c467:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c46b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46f:	83 c4 18             	add    esp,0x18
c000c472:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c476:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47a:	e8 8f f2 ff ff       	call   c000b70e <fmod_one>
c000c47f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c482:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c486:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c48a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c48d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a1:	e8 0e 82 01 00       	call   c00246b4 <__subdf3>
c000c4a6:	83 c4 18             	add    esp,0x18
c000c4a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	52                   	push   edx
c000c4b2:	50                   	push   eax
c000c4b3:	e8 a8 8c 01 00       	call   c0025160 <lrint>
c000c4b8:	0f af f8             	imul   edi,eax
c000c4bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	01 f8                	add    eax,edi
c000c4c4:	99                   	cdq    
c000c4c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4cb:	e9 61 fc ff ff       	jmp    c000c131 <sinc_hex_vari_process+0x237>
c000c4d0:	83 c4 4c             	add    esp,0x4c
c000c4d3:	5b                   	pop    ebx
c000c4d4:	5e                   	pop    esi
c000c4d5:	5f                   	pop    edi
c000c4d6:	5d                   	pop    ebp
c000c4d7:	c3                   	ret    

c000c4d8 <sinc_quad_vari_process>:
c000c4d8:	55                   	push   ebp
c000c4d9:	b8 05 00 00 00       	mov    eax,0x5
c000c4de:	57                   	push   edi
c000c4df:	56                   	push   esi
c000c4e0:	53                   	push   ebx
c000c4e1:	83 ec 4c             	sub    esp,0x4c
c000c4e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4e8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4ec:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4ef:	85 db                	test   ebx,ebx
c000c4f1:	0f 84 b7 05 00 00    	je     c000caae <sinc_quad_vari_process+0x5d6>
c000c4f7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4fd:	0f af d0             	imul   edx,eax
c000c500:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c503:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c507:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c50e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c511:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c518:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c51b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c526:	57                   	push   edi
c000c527:	57                   	push   edi
c000c528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c52c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c530:	e8 5a d1 ff ff       	call   c000968f <is_bad_src_ratio>
c000c535:	83 c4 10             	add    esp,0x10
c000c538:	89 c2                	mov    edx,eax
c000c53a:	b8 16 00 00 00       	mov    eax,0x16
c000c53f:	85 d2                	test   edx,edx
c000c541:	0f 85 67 05 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c547:	83 ec 0c             	sub    esp,0xc
c000c54a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c54d:	e8 f1 87 01 00       	call   c0024d43 <__floatsidf>
c000c552:	83 c4 10             	add    esp,0x10
c000c555:	89 04 24             	mov    DWORD PTR [esp],eax
c000c558:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c55c:	68 00 00 00 40       	push   0x40000000
c000c561:	6a 00                	push   0x0
c000c563:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c567:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c56b:	e8 f3 7a 01 00       	call   c0024063 <__adddf3>
c000c570:	59                   	pop    ecx
c000c571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c575:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c579:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c57c:	e8 c2 87 01 00       	call   c0024d43 <__floatsidf>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c588:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58c:	52                   	push   edx
c000c58d:	50                   	push   eax
c000c58e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c592:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c596:	e8 29 84 01 00       	call   c00249c4 <__divdf3>
c000c59b:	83 c4 10             	add    esp,0x10
c000c59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5a9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5b3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5b6:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5c1:	52                   	push   edx
c000c5c2:	50                   	push   eax
c000c5c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5cb:	e8 df 89 01 00       	call   c0024faf <__ltdf2>
c000c5d0:	83 c4 10             	add    esp,0x10
c000c5d3:	85 c0                	test   eax,eax
c000c5d5:	79 1d                	jns    c000c5f4 <sinc_quad_vari_process+0x11c>
c000c5d7:	68 00 00 f0 3f       	push   0x3ff00000
c000c5dc:	6a 00                	push   0x0
c000c5de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e6:	e8 c4 89 01 00       	call   c0024faf <__ltdf2>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	85 c0                	test   eax,eax
c000c5f0:	78 2c                	js     c000c61e <sinc_quad_vari_process+0x146>
c000c5f2:	eb 4a                	jmp    c000c63e <sinc_quad_vari_process+0x166>
c000c5f4:	68 00 00 f0 3f       	push   0x3ff00000
c000c5f9:	6a 00                	push   0x0
c000c5fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c603:	e8 a7 89 01 00       	call   c0024faf <__ltdf2>
c000c608:	83 c4 10             	add    esp,0x10
c000c60b:	85 c0                	test   eax,eax
c000c60d:	79 2f                	jns    c000c63e <sinc_quad_vari_process+0x166>
c000c60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c613:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c617:	89 04 24             	mov    DWORD PTR [esp],eax
c000c61a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c61e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c622:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62e:	e8 91 83 01 00       	call   c00249c4 <__divdf3>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c63a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c63e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c641:	50                   	push   eax
c000c642:	50                   	push   eax
c000c643:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64b:	e8 10 8b 01 00       	call   c0025160 <lrint>
c000c650:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c653:	40                   	inc    eax
c000c654:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c658:	0f af c7             	imul   eax,edi
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c662:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c666:	58                   	pop    eax
c000c667:	5a                   	pop    edx
c000c668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c670:	e8 99 f0 ff ff       	call   c000b70e <fmod_one>
c000c675:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c678:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c67c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c680:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c683:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c697:	e8 18 80 01 00       	call   c00246b4 <__subdf3>
c000c69c:	83 c4 18             	add    esp,0x18
c000c69f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a7:	52                   	push   edx
c000c6a8:	50                   	push   eax
c000c6a9:	e8 b2 8a 01 00       	call   c0025160 <lrint>
c000c6ae:	0f af f8             	imul   edi,eax
c000c6b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6b5:	01 f8                	add    eax,edi
c000c6b7:	99                   	cdq    
c000c6b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c6:	68 00 00 f0 3f       	push   0x3ff00000
c000c6cb:	6a 00                	push   0x0
c000c6cd:	e8 f2 82 01 00       	call   c00249c4 <__divdf3>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c6e2:	68 23 42 92 0c       	push   0xc924223
c000c6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ef:	e8 6f 79 01 00       	call   c0024063 <__adddf3>
c000c6f4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6f8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6fc:	83 c4 20             	add    esp,0x20
c000c6ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c707:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c70f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c712:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c715:	7d 4e                	jge    c000c765 <sinc_quad_vari_process+0x28d>
c000c717:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c71a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c71d:	01 c8                	add    eax,ecx
c000c71f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c722:	99                   	cdq    
c000c723:	f7 f9                	idiv   ecx
c000c725:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c729:	7d 0c                	jge    c000c737 <sinc_quad_vari_process+0x25f>
c000c72b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c72e:	85 ff                	test   edi,edi
c000c730:	79 69                	jns    c000c79b <sinc_quad_vari_process+0x2c3>
c000c732:	e9 e4 00 00 00       	jmp    c000c81b <sinc_quad_vari_process+0x343>
c000c737:	50                   	push   eax
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	56                   	push   esi
c000c73d:	53                   	push   ebx
c000c73e:	e8 61 f0 ff ff       	call   c000b7a4 <prepare_data>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c749:	85 c0                	test   eax,eax
c000c74b:	0f 85 5d 03 00 00    	jne    c000caae <sinc_quad_vari_process+0x5d6>
c000c751:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c754:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c757:	01 c8                	add    eax,ecx
c000c759:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c75c:	99                   	cdq    
c000c75d:	f7 f9                	idiv   ecx
c000c75f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c763:	7c c6                	jl     c000c72b <sinc_quad_vari_process+0x253>
c000c765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c76c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c76f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c77d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c780:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c783:	99                   	cdq    
c000c784:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c787:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c78a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c78d:	99                   	cdq    
c000c78e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c791:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c794:	31 c0                	xor    eax,eax
c000c796:	e9 13 03 00 00       	jmp    c000caae <sinc_quad_vari_process+0x5d6>
c000c79b:	83 ec 0c             	sub    esp,0xc
c000c79e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7a1:	e8 9d 85 01 00       	call   c0024d43 <__floatsidf>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c1:	e8 9d 78 01 00       	call   c0024063 <__adddf3>
c000c7c6:	83 c4 10             	add    esp,0x10
c000c7c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e1:	e8 7d 78 01 00       	call   c0024063 <__adddf3>
c000c7e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	e8 4d 85 01 00       	call   c0024d43 <__floatsidf>
c000c7f6:	83 c4 10             	add    esp,0x10
c000c7f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c801:	52                   	push   edx
c000c802:	50                   	push   eax
c000c803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c807:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80b:	e8 9d 87 01 00       	call   c0024fad <__gedf2>
c000c810:	83 c4 10             	add    esp,0x10
c000c813:	85 c0                	test   eax,eax
c000c815:	0f 89 4a ff ff ff    	jns    c000c765 <sinc_quad_vari_process+0x28d>
c000c81b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c81f:	0f 8e ef 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c825:	83 ec 10             	sub    esp,0x10
c000c828:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c82b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c82e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c831:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c834:	e8 7b 7e 01 00       	call   c00246b4 <__subdf3>
c000c839:	83 c4 18             	add    esp,0x18
c000c83c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c840:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c844:	52                   	push   edx
c000c845:	50                   	push   eax
c000c846:	e8 f5 88 01 00       	call   c0025140 <fabs>
c000c84b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c84f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c853:	83 c4 10             	add    esp,0x10
c000c856:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c85b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c860:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c864:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c868:	e8 24 87 01 00       	call   c0024f91 <__gtdf2>
c000c86d:	83 c4 10             	add    esp,0x10
c000c870:	85 c0                	test   eax,eax
c000c872:	0f 8e 9c 00 00 00    	jle    c000c914 <sinc_quad_vari_process+0x43c>
c000c878:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c87b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c87e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c882:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c886:	52                   	push   edx
c000c887:	50                   	push   eax
c000c888:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c88b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c88e:	e8 21 7e 01 00       	call   c00246b4 <__subdf3>
c000c893:	59                   	pop    ecx
c000c894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c898:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c89c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c89f:	e8 9f 84 01 00       	call   c0024d43 <__floatsidf>
c000c8a4:	83 c4 10             	add    esp,0x10
c000c8a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8af:	52                   	push   edx
c000c8b0:	50                   	push   eax
c000c8b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b9:	e8 22 7e 01 00       	call   c00246e0 <__muldf3>
c000c8be:	5f                   	pop    edi
c000c8bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8c3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8c7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8ca:	e8 74 84 01 00       	call   c0024d43 <__floatsidf>
c000c8cf:	83 c4 10             	add    esp,0x10
c000c8d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8da:	52                   	push   edx
c000c8db:	50                   	push   eax
c000c8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e4:	e8 db 80 01 00       	call   c00249c4 <__divdf3>
c000c8e9:	83 c4 10             	add    esp,0x10
c000c8ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c900:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c904:	e8 5a 77 01 00       	call   c0024063 <__adddf3>
c000c909:	83 c4 10             	add    esp,0x10
c000c90c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c910:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c91a:	e8 24 84 01 00       	call   c0024d43 <__floatsidf>
c000c91f:	83 c4 10             	add    esp,0x10
c000c922:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c926:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c92a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c92e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c936:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93a:	e8 70 86 01 00       	call   c0024faf <__ltdf2>
c000c93f:	83 c4 10             	add    esp,0x10
c000c942:	85 c0                	test   eax,eax
c000c944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c94c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c950:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c954:	78 10                	js     c000c966 <sinc_quad_vari_process+0x48e>
c000c956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c95e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c962:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c972:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c976:	e8 65 7d 01 00       	call   c00246e0 <__muldf3>
c000c97b:	59                   	pop    ecx
c000c97c:	5f                   	pop    edi
c000c97d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c981:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 55 ed ff ff       	call   c000b6e7 <double_to_fp>
c000c992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c996:	89 c7                	mov    edi,eax
c000c998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a4:	e8 37 7d 01 00       	call   c00246e0 <__muldf3>
c000c9a9:	83 c4 18             	add    esp,0x18
c000c9ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9b0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9b4:	52                   	push   edx
c000c9b5:	50                   	push   eax
c000c9b6:	e8 2c ed ff ff       	call   c000b6e7 <double_to_fp>
c000c9bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9c2:	83 c4 0c             	add    esp,0xc
c000c9c5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9c8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9cb:	50                   	push   eax
c000c9cc:	50                   	push   eax
c000c9cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9d0:	e8 6e 83 01 00       	call   c0024d43 <__floatsidf>
c000c9d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ed:	e8 d2 7f 01 00       	call   c00249c4 <__divdf3>
c000c9f2:	83 c4 18             	add    esp,0x18
c000c9f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9fd:	52                   	push   edx
c000c9fe:	89 fa                	mov    edx,edi
c000ca00:	50                   	push   eax
c000ca01:	89 d8                	mov    eax,ebx
c000ca03:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca07:	e8 62 d3 ff ff       	call   c0009d6e <calc_output_quad>
c000ca0c:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca20:	e8 9f 7f 01 00       	call   c00249c4 <__divdf3>
c000ca25:	83 c4 10             	add    esp,0x10
c000ca28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca40:	e8 1e 76 01 00       	call   c0024063 <__adddf3>
c000ca45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca49:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca4d:	83 c4 18             	add    esp,0x18
c000ca50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca58:	e8 b1 ec ff ff       	call   c000b70e <fmod_one>
c000ca5d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7f:	e8 30 7c 01 00       	call   c00246b4 <__subdf3>
c000ca84:	83 c4 18             	add    esp,0x18
c000ca87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca8f:	52                   	push   edx
c000ca90:	50                   	push   eax
c000ca91:	e8 ca 86 01 00       	call   c0025160 <lrint>
c000ca96:	0f af f8             	imul   edi,eax
c000ca99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca9d:	83 c4 10             	add    esp,0x10
c000caa0:	01 f8                	add    eax,edi
c000caa2:	99                   	cdq    
c000caa3:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000caa6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000caa9:	e9 61 fc ff ff       	jmp    c000c70f <sinc_quad_vari_process+0x237>
c000caae:	83 c4 4c             	add    esp,0x4c
c000cab1:	5b                   	pop    ebx
c000cab2:	5e                   	pop    esi
c000cab3:	5f                   	pop    edi
c000cab4:	5d                   	pop    ebp
c000cab5:	c3                   	ret    

c000cab6 <sinc_stereo_vari_process>:
c000cab6:	55                   	push   ebp
c000cab7:	b8 05 00 00 00       	mov    eax,0x5
c000cabc:	57                   	push   edi
c000cabd:	56                   	push   esi
c000cabe:	53                   	push   ebx
c000cabf:	83 ec 4c             	sub    esp,0x4c
c000cac2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cac6:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caca:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cacd:	85 db                	test   ebx,ebx
c000cacf:	0f 84 b7 05 00 00    	je     c000d08c <sinc_stereo_vari_process+0x5d6>
c000cad5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000cad8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cadb:	0f af d0             	imul   edx,eax
c000cade:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cae1:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cae5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caf6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000caf9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cafc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb04:	57                   	push   edi
c000cb05:	57                   	push   edi
c000cb06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb0e:	e8 7c cb ff ff       	call   c000968f <is_bad_src_ratio>
c000cb13:	83 c4 10             	add    esp,0x10
c000cb16:	89 c2                	mov    edx,eax
c000cb18:	b8 16 00 00 00       	mov    eax,0x16
c000cb1d:	85 d2                	test   edx,edx
c000cb1f:	0f 85 67 05 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cb25:	83 ec 0c             	sub    esp,0xc
c000cb28:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb2b:	e8 13 82 01 00       	call   c0024d43 <__floatsidf>
c000cb30:	83 c4 10             	add    esp,0x10
c000cb33:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb3a:	68 00 00 00 40       	push   0x40000000
c000cb3f:	6a 00                	push   0x0
c000cb41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb49:	e8 15 75 01 00       	call   c0024063 <__adddf3>
c000cb4e:	59                   	pop    ecx
c000cb4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5a:	e8 e4 81 01 00       	call   c0024d43 <__floatsidf>
c000cb5f:	83 c4 10             	add    esp,0x10
c000cb62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb6a:	52                   	push   edx
c000cb6b:	50                   	push   eax
c000cb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb74:	e8 4b 7e 01 00       	call   c00249c4 <__divdf3>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb87:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb91:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb94:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb9f:	52                   	push   edx
c000cba0:	50                   	push   eax
c000cba1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cba9:	e8 01 84 01 00       	call   c0024faf <__ltdf2>
c000cbae:	83 c4 10             	add    esp,0x10
c000cbb1:	85 c0                	test   eax,eax
c000cbb3:	79 1d                	jns    c000cbd2 <sinc_stereo_vari_process+0x11c>
c000cbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000cbba:	6a 00                	push   0x0
c000cbbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc4:	e8 e6 83 01 00       	call   c0024faf <__ltdf2>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	85 c0                	test   eax,eax
c000cbce:	78 2c                	js     c000cbfc <sinc_stereo_vari_process+0x146>
c000cbd0:	eb 4a                	jmp    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbd2:	68 00 00 f0 3f       	push   0x3ff00000
c000cbd7:	6a 00                	push   0x0
c000cbd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe1:	e8 c9 83 01 00       	call   c0024faf <__ltdf2>
c000cbe6:	83 c4 10             	add    esp,0x10
c000cbe9:	85 c0                	test   eax,eax
c000cbeb:	79 2f                	jns    c000cc1c <sinc_stereo_vari_process+0x166>
c000cbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbf8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbfc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc0c:	e8 b3 7d 01 00       	call   c00249c4 <__divdf3>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc1c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc1f:	50                   	push   eax
c000cc20:	50                   	push   eax
c000cc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc29:	e8 32 85 01 00       	call   c0025160 <lrint>
c000cc2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc31:	40                   	inc    eax
c000cc32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc36:	0f af c7             	imul   eax,edi
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc44:	58                   	pop    eax
c000cc45:	5a                   	pop    edx
c000cc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4e:	e8 bb ea ff ff       	call   c000b70e <fmod_one>
c000cc53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc5e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc75:	e8 3a 7a 01 00       	call   c00246b4 <__subdf3>
c000cc7a:	83 c4 18             	add    esp,0x18
c000cc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc85:	52                   	push   edx
c000cc86:	50                   	push   eax
c000cc87:	e8 d4 84 01 00       	call   c0025160 <lrint>
c000cc8c:	0f af f8             	imul   edi,eax
c000cc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc93:	01 f8                	add    eax,edi
c000cc95:	99                   	cdq    
c000cc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca4:	68 00 00 f0 3f       	push   0x3ff00000
c000cca9:	6a 00                	push   0x0
c000ccab:	e8 14 7d 01 00       	call   c00249c4 <__divdf3>
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccc0:	68 23 42 92 0c       	push   0xc924223
c000ccc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cccd:	e8 91 73 01 00       	call   c0024063 <__adddf3>
c000ccd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccda:	83 c4 20             	add    esp,0x20
c000ccdd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cce5:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccf3:	7d 4e                	jge    c000cd43 <sinc_stereo_vari_process+0x28d>
c000ccf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccfb:	01 c8                	add    eax,ecx
c000ccfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd00:	99                   	cdq    
c000cd01:	f7 f9                	idiv   ecx
c000cd03:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd07:	7d 0c                	jge    c000cd15 <sinc_stereo_vari_process+0x25f>
c000cd09:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd0c:	85 ff                	test   edi,edi
c000cd0e:	79 69                	jns    c000cd79 <sinc_stereo_vari_process+0x2c3>
c000cd10:	e9 e4 00 00 00       	jmp    c000cdf9 <sinc_stereo_vari_process+0x343>
c000cd15:	50                   	push   eax
c000cd16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1a:	56                   	push   esi
c000cd1b:	53                   	push   ebx
c000cd1c:	e8 83 ea ff ff       	call   c000b7a4 <prepare_data>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd27:	85 c0                	test   eax,eax
c000cd29:	0f 85 5d 03 00 00    	jne    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd35:	01 c8                	add    eax,ecx
c000cd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd3a:	99                   	cdq    
c000cd3b:	f7 f9                	idiv   ecx
c000cd3d:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd41:	7c c6                	jl     c000cd09 <sinc_stereo_vari_process+0x253>
c000cd43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd4a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd61:	99                   	cdq    
c000cd62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd65:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd6b:	99                   	cdq    
c000cd6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd6f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd72:	31 c0                	xor    eax,eax
c000cd74:	e9 13 03 00 00       	jmp    c000d08c <sinc_stereo_vari_process+0x5d6>
c000cd79:	83 ec 0c             	sub    esp,0xc
c000cd7c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd7f:	e8 bf 7f 01 00       	call   c0024d43 <__floatsidf>
c000cd84:	83 c4 10             	add    esp,0x10
c000cd87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9f:	e8 bf 72 01 00       	call   c0024063 <__adddf3>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbf:	e8 9f 72 01 00       	call   c0024063 <__adddf3>
c000cdc4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdcb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdcf:	e8 6f 7f 01 00       	call   c0024d43 <__floatsidf>
c000cdd4:	83 c4 10             	add    esp,0x10
c000cdd7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cddb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cddf:	52                   	push   edx
c000cde0:	50                   	push   eax
c000cde1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde9:	e8 bf 81 01 00       	call   c0024fad <__gedf2>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	85 c0                	test   eax,eax
c000cdf3:	0f 89 4a ff ff ff    	jns    c000cd43 <sinc_stereo_vari_process+0x28d>
c000cdf9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdfd:	0f 8e ef 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce03:	83 ec 10             	sub    esp,0x10
c000ce06:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce09:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce0c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce0f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce12:	e8 9d 78 01 00       	call   c00246b4 <__subdf3>
c000ce17:	83 c4 18             	add    esp,0x18
c000ce1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce22:	52                   	push   edx
c000ce23:	50                   	push   eax
c000ce24:	e8 17 83 01 00       	call   c0025140 <fabs>
c000ce29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce39:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce46:	e8 46 81 01 00       	call   c0024f91 <__gtdf2>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	85 c0                	test   eax,eax
c000ce50:	0f 8e 9c 00 00 00    	jle    c000cef2 <sinc_stereo_vari_process+0x43c>
c000ce56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce59:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce64:	52                   	push   edx
c000ce65:	50                   	push   eax
c000ce66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce6c:	e8 43 78 01 00       	call   c00246b4 <__subdf3>
c000ce71:	59                   	pop    ecx
c000ce72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce76:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce7d:	e8 c1 7e 01 00       	call   c0024d43 <__floatsidf>
c000ce82:	83 c4 10             	add    esp,0x10
c000ce85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce8d:	52                   	push   edx
c000ce8e:	50                   	push   eax
c000ce8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce97:	e8 44 78 01 00       	call   c00246e0 <__muldf3>
c000ce9c:	5f                   	pop    edi
c000ce9d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cea1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cea8:	e8 96 7e 01 00       	call   c0024d43 <__floatsidf>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb8:	52                   	push   edx
c000ceb9:	50                   	push   eax
c000ceba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cebe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec2:	e8 fd 7a 01 00       	call   c00249c4 <__divdf3>
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cece:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ced2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ced6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ceda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee2:	e8 7c 71 01 00       	call   c0024063 <__adddf3>
c000cee7:	83 c4 10             	add    esp,0x10
c000ceea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cef8:	e8 46 7e 01 00       	call   c0024d43 <__floatsidf>
c000cefd:	83 c4 10             	add    esp,0x10
c000cf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf18:	e8 92 80 01 00       	call   c0024faf <__ltdf2>
c000cf1d:	83 c4 10             	add    esp,0x10
c000cf20:	85 c0                	test   eax,eax
c000cf22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf2e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf32:	78 10                	js     c000cf44 <sinc_stereo_vari_process+0x48e>
c000cf34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf54:	e8 87 77 01 00       	call   c00246e0 <__muldf3>
c000cf59:	59                   	pop    ecx
c000cf5a:	5f                   	pop    edi
c000cf5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf6b:	e8 77 e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf74:	89 c7                	mov    edi,eax
c000cf76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf82:	e8 59 77 01 00       	call   c00246e0 <__muldf3>
c000cf87:	83 c4 18             	add    esp,0x18
c000cf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf92:	52                   	push   edx
c000cf93:	50                   	push   eax
c000cf94:	e8 4e e7 ff ff       	call   c000b6e7 <double_to_fp>
c000cf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfa0:	83 c4 0c             	add    esp,0xc
c000cfa3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfa6:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfa9:	50                   	push   eax
c000cfaa:	50                   	push   eax
c000cfab:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfae:	e8 90 7d 01 00       	call   c0024d43 <__floatsidf>
c000cfb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfbb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcb:	e8 f4 79 01 00       	call   c00249c4 <__divdf3>
c000cfd0:	83 c4 18             	add    esp,0x18
c000cfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdb:	52                   	push   edx
c000cfdc:	89 fa                	mov    edx,edi
c000cfde:	50                   	push   eax
c000cfdf:	89 d8                	mov    eax,ebx
c000cfe1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfe5:	e8 a6 c9 ff ff       	call   c0009990 <calc_output_stereo>
c000cfea:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cffe:	e8 c1 79 01 00       	call   c00249c4 <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d00a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d012:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d016:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d01e:	e8 40 70 01 00       	call   c0024063 <__adddf3>
c000d023:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d027:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d02b:	83 c4 18             	add    esp,0x18
c000d02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d032:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d036:	e8 d3 e6 ff ff       	call   c000b70e <fmod_one>
c000d03b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d03e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d042:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d046:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d049:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d04d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d055:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	e8 52 76 01 00       	call   c00246b4 <__subdf3>
c000d062:	83 c4 18             	add    esp,0x18
c000d065:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d069:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d06d:	52                   	push   edx
c000d06e:	50                   	push   eax
c000d06f:	e8 ec 80 01 00       	call   c0025160 <lrint>
c000d074:	0f af f8             	imul   edi,eax
c000d077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d07b:	83 c4 10             	add    esp,0x10
c000d07e:	01 f8                	add    eax,edi
c000d080:	99                   	cdq    
c000d081:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d084:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d087:	e9 61 fc ff ff       	jmp    c000cced <sinc_stereo_vari_process+0x237>
c000d08c:	83 c4 4c             	add    esp,0x4c
c000d08f:	5b                   	pop    ebx
c000d090:	5e                   	pop    esi
c000d091:	5f                   	pop    edi
c000d092:	5d                   	pop    ebp
c000d093:	c3                   	ret    

c000d094 <sinc_mono_vari_process>:
c000d094:	55                   	push   ebp
c000d095:	b8 05 00 00 00       	mov    eax,0x5
c000d09a:	57                   	push   edi
c000d09b:	56                   	push   esi
c000d09c:	53                   	push   ebx
c000d09d:	83 ec 4c             	sub    esp,0x4c
c000d0a0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0a4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0a8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0ab:	85 db                	test   ebx,ebx
c000d0ad:	0f 84 e8 05 00 00    	je     c000d69b <sinc_mono_vari_process+0x607>
c000d0b3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0b9:	0f af d0             	imul   edx,eax
c000d0bc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0bf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0c3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0ca:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0cd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0d4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e2:	57                   	push   edi
c000d0e3:	57                   	push   edi
c000d0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ec:	e8 9e c5 ff ff       	call   c000968f <is_bad_src_ratio>
c000d0f1:	83 c4 10             	add    esp,0x10
c000d0f4:	89 c2                	mov    edx,eax
c000d0f6:	b8 16 00 00 00       	mov    eax,0x16
c000d0fb:	85 d2                	test   edx,edx
c000d0fd:	0f 85 98 05 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d103:	83 ec 0c             	sub    esp,0xc
c000d106:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d109:	e8 35 7c 01 00       	call   c0024d43 <__floatsidf>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	89 04 24             	mov    DWORD PTR [esp],eax
c000d114:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d118:	68 00 00 00 40       	push   0x40000000
c000d11d:	6a 00                	push   0x0
c000d11f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d123:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d127:	e8 37 6f 01 00       	call   c0024063 <__adddf3>
c000d12c:	59                   	pop    ecx
c000d12d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d131:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d135:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d138:	e8 06 7c 01 00       	call   c0024d43 <__floatsidf>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d144:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d148:	52                   	push   edx
c000d149:	50                   	push   eax
c000d14a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d152:	e8 6d 78 01 00       	call   c00249c4 <__divdf3>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d15e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d162:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d165:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d168:	89 04 24             	mov    DWORD PTR [esp],eax
c000d16b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d16f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d172:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d179:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d17d:	52                   	push   edx
c000d17e:	50                   	push   eax
c000d17f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d187:	e8 23 7e 01 00       	call   c0024faf <__ltdf2>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	85 c0                	test   eax,eax
c000d191:	79 1d                	jns    c000d1b0 <sinc_mono_vari_process+0x11c>
c000d193:	68 00 00 f0 3f       	push   0x3ff00000
c000d198:	6a 00                	push   0x0
c000d19a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d19e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a2:	e8 08 7e 01 00       	call   c0024faf <__ltdf2>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	85 c0                	test   eax,eax
c000d1ac:	78 2c                	js     c000d1da <sinc_mono_vari_process+0x146>
c000d1ae:	eb 4a                	jmp    c000d1fa <sinc_mono_vari_process+0x166>
c000d1b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d1b5:	6a 00                	push   0x0
c000d1b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1bf:	e8 eb 7d 01 00       	call   c0024faf <__ltdf2>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	85 c0                	test   eax,eax
c000d1c9:	79 2f                	jns    c000d1fa <sinc_mono_vari_process+0x166>
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1de:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ea:	e8 d5 77 01 00       	call   c00249c4 <__divdf3>
c000d1ef:	83 c4 10             	add    esp,0x10
c000d1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1fd:	50                   	push   eax
c000d1fe:	50                   	push   eax
c000d1ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d207:	e8 54 7f 01 00       	call   c0025160 <lrint>
c000d20c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d20f:	40                   	inc    eax
c000d210:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d214:	0f af c7             	imul   eax,edi
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d222:	58                   	pop    eax
c000d223:	5a                   	pop    edx
c000d224:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d228:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22c:	e8 dd e4 ff ff       	call   c000b70e <fmod_one>
c000d231:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d238:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d23c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d23f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d243:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d24b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d24f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d253:	e8 5c 74 01 00       	call   c00246b4 <__subdf3>
c000d258:	83 c4 18             	add    esp,0x18
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d263:	52                   	push   edx
c000d264:	50                   	push   eax
c000d265:	e8 f6 7e 01 00       	call   c0025160 <lrint>
c000d26a:	0f af f8             	imul   edi,eax
c000d26d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d271:	01 f8                	add    eax,edi
c000d273:	99                   	cdq    
c000d274:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d277:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	68 00 00 f0 3f       	push   0x3ff00000
c000d287:	6a 00                	push   0x0
c000d289:	e8 36 77 01 00       	call   c00249c4 <__divdf3>
c000d28e:	83 c4 10             	add    esp,0x10
c000d291:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d295:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d299:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d29e:	68 23 42 92 0c       	push   0xc924223
c000d2a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ab:	e8 b3 6d 01 00       	call   c0024063 <__adddf3>
c000d2b0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2b4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2b8:	83 c4 20             	add    esp,0x20
c000d2bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2c3:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2ce:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2d1:	7d 4e                	jge    c000d321 <sinc_mono_vari_process+0x28d>
c000d2d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2d6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2d9:	01 c8                	add    eax,ecx
c000d2db:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2de:	99                   	cdq    
c000d2df:	f7 f9                	idiv   ecx
c000d2e1:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2e5:	7d 0c                	jge    c000d2f3 <sinc_mono_vari_process+0x25f>
c000d2e7:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2ea:	85 ff                	test   edi,edi
c000d2ec:	79 69                	jns    c000d357 <sinc_mono_vari_process+0x2c3>
c000d2ee:	e9 e4 00 00 00       	jmp    c000d3d7 <sinc_mono_vari_process+0x343>
c000d2f3:	57                   	push   edi
c000d2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2f8:	56                   	push   esi
c000d2f9:	53                   	push   ebx
c000d2fa:	e8 a5 e4 ff ff       	call   c000b7a4 <prepare_data>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d305:	85 c0                	test   eax,eax
c000d307:	0f 85 8e 03 00 00    	jne    c000d69b <sinc_mono_vari_process+0x607>
c000d30d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d310:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d313:	01 c8                	add    eax,ecx
c000d315:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d318:	99                   	cdq    
c000d319:	f7 f9                	idiv   ecx
c000d31b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d31f:	7c c6                	jl     c000d2e7 <sinc_mono_vari_process+0x253>
c000d321:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d328:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d32b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d32e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d332:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d336:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d339:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d33c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d33f:	99                   	cdq    
c000d340:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d343:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d346:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d349:	99                   	cdq    
c000d34a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d34d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d350:	31 c0                	xor    eax,eax
c000d352:	e9 44 03 00 00       	jmp    c000d69b <sinc_mono_vari_process+0x607>
c000d357:	83 ec 0c             	sub    esp,0xc
c000d35a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d35d:	e8 e1 79 01 00       	call   c0024d43 <__floatsidf>
c000d362:	83 c4 10             	add    esp,0x10
c000d365:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d369:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d36d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d371:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d375:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d379:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37d:	e8 e1 6c 01 00       	call   c0024063 <__adddf3>
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d38d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d391:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d395:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d399:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39d:	e8 c1 6c 01 00       	call   c0024063 <__adddf3>
c000d3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3ad:	e8 91 79 01 00       	call   c0024d43 <__floatsidf>
c000d3b2:	83 c4 10             	add    esp,0x10
c000d3b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3bd:	52                   	push   edx
c000d3be:	50                   	push   eax
c000d3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c7:	e8 c5 7b 01 00       	call   c0024f91 <__gtdf2>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	85 c0                	test   eax,eax
c000d3d1:	0f 8f 4a ff ff ff    	jg     c000d321 <sinc_mono_vari_process+0x28d>
c000d3d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3db:	0f 8e ef 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d3e1:	83 ec 10             	sub    esp,0x10
c000d3e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3e7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3ed:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3f0:	e8 bf 72 01 00       	call   c00246b4 <__subdf3>
c000d3f5:	83 c4 18             	add    esp,0x18
c000d3f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3fc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d400:	52                   	push   edx
c000d401:	50                   	push   eax
c000d402:	e8 39 7d 01 00       	call   c0025140 <fabs>
c000d407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	83 c4 10             	add    esp,0x10
c000d412:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d417:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d424:	e8 68 7b 01 00       	call   c0024f91 <__gtdf2>
c000d429:	83 c4 10             	add    esp,0x10
c000d42c:	85 c0                	test   eax,eax
c000d42e:	0f 8e 9c 00 00 00    	jle    c000d4d0 <sinc_mono_vari_process+0x43c>
c000d434:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d437:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d43a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d43e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d447:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d44a:	e8 65 72 01 00       	call   c00246b4 <__subdf3>
c000d44f:	5f                   	pop    edi
c000d450:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d454:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d458:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d45b:	e8 e3 78 01 00       	call   c0024d43 <__floatsidf>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d46b:	52                   	push   edx
c000d46c:	50                   	push   eax
c000d46d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d471:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d475:	e8 66 72 01 00       	call   c00246e0 <__muldf3>
c000d47a:	59                   	pop    ecx
c000d47b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d47f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d483:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d486:	e8 b8 78 01 00       	call   c0024d43 <__floatsidf>
c000d48b:	83 c4 10             	add    esp,0x10
c000d48e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d492:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d496:	52                   	push   edx
c000d497:	50                   	push   eax
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a0:	e8 1f 75 01 00       	call   c00249c4 <__divdf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c0:	e8 9e 6b 01 00       	call   c0024063 <__adddf3>
c000d4c5:	83 c4 10             	add    esp,0x10
c000d4c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4d6:	e8 68 78 01 00       	call   c0024d43 <__floatsidf>
c000d4db:	83 c4 10             	add    esp,0x10
c000d4de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f6:	e8 b4 7a 01 00       	call   c0024faf <__ltdf2>
c000d4fb:	83 c4 10             	add    esp,0x10
c000d4fe:	85 c0                	test   eax,eax
c000d500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d508:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d50c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d510:	78 10                	js     c000d522 <sinc_mono_vari_process+0x48e>
c000d512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d516:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d51a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d51e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d52e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d532:	e8 a9 71 01 00       	call   c00246e0 <__muldf3>
c000d537:	59                   	pop    ecx
c000d538:	5f                   	pop    edi
c000d539:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d53d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d541:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d545:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d549:	e8 99 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d54e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d552:	89 c7                	mov    edi,eax
c000d554:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d560:	e8 7b 71 01 00       	call   c00246e0 <__muldf3>
c000d565:	83 c4 18             	add    esp,0x18
c000d568:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d56c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d570:	52                   	push   edx
c000d571:	50                   	push   eax
c000d572:	e8 70 e1 ff ff       	call   c000b6e7 <double_to_fp>
c000d577:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d581:	e8 bd 77 01 00       	call   c0024d43 <__floatsidf>
c000d586:	83 c4 10             	add    esp,0x10
c000d589:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d58d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d591:	52                   	push   edx
c000d592:	50                   	push   eax
c000d593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59b:	e8 24 74 01 00       	call   c00249c4 <__divdf3>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5a7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5af:	89 d8                	mov    eax,ebx
c000d5b1:	89 fa                	mov    edx,edi
c000d5b3:	e8 7c c1 ff ff       	call   c0009734 <calc_output_single>
c000d5b8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5bb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5c6:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5ca:	52                   	push   edx
c000d5cb:	50                   	push   eax
c000d5cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d4:	e8 07 71 01 00       	call   c00246e0 <__muldf3>
c000d5d9:	59                   	pop    ecx
c000d5da:	59                   	pop    ecx
c000d5db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5eb:	e8 c3 79 01 00       	call   c0024fb3 <__truncdfsf2>
c000d5f0:	83 c4 10             	add    esp,0x10
c000d5f3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5f7:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5fa:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d609:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d60d:	e8 b2 73 01 00       	call   c00249c4 <__divdf3>
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d619:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d625:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d629:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d62d:	e8 31 6a 01 00       	call   c0024063 <__adddf3>
c000d632:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d636:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d63a:	83 c4 18             	add    esp,0x18
c000d63d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d645:	e8 c4 e0 ff ff       	call   c000b70e <fmod_one>
c000d64a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d64d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d651:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d655:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d658:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d660:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d664:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d668:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d66c:	e8 43 70 01 00       	call   c00246b4 <__subdf3>
c000d671:	83 c4 18             	add    esp,0x18
c000d674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d678:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d67c:	52                   	push   edx
c000d67d:	50                   	push   eax
c000d67e:	e8 dd 7a 01 00       	call   c0025160 <lrint>
c000d683:	0f af f8             	imul   edi,eax
c000d686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	01 f8                	add    eax,edi
c000d68f:	99                   	cdq    
c000d690:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d693:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d696:	e9 30 fc ff ff       	jmp    c000d2cb <sinc_mono_vari_process+0x237>
c000d69b:	83 c4 4c             	add    esp,0x4c
c000d69e:	5b                   	pop    ebx
c000d69f:	5e                   	pop    esi
c000d6a0:	5f                   	pop    edi
c000d6a1:	5d                   	pop    ebp
c000d6a2:	c3                   	ret    

c000d6a3 <sinc_get_name>:
c000d6a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6a7:	31 c0                	xor    eax,eax
c000d6a9:	83 fa 02             	cmp    edx,0x2
c000d6ac:	77 07                	ja     c000d6b5 <sinc_get_name+0x12>
c000d6ae:	8b 04 95 44 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd96bc]
c000d6b5:	c3                   	ret    

c000d6b6 <sinc_get_description>:
c000d6b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ba:	31 c0                	xor    eax,eax
c000d6bc:	83 fa 02             	cmp    edx,0x2
c000d6bf:	77 07                	ja     c000d6c8 <sinc_get_description+0x12>
c000d6c1:	8b 04 95 38 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd96c8]
c000d6c8:	c3                   	ret    

c000d6c9 <sinc_set_converter>:
c000d6c9:	53                   	push   ebx
c000d6ca:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6d0:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	74 13                	je     c000d6f1 <sinc_set_converter+0x28>
c000d6de:	83 ec 0c             	sub    esp,0xc
c000d6e1:	50                   	push   eax
c000d6e2:	e8 97 1a 00 00       	call   c000f17e <free>
c000d6e7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6ee:	83 c4 10             	add    esp,0x10
c000d6f1:	50                   	push   eax
c000d6f2:	68 44 08 00 00       	push   0x844
c000d6f7:	6a 00                	push   0x0
c000d6f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6fd:	50                   	push   eax
c000d6fe:	e8 c2 2f ff ff       	call   c00006c5 <memset>
c000d703:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	b8 0b 00 00 00       	mov    eax,0xb
c000d70e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d714:	7f 6e                	jg     c000d784 <sinc_set_converter+0xbb>
c000d716:	83 fa 01             	cmp    edx,0x1
c000d719:	75 10                	jne    c000d72b <sinc_set_converter+0x62>
c000d71b:	c7 43 24 94 d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d094
c000d722:	c7 43 20 94 d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d094
c000d729:	eb 4d                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d72b:	83 fa 02             	cmp    edx,0x2
c000d72e:	75 10                	jne    c000d740 <sinc_set_converter+0x77>
c000d730:	c7 43 24 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cab6
c000d737:	c7 43 20 b6 ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cab6
c000d73e:	eb 38                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d740:	83 fa 04             	cmp    edx,0x4
c000d743:	75 10                	jne    c000d755 <sinc_set_converter+0x8c>
c000d745:	c7 43 24 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4d8
c000d74c:	c7 43 20 d8 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4d8
c000d753:	eb 23                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d755:	83 fa 06             	cmp    edx,0x6
c000d758:	75 10                	jne    c000d76a <sinc_set_converter+0xa1>
c000d75a:	c7 43 24 fa be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000befa
c000d761:	c7 43 20 fa be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000befa
c000d768:	eb 0e                	jmp    c000d778 <sinc_set_converter+0xaf>
c000d76a:	c7 43 24 1e b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b91e
c000d771:	c7 43 20 1e b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b91e
c000d778:	c7 43 28 3b ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab3b
c000d77f:	b8 0a 00 00 00       	mov    eax,0xa
c000d784:	81 c4 58 08 00 00    	add    esp,0x858
c000d78a:	5b                   	pop    ebx
c000d78b:	c3                   	ret    

c000d78c <is_bad_src_ratio>:
c000d78c:	83 ec 1c             	sub    esp,0x1c
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d797:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d79b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d79f:	b8 00 00 00 00       	mov    eax,0x0
c000d7a4:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7a9:	52                   	push   edx
c000d7aa:	50                   	push   eax
c000d7ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b3:	e8 f7 77 01 00       	call   c0024faf <__ltdf2>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	85 c0                	test   eax,eax
c000d7bd:	78 20                	js     c000d7df <is_bad_src_ratio+0x53>
c000d7bf:	b8 00 00 00 00       	mov    eax,0x0
c000d7c4:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7c9:	52                   	push   edx
c000d7ca:	50                   	push   eax
c000d7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d3:	e8 b9 77 01 00       	call   c0024f91 <__gtdf2>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	85 c0                	test   eax,eax
c000d7dd:	7e 07                	jle    c000d7e6 <is_bad_src_ratio+0x5a>
c000d7df:	b8 01 00 00 00       	mov    eax,0x1
c000d7e4:	eb 05                	jmp    c000d7eb <is_bad_src_ratio+0x5f>
c000d7e6:	b8 00 00 00 00       	mov    eax,0x0
c000d7eb:	83 c4 1c             	add    esp,0x1c
c000d7ee:	c3                   	ret    

c000d7ef <fmod_one>:
c000d7ef:	83 ec 2c             	sub    esp,0x2c
c000d7f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d802:	83 ec 08             	sub    esp,0x8
c000d805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d80d:	e8 4e 79 01 00       	call   c0025160 <lrint>
c000d812:	83 c4 10             	add    esp,0x10
c000d815:	83 ec 0c             	sub    esp,0xc
c000d818:	50                   	push   eax
c000d819:	e8 25 75 01 00       	call   c0024d43 <__floatsidf>
c000d81e:	83 c4 10             	add    esp,0x10
c000d821:	52                   	push   edx
c000d822:	50                   	push   eax
c000d823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82b:	e8 84 6e 01 00       	call   c00246b4 <__subdf3>
c000d830:	83 c4 10             	add    esp,0x10
c000d833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d837:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d83b:	b8 00 00 00 00       	mov    eax,0x0
c000d840:	ba 00 00 00 00       	mov    edx,0x0
c000d845:	52                   	push   edx
c000d846:	50                   	push   eax
c000d847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d84f:	e8 5b 77 01 00       	call   c0024faf <__ltdf2>
c000d854:	83 c4 10             	add    esp,0x10
c000d857:	85 c0                	test   eax,eax
c000d859:	79 1e                	jns    c000d879 <fmod_one+0x8a>
c000d85b:	b8 00 00 00 00       	mov    eax,0x0
c000d860:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d865:	52                   	push   edx
c000d866:	50                   	push   eax
c000d867:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86f:	e8 ef 67 01 00       	call   c0024063 <__adddf3>
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	eb 08                	jmp    c000d881 <fmod_one+0x92>
c000d879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d87d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d881:	83 c4 2c             	add    esp,0x2c
c000d884:	c3                   	ret    

c000d885 <zoh_vari_process>:
c000d885:	55                   	push   ebp
c000d886:	57                   	push   edi
c000d887:	56                   	push   esi
c000d888:	53                   	push   ebx
c000d889:	83 ec 3c             	sub    esp,0x3c
c000d88c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d890:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d894:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d89c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8a0:	0f 8e a9 05 00 00    	jle    c000de4f <zoh_vari_process+0x5ca>
c000d8a6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8a9:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8b1:	85 db                	test   ebx,ebx
c000d8b3:	0f 84 96 05 00 00    	je     c000de4f <zoh_vari_process+0x5ca>
c000d8b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8bc:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8c0:	74 19                	je     c000d8db <zoh_vari_process+0x56>
c000d8c2:	31 d2                	xor    edx,edx
c000d8c4:	39 c2                	cmp    edx,eax
c000d8c6:	7d 0c                	jge    c000d8d4 <zoh_vari_process+0x4f>
c000d8c8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8ca:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8cd:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8d1:	42                   	inc    edx
c000d8d2:	eb f0                	jmp    c000d8c4 <zoh_vari_process+0x3f>
c000d8d4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8db:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8de:	0f af d0             	imul   edx,eax
c000d8e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d8e4:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8e8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8ef:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8f2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d903:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d907:	57                   	push   edi
c000d908:	57                   	push   edi
c000d909:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d911:	e8 76 fe ff ff       	call   c000d78c <is_bad_src_ratio>
c000d916:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d922:	0f 85 1f 05 00 00    	jne    c000de47 <zoh_vari_process+0x5c2>
c000d928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d92b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d932:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d936:	68 00 00 f0 3f       	push   0x3ff00000
c000d93b:	6a 00                	push   0x0
c000d93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d941:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d945:	e8 65 76 01 00       	call   c0024faf <__ltdf2>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	85 c0                	test   eax,eax
c000d94f:	0f 89 dc 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d955:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d958:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d95b:	0f 8d d0 01 00 00    	jge    c000db31 <zoh_vari_process+0x2ac>
c000d961:	83 ec 0c             	sub    esp,0xc
c000d964:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d967:	e8 d7 73 01 00       	call   c0024d43 <__floatsidf>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d972:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d97e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d982:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d986:	e8 55 6d 01 00       	call   c00246e0 <__muldf3>
c000d98b:	59                   	pop    ecx
c000d98c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d990:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d994:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d997:	e8 a7 73 01 00       	call   c0024d43 <__floatsidf>
c000d99c:	83 c4 10             	add    esp,0x10
c000d99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9a7:	52                   	push   edx
c000d9a8:	50                   	push   eax
c000d9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b1:	e8 ad 66 01 00       	call   c0024063 <__adddf3>
c000d9b6:	59                   	pop    ecx
c000d9b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9bf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9c2:	e8 7c 73 01 00       	call   c0024d43 <__floatsidf>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d2:	52                   	push   edx
c000d9d3:	50                   	push   eax
c000d9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9dc:	e8 cc 75 01 00       	call   c0024fad <__gedf2>
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	85 c0                	test   eax,eax
c000d9e6:	0f 89 45 01 00 00    	jns    c000db31 <zoh_vari_process+0x2ac>
c000d9ec:	85 ff                	test   edi,edi
c000d9ee:	0f 8e ee 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000d9f4:	83 ec 10             	sub    esp,0x10
c000d9f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9fa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da00:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da03:	e8 ac 6c 01 00       	call   c00246b4 <__subdf3>
c000da08:	83 c4 18             	add    esp,0x18
c000da0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da13:	52                   	push   edx
c000da14:	50                   	push   eax
c000da15:	e8 26 77 01 00       	call   c0025140 <fabs>
c000da1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da2a:	68 23 42 92 0c       	push   0xc924223
c000da2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da37:	e8 55 75 01 00       	call   c0024f91 <__gtdf2>
c000da3c:	83 c4 10             	add    esp,0x10
c000da3f:	85 c0                	test   eax,eax
c000da41:	0f 8e 9b 00 00 00    	jle    c000dae2 <zoh_vari_process+0x25d>
c000da47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da4a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da50:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da54:	52                   	push   edx
c000da55:	50                   	push   eax
c000da56:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da59:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da5c:	e8 53 6c 01 00       	call   c00246b4 <__subdf3>
c000da61:	59                   	pop    ecx
c000da62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da6a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da6d:	e8 d1 72 01 00       	call   c0024d43 <__floatsidf>
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da7d:	52                   	push   edx
c000da7e:	50                   	push   eax
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da87:	e8 54 6c 01 00       	call   c00246e0 <__muldf3>
c000da8c:	5f                   	pop    edi
c000da8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da91:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da98:	e8 a6 72 01 00       	call   c0024d43 <__floatsidf>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daa4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daa8:	52                   	push   edx
c000daa9:	50                   	push   eax
c000daaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab2:	e8 0d 6f 01 00       	call   c00249c4 <__divdf3>
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dabe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dac2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dac6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dace:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad2:	e8 8c 65 01 00       	call   c0024063 <__adddf3>
c000dad7:	83 c4 10             	add    esp,0x10
c000dada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae2:	31 c0                	xor    eax,eax
c000dae4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dae7:	7e 13                	jle    c000dafc <zoh_vari_process+0x277>
c000dae9:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daed:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daf0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daf3:	40                   	inc    eax
c000daf4:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daf7:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dafa:	eb e8                	jmp    c000dae4 <zoh_vari_process+0x25f>
c000dafc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db04:	68 00 00 f0 3f       	push   0x3ff00000
c000db09:	6a 00                	push   0x0
c000db0b:	e8 b4 6e 01 00       	call   c00249c4 <__divdf3>
c000db10:	83 c4 10             	add    esp,0x10
c000db13:	89 04 24             	mov    DWORD PTR [esp],eax
c000db16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db1a:	52                   	push   edx
c000db1b:	50                   	push   eax
c000db1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db24:	e8 3a 65 01 00       	call   c0024063 <__adddf3>
c000db29:	83 c4 10             	add    esp,0x10
c000db2c:	e9 fd fd ff ff       	jmp    c000d92e <zoh_vari_process+0xa9>
c000db31:	57                   	push   edi
c000db32:	57                   	push   edi
c000db33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3b:	e8 af fc ff ff       	call   c000d7ef <fmod_one>
c000db40:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db47:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5b:	e8 54 6b 01 00       	call   c00246b4 <__subdf3>
c000db60:	83 c4 18             	add    esp,0x18
c000db63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db6b:	52                   	push   edx
c000db6c:	50                   	push   eax
c000db6d:	e8 ee 75 01 00       	call   c0025160 <lrint>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	0f af f8             	imul   edi,eax
c000db78:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db7b:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db7e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db85:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db8c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db8f:	0f 8d 1d 02 00 00    	jge    c000ddb2 <zoh_vari_process+0x52d>
c000db95:	83 ec 0c             	sub    esp,0xc
c000db98:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db9b:	e8 a3 71 01 00       	call   c0024d43 <__floatsidf>
c000dba0:	83 c4 10             	add    esp,0x10
c000dba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbab:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbaf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbbb:	e8 20 6b 01 00       	call   c00246e0 <__muldf3>
c000dbc0:	59                   	pop    ecx
c000dbc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbc5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcd:	e8 71 71 01 00       	call   c0024d43 <__floatsidf>
c000dbd2:	83 c4 10             	add    esp,0x10
c000dbd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbd9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbdd:	52                   	push   edx
c000dbde:	50                   	push   eax
c000dbdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe7:	e8 77 64 01 00       	call   c0024063 <__adddf3>
c000dbec:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbf3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbf7:	e8 47 71 01 00       	call   c0024d43 <__floatsidf>
c000dbfc:	83 c4 10             	add    esp,0x10
c000dbff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc07:	52                   	push   edx
c000dc08:	50                   	push   eax
c000dc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc11:	e8 9b 73 01 00       	call   c0024fb1 <__ledf2>
c000dc16:	83 c4 10             	add    esp,0x10
c000dc19:	85 c0                	test   eax,eax
c000dc1b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc1f:	0f 8f 8d 01 00 00    	jg     c000ddb2 <zoh_vari_process+0x52d>
c000dc25:	85 c9                	test   ecx,ecx
c000dc27:	0f 8e ef 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc2d:	83 ec 10             	sub    esp,0x10
c000dc30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc33:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc36:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc39:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc3c:	e8 73 6a 01 00       	call   c00246b4 <__subdf3>
c000dc41:	83 c4 18             	add    esp,0x18
c000dc44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc4c:	52                   	push   edx
c000dc4d:	50                   	push   eax
c000dc4e:	e8 ed 74 01 00       	call   c0025140 <fabs>
c000dc53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc63:	68 23 42 92 0c       	push   0xc924223
c000dc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc70:	e8 1c 73 01 00       	call   c0024f91 <__gtdf2>
c000dc75:	83 c4 10             	add    esp,0x10
c000dc78:	85 c0                	test   eax,eax
c000dc7a:	0f 8e 9c 00 00 00    	jle    c000dd1c <zoh_vari_process+0x497>
c000dc80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc8e:	52                   	push   edx
c000dc8f:	50                   	push   eax
c000dc90:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc93:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc96:	e8 19 6a 01 00       	call   c00246b4 <__subdf3>
c000dc9b:	5f                   	pop    edi
c000dc9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dca4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dca7:	e8 97 70 01 00       	call   c0024d43 <__floatsidf>
c000dcac:	83 c4 10             	add    esp,0x10
c000dcaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcb7:	52                   	push   edx
c000dcb8:	50                   	push   eax
c000dcb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc1:	e8 1a 6a 01 00       	call   c00246e0 <__muldf3>
c000dcc6:	59                   	pop    ecx
c000dcc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dccb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dccf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcd2:	e8 6c 70 01 00       	call   c0024d43 <__floatsidf>
c000dcd7:	83 c4 10             	add    esp,0x10
c000dcda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcde:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dce2:	52                   	push   edx
c000dce3:	50                   	push   eax
c000dce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcec:	e8 d3 6c 01 00       	call   c00249c4 <__divdf3>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcfc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0c:	e8 52 63 01 00       	call   c0024063 <__adddf3>
c000dd11:	83 c4 10             	add    esp,0x10
c000dd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd1c:	31 c0                	xor    eax,eax
c000dd1e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd21:	39 c2                	cmp    edx,eax
c000dd23:	7e 1d                	jle    c000dd42 <zoh_vari_process+0x4bd>
c000dd25:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd28:	29 d1                	sub    ecx,edx
c000dd2a:	89 ca                	mov    edx,ecx
c000dd2c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd2e:	01 c2                	add    edx,eax
c000dd30:	40                   	inc    eax
c000dd31:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd34:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd37:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd3a:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd3d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd40:	eb dc                	jmp    c000dd1e <zoh_vari_process+0x499>
c000dd42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd46:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd4a:	68 00 00 f0 3f       	push   0x3ff00000
c000dd4f:	6a 00                	push   0x0
c000dd51:	e8 6e 6c 01 00       	call   c00249c4 <__divdf3>
c000dd56:	83 c4 10             	add    esp,0x10
c000dd59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd5d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd61:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd65:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd71:	e8 ed 62 01 00       	call   c0024063 <__adddf3>
c000dd76:	5f                   	pop    edi
c000dd77:	59                   	pop    ecx
c000dd78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd88:	e8 62 fa ff ff       	call   c000d7ef <fmod_one>
c000dd8d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd90:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda8:	e8 07 69 01 00       	call   c00246b4 <__subdf3>
c000ddad:	e9 ae fd ff ff       	jmp    c000db60 <zoh_vari_process+0x2db>
c000ddb2:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddb6:	7d 3a                	jge    c000ddf2 <zoh_vari_process+0x56d>
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	83 ec 0c             	sub    esp,0xc
c000ddbf:	29 f8                	sub    eax,edi
c000ddc1:	99                   	cdq    
c000ddc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddc5:	50                   	push   eax
c000ddc6:	e8 78 6f 01 00       	call   c0024d43 <__floatsidf>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddd6:	52                   	push   edx
c000ddd7:	50                   	push   eax
c000ddd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde0:	e8 7e 62 01 00       	call   c0024063 <__adddf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000ddeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddf9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddfc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de02:	85 c0                	test   eax,eax
c000de04:	7f 24                	jg     c000de2a <zoh_vari_process+0x5a5>
c000de06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de11:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de17:	99                   	cdq    
c000de18:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de1b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de1e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de21:	99                   	cdq    
c000de22:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de25:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de28:	eb 25                	jmp    c000de4f <zoh_vari_process+0x5ca>
c000de2a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de2d:	31 d2                	xor    edx,edx
c000de2f:	29 c8                	sub    eax,ecx
c000de31:	c1 e0 02             	shl    eax,0x2
c000de34:	39 d1                	cmp    ecx,edx
c000de36:	7e ce                	jle    c000de06 <zoh_vari_process+0x581>
c000de38:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de3a:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de3d:	83 c0 04             	add    eax,0x4
c000de40:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de44:	42                   	inc    edx
c000de45:	eb ed                	jmp    c000de34 <zoh_vari_process+0x5af>
c000de47:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de53:	83 c4 3c             	add    esp,0x3c
c000de56:	5b                   	pop    ebx
c000de57:	5e                   	pop    esi
c000de58:	5f                   	pop    edi
c000de59:	5d                   	pop    ebp
c000de5a:	c3                   	ret    

c000de5b <zoh_reset>:
c000de5b:	83 ec 0c             	sub    esp,0xc
c000de5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de62:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de65:	85 c0                	test   eax,eax
c000de67:	74 20                	je     c000de89 <zoh_reset+0x2e>
c000de69:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de6c:	83 c0 1c             	add    eax,0x1c
c000de6f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de72:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de79:	c1 e2 02             	shl    edx,0x2
c000de7c:	51                   	push   ecx
c000de7d:	52                   	push   edx
c000de7e:	6a 00                	push   0x0
c000de80:	50                   	push   eax
c000de81:	e8 3f 28 ff ff       	call   c00006c5 <memset>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	83 c4 0c             	add    esp,0xc
c000de8c:	c3                   	ret    

c000de8d <zoh_get_name>:
c000de8d:	31 c0                	xor    eax,eax
c000de8f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de94:	75 05                	jne    c000de9b <zoh_get_name+0xe>
c000de96:	b8 5e 6a 02 c0       	mov    eax,0xc0026a5e
c000de9b:	c3                   	ret    

c000de9c <zoh_get_description>:
c000de9c:	31 c0                	xor    eax,eax
c000de9e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000dea3:	75 05                	jne    c000deaa <zoh_get_description+0xe>
c000dea5:	b8 6f 6a 02 c0       	mov    eax,0xc0026a6f
c000deaa:	c3                   	ret    

c000deab <zoh_set_converter>:
c000deab:	53                   	push   ebx
c000deac:	b8 0a 00 00 00       	mov    eax,0xa
c000deb1:	83 ec 08             	sub    esp,0x8
c000deb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000deb8:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000debd:	75 6e                	jne    c000df2d <zoh_set_converter+0x82>
c000debf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dec2:	85 c0                	test   eax,eax
c000dec4:	74 13                	je     c000ded9 <zoh_set_converter+0x2e>
c000dec6:	83 ec 0c             	sub    esp,0xc
c000dec9:	50                   	push   eax
c000deca:	e8 af 12 00 00       	call   c000f17e <free>
c000decf:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	50                   	push   eax
c000deda:	50                   	push   eax
c000dedb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dede:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000dee5:	50                   	push   eax
c000dee6:	6a 01                	push   0x1
c000dee8:	e8 b1 12 00 00       	call   c000f19e <calloc>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	89 c2                	mov    edx,eax
c000def2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000def5:	85 d2                	test   edx,edx
c000def7:	b8 01 00 00 00       	mov    eax,0x1
c000defc:	74 2f                	je     c000df2d <zoh_set_converter+0x82>
c000defe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df01:	83 ec 0c             	sub    esp,0xc
c000df04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df07:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df0d:	c7 43 24 85 d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d885
c000df14:	c7 43 20 85 d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d885
c000df1b:	c7 43 28 5b de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de5b
c000df22:	53                   	push   ebx
c000df23:	e8 33 ff ff ff       	call   c000de5b <zoh_reset>
c000df28:	83 c4 10             	add    esp,0x10
c000df2b:	31 c0                	xor    eax,eax
c000df2d:	83 c4 08             	add    esp,0x8
c000df30:	5b                   	pop    ebx
c000df31:	c3                   	ret    

c000df32 <Computer::close(int, int, void*)>:
c000df32:	57                   	push   edi
c000df33:	56                   	push   esi
c000df34:	53                   	push   ebx
c000df35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df3d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df41:	83 ec 0c             	sub    esp,0xc
c000df44:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df4a:	e8 a9 58 00 00       	call   c00137f8 <Device::closeAll()>
c000df4f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	8b 10                	mov    edx,DWORD PTR [eax]
c000df5a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df5e:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df66:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df6e:	5b                   	pop    ebx
c000df6f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df72:	5e                   	pop    esi
c000df73:	5f                   	pop    edi
c000df74:	ff e0                	jmp    eax

c000df76 <Computer::Computer()>:
c000df76:	83 ec 0c             	sub    esp,0xc
c000df79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7d:	83 ec 08             	sub    esp,0x8
c000df80:	68 a6 6a 02 c0       	push   0xc0026aa6
c000df85:	50                   	push   eax
c000df86:	e8 e7 58 00 00       	call   c0013872 <Device::Device(char const*)>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	ba 70 6c 02 c0       	mov    edx,0xc0026c70
c000df93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df97:	89 10                	mov    DWORD PTR [eax],edx
c000df99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfab:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfbf:	83 ca 04             	or     edx,0x4
c000dfc2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfd2:	0f b6 d0             	movzx  edx,al
c000dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfea:	0f b6 d0             	movzx  edx,al
c000dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e000:	8d 50 01             	lea    edx,[eax+0x1]
c000e003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e007:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e00d:	0f b6 d0             	movzx  edx,al
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e018:	83 e1 3f             	and    ecx,0x3f
c000e01b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e029:	0f b6 d0             	movzx  edx,al
c000e02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e030:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e041:	0f b6 d0             	movzx  edx,al
c000e044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e048:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e04d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e051:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e057:	8d 50 01             	lea    edx,[eax+0x1]
c000e05a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e05e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e064:	0f b6 d0             	movzx  edx,al
c000e067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e06f:	83 e1 3f             	and    ecx,0x3f
c000e072:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e080:	0f b6 d0             	movzx  edx,al
c000e083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e087:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e092:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e098:	0f b6 d0             	movzx  edx,al
c000e09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0ae:	8d 50 01             	lea    edx,[eax+0x1]
c000e0b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0b5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0bb:	0f b6 d0             	movzx  edx,al
c000e0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0c6:	83 e1 3f             	and    ecx,0x3f
c000e0c9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0cd:	90                   	nop
c000e0ce:	83 c4 0c             	add    esp,0xc
c000e0d1:	c3                   	ret    

c000e0d2 <Computer::setBootMessage(char const*)>:
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <Computer::start()>:
c000e0d4:	56                   	push   esi
c000e0d5:	53                   	push   ebx
c000e0d6:	50                   	push   eax
c000e0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0db:	e8 4a d9 00 00       	call   c001ba2a <lockScheduler()>
c000e0e0:	e8 79 dc 00 00       	call   c001bd5e <schedule()>
c000e0e5:	e8 42 d9 00 00       	call   c001ba2c <unlockScheduler()>
c000e0ea:	fb                   	sti    
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	68 3b 07 00 00       	push   0x73b
c000e0f3:	e8 90 40 00 00       	call   c0012188 <operator new(unsigned long)>
c000e0f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0ff:	89 c6                	mov    esi,eax
c000e101:	ff 35 54 ba 02 c0    	push   DWORD PTR ds:0xc002ba54
c000e107:	68 af 6a 02 c0       	push   0xc0026aaf
c000e10c:	6a 01                	push   0x1
c000e10e:	50                   	push   eax
c000e10f:	e8 76 d7 00 00       	call   c001b88a <Process::Process(bool, char const*, Process*, char**)>
c000e114:	83 c4 20             	add    esp,0x20
c000e117:	68 ff 00 00 00       	push   0xff
c000e11c:	6a 00                	push   0x0
c000e11e:	68 fb ea 00 c0       	push   0xc000eafb
c000e123:	56                   	push   esi
c000e124:	e8 2b da 00 00       	call   c001bb54 <Process::createThread(void (*)(void*), void*, int)>
c000e129:	6a 7a                	push   0x7a
c000e12b:	6a 00                	push   0x0
c000e12d:	68 8d c3 01 c0       	push   0xc001c38d
c000e132:	ff 35 54 ba 02 c0    	push   DWORD PTR ds:0xc002ba54
c000e138:	e8 17 da 00 00       	call   c001bb54 <Process::createThread(void (*)(void*), void*, int)>
c000e13d:	83 c4 20             	add    esp,0x20
c000e140:	a3 08 ba 02 c0       	mov    ds:0xc002ba08,eax
c000e145:	c6 05 cd a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5cd,0x1
c000e14c:	e8 81 44 00 00       	call   c00125d2 <initVFS()>
c000e151:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e157:	8b 10                	mov    edx,DWORD PTR [eax]
c000e159:	6a 00                	push   0x0
c000e15b:	6a 00                	push   0x0
c000e15d:	6a 00                	push   0x0
c000e15f:	50                   	push   eax
c000e160:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e163:	e8 20 c1 00 00       	call   c001a288 <setupSystemCalls()>
c000e168:	e8 63 4f 00 00       	call   c00130d0 <loadClockSettings()>
c000e16d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e170:	e8 57 56 00 00       	call   c00137cc <Device::loadDriversForAll()>
c000e175:	5a                   	pop    edx
c000e176:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c000e17c:	59                   	pop    ecx
c000e17d:	6a 01                	push   0x1
c000e17f:	68 bc 6a 02 c0       	push   0xc0026abc
c000e184:	e8 d1 d2 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c000e189:	5e                   	pop    esi
c000e18a:	5a                   	pop    edx
c000e18b:	53                   	push   ebx
c000e18c:	50                   	push   eax
c000e18d:	e8 8e d4 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c000e192:	c7 04 24 40 7c 02 c0 	mov    DWORD PTR [esp],0xc0027c40
c000e199:	e8 d9 40 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e19e:	83 c4 10             	add    esp,0x10
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	6a 02                	push   0x2
c000e1a6:	e8 0d dd 00 00       	call   c001beb8 <blockTask(TaskState)>
c000e1ab:	83 c4 10             	add    esp,0x10
c000e1ae:	eb f1                	jmp    c000e1a1 <Computer::start()+0xcd>

c000e1b0 <firstTask()>:
c000e1b0:	83 ec 18             	sub    esp,0x18
c000e1b3:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c000e1b9:	e8 16 ff ff ff       	call   c000e0d4 <Computer::start()>

c000e1be <Computer::detectFeatures()>:
c000e1be:	55                   	push   ebp
c000e1bf:	57                   	push   edi
c000e1c0:	56                   	push   esi
c000e1c1:	53                   	push   ebx
c000e1c2:	83 ec 1c             	sub    esp,0x1c
c000e1c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1c9:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1d3:	e8 cb 21 ff ff       	call   c00003a3 <detectCPUID>
c000e1d8:	85 c0                	test   eax,eax
c000e1da:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1e0:	0f 95 c2             	setne  dl
c000e1e3:	83 e0 fd             	and    eax,0xfffffffd
c000e1e6:	d1 e2                	shl    edx,1
c000e1e8:	09 d0                	or     eax,edx
c000e1ea:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1f0:	a8 02                	test   al,0x2
c000e1f2:	75 46                	jne    c000e23a <Computer::detectFeatures()+0x7c>
c000e1f4:	f6 05 e1 a5 02 c0 04 	test   BYTE PTR ds:0xc002a5e1,0x4
c000e1fb:	74 07                	je     c000e204 <Computer::detectFeatures()+0x46>
c000e1fd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e204:	e8 9d 4f 01 00       	call   c00231a6 <x87Detect>
c000e209:	83 e0 01             	and    eax,0x1
c000e20c:	c1 e0 04             	shl    eax,0x4
c000e20f:	88 c2                	mov    dl,al
c000e211:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e217:	83 e0 ef             	and    eax,0xffffffef
c000e21a:	09 d0                	or     eax,edx
c000e21c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e222:	a8 10                	test   al,0x10
c000e224:	0f 85 2a 01 00 00    	jne    c000e354 <Computer::detectFeatures()+0x196>
c000e22a:	84 c0                	test   al,al
c000e22c:	0f 88 45 01 00 00    	js     c000e377 <Computer::detectFeatures()+0x1b9>
c000e232:	83 c4 1c             	add    esp,0x1c
c000e235:	5b                   	pop    ebx
c000e236:	5e                   	pop    esi
c000e237:	5f                   	pop    edi
c000e238:	5d                   	pop    ebp
c000e239:	c3                   	ret    
c000e23a:	83 ec 0c             	sub    esp,0xc
c000e23d:	6a 20                	push   0x20
c000e23f:	e8 54 96 00 00       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c000e244:	83 e0 01             	and    eax,0x1
c000e247:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e24e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e254:	83 e0 f7             	and    eax,0xfffffff7
c000e257:	09 d0                	or     eax,edx
c000e259:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e25f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e266:	e8 2d 96 00 00       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c000e26b:	83 e0 01             	and    eax,0x1
c000e26e:	88 c2                	mov    dl,al
c000e270:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e276:	83 e0 fe             	and    eax,0xfffffffe
c000e279:	09 d0                	or     eax,edx
c000e27b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e281:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e288:	e8 0b 96 00 00       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c000e28d:	c1 e0 07             	shl    eax,0x7
c000e290:	88 c2                	mov    dl,al
c000e292:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e298:	83 e0 7f             	and    eax,0x7f
c000e29b:	09 d0                	or     eax,edx
c000e29d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2aa:	e8 e9 95 00 00       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c000e2af:	83 c4 10             	add    esp,0x10
c000e2b2:	83 e0 01             	and    eax,0x1
c000e2b5:	c1 e0 05             	shl    eax,0x5
c000e2b8:	88 c2                	mov    dl,al
c000e2ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2c0:	83 e0 df             	and    eax,0xffffffdf
c000e2c3:	09 d0                	or     eax,edx
c000e2c5:	f7 05 e0 a5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a5e0,0x401
c000e2cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2d5:	0f 84 c2 00 00 00    	je     c000e39d <Computer::detectFeatures()+0x1df>
c000e2db:	83 e0 fe             	and    eax,0xfffffffe
c000e2de:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2ea:	88 c2                	mov    dl,al
c000e2ec:	83 e2 09             	and    edx,0x9
c000e2ef:	fe ca                	dec    dl
c000e2f1:	75 09                	jne    c000e2fc <Computer::detectFeatures()+0x13e>
c000e2f3:	83 e0 fe             	and    eax,0xfffffffe
c000e2f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e303:	50                   	push   eax
c000e304:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e308:	55                   	push   ebp
c000e309:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e30d:	57                   	push   edi
c000e30e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e312:	56                   	push   esi
c000e313:	68 00 00 00 80       	push   0x80000000
c000e318:	e8 f7 94 00 00       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e31d:	83 c4 20             	add    esp,0x20
c000e320:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e32b:	0f 86 c3 fe ff ff    	jbe    c000e1f4 <Computer::detectFeatures()+0x36>
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	55                   	push   ebp
c000e336:	57                   	push   edi
c000e337:	56                   	push   esi
c000e338:	68 01 00 00 80       	push   0x80000001
c000e33d:	e8 d2 94 00 00       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e342:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e34c:	83 c4 20             	add    esp,0x20
c000e34f:	e9 a0 fe ff ff       	jmp    c000e1f4 <Computer::detectFeatures()+0x36>
c000e354:	e8 07 4e 01 00       	call   c0023160 <sseDetect>
c000e359:	88 c2                	mov    dl,al
c000e35b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e361:	c1 e2 07             	shl    edx,0x7
c000e364:	83 e0 7f             	and    eax,0x7f
c000e367:	09 d0                	or     eax,edx
c000e369:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e36f:	84 c0                	test   al,al
c000e371:	0f 89 bb fe ff ff    	jns    c000e232 <Computer::detectFeatures()+0x74>
c000e377:	e8 d4 4d 01 00       	call   c0023150 <avxDetect>
c000e37c:	83 e0 01             	and    eax,0x1
c000e37f:	c1 e0 05             	shl    eax,0x5
c000e382:	88 c2                	mov    dl,al
c000e384:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e38a:	83 e0 df             	and    eax,0xffffffdf
c000e38d:	09 d0                	or     eax,edx
c000e38f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e395:	83 c4 1c             	add    esp,0x1c
c000e398:	5b                   	pop    ebx
c000e399:	5e                   	pop    esi
c000e39a:	5f                   	pop    edi
c000e39b:	5d                   	pop    ebp
c000e39c:	c3                   	ret    
c000e39d:	83 ec 0c             	sub    esp,0xc
c000e3a0:	68 00 02 00 00       	push   0x200
c000e3a5:	e8 ee 94 00 00       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	83 e0 01             	and    eax,0x1
c000e3b0:	88 c2                	mov    dl,al
c000e3b2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e3b8:	83 e0 fe             	and    eax,0xfffffffe
c000e3bb:	09 d0                	or     eax,edx
c000e3bd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e3c3:	e9 1c ff ff ff       	jmp    c000e2e4 <Computer::detectFeatures()+0x126>

c000e3c8 <Computer::displayFeatures()>:
c000e3c8:	53                   	push   ebx
c000e3c9:	83 ec 14             	sub    esp,0x14
c000e3cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3d0:	68 df 6a 02 c0       	push   0xc0026adf
c000e3d5:	e8 9d 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e3da:	83 c4 10             	add    esp,0x10
c000e3dd:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3e4:	0f 85 73 02 00 00    	jne    c000e65d <Computer::displayFeatures()+0x295>
c000e3ea:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e3ef:	83 ec 08             	sub    esp,0x8
c000e3f2:	50                   	push   eax
c000e3f3:	68 f2 6a 02 c0       	push   0xc0026af2
c000e3f8:	e8 7a 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e3fd:	83 c4 10             	add    esp,0x10
c000e400:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e407:	0f 85 8c 02 00 00    	jne    c000e699 <Computer::displayFeatures()+0x2d1>
c000e40d:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e412:	83 ec 08             	sub    esp,0x8
c000e415:	50                   	push   eax
c000e416:	68 03 6b 02 c0       	push   0xc0026b03
c000e41b:	e8 57 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e420:	83 c4 10             	add    esp,0x10
c000e423:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e42a:	0f 85 5f 02 00 00    	jne    c000e68f <Computer::displayFeatures()+0x2c7>
c000e430:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e435:	83 ec 08             	sub    esp,0x8
c000e438:	50                   	push   eax
c000e439:	68 14 6b 02 c0       	push   0xc0026b14
c000e43e:	e8 34 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e443:	83 c4 10             	add    esp,0x10
c000e446:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e44d:	0f 85 32 02 00 00    	jne    c000e685 <Computer::displayFeatures()+0x2bd>
c000e453:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e458:	83 ec 08             	sub    esp,0x8
c000e45b:	50                   	push   eax
c000e45c:	68 25 6b 02 c0       	push   0xc0026b25
c000e461:	e8 11 3e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e466:	83 c4 10             	add    esp,0x10
c000e469:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e470:	0f 85 05 02 00 00    	jne    c000e67b <Computer::displayFeatures()+0x2b3>
c000e476:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e47b:	83 ec 08             	sub    esp,0x8
c000e47e:	50                   	push   eax
c000e47f:	68 36 6b 02 c0       	push   0xc0026b36
c000e484:	e8 ee 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e489:	83 c4 10             	add    esp,0x10
c000e48c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e493:	0f 85 d8 01 00 00    	jne    c000e671 <Computer::displayFeatures()+0x2a9>
c000e499:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e49e:	83 ec 08             	sub    esp,0x8
c000e4a1:	50                   	push   eax
c000e4a2:	68 47 6b 02 c0       	push   0xc0026b47
c000e4a7:	e8 cb 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4ac:	83 c4 10             	add    esp,0x10
c000e4af:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4b6:	0f 85 ab 01 00 00    	jne    c000e667 <Computer::displayFeatures()+0x29f>
c000e4bc:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e4c1:	83 ec 08             	sub    esp,0x8
c000e4c4:	50                   	push   eax
c000e4c5:	68 58 6b 02 c0       	push   0xc0026b58
c000e4ca:	e8 a8 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4d9:	0f 88 1b 02 00 00    	js     c000e6fa <Computer::displayFeatures()+0x332>
c000e4df:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e4e4:	83 ec 08             	sub    esp,0x8
c000e4e7:	50                   	push   eax
c000e4e8:	68 69 6b 02 c0       	push   0xc0026b69
c000e4ed:	e8 85 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e4f2:	83 c4 10             	add    esp,0x10
c000e4f5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4fc:	0f 85 a1 01 00 00    	jne    c000e6a3 <Computer::displayFeatures()+0x2db>
c000e502:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e507:	83 ec 08             	sub    esp,0x8
c000e50a:	50                   	push   eax
c000e50b:	68 7a 6b 02 c0       	push   0xc0026b7a
c000e510:	e8 62 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e515:	83 c4 10             	add    esp,0x10
c000e518:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e51f:	0f 85 cb 01 00 00    	jne    c000e6f0 <Computer::displayFeatures()+0x328>
c000e525:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e52a:	83 ec 08             	sub    esp,0x8
c000e52d:	50                   	push   eax
c000e52e:	68 8b 6b 02 c0       	push   0xc0026b8b
c000e533:	e8 3f 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e538:	83 c4 10             	add    esp,0x10
c000e53b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e542:	0f 85 9e 01 00 00    	jne    c000e6e6 <Computer::displayFeatures()+0x31e>
c000e548:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e54d:	83 ec 08             	sub    esp,0x8
c000e550:	50                   	push   eax
c000e551:	68 9c 6b 02 c0       	push   0xc0026b9c
c000e556:	e8 1c 3d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e565:	0f 85 71 01 00 00    	jne    c000e6dc <Computer::displayFeatures()+0x314>
c000e56b:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e570:	83 ec 08             	sub    esp,0x8
c000e573:	50                   	push   eax
c000e574:	68 ad 6b 02 c0       	push   0xc0026bad
c000e579:	e8 f9 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e588:	0f 85 44 01 00 00    	jne    c000e6d2 <Computer::displayFeatures()+0x30a>
c000e58e:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e593:	83 ec 08             	sub    esp,0x8
c000e596:	50                   	push   eax
c000e597:	68 be 6b 02 c0       	push   0xc0026bbe
c000e59c:	e8 d6 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e5ab:	0f 85 17 01 00 00    	jne    c000e6c8 <Computer::displayFeatures()+0x300>
c000e5b1:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e5b6:	83 ec 08             	sub    esp,0x8
c000e5b9:	50                   	push   eax
c000e5ba:	68 cf 6b 02 c0       	push   0xc0026bcf
c000e5bf:	e8 b3 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5ce:	0f 85 ea 00 00 00    	jne    c000e6be <Computer::displayFeatures()+0x2f6>
c000e5d4:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	50                   	push   eax
c000e5dd:	68 e0 6b 02 c0       	push   0xc0026be0
c000e5e2:	e8 90 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5f1:	0f 88 0d 01 00 00    	js     c000e704 <Computer::displayFeatures()+0x33c>
c000e5f7:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e5fc:	83 ec 08             	sub    esp,0x8
c000e5ff:	50                   	push   eax
c000e600:	68 f1 6b 02 c0       	push   0xc0026bf1
c000e605:	e8 6d 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e60a:	83 c4 10             	add    esp,0x10
c000e60d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e614:	0f 85 9a 00 00 00    	jne    c000e6b4 <Computer::displayFeatures()+0x2ec>
c000e61a:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e61f:	83 ec 08             	sub    esp,0x8
c000e622:	50                   	push   eax
c000e623:	68 02 6c 02 c0       	push   0xc0026c02
c000e628:	e8 4a 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e62d:	83 c4 10             	add    esp,0x10
c000e630:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e637:	75 74                	jne    c000e6ad <Computer::displayFeatures()+0x2e5>
c000e639:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c000e63e:	83 ec 08             	sub    esp,0x8
c000e641:	50                   	push   eax
c000e642:	68 13 6c 02 c0       	push   0xc0026c13
c000e647:	e8 2b 3c 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e64c:	c7 44 24 20 3a 82 02 c0 	mov    DWORD PTR [esp+0x20],0xc002823a
c000e654:	83 c4 18             	add    esp,0x18
c000e657:	5b                   	pop    ebx
c000e658:	e9 1a 3c 00 00       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>
c000e65d:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e662:	e9 88 fd ff ff       	jmp    c000e3ef <Computer::displayFeatures()+0x27>
c000e667:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e66c:	e9 50 fe ff ff       	jmp    c000e4c1 <Computer::displayFeatures()+0xf9>
c000e671:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e676:	e9 23 fe ff ff       	jmp    c000e49e <Computer::displayFeatures()+0xd6>
c000e67b:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e680:	e9 f6 fd ff ff       	jmp    c000e47b <Computer::displayFeatures()+0xb3>
c000e685:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e68a:	e9 c9 fd ff ff       	jmp    c000e458 <Computer::displayFeatures()+0x90>
c000e68f:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e694:	e9 9c fd ff ff       	jmp    c000e435 <Computer::displayFeatures()+0x6d>
c000e699:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e69e:	e9 6f fd ff ff       	jmp    c000e412 <Computer::displayFeatures()+0x4a>
c000e6a3:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6a8:	e9 5a fe ff ff       	jmp    c000e507 <Computer::displayFeatures()+0x13f>
c000e6ad:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6b2:	eb 8a                	jmp    c000e63e <Computer::displayFeatures()+0x276>
c000e6b4:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6b9:	e9 61 ff ff ff       	jmp    c000e61f <Computer::displayFeatures()+0x257>
c000e6be:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6c3:	e9 11 ff ff ff       	jmp    c000e5d9 <Computer::displayFeatures()+0x211>
c000e6c8:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6cd:	e9 e4 fe ff ff       	jmp    c000e5b6 <Computer::displayFeatures()+0x1ee>
c000e6d2:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6d7:	e9 b7 fe ff ff       	jmp    c000e593 <Computer::displayFeatures()+0x1cb>
c000e6dc:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6e1:	e9 8a fe ff ff       	jmp    c000e570 <Computer::displayFeatures()+0x1a8>
c000e6e6:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6eb:	e9 5d fe ff ff       	jmp    c000e54d <Computer::displayFeatures()+0x185>
c000e6f0:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6f5:	e9 30 fe ff ff       	jmp    c000e52a <Computer::displayFeatures()+0x162>
c000e6fa:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e6ff:	e9 e0 fd ff ff       	jmp    c000e4e4 <Computer::displayFeatures()+0x11c>
c000e704:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c000e709:	e9 ee fe ff ff       	jmp    c000e5fc <Computer::displayFeatures()+0x234>

c000e70e <Computer::rdmsr(unsigned int)>:
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e715:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e71c:	74 0a                	je     c000e728 <Computer::rdmsr(unsigned int)+0x1a>
c000e71e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e722:	0f 32                	rdmsr  
c000e724:	83 c4 0c             	add    esp,0xc
c000e727:	c3                   	ret    
c000e728:	83 ec 0c             	sub    esp,0xc
c000e72b:	68 24 6c 02 c0       	push   0xc0026c24
c000e730:	e8 a2 a3 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000e735:	83 c4 10             	add    esp,0x10
c000e738:	eb e4                	jmp    c000e71e <Computer::rdmsr(unsigned int)+0x10>

c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e73a:	57                   	push   edi
c000e73b:	56                   	push   esi
c000e73c:	52                   	push   edx
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e745:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e749:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e750:	74 0e                	je     c000e760 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e752:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e756:	89 f0                	mov    eax,esi
c000e758:	89 fa                	mov    edx,edi
c000e75a:	0f 30                	wrmsr  
c000e75c:	58                   	pop    eax
c000e75d:	5e                   	pop    esi
c000e75e:	5f                   	pop    edi
c000e75f:	c3                   	ret    
c000e760:	83 ec 0c             	sub    esp,0xc
c000e763:	68 2a 6c 02 c0       	push   0xc0026c2a
c000e768:	e8 6a a3 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	eb e0                	jmp    c000e752 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e772 <Computer::nmiEnabled()>:
c000e772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e776:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e77c:	c3                   	ret    
c000e77d:	90                   	nop

c000e77e <Computer::readCMOS(unsigned char)>:
c000e77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e782:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e789:	19 c0                	sbb    eax,eax
c000e78b:	83 e0 80             	and    eax,0xffffff80
c000e78e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e792:	e6 70                	out    0x70,al
c000e794:	e4 71                	in     al,0x71
c000e796:	c3                   	ret    
c000e797:	90                   	nop

c000e798 <Computer::enableNMI(bool)>:
c000e798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7a0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e7a6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7ae:	eb ce                	jmp    c000e77e <Computer::readCMOS(unsigned char)>

c000e7b0 <Computer::open(int, int, void*)>:
c000e7b0:	56                   	push   esi
c000e7b1:	53                   	push   ebx
c000e7b2:	83 ec 10             	sub    esp,0x10
c000e7b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7b9:	f6 05 e0 a5 02 c0 04 	test   BYTE PTR ds:0xc002a5e0,0x4
c000e7c0:	68 68 22 00 00       	push   0x2268
c000e7c5:	0f 94 05 80 95 02 c0 	sete   BYTE PTR ds:0xc0029580
c000e7cc:	e8 b7 39 00 00       	call   c0012188 <operator new(unsigned long)>
c000e7d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d4:	89 c6                	mov    esi,eax
c000e7d6:	e8 fb 86 00 00       	call   c0016ed6 <ACPI::ACPI()>
c000e7db:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7e1:	58                   	pop    eax
c000e7e2:	5a                   	pop    edx
c000e7e3:	56                   	push   esi
c000e7e4:	53                   	push   ebx
c000e7e5:	e8 98 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e7ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ed:	e8 cc f9 ff ff       	call   c000e1be <Computer::detectFeatures()>
c000e7f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7f5:	e8 ce fb ff ff       	call   c000e3c8 <Computer::displayFeatures()>
c000e7fa:	59                   	pop    ecx
c000e7fb:	5e                   	pop    esi
c000e7fc:	6a 01                	push   0x1
c000e7fe:	53                   	push   ebx
c000e7ff:	e8 94 ff ff ff       	call   c000e798 <Computer::enableNMI(bool)>
c000e804:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e80b:	e8 78 39 00 00       	call   c0012188 <operator new(unsigned long)>
c000e810:	89 04 24             	mov    DWORD PTR [esp],eax
c000e813:	89 c6                	mov    esi,eax
c000e815:	e8 4e 91 00 00       	call   c0017968 <CPU::CPU()>
c000e81a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e820:	58                   	pop    eax
c000e821:	5a                   	pop    edx
c000e822:	56                   	push   esi
c000e823:	53                   	push   ebx
c000e824:	e8 59 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e829:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e82f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e835:	6a 00                	push   0x0
c000e837:	6a 00                	push   0x0
c000e839:	50                   	push   eax
c000e83a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e83d:	83 c4 20             	add    esp,0x20
c000e840:	e8 a5 53 00 00       	call   c0013bea <setupFPU()>
c000e845:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e84b:	85 c0                	test   eax,eax
c000e84d:	74 1f                	je     c000e86e <Computer::open(int, int, void*)+0xbe>
c000e84f:	83 ec 08             	sub    esp,0x8
c000e852:	50                   	push   eax
c000e853:	53                   	push   ebx
c000e854:	e8 29 4e 00 00       	call   c0013682 <Device::addChild(Device*)>
c000e859:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e85f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e861:	6a 00                	push   0x0
c000e863:	6a 00                	push   0x0
c000e865:	6a 00                	push   0x0
c000e867:	50                   	push   eax
c000e868:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e86b:	83 c4 20             	add    esp,0x20
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	68 b0 e1 00 c0       	push   0xc000e1b0
c000e876:	e8 d9 d3 00 00       	call   c001bc54 <setupMultitasking(void (*)())>
c000e87b:	83 c4 14             	add    esp,0x14
c000e87e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e883:	5b                   	pop    ebx
c000e884:	5e                   	pop    esi
c000e885:	c3                   	ret    

c000e886 <Computer::disableNMI()>:
c000e886:	6a 00                	push   0x0
c000e888:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e88c:	e8 07 ff ff ff       	call   c000e798 <Computer::enableNMI(bool)>
c000e891:	58                   	pop    eax
c000e892:	5a                   	pop    edx
c000e893:	c3                   	ret    

c000e894 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e898:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e89f:	19 c0                	sbb    eax,eax
c000e8a1:	83 e0 80             	and    eax,0xffffff80
c000e8a4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e8a8:	e6 70                	out    0x70,al
c000e8aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8ae:	e6 71                	out    0x71,al
c000e8b0:	c3                   	ret    
c000e8b1:	90                   	nop

c000e8b2 <Computer::handleNMI()>:
c000e8b2:	56                   	push   esi
c000e8b3:	53                   	push   ebx
c000e8b4:	83 ec 10             	sub    esp,0x10
c000e8b7:	e4 92                	in     al,0x92
c000e8b9:	89 c6                	mov    esi,eax
c000e8bb:	e4 61                	in     al,0x61
c000e8bd:	68 30 6c 02 c0       	push   0xc0026c30
c000e8c2:	88 c3                	mov    bl,al
c000e8c4:	e8 ae 39 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	83 e6 10             	and    esi,0x10
c000e8cf:	75 0d                	jne    c000e8de <Computer::handleNMI()+0x2c>
c000e8d1:	f6 c3 40             	test   bl,0x40
c000e8d4:	75 1d                	jne    c000e8f3 <Computer::handleNMI()+0x41>
c000e8d6:	84 db                	test   bl,bl
c000e8d8:	78 2d                	js     c000e907 <Computer::handleNMI()+0x55>
c000e8da:	58                   	pop    eax
c000e8db:	5b                   	pop    ebx
c000e8dc:	5e                   	pop    esi
c000e8dd:	c3                   	ret    
c000e8de:	83 ec 0c             	sub    esp,0xc
c000e8e1:	68 41 6c 02 c0       	push   0xc0026c41
c000e8e6:	e8 ec a1 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000e8eb:	83 c4 10             	add    esp,0x10
c000e8ee:	f6 c3 40             	test   bl,0x40
c000e8f1:	74 e3                	je     c000e8d6 <Computer::handleNMI()+0x24>
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	68 4e 6c 02 c0       	push   0xc0026c4e
c000e8fb:	e8 d7 a1 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	84 db                	test   bl,bl
c000e905:	79 d3                	jns    c000e8da <Computer::handleNMI()+0x28>
c000e907:	c7 44 24 10 58 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c58
c000e90f:	5a                   	pop    edx
c000e910:	5b                   	pop    ebx
c000e911:	5e                   	pop    esi
c000e912:	e9 c0 a1 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>
c000e917:	90                   	nop

c000e918 <Computer::setDiskActivityLight(int, bool)>:
c000e918:	56                   	push   esi
c000e919:	53                   	push   ebx
c000e91a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e91e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e923:	77 1b                	ja     c000e940 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e925:	e4 92                	in     al,0x92
c000e927:	bb 40 00 00 00       	mov    ebx,0x40
c000e92c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e930:	89 da                	mov    edx,ebx
c000e932:	d3 e2                	shl    edx,cl
c000e934:	89 f1                	mov    ecx,esi
c000e936:	f7 d2                	not    edx
c000e938:	d3 e3                	shl    ebx,cl
c000e93a:	21 d0                	and    eax,edx
c000e93c:	09 d8                	or     eax,ebx
c000e93e:	e6 92                	out    0x92,al
c000e940:	5b                   	pop    ebx
c000e941:	5e                   	pop    esi
c000e942:	c3                   	ret    
c000e943:	90                   	nop

c000e944 <GDTEntry::setBase(unsigned int)>:
c000e944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e948:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e94c:	89 c1                	mov    ecx,eax
c000e94e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e952:	c1 e9 10             	shr    ecx,0x10
c000e955:	c1 e8 18             	shr    eax,0x18
c000e958:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e95b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e95e:	c3                   	ret    
c000e95f:	90                   	nop

c000e960 <GDTEntry::setLimit(unsigned int)>:
c000e960:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e968:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e96b:	66 89 01             	mov    WORD PTR [ecx],ax
c000e96e:	83 e2 f0             	and    edx,0xfffffff0
c000e971:	c1 e8 10             	shr    eax,0x10
c000e974:	83 e0 0f             	and    eax,0xf
c000e977:	09 d0                	or     eax,edx
c000e979:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e97c:	c3                   	ret    
c000e97d:	90                   	nop

c000e97e <GDT::GDT()>:
c000e97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e982:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e992:	90                   	nop
c000e993:	c3                   	ret    

c000e994 <GDT::addEntry(GDTEntry)>:
c000e994:	53                   	push   ebx
c000e995:	83 ec 0c             	sub    esp,0xc
c000e998:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e99c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e99e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9a5:	52                   	push   edx
c000e9a6:	50                   	push   eax
c000e9a7:	68 94 6c 02 c0       	push   0xc0026c94
c000e9ac:	e8 c6 38 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000e9b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9b7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9bb:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9bf:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e9c6:	c1 e0 03             	shl    eax,0x3
c000e9c9:	89 13                	mov    DWORD PTR [ebx],edx
c000e9cb:	83 c4 18             	add    esp,0x18
c000e9ce:	5b                   	pop    ebx
c000e9cf:	c3                   	ret    

c000e9d0 <GDT::getNumberOfEntries()>:
c000e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9d6:	c3                   	ret    
c000e9d7:	90                   	nop

c000e9d8 <GDT::flush()>:
c000e9d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9de:	83 c0 04             	add    eax,0x4
c000e9e1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9e8:	a3 d2 a5 02 c0       	mov    ds:0xc002a5d2,eax
c000e9ed:	66 89 15 d0 a5 02 c0 	mov    WORD PTR ds:0xc002a5d0,dx
c000e9f4:	e9 1e 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9f9:	90                   	nop

c000e9fa <GDT::setup()>:
c000e9fa:	55                   	push   ebp
c000e9fb:	57                   	push   edi
c000e9fc:	56                   	push   esi
c000e9fd:	53                   	push   ebx
c000e9fe:	83 ec 3c             	sub    esp,0x3c
c000ea01:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ea05:	6a 00                	push   0x0
c000ea07:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 33 ff ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea11:	6a 00                	push   0x0
c000ea13:	53                   	push   ebx
c000ea14:	e8 47 ff ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea19:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea21:	6a 00                	push   0x0
c000ea23:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea27:	53                   	push   ebx
c000ea28:	e8 17 ff ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea2d:	68 ff ff ff 00       	push   0xffffff
c000ea32:	53                   	push   ebx
c000ea33:	e8 28 ff ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea3c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea41:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea4a:	83 c4 20             	add    esp,0x20
c000ea4d:	6a 00                	push   0x0
c000ea4f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea53:	53                   	push   ebx
c000ea54:	e8 eb fe ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c000ea59:	68 ff ff ff 00       	push   0xffffff
c000ea5e:	53                   	push   ebx
c000ea5f:	e8 fc fe ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c000ea64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea6c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea74:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea78:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea7d:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea82:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea86:	89 d8                	mov    eax,ebx
c000ea88:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea8c:	80 cc 60             	or     ah,0x60
c000ea8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea93:	83 c4 0c             	add    esp,0xc
c000ea96:	89 f8                	mov    eax,edi
c000ea98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea9c:	80 cc 60             	or     ah,0x60
c000ea9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eaa3:	89 c7                	mov    edi,eax
c000eaa5:	55                   	push   ebp
c000eaa6:	e8 e9 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eaab:	83 c4 0c             	add    esp,0xc
c000eaae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab6:	55                   	push   ebp
c000eab7:	e8 d8 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eabc:	83 c4 0c             	add    esp,0xc
c000eabf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac7:	55                   	push   ebp
c000eac8:	e8 c7 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eacd:	83 c4 0c             	add    esp,0xc
c000ead0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ead4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ead8:	53                   	push   ebx
c000ead9:	51                   	push   ecx
c000eada:	55                   	push   ebp
c000eadb:	e8 b4 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eae0:	83 c4 0c             	add    esp,0xc
c000eae3:	57                   	push   edi
c000eae4:	56                   	push   esi
c000eae5:	55                   	push   ebp
c000eae6:	e8 a9 fe ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c000eaeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eaee:	e8 e5 fe ff ff       	call   c000e9d8 <GDT::flush()>
c000eaf3:	83 c4 4c             	add    esp,0x4c
c000eaf6:	5b                   	pop    ebx
c000eaf7:	5e                   	pop    esi
c000eaf8:	5f                   	pop    edi
c000eaf9:	5d                   	pop    ebp
c000eafa:	c3                   	ret    

c000eafb <idleFunction(void*)>:
c000eafb:	53                   	push   ebx
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	e8 28 cf 00 00       	call   c001ba2c <unlockScheduler()>
c000eb04:	e8 4b 8e 00 00       	call   c0017954 <CPU::current()>
c000eb09:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb10:	74 41                	je     c000eb53 <idleFunction(void*)+0x58>
c000eb12:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c000eb17:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb1e:	74 33                	je     c000eb53 <idleFunction(void*)+0x58>
c000eb20:	31 db                	xor    ebx,ebx
c000eb22:	52                   	push   edx
c000eb23:	52                   	push   edx
c000eb24:	68 e1 00 00 00       	push   0xe1
c000eb29:	50                   	push   eax
c000eb2a:	e8 df fb ff ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c000eb2f:	53                   	push   ebx
c000eb30:	83 e0 02             	and    eax,0x2
c000eb33:	50                   	push   eax
c000eb34:	68 e1 00 00 00       	push   0xe1
c000eb39:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c000eb3f:	e8 f6 fb ff ff       	call   c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb44:	83 c4 20             	add    esp,0x20
c000eb47:	e8 e8 16 ff ff       	call   c0000234 <doTPAUSE>
c000eb4c:	e8 8f 66 01 00       	call   c00251e0 <idleCommon()>
c000eb51:	eb f4                	jmp    c000eb47 <idleFunction(void*)+0x4c>
c000eb53:	fb                   	sti    
c000eb54:	f4                   	hlt    
c000eb55:	e8 86 66 01 00       	call   c00251e0 <idleCommon()>
c000eb5a:	eb f7                	jmp    c000eb53 <idleFunction(void*)+0x58>

c000eb5c <IDTEntry::IDTEntry(bool)>:
c000eb5c:	83 ec 04             	sub    esp,0x4
c000eb5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb63:	88 04 24             	mov    BYTE PTR [esp],al
c000eb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb74:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb7f:	83 e2 f0             	and    edx,0xfffffff0
c000eb82:	83 ca 0e             	or     edx,0xe
c000eb85:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb8f:	83 e2 ef             	and    edx,0xffffffef
c000eb92:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb95:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb99:	74 04                	je     c000eb9f <IDTEntry::IDTEntry(bool)+0x43>
c000eb9b:	b2 03                	mov    dl,0x3
c000eb9d:	eb 02                	jmp    c000eba1 <IDTEntry::IDTEntry(bool)+0x45>
c000eb9f:	b2 00                	mov    dl,0x0
c000eba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba5:	83 e2 03             	and    edx,0x3
c000eba8:	88 d1                	mov    cl,dl
c000ebaa:	c1 e1 05             	shl    ecx,0x5
c000ebad:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb0:	83 e2 9f             	and    edx,0xffffff9f
c000ebb3:	09 ca                	or     edx,ecx
c000ebb5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebbc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebbf:	83 ca 80             	or     edx,0xffffff80
c000ebc2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebc5:	90                   	nop
c000ebc6:	83 c4 04             	add    esp,0x4
c000ebc9:	c3                   	ret    

c000ebca <IDTEntry::setOffset(unsigned int)>:
c000ebca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebd2:	66 89 02             	mov    WORD PTR [edx],ax
c000ebd5:	c1 e8 10             	shr    eax,0x10
c000ebd8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebdc:	c3                   	ret    
c000ebdd:	90                   	nop

c000ebde <IDT::IDT()>:
c000ebde:	90                   	nop
c000ebdf:	c3                   	ret    

c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebe4:	83 c0 30             	add    eax,0x30
c000ebe7:	c3                   	ret    

c000ebe8 <IDT::addEntry(IDTEntry, int)>:
c000ebe8:	53                   	push   ebx
c000ebe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebf1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebf9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebfc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ec00:	5b                   	pop    ebx
c000ec01:	c3                   	ret    

c000ec02 <IDT::addEntry(int, void (*)(), bool)>:
c000ec02:	53                   	push   ebx
c000ec03:	83 ec 10             	sub    esp,0x10
c000ec06:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ec0b:	50                   	push   eax
c000ec0c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec10:	53                   	push   ebx
c000ec11:	e8 46 ff ff ff       	call   c000eb5c <IDTEntry::IDTEntry(bool)>
c000ec16:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec1a:	53                   	push   ebx
c000ec1b:	e8 aa ff ff ff       	call   c000ebca <IDTEntry::setOffset(unsigned int)>
c000ec20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec30:	e8 b3 ff ff ff       	call   c000ebe8 <IDT::addEntry(IDTEntry, int)>
c000ec35:	83 c4 30             	add    esp,0x30
c000ec38:	5b                   	pop    ebx
c000ec39:	c3                   	ret    

c000ec3a <IDT::flush()>:
c000ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec3e:	66 c7 05 d8 a5 02 c0 ff 07 	mov    WORD PTR ds:0xc002a5d8,0x7ff
c000ec47:	a3 da a5 02 c0       	mov    ds:0xc002a5da,eax
c000ec4c:	0f 01 1d d8 a5 02 c0 	lidtd  ds:0xc002a5d8
c000ec53:	c3                   	ret    

c000ec54 <IDT::setup()>:
c000ec54:	57                   	push   edi
c000ec55:	56                   	push   esi
c000ec56:	53                   	push   ebx
c000ec57:	83 ec 10             	sub    esp,0x10
c000ec5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec5e:	6a 00                	push   0x0
c000ec60:	68 37 04 00 c0       	push   0xc0000437
c000ec65:	6a 00                	push   0x0
c000ec67:	53                   	push   ebx
c000ec68:	e8 95 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec6d:	6a 00                	push   0x0
c000ec6f:	68 47 04 00 c0       	push   0xc0000447
c000ec74:	6a 01                	push   0x1
c000ec76:	53                   	push   ebx
c000ec77:	e8 86 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec7c:	83 c4 20             	add    esp,0x20
c000ec7f:	6a 00                	push   0x0
c000ec81:	68 51 04 00 c0       	push   0xc0000451
c000ec86:	6a 02                	push   0x2
c000ec88:	53                   	push   ebx
c000ec89:	e8 74 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec8e:	6a 00                	push   0x0
c000ec90:	68 5b 04 00 c0       	push   0xc000045b
c000ec95:	6a 03                	push   0x3
c000ec97:	53                   	push   ebx
c000ec98:	e8 65 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ec9d:	83 c4 20             	add    esp,0x20
c000eca0:	6a 00                	push   0x0
c000eca2:	68 65 04 00 c0       	push   0xc0000465
c000eca7:	6a 04                	push   0x4
c000eca9:	53                   	push   ebx
c000ecaa:	e8 53 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecaf:	6a 00                	push   0x0
c000ecb1:	68 6f 04 00 c0       	push   0xc000046f
c000ecb6:	6a 05                	push   0x5
c000ecb8:	53                   	push   ebx
c000ecb9:	e8 44 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecbe:	83 c4 20             	add    esp,0x20
c000ecc1:	6a 00                	push   0x0
c000ecc3:	68 79 04 00 c0       	push   0xc0000479
c000ecc8:	6a 06                	push   0x6
c000ecca:	53                   	push   ebx
c000eccb:	e8 32 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecd0:	6a 00                	push   0x0
c000ecd2:	68 83 04 00 c0       	push   0xc0000483
c000ecd7:	6a 07                	push   0x7
c000ecd9:	53                   	push   ebx
c000ecda:	e8 23 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecdf:	83 c4 20             	add    esp,0x20
c000ece2:	6a 00                	push   0x0
c000ece4:	68 8d 04 00 c0       	push   0xc000048d
c000ece9:	6a 08                	push   0x8
c000eceb:	53                   	push   ebx
c000ecec:	e8 11 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ecf1:	6a 00                	push   0x0
c000ecf3:	68 95 04 00 c0       	push   0xc0000495
c000ecf8:	6a 09                	push   0x9
c000ecfa:	53                   	push   ebx
c000ecfb:	e8 02 ff ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed00:	83 c4 20             	add    esp,0x20
c000ed03:	6a 00                	push   0x0
c000ed05:	68 9f 04 00 c0       	push   0xc000049f
c000ed0a:	6a 0a                	push   0xa
c000ed0c:	53                   	push   ebx
c000ed0d:	e8 f0 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed12:	6a 00                	push   0x0
c000ed14:	68 a7 04 00 c0       	push   0xc00004a7
c000ed19:	6a 0b                	push   0xb
c000ed1b:	53                   	push   ebx
c000ed1c:	e8 e1 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed21:	83 c4 20             	add    esp,0x20
c000ed24:	6a 00                	push   0x0
c000ed26:	68 af 04 00 c0       	push   0xc00004af
c000ed2b:	6a 0c                	push   0xc
c000ed2d:	53                   	push   ebx
c000ed2e:	e8 cf fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed33:	6a 00                	push   0x0
c000ed35:	68 b7 04 00 c0       	push   0xc00004b7
c000ed3a:	6a 0d                	push   0xd
c000ed3c:	53                   	push   ebx
c000ed3d:	e8 c0 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed42:	83 c4 20             	add    esp,0x20
c000ed45:	6a 00                	push   0x0
c000ed47:	68 bf 04 00 c0       	push   0xc00004bf
c000ed4c:	6a 0e                	push   0xe
c000ed4e:	53                   	push   ebx
c000ed4f:	e8 ae fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed54:	6a 00                	push   0x0
c000ed56:	68 c7 04 00 c0       	push   0xc00004c7
c000ed5b:	6a 0f                	push   0xf
c000ed5d:	53                   	push   ebx
c000ed5e:	e8 9f fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed63:	83 c4 20             	add    esp,0x20
c000ed66:	6a 00                	push   0x0
c000ed68:	68 d1 04 00 c0       	push   0xc00004d1
c000ed6d:	6a 10                	push   0x10
c000ed6f:	53                   	push   ebx
c000ed70:	e8 8d fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed75:	6a 00                	push   0x0
c000ed77:	68 db 04 00 c0       	push   0xc00004db
c000ed7c:	6a 11                	push   0x11
c000ed7e:	53                   	push   ebx
c000ed7f:	e8 7e fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed84:	83 c4 20             	add    esp,0x20
c000ed87:	6a 00                	push   0x0
c000ed89:	68 e5 04 00 c0       	push   0xc00004e5
c000ed8e:	6a 12                	push   0x12
c000ed90:	53                   	push   ebx
c000ed91:	e8 6c fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ed96:	6a 01                	push   0x1
c000ed98:	68 ef 04 00 c0       	push   0xc00004ef
c000ed9d:	6a 60                	push   0x60
c000ed9f:	53                   	push   ebx
c000eda0:	e8 5d fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eda5:	83 c4 20             	add    esp,0x20
c000eda8:	6a 00                	push   0x0
c000edaa:	68 f9 04 00 c0       	push   0xc00004f9
c000edaf:	6a 20                	push   0x20
c000edb1:	53                   	push   ebx
c000edb2:	e8 4b fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edb7:	6a 00                	push   0x0
c000edb9:	68 03 05 00 c0       	push   0xc0000503
c000edbe:	6a 21                	push   0x21
c000edc0:	53                   	push   ebx
c000edc1:	e8 3c fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edc6:	83 c4 20             	add    esp,0x20
c000edc9:	6a 00                	push   0x0
c000edcb:	68 0d 05 00 c0       	push   0xc000050d
c000edd0:	6a 22                	push   0x22
c000edd2:	53                   	push   ebx
c000edd3:	e8 2a fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edd8:	6a 00                	push   0x0
c000edda:	68 17 05 00 c0       	push   0xc0000517
c000eddf:	6a 23                	push   0x23
c000ede1:	53                   	push   ebx
c000ede2:	e8 1b fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ede7:	83 c4 20             	add    esp,0x20
c000edea:	6a 00                	push   0x0
c000edec:	68 21 05 00 c0       	push   0xc0000521
c000edf1:	6a 24                	push   0x24
c000edf3:	53                   	push   ebx
c000edf4:	e8 09 fe ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000edf9:	6a 00                	push   0x0
c000edfb:	68 2b 05 00 c0       	push   0xc000052b
c000ee00:	6a 25                	push   0x25
c000ee02:	53                   	push   ebx
c000ee03:	e8 fa fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee08:	83 c4 20             	add    esp,0x20
c000ee0b:	6a 00                	push   0x0
c000ee0d:	68 35 05 00 c0       	push   0xc0000535
c000ee12:	6a 26                	push   0x26
c000ee14:	53                   	push   ebx
c000ee15:	e8 e8 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee1a:	6a 00                	push   0x0
c000ee1c:	68 3f 05 00 c0       	push   0xc000053f
c000ee21:	6a 27                	push   0x27
c000ee23:	53                   	push   ebx
c000ee24:	e8 d9 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee29:	83 c4 20             	add    esp,0x20
c000ee2c:	6a 00                	push   0x0
c000ee2e:	68 49 05 00 c0       	push   0xc0000549
c000ee33:	6a 28                	push   0x28
c000ee35:	53                   	push   ebx
c000ee36:	e8 c7 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee3b:	6a 00                	push   0x0
c000ee3d:	68 53 05 00 c0       	push   0xc0000553
c000ee42:	6a 29                	push   0x29
c000ee44:	53                   	push   ebx
c000ee45:	e8 b8 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee4a:	83 c4 20             	add    esp,0x20
c000ee4d:	6a 00                	push   0x0
c000ee4f:	68 5d 05 00 c0       	push   0xc000055d
c000ee54:	6a 2a                	push   0x2a
c000ee56:	53                   	push   ebx
c000ee57:	e8 a6 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee5c:	6a 00                	push   0x0
c000ee5e:	68 67 05 00 c0       	push   0xc0000567
c000ee63:	6a 2b                	push   0x2b
c000ee65:	53                   	push   ebx
c000ee66:	e8 97 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee6b:	83 c4 20             	add    esp,0x20
c000ee6e:	6a 00                	push   0x0
c000ee70:	68 71 05 00 c0       	push   0xc0000571
c000ee75:	6a 2c                	push   0x2c
c000ee77:	53                   	push   ebx
c000ee78:	e8 85 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee7d:	6a 00                	push   0x0
c000ee7f:	68 7b 05 00 c0       	push   0xc000057b
c000ee84:	6a 2d                	push   0x2d
c000ee86:	53                   	push   ebx
c000ee87:	e8 76 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee8c:	83 c4 20             	add    esp,0x20
c000ee8f:	6a 00                	push   0x0
c000ee91:	68 85 05 00 c0       	push   0xc0000585
c000ee96:	6a 2e                	push   0x2e
c000ee98:	53                   	push   ebx
c000ee99:	e8 64 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ee9e:	6a 00                	push   0x0
c000eea0:	68 8f 05 00 c0       	push   0xc000058f
c000eea5:	6a 2f                	push   0x2f
c000eea7:	53                   	push   ebx
c000eea8:	e8 55 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eead:	83 c4 20             	add    esp,0x20
c000eeb0:	6a 00                	push   0x0
c000eeb2:	68 99 05 00 c0       	push   0xc0000599
c000eeb7:	6a 30                	push   0x30
c000eeb9:	53                   	push   ebx
c000eeba:	e8 43 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eebf:	6a 00                	push   0x0
c000eec1:	68 a3 05 00 c0       	push   0xc00005a3
c000eec6:	6a 31                	push   0x31
c000eec8:	53                   	push   ebx
c000eec9:	e8 34 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eece:	83 c4 20             	add    esp,0x20
c000eed1:	6a 00                	push   0x0
c000eed3:	68 ad 05 00 c0       	push   0xc00005ad
c000eed8:	6a 32                	push   0x32
c000eeda:	53                   	push   ebx
c000eedb:	e8 22 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eee0:	6a 00                	push   0x0
c000eee2:	68 b7 05 00 c0       	push   0xc00005b7
c000eee7:	6a 33                	push   0x33
c000eee9:	53                   	push   ebx
c000eeea:	e8 13 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000eeef:	83 c4 20             	add    esp,0x20
c000eef2:	6a 00                	push   0x0
c000eef4:	68 c1 05 00 c0       	push   0xc00005c1
c000eef9:	6a 34                	push   0x34
c000eefb:	53                   	push   ebx
c000eefc:	e8 01 fd ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef01:	6a 00                	push   0x0
c000ef03:	68 cb 05 00 c0       	push   0xc00005cb
c000ef08:	6a 35                	push   0x35
c000ef0a:	53                   	push   ebx
c000ef0b:	e8 f2 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef10:	83 c4 20             	add    esp,0x20
c000ef13:	6a 00                	push   0x0
c000ef15:	68 d5 05 00 c0       	push   0xc00005d5
c000ef1a:	6a 36                	push   0x36
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 e0 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef22:	6a 00                	push   0x0
c000ef24:	68 df 05 00 c0       	push   0xc00005df
c000ef29:	6a 37                	push   0x37
c000ef2b:	53                   	push   ebx
c000ef2c:	e8 d1 fc ff ff       	call   c000ec02 <IDT::addEntry(int, void (*)(), bool)>
c000ef31:	83 c4 20             	add    esp,0x20
c000ef34:	e8 fc 24 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000ef39:	52                   	push   edx
c000ef3a:	6a 03                	push   0x3
c000ef3c:	6a 02                	push   0x2
c000ef3e:	50                   	push   eax
c000ef3f:	e8 34 2b 00 00       	call   c0011a78 <VAS::allocatePages(int, int)>
c000ef44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef4b:	89 c6                	mov    esi,eax
c000ef4d:	e8 36 32 00 00       	call   c0012188 <operator new(unsigned long)>
c000ef52:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef5b:	89 c7                	mov    edi,eax
c000ef5d:	e8 c0 1c 00 00       	call   c0010c22 <TSS::TSS()>
c000ef62:	83 c4 0c             	add    esp,0xc
c000ef65:	68 8d 04 00 c0       	push   0xc000048d
c000ef6a:	56                   	push   esi
c000ef6b:	57                   	push   edi
c000ef6c:	e8 f1 1c 00 00       	call   c0010c62 <TSS::setup(unsigned long, unsigned long)>
c000ef71:	59                   	pop    ecx
c000ef72:	89 c6                	mov    esi,eax
c000ef74:	5f                   	pop    edi
c000ef75:	6a 00                	push   0x0
c000ef77:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef7b:	50                   	push   eax
c000ef7c:	e8 db fb ff ff       	call   c000eb5c <IDTEntry::IDTEntry(bool)>
c000ef81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef85:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef8a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef91:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef9b:	80 ce 05             	or     dh,0x5
c000ef9e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000efa1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000efa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efa9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000efac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efaf:	e8 86 fc ff ff       	call   c000ec3a <IDT::flush()>
c000efb4:	83 c4 20             	add    esp,0x20
c000efb7:	5b                   	pop    ebx
c000efb8:	5e                   	pop    esi
c000efb9:	5f                   	pop    edi
c000efba:	c3                   	ret    

c000efbb <sbrk>:
c000efbb:	55                   	push   ebp
c000efbc:	57                   	push   edi
c000efbd:	56                   	push   esi
c000efbe:	53                   	push   ebx
c000efbf:	83 ec 1c             	sub    esp,0x1c
c000efc2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efc6:	85 db                	test   ebx,ebx
c000efc8:	74 37                	je     c000f001 <sbrk+0x46>
c000efca:	78 3f                	js     c000f00b <sbrk+0x50>
c000efcc:	e8 83 89 00 00       	call   c0017954 <CPU::current()>
c000efd1:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efd7:	83 e0 01             	and    eax,0x1
c000efda:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efde:	a1 5c 95 02 c0       	mov    eax,ds:0xc002955c
c000efe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efe7:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efed:	89 d8                	mov    eax,ebx
c000efef:	78 35                	js     c000f026 <sbrk+0x6b>
c000eff1:	c1 f8 0c             	sar    eax,0xc
c000eff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eff8:	89 c7                	mov    edi,eax
c000effa:	be 00 00 00 00       	mov    esi,0x0
c000efff:	eb 3c                	jmp    c000f03d <sbrk+0x82>
c000f001:	a1 5c 95 02 c0       	mov    eax,ds:0xc002955c
c000f006:	e9 ad 00 00 00       	jmp    c000f0b8 <sbrk+0xfd>
c000f00b:	83 ec 08             	sub    esp,0x8
c000f00e:	53                   	push   ebx
c000f00f:	68 b0 6c 02 c0       	push   0xc0026cb0
c000f014:	e8 5e 32 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f019:	83 c4 10             	add    esp,0x10
c000f01c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f021:	e9 92 00 00 00       	jmp    c000f0b8 <sbrk+0xfd>
c000f026:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f02c:	eb c3                	jmp    c000eff1 <sbrk+0x36>
c000f02e:	81 05 5c 95 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002955c,0x1000
c000f038:	46                   	inc    esi
c000f039:	39 f7                	cmp    edi,esi
c000f03b:	74 34                	je     c000f071 <sbrk+0xb6>
c000f03d:	e8 f3 23 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f042:	89 c3                	mov    ebx,eax
c000f044:	8b 2d 5c 95 02 c0    	mov    ebp,DWORD PTR ds:0xc002955c
c000f04a:	e8 c9 06 00 00       	call   c000f718 <Phys::allocatePage()>
c000f04f:	68 01 04 00 00       	push   0x401
c000f054:	55                   	push   ebp
c000f055:	50                   	push   eax
c000f056:	53                   	push   ebx
c000f057:	e8 1c 29 00 00       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f064:	74 c8                	je     c000f02e <sbrk+0x73>
c000f066:	8b 1d 5c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002955c
c000f06c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f06f:	eb bd                	jmp    c000f02e <sbrk+0x73>
c000f071:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f076:	74 48                	je     c000f0c0 <sbrk+0x105>
c000f078:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f07c:	89 d3                	mov    ebx,edx
c000f07e:	c1 eb 0a             	shr    ebx,0xa
c000f081:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f087:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f091:	c1 e0 0c             	shl    eax,0xc
c000f094:	01 d0                	add    eax,edx
c000f096:	c1 e8 0a             	shr    eax,0xa
c000f099:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f09e:	2d 00 00 40 00       	sub    eax,0x400000
c000f0a3:	39 c3                	cmp    ebx,eax
c000f0a5:	77 0d                	ja     c000f0b4 <sbrk+0xf9>
c000f0a7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f0aa:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0b0:	39 d8                	cmp    eax,ebx
c000f0b2:	73 f3                	jae    c000f0a7 <sbrk+0xec>
c000f0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b8:	83 c4 1c             	add    esp,0x1c
c000f0bb:	5b                   	pop    ebx
c000f0bc:	5e                   	pop    esi
c000f0bd:	5f                   	pop    edi
c000f0be:	5d                   	pop    ebp
c000f0bf:	c3                   	ret    
c000f0c0:	e8 30 61 01 00       	call   c00251f5 <CPU::readCR3()>
c000f0c5:	83 ec 0c             	sub    esp,0xc
c000f0c8:	50                   	push   eax
c000f0c9:	e8 39 61 01 00       	call   c0025207 <CPU::writeCR3(unsigned long)>
c000f0ce:	83 c4 10             	add    esp,0x10
c000f0d1:	eb e1                	jmp    c000f0b4 <sbrk+0xf9>

c000f0d3 <mmap>:
c000f0d3:	83 ec 18             	sub    esp,0x18
c000f0d6:	68 e0 6c 02 c0       	push   0xc0026ce0
c000f0db:	e8 f7 99 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000f0e0:	b8 00 00 00 00       	mov    eax,0x0
c000f0e5:	83 c4 1c             	add    esp,0x1c
c000f0e8:	c3                   	ret    

c000f0e9 <munmap>:
c000f0e9:	83 ec 18             	sub    esp,0x18
c000f0ec:	68 e5 6c 02 c0       	push   0xc0026ce5
c000f0f1:	e8 e1 99 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000f0f6:	b8 00 00 00 00       	mov    eax,0x0
c000f0fb:	83 c4 1c             	add    esp,0x1c
c000f0fe:	c3                   	ret    

c000f0ff <liballoc_lock()>:
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	e8 23 c9 00 00       	call   c001ba2a <lockScheduler()>
c000f107:	b8 00 00 00 00       	mov    eax,0x0
c000f10c:	83 c4 0c             	add    esp,0xc
c000f10f:	c3                   	ret    

c000f110 <liballoc_unlock()>:
c000f110:	83 ec 0c             	sub    esp,0xc
c000f113:	e8 14 c9 00 00       	call   c001ba2c <unlockScheduler()>
c000f118:	b8 00 00 00 00       	mov    eax,0x0
c000f11d:	83 c4 0c             	add    esp,0xc
c000f120:	c3                   	ret    

c000f121 <liballoc_alloc(int)>:
c000f121:	83 ec 0c             	sub    esp,0xc
c000f124:	e8 0c 23 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f129:	83 ec 04             	sub    esp,0x4
c000f12c:	6a 01                	push   0x1
c000f12e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f132:	50                   	push   eax
c000f133:	e8 40 29 00 00       	call   c0011a78 <VAS::allocatePages(int, int)>
c000f138:	83 c4 1c             	add    esp,0x1c
c000f13b:	c3                   	ret    

c000f13c <liballoc_free(void*, int)>:
c000f13c:	83 ec 0c             	sub    esp,0xc
c000f13f:	e8 f1 22 00 00       	call   c0011435 <Virt::getAKernelVAS()>
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f14b:	50                   	push   eax
c000f14c:	e8 d1 25 00 00       	call   c0011722 <VAS::freeAllocatedPages(unsigned long)>
c000f151:	b8 00 00 00 00       	mov    eax,0x0
c000f156:	83 c4 1c             	add    esp,0x1c
c000f159:	c3                   	ret    

c000f15a <realloc>:
c000f15a:	83 ec 14             	sub    esp,0x14
c000f15d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f165:	e8 d4 22 ff ff       	call   c000143e <dlrealloc>
c000f16a:	83 c4 1c             	add    esp,0x1c
c000f16d:	c3                   	ret    

c000f16e <malloc>:
c000f16e:	83 ec 18             	sub    esp,0x18
c000f171:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f175:	e8 87 1d ff ff       	call   c0000f01 <dlmalloc>
c000f17a:	83 c4 1c             	add    esp,0x1c
c000f17d:	c3                   	ret    

c000f17e <free>:
c000f17e:	83 ec 18             	sub    esp,0x18
c000f181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f185:	e8 1c 1a ff ff       	call   c0000ba6 <dlfree>
c000f18a:	83 c4 1c             	add    esp,0x1c
c000f18d:	c3                   	ret    

c000f18e <rfree>:
c000f18e:	83 ec 18             	sub    esp,0x18
c000f191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f195:	e8 e4 ff ff ff       	call   c000f17e <free>
c000f19a:	83 c4 1c             	add    esp,0x1c
c000f19d:	c3                   	ret    

c000f19e <calloc>:
c000f19e:	56                   	push   esi
c000f19f:	53                   	push   ebx
c000f1a0:	83 ec 10             	sub    esp,0x10
c000f1a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f1a7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f1ac:	53                   	push   ebx
c000f1ad:	e8 bc ff ff ff       	call   c000f16e <malloc>
c000f1b2:	89 c6                	mov    esi,eax
c000f1b4:	83 c4 0c             	add    esp,0xc
c000f1b7:	53                   	push   ebx
c000f1b8:	6a 00                	push   0x0
c000f1ba:	50                   	push   eax
c000f1bb:	e8 05 15 ff ff       	call   c00006c5 <memset>
c000f1c0:	89 f0                	mov    eax,esi
c000f1c2:	83 c4 14             	add    esp,0x14
c000f1c5:	5b                   	pop    ebx
c000f1c6:	5e                   	pop    esi
c000f1c7:	c3                   	ret    

c000f1c8 <hwTextMode_loadInData(VgaText*)>:
c000f1c8:	57                   	push   edi
c000f1c9:	56                   	push   esi
c000f1ca:	53                   	push   ebx
c000f1cb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1cf:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1d5:	85 c0                	test   eax,eax
c000f1d7:	7e 30                	jle    c000f209 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1d9:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1dc:	31 f6                	xor    esi,esi
c000f1de:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1e1:	31 c0                	xor    eax,eax
c000f1e3:	c1 e1 05             	shl    ecx,0x5
c000f1e6:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1ec:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1f0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1f4:	40                   	inc    eax
c000f1f5:	83 f8 50             	cmp    eax,0x50
c000f1f8:	75 f2                	jne    c000f1ec <hwTextMode_loadInData(VgaText*)+0x24>
c000f1fa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f200:	46                   	inc    esi
c000f201:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f207:	7f d5                	jg     c000f1de <hwTextMode_loadInData(VgaText*)+0x16>
c000f209:	5b                   	pop    ebx
c000f20a:	5e                   	pop    esi
c000f20b:	5f                   	pop    edi
c000f20c:	c3                   	ret    

c000f20d <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f20d:	56                   	push   esi
c000f20e:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f213:	53                   	push   ebx
c000f214:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f21c:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f222:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f228:	c1 e0 04             	shl    eax,0x4
c000f22b:	83 e6 0f             	and    esi,0xf
c000f22e:	0f b6 c0             	movzx  eax,al
c000f231:	41                   	inc    ecx
c000f232:	09 f0                	or     eax,esi
c000f234:	83 c2 02             	add    edx,0x2
c000f237:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f23b:	c1 e0 08             	shl    eax,0x8
c000f23e:	09 f0                	or     eax,esi
c000f240:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f244:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f24a:	75 d0                	jne    c000f21c <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f24c:	5b                   	pop    ebx
c000f24d:	5e                   	pop    esi
c000f24e:	c3                   	ret    

c000f24f <hwTextMode_showCursor(VgaText*, bool)>:
c000f24f:	56                   	push   esi
c000f250:	53                   	push   ebx
c000f251:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f256:	74 38                	je     c000f290 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f258:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f25d:	b0 0a                	mov    al,0xa
c000f25f:	89 da                	mov    edx,ebx
c000f261:	ee                   	out    dx,al
c000f262:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f267:	89 ca                	mov    edx,ecx
c000f269:	ec                   	in     al,dx
c000f26a:	b2 0f                	mov    dl,0xf
c000f26c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f270:	83 e0 c0             	and    eax,0xffffffc0
c000f273:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f279:	09 d0                	or     eax,edx
c000f27b:	89 ca                	mov    edx,ecx
c000f27d:	ee                   	out    dx,al
c000f27e:	b0 0b                	mov    al,0xb
c000f280:	89 da                	mov    edx,ebx
c000f282:	ee                   	out    dx,al
c000f283:	89 ca                	mov    edx,ecx
c000f285:	ec                   	in     al,dx
c000f286:	83 e0 e0             	and    eax,0xffffffe0
c000f289:	83 c8 0f             	or     eax,0xf
c000f28c:	ee                   	out    dx,al
c000f28d:	5b                   	pop    ebx
c000f28e:	5e                   	pop    esi
c000f28f:	c3                   	ret    
c000f290:	b0 0a                	mov    al,0xa
c000f292:	ba d4 03 00 00       	mov    edx,0x3d4
c000f297:	ee                   	out    dx,al
c000f298:	b0 20                	mov    al,0x20
c000f29a:	ba d5 03 00 00       	mov    edx,0x3d5
c000f29f:	ee                   	out    dx,al
c000f2a0:	5b                   	pop    ebx
c000f2a1:	5e                   	pop    esi
c000f2a2:	c3                   	ret    

c000f2a3 <hwTextMode_update(VgaText*)>:
c000f2a3:	c3                   	ret    

c000f2a4 <hwTextMode_updateCursor(VgaText*)>:
c000f2a4:	56                   	push   esi
c000f2a5:	b9 19 00 00 00       	mov    ecx,0x19
c000f2aa:	53                   	push   ebx
c000f2ab:	be d4 03 00 00       	mov    esi,0x3d4
c000f2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b4:	89 f2                	mov    edx,esi
c000f2b6:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2bc:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2c2:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2c5:	c1 e1 04             	shl    ecx,0x4
c000f2c8:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2ce:	b0 0f                	mov    al,0xf
c000f2d0:	ee                   	out    dx,al
c000f2d1:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2d6:	88 c8                	mov    al,cl
c000f2d8:	89 da                	mov    edx,ebx
c000f2da:	ee                   	out    dx,al
c000f2db:	b0 0e                	mov    al,0xe
c000f2dd:	89 f2                	mov    edx,esi
c000f2df:	ee                   	out    dx,al
c000f2e0:	89 c8                	mov    eax,ecx
c000f2e2:	89 da                	mov    edx,ebx
c000f2e4:	66 c1 e8 08          	shr    ax,0x8
c000f2e8:	ee                   	out    dx,al
c000f2e9:	5b                   	pop    ebx
c000f2ea:	5e                   	pop    esi
c000f2eb:	c3                   	ret    

c000f2ec <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2ec:	ba da 03 00 00       	mov    edx,0x3da
c000f2f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2f6:	75 18                	jne    c000f310 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2f8:	ec                   	in     al,dx
c000f2f9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2fe:	b0 30                	mov    al,0x30
c000f300:	89 ca                	mov    edx,ecx
c000f302:	ee                   	out    dx,al
c000f303:	ba c1 03 00 00       	mov    edx,0x3c1
c000f308:	ec                   	in     al,dx
c000f309:	83 c8 08             	or     eax,0x8
c000f30c:	89 ca                	mov    edx,ecx
c000f30e:	ee                   	out    dx,al
c000f30f:	c3                   	ret    
c000f310:	ec                   	in     al,dx
c000f311:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f316:	b0 30                	mov    al,0x30
c000f318:	89 ca                	mov    edx,ecx
c000f31a:	ee                   	out    dx,al
c000f31b:	ba c1 03 00 00       	mov    edx,0x3c1
c000f320:	ec                   	in     al,dx
c000f321:	83 e0 f7             	and    eax,0xfffffff7
c000f324:	89 ca                	mov    edx,ecx
c000f326:	ee                   	out    dx,al
c000f327:	c3                   	ret    

c000f328 <hwTextMode_scrollScreen(VgaText*)>:
c000f328:	55                   	push   ebp
c000f329:	bd 02 00 00 00       	mov    ebp,0x2
c000f32e:	57                   	push   edi
c000f32f:	56                   	push   esi
c000f330:	53                   	push   ebx
c000f331:	83 ec 1c             	sub    esp,0x1c
c000f334:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f33c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f340:	31 c0                	xor    eax,eax
c000f342:	eb 0b                	jmp    c000f34f <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f344:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f34a:	74 57                	je     c000f3a3 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f34c:	43                   	inc    ebx
c000f34d:	89 f0                	mov    eax,esi
c000f34f:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f355:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f35b:	88 13                	mov    BYTE PTR [ebx],dl
c000f35d:	8d 70 01             	lea    esi,[eax+0x1]
c000f360:	83 fd 18             	cmp    ebp,0x18
c000f363:	75 df                	jne    c000f344 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f365:	a8 01                	test   al,0x1
c000f367:	75 13                	jne    c000f37c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f369:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f36c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f372:	75 d8                	jne    c000f34c <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f374:	83 c4 1c             	add    esp,0x1c
c000f377:	5b                   	pop    ebx
c000f378:	5e                   	pop    esi
c000f379:	5f                   	pop    edi
c000f37a:	5d                   	pop    ebp
c000f37b:	c3                   	ret    
c000f37c:	83 ec 08             	sub    esp,0x8
c000f37f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f383:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f38a:	50                   	push   eax
c000f38b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f38f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f396:	50                   	push   eax
c000f397:	e8 66 0b 00 00       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000f39c:	83 c4 10             	add    esp,0x10
c000f39f:	88 07                	mov    BYTE PTR [edi],al
c000f3a1:	eb c9                	jmp    c000f36c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f3a3:	45                   	inc    ebp
c000f3a4:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f3ac:	eb 8e                	jmp    c000f33c <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3ae <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3ae:	56                   	push   esi
c000f3af:	53                   	push   ebx
c000f3b0:	83 ec 0c             	sub    esp,0xc
c000f3b3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3bb:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c0:	50                   	push   eax
c000f3c1:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3c6:	50                   	push   eax
c000f3c7:	e8 36 0b 00 00       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000f3cc:	5a                   	pop    edx
c000f3cd:	0f b6 c0             	movzx  eax,al
c000f3d0:	59                   	pop    ecx
c000f3d1:	50                   	push   eax
c000f3d2:	89 f0                	mov    eax,esi
c000f3d4:	0f be f0             	movsx  esi,al
c000f3d7:	56                   	push   esi
c000f3d8:	e8 cb 0b 00 00       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3e1:	ba 19 00 00 00       	mov    edx,0x19
c000f3e6:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3ec:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3ef:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3f2:	c1 e1 04             	shl    ecx,0x4
c000f3f5:	c1 e2 04             	shl    edx,0x4
c000f3f8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3fc:	01 ca                	add    edx,ecx
c000f3fe:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f406:	83 c4 14             	add    esp,0x14
c000f409:	5b                   	pop    ebx
c000f40a:	5e                   	pop    esi
c000f40b:	c3                   	ret    

c000f40c <setupTextMode()>:
c000f40c:	c7 05 78 a6 02 c0 ec f2 00 c0 	mov    DWORD PTR ds:0xc002a678,0xc000f2ec
c000f416:	c7 05 64 a6 02 c0 c8 f1 00 c0 	mov    DWORD PTR ds:0xc002a664,0xc000f1c8
c000f420:	c7 05 60 a6 02 c0 0d f2 00 c0 	mov    DWORD PTR ds:0xc002a660,0xc000f20d
c000f42a:	c7 05 6c a6 02 c0 28 f3 00 c0 	mov    DWORD PTR ds:0xc002a66c,0xc000f328
c000f434:	c7 05 74 a6 02 c0 4f f2 00 c0 	mov    DWORD PTR ds:0xc002a674,0xc000f24f
c000f43e:	c7 05 68 a6 02 c0 a3 f2 00 c0 	mov    DWORD PTR ds:0xc002a668,0xc000f2a3
c000f448:	c7 05 70 a6 02 c0 a4 f2 00 c0 	mov    DWORD PTR ds:0xc002a670,0xc000f2a4
c000f452:	c7 05 7c a6 02 c0 ae f3 00 c0 	mov    DWORD PTR ds:0xc002a67c,0xc000f3ae
c000f45c:	c3                   	ret    

c000f45d <kernel_main>:
c000f45d:	57                   	push   edi
c000f45e:	bf f9 03 00 00       	mov    edi,0x3f9
c000f463:	56                   	push   esi
c000f464:	31 f6                	xor    esi,esi
c000f466:	53                   	push   ebx
c000f467:	83 ec 10             	sub    esp,0x10
c000f46a:	e8 ed 08 00 00       	call   c000fd5c <installVgaTextImplementation()>
c000f46f:	e8 98 ff ff ff       	call   c000f40c <setupTextMode()>
c000f474:	89 f0                	mov    eax,esi
c000f476:	89 fa                	mov    edx,edi
c000f478:	ee                   	out    dx,al
c000f479:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f47e:	b0 80                	mov    al,0x80
c000f480:	89 da                	mov    edx,ebx
c000f482:	ee                   	out    dx,al
c000f483:	b1 03                	mov    cl,0x3
c000f485:	ba f8 03 00 00       	mov    edx,0x3f8
c000f48a:	88 c8                	mov    al,cl
c000f48c:	ee                   	out    dx,al
c000f48d:	89 f0                	mov    eax,esi
c000f48f:	89 fa                	mov    edx,edi
c000f491:	ee                   	out    dx,al
c000f492:	88 c8                	mov    al,cl
c000f494:	89 da                	mov    edx,ebx
c000f496:	ee                   	out    dx,al
c000f497:	b0 c7                	mov    al,0xc7
c000f499:	ba fa 03 00 00       	mov    edx,0x3fa
c000f49e:	ee                   	out    dx,al
c000f49f:	b0 0b                	mov    al,0xb
c000f4a1:	ba fc 03 00 00       	mov    edx,0x3fc
c000f4a6:	ee                   	out    dx,al
c000f4a7:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f4ac:	83 ec 0c             	sub    esp,0xc
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4b9:	50                   	push   eax
c000f4ba:	e8 59 03 00 00       	call   c000f818 <Phys::physicalMemorySetup(unsigned int)>
c000f4bf:	e8 f2 1e 00 00       	call   c00113b6 <Virt::virtualMemorySetup()>
c000f4c4:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4d3:	75 0e                	jne    c000f4e3 <kernel_main+0x86>
c000f4d5:	89 d8                	mov    eax,ebx
c000f4d7:	25 48 03 00 00       	and    eax,0x348
c000f4dc:	3d 00 03 00 00       	cmp    eax,0x300
c000f4e1:	74 10                	je     c000f4f3 <kernel_main+0x96>
c000f4e3:	83 ec 0c             	sub    esp,0xc
c000f4e6:	68 3b 82 02 c0       	push   0xc002823b
c000f4eb:	e8 e7 95 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000f4f0:	83 c4 10             	add    esp,0x10
c000f4f3:	83 ec 0c             	sub    esp,0xc
c000f4f6:	89 1d e0 a5 02 c0    	mov    DWORD PTR ds:0xc002a5e0,ebx
c000f4fc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f500:	53                   	push   ebx
c000f501:	e8 5a 20 00 00       	call   c0011560 <VAS::VAS()>
c000f506:	89 1d 24 a7 02 c0    	mov    DWORD PTR ds:0xc002a724,ebx
c000f50c:	e8 0f 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f511:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f518:	e8 6b 2c 00 00       	call   c0012188 <operator new(unsigned long)>
c000f51d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f520:	89 c6                	mov    esi,eax
c000f522:	e8 4f ea ff ff       	call   c000df76 <Computer::Computer()>
c000f527:	6a 00                	push   0x0
c000f529:	89 35 c8 a5 02 c0    	mov    DWORD PTR ds:0xc002a5c8,esi
c000f52f:	6a 00                	push   0x0
c000f531:	6a 00                	push   0x0
c000f533:	56                   	push   esi
c000f534:	e8 77 f2 ff ff       	call   c000e7b0 <Computer::open(int, int, void*)>
c000f539:	83 c4 14             	add    esp,0x14
c000f53c:	53                   	push   ebx
c000f53d:	e8 ca 22 00 00       	call   c001180c <VAS::~VAS()>
c000f542:	c7 04 24 ec 6c 02 c0 	mov    DWORD PTR [esp],0xc0026cec
c000f549:	e8 89 95 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000f54e:	83 c4 20             	add    esp,0x20
c000f551:	5b                   	pop    ebx
c000f552:	5e                   	pop    esi
c000f553:	5f                   	pop    edi
c000f554:	c3                   	ret    

c000f555 <Phys::allocateDMA(unsigned long)>:
c000f555:	55                   	push   ebp
c000f556:	31 d2                	xor    edx,edx
c000f558:	57                   	push   edi
c000f559:	31 ed                	xor    ebp,ebp
c000f55b:	56                   	push   esi
c000f55c:	31 c9                	xor    ecx,ecx
c000f55e:	53                   	push   ebx
c000f55f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f563:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f569:	31 c0                	xor    eax,eax
c000f56b:	c1 ee 0c             	shr    esi,0xc
c000f56e:	eb 17                	jmp    c000f587 <Phys::allocateDMA(unsigned long)+0x32>
c000f570:	85 c9                	test   ecx,ecx
c000f572:	75 04                	jne    c000f578 <Phys::allocateDMA(unsigned long)+0x23>
c000f574:	89 d5                	mov    ebp,edx
c000f576:	89 d0                	mov    eax,edx
c000f578:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f57b:	39 de                	cmp    esi,ebx
c000f57d:	74 20                	je     c000f59f <Phys::allocateDMA(unsigned long)+0x4a>
c000f57f:	42                   	inc    edx
c000f580:	89 d9                	mov    ecx,ebx
c000f582:	83 fa 2f             	cmp    edx,0x2f
c000f585:	7f 11                	jg     c000f598 <Phys::allocateDMA(unsigned long)+0x43>
c000f587:	80 ba 20 a6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd59e0],0x0
c000f58e:	74 e0                	je     c000f570 <Phys::allocateDMA(unsigned long)+0x1b>
c000f590:	31 c9                	xor    ecx,ecx
c000f592:	42                   	inc    edx
c000f593:	83 fa 2f             	cmp    edx,0x2f
c000f596:	7e ef                	jle    c000f587 <Phys::allocateDMA(unsigned long)+0x32>
c000f598:	5b                   	pop    ebx
c000f599:	31 c0                	xor    eax,eax
c000f59b:	5e                   	pop    esi
c000f59c:	5f                   	pop    edi
c000f59d:	5d                   	pop    ebp
c000f59e:	c3                   	ret    
c000f59f:	8d 14 30             	lea    edx,[eax+esi*1]
c000f5a2:	89 d7                	mov    edi,edx
c000f5a4:	4f                   	dec    edi
c000f5a5:	79 03                	jns    c000f5aa <Phys::allocateDMA(unsigned long)+0x55>
c000f5a7:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f5aa:	c1 ff 04             	sar    edi,0x4
c000f5ad:	89 c2                	mov    edx,eax
c000f5af:	c1 fa 04             	sar    edx,0x4
c000f5b2:	39 fa                	cmp    edx,edi
c000f5b4:	75 2f                	jne    c000f5e5 <Phys::allocateDMA(unsigned long)+0x90>
c000f5b6:	85 db                	test   ebx,ebx
c000f5b8:	74 1a                	je     c000f5d4 <Phys::allocateDMA(unsigned long)+0x7f>
c000f5ba:	be 20 a6 02 c0       	mov    esi,0xc002a620
c000f5bf:	8d 90 20 a6 02 c0    	lea    edx,[eax-0x3ffd59e0]
c000f5c5:	f7 d6                	not    esi
c000f5c7:	29 c6                	sub    esi,eax
c000f5c9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5cc:	42                   	inc    edx
c000f5cd:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5d0:	39 d9                	cmp    ecx,ebx
c000f5d2:	7f f5                	jg     c000f5c9 <Phys::allocateDMA(unsigned long)+0x74>
c000f5d4:	85 ff                	test   edi,edi
c000f5d6:	74 13                	je     c000f5eb <Phys::allocateDMA(unsigned long)+0x96>
c000f5d8:	5b                   	pop    ebx
c000f5d9:	05 50 20 0c 00       	add    eax,0xc2050
c000f5de:	5e                   	pop    esi
c000f5df:	c1 e0 0c             	shl    eax,0xc
c000f5e2:	5f                   	pop    edi
c000f5e3:	5d                   	pop    ebp
c000f5e4:	c3                   	ret    
c000f5e5:	89 ea                	mov    edx,ebp
c000f5e7:	31 c9                	xor    ecx,ecx
c000f5e9:	eb a7                	jmp    c000f592 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5eb:	5b                   	pop    ebx
c000f5ec:	c1 e0 0c             	shl    eax,0xc
c000f5ef:	5e                   	pop    esi
c000f5f0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5f5:	5f                   	pop    edi
c000f5f6:	5d                   	pop    ebp
c000f5f7:	c3                   	ret    

c000f5f8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f600:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f606:	c1 e9 0c             	shr    ecx,0xc
c000f609:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f60e:	76 25                	jbe    c000f635 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f610:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f615:	c1 e8 0c             	shr    eax,0xc
c000f618:	8d 50 10             	lea    edx,[eax+0x10]
c000f61b:	85 c9                	test   ecx,ecx
c000f61d:	74 15                	je     c000f634 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f61f:	8d 82 20 a6 02 c0    	lea    eax,[edx-0x3ffd59e0]
c000f625:	8d 94 11 20 a6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd59e0]
c000f62c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f62f:	40                   	inc    eax
c000f630:	39 d0                	cmp    eax,edx
c000f632:	75 f8                	jne    c000f62c <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f634:	c3                   	ret    
c000f635:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f63b:	c1 ea 0c             	shr    edx,0xc
c000f63e:	eb db                	jmp    c000f61b <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f640 <Phys::setPageState(unsigned long, bool)>:
c000f640:	56                   	push   esi
c000f641:	ba 01 00 00 00       	mov    edx,0x1
c000f646:	53                   	push   ebx
c000f647:	8b 35 60 95 02 c0    	mov    esi,DWORD PTR ds:0xc0029560
c000f64d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f655:	89 c8                	mov    eax,ecx
c000f657:	83 e1 07             	and    ecx,0x7
c000f65a:	c1 e8 03             	shr    eax,0x3
c000f65d:	d3 e3                	shl    ebx,cl
c000f65f:	01 c6                	add    esi,eax
c000f661:	d3 e2                	shl    edx,cl
c000f663:	f7 d2                	not    edx
c000f665:	20 16                	and    BYTE PTR [esi],dl
c000f667:	03 05 60 95 02 c0    	add    eax,DWORD PTR ds:0xc0029560
c000f66d:	08 18                	or     BYTE PTR [eax],bl
c000f66f:	5b                   	pop    ebx
c000f670:	5e                   	pop    esi
c000f671:	c3                   	ret    

c000f672 <Phys::getPageState(unsigned long)>:
c000f672:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f676:	8b 15 60 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029560
c000f67c:	89 c8                	mov    eax,ecx
c000f67e:	83 e1 07             	and    ecx,0x7
c000f681:	c1 e8 03             	shr    eax,0x3
c000f684:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f688:	d3 f8                	sar    eax,cl
c000f68a:	83 e0 01             	and    eax,0x1
c000f68d:	c3                   	ret    

c000f68e <Phys::freePage(unsigned long)>:
c000f68e:	53                   	push   ebx
c000f68f:	83 ec 08             	sub    esp,0x8
c000f692:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f696:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f69c:	76 57                	jbe    c000f6f5 <Phys::freePage(unsigned long)+0x67>
c000f69e:	c1 eb 0c             	shr    ebx,0xc
c000f6a1:	53                   	push   ebx
c000f6a2:	e8 cb ff ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f6a7:	5a                   	pop    edx
c000f6a8:	84 c0                	test   al,al
c000f6aa:	74 5b                	je     c000f707 <Phys::freePage(unsigned long)+0x79>
c000f6ac:	a1 0c a6 02 c0       	mov    eax,ds:0xc002a60c
c000f6b1:	48                   	dec    eax
c000f6b2:	a3 0c a6 02 c0       	mov    ds:0xc002a60c,eax
c000f6b7:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6ba:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6bd:	c1 e0 02             	shl    eax,0x2
c000f6c0:	99                   	cdq    
c000f6c1:	f7 3d 10 a6 02 c0    	idiv   DWORD PTR ds:0xc002a610
c000f6c7:	39 05 08 a6 02 c0    	cmp    DWORD PTR ds:0xc002a608,eax
c000f6cd:	75 13                	jne    c000f6e2 <Phys::freePage(unsigned long)+0x54>
c000f6cf:	83 ec 08             	sub    esp,0x8
c000f6d2:	6a 00                	push   0x0
c000f6d4:	53                   	push   ebx
c000f6d5:	e8 66 ff ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	83 c4 08             	add    esp,0x8
c000f6e0:	5b                   	pop    ebx
c000f6e1:	c3                   	ret    
c000f6e2:	83 ec 0c             	sub    esp,0xc
c000f6e5:	a3 08 a6 02 c0       	mov    ds:0xc002a608,eax
c000f6ea:	50                   	push   eax
c000f6eb:	e8 00 0a 00 00       	call   c00100f0 <VgaText::updateRAMUsageDisplay(int)>
c000f6f0:	83 c4 10             	add    esp,0x10
c000f6f3:	eb da                	jmp    c000f6cf <Phys::freePage(unsigned long)+0x41>
c000f6f5:	68 00 10 00 00       	push   0x1000
c000f6fa:	53                   	push   ebx
c000f6fb:	e8 f8 fe ff ff       	call   c000f5f8 <Phys::freeDMA(unsigned long, unsigned long)>
c000f700:	59                   	pop    ecx
c000f701:	5b                   	pop    ebx
c000f702:	83 c4 08             	add    esp,0x8
c000f705:	5b                   	pop    ebx
c000f706:	c3                   	ret    
c000f707:	c7 44 24 10 07 6d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026d07
c000f70f:	83 c4 08             	add    esp,0x8
c000f712:	5b                   	pop    ebx
c000f713:	e9 bf 93 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>

c000f718 <Phys::allocatePage()>:
c000f718:	56                   	push   esi
c000f719:	53                   	push   ebx
c000f71a:	51                   	push   ecx
c000f71b:	8b 35 00 a6 02 c0    	mov    esi,DWORD PTR ds:0xc002a600
c000f721:	89 f3                	mov    ebx,esi
c000f723:	eb 0a                	jmp    c000f72f <Phys::allocatePage()+0x17>
c000f725:	89 1d 00 a6 02 c0    	mov    DWORD PTR ds:0xc002a600,ebx
c000f72b:	39 de                	cmp    esi,ebx
c000f72d:	74 24                	je     c000f753 <Phys::allocatePage()+0x3b>
c000f72f:	53                   	push   ebx
c000f730:	e8 3d ff ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f735:	5a                   	pop    edx
c000f736:	84 c0                	test   al,al
c000f738:	74 5a                	je     c000f794 <Phys::allocatePage()+0x7c>
c000f73a:	43                   	inc    ebx
c000f73b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f741:	75 e2                	jne    c000f725 <Phys::allocatePage()+0xd>
c000f743:	31 db                	xor    ebx,ebx
c000f745:	c7 05 00 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a600,0x0
c000f74f:	39 de                	cmp    esi,ebx
c000f751:	75 dc                	jne    c000f72f <Phys::allocatePage()+0x17>
c000f753:	83 ec 0c             	sub    esp,0xc
c000f756:	68 1d 6d 02 c0       	push   0xc0026d1d
c000f75b:	e8 17 2b 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f760:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f767:	e8 e9 fd ff ff       	call   c000f555 <Phys::allocateDMA(unsigned long)>
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	85 c0                	test   eax,eax
c000f771:	75 56                	jne    c000f7c9 <Phys::allocatePage()+0xb1>
c000f773:	83 ec 0c             	sub    esp,0xc
c000f776:	68 2e 6d 02 c0       	push   0xc0026d2e
c000f77b:	e8 57 93 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000f780:	83 c4 10             	add    esp,0x10
c000f783:	8b 1d 00 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a600
c000f789:	53                   	push   ebx
c000f78a:	e8 e3 fe ff ff       	call   c000f672 <Phys::getPageState(unsigned long)>
c000f78f:	5a                   	pop    edx
c000f790:	84 c0                	test   al,al
c000f792:	75 a6                	jne    c000f73a <Phys::allocatePage()+0x22>
c000f794:	6a 01                	push   0x1
c000f796:	53                   	push   ebx
c000f797:	e8 a4 fe ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f79c:	a1 0c a6 02 c0       	mov    eax,ds:0xc002a60c
c000f7a1:	59                   	pop    ecx
c000f7a2:	40                   	inc    eax
c000f7a3:	5b                   	pop    ebx
c000f7a4:	a3 0c a6 02 c0       	mov    ds:0xc002a60c,eax
c000f7a9:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7ac:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7af:	c1 e0 02             	shl    eax,0x2
c000f7b2:	99                   	cdq    
c000f7b3:	f7 3d 10 a6 02 c0    	idiv   DWORD PTR ds:0xc002a610
c000f7b9:	39 05 08 a6 02 c0    	cmp    DWORD PTR ds:0xc002a608,eax
c000f7bf:	75 0c                	jne    c000f7cd <Phys::allocatePage()+0xb5>
c000f7c1:	a1 00 a6 02 c0       	mov    eax,ds:0xc002a600
c000f7c6:	c1 e0 0c             	shl    eax,0xc
c000f7c9:	5a                   	pop    edx
c000f7ca:	5b                   	pop    ebx
c000f7cb:	5e                   	pop    esi
c000f7cc:	c3                   	ret    
c000f7cd:	83 ec 0c             	sub    esp,0xc
c000f7d0:	a3 08 a6 02 c0       	mov    ds:0xc002a608,eax
c000f7d5:	50                   	push   eax
c000f7d6:	e8 15 09 00 00       	call   c00100f0 <VgaText::updateRAMUsageDisplay(int)>
c000f7db:	83 c4 10             	add    esp,0x10
c000f7de:	eb e1                	jmp    c000f7c1 <Phys::allocatePage()+0xa9>

c000f7e0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7e0:	56                   	push   esi
c000f7e1:	53                   	push   ebx
c000f7e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7e6:	39 1d 04 a6 02 c0    	cmp    DWORD PTR ds:0xc002a604,ebx
c000f7ec:	73 06                	jae    c000f7f4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7ee:	89 1d 04 a6 02 c0    	mov    DWORD PTR ds:0xc002a604,ebx
c000f7f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f8:	c1 eb 0c             	shr    ebx,0xc
c000f7fb:	c1 e8 0c             	shr    eax,0xc
c000f7fe:	39 d8                	cmp    eax,ebx
c000f800:	73 13                	jae    c000f815 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f802:	6a 00                	push   0x0
c000f804:	8d 70 01             	lea    esi,[eax+0x1]
c000f807:	50                   	push   eax
c000f808:	e8 33 fe ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f80d:	5a                   	pop    edx
c000f80e:	89 f0                	mov    eax,esi
c000f810:	59                   	pop    ecx
c000f811:	39 f3                	cmp    ebx,esi
c000f813:	75 ed                	jne    c000f802 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f815:	5b                   	pop    ebx
c000f816:	5e                   	pop    esi
c000f817:	c3                   	ret    

c000f818 <Phys::physicalMemorySetup(unsigned int)>:
c000f818:	55                   	push   ebp
c000f819:	57                   	push   edi
c000f81a:	56                   	push   esi
c000f81b:	53                   	push   ebx
c000f81c:	31 db                	xor    ebx,ebx
c000f81e:	83 ec 40             	sub    esp,0x40
c000f821:	6a 30                	push   0x30
c000f823:	6a 00                	push   0x0
c000f825:	68 20 a6 02 c0       	push   0xc002a620
c000f82a:	e8 96 0e ff ff       	call   c00006c5 <memset>
c000f82f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f833:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f838:	05 00 10 00 00       	add    eax,0x1000
c000f83d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	83 ec 08             	sub    esp,0x8
c000f847:	6a 01                	push   0x1
c000f849:	53                   	push   ebx
c000f84a:	43                   	inc    ebx
c000f84b:	e8 f0 fd ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000f850:	83 c4 10             	add    esp,0x10
c000f853:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f859:	75 e9                	jne    c000f844 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f85b:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f862:	66 85 c0             	test   ax,ax
c000f865:	0f 84 8e 01 00 00    	je     c000f9f9 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f86b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f86f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f87b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f880:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f884:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f88c:	eb 15                	jmp    c000f8a3 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f88e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f892:	83 c3 18             	add    ebx,0x18
c000f895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f899:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f89d:	0f 84 66 01 00 00    	je     c000fa09 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f8a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8a9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f8ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8b4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8b6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8b9:	01 f0                	add    eax,esi
c000f8bb:	55                   	push   ebp
c000f8bc:	11 fa                	adc    edx,edi
c000f8be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8ca:	56                   	push   esi
c000f8cb:	68 68 6d 02 c0       	push   0xc0026d68
c000f8d0:	e8 a2 29 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8d9:	83 c4 10             	add    esp,0x10
c000f8dc:	09 f8                	or     eax,edi
c000f8de:	0f 85 25 01 00 00    	jne    c000fa09 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8e4:	4d                   	dec    ebp
c000f8e5:	75 a7                	jne    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8e7:	ba 00 00 08 00       	mov    edx,0x80000
c000f8ec:	89 c1                	mov    ecx,eax
c000f8ee:	39 f2                	cmp    edx,esi
c000f8f0:	19 f9                	sbb    ecx,edi
c000f8f2:	0f 82 a7 00 00 00    	jb     c000f99f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8f8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8fc:	89 c1                	mov    ecx,eax
c000f8fe:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f902:	0f 83 97 00 00 00    	jae    c000f99f <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f908:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f90d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f911:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f915:	39 fa                	cmp    edx,edi
c000f917:	19 e8                	sbb    eax,ebp
c000f919:	0f 82 14 01 00 00    	jb     c000fa33 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f91f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f923:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f927:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f92d:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f932:	83 d5 ff             	adc    ebp,0xffffffff
c000f935:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f939:	31 c0                	xor    eax,eax
c000f93b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f93f:	39 fa                	cmp    edx,edi
c000f941:	89 c1                	mov    ecx,eax
c000f943:	19 e9                	sbb    ecx,ebp
c000f945:	0f 83 43 ff ff ff    	jae    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f94b:	be 00 00 08 00       	mov    esi,0x80000
c000f950:	50                   	push   eax
c000f951:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f955:	57                   	push   edi
c000f956:	56                   	push   esi
c000f957:	68 8c 6d 02 c0       	push   0xc0026d8c
c000f95c:	e8 16 29 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f961:	5a                   	pop    edx
c000f962:	59                   	pop    ecx
c000f963:	57                   	push   edi
c000f964:	56                   	push   esi
c000f965:	e8 76 fe ff ff       	call   c000f7e0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f96a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f96e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f972:	83 c4 0c             	add    esp,0xc
c000f975:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f979:	03 05 10 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a610
c000f97f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f986:	a3 10 a6 02 c0       	mov    ds:0xc002a610,eax
c000f98b:	52                   	push   edx
c000f98c:	50                   	push   eax
c000f98d:	68 4a 6d 02 c0       	push   0xc0026d4a
c000f992:	e8 e0 28 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c000f997:	83 c4 10             	add    esp,0x10
c000f99a:	e9 ef fe ff ff       	jmp    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f99f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f9a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9ab:	39 ea                	cmp    edx,ebp
c000f9ad:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9b1:	0f 82 d7 fe ff ff    	jb     c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9b7:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9bc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9c0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9c4:	0f 83 c4 fe ff ff    	jae    c000f88e <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9ca:	39 ee                	cmp    esi,ebp
c000f9cc:	89 f8                	mov    eax,edi
c000f9ce:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9d2:	0f 83 78 ff ff ff    	jae    c000f950 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9e0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9e8:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9f4:	e9 57 ff ff ff       	jmp    c000f950 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9f9:	83 ec 0c             	sub    esp,0xc
c000f9fc:	68 3c 6d 02 c0       	push   0xc0026d3c
c000fa01:	e8 d1 90 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000fa06:	83 c4 10             	add    esp,0x10
c000fa09:	bb 40 01 00 00       	mov    ebx,0x140
c000fa0e:	83 ec 08             	sub    esp,0x8
c000fa11:	6a 00                	push   0x0
c000fa13:	53                   	push   ebx
c000fa14:	43                   	inc    ebx
c000fa15:	e8 26 fc ff ff       	call   c000f640 <Phys::setPageState(unsigned long, bool)>
c000fa1a:	ff 05 10 a6 02 c0    	inc    DWORD PTR ds:0xc002a610
c000fa20:	83 c4 10             	add    esp,0x10
c000fa23:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa29:	75 e3                	jne    c000fa0e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa2b:	83 c4 3c             	add    esp,0x3c
c000fa2e:	5b                   	pop    ebx
c000fa2f:	5e                   	pop    esi
c000fa30:	5f                   	pop    edi
c000fa31:	5d                   	pop    ebp
c000fa32:	c3                   	ret    
c000fa33:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa3b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa43:	e9 d7 fe ff ff       	jmp    c000f91f <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa48 <Pipe::isAtty()>:
c000fa48:	31 c0                	xor    eax,eax
c000fa4a:	c3                   	ret    
c000fa4b:	90                   	nop

c000fa4c <Pipe::~Pipe()>:
c000fa4c:	83 ec 0c             	sub    esp,0xc
c000fa4f:	ba f8 6d 02 c0       	mov    edx,0xc0026df8
c000fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa58:	89 10                	mov    DWORD PTR [eax],edx
c000fa5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa5e:	83 ec 0c             	sub    esp,0xc
c000fa61:	50                   	push   eax
c000fa62:	e8 dd 15 00 00       	call   c0011044 <UnixFile::~UnixFile()>
c000fa67:	83 c4 10             	add    esp,0x10
c000fa6a:	90                   	nop
c000fa6b:	83 c4 0c             	add    esp,0xc
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <Pipe::~Pipe()>:
c000fa70:	83 ec 0c             	sub    esp,0xc
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa7a:	e8 cd ff ff ff       	call   c000fa4c <Pipe::~Pipe()>
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	83 ec 08             	sub    esp,0x8
c000fa85:	6a 20                	push   0x20
c000fa87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa8b:	e8 07 27 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c000fa90:	83 c4 10             	add    esp,0x10
c000fa93:	83 c4 0c             	add    esp,0xc
c000fa96:	c3                   	ret    
c000fa97:	90                   	nop

c000fa98 <Pipe::read(unsigned long long, void*, int*)>:
c000fa98:	55                   	push   ebp
c000fa99:	57                   	push   edi
c000fa9a:	56                   	push   esi
c000fa9b:	53                   	push   ebx
c000fa9c:	83 ec 1c             	sub    esp,0x1c
c000fa9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000faa3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000faa7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000faab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faae:	89 c8                	mov    eax,ecx
c000fab0:	99                   	cdq    
c000fab1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fab5:	74 19                	je     c000fad0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab7:	39 f9                	cmp    ecx,edi
c000fab9:	89 d1                	mov    ecx,edx
c000fabb:	19 f1                	sbb    ecx,esi
c000fabd:	73 11                	jae    c000fad0 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fabf:	e8 66 bf 00 00       	call   c001ba2a <lockScheduler()>
c000fac4:	e8 95 c2 00 00       	call   c001bd5e <schedule()>
c000fac9:	e8 5e bf 00 00       	call   c001ba2c <unlockScheduler()>
c000face:	eb db                	jmp    c000faab <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fad0:	39 f8                	cmp    eax,edi
c000fad2:	89 d1                	mov    ecx,edx
c000fad4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fad8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fadc:	19 f1                	sbb    ecx,esi
c000fade:	73 08                	jae    c000fae8 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fae4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fae8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faeb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000faee:	29 c6                	sub    esi,eax
c000faf0:	89 f1                	mov    ecx,esi
c000faf2:	c1 f9 1f             	sar    ecx,0x1f
c000faf5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faf9:	89 ca                	mov    edx,ecx
c000fafb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faff:	19 d1                	sbb    ecx,edx
c000fb01:	73 04                	jae    c000fb07 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fb03:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fb07:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fb0b:	89 fd                	mov    ebp,edi
c000fb0d:	29 f5                	sub    ebp,esi
c000fb0f:	85 f6                	test   esi,esi
c000fb11:	74 12                	je     c000fb25 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb13:	52                   	push   edx
c000fb14:	56                   	push   esi
c000fb15:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb18:	50                   	push   eax
c000fb19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb1d:	e8 6d 0b ff ff       	call   c000068f <memcpy>
c000fb22:	83 c4 10             	add    esp,0x10
c000fb25:	85 ed                	test   ebp,ebp
c000fb27:	74 12                	je     c000fb3b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb29:	50                   	push   eax
c000fb2a:	55                   	push   ebp
c000fb2b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb2e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb32:	56                   	push   esi
c000fb33:	e8 57 0b ff ff       	call   c000068f <memcpy>
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb41:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb44:	99                   	cdq    
c000fb45:	89 f7                	mov    edi,esi
c000fb47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb4b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb4f:	c1 ff 1f             	sar    edi,0x1f
c000fb52:	57                   	push   edi
c000fb53:	56                   	push   esi
c000fb54:	52                   	push   edx
c000fb55:	50                   	push   eax
c000fb56:	e8 81 3a 01 00       	call   c00235dc <__umoddi3>
c000fb5b:	83 c4 10             	add    esp,0x10
c000fb5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb61:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb66:	75 10                	jne    c000fb78 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb68:	83 ec 0c             	sub    esp,0xc
c000fb6b:	68 b5 6d 02 c0       	push   0xc0026db5
c000fb70:	e8 62 8f 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb80:	89 10                	mov    DWORD PTR [eax],edx
c000fb82:	83 c4 1c             	add    esp,0x1c
c000fb85:	31 c0                	xor    eax,eax
c000fb87:	5b                   	pop    ebx
c000fb88:	5e                   	pop    esi
c000fb89:	5f                   	pop    edi
c000fb8a:	5d                   	pop    ebp
c000fb8b:	c3                   	ret    

c000fb8c <Pipe::write(unsigned long long, void*, int*)>:
c000fb8c:	55                   	push   ebp
c000fb8d:	57                   	push   edi
c000fb8e:	56                   	push   esi
c000fb8f:	53                   	push   ebx
c000fb90:	83 ec 1c             	sub    esp,0x1c
c000fb93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fba5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fbac:	89 de                	mov    esi,ebx
c000fbae:	89 df                	mov    edi,ebx
c000fbb0:	c1 ff 1f             	sar    edi,0x1f
c000fbb3:	01 c6                	add    esi,eax
c000fbb5:	89 c8                	mov    eax,ecx
c000fbb7:	11 d7                	adc    edi,edx
c000fbb9:	99                   	cdq    
c000fbba:	39 f1                	cmp    ecx,esi
c000fbbc:	89 d0                	mov    eax,edx
c000fbbe:	19 f8                	sbb    eax,edi
c000fbc0:	b8 01 00 00 00       	mov    eax,0x1
c000fbc5:	0f 82 80 00 00 00    	jb     c000fc4b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbd1:	01 d8                	add    eax,ebx
c000fbd3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbd7:	99                   	cdq    
c000fbd8:	f7 f9                	idiv   ecx
c000fbda:	29 d1                	sub    ecx,edx
c000fbdc:	89 d7                	mov    edi,edx
c000fbde:	89 c8                	mov    eax,ecx
c000fbe0:	99                   	cdq    
c000fbe1:	39 ce                	cmp    esi,ecx
c000fbe3:	19 d3                	sbb    ebx,edx
c000fbe5:	bb 00 00 00 00       	mov    ebx,0x0
c000fbea:	72 04                	jb     c000fbf0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbec:	89 f3                	mov    ebx,esi
c000fbee:	29 cb                	sub    ebx,ecx
c000fbf0:	89 f1                	mov    ecx,esi
c000fbf2:	29 d9                	sub    ecx,ebx
c000fbf4:	74 1a                	je     c000fc10 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbf6:	52                   	push   edx
c000fbf7:	51                   	push   ecx
c000fbf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbfc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fc00:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fc03:	57                   	push   edi
c000fc04:	e8 86 0a ff ff       	call   c000068f <memcpy>
c000fc09:	83 c4 10             	add    esp,0x10
c000fc0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc10:	85 db                	test   ebx,ebx
c000fc12:	74 12                	je     c000fc26 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc14:	50                   	push   eax
c000fc15:	53                   	push   ebx
c000fc16:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc1a:	51                   	push   ecx
c000fc1b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc1e:	e8 6c 0a ff ff       	call   c000068f <memcpy>
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc29:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc2e:	75 10                	jne    c000fc40 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	68 d1 6d 02 c0       	push   0xc0026dd1
c000fc38:	e8 9a 8e 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc47:	89 38                	mov    DWORD PTR [eax],edi
c000fc49:	31 c0                	xor    eax,eax
c000fc4b:	83 c4 1c             	add    esp,0x1c
c000fc4e:	5b                   	pop    ebx
c000fc4f:	5e                   	pop    esi
c000fc50:	5f                   	pop    edi
c000fc51:	5d                   	pop    ebp
c000fc52:	c3                   	ret    
c000fc53:	90                   	nop

c000fc54 <Pipe::Pipe(int)>:
c000fc54:	83 ec 0c             	sub    esp,0xc
c000fc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5b:	83 ec 08             	sub    esp,0x8
c000fc5e:	6a 00                	push   0x0
c000fc60:	50                   	push   eax
c000fc61:	e8 3c 12 00 00       	call   c0010ea2 <UnixFile::UnixFile(int)>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	ba f8 6d 02 c0       	mov    edx,0xc0026df8
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	89 10                	mov    DWORD PTR [eax],edx
c000fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc83:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	50                   	push   eax
c000fc9d:	e8 cc f4 ff ff       	call   c000f16e <malloc>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	89 c2                	mov    edx,eax
c000fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fcb6:	90                   	nop
c000fcb7:	83 c4 0c             	add    esp,0xc
c000fcba:	c3                   	ret    
c000fcbb:	90                   	nop

c000fcbc <VgaText::isAtty()>:
c000fcbc:	b0 01                	mov    al,0x1
c000fcbe:	c3                   	ret    
c000fcbf:	90                   	nop

c000fcc0 <VgaText::~VgaText()>:
c000fcc0:	83 ec 0c             	sub    esp,0xc
c000fcc3:	ba b4 6e 02 c0       	mov    edx,0xc0026eb4
c000fcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fccc:	89 10                	mov    DWORD PTR [eax],edx
c000fcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd2:	83 ec 0c             	sub    esp,0xc
c000fcd5:	50                   	push   eax
c000fcd6:	e8 69 13 00 00       	call   c0011044 <UnixFile::~UnixFile()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	90                   	nop
c000fcdf:	83 c4 0c             	add    esp,0xc
c000fce2:	c3                   	ret    
c000fce3:	90                   	nop

c000fce4 <VgaText::~VgaText()>:
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	83 ec 0c             	sub    esp,0xc
c000fcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcee:	e8 cd ff ff ff       	call   c000fcc0 <VgaText::~VgaText()>
c000fcf3:	83 c4 10             	add    esp,0x10
c000fcf6:	83 ec 08             	sub    esp,0x8
c000fcf9:	68 60 12 00 00       	push   0x1260
c000fcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd02:	e8 90 24 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c000fd07:	83 c4 10             	add    esp,0x10
c000fd0a:	83 c4 0c             	add    esp,0xc
c000fd0d:	c3                   	ret    

c000fd0e <VgaText::read(unsigned long long, void*, int*)>:
c000fd0e:	83 ec 10             	sub    esp,0x10
c000fd11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd1d:	e8 26 57 00 00       	call   c0015448 <readKeyboard(VgaText*, char*, unsigned long)>
c000fd22:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd26:	89 02                	mov    DWORD PTR [edx],eax
c000fd28:	31 c0                	xor    eax,eax
c000fd2a:	83 c4 1c             	add    esp,0x1c
c000fd2d:	c3                   	ret    

c000fd2e <setTerminalScrollLock(bool)>:
c000fd2e:	c3                   	ret    

c000fd2f <addToTerminalCycle(VgaText*)>:
c000fd2f:	8b 15 80 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a680
c000fd35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd39:	85 d2                	test   edx,edx
c000fd3b:	75 0c                	jne    c000fd49 <addToTerminalCycle(VgaText*)+0x1a>
c000fd3d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd43:	a3 80 a6 02 c0       	mov    ds:0xc002a680,eax
c000fd48:	c3                   	ret    
c000fd49:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd4f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd55:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd5b:	c3                   	ret    

c000fd5c <installVgaTextImplementation()>:
c000fd5c:	83 ec 10             	sub    esp,0x10
c000fd5f:	6a 20                	push   0x20
c000fd61:	6a 00                	push   0x0
c000fd63:	68 60 a6 02 c0       	push   0xc002a660
c000fd68:	e8 58 09 ff ff       	call   c00006c5 <memset>
c000fd6d:	83 c4 1c             	add    esp,0x1c
c000fd70:	c3                   	ret    

c000fd71 <scrollTerminalScrollLock(int)>:
c000fd71:	c3                   	ret    

c000fd72 <VgaText::load()>:
c000fd72:	53                   	push   ebx
c000fd73:	31 c0                	xor    eax,eax
c000fd75:	83 ec 58             	sub    esp,0x58
c000fd78:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd7c:	89 e2                	mov    edx,esp
c000fd7e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd82:	40                   	inc    eax
c000fd83:	83 f8 50             	cmp    eax,0x50
c000fd86:	75 f6                	jne    c000fd7e <VgaText::load()+0xc>
c000fd88:	31 c0                	xor    eax,eax
c000fd8a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd91:	84 c9                	test   cl,cl
c000fd93:	74 06                	je     c000fd9b <VgaText::load()+0x29>
c000fd95:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd98:	40                   	inc    eax
c000fd99:	eb ef                	jmp    c000fd8a <VgaText::load()+0x18>
c000fd9b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fda1:	85 c0                	test   eax,eax
c000fda3:	74 09                	je     c000fdae <VgaText::load()+0x3c>
c000fda5:	51                   	push   ecx
c000fda6:	51                   	push   ecx
c000fda7:	52                   	push   edx
c000fda8:	53                   	push   ebx
c000fda9:	ff d0                	call   eax
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fdb4:	85 c0                	test   eax,eax
c000fdb6:	74 09                	je     c000fdc1 <VgaText::load()+0x4f>
c000fdb8:	83 ec 0c             	sub    esp,0xc
c000fdbb:	53                   	push   ebx
c000fdbc:	ff d0                	call   eax
c000fdbe:	83 c4 10             	add    esp,0x10
c000fdc1:	83 c4 58             	add    esp,0x58
c000fdc4:	5b                   	pop    ebx
c000fdc5:	c3                   	ret    

c000fdc6 <VgaText::updateCursor()>:
c000fdc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdca:	39 05 84 a6 02 c0    	cmp    DWORD PTR ds:0xc002a684,eax
c000fdd0:	75 0c                	jne    c000fdde <VgaText::updateCursor()+0x18>
c000fdd2:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdd8:	85 c0                	test   eax,eax
c000fdda:	74 02                	je     c000fdde <VgaText::updateCursor()+0x18>
c000fddc:	ff e0                	jmp    eax
c000fdde:	c3                   	ret    
c000fddf:	90                   	nop

c000fde0 <VgaText::showCursor(bool)>:
c000fde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde8:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdee:	c3                   	ret    
c000fdef:	90                   	nop

c000fdf0 <VgaText::disableBlink(bool)>:
c000fdf0:	56                   	push   esi
c000fdf1:	53                   	push   ebx
c000fdf2:	51                   	push   ecx
c000fdf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdf7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdfb:	39 1d 84 a6 02 c0    	cmp    DWORD PTR ds:0xc002a684,ebx
c000fe01:	75 18                	jne    c000fe1b <VgaText::disableBlink(bool)+0x2b>
c000fe03:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fe09:	85 c0                	test   eax,eax
c000fe0b:	74 0e                	je     c000fe1b <VgaText::disableBlink(bool)+0x2b>
c000fe0d:	89 f1                	mov    ecx,esi
c000fe0f:	52                   	push   edx
c000fe10:	52                   	push   edx
c000fe11:	0f b6 d1             	movzx  edx,cl
c000fe14:	52                   	push   edx
c000fe15:	53                   	push   ebx
c000fe16:	ff d0                	call   eax
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	89 f0                	mov    eax,esi
c000fe1d:	83 f0 01             	xor    eax,0x1
c000fe20:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe26:	58                   	pop    eax
c000fe27:	5b                   	pop    ebx
c000fe28:	5e                   	pop    esi
c000fe29:	c3                   	ret    

c000fe2a <VgaText::doANSI_SGR(int)>:
c000fe2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe32:	85 d2                	test   edx,edx
c000fe34:	75 14                	jne    c000fe4a <VgaText::doANSI_SGR(int)+0x20>
c000fe36:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe3c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe42:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe48:	eb 65                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe4a:	83 fa 07             	cmp    edx,0x7
c000fe4d:	75 14                	jne    c000fe63 <VgaText::doANSI_SGR(int)+0x39>
c000fe4f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe55:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe5b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe61:	eb 4c                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe63:	83 fa 1b             	cmp    edx,0x1b
c000fe66:	74 ce                	je     c000fe36 <VgaText::doANSI_SGR(int)+0xc>
c000fe68:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe6b:	83 f9 07             	cmp    ecx,0x7
c000fe6e:	77 09                	ja     c000fe79 <VgaText::doANSI_SGR(int)+0x4f>
c000fe70:	8b 14 8d a0 95 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6a60]
c000fe77:	eb 20                	jmp    c000fe99 <VgaText::doANSI_SGR(int)+0x6f>
c000fe79:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe7c:	83 f9 07             	cmp    ecx,0x7
c000fe7f:	77 09                	ja     c000fe8a <VgaText::doANSI_SGR(int)+0x60>
c000fe81:	8b 14 8d a0 95 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6a60]
c000fe88:	eb 25                	jmp    c000feaf <VgaText::doANSI_SGR(int)+0x85>
c000fe8a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe8d:	83 f9 07             	cmp    ecx,0x7
c000fe90:	77 0e                	ja     c000fea0 <VgaText::doANSI_SGR(int)+0x76>
c000fe92:	8b 14 95 58 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6ba8]
c000fe99:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe9f:	c3                   	ret    
c000fea0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fea3:	83 f9 07             	cmp    ecx,0x7
c000fea6:	77 0d                	ja     c000feb5 <VgaText::doANSI_SGR(int)+0x8b>
c000fea8:	8b 14 95 30 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6bd0]
c000feaf:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000feb5:	c3                   	ret    

c000feb6 <VgaText::setDefaultBgColour(VgaColour)>:
c000feb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000febe:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fec4:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000feca:	c3                   	ret    
c000fecb:	90                   	nop

c000fecc <VgaText::setDefaultFgColour(VgaColour)>:
c000fecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fed4:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000feda:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fee0:	c3                   	ret    
c000fee1:	90                   	nop

c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fee2:	53                   	push   ebx
c000fee3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000feeb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000feef:	51                   	push   ecx
c000fef0:	e8 c1 ff ff ff       	call   c000feb6 <VgaText::setDefaultBgColour(VgaColour)>
c000fef5:	58                   	pop    eax
c000fef6:	5a                   	pop    edx
c000fef7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fefb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000feff:	5b                   	pop    ebx
c000ff00:	eb ca                	jmp    c000fecc <VgaText::setDefaultFgColour(VgaColour)>

c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ff02:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ff06:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ff0b:	83 e0 0f             	and    eax,0xf
c000ff0e:	c1 e2 04             	shl    edx,0x4
c000ff11:	09 d0                	or     eax,edx
c000ff13:	c3                   	ret    

c000ff14 <VgaText::scrollScreen()>:
c000ff14:	57                   	push   edi
c000ff15:	56                   	push   esi
c000ff16:	be 01 00 00 00       	mov    esi,0x1
c000ff1b:	53                   	push   ebx
c000ff1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff20:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff26:	31 ff                	xor    edi,edi
c000ff28:	01 d9                	add    ecx,ebx
c000ff2a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff2d:	83 fe 17             	cmp    esi,0x17
c000ff30:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff36:	75 28                	jne    c000ff60 <VgaText::scrollScreen()+0x4c>
c000ff38:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff3e:	74 1c                	je     c000ff5c <VgaText::scrollScreen()+0x48>
c000ff40:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff47:	50                   	push   eax
c000ff48:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff4f:	50                   	push   eax
c000ff50:	e8 ad ff ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff55:	5a                   	pop    edx
c000ff56:	5a                   	pop    edx
c000ff57:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff5a:	eb 04                	jmp    c000ff60 <VgaText::scrollScreen()+0x4c>
c000ff5c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff60:	47                   	inc    edi
c000ff61:	41                   	inc    ecx
c000ff62:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff68:	75 c0                	jne    c000ff2a <VgaText::scrollScreen()+0x16>
c000ff6a:	46                   	inc    esi
c000ff6b:	83 fe 18             	cmp    esi,0x18
c000ff6e:	75 b0                	jne    c000ff20 <VgaText::scrollScreen()+0xc>
c000ff70:	39 1d 84 a6 02 c0    	cmp    DWORD PTR ds:0xc002a684,ebx
c000ff76:	75 24                	jne    c000ff9c <VgaText::scrollScreen()+0x88>
c000ff78:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff7f:	74 08                	je     c000ff89 <VgaText::scrollScreen()+0x75>
c000ff81:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff87:	eb 13                	jmp    c000ff9c <VgaText::scrollScreen()+0x88>
c000ff89:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff8f:	85 c0                	test   eax,eax
c000ff91:	74 09                	je     c000ff9c <VgaText::scrollScreen()+0x88>
c000ff93:	83 ec 0c             	sub    esp,0xc
c000ff96:	53                   	push   ebx
c000ff97:	ff d0                	call   eax
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ffa0:	5b                   	pop    ebx
c000ffa1:	5e                   	pop    esi
c000ffa2:	5f                   	pop    edi
c000ffa3:	e9 1e fe ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>

c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ffa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ffad:	c1 e0 08             	shl    eax,0x8
c000ffb0:	89 c2                	mov    edx,eax
c000ffb2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffb7:	09 d0                	or     eax,edx
c000ffb9:	c3                   	ret    

c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffba:	53                   	push   ebx
c000ffbb:	83 ec 08             	sub    esp,0x8
c000ffbe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffc2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffc7:	50                   	push   eax
c000ffc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffcd:	50                   	push   eax
c000ffce:	e8 2f ff ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffd3:	5a                   	pop    edx
c000ffd4:	0f b6 c0             	movzx  eax,al
c000ffd7:	5b                   	pop    ebx
c000ffd8:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffdd:	50                   	push   eax
c000ffde:	53                   	push   ebx
c000ffdf:	e8 c4 ff ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffe4:	5a                   	pop    edx
c000ffe5:	5a                   	pop    edx
c000ffe6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffec:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000fff0:	0f b7 d2             	movzx  edx,dx
c000fff3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fff8:	39 0d 84 a6 02 c0    	cmp    DWORD PTR ds:0xc002a684,ecx
c000fffe:	75 14                	jne    c0010014 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010000:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010006:	85 c0                	test   eax,eax
c0010008:	74 0a                	je     c0010014 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001000a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001000e:	83 c4 08             	add    esp,0x8
c0010011:	5b                   	pop    ebx
c0010012:	ff e0                	jmp    eax
c0010014:	83 c4 08             	add    esp,0x8
c0010017:	5b                   	pop    ebx
c0010018:	c3                   	ret    
c0010019:	90                   	nop

c001001a <VgaText::getCursorX()>:
c001001a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010024:	c3                   	ret    
c0010025:	90                   	nop

c0010026 <VgaText::getCursorY()>:
c0010026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <VgaText::setCursor(int, int)>:
c0010032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001003a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010040:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010044:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001004a:	e9 77 fd ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c001004f:	90                   	nop

c0010050 <VgaText::setCursorX(int)>:
c0010050:	83 ec 10             	sub    esp,0x10
c0010053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010057:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001005d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010061:	50                   	push   eax
c0010062:	e8 cb ff ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010067:	83 c4 1c             	add    esp,0x1c
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <VgaText::setCursorY(int)>:
c001006c:	83 ec 10             	sub    esp,0x10
c001006f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010073:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010077:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001007d:	50                   	push   eax
c001007e:	e8 af ff ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010083:	83 c4 1c             	add    esp,0x1c
c0010086:	c3                   	ret    
c0010087:	90                   	nop

c0010088 <VgaText::incrementCursor(bool)>:
c0010088:	56                   	push   esi
c0010089:	53                   	push   ebx
c001008a:	51                   	push   ecx
c001008b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010093:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010099:	40                   	inc    eax
c001009a:	83 f8 50             	cmp    eax,0x50
c001009d:	74 08                	je     c00100a7 <VgaText::incrementCursor(bool)+0x1f>
c001009f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00100a5:	eb 33                	jmp    c00100da <VgaText::incrementCursor(bool)+0x52>
c00100a7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00100ad:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100b7:	8d 50 01             	lea    edx,[eax+0x1]
c00100ba:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100c0:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100c6:	75 12                	jne    c00100da <VgaText::incrementCursor(bool)+0x52>
c00100c8:	83 ec 0c             	sub    esp,0xc
c00100cb:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100d1:	53                   	push   ebx
c00100d2:	e8 3d fe ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	89 f0                	mov    eax,esi
c00100dc:	84 c0                	test   al,al
c00100de:	74 0c                	je     c00100ec <VgaText::incrementCursor(bool)+0x64>
c00100e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100e4:	5a                   	pop    edx
c00100e5:	5b                   	pop    ebx
c00100e6:	5e                   	pop    esi
c00100e7:	e9 da fc ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c00100ec:	58                   	pop    eax
c00100ed:	5b                   	pop    ebx
c00100ee:	5e                   	pop    esi
c00100ef:	c3                   	ret    

c00100f0 <VgaText::updateRAMUsageDisplay(int)>:
c00100f0:	53                   	push   ebx
c00100f1:	bb 0a 00 00 00       	mov    ebx,0xa
c00100f6:	6a 0f                	push   0xf
c00100f8:	6a 00                	push   0x0
c00100fa:	e8 03 fe ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c00100ff:	5a                   	pop    edx
c0010100:	59                   	pop    ecx
c0010101:	0f b6 c8             	movzx  ecx,al
c0010104:	51                   	push   ecx
c0010105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010109:	99                   	cdq    
c001010a:	f7 fb                	idiv   ebx
c001010c:	89 d3                	mov    ebx,edx
c001010e:	83 c0 30             	add    eax,0x30
c0010111:	83 c3 30             	add    ebx,0x30
c0010114:	0f be c0             	movsx  eax,al
c0010117:	0f b6 db             	movzx  ebx,bl
c001011a:	50                   	push   eax
c001011b:	e8 88 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010120:	5a                   	pop    edx
c0010121:	5a                   	pop    edx
c0010122:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010128:	51                   	push   ecx
c0010129:	53                   	push   ebx
c001012a:	e8 79 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001012f:	5b                   	pop    ebx
c0010130:	5a                   	pop    edx
c0010131:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010137:	51                   	push   ecx
c0010138:	6a 25                	push   0x25
c001013a:	e8 69 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001013f:	59                   	pop    ecx
c0010140:	5b                   	pop    ebx
c0010141:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010147:	5b                   	pop    ebx
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <VgaText::updateDiskUsage()>:
c001014a:	55                   	push   ebp
c001014b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010150:	57                   	push   edi
c0010151:	56                   	push   esi
c0010152:	53                   	push   ebx
c0010153:	6a 0f                	push   0xf
c0010155:	6a 00                	push   0x0
c0010157:	e8 a6 fd ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c001015c:	5a                   	pop    edx
c001015d:	0f b6 d8             	movzx  ebx,al
c0010160:	59                   	pop    ecx
c0010161:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c0010166:	53                   	push   ebx
c0010167:	b9 0a 00 00 00       	mov    ecx,0xa
c001016c:	99                   	cdq    
c001016d:	f7 fd                	idiv   ebp
c001016f:	99                   	cdq    
c0010170:	f7 f9                	idiv   ecx
c0010172:	8d 42 30             	lea    eax,[edx+0x30]
c0010175:	0f b6 c0             	movzx  eax,al
c0010178:	50                   	push   eax
c0010179:	e8 2a fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c001017e:	5e                   	pop    esi
c001017f:	5f                   	pop    edi
c0010180:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010186:	bf e8 03 00 00       	mov    edi,0x3e8
c001018b:	53                   	push   ebx
c001018c:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c0010191:	99                   	cdq    
c0010192:	f7 ff                	idiv   edi
c0010194:	99                   	cdq    
c0010195:	f7 f9                	idiv   ecx
c0010197:	8d 42 30             	lea    eax,[edx+0x30]
c001019a:	0f b6 c0             	movzx  eax,al
c001019d:	50                   	push   eax
c001019e:	e8 05 fe ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a3:	5a                   	pop    edx
c00101a4:	5e                   	pop    esi
c00101a5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00101ab:	be 64 00 00 00       	mov    esi,0x64
c00101b0:	53                   	push   ebx
c00101b1:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c00101b6:	99                   	cdq    
c00101b7:	f7 fe                	idiv   esi
c00101b9:	99                   	cdq    
c00101ba:	f7 f9                	idiv   ecx
c00101bc:	8d 42 30             	lea    eax,[edx+0x30]
c00101bf:	0f b6 c0             	movzx  eax,al
c00101c2:	50                   	push   eax
c00101c3:	e8 e0 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c8:	5a                   	pop    edx
c00101c9:	5a                   	pop    edx
c00101ca:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101d0:	53                   	push   ebx
c00101d1:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c00101d6:	99                   	cdq    
c00101d7:	f7 f9                	idiv   ecx
c00101d9:	99                   	cdq    
c00101da:	f7 f9                	idiv   ecx
c00101dc:	8d 42 30             	lea    eax,[edx+0x30]
c00101df:	0f b6 c0             	movzx  eax,al
c00101e2:	50                   	push   eax
c00101e3:	e8 c0 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00101e8:	5a                   	pop    edx
c00101e9:	5a                   	pop    edx
c00101ea:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101f0:	53                   	push   ebx
c00101f1:	a1 08 c8 02 c0       	mov    eax,ds:0xc002c808
c00101f6:	99                   	cdq    
c00101f7:	f7 f9                	idiv   ecx
c00101f9:	8d 42 30             	lea    eax,[edx+0x30]
c00101fc:	0f b6 c0             	movzx  eax,al
c00101ff:	50                   	push   eax
c0010200:	e8 a3 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010205:	5a                   	pop    edx
c0010206:	5a                   	pop    edx
c0010207:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001020d:	53                   	push   ebx
c001020e:	a1 04 c8 02 c0       	mov    eax,ds:0xc002c804
c0010213:	99                   	cdq    
c0010214:	f7 fd                	idiv   ebp
c0010216:	99                   	cdq    
c0010217:	f7 f9                	idiv   ecx
c0010219:	8d 42 30             	lea    eax,[edx+0x30]
c001021c:	0f b6 c0             	movzx  eax,al
c001021f:	50                   	push   eax
c0010220:	e8 83 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010225:	5d                   	pop    ebp
c0010226:	5a                   	pop    edx
c0010227:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001022d:	53                   	push   ebx
c001022e:	a1 04 c8 02 c0       	mov    eax,ds:0xc002c804
c0010233:	99                   	cdq    
c0010234:	f7 ff                	idiv   edi
c0010236:	99                   	cdq    
c0010237:	f7 f9                	idiv   ecx
c0010239:	8d 42 30             	lea    eax,[edx+0x30]
c001023c:	0f b6 c0             	movzx  eax,al
c001023f:	50                   	push   eax
c0010240:	e8 63 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010245:	5f                   	pop    edi
c0010246:	5d                   	pop    ebp
c0010247:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001024d:	53                   	push   ebx
c001024e:	a1 04 c8 02 c0       	mov    eax,ds:0xc002c804
c0010253:	99                   	cdq    
c0010254:	f7 fe                	idiv   esi
c0010256:	99                   	cdq    
c0010257:	f7 f9                	idiv   ecx
c0010259:	8d 42 30             	lea    eax,[edx+0x30]
c001025c:	0f b6 c0             	movzx  eax,al
c001025f:	50                   	push   eax
c0010260:	e8 43 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010265:	5a                   	pop    edx
c0010266:	5e                   	pop    esi
c0010267:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001026d:	53                   	push   ebx
c001026e:	a1 04 c8 02 c0       	mov    eax,ds:0xc002c804
c0010273:	99                   	cdq    
c0010274:	f7 f9                	idiv   ecx
c0010276:	99                   	cdq    
c0010277:	f7 f9                	idiv   ecx
c0010279:	8d 42 30             	lea    eax,[edx+0x30]
c001027c:	0f b6 c0             	movzx  eax,al
c001027f:	50                   	push   eax
c0010280:	e8 23 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010285:	5f                   	pop    edi
c0010286:	5d                   	pop    ebp
c0010287:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001028d:	53                   	push   ebx
c001028e:	a1 04 c8 02 c0       	mov    eax,ds:0xc002c804
c0010293:	99                   	cdq    
c0010294:	f7 f9                	idiv   ecx
c0010296:	83 c2 30             	add    edx,0x30
c0010299:	0f b6 d2             	movzx  edx,dl
c001029c:	52                   	push   edx
c001029d:	e8 06 fd ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00102a2:	5a                   	pop    edx
c00102a3:	59                   	pop    ecx
c00102a4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00102aa:	5b                   	pop    ebx
c00102ab:	5e                   	pop    esi
c00102ac:	5f                   	pop    edi
c00102ad:	5d                   	pop    ebp
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <VgaText::updateTitle()>:
c00102b0:	53                   	push   ebx
c00102b1:	31 c0                	xor    eax,eax
c00102b3:	83 ec 58             	sub    esp,0x58
c00102b6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102ba:	89 e1                	mov    ecx,esp
c00102bc:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102c0:	40                   	inc    eax
c00102c1:	83 f8 50             	cmp    eax,0x50
c00102c4:	75 f6                	jne    c00102bc <VgaText::updateTitle()+0xc>
c00102c6:	31 c0                	xor    eax,eax
c00102c8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102cf:	84 db                	test   bl,bl
c00102d1:	74 06                	je     c00102d9 <VgaText::updateTitle()+0x29>
c00102d3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102d6:	40                   	inc    eax
c00102d7:	eb ef                	jmp    c00102c8 <VgaText::updateTitle()+0x18>
c00102d9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102df:	85 c0                	test   eax,eax
c00102e1:	74 09                	je     c00102ec <VgaText::updateTitle()+0x3c>
c00102e3:	53                   	push   ebx
c00102e4:	53                   	push   ebx
c00102e5:	51                   	push   ecx
c00102e6:	52                   	push   edx
c00102e7:	ff d0                	call   eax
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	e8 59 fe ff ff       	call   c001014a <VgaText::updateDiskUsage()>
c00102f1:	83 c4 58             	add    esp,0x58
c00102f4:	5b                   	pop    ebx
c00102f5:	c3                   	ret    

c00102f6 <VgaText::setTitleTextColour(VgaColour)>:
c00102f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fe:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010304:	eb aa                	jmp    c00102b0 <VgaText::updateTitle()>

c0010306 <VgaText::setTitleColour(VgaColour)>:
c0010306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001030a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001030e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010314:	eb 9a                	jmp    c00102b0 <VgaText::updateTitle()>

c0010316 <VgaText::setTitle(char*)>:
c0010316:	53                   	push   ebx
c0010317:	83 ec 10             	sub    esp,0x10
c001031a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001031e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010322:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010328:	50                   	push   eax
c0010329:	e8 36 04 ff ff       	call   c0000764 <strcpy>
c001032e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010332:	83 c4 18             	add    esp,0x18
c0010335:	5b                   	pop    ebx
c0010336:	e9 75 ff ff ff       	jmp    c00102b0 <VgaText::updateTitle()>
c001033b:	90                   	nop

c001033c <VgaText::decrementCursor(bool)>:
c001033c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010340:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010344:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001034a:	85 c0                	test   eax,eax
c001034c:	74 07                	je     c0010355 <VgaText::decrementCursor(bool)+0x19>
c001034e:	48                   	dec    eax
c001034f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010355:	84 c9                	test   cl,cl
c0010357:	74 09                	je     c0010362 <VgaText::decrementCursor(bool)+0x26>
c0010359:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001035d:	e9 64 fa ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c0010362:	c3                   	ret    
c0010363:	90                   	nop

c0010364 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010364:	53                   	push   ebx
c0010365:	83 ec 08             	sub    esp,0x8
c0010368:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010370:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010374:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010378:	3c 07                	cmp    al,0x7
c001037a:	75 2a                	jne    c00103a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001037c:	a1 2c a7 02 c0       	mov    eax,ds:0xc002a72c
c0010381:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010389:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010391:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010399:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001039d:	83 c4 08             	add    esp,0x8
c00103a0:	5b                   	pop    ebx
c00103a1:	e9 bc 2c 00 00       	jmp    c0013062 <Buzzer::beep(int, int, bool)>
c00103a6:	3c 0d                	cmp    al,0xd
c00103a8:	75 0c                	jne    c00103b6 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00103aa:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103b4:	eb 3b                	jmp    c00103f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103b6:	3c 0a                	cmp    al,0xa
c00103b8:	75 40                	jne    c00103fa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103ba:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103c0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103ca:	8d 50 01             	lea    edx,[eax+0x1]
c00103cd:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103d3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103d9:	75 12                	jne    c00103ed <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103e4:	53                   	push   ebx
c00103e5:	e8 2a fb ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103f1:	83 c4 08             	add    esp,0x8
c00103f4:	5b                   	pop    ebx
c00103f5:	e9 cc f9 ff ff       	jmp    c000fdc6 <VgaText::updateCursor()>
c00103fa:	3c 08                	cmp    al,0x8
c00103fc:	75 31                	jne    c001042f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103fe:	50                   	push   eax
c00103ff:	50                   	push   eax
c0010400:	6a 01                	push   0x1
c0010402:	53                   	push   ebx
c0010403:	e8 34 ff ff ff       	call   c001033c <VgaText::decrementCursor(bool)>
c0010408:	5a                   	pop    edx
c0010409:	59                   	pop    ecx
c001040a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010410:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010416:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001041c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010422:	6a 20                	push   0x20
c0010424:	53                   	push   ebx
c0010425:	e8 90 fb ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001042a:	83 c4 28             	add    esp,0x28
c001042d:	5b                   	pop    ebx
c001042e:	c3                   	ret    
c001042f:	83 ec 08             	sub    esp,0x8
c0010432:	0f be c0             	movsx  eax,al
c0010435:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001043b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010441:	51                   	push   ecx
c0010442:	52                   	push   edx
c0010443:	50                   	push   eax
c0010444:	53                   	push   ebx
c0010445:	e8 70 fb ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001044a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001044e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010456:	83 c4 28             	add    esp,0x28
c0010459:	5b                   	pop    ebx
c001045a:	e9 29 fc ff ff       	jmp    c0010088 <VgaText::incrementCursor(bool)>
c001045f:	90                   	nop

c0010460 <VgaText::isShowingCursor()>:
c0010460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010464:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001046a:	c3                   	ret    
c001046b:	90                   	nop

c001046c <VgaText::isBlinkDisabled()>:
c001046c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010470:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010476:	83 f0 01             	xor    eax,0x1
c0010479:	c3                   	ret    

c001047a <VgaText::setCursorHeight(int)>:
c001047a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001047e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010482:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010488:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001048f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010493:	e9 48 f9 ff ff       	jmp    c000fde0 <VgaText::showCursor(bool)>

c0010498 <VgaText::getCursorHeight()>:
c0010498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001049c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00104a2:	c3                   	ret    

c00104a3 <setActiveTerminal(VgaText*)>:
c00104a3:	53                   	push   ebx
c00104a4:	83 ec 08             	sub    esp,0x8
c00104a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104ab:	85 db                	test   ebx,ebx
c00104ad:	75 11                	jne    c00104c0 <setActiveTerminal(VgaText*)+0x1d>
c00104af:	c7 44 24 10 0c 6e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026e0c
c00104b7:	83 c4 08             	add    esp,0x8
c00104ba:	5b                   	pop    ebx
c00104bb:	e9 17 86 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>
c00104c0:	50                   	push   eax
c00104c1:	50                   	push   eax
c00104c2:	53                   	push   ebx
c00104c3:	68 1a 6e 02 c0       	push   0xc0026e1a
c00104c8:	e8 aa 1d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00104cd:	a1 84 a6 02 c0       	mov    eax,ds:0xc002a684
c00104d2:	83 c4 10             	add    esp,0x10
c00104d5:	85 c0                	test   eax,eax
c00104d7:	74 0c                	je     c00104e5 <setActiveTerminal(VgaText*)+0x42>
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	50                   	push   eax
c00104dd:	e8 e4 f8 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	89 1d 84 a6 02 c0    	mov    DWORD PTR ds:0xc002a684,ebx
c00104eb:	51                   	push   ecx
c00104ec:	51                   	push   ecx
c00104ed:	53                   	push   ebx
c00104ee:	68 32 6e 02 c0       	push   0xc0026e32
c00104f3:	e8 7f 1d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00104f8:	83 c4 0c             	add    esp,0xc
c00104fb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010501:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010507:	53                   	push   ebx
c0010508:	e8 25 fb ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c001050d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010510:	e8 57 ff ff ff       	call   c001046c <VgaText::isBlinkDisabled()>
c0010515:	5a                   	pop    edx
c0010516:	0f b6 c0             	movzx  eax,al
c0010519:	59                   	pop    ecx
c001051a:	50                   	push   eax
c001051b:	53                   	push   ebx
c001051c:	e8 cf f8 ff ff       	call   c000fdf0 <VgaText::disableBlink(bool)>
c0010521:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010524:	e8 6f ff ff ff       	call   c0010498 <VgaText::getCursorHeight()>
c0010529:	5a                   	pop    edx
c001052a:	59                   	pop    ecx
c001052b:	50                   	push   eax
c001052c:	53                   	push   ebx
c001052d:	e8 48 ff ff ff       	call   c001047a <VgaText::setCursorHeight(int)>
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001053c:	75 0a                	jne    c0010548 <setActiveTerminal(VgaText*)+0xa5>
c001053e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010548:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001054c:	83 c4 08             	add    esp,0x8
c001054f:	5b                   	pop    ebx
c0010550:	e9 1d f8 ff ff       	jmp    c000fd72 <VgaText::load()>

c0010555 <doTerminalCycle()>:
c0010555:	83 ec 18             	sub    esp,0x18
c0010558:	a1 80 a6 02 c0       	mov    eax,ds:0xc002a680
c001055d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010563:	50                   	push   eax
c0010564:	a3 80 a6 02 c0       	mov    ds:0xc002a680,eax
c0010569:	e8 35 ff ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c001056e:	83 c4 1c             	add    esp,0x1c
c0010571:	c3                   	ret    

c0010572 <VgaText::doUpdate()>:
c0010572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010576:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001057c:	85 c0                	test   eax,eax
c001057e:	74 02                	je     c0010582 <VgaText::doUpdate()+0x10>
c0010580:	ff e0                	jmp    eax
c0010582:	c3                   	ret    
c0010583:	90                   	nop

c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010584:	55                   	push   ebp
c0010585:	57                   	push   edi
c0010586:	56                   	push   esi
c0010587:	53                   	push   ebx
c0010588:	83 ec 1c             	sub    esp,0x1c
c001058b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001058f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010594:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001059b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001059e:	50                   	push   eax
c001059f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00105a4:	50                   	push   eax
c00105a5:	e8 58 f9 ff ff       	call   c000ff02 <VgaText::combineColours(unsigned char, unsigned char)>
c00105aa:	59                   	pop    ecx
c00105ab:	0f b6 c0             	movzx  eax,al
c00105ae:	5b                   	pop    ebx
c00105af:	31 c9                	xor    ecx,ecx
c00105b1:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105bd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105c7:	0f b7 db             	movzx  ebx,bx
c00105ca:	01 db                	add    ebx,ebx
c00105cc:	01 fb                	add    ebx,edi
c00105ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105d1:	84 c0                	test   al,al
c00105d3:	0f 84 38 01 00 00    	je     c0010711 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105d9:	3c 0d                	cmp    al,0xd
c00105db:	75 0f                	jne    c00105ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105dd:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105e7:	e9 1f 01 00 00       	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105ec:	3c 0a                	cmp    al,0xa
c00105ee:	75 5b                	jne    c001064b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105f0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105f6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010600:	8d 48 01             	lea    ecx,[eax+0x1]
c0010603:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010609:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c001060f:	75 12                	jne    c0010623 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010611:	83 ec 0c             	sub    esp,0xc
c0010614:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001061a:	55                   	push   ebp
c001061b:	e8 f4 f8 ff ff       	call   c000ff14 <VgaText::scrollScreen()>
c0010620:	83 c4 10             	add    esp,0x10
c0010623:	83 ec 0c             	sub    esp,0xc
c0010626:	55                   	push   ebp
c0010627:	e8 9a f7 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c001062c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010634:	83 c4 10             	add    esp,0x10
c0010637:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001063d:	31 c9                	xor    ecx,ecx
c001063f:	0f b7 db             	movzx  ebx,bx
c0010642:	01 db                	add    ebx,ebx
c0010644:	01 fb                	add    ebx,edi
c0010646:	e9 c0 00 00 00       	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001064b:	3c 08                	cmp    al,0x8
c001064d:	75 4e                	jne    c001069d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c001064f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010653:	53                   	push   ebx
c0010654:	53                   	push   ebx
c0010655:	6a 01                	push   0x1
c0010657:	55                   	push   ebp
c0010658:	e8 df fc ff ff       	call   c001033c <VgaText::decrementCursor(bool)>
c001065d:	58                   	pop    eax
c001065e:	5a                   	pop    edx
c001065f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010665:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001066b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010671:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010677:	6a 20                	push   0x20
c0010679:	55                   	push   ebp
c001067a:	e8 3b f9 ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001067f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010687:	83 c4 20             	add    esp,0x20
c001068a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010690:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010694:	0f b7 db             	movzx  ebx,bx
c0010697:	01 db                	add    ebx,ebx
c0010699:	01 fb                	add    ebx,edi
c001069b:	eb 6e                	jmp    c001070b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001069d:	51                   	push   ecx
c001069e:	51                   	push   ecx
c001069f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00106a3:	50                   	push   eax
c00106a4:	e8 ff f8 ff ff       	call   c000ffa8 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a9:	83 c4 10             	add    esp,0x10
c00106ac:	66 89 03             	mov    WORD PTR [ebx],ax
c00106af:	39 2d 84 a6 02 c0    	cmp    DWORD PTR ds:0xc002a684,ebp
c00106b5:	75 2a                	jne    c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b7:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106bd:	85 c0                	test   eax,eax
c00106bf:	74 20                	je     c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106c1:	52                   	push   edx
c00106c2:	52                   	push   edx
c00106c3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106c9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106d7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106da:	51                   	push   ecx
c00106db:	55                   	push   ebp
c00106dc:	ff d0                	call   eax
c00106de:	83 c4 20             	add    esp,0x20
c00106e1:	83 c3 02             	add    ebx,0x2
c00106e4:	50                   	push   eax
c00106e5:	50                   	push   eax
c00106e6:	6a 00                	push   0x0
c00106e8:	55                   	push   ebp
c00106e9:	e8 9a f9 ff ff       	call   c0010088 <VgaText::incrementCursor(bool)>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106f8:	75 0f                	jne    c0010709 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106fa:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010702:	0f b7 db             	movzx  ebx,bx
c0010705:	01 db                	add    ebx,ebx
c0010707:	01 fb                	add    ebx,edi
c0010709:	b1 01                	mov    cl,0x1
c001070b:	46                   	inc    esi
c001070c:	e9 bd fe ff ff       	jmp    c00105ce <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010711:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010715:	83 ec 0c             	sub    esp,0xc
c0010718:	55                   	push   ebp
c0010719:	e8 a8 f6 ff ff       	call   c000fdc6 <VgaText::updateCursor()>
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010725:	84 c9                	test   cl,cl
c0010727:	74 0c                	je     c0010735 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010729:	83 ec 0c             	sub    esp,0xc
c001072c:	55                   	push   ebp
c001072d:	e8 40 fe ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010732:	83 c4 10             	add    esp,0x10
c0010735:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001073c:	83 c4 1c             	add    esp,0x1c
c001073f:	5b                   	pop    ebx
c0010740:	5e                   	pop    esi
c0010741:	5f                   	pop    edi
c0010742:	5d                   	pop    ebp
c0010743:	c3                   	ret    

c0010744 <VgaText::clearScreen()>:
c0010744:	57                   	push   edi
c0010745:	56                   	push   esi
c0010746:	31 f6                	xor    esi,esi
c0010748:	53                   	push   ebx
c0010749:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001074d:	52                   	push   edx
c001074e:	6a 00                	push   0x0
c0010750:	6a 00                	push   0x0
c0010752:	53                   	push   ebx
c0010753:	e8 da f8 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010758:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c001075f:	83 c4 10             	add    esp,0x10
c0010762:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010768:	7e 26                	jle    c0010790 <VgaText::clearScreen()+0x4c>
c001076a:	31 ff                	xor    edi,edi
c001076c:	50                   	push   eax
c001076d:	50                   	push   eax
c001076e:	56                   	push   esi
c001076f:	57                   	push   edi
c0010770:	47                   	inc    edi
c0010771:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010777:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001077d:	6a 20                	push   0x20
c001077f:	53                   	push   ebx
c0010780:	e8 35 f8 ff ff       	call   c000ffba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010785:	83 c4 20             	add    esp,0x20
c0010788:	83 ff 50             	cmp    edi,0x50
c001078b:	75 df                	jne    c001076c <VgaText::clearScreen()+0x28>
c001078d:	46                   	inc    esi
c001078e:	eb d2                	jmp    c0010762 <VgaText::clearScreen()+0x1e>
c0010790:	83 ec 0c             	sub    esp,0xc
c0010793:	53                   	push   ebx
c0010794:	e8 d9 fd ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010799:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	5b                   	pop    ebx
c00107a4:	5e                   	pop    esi
c00107a5:	5f                   	pop    edi
c00107a6:	c3                   	ret    
c00107a7:	90                   	nop

c00107a8 <VgaText::putchar(char)>:
c00107a8:	56                   	push   esi
c00107a9:	53                   	push   ebx
c00107aa:	83 ec 14             	sub    esp,0x14
c00107ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107b5:	3c 5b                	cmp    al,0x5b
c00107b7:	75 21                	jne    c00107da <VgaText::putchar(char)+0x32>
c00107b9:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107c0:	74 28                	je     c00107ea <VgaText::putchar(char)+0x42>
c00107c2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107cb:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107d5:	e9 e2 00 00 00       	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00107da:	3c 1b                	cmp    al,0x1b
c00107dc:	75 0c                	jne    c00107ea <VgaText::putchar(char)+0x42>
c00107de:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107e5:	e9 d2 00 00 00       	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00107ea:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107f0:	84 c9                	test   cl,cl
c00107f2:	0f 84 ab 00 00 00    	je     c00108a3 <VgaText::putchar(char)+0xfb>
c00107f8:	8d 50 c0             	lea    edx,[eax-0x40]
c00107fb:	80 fa 3e             	cmp    dl,0x3e
c00107fe:	0f 87 82 00 00 00    	ja     c0010886 <VgaText::putchar(char)+0xde>
c0010804:	3c 6d                	cmp    al,0x6d
c0010806:	75 4d                	jne    c0010855 <VgaText::putchar(char)+0xad>
c0010808:	31 f6                	xor    esi,esi
c001080a:	31 d2                	xor    edx,edx
c001080c:	31 c0                	xor    eax,eax
c001080e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010814:	7e 30                	jle    c0010846 <VgaText::putchar(char)+0x9e>
c0010816:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001081e:	80 fa 3b             	cmp    dl,0x3b
c0010821:	75 17                	jne    c001083a <VgaText::putchar(char)+0x92>
c0010823:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010827:	50                   	push   eax
c0010828:	53                   	push   ebx
c0010829:	e8 fc f5 ff ff       	call   c000fe2a <VgaText::doANSI_SGR(int)>
c001082e:	59                   	pop    ecx
c001082f:	31 d2                	xor    edx,edx
c0010831:	58                   	pop    eax
c0010832:	31 c0                	xor    eax,eax
c0010834:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010838:	eb 09                	jmp    c0010843 <VgaText::putchar(char)+0x9b>
c001083a:	6b c0 0a             	imul   eax,eax,0xa
c001083d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010841:	88 ca                	mov    dl,cl
c0010843:	46                   	inc    esi
c0010844:	eb c8                	jmp    c001080e <VgaText::putchar(char)+0x66>
c0010846:	84 d2                	test   dl,dl
c0010848:	74 31                	je     c001087b <VgaText::putchar(char)+0xd3>
c001084a:	50                   	push   eax
c001084b:	53                   	push   ebx
c001084c:	e8 d9 f5 ff ff       	call   c000fe2a <VgaText::doANSI_SGR(int)>
c0010851:	58                   	pop    eax
c0010852:	5a                   	pop    edx
c0010853:	eb 26                	jmp    c001087b <VgaText::putchar(char)+0xd3>
c0010855:	3c 4a                	cmp    al,0x4a
c0010857:	75 22                	jne    c001087b <VgaText::putchar(char)+0xd3>
c0010859:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010860:	75 19                	jne    c001087b <VgaText::putchar(char)+0xd3>
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	53                   	push   ebx
c0010866:	e8 d9 fe ff ff       	call   c0010744 <VgaText::clearScreen()>
c001086b:	83 c4 0c             	add    esp,0xc
c001086e:	6a 00                	push   0x0
c0010870:	6a 00                	push   0x0
c0010872:	53                   	push   ebx
c0010873:	e8 ba f7 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010884:	eb 36                	jmp    c00108bc <VgaText::putchar(char)+0x114>
c0010886:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001088c:	83 fa 0e             	cmp    edx,0xe
c001088f:	7f 2b                	jg     c00108bc <VgaText::putchar(char)+0x114>
c0010891:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010894:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001089a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00108a1:	eb 19                	jmp    c00108bc <VgaText::putchar(char)+0x114>
c00108a3:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108a9:	0f be c0             	movsx  eax,al
c00108ac:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108b2:	50                   	push   eax
c00108b3:	53                   	push   ebx
c00108b4:	e8 ab fa ff ff       	call   c0010364 <VgaText::putchar(char, VgaColour, VgaColour)>
c00108b9:	83 c4 10             	add    esp,0x10
c00108bc:	83 c4 14             	add    esp,0x14
c00108bf:	5b                   	pop    ebx
c00108c0:	5e                   	pop    esi
c00108c1:	c3                   	ret    

c00108c2 <VgaText::puts(char const*)>:
c00108c2:	53                   	push   ebx
c00108c3:	83 ec 08             	sub    esp,0x8
c00108c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108ca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108cd:	84 c0                	test   al,al
c00108cf:	74 12                	je     c00108e3 <VgaText::puts(char const*)+0x21>
c00108d1:	43                   	inc    ebx
c00108d2:	51                   	push   ecx
c00108d3:	51                   	push   ecx
c00108d4:	50                   	push   eax
c00108d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d9:	e8 ca fe ff ff       	call   c00107a8 <VgaText::putchar(char)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	eb e7                	jmp    c00108ca <VgaText::puts(char const*)+0x8>
c00108e3:	83 c4 08             	add    esp,0x8
c00108e6:	5b                   	pop    ebx
c00108e7:	c3                   	ret    

c00108e8 <VgaText::putx(unsigned int)>:
c00108e8:	57                   	push   edi
c00108e9:	b9 11 00 00 00       	mov    ecx,0x11
c00108ee:	56                   	push   esi
c00108ef:	be 4e 6e 02 c0       	mov    esi,0xc0026e4e
c00108f4:	53                   	push   ebx
c00108f5:	83 ec 20             	sub    esp,0x20
c00108f8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108fc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010900:	fc                   	cld    
c0010901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010903:	be 08 00 00 00       	mov    esi,0x8
c0010908:	50                   	push   eax
c0010909:	50                   	push   eax
c001090a:	89 d8                	mov    eax,ebx
c001090c:	c1 e3 04             	shl    ebx,0x4
c001090f:	c1 e8 1c             	shr    eax,0x1c
c0010912:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010917:	50                   	push   eax
c0010918:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001091c:	e8 87 fe ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	4e                   	dec    esi
c0010925:	75 e1                	jne    c0010908 <VgaText::putx(unsigned int)+0x20>
c0010927:	83 c4 20             	add    esp,0x20
c001092a:	5b                   	pop    ebx
c001092b:	5e                   	pop    esi
c001092c:	5f                   	pop    edi
c001092d:	c3                   	ret    

c001092e <VgaText::VgaText(char const*)>:
c001092e:	57                   	push   edi
c001092f:	56                   	push   esi
c0010930:	53                   	push   ebx
c0010931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010935:	83 ec 08             	sub    esp,0x8
c0010938:	6a 00                	push   0x0
c001093a:	50                   	push   eax
c001093b:	e8 62 05 00 00       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	ba b4 6e 02 c0       	mov    edx,0xc0026eb4
c0010948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094c:	89 10                	mov    DWORD PTR [eax],edx
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001096a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010979:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010984:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010992:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00109a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ab:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b6:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109bc:	bb 60 a6 02 c0       	mov    ebx,0xc002a660
c00109c1:	b8 08 00 00 00       	mov    eax,0x8
c00109c6:	fc                   	cld    
c00109c7:	89 d7                	mov    edi,edx
c00109c9:	89 de                	mov    esi,ebx
c00109cb:	89 c1                	mov    ecx,eax
c00109cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d3:	05 1e 10 00 00       	add    eax,0x101e
c00109d8:	83 ec 08             	sub    esp,0x8
c00109db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109df:	50                   	push   eax
c00109e0:	e8 7f fd fe ff       	call   c0000764 <strcpy>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fa:	83 c0 0c             	add    eax,0xc
c00109fd:	83 ec 04             	sub    esp,0x4
c0010a00:	68 00 0f 00 00       	push   0xf00
c0010a05:	6a 00                	push   0x0
c0010a07:	50                   	push   eax
c0010a08:	e8 b8 fc fe ff       	call   c00006c5 <memset>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	83 ec 04             	sub    esp,0x4
c0010a13:	6a 00                	push   0x0
c0010a15:	6a 07                	push   0x7
c0010a17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1b:	e8 c2 f4 ff ff       	call   c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a20:	83 c4 10             	add    esp,0x10
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	6a 02                	push   0x2
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 49 fa ff ff       	call   c001047a <VgaText::setCursorHeight(int)>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	83 ec 04             	sub    esp,0x4
c0010a37:	6a 00                	push   0x0
c0010a39:	6a 00                	push   0x0
c0010a3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3f:	e8 ee f5 ff ff       	call   c0010032 <VgaText::setCursor(int, int)>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	83 ec 08             	sub    esp,0x8
c0010a4a:	6a 01                	push   0x1
c0010a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a50:	e8 8b f3 ff ff       	call   c000fde0 <VgaText::showCursor(bool)>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	83 ec 08             	sub    esp,0x8
c0010a5b:	6a 01                	push   0x1
c0010a5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a61:	e8 8a f3 ff ff       	call   c000fdf0 <VgaText::disableBlink(bool)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	83 ec 0c             	sub    esp,0xc
c0010a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a70:	e8 cf fc ff ff       	call   c0010744 <VgaText::clearScreen()>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a87:	05 9e 10 00 00       	add    eax,0x109e
c0010a8c:	83 ec 04             	sub    esp,0x4
c0010a8f:	68 96 00 00 00       	push   0x96
c0010a94:	6a 00                	push   0x0
c0010a96:	50                   	push   eax
c0010a97:	e8 29 fc fe ff       	call   c00006c5 <memset>
c0010a9c:	83 c4 10             	add    esp,0x10
c0010a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa3:	05 34 11 00 00       	add    eax,0x1134
c0010aa8:	83 ec 04             	sub    esp,0x4
c0010aab:	68 2c 01 00 00       	push   0x12c
c0010ab0:	6a 00                	push   0x0
c0010ab2:	50                   	push   eax
c0010ab3:	e8 0d fc fe ff       	call   c00006c5 <memset>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	90                   	nop
c0010abc:	5b                   	pop    ebx
c0010abd:	5e                   	pop    esi
c0010abe:	5f                   	pop    edi
c0010abf:	c3                   	ret    

c0010ac0 <VgaText::receiveKey(unsigned char)>:
c0010ac0:	55                   	push   ebp
c0010ac1:	57                   	push   edi
c0010ac2:	56                   	push   esi
c0010ac3:	53                   	push   ebx
c0010ac4:	83 ec 1c             	sub    esp,0x1c
c0010ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010acb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010acf:	84 db                	test   bl,bl
c0010ad1:	0f 84 c9 00 00 00    	je     c0010ba0 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ad7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010add:	80 fb 08             	cmp    bl,0x8
c0010ae0:	75 2c                	jne    c0010b0e <VgaText::receiveKey(unsigned char)+0x4e>
c0010ae2:	83 ec 0c             	sub    esp,0xc
c0010ae5:	57                   	push   edi
c0010ae6:	e8 f7 fb fe ff       	call   c00006e2 <strlen>
c0010aeb:	83 c4 10             	add    esp,0x10
c0010aee:	85 c0                	test   eax,eax
c0010af0:	74 41                	je     c0010b33 <VgaText::receiveKey(unsigned char)+0x73>
c0010af2:	50                   	push   eax
c0010af3:	50                   	push   eax
c0010af4:	6a 08                	push   0x8
c0010af6:	56                   	push   esi
c0010af7:	e8 ac fc ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010afc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aff:	e8 de fb fe ff       	call   c00006e2 <strlen>
c0010b04:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010b0c:	eb 22                	jmp    c0010b30 <VgaText::receiveKey(unsigned char)+0x70>
c0010b0e:	0f be c3             	movsx  eax,bl
c0010b11:	52                   	push   edx
c0010b12:	52                   	push   edx
c0010b13:	50                   	push   eax
c0010b14:	56                   	push   esi
c0010b15:	e8 8e fc ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010b1a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b1e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b23:	59                   	pop    ecx
c0010b24:	5d                   	pop    ebp
c0010b25:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b29:	50                   	push   eax
c0010b2a:	57                   	push   edi
c0010b2b:	e8 eb fc fe ff       	call   c000081b <strcat>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b3a:	75 05                	jne    c0010b41 <VgaText::receiveKey(unsigned char)+0x81>
c0010b3c:	80 fb 0a             	cmp    bl,0xa
c0010b3f:	75 53                	jne    c0010b94 <VgaText::receiveKey(unsigned char)+0xd4>
c0010b41:	83 ec 0c             	sub    esp,0xc
c0010b44:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b4a:	53                   	push   ebx
c0010b4b:	e8 92 fb fe ff       	call   c00006e2 <strlen>
c0010b50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b53:	89 c5                	mov    ebp,eax
c0010b55:	e8 88 fb fe ff       	call   c00006e2 <strlen>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b61:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b66:	76 10                	jbe    c0010b78 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	68 5f 6e 02 c0       	push   0xc0026e5f
c0010b70:	e8 62 7f 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	50                   	push   eax
c0010b79:	50                   	push   eax
c0010b7a:	57                   	push   edi
c0010b7b:	53                   	push   ebx
c0010b7c:	e8 9a fc fe ff       	call   c000081b <strcat>
c0010b81:	83 c4 0c             	add    esp,0xc
c0010b84:	68 96 00 00 00       	push   0x96
c0010b89:	6a 00                	push   0x0
c0010b8b:	57                   	push   edi
c0010b8c:	e8 34 fb fe ff       	call   c00006c5 <memset>
c0010b91:	83 c4 10             	add    esp,0x10
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	56                   	push   esi
c0010b98:	e8 d5 f9 ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	83 c4 1c             	add    esp,0x1c
c0010ba3:	5b                   	pop    ebx
c0010ba4:	5e                   	pop    esi
c0010ba5:	5f                   	pop    edi
c0010ba6:	5d                   	pop    ebp
c0010ba7:	c3                   	ret    

c0010ba8 <VgaText::write(unsigned long long, void*, int*)>:
c0010ba8:	55                   	push   ebp
c0010ba9:	57                   	push   edi
c0010baa:	56                   	push   esi
c0010bab:	53                   	push   ebx
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010bb3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010bb7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bbb:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bc2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bc5:	39 eb                	cmp    ebx,ebp
c0010bc7:	74 13                	je     c0010bdc <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bc9:	43                   	inc    ebx
c0010bca:	50                   	push   eax
c0010bcb:	50                   	push   eax
c0010bcc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bd0:	50                   	push   eax
c0010bd1:	56                   	push   esi
c0010bd2:	e8 d1 fb ff ff       	call   c00107a8 <VgaText::putchar(char)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	eb e9                	jmp    c0010bc5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010be6:	56                   	push   esi
c0010be7:	e8 86 f9 ff ff       	call   c0010572 <VgaText::doUpdate()>
c0010bec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bf0:	89 38                	mov    DWORD PTR [eax],edi
c0010bf2:	83 c4 1c             	add    esp,0x1c
c0010bf5:	31 c0                	xor    eax,eax
c0010bf7:	5b                   	pop    ebx
c0010bf8:	5e                   	pop    esi
c0010bf9:	5f                   	pop    edi
c0010bfa:	5d                   	pop    ebp
c0010bfb:	c3                   	ret    

c0010bfc <newTerminal(char*)>:
c0010bfc:	83 ec 28             	sub    esp,0x28
c0010bff:	68 60 12 00 00       	push   0x1260
c0010c04:	e8 7f 15 00 00       	call   c0012188 <operator new(unsigned long)>
c0010c09:	5a                   	pop    edx
c0010c0a:	59                   	pop    ecx
c0010c0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c0f:	50                   	push   eax
c0010c10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c14:	e8 15 fd ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c0010c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c1d:	83 c4 2c             	add    esp,0x2c
c0010c20:	c3                   	ret    
c0010c21:	90                   	nop

c0010c22 <TSS::TSS()>:
c0010c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c2d:	90                   	nop
c0010c2e:	c3                   	ret    
c0010c2f:	90                   	nop

c0010c30 <TSS::setESP(unsigned long)>:
c0010c30:	55                   	push   ebp
c0010c31:	89 e5                	mov    ebp,esp
c0010c33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c3f:	90                   	nop
c0010c40:	5d                   	pop    ebp
c0010c41:	c3                   	ret    

c0010c42 <TSS::flush()>:
c0010c42:	55                   	push   ebp
c0010c43:	89 e5                	mov    ebp,esp
c0010c45:	83 ec 10             	sub    esp,0x10
c0010c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4d:	83 c8 03             	or     eax,0x3
c0010c50:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c54:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c58:	66 89 d0             	mov    ax,dx
c0010c5b:	0f 00 d8             	ltr    ax
c0010c5e:	90                   	nop
c0010c5f:	c9                   	leave  
c0010c60:	c3                   	ret    
c0010c61:	90                   	nop

c0010c62 <TSS::setup(unsigned long, unsigned long)>:
c0010c62:	55                   	push   ebp
c0010c63:	89 e5                	mov    ebp,esp
c0010c65:	53                   	push   ebx
c0010c66:	83 ec 14             	sub    esp,0x14
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	6a 68                	push   0x68
c0010c6e:	e8 fb e4 ff ff       	call   c000f16e <malloc>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	89 c2                	mov    edx,eax
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 68                	push   0x68
c0010c89:	6a 00                	push   0x0
c0010c8b:	50                   	push   eax
c0010c8c:	e8 34 fa fe ff       	call   c00006c5 <memset>
c0010c91:	83 c4 10             	add    esp,0x10
c0010c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbe:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cca:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cee:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfa:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d06:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010d09:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010d15:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d1e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d28:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d2b:	e8 c5 44 01 00       	call   c00251f5 <CPU::readCR3()>
c0010d30:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d39:	83 ec 08             	sub    esp,0x8
c0010d3c:	50                   	push   eax
c0010d3d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d40:	50                   	push   eax
c0010d41:	e8 fe db ff ff       	call   c000e944 <GDTEntry::setBase(unsigned int)>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	83 ec 08             	sub    esp,0x8
c0010d4c:	6a 68                	push   0x68
c0010d4e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d51:	50                   	push   eax
c0010d52:	e8 09 dc ff ff       	call   c000e960 <GDTEntry::setLimit(unsigned int)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d5e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d61:	83 e0 0f             	and    eax,0xf
c0010d64:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d67:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d6a:	83 c8 40             	or     eax,0x40
c0010d6d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d70:	e8 df 6b 00 00       	call   c0017954 <CPU::current()>
c0010d75:	05 78 01 00 00       	add    eax,0x178
c0010d7a:	83 ec 04             	sub    esp,0x4
c0010d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d83:	50                   	push   eax
c0010d84:	e8 0b dc ff ff       	call   c000e994 <GDT::addEntry(GDTEntry)>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	89 c2                	mov    edx,eax
c0010d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d91:	89 10                	mov    DWORD PTR [eax],edx
c0010d93:	e8 bc 6b 00 00       	call   c0017954 <CPU::current()>
c0010d98:	05 78 01 00 00       	add    eax,0x178
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	50                   	push   eax
c0010da1:	e8 32 dc ff ff       	call   c000e9d8 <GDT::flush()>
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dae:	83 ec 08             	sub    esp,0x8
c0010db1:	50                   	push   eax
c0010db2:	68 c8 6e 02 c0       	push   0xc0026ec8
c0010db7:	e8 bb 14 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0010dbc:	83 c4 10             	add    esp,0x10
c0010dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dc4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010dc7:	c9                   	leave  
c0010dc8:	c3                   	ret    
c0010dc9:	90                   	nop

c0010dca <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dd5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010dda:	75 08                	jne    c0010de4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010ddc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010de2:	eb 38                	jmp    c0010e1c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010de4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010de9:	75 17                	jne    c0010e02 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010df3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010df9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010e02:	89 c1                	mov    ecx,eax
c0010e04:	83 e1 fd             	and    ecx,0xfffffffd
c0010e07:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010e0d:	74 cd                	je     c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010e0f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e14:	83 e0 ef             	and    eax,0xffffffef
c0010e17:	83 f8 08             	cmp    eax,0x8
c0010e1a:	76 c0                	jbe    c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010e1c:	31 c0                	xor    eax,eax
c0010e1e:	c3                   	ret    
c0010e1f:	90                   	nop

c0010e20 <ReservedFilename::isAtty()>:
c0010e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e27:	31 c0                	xor    eax,eax
c0010e29:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e2f:	74 09                	je     c0010e3a <ReservedFilename::isAtty()+0x1a>
c0010e31:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e37:	0f 94 c0             	sete   al
c0010e3a:	c3                   	ret    
c0010e3b:	90                   	nop

c0010e3c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e4b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e50:	75 08                	jne    c0010e5a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e52:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e58:	eb 3d                	jmp    c0010e97 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e5f:	75 17                	jne    c0010e78 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e69:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e75:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e78:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e7d:	75 04                	jne    c0010e83 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e7f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e81:	eb 14                	jmp    c0010e97 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e83:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e88:	74 c8                	je     c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e8a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e8f:	83 e0 ef             	and    eax,0xffffffef
c0010e92:	83 f8 08             	cmp    eax,0x8
c0010e95:	76 bb                	jbe    c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e97:	31 c0                	xor    eax,eax
c0010e99:	c3                   	ret    

c0010e9a <UnixFile::getFileDescriptor()>:
c0010e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea1:	c3                   	ret    

c0010ea2 <UnixFile::UnixFile(int)>:
c0010ea2:	53                   	push   ebx
c0010ea3:	83 ec 18             	sub    esp,0x18
c0010ea6:	ba b4 6f 02 c0       	mov    edx,0xc0026fb4
c0010eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eaf:	89 10                	mov    DWORD PTR [eax],edx
c0010eb1:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010eb9:	0f 8f 4d 01 00 00    	jg     c001100c <UnixFile::UnixFile(int)+0x16a>
c0010ebf:	a1 e0 95 02 c0       	mov    eax,ds:0xc00295e0
c0010ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0010ec7:	89 15 e0 95 02 c0    	mov    DWORD PTR ds:0xc00295e0,edx
c0010ecd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ed1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010edb:	68 18 a7 02 c0       	push   0xc002a718
c0010ee0:	e8 85 43 01 00       	call   c002526a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	a0 14 a7 02 c0       	mov    al,ds:0xc002a714
c0010eed:	83 f0 01             	xor    eax,0x1
c0010ef0:	84 c0                	test   al,al
c0010ef2:	0f 84 15 01 00 00    	je     c001100d <UnixFile::UnixFile(int)+0x16b>
c0010ef8:	c6 05 14 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a714,0x1
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	6a 0c                	push   0xc
c0010f04:	e8 7f 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	89 c3                	mov    ebx,eax
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	68 03 ff ff 0f       	push   0xfffff03
c0010f16:	53                   	push   ebx
c0010f17:	e8 f6 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 1d 0c a7 02 c0    	mov    DWORD PTR ds:0xc002a70c,ebx
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	6a 0c                	push   0xc
c0010f2a:	e8 59 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 01 ff ff 0f       	push   0xfffff01
c0010f3c:	53                   	push   ebx
c0010f3d:	e8 d0 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 1d 10 a7 02 c0    	mov    DWORD PTR ds:0xc002a710,ebx
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	6a 0c                	push   0xc
c0010f50:	e8 33 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 00 ff ff 0f       	push   0xfffff00
c0010f62:	53                   	push   ebx
c0010f63:	e8 aa 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 1d 04 a7 02 c0    	mov    DWORD PTR ds:0xc002a704,ebx
c0010f71:	83 ec 0c             	sub    esp,0xc
c0010f74:	6a 0c                	push   0xc
c0010f76:	e8 0d 12 00 00       	call   c0012188 <operator new(unsigned long)>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	89 c3                	mov    ebx,eax
c0010f80:	83 ec 08             	sub    esp,0x8
c0010f83:	68 02 ff ff 0f       	push   0xfffff02
c0010f88:	53                   	push   ebx
c0010f89:	e8 84 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	89 1d 08 a7 02 c0    	mov    DWORD PTR ds:0xc002a708,ebx
c0010f97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f9f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010fa4:	7f 67                	jg     c001100d <UnixFile::UnixFile(int)+0x16b>
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	6a 0c                	push   0xc
c0010fab:	e8 d8 11 00 00       	call   c0012188 <operator new(unsigned long)>
c0010fb0:	83 c4 10             	add    esp,0x10
c0010fb3:	89 c3                	mov    ebx,eax
c0010fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb9:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010fbe:	83 ec 08             	sub    esp,0x8
c0010fc1:	50                   	push   eax
c0010fc2:	53                   	push   ebx
c0010fc3:	e8 4a 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fcf:	89 1c 85 e0 a6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5920],ebx
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	6a 0c                	push   0xc
c0010fdb:	e8 a8 11 00 00       	call   c0012188 <operator new(unsigned long)>
c0010fe0:	83 c4 10             	add    esp,0x10
c0010fe3:	89 c3                	mov    ebx,eax
c0010fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fe9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fee:	83 ec 08             	sub    esp,0x8
c0010ff1:	50                   	push   eax
c0010ff2:	53                   	push   ebx
c0010ff3:	e8 1a 00 00 00       	call   c0011012 <ReservedFilename::ReservedFilename(int)>
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fff:	89 1c 85 a0 a6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5960],ebx
c0011006:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001100a:	eb 93                	jmp    c0010f9f <UnixFile::UnixFile(int)+0xfd>
c001100c:	90                   	nop
c001100d:	83 c4 18             	add    esp,0x18
c0011010:	5b                   	pop    ebx
c0011011:	c3                   	ret    

c0011012 <ReservedFilename::ReservedFilename(int)>:
c0011012:	83 ec 0c             	sub    esp,0xc
c0011015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011019:	83 ec 08             	sub    esp,0x8
c001101c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011020:	50                   	push   eax
c0011021:	e8 7c fe ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	ba d0 6f 02 c0       	mov    edx,0xc0026fd0
c001102e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011032:	89 10                	mov    DWORD PTR [eax],edx
c0011034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011038:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001103c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001103f:	90                   	nop
c0011040:	83 c4 0c             	add    esp,0xc
c0011043:	c3                   	ret    

c0011044 <UnixFile::~UnixFile()>:
c0011044:	83 ec 1c             	sub    esp,0x1c
c0011047:	ba b4 6f 02 c0       	mov    edx,0xc0026fb4
c001104c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011050:	89 10                	mov    DWORD PTR [eax],edx
c0011052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011059:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001105e:	7f 73                	jg     c00110d3 <UnixFile::~UnixFile()+0x8f>
c0011060:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011068:	83 ec 0c             	sub    esp,0xc
c001106b:	68 18 a7 02 c0       	push   0xc002a718
c0011070:	e8 c9 42 01 00       	call   c002533e <LinkedList<UnixFile>::getFirstElement()>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001107c:	83 ec 0c             	sub    esp,0xc
c001107f:	68 18 a7 02 c0       	push   0xc002a718
c0011084:	e8 bd 42 01 00       	call   c0025346 <LinkedList<UnixFile>::removeFirst()>
c0011089:	83 c4 10             	add    esp,0x10
c001108c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011090:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011094:	74 40                	je     c00110d6 <UnixFile::~UnixFile()+0x92>
c0011096:	83 ec 08             	sub    esp,0x8
c0011099:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001109d:	68 18 a7 02 c0       	push   0xc002a718
c00110a2:	e8 c3 41 01 00       	call   c002526a <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110ae:	8d 50 01             	lea    edx,[eax+0x1]
c00110b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00110b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00110ba:	0f 94 c0             	sete   al
c00110bd:	84 c0                	test   al,al
c00110bf:	74 a7                	je     c0011068 <UnixFile::~UnixFile()+0x24>
c00110c1:	83 ec 0c             	sub    esp,0xc
c00110c4:	68 8c 6f 02 c0       	push   0xc0026f8c
c00110c9:	e8 09 7a 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c00110ce:	83 c4 10             	add    esp,0x10
c00110d1:	eb 95                	jmp    c0011068 <UnixFile::~UnixFile()+0x24>
c00110d3:	90                   	nop
c00110d4:	eb 01                	jmp    c00110d7 <UnixFile::~UnixFile()+0x93>
c00110d6:	90                   	nop
c00110d7:	90                   	nop
c00110d8:	83 c4 1c             	add    esp,0x1c
c00110db:	c3                   	ret    

c00110dc <UnixFile::~UnixFile()>:
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e6:	e8 59 ff ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	83 ec 08             	sub    esp,0x8
c00110f1:	6a 0c                	push   0xc
c00110f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f7:	e8 9b 10 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c00110fc:	83 c4 10             	add    esp,0x10
c00110ff:	83 c4 0c             	add    esp,0xc
c0011102:	c3                   	ret    
c0011103:	90                   	nop

c0011104 <ReservedFilename::~ReservedFilename()>:
c0011104:	83 ec 0c             	sub    esp,0xc
c0011107:	ba d0 6f 02 c0       	mov    edx,0xc0026fd0
c001110c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011110:	89 10                	mov    DWORD PTR [eax],edx
c0011112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	50                   	push   eax
c001111a:	e8 25 ff ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	90                   	nop
c0011123:	83 c4 0c             	add    esp,0xc
c0011126:	c3                   	ret    
c0011127:	90                   	nop

c0011128 <ReservedFilename::~ReservedFilename()>:
c0011128:	83 ec 0c             	sub    esp,0xc
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011132:	e8 cd ff ff ff       	call   c0011104 <ReservedFilename::~ReservedFilename()>
c0011137:	83 c4 10             	add    esp,0x10
c001113a:	83 ec 08             	sub    esp,0x8
c001113d:	6a 0c                	push   0xc
c001113f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011143:	e8 4f 10 00 00       	call   c0012197 <operator delete(void*, unsigned long)>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	83 c4 0c             	add    esp,0xc
c001114e:	c3                   	ret    

c001114f <getFromFileDescriptor(int)>:
c001114f:	53                   	push   ebx
c0011150:	83 ec 08             	sub    esp,0x8
c0011153:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011157:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001115d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011163:	7f 2c                	jg     c0011191 <getFromFileDescriptor(int)+0x42>
c0011165:	83 ec 0c             	sub    esp,0xc
c0011168:	68 18 a7 02 c0       	push   0xc002a718
c001116d:	e8 cc 41 01 00       	call   c002533e <LinkedList<UnixFile>::getFirstElement()>
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	85 c0                	test   eax,eax
c0011177:	75 04                	jne    c001117d <getFromFileDescriptor(int)+0x2e>
c0011179:	31 c0                	xor    eax,eax
c001117b:	eb 6e                	jmp    c00111eb <getFromFileDescriptor(int)+0x9c>
c001117d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011180:	74 69                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c0011182:	52                   	push   edx
c0011183:	52                   	push   edx
c0011184:	50                   	push   eax
c0011185:	68 18 a7 02 c0       	push   0xc002a718
c001118a:	e8 59 42 01 00       	call   c00253e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001118f:	eb e1                	jmp    c0011172 <getFromFileDescriptor(int)+0x23>
c0011191:	a1 0c a7 02 c0       	mov    eax,ds:0xc002a70c
c0011196:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001119c:	74 4d                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c001119e:	a1 10 a7 02 c0       	mov    eax,ds:0xc002a710
c00111a3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00111a9:	74 40                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111ab:	a1 08 a7 02 c0       	mov    eax,ds:0xc002a708
c00111b0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00111b6:	74 33                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111b8:	a1 04 a7 02 c0       	mov    eax,ds:0xc002a704
c00111bd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00111c3:	74 26                	je     c00111eb <getFromFileDescriptor(int)+0x9c>
c00111c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111cb:	83 f8 08             	cmp    eax,0x8
c00111ce:	77 09                	ja     c00111d9 <getFromFileDescriptor(int)+0x8a>
c00111d0:	8b 04 85 e0 a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5920]
c00111d7:	eb 12                	jmp    c00111eb <getFromFileDescriptor(int)+0x9c>
c00111d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111df:	83 fb 08             	cmp    ebx,0x8
c00111e2:	77 95                	ja     c0011179 <getFromFileDescriptor(int)+0x2a>
c00111e4:	8b 04 9d a0 a6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5960]
c00111eb:	83 c4 08             	add    esp,0x8
c00111ee:	5b                   	pop    ebx
c00111ef:	c3                   	ret    

c00111f0 <__static_initialization_and_destruction_0(int, int)>:
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111f8:	75 34                	jne    c001122e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011202:	75 2a                	jne    c001122e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	68 18 a7 02 c0       	push   0xc002a718
c001120c:	e8 01 40 01 00       	call   c0025212 <LinkedList<UnixFile>::LinkedList()>
c0011211:	83 c4 10             	add    esp,0x10
c0011214:	83 ec 04             	sub    esp,0x4
c0011217:	68 58 95 02 c0       	push   0xc0029558
c001121c:	68 18 a7 02 c0       	push   0xc002a718
c0011221:	68 10 52 02 c0       	push   0xc0025210
c0011226:	e8 e8 0e 00 00       	call   c0012113 <__cxa_atexit>
c001122b:	83 c4 10             	add    esp,0x10
c001122e:	90                   	nop
c001122f:	83 c4 0c             	add    esp,0xc
c0011232:	c3                   	ret    

c0011233 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011233:	83 ec 0c             	sub    esp,0xc
c0011236:	83 ec 08             	sub    esp,0x8
c0011239:	68 ff ff 00 00       	push   0xffff
c001123e:	6a 01                	push   0x1
c0011240:	e8 ab ff ff ff       	call   c00111f0 <__static_initialization_and_destruction_0(int, int)>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	83 c4 0c             	add    esp,0xc
c001124b:	c3                   	ret    

c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001124c:	53                   	push   ebx
c001124d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011251:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011255:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001125b:	89 c8                	mov    eax,ecx
c001125d:	d1 e8                	shr    eax,1
c001125f:	03 05 e8 95 02 c0    	add    eax,DWORD PTR ds:0xc00295e8
c0011265:	83 e1 01             	and    ecx,0x1
c0011268:	8a 10                	mov    dl,BYTE PTR [eax]
c001126a:	75 09                	jne    c0011275 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001126c:	83 e2 f0             	and    edx,0xfffffff0
c001126f:	09 da                	or     edx,ebx
c0011271:	88 10                	mov    BYTE PTR [eax],dl
c0011273:	5b                   	pop    ebx
c0011274:	c3                   	ret    
c0011275:	c1 e3 04             	shl    ebx,0x4
c0011278:	83 e2 0f             	and    edx,0xf
c001127b:	09 da                	or     edx,ebx
c001127d:	88 10                	mov    BYTE PTR [eax],dl
c001127f:	5b                   	pop    ebx
c0011280:	c3                   	ret    

c0011281 <Virt::getPageState(unsigned long)>:
c0011281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011285:	8b 0d e8 95 02 c0    	mov    ecx,DWORD PTR ds:0xc00295e8
c001128b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011291:	89 d0                	mov    eax,edx
c0011293:	d1 e8                	shr    eax,1
c0011295:	83 e2 01             	and    edx,0x1
c0011298:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001129b:	75 04                	jne    c00112a1 <Virt::getPageState(unsigned long)+0x20>
c001129d:	83 e0 0f             	and    eax,0xf
c00112a0:	c3                   	ret    
c00112a1:	c0 e8 04             	shr    al,0x4
c00112a4:	c3                   	ret    

c00112a5 <Virt::allocateKernelVirtualPages(int)>:
c00112a5:	55                   	push   ebp
c00112a6:	31 ed                	xor    ebp,ebp
c00112a8:	57                   	push   edi
c00112a9:	56                   	push   esi
c00112aa:	53                   	push   ebx
c00112ab:	31 db                	xor    ebx,ebx
c00112ad:	83 ec 1c             	sub    esp,0x1c
c00112b0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112b4:	8b 3d e4 95 02 c0    	mov    edi,DWORD PTR ds:0xc00295e4
c00112ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00112bf:	57                   	push   edi
c00112c0:	e8 bc ff ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c00112c5:	5a                   	pop    edx
c00112c6:	84 c0                	test   al,al
c00112c8:	75 3a                	jne    c0011304 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112ca:	85 db                	test   ebx,ebx
c00112cc:	75 02                	jne    c00112d0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112ce:	89 fd                	mov    ebp,edi
c00112d0:	43                   	inc    ebx
c00112d1:	39 f3                	cmp    ebx,esi
c00112d3:	74 5a                	je     c001132f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112d5:	47                   	inc    edi
c00112d6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112dc:	76 31                	jbe    c001130f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112de:	c7 05 e4 95 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00295e4,0xc8000
c00112e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112ed:	75 28                	jne    c0011317 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112ef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112f4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112f9:	57                   	push   edi
c00112fa:	e8 82 ff ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c00112ff:	5a                   	pop    edx
c0011300:	84 c0                	test   al,al
c0011302:	74 c6                	je     c00112ca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011304:	31 db                	xor    ebx,ebx
c0011306:	47                   	inc    edi
c0011307:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001130d:	77 cf                	ja     c00112de <Virt::allocateKernelVirtualPages(int)+0x39>
c001130f:	89 3d e4 95 02 c0    	mov    DWORD PTR ds:0xc00295e4,edi
c0011315:	eb a8                	jmp    c00112bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	68 e4 6f 02 c0       	push   0xc0026fe4
c001131f:	e8 b3 77 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011324:	8b 3d e4 95 02 c0    	mov    edi,DWORD PTR ds:0xc00295e4
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	eb 90                	jmp    c00112bf <Virt::allocateKernelVirtualPages(int)+0x1a>
c001132f:	89 2d e4 95 02 c0    	mov    DWORD PTR ds:0xc00295e4,ebp
c0011335:	4b                   	dec    ebx
c0011336:	74 5f                	je     c0011397 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011338:	85 f6                	test   esi,esi
c001133a:	74 3d                	je     c0011379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001133c:	89 e8                	mov    eax,ebp
c001133e:	31 db                	xor    ebx,ebx
c0011340:	8d 7e ff             	lea    edi,[esi-0x1]
c0011343:	eb 14                	jmp    c0011359 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011345:	6a 01                	push   0x1
c0011347:	43                   	inc    ebx
c0011348:	50                   	push   eax
c0011349:	e8 fe fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134e:	58                   	pop    eax
c001134f:	39 f3                	cmp    ebx,esi
c0011351:	5a                   	pop    edx
c0011352:	74 25                	je     c0011379 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011354:	a1 e4 95 02 c0       	mov    eax,ds:0xc00295e4
c0011359:	8d 50 01             	lea    edx,[eax+0x1]
c001135c:	85 db                	test   ebx,ebx
c001135e:	89 15 e4 95 02 c0    	mov    DWORD PTR ds:0xc00295e4,edx
c0011364:	74 20                	je     c0011386 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011366:	39 df                	cmp    edi,ebx
c0011368:	75 db                	jne    c0011345 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001136a:	6a 03                	push   0x3
c001136c:	43                   	inc    ebx
c001136d:	50                   	push   eax
c001136e:	e8 d9 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011373:	59                   	pop    ecx
c0011374:	39 f3                	cmp    ebx,esi
c0011376:	58                   	pop    eax
c0011377:	75 db                	jne    c0011354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011379:	83 c4 1c             	add    esp,0x1c
c001137c:	89 e8                	mov    eax,ebp
c001137e:	5b                   	pop    ebx
c001137f:	c1 e0 0c             	shl    eax,0xc
c0011382:	5e                   	pop    esi
c0011383:	5f                   	pop    edi
c0011384:	5d                   	pop    ebp
c0011385:	c3                   	ret    
c0011386:	6a 02                	push   0x2
c0011388:	bb 01 00 00 00       	mov    ebx,0x1
c001138d:	50                   	push   eax
c001138e:	e8 b9 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011393:	58                   	pop    eax
c0011394:	5a                   	pop    edx
c0011395:	eb bd                	jmp    c0011354 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011397:	6a 04                	push   0x4
c0011399:	8d 45 01             	lea    eax,[ebp+0x1]
c001139c:	55                   	push   ebp
c001139d:	a3 e4 95 02 c0       	mov    ds:0xc00295e4,eax
c00113a2:	e8 a5 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a7:	59                   	pop    ecx
c00113a8:	89 e8                	mov    eax,ebp
c00113aa:	5b                   	pop    ebx
c00113ab:	c1 e0 0c             	shl    eax,0xc
c00113ae:	83 c4 1c             	add    esp,0x1c
c00113b1:	5b                   	pop    ebx
c00113b2:	5e                   	pop    esi
c00113b3:	5f                   	pop    edi
c00113b4:	5d                   	pop    ebp
c00113b5:	c3                   	ret    

c00113b6 <Virt::virtualMemorySetup()>:
c00113b6:	53                   	push   ebx
c00113b7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113bc:	83 ec 08             	sub    esp,0x8
c00113bf:	6a 0f                	push   0xf
c00113c1:	53                   	push   ebx
c00113c2:	43                   	inc    ebx
c00113c3:	e8 84 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c8:	59                   	pop    ecx
c00113c9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113cf:	58                   	pop    eax
c00113d0:	75 ed                	jne    c00113bf <Virt::virtualMemorySetup()+0x9>
c00113d2:	83 ec 08             	sub    esp,0x8
c00113d5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113da:	68 00 00 00 c8       	push   0xc8000000
c00113df:	68 6b 71 02 c0       	push   0xc002716b
c00113e4:	e8 8e 0e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00113e9:	58                   	pop    eax
c00113ea:	5a                   	pop    edx
c00113eb:	68 00 f0 ff ef       	push   0xeffff000
c00113f0:	68 7f 71 02 c0       	push   0xc002717f
c00113f5:	e8 7d 0e 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00113fa:	83 c4 10             	add    esp,0x10
c00113fd:	83 ec 08             	sub    esp,0x8
c0011400:	6a 00                	push   0x0
c0011402:	53                   	push   ebx
c0011403:	43                   	inc    ebx
c0011404:	e8 43 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011412:	75 e9                	jne    c00113fd <Virt::virtualMemorySetup()+0x47>
c0011414:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011419:	83 ec 08             	sub    esp,0x8
c001141c:	6a 0f                	push   0xf
c001141e:	53                   	push   ebx
c001141f:	43                   	inc    ebx
c0011420:	e8 27 fe ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001142e:	75 e9                	jne    c0011419 <Virt::virtualMemorySetup()+0x63>
c0011430:	83 c4 08             	add    esp,0x8
c0011433:	5b                   	pop    ebx
c0011434:	c3                   	ret    

c0011435 <Virt::getAKernelVAS()>:
c0011435:	a1 24 a7 02 c0       	mov    eax,ds:0xc002a724
c001143a:	c3                   	ret    

c001143b <Virt::setupPageSwapping(int)>:
c001143b:	57                   	push   edi
c001143c:	56                   	push   esi
c001143d:	53                   	push   ebx
c001143e:	83 ec 1c             	sub    esp,0x1c
c0011441:	68 14 01 00 00       	push   0x114
c0011446:	e8 3d 0d 00 00       	call   c0012188 <operator new(unsigned long)>
c001144b:	83 c4 0c             	add    esp,0xc
c001144e:	89 c6                	mov    esi,eax
c0011450:	ff 35 54 ba 02 c0    	push   DWORD PTR ds:0xc002ba54
c0011456:	68 93 71 02 c0       	push   0xc0027193
c001145b:	50                   	push   eax
c001145c:	e8 45 13 00 00       	call   c00127a6 <File::File(char const*, Process*)>
c0011461:	89 34 24             	mov    DWORD PTR [esp],esi
c0011464:	e8 19 15 00 00       	call   c0012982 <File::unlink()>
c0011469:	58                   	pop    eax
c001146a:	5a                   	pop    edx
c001146b:	6a 12                	push   0x12
c001146d:	56                   	push   esi
c001146e:	e8 97 13 00 00       	call   c001280a <File::open(FileOpenMode)>
c0011473:	83 c4 10             	add    esp,0x10
c0011476:	85 c0                	test   eax,eax
c0011478:	0f 85 bf 00 00 00    	jne    c001153d <Virt::setupPageSwapping(int)+0x102>
c001147e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011482:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001148a:	c1 e3 08             	shl    ebx,0x8
c001148d:	83 ec 0c             	sub    esp,0xc
c0011490:	68 00 00 01 00       	push   0x10000
c0011495:	e8 d4 dc ff ff       	call   c000f16e <malloc>
c001149a:	83 c4 0c             	add    esp,0xc
c001149d:	89 c7                	mov    edi,eax
c001149f:	68 00 00 01 00       	push   0x10000
c00114a4:	6a 00                	push   0x0
c00114a6:	50                   	push   eax
c00114a7:	e8 19 f2 fe ff       	call   c00006c5 <memset>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	85 db                	test   ebx,ebx
c00114b1:	79 03                	jns    c00114b6 <Virt::setupPageSwapping(int)+0x7b>
c00114b3:	83 c3 0f             	add    ebx,0xf
c00114b6:	c1 fb 04             	sar    ebx,0x4
c00114b9:	4b                   	dec    ebx
c00114ba:	83 fb ff             	cmp    ebx,0xffffffff
c00114bd:	74 4b                	je     c001150a <Virt::setupPageSwapping(int)+0xcf>
c00114bf:	83 ec 0c             	sub    esp,0xc
c00114c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114c8:	52                   	push   edx
c00114c9:	57                   	push   edi
c00114ca:	6a 00                	push   0x0
c00114cc:	68 00 00 01 00       	push   0x10000
c00114d1:	56                   	push   esi
c00114d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114d5:	83 c4 20             	add    esp,0x20
c00114d8:	85 c0                	test   eax,eax
c00114da:	75 4e                	jne    c001152a <Virt::setupPageSwapping(int)+0xef>
c00114dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114e0:	3d 00 00 01 00       	cmp    eax,0x10000
c00114e5:	74 d2                	je     c00114b9 <Virt::setupPageSwapping(int)+0x7e>
c00114e7:	83 ec 08             	sub    esp,0x8
c00114ea:	4b                   	dec    ebx
c00114eb:	50                   	push   eax
c00114ec:	68 e6 71 02 c0       	push   0xc00271e6
c00114f1:	e8 81 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00114f6:	c7 04 24 ef 71 02 c0 	mov    DWORD PTR [esp],0xc00271ef
c00114fd:	e8 d5 75 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	83 fb ff             	cmp    ebx,0xffffffff
c0011508:	75 b5                	jne    c00114bf <Virt::setupPageSwapping(int)+0x84>
c001150a:	83 ec 0c             	sub    esp,0xc
c001150d:	56                   	push   esi
c001150e:	e8 55 13 00 00       	call   c0012868 <File::close()>
c0011513:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011516:	e8 73 dc ff ff       	call   c000f18e <rfree>
c001151b:	89 34 24             	mov    DWORD PTR [esp],esi
c001151e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011520:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011523:	83 c4 20             	add    esp,0x20
c0011526:	5b                   	pop    ebx
c0011527:	5e                   	pop    esi
c0011528:	5f                   	pop    edi
c0011529:	c3                   	ret    
c001152a:	83 ec 08             	sub    esp,0x8
c001152d:	50                   	push   eax
c001152e:	68 ce 71 02 c0       	push   0xc00271ce
c0011533:	e8 3f 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0011538:	83 c4 10             	add    esp,0x10
c001153b:	eb 9f                	jmp    c00114dc <Virt::setupPageSwapping(int)+0xa1>
c001153d:	83 ec 08             	sub    esp,0x8
c0011540:	50                   	push   eax
c0011541:	68 aa 71 02 c0       	push   0xc00271aa
c0011546:	e8 2c 0d 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001154b:	c7 04 24 b3 71 02 c0 	mov    DWORD PTR [esp],0xc00271b3
c0011552:	e8 80 75 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011557:	83 c4 10             	add    esp,0x10
c001155a:	e9 1f ff ff ff       	jmp    c001147e <Virt::setupPageSwapping(int)+0x43>
c001155f:	90                   	nop

c0011560 <VAS::VAS()>:
c0011560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011564:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001156b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001156f:	a3 24 a7 02 c0       	mov    ds:0xc002a724,eax
c0011574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011578:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001157c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011580:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011587:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001158e:	90                   	nop
c001158f:	c3                   	ret    

c0011590 <VAS::VAS(VAS*)>:
c0011590:	83 ec 0c             	sub    esp,0xc
c0011593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011597:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001159e:	83 ec 0c             	sub    esp,0xc
c00115a1:	68 04 70 02 c0       	push   0xc0027004
c00115a6:	e8 2c 75 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	90                   	nop
c00115af:	83 c4 0c             	add    esp,0xc
c00115b2:	c3                   	ret    
c00115b3:	90                   	nop

c00115b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115b8:	89 c2                	mov    edx,eax
c00115ba:	c1 e8 0a             	shr    eax,0xa
c00115bd:	c1 ea 16             	shr    edx,0x16
c00115c0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115c5:	19 c9                	sbb    ecx,ecx
c00115c7:	c1 e2 0c             	shl    edx,0xc
c00115ca:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115d0:	25 fc 0f 00 00       	and    eax,0xffc
c00115d5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115dc:	01 d0                	add    eax,edx
c00115de:	c3                   	ret    
c00115df:	90                   	nop

c00115e0 <VAS::getPageTableEntry(unsigned long)>:
c00115e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115e4:	89 ca                	mov    edx,ecx
c00115e6:	c1 e9 0a             	shr    ecx,0xa
c00115e9:	c1 ea 16             	shr    edx,0x16
c00115ec:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115f2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115f8:	c1 e0 0c             	shl    eax,0xc
c00115fb:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115fe:	c3                   	ret    

c00115ff <Virt::freeKernelVirtualPages(unsigned long)>:
c00115ff:	57                   	push   edi
c0011600:	56                   	push   esi
c0011601:	be 01 00 00 00       	mov    esi,0x1
c0011606:	53                   	push   ebx
c0011607:	83 ec 10             	sub    esp,0x10
c001160a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001160e:	c1 eb 0c             	shr    ebx,0xc
c0011611:	eb 3f                	jmp    c0011652 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011613:	e8 1d fe ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011618:	83 ec 08             	sub    esp,0x8
c001161b:	57                   	push   edi
c001161c:	50                   	push   eax
c001161d:	e8 be ff ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	8b 00                	mov    eax,DWORD PTR [eax]
c0011627:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001162b:	f6 c4 04             	test   ah,0x4
c001162e:	75 5f                	jne    c001168f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011630:	80 fa 04             	cmp    dl,0x4
c0011633:	74 78                	je     c00116ad <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011635:	80 fa 02             	cmp    dl,0x2
c0011638:	0f 84 88 00 00 00    	je     c00116c6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001163e:	80 fa 03             	cmp    dl,0x3
c0011641:	0f 84 ad 00 00 00    	je     c00116f4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011647:	fe ca                	dec    dl
c0011649:	0f 84 92 00 00 00    	je     c00116e1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001164f:	43                   	inc    ebx
c0011650:	31 f6                	xor    esi,esi
c0011652:	53                   	push   ebx
c0011653:	e8 29 fc ff ff       	call   c0011281 <Virt::getPageState(unsigned long)>
c0011658:	5f                   	pop    edi
c0011659:	89 df                	mov    edi,ebx
c001165b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001165f:	c1 e7 0c             	shl    edi,0xc
c0011662:	84 c0                	test   al,al
c0011664:	75 ad                	jne    c0011613 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	68 f5 71 02 c0       	push   0xc00271f5
c001166e:	e8 64 74 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011673:	e8 bd fd ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011678:	5a                   	pop    edx
c0011679:	59                   	pop    ecx
c001167a:	57                   	push   edi
c001167b:	50                   	push   eax
c001167c:	e8 5f ff ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	8b 00                	mov    eax,DWORD PTR [eax]
c0011686:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168a:	f6 c4 04             	test   ah,0x4
c001168d:	74 c0                	je     c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001168f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011693:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011698:	83 ec 0c             	sub    esp,0xc
c001169b:	50                   	push   eax
c001169c:	e8 ed df ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116a8:	80 fa 04             	cmp    dl,0x4
c00116ab:	75 88                	jne    c0011635 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116ad:	89 f0                	mov    eax,esi
c00116af:	84 c0                	test   al,al
c00116b1:	75 47                	jne    c00116fa <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116b3:	c7 44 24 20 28 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027028
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	5b                   	pop    ebx
c00116bf:	5e                   	pop    esi
c00116c0:	5f                   	pop    edi
c00116c1:	e9 11 74 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>
c00116c6:	89 f0                	mov    eax,esi
c00116c8:	84 c0                	test   al,al
c00116ca:	75 15                	jne    c00116e1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116cc:	83 ec 0c             	sub    esp,0xc
c00116cf:	68 11 72 02 c0       	push   0xc0027211
c00116d4:	e8 fe 73 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	e9 6e ff ff ff       	jmp    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116e1:	83 ec 08             	sub    esp,0x8
c00116e4:	6a 00                	push   0x0
c00116e6:	53                   	push   ebx
c00116e7:	e8 60 fb ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	e9 5b ff ff ff       	jmp    c001164f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116f4:	89 f0                	mov    eax,esi
c00116f6:	84 c0                	test   al,al
c00116f8:	75 15                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116fa:	83 ec 08             	sub    esp,0x8
c00116fd:	6a 00                	push   0x0
c00116ff:	53                   	push   ebx
c0011700:	e8 47 fb ff ff       	call   c001124c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	83 c4 10             	add    esp,0x10
c001170b:	5b                   	pop    ebx
c001170c:	5e                   	pop    esi
c001170d:	5f                   	pop    edi
c001170e:	c3                   	ret    
c001170f:	c7 44 24 20 2d 72 02 c0 	mov    DWORD PTR [esp+0x20],0xc002722d
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	5b                   	pop    ebx
c001171b:	5e                   	pop    esi
c001171c:	5f                   	pop    edi
c001171d:	e9 b5 73 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>

c0011722 <VAS::freeAllocatedPages(unsigned long)>:
c0011722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011726:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001172a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001172e:	74 09                	je     c0011739 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011730:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011734:	e9 c6 fe ff ff       	jmp    c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011739:	c7 44 24 04 4c 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc002704c
c0011741:	e9 31 0b 00 00       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>

c0011746 <VAS::virtualToPhysical(unsigned long)>:
c0011746:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001174a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001174e:	e8 8d fe ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011753:	5a                   	pop    edx
c0011754:	8b 00                	mov    eax,DWORD PTR [eax]
c0011756:	59                   	pop    ecx
c0011757:	25 00 f0 ff ff       	and    eax,0xfffff000
c001175c:	c3                   	ret    
c001175d:	90                   	nop

c001175e <VAS::reflagRange(unsigned long, int, int, int)>:
c001175e:	55                   	push   ebp
c001175f:	57                   	push   edi
c0011760:	56                   	push   esi
c0011761:	53                   	push   ebx
c0011762:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011766:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001176a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001176e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011772:	85 db                	test   ebx,ebx
c0011774:	7e 22                	jle    c0011798 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011776:	c1 e3 0c             	shl    ebx,0xc
c0011779:	01 f3                	add    ebx,esi
c001177b:	56                   	push   esi
c001177c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011782:	55                   	push   ebp
c0011783:	e8 58 fe ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0011788:	5a                   	pop    edx
c0011789:	59                   	pop    ecx
c001178a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001178c:	21 f9                	and    ecx,edi
c001178e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011792:	39 f3                	cmp    ebx,esi
c0011794:	89 08                	mov    DWORD PTR [eax],ecx
c0011796:	75 e3                	jne    c001177b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011798:	5b                   	pop    ebx
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	5d                   	pop    ebp
c001179c:	c3                   	ret    
c001179d:	90                   	nop

c001179e <VAS::setToWriteCombining(unsigned long, int)>:
c001179e:	83 ec 0c             	sub    esp,0xc
c00117a1:	e8 ae 61 00 00       	call   c0017954 <CPU::current()>
c00117a6:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117ad:	75 04                	jne    c00117b3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117af:	83 c4 0c             	add    esp,0xc
c00117b2:	c3                   	ret    
c00117b3:	83 ec 0c             	sub    esp,0xc
c00117b6:	68 80 00 00 00       	push   0x80
c00117bb:	6a ff                	push   0xffffffff
c00117bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117c9:	e8 90 ff ff ff       	call   c001175e <VAS::reflagRange(unsigned long, int, int, int)>
c00117ce:	83 c4 20             	add    esp,0x20
c00117d1:	83 c4 0c             	add    esp,0xc
c00117d4:	c3                   	ret    
c00117d5:	90                   	nop

c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117d6:	83 ec 0c             	sub    esp,0xc
c00117d9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117ec:	19 c0                	sbb    eax,eax
c00117ee:	83 ca 03             	or     edx,0x3
c00117f1:	83 e0 fc             	and    eax,0xfffffffc
c00117f4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117fb:	e8 f5 39 01 00       	call   c00251f5 <CPU::readCR3()>
c0011800:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011804:	83 c4 0c             	add    esp,0xc
c0011807:	e9 fb 39 01 00       	jmp    c0025207 <CPU::writeCR3(unsigned long)>

c001180c <VAS::~VAS()>:
c001180c:	83 ec 2c             	sub    esp,0x2c
c001180f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011817:	e8 0e a2 00 00       	call   c001ba2a <lockScheduler()>
c001181c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011821:	8b 00                	mov    eax,DWORD PTR [eax]
c0011823:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011826:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182c:	83 ec 04             	sub    esp,0x4
c001182f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011833:	6a 01                	push   0x1
c0011835:	50                   	push   eax
c0011836:	e8 9b ff ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001183b:	83 c4 10             	add    esp,0x10
c001183e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011846:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001184e:	0f 8f d7 00 00 00    	jg     c001192b <VAS::~VAS()+0x11f>
c0011854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011858:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001185b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001185f:	c1 e2 02             	shl    edx,0x2
c0011862:	01 d0                	add    eax,edx
c0011864:	8b 00                	mov    eax,DWORD PTR [eax]
c0011866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	83 e0 01             	and    eax,0x1
c0011871:	0f 84 ab 00 00 00    	je     c0011922 <VAS::~VAS()+0x116>
c0011877:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001187f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011887:	7f 75                	jg     c00118fe <VAS::~VAS()+0xf2>
c0011889:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001188d:	c1 e0 0a             	shl    eax,0xa
c0011890:	89 c2                	mov    edx,eax
c0011892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011896:	01 d0                	add    eax,edx
c0011898:	c1 e0 0c             	shl    eax,0xc
c001189b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001189f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118af:	83 ec 04             	sub    esp,0x4
c00118b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118b6:	6a 01                	push   0x1
c00118b8:	50                   	push   eax
c00118b9:	e8 f6 fc ff ff       	call   c00115b4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118be:	83 c4 10             	add    esp,0x10
c00118c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d3:	25 01 04 00 00       	and    eax,0x401
c00118d8:	3d 01 04 00 00       	cmp    eax,0x401
c00118dd:	75 19                	jne    c00118f8 <VAS::~VAS()+0xec>
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	50                   	push   eax
c00118ec:	e8 9d dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118fc:	eb 81                	jmp    c001187f <VAS::~VAS()+0x73>
c00118fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011902:	25 00 04 00 00       	and    eax,0x400
c0011907:	74 19                	je     c0011922 <VAS::~VAS()+0x116>
c0011909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 73 dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011922:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011926:	e9 1b ff ff ff       	jmp    c0011846 <VAS::~VAS()+0x3a>
c001192b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001192f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011932:	83 ec 0c             	sub    esp,0xc
c0011935:	50                   	push   eax
c0011936:	e8 c4 fc ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011942:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011945:	83 ec 0c             	sub    esp,0xc
c0011948:	50                   	push   eax
c0011949:	e8 40 dd ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011955:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011959:	c1 e0 02             	shl    eax,0x2
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	50                   	push   eax
c0011960:	68 70 70 02 c0       	push   0xc0027070
c0011965:	e8 0d 09 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	e8 ba a0 00 00       	call   c001ba2c <unlockScheduler()>
c0011972:	90                   	nop
c0011973:	83 c4 2c             	add    esp,0x2c
c0011976:	c3                   	ret    
c0011977:	90                   	nop

c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011978:	55                   	push   ebp
c0011979:	57                   	push   edi
c001197a:	56                   	push   esi
c001197b:	53                   	push   ebx
c001197c:	83 ec 1c             	sub    esp,0x1c
c001197f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011983:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011987:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001198d:	77 08                	ja     c0011997 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001198f:	0f 20 d8             	mov    eax,cr3
c0011992:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011995:	75 47                	jne    c00119de <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001199b:	09 d8                	or     eax,ebx
c001199d:	a9 ff 0f 00 00       	test   eax,0xfff
c00119a2:	75 57                	jne    c00119fb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119a4:	89 de                	mov    esi,ebx
c00119a6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00119a9:	c1 ee 16             	shr    esi,0x16
c00119ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119b7:	74 54                	je     c0011a0d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00119b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119bd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119c7:	c1 e6 0c             	shl    esi,0xc
c00119ca:	c1 eb 0a             	shr    ebx,0xa
c00119cd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119d3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119d6:	83 c4 1c             	add    esp,0x1c
c00119d9:	5b                   	pop    ebx
c00119da:	5e                   	pop    esi
c00119db:	5f                   	pop    edi
c00119dc:	5d                   	pop    ebp
c00119dd:	c3                   	ret    
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	68 90 70 02 c0       	push   0xc0027090
c00119e6:	e8 8c 08 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119f2:	09 d8                	or     eax,ebx
c00119f4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119f9:	74 a9                	je     c00119a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	68 f8 70 02 c0       	push   0xc00270f8
c0011a03:	e8 cf 70 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	eb 97                	jmp    c00119a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a11:	e8 02 dd ff ff       	call   c000f718 <Phys::allocatePage()>
c0011a16:	89 c5                	mov    ebp,eax
c0011a18:	e8 18 fa ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a24:	6a 01                	push   0x1
c0011a26:	e8 7a f8 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011a2b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a32:	6a 01                	push   0x1
c0011a34:	50                   	push   eax
c0011a35:	55                   	push   ebp
c0011a36:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a3c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a40:	51                   	push   ecx
c0011a41:	e8 1e 02 00 00       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a46:	83 c4 1c             	add    esp,0x1c
c0011a49:	68 00 10 00 00       	push   0x1000
c0011a4e:	6a 00                	push   0x0
c0011a50:	50                   	push   eax
c0011a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a55:	e8 6b ec fe ff       	call   c00006c5 <memset>
c0011a5a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a5e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a61:	e8 99 fb ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011a66:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a6a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a73:	e9 41 ff ff ff       	jmp    c00119b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a78 <VAS::allocatePages(int, int)>:
c0011a78:	55                   	push   ebp
c0011a79:	57                   	push   edi
c0011a7a:	56                   	push   esi
c0011a7b:	53                   	push   ebx
c0011a7c:	83 ec 1c             	sub    esp,0x1c
c0011a7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a83:	e8 cc 5e 00 00       	call   c0017954 <CPU::current()>
c0011a88:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a8e:	83 e0 01             	and    eax,0x1
c0011a91:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a95:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a99:	0f 85 d7 00 00 00    	jne    c0011b76 <VAS::allocatePages(int, int)+0xfe>
c0011a9f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011aa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aa6:	85 c0                	test   eax,eax
c0011aa8:	0f 84 ac 00 00 00    	je     c0011b5a <VAS::allocatePages(int, int)+0xe2>
c0011aae:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ab2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ab6:	c1 e6 0c             	shl    esi,0xc
c0011ab9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011abd:	85 c0                	test   eax,eax
c0011abf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011ac2:	7e 33                	jle    c0011af7 <VAS::allocatePages(int, int)+0x7f>
c0011ac4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ac8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011acc:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ad2:	e8 41 dc ff ff       	call   c000f718 <Phys::allocatePage()>
c0011ad7:	55                   	push   ebp
c0011ad8:	53                   	push   ebx
c0011ad9:	50                   	push   eax
c0011ada:	57                   	push   edi
c0011adb:	e8 98 fe ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ae0:	83 c4 10             	add    esp,0x10
c0011ae3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ae8:	74 03                	je     c0011aed <VAS::allocatePages(int, int)+0x75>
c0011aea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011af3:	39 de                	cmp    esi,ebx
c0011af5:	75 db                	jne    c0011ad2 <VAS::allocatePages(int, int)+0x5a>
c0011af7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011afc:	74 3f                	je     c0011b3d <VAS::allocatePages(int, int)+0xc5>
c0011afe:	c1 ee 0a             	shr    esi,0xa
c0011b01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b05:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b0b:	c1 eb 0a             	shr    ebx,0xa
c0011b0e:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011b14:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b1a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b20:	39 f3                	cmp    ebx,esi
c0011b22:	77 0d                	ja     c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011b24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b2d:	39 de                	cmp    esi,ebx
c0011b2f:	73 f3                	jae    c0011b24 <VAS::allocatePages(int, int)+0xac>
c0011b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b35:	83 c4 1c             	add    esp,0x1c
c0011b38:	5b                   	pop    ebx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	5d                   	pop    ebp
c0011b3c:	c3                   	ret    
c0011b3d:	e8 b3 36 01 00       	call   c00251f5 <CPU::readCR3()>
c0011b42:	83 ec 0c             	sub    esp,0xc
c0011b45:	50                   	push   eax
c0011b46:	e8 bc 36 01 00       	call   c0025207 <CPU::writeCR3(unsigned long)>
c0011b4b:	83 c4 10             	add    esp,0x10
c0011b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b52:	83 c4 1c             	add    esp,0x1c
c0011b55:	5b                   	pop    ebx
c0011b56:	5e                   	pop    esi
c0011b57:	5f                   	pop    edi
c0011b58:	5d                   	pop    ebp
c0011b59:	c3                   	ret    
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	68 1c 71 02 c0       	push   0xc002711c
c0011b62:	e8 70 6f 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011b67:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	e9 38 ff ff ff       	jmp    c0011aae <VAS::allocatePages(int, int)+0x36>
c0011b76:	83 ec 0c             	sub    esp,0xc
c0011b79:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b7d:	e8 23 f7 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011b82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b86:	83 c4 10             	add    esp,0x10
c0011b89:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b8e:	0f 87 94 00 00 00    	ja     c0011c28 <VAS::allocatePages(int, int)+0x1b0>
c0011b94:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b98:	85 d2                	test   edx,edx
c0011b9a:	7e 3c                	jle    c0011bd8 <VAS::allocatePages(int, int)+0x160>
c0011b9c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ba0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ba4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ba8:	c1 e5 0c             	shl    ebp,0xc
c0011bab:	81 ce 00 04 00 00    	or     esi,0x400
c0011bb1:	01 dd                	add    ebp,ebx
c0011bb3:	e8 60 db ff ff       	call   c000f718 <Phys::allocatePage()>
c0011bb8:	56                   	push   esi
c0011bb9:	53                   	push   ebx
c0011bba:	50                   	push   eax
c0011bbb:	57                   	push   edi
c0011bbc:	e8 b7 fd ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bc1:	83 c4 10             	add    esp,0x10
c0011bc4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc9:	74 03                	je     c0011bce <VAS::allocatePages(int, int)+0x156>
c0011bcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bd4:	39 dd                	cmp    ebp,ebx
c0011bd6:	75 db                	jne    c0011bb3 <VAS::allocatePages(int, int)+0x13b>
c0011bd8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bdd:	0f 84 5a ff ff ff    	je     c0011b3d <VAS::allocatePages(int, int)+0xc5>
c0011be3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011be7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011beb:	89 d3                	mov    ebx,edx
c0011bed:	c1 e0 0c             	shl    eax,0xc
c0011bf0:	c1 eb 0a             	shr    ebx,0xa
c0011bf3:	01 d0                	add    eax,edx
c0011bf5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bfb:	c1 e8 0a             	shr    eax,0xa
c0011bfe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c09:	2d 00 00 40 00       	sub    eax,0x400000
c0011c0e:	39 c3                	cmp    ebx,eax
c0011c10:	0f 87 1b ff ff ff    	ja     c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011c16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c1f:	39 d8                	cmp    eax,ebx
c0011c21:	73 f3                	jae    c0011c16 <VAS::allocatePages(int, int)+0x19e>
c0011c23:	e9 09 ff ff ff       	jmp    c0011b31 <VAS::allocatePages(int, int)+0xb9>
c0011c28:	e8 27 5d 00 00       	call   c0017954 <CPU::current()>
c0011c2d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c34:	0f 84 5a ff ff ff    	je     c0011b94 <VAS::allocatePages(int, int)+0x11c>
c0011c3a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c42:	e9 4d ff ff ff       	jmp    c0011b94 <VAS::allocatePages(int, int)+0x11c>
c0011c47:	90                   	nop

c0011c48 <VAS::setCPUSpecific(unsigned long)>:
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	6a 05                	push   0x5
c0011c4d:	68 00 00 40 c2       	push   0xc2400000
c0011c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c5a:	e8 19 fd ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c5f:	83 c4 1c             	add    esp,0x1c
c0011c62:	c3                   	ret    
c0011c63:	90                   	nop

c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c64:	55                   	push   ebp
c0011c65:	57                   	push   edi
c0011c66:	56                   	push   esi
c0011c67:	53                   	push   ebx
c0011c68:	83 ec 1c             	sub    esp,0x1c
c0011c6b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c6f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c73:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c77:	e8 d8 5c 00 00       	call   c0017954 <CPU::current()>
c0011c7c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c82:	83 e0 01             	and    eax,0x1
c0011c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8d:	85 c0                	test   eax,eax
c0011c8f:	7e 39                	jle    c0011cca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c91:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c95:	89 f3                	mov    ebx,esi
c0011c97:	c1 e0 0c             	shl    eax,0xc
c0011c9a:	01 f0                	add    eax,esi
c0011c9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ca0:	55                   	push   ebp
c0011ca1:	53                   	push   ebx
c0011ca2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ca6:	29 f0                	sub    eax,esi
c0011ca8:	01 d8                	add    eax,ebx
c0011caa:	50                   	push   eax
c0011cab:	57                   	push   edi
c0011cac:	e8 c7 fc ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb1:	83 c4 10             	add    esp,0x10
c0011cb4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cb9:	74 03                	je     c0011cbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011cbb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cbe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cc4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cc8:	75 d6                	jne    c0011ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011cca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ccf:	74 42                	je     c0011d13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cd1:	89 f3                	mov    ebx,esi
c0011cd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd7:	c1 eb 0a             	shr    ebx,0xa
c0011cda:	c1 e0 0c             	shl    eax,0xc
c0011cdd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce3:	01 f0                	add    eax,esi
c0011ce5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ceb:	c1 e8 0a             	shr    eax,0xa
c0011cee:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cf8:	39 c3                	cmp    ebx,eax
c0011cfa:	77 0d                	ja     c0011d09 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cfc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d05:	39 d8                	cmp    eax,ebx
c0011d07:	73 f3                	jae    c0011cfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011d09:	83 c4 1c             	add    esp,0x1c
c0011d0c:	89 f0                	mov    eax,esi
c0011d0e:	5b                   	pop    ebx
c0011d0f:	5e                   	pop    esi
c0011d10:	5f                   	pop    edi
c0011d11:	5d                   	pop    ebp
c0011d12:	c3                   	ret    
c0011d13:	e8 dd 34 01 00       	call   c00251f5 <CPU::readCR3()>
c0011d18:	83 ec 0c             	sub    esp,0xc
c0011d1b:	50                   	push   eax
c0011d1c:	e8 e6 34 01 00       	call   c0025207 <CPU::writeCR3(unsigned long)>
c0011d21:	89 f0                	mov    eax,esi
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	83 c4 1c             	add    esp,0x1c
c0011d29:	5b                   	pop    ebx
c0011d2a:	5e                   	pop    esi
c0011d2b:	5f                   	pop    edi
c0011d2c:	5d                   	pop    ebp
c0011d2d:	c3                   	ret    

c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d2e:	55                   	push   ebp
c0011d2f:	57                   	push   edi
c0011d30:	56                   	push   esi
c0011d31:	53                   	push   ebx
c0011d32:	83 ec 1c             	sub    esp,0x1c
c0011d35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d4a:	75 4a                	jne    c0011d96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d50:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d53:	c1 eb 16             	shr    ebx,0x16
c0011d56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d61:	74 4d                	je     c0011db0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d6b:	c1 e8 0a             	shr    eax,0xa
c0011d6e:	80 fa 01             	cmp    dl,0x1
c0011d71:	19 d2                	sbb    edx,edx
c0011d73:	c1 e3 0c             	shl    ebx,0xc
c0011d76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d80:	25 fc 0f 00 00       	and    eax,0xffc
c0011d85:	01 d8                	add    eax,ebx
c0011d87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d8e:	83 c4 1c             	add    esp,0x1c
c0011d91:	5b                   	pop    ebx
c0011d92:	5e                   	pop    esi
c0011d93:	5f                   	pop    edi
c0011d94:	5d                   	pop    ebp
c0011d95:	c3                   	ret    
c0011d96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	68 48 71 02 c0       	push   0xc0027148
c0011da2:	e8 30 6d 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0011da7:	83 c4 10             	add    esp,0x10
c0011daa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dae:	eb 9c                	jmp    c0011d4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011db0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011db4:	e8 5f d9 ff ff       	call   c000f718 <Phys::allocatePage()>
c0011db9:	89 c5                	mov    ebp,eax
c0011dbb:	e8 75 f6 ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011dc0:	83 ec 0c             	sub    esp,0xc
c0011dc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011dc7:	6a 01                	push   0x1
c0011dc9:	e8 d7 f4 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011dce:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dd5:	6a 01                	push   0x1
c0011dd7:	50                   	push   eax
c0011dd8:	55                   	push   ebp
c0011dd9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ddf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011de3:	51                   	push   ecx
c0011de4:	e8 7b fe ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011de9:	83 c4 1c             	add    esp,0x1c
c0011dec:	68 00 10 00 00       	push   0x1000
c0011df1:	6a 00                	push   0x0
c0011df3:	50                   	push   eax
c0011df4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df8:	e8 c8 e8 fe ff       	call   c00006c5 <memset>
c0011dfd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e01:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e04:	e8 f6 f7 ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c0011e09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e16:	e9 48 ff ff ff       	jmp    c0011d63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011e1b:	90                   	nop

c0011e1c <VAS::VAS(bool)>:
c0011e1c:	53                   	push   ebx
c0011e1d:	83 ec 28             	sub    esp,0x28
c0011e20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e37:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e3b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e3e:	e8 d5 d8 ff ff       	call   c000f718 <Phys::allocatePage()>
c0011e43:	89 c2                	mov    edx,eax
c0011e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e4c:	e8 e4 f5 ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0011e51:	89 c3                	mov    ebx,eax
c0011e53:	83 ec 0c             	sub    esp,0xc
c0011e56:	6a 01                	push   0x1
c0011e58:	e8 48 f4 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 c2                	mov    edx,eax
c0011e62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e69:	83 ec 0c             	sub    esp,0xc
c0011e6c:	6a 03                	push   0x3
c0011e6e:	6a 01                	push   0x1
c0011e70:	52                   	push   edx
c0011e71:	50                   	push   eax
c0011e72:	53                   	push   ebx
c0011e73:	e8 ec fd ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e78:	83 c4 20             	add    esp,0x20
c0011e7b:	89 c2                	mov    edx,eax
c0011e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e8c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e94:	7f 1c                	jg     c0011eb2 <VAS::VAS(bool)+0x96>
c0011e96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ea1:	c1 e2 02             	shl    edx,0x2
c0011ea4:	01 d0                	add    eax,edx
c0011ea6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011eac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eb0:	eb da                	jmp    c0011e8c <VAS::VAS(bool)+0x70>
c0011eb2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eba:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011ec2:	7f 71                	jg     c0011f35 <VAS::VAS(bool)+0x119>
c0011ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec8:	2d 00 02 00 00       	sub    eax,0x200
c0011ecd:	c1 e0 0c             	shl    eax,0xc
c0011ed0:	83 c8 03             	or     eax,0x3
c0011ed3:	89 c3                	mov    ebx,eax
c0011ed5:	e8 7a 5a 00 00       	call   c0017954 <CPU::current()>
c0011eda:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ee0:	83 e0 10             	and    eax,0x10
c0011ee3:	84 c0                	test   al,al
c0011ee5:	74 07                	je     c0011eee <VAS::VAS(bool)+0xd2>
c0011ee7:	b8 00 01 00 00       	mov    eax,0x100
c0011eec:	eb 05                	jmp    c0011ef3 <VAS::VAS(bool)+0xd7>
c0011eee:	b8 00 00 00 00       	mov    eax,0x0
c0011ef3:	09 d8                	or     eax,ebx
c0011ef5:	89 c1                	mov    ecx,eax
c0011ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011efb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011efe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f02:	c1 e2 02             	shl    edx,0x2
c0011f05:	01 d0                	add    eax,edx
c0011f07:	89 ca                	mov    edx,ecx
c0011f09:	89 10                	mov    DWORD PTR [eax],edx
c0011f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f0f:	2d 40 03 00 00       	sub    eax,0x340
c0011f14:	83 f8 7f             	cmp    eax,0x7f
c0011f17:	77 16                	ja     c0011f2f <VAS::VAS(bool)+0x113>
c0011f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f24:	c1 e2 02             	shl    edx,0x2
c0011f27:	01 d0                	add    eax,edx
c0011f29:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f2f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f33:	eb 85                	jmp    c0011eba <VAS::VAS(bool)+0x9e>
c0011f35:	e8 1a 5a 00 00       	call   c0017954 <CPU::current()>
c0011f3a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f40:	83 e0 10             	and    eax,0x10
c0011f43:	84 c0                	test   al,al
c0011f45:	74 07                	je     c0011f4e <VAS::VAS(bool)+0x132>
c0011f47:	b8 03 41 00 00       	mov    eax,0x4103
c0011f4c:	eb 05                	jmp    c0011f53 <VAS::VAS(bool)+0x137>
c0011f4e:	b8 03 40 00 00       	mov    eax,0x4003
c0011f53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f57:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f5a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f60:	89 02                	mov    DWORD PTR [edx],eax
c0011f62:	e8 ed 59 00 00       	call   c0017954 <CPU::current()>
c0011f67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f6d:	83 ec 08             	sub    esp,0x8
c0011f70:	50                   	push   eax
c0011f71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f75:	e8 ce fc ff ff       	call   c0011c48 <VAS::setCPUSpecific(unsigned long)>
c0011f7a:	83 c4 10             	add    esp,0x10
c0011f7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f81:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f84:	e8 cb 59 00 00       	call   c0017954 <CPU::current()>
c0011f89:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f8f:	83 e0 10             	and    eax,0x10
c0011f92:	84 c0                	test   al,al
c0011f94:	74 07                	je     c0011f9d <VAS::VAS(bool)+0x181>
c0011f96:	b8 00 01 00 00       	mov    eax,0x100
c0011f9b:	eb 05                	jmp    c0011fa2 <VAS::VAS(bool)+0x186>
c0011f9d:	b8 00 00 00 00       	mov    eax,0x0
c0011fa2:	09 d8                	or     eax,ebx
c0011fa4:	89 c2                	mov    edx,eax
c0011fa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011faa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fad:	05 fc 0f 00 00       	add    eax,0xffc
c0011fb2:	83 ca 03             	or     edx,0x3
c0011fb5:	89 10                	mov    DWORD PTR [eax],edx
c0011fb7:	e8 98 59 00 00       	call   c0017954 <CPU::current()>
c0011fbc:	83 ec 0c             	sub    esp,0xc
c0011fbf:	50                   	push   eax
c0011fc0:	e8 9f 19 00 00       	call   c0013964 <Device::getName()>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	83 ec 08             	sub    esp,0x8
c0011fcb:	68 47 72 02 c0       	push   0xc0027247
c0011fd0:	50                   	push   eax
c0011fd1:	e8 df e7 fe ff       	call   c00007b5 <strcmp>
c0011fd6:	83 c4 10             	add    esp,0x10
c0011fd9:	85 c0                	test   eax,eax
c0011fdb:	0f 94 c0             	sete   al
c0011fde:	84 c0                	test   al,al
c0011fe0:	74 64                	je     c0012046 <VAS::VAS(bool)+0x22a>
c0011fe2:	e8 26 9a 00 00       	call   c001ba0d <disableIRQs()>
c0011fe7:	e8 68 59 00 00       	call   c0017954 <CPU::current()>
c0011fec:	05 7c 09 00 00       	add    eax,0x97c
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	50                   	push   eax
c0011ff5:	e8 e6 cb ff ff       	call   c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ffa:	83 c4 10             	add    esp,0x10
c0011ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012002:	89 c3                	mov    ebx,eax
c0012004:	e8 4b 59 00 00       	call   c0017954 <CPU::current()>
c0012009:	05 7c 09 00 00       	add    eax,0x97c
c001200e:	83 ec 0c             	sub    esp,0xc
c0012011:	50                   	push   eax
c0012012:	e8 c9 cb ff ff       	call   c000ebe0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	83 ec 08             	sub    esp,0x8
c001201d:	50                   	push   eax
c001201e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012022:	e8 b9 f5 ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	8b 00                	mov    eax,DWORD PTR [eax]
c001202c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012031:	6a 11                	push   0x11
c0012033:	53                   	push   ebx
c0012034:	50                   	push   eax
c0012035:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012039:	e8 3a f9 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	e8 d5 99 00 00       	call   c001ba1b <enableIRQs()>
c0012046:	90                   	nop
c0012047:	83 c4 28             	add    esp,0x28
c001204a:	5b                   	pop    ebx
c001204b:	c3                   	ret    

c001204c <mapVASFirstTime>:
c001204c:	55                   	push   ebp
c001204d:	57                   	push   edi
c001204e:	56                   	push   esi
c001204f:	53                   	push   ebx
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012058:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001205b:	4a                   	dec    edx
c001205c:	0f 84 99 00 00 00    	je     c00120fb <mapVASFirstTime+0xaf>
c0012062:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012065:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012068:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001206d:	c1 e5 15             	shl    ebp,0x15
c0012070:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012075:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001207b:	29 eb                	sub    ebx,ebp
c001207d:	29 ee                	sub    esi,ebp
c001207f:	e8 94 d6 ff ff       	call   c000f718 <Phys::allocatePage()>
c0012084:	83 ec 0c             	sub    esp,0xc
c0012087:	68 03 04 00 00       	push   0x403
c001208c:	6a 01                	push   0x1
c001208e:	53                   	push   ebx
c001208f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012095:	50                   	push   eax
c0012096:	57                   	push   edi
c0012097:	e8 c8 fb ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001209c:	83 c4 20             	add    esp,0x20
c001209f:	39 f3                	cmp    ebx,esi
c00120a1:	75 dc                	jne    c001207f <mapVASFirstTime+0x33>
c00120a3:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00120a8:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00120ad:	29 ee                	sub    esi,ebp
c00120af:	29 e8                	sub    eax,ebp
c00120b1:	89 c5                	mov    ebp,eax
c00120b3:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00120b7:	19 db                	sbb    ebx,ebx
c00120b9:	e8 5a d6 ff ff       	call   c000f718 <Phys::allocatePage()>
c00120be:	83 e3 04             	and    ebx,0x4
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	81 c3 03 04 00 00    	add    ebx,0x403
c00120ca:	53                   	push   ebx
c00120cb:	6a 01                	push   0x1
c00120cd:	56                   	push   esi
c00120ce:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120d4:	50                   	push   eax
c00120d5:	57                   	push   edi
c00120d6:	e8 89 fb ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120db:	83 c4 20             	add    esp,0x20
c00120de:	39 f5                	cmp    ebp,esi
c00120e0:	75 d1                	jne    c00120b3 <mapVASFirstTime+0x67>
c00120e2:	e8 0e 31 01 00       	call   c00251f5 <CPU::readCR3()>
c00120e7:	83 ec 0c             	sub    esp,0xc
c00120ea:	50                   	push   eax
c00120eb:	e8 17 31 01 00       	call   c0025207 <CPU::writeCR3(unsigned long)>
c00120f0:	83 c4 10             	add    esp,0x10
c00120f3:	83 c4 0c             	add    esp,0xc
c00120f6:	5b                   	pop    ebx
c00120f7:	5e                   	pop    esi
c00120f8:	5f                   	pop    edi
c00120f9:	5d                   	pop    ebp
c00120fa:	c3                   	ret    
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	68 55 72 02 c0       	push   0xc0027255
c0012103:	e8 6f 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012108:	83 c4 10             	add    esp,0x10
c001210b:	83 c4 0c             	add    esp,0xc
c001210e:	5b                   	pop    ebx
c001210f:	5e                   	pop    esi
c0012110:	5f                   	pop    edi
c0012111:	5d                   	pop    ebp
c0012112:	c3                   	ret    

c0012113 <__cxa_atexit>:
c0012113:	31 c0                	xor    eax,eax
c0012115:	c3                   	ret    

c0012116 <__cxa_finalize>:
c0012116:	c3                   	ret    

c0012117 <__stack_chk_fail>:
c0012117:	55                   	push   ebp
c0012118:	89 e5                	mov    ebp,esp
c001211a:	83 ec 10             	sub    esp,0x10
c001211d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012120:	68 6e 72 02 c0       	push   0xc002726e
c0012125:	e8 4d 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001212a:	58                   	pop    eax
c001212b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212e:	5a                   	pop    edx
c001212f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012132:	68 6e 72 02 c0       	push   0xc002726e
c0012137:	e8 3b 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001213c:	59                   	pop    ecx
c001213d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012140:	5a                   	pop    edx
c0012141:	8b 00                	mov    eax,DWORD PTR [eax]
c0012143:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012146:	68 6e 72 02 c0       	push   0xc002726e
c001214b:	e8 27 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012150:	59                   	pop    ecx
c0012151:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012154:	5a                   	pop    edx
c0012155:	8b 00                	mov    eax,DWORD PTR [eax]
c0012157:	8b 00                	mov    eax,DWORD PTR [eax]
c0012159:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001215c:	68 6e 72 02 c0       	push   0xc002726e
c0012161:	e8 11 01 00 00       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0012166:	c7 04 24 76 72 02 c0 	mov    DWORD PTR [esp],0xc0027276
c001216d:	e8 65 69 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0012172:	83 c4 10             	add    esp,0x10
c0012175:	c9                   	leave  
c0012176:	c3                   	ret    

c0012177 <__cxa_pure_virtual>:
c0012177:	83 ec 18             	sub    esp,0x18
c001217a:	68 8e 72 02 c0       	push   0xc002728e
c001217f:	e8 53 69 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0012184:	83 c4 1c             	add    esp,0x1c
c0012187:	c3                   	ret    

c0012188 <operator new(unsigned long)>:
c0012188:	e9 e1 cf ff ff       	jmp    c000f16e <malloc>

c001218d <operator new[](unsigned long)>:
c001218d:	e9 dc cf ff ff       	jmp    c000f16e <malloc>

c0012192 <operator delete(void*)>:
c0012192:	e9 f7 cf ff ff       	jmp    c000f18e <rfree>

c0012197 <operator delete(void*, unsigned long)>:
c0012197:	e9 f2 cf ff ff       	jmp    c000f18e <rfree>

c001219c <operator delete[](void*)>:
c001219c:	e9 ed cf ff ff       	jmp    c000f18e <rfree>

c00121a1 <operator delete[](void*, unsigned long)>:
c00121a1:	e9 e8 cf ff ff       	jmp    c000f18e <rfree>

c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00121a6:	57                   	push   edi
c00121a7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00121ac:	56                   	push   esi
c00121ad:	be a4 72 02 c0       	mov    esi,0xc00272a4
c00121b2:	53                   	push   ebx
c00121b3:	83 ec 40             	sub    esp,0x40
c00121b6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00121ba:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00121be:	fc                   	cld    
c00121bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121c1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00121c5:	83 f9 3e             	cmp    ecx,0x3e
c00121c8:	7e 05                	jle    c00121cf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121ca:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121cf:	89 df                	mov    edi,ebx
c00121d1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121d5:	eb 02                	jmp    c00121d9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121d7:	89 c7                	mov    edi,eax
c00121d9:	31 d2                	xor    edx,edx
c00121db:	46                   	inc    esi
c00121dc:	89 f8                	mov    eax,edi
c00121de:	f7 f1                	div    ecx
c00121e0:	39 cf                	cmp    edi,ecx
c00121e2:	73 f3                	jae    c00121d7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121e4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121e7:	eb 02                	jmp    c00121eb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121e9:	89 c3                	mov    ebx,eax
c00121eb:	31 d2                	xor    edx,edx
c00121ed:	4e                   	dec    esi
c00121ee:	89 d8                	mov    eax,ebx
c00121f0:	f7 f1                	div    ecx
c00121f2:	39 cb                	cmp    ebx,ecx
c00121f4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121f8:	88 16                	mov    BYTE PTR [esi],dl
c00121fa:	73 ed                	jae    c00121e9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121fc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012200:	83 c4 40             	add    esp,0x40
c0012203:	5b                   	pop    ebx
c0012204:	5e                   	pop    esi
c0012205:	5f                   	pop    edi
c0012206:	c3                   	ret    

c0012207 <Dbg::logc(char)>:
c0012207:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001220b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012210:	ec                   	in     al,dx
c0012211:	a8 20                	test   al,0x20
c0012213:	74 fb                	je     c0012210 <Dbg::logc(char)+0x9>
c0012215:	ba f8 03 00 00       	mov    edx,0x3f8
c001221a:	88 c8                	mov    al,cl
c001221c:	ee                   	out    dx,al
c001221d:	c3                   	ret    

c001221e <Dbg::logs(char*)>:
c001221e:	53                   	push   ebx
c001221f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012223:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012226:	84 c0                	test   al,al
c0012228:	74 0f                	je     c0012239 <Dbg::logs(char*)+0x1b>
c001222a:	50                   	push   eax
c001222b:	43                   	inc    ebx
c001222c:	e8 d6 ff ff ff       	call   c0012207 <Dbg::logc(char)>
c0012231:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012234:	5a                   	pop    edx
c0012235:	84 c0                	test   al,al
c0012237:	75 f1                	jne    c001222a <Dbg::logs(char*)+0xc>
c0012239:	5b                   	pop    ebx
c001223a:	c3                   	ret    

c001223b <Dbg::logWriteInt(unsigned int)>:
c001223b:	83 ec 10             	sub    esp,0x10
c001223e:	6a 0a                	push   0xa
c0012240:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012244:	50                   	push   eax
c0012245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012249:	e8 58 ff ff ff       	call   c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001224e:	50                   	push   eax
c001224f:	e8 ca ff ff ff       	call   c001221e <Dbg::logs(char*)>
c0012254:	83 c4 20             	add    esp,0x20
c0012257:	c3                   	ret    

c0012258 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012258:	83 ec 10             	sub    esp,0x10
c001225b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001225f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012263:	50                   	push   eax
c0012264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012268:	e8 39 ff ff ff       	call   c00121a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001226d:	50                   	push   eax
c001226e:	e8 ab ff ff ff       	call   c001221e <Dbg::logs(char*)>
c0012273:	83 c4 20             	add    esp,0x20
c0012276:	c3                   	ret    

c0012277 <Dbg::kprintf(char const*, ...)>:
c0012277:	55                   	push   ebp
c0012278:	57                   	push   edi
c0012279:	56                   	push   esi
c001227a:	53                   	push   ebx
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012282:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012286:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001228a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001228d:	84 c0                	test   al,al
c001228f:	74 4a                	je     c00122db <Dbg::kprintf(char const*, ...)+0x64>
c0012291:	31 db                	xor    ebx,ebx
c0012293:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012296:	3c 25                	cmp    al,0x25
c0012298:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001229b:	0f 85 e4 00 00 00    	jne    c0012385 <Dbg::kprintf(char const*, ...)+0x10e>
c00122a1:	83 c3 02             	add    ebx,0x2
c00122a4:	8a 07                	mov    al,BYTE PTR [edi]
c00122a6:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00122a9:	83 e8 25             	sub    eax,0x25
c00122ac:	3c 53                	cmp    al,0x53
c00122ae:	0f 87 ba 00 00 00    	ja     c001236e <Dbg::kprintf(char const*, ...)+0xf7>
c00122b4:	0f b6 c0             	movzx  eax,al
c00122b7:	ff 24 85 e4 72 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8d1c]
c00122be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122c2:	89 c8                	mov    eax,ecx
c00122c4:	83 c1 04             	add    ecx,0x4
c00122c7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122cb:	ff 30                	push   DWORD PTR [eax]
c00122cd:	e8 4c ff ff ff       	call   c001221e <Dbg::logs(char*)>
c00122d2:	58                   	pop    eax
c00122d3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122d7:	84 c0                	test   al,al
c00122d9:	75 b8                	jne    c0012293 <Dbg::kprintf(char const*, ...)+0x1c>
c00122db:	83 c4 0c             	add    esp,0xc
c00122de:	5b                   	pop    ebx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	5d                   	pop    ebp
c00122e2:	c3                   	ret    
c00122e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122e7:	89 d0                	mov    eax,edx
c00122e9:	83 c2 04             	add    edx,0x4
c00122ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122f0:	ff 30                	push   DWORD PTR [eax]
c00122f2:	e8 44 ff ff ff       	call   c001223b <Dbg::logWriteInt(unsigned int)>
c00122f7:	58                   	pop    eax
c00122f8:	eb d9                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122fe:	89 d0                	mov    eax,edx
c0012300:	83 c2 04             	add    edx,0x4
c0012303:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012306:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001230a:	50                   	push   eax
c001230b:	e8 f7 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012310:	58                   	pop    eax
c0012311:	eb c0                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012313:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012317:	89 c8                	mov    eax,ecx
c0012319:	83 c1 04             	add    ecx,0x4
c001231c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012320:	ff 30                	push   DWORD PTR [eax]
c0012322:	e8 14 ff ff ff       	call   c001223b <Dbg::logWriteInt(unsigned int)>
c0012327:	5f                   	pop    edi
c0012328:	eb a9                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c001232a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001232e:	89 c8                	mov    eax,ecx
c0012330:	83 c1 04             	add    ecx,0x4
c0012333:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012337:	6a 10                	push   0x10
c0012339:	ff 30                	push   DWORD PTR [eax]
c001233b:	e8 18 ff ff ff       	call   c0012258 <Dbg::logWriteIntBase(unsigned int, int)>
c0012340:	59                   	pop    ecx
c0012341:	5f                   	pop    edi
c0012342:	eb 8f                	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012344:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012348:	89 d0                	mov    eax,edx
c001234a:	83 c2 08             	add    edx,0x8
c001234d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012351:	6a 10                	push   0x10
c0012353:	ff 30                	push   DWORD PTR [eax]
c0012355:	e8 fe fe ff ff       	call   c0012258 <Dbg::logWriteIntBase(unsigned int, int)>
c001235a:	58                   	pop    eax
c001235b:	5a                   	pop    edx
c001235c:	e9 72 ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012361:	6a 25                	push   0x25
c0012363:	e8 9f fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012368:	58                   	pop    eax
c0012369:	e9 65 ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c001236e:	6a 25                	push   0x25
c0012370:	e8 92 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c0012375:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012378:	50                   	push   eax
c0012379:	e8 89 fe ff ff       	call   c0012207 <Dbg::logc(char)>
c001237e:	5a                   	pop    edx
c001237f:	59                   	pop    ecx
c0012380:	e9 4e ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012385:	50                   	push   eax
c0012386:	89 eb                	mov    ebx,ebp
c0012388:	e8 7a fe ff ff       	call   c0012207 <Dbg::logc(char)>
c001238d:	89 fd                	mov    ebp,edi
c001238f:	58                   	pop    eax
c0012390:	e9 3e ff ff ff       	jmp    c00122d3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012395:	90                   	nop

c0012396 <File::read(unsigned long long, void*, int*)>:
c0012396:	53                   	push   ebx
c0012397:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001239b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001239f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123a6:	3c 19                	cmp    al,0x19
c00123a8:	77 35                	ja     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123aa:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c00123b1:	85 c0                	test   eax,eax
c00123b3:	74 2a                	je     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123bb:	85 c0                	test   eax,eax
c00123bd:	74 20                	je     c00123df <File::read(unsigned long long, void*, int*)+0x49>
c00123bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123c3:	74 21                	je     c00123e6 <File::read(unsigned long long, void*, int*)+0x50>
c00123c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d9:	5b                   	pop    ebx
c00123da:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123dd:	ff e0                	jmp    eax
c00123df:	b8 0b 00 00 00       	mov    eax,0xb
c00123e4:	eb 05                	jmp    c00123eb <File::read(unsigned long long, void*, int*)+0x55>
c00123e6:	b8 05 00 00 00       	mov    eax,0x5
c00123eb:	5b                   	pop    ebx
c00123ec:	c3                   	ret    
c00123ed:	90                   	nop

c00123ee <File::write(unsigned long long, void*, int*)>:
c00123ee:	53                   	push   ebx
c00123ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123fe:	3c 19                	cmp    al,0x19
c0012400:	77 35                	ja     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c0012402:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c0012409:	85 c0                	test   eax,eax
c001240b:	74 2a                	je     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c001240d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012413:	85 c0                	test   eax,eax
c0012415:	74 20                	je     c0012437 <File::write(unsigned long long, void*, int*)+0x49>
c0012417:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001241b:	74 21                	je     c001243e <File::write(unsigned long long, void*, int*)+0x50>
c001241d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001241f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012423:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001242d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012431:	5b                   	pop    ebx
c0012432:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012435:	ff e0                	jmp    eax
c0012437:	b8 0b 00 00 00       	mov    eax,0xb
c001243c:	eb 05                	jmp    c0012443 <File::write(unsigned long long, void*, int*)+0x55>
c001243e:	b8 05 00 00 00       	mov    eax,0x5
c0012443:	5b                   	pop    ebx
c0012444:	c3                   	ret    
c0012445:	90                   	nop

c0012446 <Directory::read(unsigned long long, void*, int*)>:
c0012446:	53                   	push   ebx
c0012447:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001244b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001244f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012456:	3c 19                	cmp    al,0x19
c0012458:	77 35                	ja     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c001245a:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c0012461:	85 c0                	test   eax,eax
c0012463:	74 2a                	je     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012465:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001246b:	85 c0                	test   eax,eax
c001246d:	74 20                	je     c001248f <Directory::read(unsigned long long, void*, int*)+0x49>
c001246f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012473:	74 21                	je     c0012496 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012475:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012477:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001247b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012485:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012489:	5b                   	pop    ebx
c001248a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001248d:	ff e0                	jmp    eax
c001248f:	b8 0b 00 00 00       	mov    eax,0xb
c0012494:	eb 05                	jmp    c001249b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012496:	b8 05 00 00 00       	mov    eax,0x5
c001249b:	5b                   	pop    ebx
c001249c:	c3                   	ret    
c001249d:	90                   	nop

c001249e <Directory::write(unsigned long long, void*, int*)>:
c001249e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124a2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00124a9:	b8 0b 00 00 00       	mov    eax,0xb
c00124ae:	80 fa 19             	cmp    dl,0x19
c00124b1:	77 18                	ja     c00124cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124b3:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c00124ba:	85 d2                	test   edx,edx
c00124bc:	74 0d                	je     c00124cb <Directory::write(unsigned long long, void*, int*)+0x2d>
c00124be:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124c5:	19 c0                	sbb    eax,eax
c00124c7:	83 e0 0a             	and    eax,0xa
c00124ca:	40                   	inc    eax
c00124cb:	c3                   	ret    

c00124cc <File::isAtty()>:
c00124cc:	31 c0                	xor    eax,eax
c00124ce:	c3                   	ret    
c00124cf:	90                   	nop

c00124d0 <Directory::isAtty()>:
c00124d0:	31 c0                	xor    eax,eax
c00124d2:	c3                   	ret    
c00124d3:	90                   	nop

c00124d4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124d4:	b8 0a 00 00 00       	mov    eax,0xa
c00124d9:	c3                   	ret    

c00124da <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124da:	b8 0a 00 00 00       	mov    eax,0xa
c00124df:	c3                   	ret    

c00124e0 <File::~File()>:
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	ba a0 74 02 c0       	mov    edx,0xc00274a0
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	89 10                	mov    DWORD PTR [eax],edx
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	50                   	push   eax
c00124f6:	e8 49 eb ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	90                   	nop
c00124ff:	83 c4 0c             	add    esp,0xc
c0012502:	c3                   	ret    
c0012503:	90                   	nop

c0012504 <File::~File()>:
c0012504:	83 ec 0c             	sub    esp,0xc
c0012507:	83 ec 0c             	sub    esp,0xc
c001250a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001250e:	e8 cd ff ff ff       	call   c00124e0 <File::~File()>
c0012513:	83 c4 10             	add    esp,0x10
c0012516:	83 ec 08             	sub    esp,0x8
c0012519:	68 14 01 00 00       	push   0x114
c001251e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012522:	e8 70 fc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	83 c4 0c             	add    esp,0xc
c001252d:	c3                   	ret    

c001252e <Directory::~Directory()>:
c001252e:	83 ec 0c             	sub    esp,0xc
c0012531:	ba bc 74 02 c0       	mov    edx,0xc00274bc
c0012536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001253a:	89 10                	mov    DWORD PTR [eax],edx
c001253c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012540:	83 ec 0c             	sub    esp,0xc
c0012543:	50                   	push   eax
c0012544:	e8 fb ea ff ff       	call   c0011044 <UnixFile::~UnixFile()>
c0012549:	83 c4 10             	add    esp,0x10
c001254c:	90                   	nop
c001254d:	83 c4 0c             	add    esp,0xc
c0012550:	c3                   	ret    
c0012551:	90                   	nop

c0012552 <Directory::~Directory()>:
c0012552:	83 ec 0c             	sub    esp,0xc
c0012555:	83 ec 0c             	sub    esp,0xc
c0012558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255c:	e8 cd ff ff ff       	call   c001252e <Directory::~Directory()>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	83 ec 08             	sub    esp,0x8
c0012567:	68 14 01 00 00       	push   0x114
c001256c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012570:	e8 22 fc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	83 c4 0c             	add    esp,0xc
c001257b:	c3                   	ret    

c001257c <Filesystem::Filesystem()>:
c001257c:	ba 3c 74 02 c0       	mov    edx,0xc002743c
c0012581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012585:	89 10                	mov    DWORD PTR [eax],edx
c0012587:	8b 15 28 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a728
c001258d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012591:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012598:	a3 28 a7 02 c0       	mov    ds:0xc002a728,eax
c001259d:	90                   	nop
c001259e:	c3                   	ret    
c001259f:	90                   	nop

c00125a0 <Filesystem::~Filesystem()>:
c00125a0:	ba 3c 74 02 c0       	mov    edx,0xc002743c
c00125a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a9:	89 10                	mov    DWORD PTR [eax],edx
c00125ab:	90                   	nop
c00125ac:	c3                   	ret    
c00125ad:	90                   	nop

c00125ae <Filesystem::~Filesystem()>:
c00125ae:	83 ec 0c             	sub    esp,0xc
c00125b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125b5:	e8 e6 ff ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c00125ba:	83 c4 04             	add    esp,0x4
c00125bd:	83 ec 08             	sub    esp,0x8
c00125c0:	6a 08                	push   0x8
c00125c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125c6:	e8 cc fb ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	83 c4 0c             	add    esp,0xc
c00125d1:	c3                   	ret    

c00125d2 <initVFS()>:
c00125d2:	83 ec 18             	sub    esp,0x18
c00125d5:	6a 08                	push   0x8
c00125d7:	e8 ac fb ff ff       	call   c0012188 <operator new(unsigned long)>
c00125dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00125df:	e8 24 c2 00 00       	call   c001e808 <FAT::FAT()>
c00125e4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125eb:	e8 98 fb ff ff       	call   c0012188 <operator new(unsigned long)>
c00125f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00125f3:	e8 86 d4 00 00       	call   c001fa7e <ISO9660::ISO9660()>
c00125f8:	83 c4 1c             	add    esp,0x1c
c00125fb:	c3                   	ret    

c00125fc <standardiseFiles(char*, char const*, char const*)>:
c00125fc:	55                   	push   ebp
c00125fd:	57                   	push   edi
c00125fe:	56                   	push   esi
c00125ff:	53                   	push   ebx
c0012600:	81 ec 10 04 00 00    	sub    esp,0x410
c0012606:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001260d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012614:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001261b:	68 00 04 00 00       	push   0x400
c0012620:	6a 00                	push   0x0
c0012622:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012626:	56                   	push   esi
c0012627:	e8 99 e0 fe ff       	call   c00006c5 <memset>
c001262c:	83 c4 10             	add    esp,0x10
c001262f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012633:	75 0b                	jne    c0012640 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012635:	50                   	push   eax
c0012636:	50                   	push   eax
c0012637:	57                   	push   edi
c0012638:	56                   	push   esi
c0012639:	e8 26 e1 fe ff       	call   c0000764 <strcpy>
c001263e:	eb 41                	jmp    c0012681 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012640:	8a 07                	mov    al,BYTE PTR [edi]
c0012642:	3c 5c                	cmp    al,0x5c
c0012644:	74 04                	je     c001264a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012646:	3c 2f                	cmp    al,0x2f
c0012648:	75 18                	jne    c0012662 <standardiseFiles(char*, char const*, char const*)+0x66>
c001264a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001264d:	3c 60                	cmp    al,0x60
c001264f:	7e 03                	jle    c0012654 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012651:	83 e8 20             	sub    eax,0x20
c0012654:	88 04 24             	mov    BYTE PTR [esp],al
c0012657:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001265e:	50                   	push   eax
c001265f:	50                   	push   eax
c0012660:	eb 18                	jmp    c001267a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012662:	50                   	push   eax
c0012663:	50                   	push   eax
c0012664:	55                   	push   ebp
c0012665:	56                   	push   esi
c0012666:	e8 f9 e0 fe ff       	call   c0000764 <strcpy>
c001266b:	5a                   	pop    edx
c001266c:	59                   	pop    ecx
c001266d:	68 88 87 02 c0       	push   0xc0028788
c0012672:	56                   	push   esi
c0012673:	e8 a3 e1 fe ff       	call   c000081b <strcat>
c0012678:	5d                   	pop    ebp
c0012679:	58                   	pop    eax
c001267a:	57                   	push   edi
c001267b:	56                   	push   esi
c001267c:	e8 9a e1 fe ff       	call   c000081b <strcat>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012687:	3c 60                	cmp    al,0x60
c0012689:	7e 03                	jle    c001268e <standardiseFiles(char*, char const*, char const*)+0x92>
c001268b:	83 e8 20             	sub    eax,0x20
c001268e:	88 04 24             	mov    BYTE PTR [esp],al
c0012691:	88 03                	mov    BYTE PTR [ebx],al
c0012693:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001269a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00126a0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00126a4:	bf 03 00 00 00       	mov    edi,0x3
c00126a9:	b8 03 00 00 00       	mov    eax,0x3
c00126ae:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00126b1:	84 d2                	test   dl,dl
c00126b3:	0f 84 91 00 00 00    	je     c001274a <standardiseFiles(char*, char const*, char const*)+0x14e>
c00126b9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00126bc:	80 fa 5c             	cmp    dl,0x5c
c00126bf:	74 05                	je     c00126c6 <standardiseFiles(char*, char const*, char const*)+0xca>
c00126c1:	80 fa 2f             	cmp    dl,0x2f
c00126c4:	75 12                	jne    c00126d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126c6:	89 c5                	mov    ebp,eax
c00126c8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126cd:	74 09                	je     c00126d8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126cf:	40                   	inc    eax
c00126d0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126d4:	89 cf                	mov    edi,ecx
c00126d6:	eb d6                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126dd:	75 5b                	jne    c001273a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126df:	80 fa 2e             	cmp    dl,0x2e
c00126e2:	75 56                	jne    c001273a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126e4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126e8:	74 19                	je     c0012703 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126ea:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126ef:	74 53                	je     c0012744 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126f1:	89 f9                	mov    ecx,edi
c00126f3:	41                   	inc    ecx
c00126f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126f7:	80 fa 2f             	cmp    dl,0x2f
c00126fa:	74 f7                	je     c00126f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126fc:	80 fa 5c             	cmp    dl,0x5c
c00126ff:	74 f2                	je     c00126f3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012701:	eb d1                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012703:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012708:	74 3a                	je     c0012744 <standardiseFiles(char*, char const*, char const*)+0x148>
c001270a:	83 f8 03             	cmp    eax,0x3
c001270d:	74 c5                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001270f:	41                   	inc    ecx
c0012710:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012713:	80 fa 2f             	cmp    dl,0x2f
c0012716:	74 f7                	je     c001270f <standardiseFiles(char*, char const*, char const*)+0x113>
c0012718:	80 fa 5c             	cmp    dl,0x5c
c001271b:	74 f2                	je     c001270f <standardiseFiles(char*, char const*, char const*)+0x113>
c001271d:	48                   	dec    eax
c001271e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012722:	75 06                	jne    c001272a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012724:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012728:	eb f3                	jmp    c001271d <standardiseFiles(char*, char const*, char const*)+0x121>
c001272a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001272e:	74 07                	je     c0012737 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012730:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012734:	48                   	dec    eax
c0012735:	eb f3                	jmp    c001272a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012737:	40                   	inc    eax
c0012738:	eb 9a                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001273a:	80 fa 2f             	cmp    dl,0x2f
c001273d:	74 95                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001273f:	80 fa 5c             	cmp    dl,0x5c
c0012742:	74 90                	je     c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012744:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012747:	40                   	inc    eax
c0012748:	eb 8a                	jmp    c00126d4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001274a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	53                   	push   ebx
c0012752:	e8 8b df fe ff       	call   c00006e2 <strlen>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001275f:	75 26                	jne    c0012787 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	53                   	push   ebx
c0012765:	e8 78 df fe ff       	call   c00006e2 <strlen>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012772:	74 26                	je     c001279a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012774:	83 ec 0c             	sub    esp,0xc
c0012777:	53                   	push   ebx
c0012778:	e8 65 df fe ff       	call   c00006e2 <strlen>
c001277d:	83 c4 10             	add    esp,0x10
c0012780:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012785:	eb c7                	jmp    c001274e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012787:	83 ec 0c             	sub    esp,0xc
c001278a:	53                   	push   ebx
c001278b:	e8 52 df fe ff       	call   c00006e2 <strlen>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012798:	74 c7                	je     c0012761 <standardiseFiles(char*, char const*, char const*)+0x165>
c001279a:	81 c4 0c 04 00 00    	add    esp,0x40c
c00127a0:	5b                   	pop    ebx
c00127a1:	5e                   	pop    esi
c00127a2:	5f                   	pop    edi
c00127a3:	5d                   	pop    ebp
c00127a4:	c3                   	ret    
c00127a5:	90                   	nop

c00127a6 <File::File(char const*, Process*)>:
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ad:	83 ec 08             	sub    esp,0x8
c00127b0:	6a 00                	push   0x0
c00127b2:	50                   	push   eax
c00127b3:	e8 ea e6 ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	ba a0 74 02 c0       	mov    edx,0xc00274a0
c00127c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c4:	89 10                	mov    DWORD PTR [eax],edx
c00127c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d4:	83 c0 0d             	add    eax,0xd
c00127d7:	83 ec 04             	sub    esp,0x4
c00127da:	52                   	push   edx
c00127db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127df:	50                   	push   eax
c00127e0:	e8 17 fe ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c00127e5:	83 c4 10             	add    esp,0x10
c00127e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127ef:	8d 50 bf             	lea    edx,[eax-0x41]
c00127f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012800:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012804:	90                   	nop
c0012805:	83 c4 0c             	add    esp,0xc
c0012808:	c3                   	ret    
c0012809:	90                   	nop

c001280a <File::open(FileOpenMode)>:
c001280a:	53                   	push   ebx
c001280b:	b8 0b 00 00 00       	mov    eax,0xb
c0012810:	83 ec 08             	sub    esp,0x8
c0012813:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012817:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001281e:	80 fa 19             	cmp    dl,0x19
c0012821:	77 40                	ja     c0012863 <File::open(FileOpenMode)+0x59>
c0012823:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c001282a:	85 d2                	test   edx,edx
c001282c:	74 35                	je     c0012863 <File::open(FileOpenMode)+0x59>
c001282e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012834:	85 d2                	test   edx,edx
c0012836:	74 2b                	je     c0012863 <File::open(FileOpenMode)+0x59>
c0012838:	b8 06 00 00 00       	mov    eax,0x6
c001283d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012841:	75 20                	jne    c0012863 <File::open(FileOpenMode)+0x59>
c0012843:	8b 02                	mov    eax,DWORD PTR [edx]
c0012845:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001284b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001284f:	51                   	push   ecx
c0012850:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012853:	51                   	push   ecx
c0012854:	52                   	push   edx
c0012855:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012858:	83 c4 10             	add    esp,0x10
c001285b:	85 c0                	test   eax,eax
c001285d:	75 04                	jne    c0012863 <File::open(FileOpenMode)+0x59>
c001285f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012863:	83 c4 08             	add    esp,0x8
c0012866:	5b                   	pop    ebx
c0012867:	c3                   	ret    

c0012868 <File::close()>:
c0012868:	53                   	push   ebx
c0012869:	b8 0b 00 00 00       	mov    eax,0xb
c001286e:	83 ec 08             	sub    esp,0x8
c0012871:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012875:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001287c:	80 fa 19             	cmp    dl,0x19
c001287f:	77 41                	ja     c00128c2 <File::close()+0x5a>
c0012881:	8b 1c 95 c0 ab 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5440]
c0012888:	85 db                	test   ebx,ebx
c001288a:	74 36                	je     c00128c2 <File::close()+0x5a>
c001288c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012893:	74 2d                	je     c00128c2 <File::close()+0x5a>
c0012895:	b8 05 00 00 00       	mov    eax,0x5
c001289a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001289e:	74 22                	je     c00128c2 <File::close()+0x5a>
c00128a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00128a4:	8b 04 95 c0 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5440]
c00128ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128b1:	53                   	push   ebx
c00128b2:	53                   	push   ebx
c00128b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00128b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00128bb:	50                   	push   eax
c00128bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00128bf:	83 c4 10             	add    esp,0x10
c00128c2:	83 c4 08             	add    esp,0x8
c00128c5:	5b                   	pop    ebx
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <File::seek(unsigned long long)>:
c00128c8:	56                   	push   esi
c00128c9:	53                   	push   ebx
c00128ca:	b8 0b 00 00 00       	mov    eax,0xb
c00128cf:	51                   	push   ecx
c00128d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128e3:	80 fa 19             	cmp    dl,0x19
c00128e6:	77 31                	ja     c0012919 <File::seek(unsigned long long)+0x51>
c00128e8:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c00128ef:	85 d2                	test   edx,edx
c00128f1:	74 26                	je     c0012919 <File::seek(unsigned long long)+0x51>
c00128f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128f9:	85 d2                	test   edx,edx
c00128fb:	74 1c                	je     c0012919 <File::seek(unsigned long long)+0x51>
c00128fd:	b8 05 00 00 00       	mov    eax,0x5
c0012902:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012906:	74 11                	je     c0012919 <File::seek(unsigned long long)+0x51>
c0012908:	8b 02                	mov    eax,DWORD PTR [edx]
c001290a:	53                   	push   ebx
c001290b:	51                   	push   ecx
c001290c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012912:	52                   	push   edx
c0012913:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	5a                   	pop    edx
c001291a:	5b                   	pop    ebx
c001291b:	5e                   	pop    esi
c001291c:	c3                   	ret    
c001291d:	90                   	nop

c001291e <File::tell(unsigned long long*)>:
c001291e:	83 ec 0c             	sub    esp,0xc
c0012921:	b8 0b 00 00 00       	mov    eax,0xb
c0012926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001292a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012931:	80 fa 19             	cmp    dl,0x19
c0012934:	77 34                	ja     c001296a <File::tell(unsigned long long*)+0x4c>
c0012936:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c001293d:	85 d2                	test   edx,edx
c001293f:	74 29                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c0012941:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012947:	85 d2                	test   edx,edx
c0012949:	74 1f                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c001294b:	b8 05 00 00 00       	mov    eax,0x5
c0012950:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012954:	74 14                	je     c001296a <File::tell(unsigned long long*)+0x4c>
c0012956:	50                   	push   eax
c0012957:	8b 02                	mov    eax,DWORD PTR [edx]
c0012959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001295d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012963:	52                   	push   edx
c0012964:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	83 c4 0c             	add    esp,0xc
c001296d:	c3                   	ret    

c001296e <File::rewind()>:
c001296e:	83 ec 10             	sub    esp,0x10
c0012971:	6a 00                	push   0x0
c0012973:	6a 00                	push   0x0
c0012975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012979:	e8 4a ff ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001297e:	83 c4 1c             	add    esp,0x1c
c0012981:	c3                   	ret    

c0012982 <File::unlink()>:
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	b8 0b 00 00 00       	mov    eax,0xb
c001298a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001298e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012995:	80 f9 19             	cmp    cl,0x19
c0012998:	77 2f                	ja     c00129c9 <File::unlink()+0x47>
c001299a:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c00129a1:	85 c9                	test   ecx,ecx
c00129a3:	74 24                	je     c00129c9 <File::unlink()+0x47>
c00129a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129ab:	85 c9                	test   ecx,ecx
c00129ad:	74 1a                	je     c00129c9 <File::unlink()+0x47>
c00129af:	b8 06 00 00 00       	mov    eax,0x6
c00129b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129b8:	75 0f                	jne    c00129c9 <File::unlink()+0x47>
c00129ba:	83 c2 0d             	add    edx,0xd
c00129bd:	50                   	push   eax
c00129be:	50                   	push   eax
c00129bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129c1:	52                   	push   edx
c00129c2:	51                   	push   ecx
c00129c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129c6:	83 c4 10             	add    esp,0x10
c00129c9:	83 c4 0c             	add    esp,0xc
c00129cc:	c3                   	ret    
c00129cd:	90                   	nop

c00129ce <File::rename(char const*)>:
c00129ce:	83 ec 0c             	sub    esp,0xc
c00129d1:	b8 0b 00 00 00       	mov    eax,0xb
c00129d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129e1:	80 f9 19             	cmp    cl,0x19
c00129e4:	77 32                	ja     c0012a18 <File::rename(char const*)+0x4a>
c00129e6:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c00129ed:	85 c9                	test   ecx,ecx
c00129ef:	74 27                	je     c0012a18 <File::rename(char const*)+0x4a>
c00129f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129f7:	85 c9                	test   ecx,ecx
c00129f9:	74 1d                	je     c0012a18 <File::rename(char const*)+0x4a>
c00129fb:	b8 06 00 00 00       	mov    eax,0x6
c0012a00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a04:	75 12                	jne    c0012a18 <File::rename(char const*)+0x4a>
c0012a06:	83 c2 0d             	add    edx,0xd
c0012a09:	50                   	push   eax
c0012a0a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a10:	52                   	push   edx
c0012a11:	51                   	push   ecx
c0012a12:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 c4 0c             	add    esp,0xc
c0012a1b:	c3                   	ret    

c0012a1c <File::chfatattr(unsigned char, unsigned char)>:
c0012a1c:	57                   	push   edi
c0012a1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a22:	56                   	push   esi
c0012a23:	53                   	push   ebx
c0012a24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a2c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a33:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a37:	80 f9 19             	cmp    cl,0x19
c0012a3a:	77 37                	ja     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a3c:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012a43:	85 c9                	test   ecx,ecx
c0012a45:	74 2c                	je     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a47:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a4d:	85 c9                	test   ecx,ecx
c0012a4f:	74 22                	je     c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a51:	b8 06 00 00 00       	mov    eax,0x6
c0012a56:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a5a:	75 17                	jne    c0012a73 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a5c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a5e:	89 f0                	mov    eax,esi
c0012a60:	83 c2 0d             	add    edx,0xd
c0012a63:	0f b6 f0             	movzx  esi,al
c0012a66:	0f b6 db             	movzx  ebx,bl
c0012a69:	56                   	push   esi
c0012a6a:	53                   	push   ebx
c0012a6b:	52                   	push   edx
c0012a6c:	51                   	push   ecx
c0012a6d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	5b                   	pop    ebx
c0012a74:	5e                   	pop    esi
c0012a75:	5f                   	pop    edi
c0012a76:	c3                   	ret    
c0012a77:	90                   	nop

c0012a78 <File::exists()>:
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	31 c0                	xor    eax,eax
c0012a7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a81:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a88:	80 f9 19             	cmp    cl,0x19
c0012a8b:	77 24                	ja     c0012ab1 <File::exists()+0x39>
c0012a8d:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012a94:	85 c9                	test   ecx,ecx
c0012a96:	74 19                	je     c0012ab1 <File::exists()+0x39>
c0012a98:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a9e:	85 c9                	test   ecx,ecx
c0012aa0:	74 0f                	je     c0012ab1 <File::exists()+0x39>
c0012aa2:	83 c2 0d             	add    edx,0xd
c0012aa5:	50                   	push   eax
c0012aa6:	50                   	push   eax
c0012aa7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aa9:	52                   	push   edx
c0012aaa:	51                   	push   ecx
c0012aab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012aae:	83 c4 10             	add    esp,0x10
c0012ab1:	83 c4 0c             	add    esp,0xc
c0012ab4:	c3                   	ret    
c0012ab5:	90                   	nop

c0012ab6 <File::stat(unsigned long long*, bool*)>:
c0012ab6:	56                   	push   esi
c0012ab7:	53                   	push   ebx
c0012ab8:	50                   	push   eax
c0012ab9:	b8 0b 00 00 00       	mov    eax,0xb
c0012abe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ac6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012acd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ad1:	80 f9 19             	cmp    cl,0x19
c0012ad4:	77 3d                	ja     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ad6:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012add:	85 c9                	test   ecx,ecx
c0012adf:	74 32                	je     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ae1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ae7:	85 c9                	test   ecx,ecx
c0012ae9:	74 28                	je     c0012b13 <File::stat(unsigned long long*, bool*)+0x5d>
c0012aeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af1:	74 13                	je     c0012b06 <File::stat(unsigned long long*, bool*)+0x50>
c0012af3:	83 ec 04             	sub    esp,0x4
c0012af6:	56                   	push   esi
c0012af7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012afd:	51                   	push   ecx
c0012afe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012b01:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b04:	eb 0a                	jmp    c0012b10 <File::stat(unsigned long long*, bool*)+0x5a>
c0012b06:	53                   	push   ebx
c0012b07:	83 c2 0d             	add    edx,0xd
c0012b0a:	56                   	push   esi
c0012b0b:	52                   	push   edx
c0012b0c:	51                   	push   ecx
c0012b0d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012b10:	83 c4 10             	add    esp,0x10
c0012b13:	5a                   	pop    edx
c0012b14:	5b                   	pop    ebx
c0012b15:	5e                   	pop    esi
c0012b16:	c3                   	ret    

c0012b17 <getcwd(Process*, char*, int)>:
c0012b17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b1b:	31 c0                	xor    eax,eax
c0012b1d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b20:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b24:	7d 15                	jge    c0012b3b <getcwd(Process*, char*, int)+0x24>
c0012b26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b2a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b31:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b34:	84 c9                	test   cl,cl
c0012b36:	74 06                	je     c0012b3e <getcwd(Process*, char*, int)+0x27>
c0012b38:	40                   	inc    eax
c0012b39:	eb e2                	jmp    c0012b1d <getcwd(Process*, char*, int)+0x6>
c0012b3b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b3e:	31 c0                	xor    eax,eax
c0012b40:	c3                   	ret    

c0012b41 <setcwd(Process*, char*)>:
c0012b41:	55                   	push   ebp
c0012b42:	57                   	push   edi
c0012b43:	56                   	push   esi
c0012b44:	53                   	push   ebx
c0012b45:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b4b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b52:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b58:	57                   	push   edi
c0012b59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b60:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b64:	56                   	push   esi
c0012b65:	e8 92 fa ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0012b6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b6d:	e8 70 db fe ff       	call   c00006e2 <strlen>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	83 f8 02             	cmp    eax,0x2
c0012b78:	77 17                	ja     c0012b91 <setcwd(Process*, char*)+0x50>
c0012b7a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b7f:	83 e8 41             	sub    eax,0x41
c0012b82:	83 f8 19             	cmp    eax,0x19
c0012b85:	76 24                	jbe    c0012bab <setcwd(Process*, char*)+0x6a>
c0012b87:	b8 03 00 00 00       	mov    eax,0x3
c0012b8c:	e9 cb 00 00 00       	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012b91:	83 ec 0c             	sub    esp,0xc
c0012b94:	56                   	push   esi
c0012b95:	e8 48 db fe ff       	call   c00006e2 <strlen>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	83 f8 03             	cmp    eax,0x3
c0012ba0:	75 33                	jne    c0012bd5 <setcwd(Process*, char*)+0x94>
c0012ba2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ba7:	75 2c                	jne    c0012bd5 <setcwd(Process*, char*)+0x94>
c0012ba9:	eb cf                	jmp    c0012b7a <setcwd(Process*, char*)+0x39>
c0012bab:	8b 14 85 c0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5440]
c0012bb2:	b8 05 00 00 00       	mov    eax,0x5
c0012bb7:	85 d2                	test   edx,edx
c0012bb9:	0f 84 9d 00 00 00    	je     c0012c5c <setcwd(Process*, char*)+0x11b>
c0012bbf:	b8 06 00 00 00       	mov    eax,0x6
c0012bc4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012bcb:	0f 84 8b 00 00 00    	je     c0012c5c <setcwd(Process*, char*)+0x11b>
c0012bd1:	51                   	push   ecx
c0012bd2:	51                   	push   ecx
c0012bd3:	eb 7b                	jmp    c0012c50 <setcwd(Process*, char*)+0x10f>
c0012bd5:	83 ec 0c             	sub    esp,0xc
c0012bd8:	68 14 01 00 00       	push   0x114
c0012bdd:	e8 a6 f5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0012be2:	83 c4 0c             	add    esp,0xc
c0012be5:	89 c3                	mov    ebx,eax
c0012be7:	55                   	push   ebp
c0012be8:	56                   	push   esi
c0012be9:	50                   	push   eax
c0012bea:	e8 b7 fb ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0012bef:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bf4:	83 c4 0c             	add    esp,0xc
c0012bf7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bfb:	50                   	push   eax
c0012bfc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c00:	50                   	push   eax
c0012c01:	53                   	push   ebx
c0012c02:	e8 af fe ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012c0c:	83 f8 02             	cmp    eax,0x2
c0012c0f:	75 09                	jne    c0012c1a <setcwd(Process*, char*)+0xd9>
c0012c11:	83 ec 0c             	sub    esp,0xc
c0012c14:	53                   	push   ebx
c0012c15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012c18:	eb 0d                	jmp    c0012c27 <setcwd(Process*, char*)+0xe6>
c0012c1a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012c1d:	85 c0                	test   eax,eax
c0012c1f:	74 10                	je     c0012c31 <setcwd(Process*, char*)+0xf0>
c0012c21:	83 ec 0c             	sub    esp,0xc
c0012c24:	53                   	push   ebx
c0012c25:	ff d2                	call   edx
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	b8 01 00 00 00       	mov    eax,0x1
c0012c2f:	eb 2b                	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012c31:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c36:	75 10                	jne    c0012c48 <setcwd(Process*, char*)+0x107>
c0012c38:	83 ec 0c             	sub    esp,0xc
c0012c3b:	53                   	push   ebx
c0012c3c:	ff d2                	call   edx
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	b8 02 00 00 00       	mov    eax,0x2
c0012c46:	eb 14                	jmp    c0012c5c <setcwd(Process*, char*)+0x11b>
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	53                   	push   ebx
c0012c4c:	ff d2                	call   edx
c0012c4e:	58                   	pop    eax
c0012c4f:	5a                   	pop    edx
c0012c50:	56                   	push   esi
c0012c51:	57                   	push   edi
c0012c52:	e8 0d db fe ff       	call   c0000764 <strcpy>
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	31 c0                	xor    eax,eax
c0012c5c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c62:	5b                   	pop    ebx
c0012c63:	5e                   	pop    esi
c0012c64:	5f                   	pop    edi
c0012c65:	5d                   	pop    ebp
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Directory::Directory(char const*, Process*)>:
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6f:	83 ec 08             	sub    esp,0x8
c0012c72:	6a 00                	push   0x0
c0012c74:	50                   	push   eax
c0012c75:	e8 28 e2 ff ff       	call   c0010ea2 <UnixFile::UnixFile(int)>
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	ba bc 74 02 c0       	mov    edx,0xc00274bc
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	89 10                	mov    DWORD PTR [eax],edx
c0012c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c8c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c96:	83 c0 0d             	add    eax,0xd
c0012c99:	83 ec 04             	sub    esp,0x4
c0012c9c:	52                   	push   edx
c0012c9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca1:	50                   	push   eax
c0012ca2:	e8 55 f9 ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012cb1:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cc6:	90                   	nop
c0012cc7:	83 c4 0c             	add    esp,0xc
c0012cca:	c3                   	ret    
c0012ccb:	90                   	nop

c0012ccc <Directory::open()>:
c0012ccc:	53                   	push   ebx
c0012ccd:	b8 0b 00 00 00       	mov    eax,0xb
c0012cd2:	83 ec 08             	sub    esp,0x8
c0012cd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cd9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ce0:	80 fa 19             	cmp    dl,0x19
c0012ce3:	77 3d                	ja     c0012d22 <Directory::open()+0x56>
c0012ce5:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c0012cec:	85 d2                	test   edx,edx
c0012cee:	74 32                	je     c0012d22 <Directory::open()+0x56>
c0012cf0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cf6:	85 d2                	test   edx,edx
c0012cf8:	74 28                	je     c0012d22 <Directory::open()+0x56>
c0012cfa:	b8 06 00 00 00       	mov    eax,0x6
c0012cff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d03:	75 1d                	jne    c0012d22 <Directory::open()+0x56>
c0012d05:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d0b:	50                   	push   eax
c0012d0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d0e:	51                   	push   ecx
c0012d0f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d12:	51                   	push   ecx
c0012d13:	52                   	push   edx
c0012d14:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	85 c0                	test   eax,eax
c0012d1c:	75 04                	jne    c0012d22 <Directory::open()+0x56>
c0012d1e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d22:	83 c4 08             	add    esp,0x8
c0012d25:	5b                   	pop    ebx
c0012d26:	c3                   	ret    
c0012d27:	90                   	nop

c0012d28 <Directory::close()>:
c0012d28:	53                   	push   ebx
c0012d29:	b8 0b 00 00 00       	mov    eax,0xb
c0012d2e:	83 ec 08             	sub    esp,0x8
c0012d31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d35:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d3c:	80 fa 19             	cmp    dl,0x19
c0012d3f:	77 41                	ja     c0012d82 <Directory::close()+0x5a>
c0012d41:	8b 1c 95 c0 ab 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5440]
c0012d48:	85 db                	test   ebx,ebx
c0012d4a:	74 36                	je     c0012d82 <Directory::close()+0x5a>
c0012d4c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d53:	74 2d                	je     c0012d82 <Directory::close()+0x5a>
c0012d55:	b8 05 00 00 00       	mov    eax,0x5
c0012d5a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d5e:	74 22                	je     c0012d82 <Directory::close()+0x5a>
c0012d60:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d64:	8b 04 95 c0 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5440]
c0012d6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d71:	53                   	push   ebx
c0012d72:	53                   	push   ebx
c0012d73:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d75:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d7b:	50                   	push   eax
c0012d7c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d7f:	83 c4 10             	add    esp,0x10
c0012d82:	83 c4 08             	add    esp,0x8
c0012d85:	5b                   	pop    ebx
c0012d86:	c3                   	ret    
c0012d87:	90                   	nop

c0012d88 <Directory::unlink()>:
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9b:	80 f9 19             	cmp    cl,0x19
c0012d9e:	77 2f                	ja     c0012dcf <Directory::unlink()+0x47>
c0012da0:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012da7:	85 c9                	test   ecx,ecx
c0012da9:	74 24                	je     c0012dcf <Directory::unlink()+0x47>
c0012dab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db1:	85 c9                	test   ecx,ecx
c0012db3:	74 1a                	je     c0012dcf <Directory::unlink()+0x47>
c0012db5:	b8 06 00 00 00       	mov    eax,0x6
c0012dba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dbe:	75 0f                	jne    c0012dcf <Directory::unlink()+0x47>
c0012dc0:	83 c2 0d             	add    edx,0xd
c0012dc3:	50                   	push   eax
c0012dc4:	50                   	push   eax
c0012dc5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dc7:	52                   	push   edx
c0012dc8:	51                   	push   ecx
c0012dc9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dcc:	83 c4 10             	add    esp,0x10
c0012dcf:	83 c4 0c             	add    esp,0xc
c0012dd2:	c3                   	ret    
c0012dd3:	90                   	nop

c0012dd4 <Directory::rename(char const*)>:
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012ddc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012de7:	80 f9 19             	cmp    cl,0x19
c0012dea:	77 32                	ja     c0012e1e <Directory::rename(char const*)+0x4a>
c0012dec:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012df3:	85 c9                	test   ecx,ecx
c0012df5:	74 27                	je     c0012e1e <Directory::rename(char const*)+0x4a>
c0012df7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dfd:	85 c9                	test   ecx,ecx
c0012dff:	74 1d                	je     c0012e1e <Directory::rename(char const*)+0x4a>
c0012e01:	b8 06 00 00 00       	mov    eax,0x6
c0012e06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e0a:	75 12                	jne    c0012e1e <Directory::rename(char const*)+0x4a>
c0012e0c:	83 c2 0d             	add    edx,0xd
c0012e0f:	50                   	push   eax
c0012e10:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e16:	52                   	push   edx
c0012e17:	51                   	push   ecx
c0012e18:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	83 c4 0c             	add    esp,0xc
c0012e21:	c3                   	ret    

c0012e22 <Directory::exists()>:
c0012e22:	83 ec 0c             	sub    esp,0xc
c0012e25:	31 c0                	xor    eax,eax
c0012e27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e2b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e32:	80 f9 19             	cmp    cl,0x19
c0012e35:	77 24                	ja     c0012e5b <Directory::exists()+0x39>
c0012e37:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012e3e:	85 c9                	test   ecx,ecx
c0012e40:	74 19                	je     c0012e5b <Directory::exists()+0x39>
c0012e42:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e48:	85 c9                	test   ecx,ecx
c0012e4a:	74 0f                	je     c0012e5b <Directory::exists()+0x39>
c0012e4c:	83 c2 0d             	add    edx,0xd
c0012e4f:	50                   	push   eax
c0012e50:	50                   	push   eax
c0012e51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e53:	52                   	push   edx
c0012e54:	51                   	push   ecx
c0012e55:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e58:	83 c4 10             	add    esp,0x10
c0012e5b:	83 c4 0c             	add    esp,0xc
c0012e5e:	c3                   	ret    
c0012e5f:	90                   	nop

c0012e60 <Directory::read(dirent*)>:
c0012e60:	83 ec 1c             	sub    esp,0x1c
c0012e63:	b8 0b 00 00 00       	mov    eax,0xb
c0012e68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e6c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e73:	80 fa 19             	cmp    dl,0x19
c0012e76:	77 30                	ja     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e78:	8b 14 95 c0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5440]
c0012e7f:	85 d2                	test   edx,edx
c0012e81:	74 25                	je     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e83:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e8a:	74 1c                	je     c0012ea8 <Directory::read(dirent*)+0x48>
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e91:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e95:	52                   	push   edx
c0012e96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e9a:	6a 00                	push   0x0
c0012e9c:	68 10 01 00 00       	push   0x110
c0012ea1:	51                   	push   ecx
c0012ea2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ea5:	83 c4 20             	add    esp,0x20
c0012ea8:	83 c4 1c             	add    esp,0x1c
c0012eab:	c3                   	ret    

c0012eac <Directory::create()>:
c0012eac:	83 ec 0c             	sub    esp,0xc
c0012eaf:	b8 0b 00 00 00       	mov    eax,0xb
c0012eb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ebf:	80 f9 19             	cmp    cl,0x19
c0012ec2:	77 2f                	ja     c0012ef3 <Directory::create()+0x47>
c0012ec4:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c0012ecb:	85 c9                	test   ecx,ecx
c0012ecd:	74 24                	je     c0012ef3 <Directory::create()+0x47>
c0012ecf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ed5:	85 c9                	test   ecx,ecx
c0012ed7:	74 1a                	je     c0012ef3 <Directory::create()+0x47>
c0012ed9:	b8 06 00 00 00       	mov    eax,0x6
c0012ede:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ee2:	75 0f                	jne    c0012ef3 <Directory::create()+0x47>
c0012ee4:	83 c2 0d             	add    edx,0xd
c0012ee7:	50                   	push   eax
c0012ee8:	50                   	push   eax
c0012ee9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eeb:	52                   	push   edx
c0012eec:	51                   	push   ecx
c0012eed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	c3                   	ret    
c0012ef7:	90                   	nop

c0012ef8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ef8:	b8 0a 00 00 00       	mov    eax,0xa
c0012efd:	c3                   	ret    

c0012efe <Bus::Bus(char const*)>:
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f0c:	50                   	push   eax
c0012f0d:	e8 60 09 00 00       	call   c0013872 <Device::Device(char const*)>
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	ba d8 74 02 c0       	mov    edx,0xc00274d8
c0012f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1e:	89 10                	mov    DWORD PTR [eax],edx
c0012f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f24:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f2e:	90                   	nop
c0012f2f:	83 c4 0c             	add    esp,0xc
c0012f32:	c3                   	ret    
c0012f33:	90                   	nop

c0012f34 <Bus::~Bus()>:
c0012f34:	83 ec 0c             	sub    esp,0xc
c0012f37:	ba d8 74 02 c0       	mov    edx,0xc00274d8
c0012f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f40:	89 10                	mov    DWORD PTR [eax],edx
c0012f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f46:	83 ec 0c             	sub    esp,0xc
c0012f49:	50                   	push   eax
c0012f4a:	e8 d5 05 00 00       	call   c0013524 <Device::~Device()>
c0012f4f:	83 c4 10             	add    esp,0x10
c0012f52:	90                   	nop
c0012f53:	83 c4 0c             	add    esp,0xc
c0012f56:	c3                   	ret    
c0012f57:	90                   	nop

c0012f58 <Bus::~Bus()>:
c0012f58:	83 ec 0c             	sub    esp,0xc
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f62:	e8 cd ff ff ff       	call   c0012f34 <Bus::~Bus()>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	83 ec 08             	sub    esp,0x8
c0012f6d:	68 58 01 00 00       	push   0x158
c0012f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f76:	e8 1c f2 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0012f7b:	83 c4 10             	add    esp,0x10
c0012f7e:	83 c4 0c             	add    esp,0xc
c0012f81:	c3                   	ret    

c0012f82 <Buzzer::Buzzer(char const*)>:
c0012f82:	83 ec 0c             	sub    esp,0xc
c0012f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f89:	83 ec 08             	sub    esp,0x8
c0012f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f90:	50                   	push   eax
c0012f91:	e8 dc 08 00 00       	call   c0013872 <Device::Device(char const*)>
c0012f96:	83 c4 10             	add    esp,0x10
c0012f99:	ba 04 75 02 c0       	mov    edx,0xc0027504
c0012f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa2:	89 10                	mov    DWORD PTR [eax],edx
c0012fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fa8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb6:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012fc0:	90                   	nop
c0012fc1:	83 c4 0c             	add    esp,0xc
c0012fc4:	c3                   	ret    
c0012fc5:	90                   	nop

c0012fc6 <Buzzer::~Buzzer()>:
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	ba 04 75 02 c0       	mov    edx,0xc0027504
c0012fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd2:	89 10                	mov    DWORD PTR [eax],edx
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	83 ec 0c             	sub    esp,0xc
c0012fdb:	50                   	push   eax
c0012fdc:	e8 43 05 00 00       	call   c0013524 <Device::~Device()>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	90                   	nop
c0012fe5:	83 c4 0c             	add    esp,0xc
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <Buzzer::~Buzzer()>:
c0012fea:	83 ec 0c             	sub    esp,0xc
c0012fed:	83 ec 0c             	sub    esp,0xc
c0012ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff4:	e8 cd ff ff ff       	call   c0012fc6 <Buzzer::~Buzzer()>
c0012ff9:	83 c4 10             	add    esp,0x10
c0012ffc:	83 ec 08             	sub    esp,0x8
c0012fff:	68 5c 01 00 00       	push   0x15c
c0013004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013008:	e8 8a f1 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001300d:	83 c4 10             	add    esp,0x10
c0013010:	83 c4 0c             	add    esp,0xc
c0013013:	c3                   	ret    

c0013014 <Buzzer::stop()>:
c0013014:	83 ec 14             	sub    esp,0x14
c0013017:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001301b:	8b 10                	mov    edx,DWORD PTR [eax]
c001301d:	6a 00                	push   0x0
c001301f:	50                   	push   eax
c0013020:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013023:	83 c4 1c             	add    esp,0x1c
c0013026:	c3                   	ret    

c0013027 <beepThread(void*)>:
c0013027:	53                   	push   ebx
c0013028:	83 ec 08             	sub    esp,0x8
c001302b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001302f:	e8 f8 89 00 00       	call   c001ba2c <unlockScheduler()>
c0013034:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013039:	52                   	push   edx
c001303a:	52                   	push   edx
c001303b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013041:	52                   	push   edx
c0013042:	50                   	push   eax
c0013043:	e8 2a 8f 00 00       	call   c001bf72 <nanoSleep(unsigned long long)>
c0013048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001304b:	e8 c4 ff ff ff       	call   c0013014 <Buzzer::stop()>
c0013050:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013058:	83 c4 18             	add    esp,0x18
c001305b:	5b                   	pop    ebx
c001305c:	e9 57 8e 00 00       	jmp    c001beb8 <blockTask(TaskState)>
c0013061:	90                   	nop

c0013062 <Buzzer::beep(int, int, bool)>:
c0013062:	57                   	push   edi
c0013063:	56                   	push   esi
c0013064:	53                   	push   ebx
c0013065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013069:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001306d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013071:	52                   	push   edx
c0013072:	52                   	push   edx
c0013073:	8b 06                	mov    eax,DWORD PTR [esi]
c0013075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013079:	56                   	push   esi
c001307a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001307d:	83 c4 10             	add    esp,0x10
c0013080:	89 f8                	mov    eax,edi
c0013082:	84 c0                	test   al,al
c0013084:	74 1f                	je     c00130a5 <Buzzer::beep(int, int, bool)+0x43>
c0013086:	50                   	push   eax
c0013087:	50                   	push   eax
c0013088:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001308e:	99                   	cdq    
c001308f:	52                   	push   edx
c0013090:	50                   	push   eax
c0013091:	e8 dc 8e 00 00       	call   c001bf72 <nanoSleep(unsigned long long)>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001309d:	5b                   	pop    ebx
c001309e:	5e                   	pop    esi
c001309f:	5f                   	pop    edi
c00130a0:	e9 6f ff ff ff       	jmp    c0013014 <Buzzer::stop()>
c00130a5:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00130ab:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00130b0:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00130b8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00130bc:	c7 44 24 14 27 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013027
c00130c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130c8:	5b                   	pop    ebx
c00130c9:	5e                   	pop    esi
c00130ca:	5f                   	pop    edi
c00130cb:	e9 84 8a 00 00       	jmp    c001bb54 <Process::createThread(void (*)(void*), void*, int)>

c00130d0 <loadClockSettings()>:
c00130d0:	c7 05 34 a7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a734,0xa
c00130da:	c6 05 31 a7 02 c0 00 	mov    BYTE PTR ds:0xc002a731,0x0
c00130e1:	c6 05 30 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a730,0x1
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <Clock::Clock(char const*)>:
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f1:	83 ec 08             	sub    esp,0x8
c00130f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f8:	50                   	push   eax
c00130f9:	e8 74 07 00 00       	call   c0013872 <Device::Device(char const*)>
c00130fe:	83 c4 10             	add    esp,0x10
c0013101:	ba 34 75 02 c0       	mov    edx,0xc0027534
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 10                	mov    DWORD PTR [eax],edx
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001311a:	90                   	nop
c001311b:	83 c4 0c             	add    esp,0xc
c001311e:	c3                   	ret    
c001311f:	90                   	nop

c0013120 <Clock::~Clock()>:
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	ba 34 75 02 c0       	mov    edx,0xc0027534
c0013128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312c:	89 10                	mov    DWORD PTR [eax],edx
c001312e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013132:	83 ec 0c             	sub    esp,0xc
c0013135:	50                   	push   eax
c0013136:	e8 e9 03 00 00       	call   c0013524 <Device::~Device()>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	90                   	nop
c001313f:	83 c4 0c             	add    esp,0xc
c0013142:	c3                   	ret    
c0013143:	90                   	nop

c0013144 <Clock::~Clock()>:
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	83 ec 0c             	sub    esp,0xc
c001314a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001314e:	e8 cd ff ff ff       	call   c0013120 <Clock::~Clock()>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	83 ec 08             	sub    esp,0x8
c0013159:	68 58 01 00 00       	push   0x158
c001315e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013162:	e8 30 f0 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013167:	83 c4 10             	add    esp,0x10
c001316a:	83 c4 0c             	add    esp,0xc
c001316d:	c3                   	ret    

c001316e <Clock::timeInSecondsLocal()>:
c001316e:	53                   	push   ebx
c001316f:	83 ec 14             	sub    esp,0x14
c0013172:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013176:	8b 10                	mov    edx,DWORD PTR [eax]
c0013178:	50                   	push   eax
c0013179:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001317c:	0f b6 0d 30 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a730
c0013183:	03 0d 34 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a734
c0013189:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001318f:	89 cb                	mov    ebx,ecx
c0013191:	c1 fb 1f             	sar    ebx,0x1f
c0013194:	01 c8                	add    eax,ecx
c0013196:	11 da                	adc    edx,ebx
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	31 c9                	xor    ecx,ecx
c001319d:	80 3d 31 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a731,0x0
c00131a4:	74 05                	je     c00131ab <Clock::timeInSecondsLocal()+0x3d>
c00131a6:	b9 08 07 00 00       	mov    ecx,0x708
c00131ab:	31 db                	xor    ebx,ebx
c00131ad:	01 c8                	add    eax,ecx
c00131af:	11 da                	adc    edx,ebx
c00131b1:	83 c4 08             	add    esp,0x8
c00131b4:	5b                   	pop    ebx
c00131b5:	c3                   	ret    

c00131b6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00131b6:	57                   	push   edi
c00131b7:	56                   	push   esi
c00131b8:	53                   	push   ebx
c00131b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131c7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131ca:	0f b6 05 30 a7 02 c0 	movzx  eax,BYTE PTR ds:0xc002a730
c00131d1:	03 05 34 a7 02 c0    	add    eax,DWORD PTR ds:0xc002a734
c00131d7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131dd:	99                   	cdq    
c00131de:	29 c6                	sub    esi,eax
c00131e0:	19 d7                	sbb    edi,edx
c00131e2:	89 f0                	mov    eax,esi
c00131e4:	89 fa                	mov    edx,edi
c00131e6:	31 f6                	xor    esi,esi
c00131e8:	80 3d 31 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a731,0x0
c00131ef:	74 05                	je     c00131f6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131f1:	be 08 07 00 00       	mov    esi,0x708
c00131f6:	31 ff                	xor    edi,edi
c00131f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131fc:	29 f0                	sub    eax,esi
c00131fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013202:	19 fa                	sbb    edx,edi
c0013204:	89 d8                	mov    eax,ebx
c0013206:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001320a:	5b                   	pop    ebx
c001320b:	5e                   	pop    esi
c001320c:	5f                   	pop    edi
c001320d:	ff e0                	jmp    eax

c001320f <datetimeToSeconds(datetime_t)>:
c001320f:	55                   	push   ebp
c0013210:	57                   	push   edi
c0013211:	56                   	push   esi
c0013212:	53                   	push   ebx
c0013213:	83 ec 14             	sub    esp,0x14
c0013216:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001321a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001321e:	89 d3                	mov    ebx,edx
c0013220:	0f b6 c6             	movzx  eax,dh
c0013223:	c1 eb 10             	shr    ebx,0x10
c0013226:	48                   	dec    eax
c0013227:	66 81 eb 6c 07       	sub    bx,0x76c
c001322c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013230:	0f b6 f5             	movzx  esi,ch
c0013233:	89 cf                	mov    edi,ecx
c0013235:	6b f6 3c             	imul   esi,esi,0x3c
c0013238:	c1 ef 10             	shr    edi,0x10
c001323b:	0f b6 c9             	movzx  ecx,cl
c001323e:	89 f8                	mov    eax,edi
c0013240:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013246:	0f b6 f8             	movzx  edi,al
c0013249:	0f b6 d2             	movzx  edx,dl
c001324c:	01 fe                	add    esi,edi
c001324e:	01 f1                	add    ecx,esi
c0013250:	0f b7 f3             	movzx  esi,bx
c0013253:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013257:	c1 f9 1f             	sar    ecx,0x1f
c001325a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001325f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013263:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013268:	8b 0c 8d 80 75 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8a80]
c001326f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013273:	76 29                	jbe    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c0013275:	f6 c3 03             	test   bl,0x3
c0013278:	75 24                	jne    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c001327a:	31 d2                	xor    edx,edx
c001327c:	bf 64 00 00 00       	mov    edi,0x64
c0013281:	89 d8                	mov    eax,ebx
c0013283:	66 f7 f7             	div    di
c0013286:	66 85 d2             	test   dx,dx
c0013289:	75 12                	jne    c001329d <datetimeToSeconds(datetime_t)+0x8e>
c001328b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013291:	bf 90 01 00 00       	mov    edi,0x190
c0013296:	99                   	cdq    
c0013297:	f7 ff                	idiv   edi
c0013299:	85 d2                	test   edx,edx
c001329b:	75 01                	jne    c001329e <datetimeToSeconds(datetime_t)+0x8f>
c001329d:	41                   	inc    ecx
c001329e:	66 83 fb 46          	cmp    bx,0x46
c00132a2:	76 45                	jbe    c00132e9 <datetimeToSeconds(datetime_t)+0xda>
c00132a4:	bb 46 00 00 00       	mov    ebx,0x46
c00132a9:	bf 64 00 00 00       	mov    edi,0x64
c00132ae:	bd 90 01 00 00       	mov    ebp,0x190
c00132b3:	b8 6d 01 00 00       	mov    eax,0x16d
c00132b8:	f6 c3 03             	test   bl,0x3
c00132bb:	75 23                	jne    c00132e0 <datetimeToSeconds(datetime_t)+0xd1>
c00132bd:	89 d8                	mov    eax,ebx
c00132bf:	99                   	cdq    
c00132c0:	f7 ff                	idiv   edi
c00132c2:	b8 6e 01 00 00       	mov    eax,0x16e
c00132c7:	85 d2                	test   edx,edx
c00132c9:	75 15                	jne    c00132e0 <datetimeToSeconds(datetime_t)+0xd1>
c00132cb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132d1:	99                   	cdq    
c00132d2:	f7 fd                	idiv   ebp
c00132d4:	83 fa 01             	cmp    edx,0x1
c00132d7:	19 c0                	sbb    eax,eax
c00132d9:	f7 d0                	not    eax
c00132db:	05 6e 01 00 00       	add    eax,0x16e
c00132e0:	01 c1                	add    ecx,eax
c00132e2:	43                   	inc    ebx
c00132e3:	39 f3                	cmp    ebx,esi
c00132e5:	7c cc                	jl     c00132b3 <datetimeToSeconds(datetime_t)+0xa4>
c00132e7:	eb 35                	jmp    c001331e <datetimeToSeconds(datetime_t)+0x10f>
c00132e9:	74 33                	je     c001331e <datetimeToSeconds(datetime_t)+0x10f>
c00132eb:	b8 45 00 00 00       	mov    eax,0x45
c00132f0:	89 c2                	mov    edx,eax
c00132f2:	83 e2 03             	and    edx,0x3
c00132f5:	39 f0                	cmp    eax,esi
c00132f7:	7e 0f                	jle    c0013308 <datetimeToSeconds(datetime_t)+0xf9>
c00132f9:	83 fa 01             	cmp    edx,0x1
c00132fc:	19 d2                	sbb    edx,edx
c00132fe:	48                   	dec    eax
c00132ff:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013306:	eb e8                	jmp    c00132f0 <datetimeToSeconds(datetime_t)+0xe1>
c0013308:	b8 6d 01 00 00       	mov    eax,0x16d
c001330d:	85 d2                	test   edx,edx
c001330f:	75 0b                	jne    c001331c <datetimeToSeconds(datetime_t)+0x10d>
c0013311:	66 83 fb 01          	cmp    bx,0x1
c0013315:	19 c0                	sbb    eax,eax
c0013317:	05 6e 01 00 00       	add    eax,0x16e
c001331c:	29 c1                	sub    ecx,eax
c001331e:	b8 80 51 01 00       	mov    eax,0x15180
c0013323:	f7 e9                	imul   ecx
c0013325:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013329:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001332d:	83 c4 14             	add    esp,0x14
c0013330:	5b                   	pop    ebx
c0013331:	5e                   	pop    esi
c0013332:	5f                   	pop    edi
c0013333:	5d                   	pop    ebp
c0013334:	c3                   	ret    
c0013335:	90                   	nop

c0013336 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013336:	57                   	push   edi
c0013337:	56                   	push   esi
c0013338:	53                   	push   ebx
c0013339:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001333d:	8b 06                	mov    eax,DWORD PTR [esi]
c001333f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013342:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013346:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001334a:	e8 c0 fe ff ff       	call   c001320f <datetimeToSeconds(datetime_t)>
c001334f:	59                   	pop    ecx
c0013350:	0f b6 0d 30 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a730
c0013357:	5b                   	pop    ebx
c0013358:	03 0d 34 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a734
c001335e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013364:	89 cb                	mov    ebx,ecx
c0013366:	c1 fb 1f             	sar    ebx,0x1f
c0013369:	29 c8                	sub    eax,ecx
c001336b:	19 da                	sbb    edx,ebx
c001336d:	31 c9                	xor    ecx,ecx
c001336f:	80 3d 31 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a731,0x0
c0013376:	74 05                	je     c001337d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013378:	b9 08 07 00 00       	mov    ecx,0x708
c001337d:	31 db                	xor    ebx,ebx
c001337f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013383:	29 c8                	sub    eax,ecx
c0013385:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013389:	19 da                	sbb    edx,ebx
c001338b:	89 f8                	mov    eax,edi
c001338d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013391:	5b                   	pop    ebx
c0013392:	5e                   	pop    esi
c0013393:	5f                   	pop    edi
c0013394:	ff e0                	jmp    eax

c0013396 <secondsToDatetime(unsigned long long)>:
c0013396:	55                   	push   ebp
c0013397:	57                   	push   edi
c0013398:	56                   	push   esi
c0013399:	53                   	push   ebx
c001339a:	83 ec 1c             	sub    esp,0x1c
c001339d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00133a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00133a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00133a9:	6a 00                	push   0x0
c00133ab:	68 80 51 01 00       	push   0x15180
c00133b0:	55                   	push   ebp
c00133b1:	57                   	push   edi
c00133b2:	e8 25 01 01 00       	call   c00234dc <__udivdi3>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00133c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133c4:	6a 00                	push   0x0
c00133c6:	68 80 51 01 00       	push   0x15180
c00133cb:	55                   	push   ebp
c00133cc:	57                   	push   edi
c00133cd:	bf 10 0e 00 00       	mov    edi,0xe10
c00133d2:	e8 05 02 01 00       	call   c00235dc <__umoddi3>
c00133d7:	83 c4 10             	add    esp,0x10
c00133da:	99                   	cdq    
c00133db:	f7 ff                	idiv   edi
c00133dd:	bf 3c 00 00 00       	mov    edi,0x3c
c00133e2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133e5:	89 d0                	mov    eax,edx
c00133e7:	99                   	cdq    
c00133e8:	f7 ff                	idiv   edi
c00133ea:	85 db                	test   ebx,ebx
c00133ec:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133ef:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133f2:	79 11                	jns    c0013405 <secondsToDatetime(unsigned long long)+0x6f>
c00133f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133f8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133fe:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013403:	eb 07                	jmp    c001340c <secondsToDatetime(unsigned long long)+0x76>
c0013405:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001340a:	89 d8                	mov    eax,ebx
c001340c:	bf b4 05 00 00       	mov    edi,0x5b4
c0013411:	99                   	cdq    
c0013412:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013417:	f7 f9                	idiv   ecx
c0013419:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001341e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013422:	31 d2                	xor    edx,edx
c0013424:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001342c:	01 c3                	add    ebx,eax
c001342e:	89 d8                	mov    eax,ebx
c0013430:	f7 f1                	div    ecx
c0013432:	31 d2                	xor    edx,edx
c0013434:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013437:	89 d8                	mov    eax,ebx
c0013439:	f7 f7                	div    edi
c001343b:	31 d2                	xor    edx,edx
c001343d:	29 c1                	sub    ecx,eax
c001343f:	89 d8                	mov    eax,ebx
c0013441:	f7 f5                	div    ebp
c0013443:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013448:	29 c1                	sub    ecx,eax
c001344a:	31 d2                	xor    edx,edx
c001344c:	89 c8                	mov    eax,ecx
c001344e:	f7 f5                	div    ebp
c0013450:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013459:	31 d2                	xor    edx,edx
c001345b:	89 c8                	mov    eax,ecx
c001345d:	f7 f5                	div    ebp
c001345f:	31 d2                	xor    edx,edx
c0013461:	01 c3                	add    ebx,eax
c0013463:	89 c8                	mov    eax,ecx
c0013465:	f7 f7                	div    edi
c0013467:	bf 99 00 00 00       	mov    edi,0x99
c001346c:	29 c3                	sub    ebx,eax
c001346e:	31 d2                	xor    edx,edx
c0013470:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013478:	29 c3                	sub    ebx,eax
c001347a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001347d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013480:	bb 05 00 00 00       	mov    ebx,0x5
c0013485:	83 c1 02             	add    ecx,0x2
c0013488:	89 c8                	mov    eax,ecx
c001348a:	f7 f7                	div    edi
c001348c:	31 d2                	xor    edx,edx
c001348e:	89 c7                	mov    edi,eax
c0013490:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013496:	83 c0 02             	add    eax,0x2
c0013499:	f7 f3                	div    ebx
c001349b:	89 eb                	mov    ebx,ebp
c001349d:	29 c3                	sub    ebx,eax
c001349f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00134a5:	88 1e                	mov    BYTE PTR [esi],bl
c00134a7:	19 c0                	sbb    eax,eax
c00134a9:	31 d2                	xor    edx,edx
c00134ab:	83 e0 0c             	and    eax,0xc
c00134ae:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00134b2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00134ba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00134be:	83 f9 01             	cmp    ecx,0x1
c00134c1:	0f 96 c2             	setbe  dl
c00134c4:	41                   	inc    ecx
c00134c5:	01 d0                	add    eax,edx
c00134c7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134ca:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134ce:	83 c4 1c             	add    esp,0x1c
c00134d1:	89 f0                	mov    eax,esi
c00134d3:	5b                   	pop    ebx
c00134d4:	5e                   	pop    esi
c00134d5:	5f                   	pop    edi
c00134d6:	5d                   	pop    ebp
c00134d7:	c2 04 00             	ret    0x4

c00134da <Clock::timeInDatetimeLocal()>:
c00134da:	53                   	push   ebx
c00134db:	83 ec 14             	sub    esp,0x14
c00134de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134e6:	e8 83 fc ff ff       	call   c001316e <Clock::timeInSecondsLocal()>
c00134eb:	83 c4 0c             	add    esp,0xc
c00134ee:	52                   	push   edx
c00134ef:	50                   	push   eax
c00134f0:	53                   	push   ebx
c00134f1:	e8 a0 fe ff ff       	call   c0013396 <secondsToDatetime(unsigned long long)>
c00134f6:	89 d8                	mov    eax,ebx
c00134f8:	83 c4 14             	add    esp,0x14
c00134fb:	5b                   	pop    ebx
c00134fc:	c2 04 00             	ret    0x4
c00134ff:	90                   	nop

c0013500 <Device::hibernate()>:
c0013500:	c3                   	ret    
c0013501:	90                   	nop

c0013502 <Device::wake()>:
c0013502:	c3                   	ret    
c0013503:	90                   	nop

c0013504 <Device::detect()>:
c0013504:	c3                   	ret    
c0013505:	90                   	nop

c0013506 <Device::disableLegacy()>:
c0013506:	c3                   	ret    
c0013507:	90                   	nop

c0013508 <Device::powerSaving(PowerSavingLevel)>:
c0013508:	c3                   	ret    
c0013509:	90                   	nop

c001350a <DriverlessDevice::close(int, int, void*)>:
c001350a:	31 c0                	xor    eax,eax
c001350c:	c3                   	ret    
c001350d:	90                   	nop

c001350e <DriverlessDevice::detect()>:
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <DriverlessDevice::open(int, int, void*)>:
c0013510:	83 ec 18             	sub    esp,0x18
c0013513:	68 b0 75 02 c0       	push   0xc00275b0
c0013518:	e8 ba 55 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c001351d:	83 c8 ff             	or     eax,0xffffffff
c0013520:	83 c4 1c             	add    esp,0x1c
c0013523:	c3                   	ret    

c0013524 <Device::~Device()>:
c0013524:	ba d8 75 02 c0       	mov    edx,0xc00275d8
c0013529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001352d:	89 10                	mov    DWORD PTR [eax],edx
c001352f:	90                   	nop
c0013530:	c3                   	ret    
c0013531:	90                   	nop

c0013532 <Device::~Device()>:
c0013532:	83 ec 0c             	sub    esp,0xc
c0013535:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013539:	e8 e6 ff ff ff       	call   c0013524 <Device::~Device()>
c001353e:	83 c4 04             	add    esp,0x4
c0013541:	83 ec 08             	sub    esp,0x8
c0013544:	68 58 01 00 00       	push   0x158
c0013549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001354d:	e8 45 ec ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	83 c4 0c             	add    esp,0xc
c0013558:	c3                   	ret    
c0013559:	90                   	nop

c001355a <Device::findAndLoadDriver()>:
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Device::preOpenPCI(PCIDeviceInfo)>:
c001355c:	57                   	push   edi
c001355d:	b9 09 00 00 00       	mov    ecx,0x9
c0013562:	56                   	push   esi
c0013563:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013567:	8d 74 24 10          	lea    esi,[esp+0x10]
c001356b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013575:	81 c7 18 01 00 00    	add    edi,0x118
c001357b:	fc                   	cld    
c001357c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001357e:	5e                   	pop    esi
c001357f:	5f                   	pop    edi
c0013580:	c3                   	ret    
c0013581:	90                   	nop

c0013582 <Device::preOpenACPI(void*, char*, char*)>:
c0013582:	56                   	push   esi
c0013583:	53                   	push   ebx
c0013584:	83 ec 08             	sub    esp,0x8
c0013587:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001358b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001358f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00135a3:	6a 1e                	push   0x1e
c00135a5:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00135ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00135af:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00135b5:	50                   	push   eax
c00135b6:	e8 d4 d0 fe ff       	call   c000068f <memcpy>
c00135bb:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135bf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00135c3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135cb:	83 c4 14             	add    esp,0x14
c00135ce:	5b                   	pop    ebx
c00135cf:	5e                   	pop    esi
c00135d0:	e9 ba d0 fe ff       	jmp    c000068f <memcpy>
c00135d5:	90                   	nop

c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135d6:	55                   	push   ebp
c00135d7:	57                   	push   edi
c00135d8:	56                   	push   esi
c00135d9:	53                   	push   ebx
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135e5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135ed:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135f2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135f9:	75 0b                	jne    c0013606 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00135fd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013601:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013604:	eb 24                	jmp    c001362a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013606:	e8 49 43 00 00       	call   c0017954 <CPU::current()>
c001360b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013611:	8b 10                	mov    edx,DWORD PTR [eax]
c0013613:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013617:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001361b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001361f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013623:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013627:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001362a:	83 c4 0c             	add    esp,0xc
c001362d:	5b                   	pop    ebx
c001362e:	5e                   	pop    esi
c001362f:	5f                   	pop    edi
c0013630:	5d                   	pop    ebp
c0013631:	ff e0                	jmp    eax
c0013633:	90                   	nop

c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013634:	57                   	push   edi
c0013635:	56                   	push   esi
c0013636:	53                   	push   ebx
c0013637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001363f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013643:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013648:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001364f:	75 0b                	jne    c001365c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013651:	8b 00                	mov    eax,DWORD PTR [eax]
c0013653:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013657:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001365a:	eb 20                	jmp    c001367c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001365c:	e8 f3 42 00 00       	call   c0017954 <CPU::current()>
c0013661:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013667:	8b 10                	mov    edx,DWORD PTR [eax]
c0013669:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001366d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013671:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013675:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013679:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001367c:	5b                   	pop    ebx
c001367d:	5e                   	pop    esi
c001367e:	5f                   	pop    edi
c001367f:	ff e0                	jmp    eax
c0013681:	90                   	nop

c0013682 <Device::addChild(Device*)>:
c0013682:	53                   	push   ebx
c0013683:	83 ec 08             	sub    esp,0x8
c0013686:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001368a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001368e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013694:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001369a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001369c:	85 d2                	test   edx,edx
c001369e:	74 04                	je     c00136a4 <Device::addChild(Device*)+0x22>
c00136a0:	89 d3                	mov    ebx,edx
c00136a2:	eb f6                	jmp    c001369a <Device::addChild(Device*)+0x18>
c00136a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00136a7:	83 ec 0c             	sub    esp,0xc
c00136aa:	6a 08                	push   0x8
c00136ac:	e8 d7 ea ff ff       	call   c0012188 <operator new(unsigned long)>
c00136b1:	89 03                	mov    DWORD PTR [ebx],eax
c00136b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136c0:	83 c4 18             	add    esp,0x18
c00136c3:	5b                   	pop    ebx
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop

c00136c6 <Device::removeAllChildren()>:
c00136c6:	56                   	push   esi
c00136c7:	53                   	push   ebx
c00136c8:	52                   	push   edx
c00136c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136cd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136d6:	74 17                	je     c00136ef <Device::removeAllChildren()+0x29>
c00136d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136db:	85 c0                	test   eax,eax
c00136dd:	74 0c                	je     c00136eb <Device::removeAllChildren()+0x25>
c00136df:	83 ec 0c             	sub    esp,0xc
c00136e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00136e4:	50                   	push   eax
c00136e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136ed:	eb e4                	jmp    c00136d3 <Device::removeAllChildren()+0xd>
c00136ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136fb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013701:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013708:	58                   	pop    eax
c0013709:	5b                   	pop    ebx
c001370a:	5e                   	pop    esi
c001370b:	c3                   	ret    

c001370c <Device::hibernateAll()>:
c001370c:	53                   	push   ebx
c001370d:	83 ec 14             	sub    esp,0x14
c0013710:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013714:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013716:	53                   	push   ebx
c0013717:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001371a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013720:	83 c4 10             	add    esp,0x10
c0013723:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013726:	74 0f                	je     c0013737 <Device::hibernateAll()+0x2b>
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001372e:	e8 d9 ff ff ff       	call   c001370c <Device::hibernateAll()>
c0013733:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013735:	eb e9                	jmp    c0013720 <Device::hibernateAll()+0x14>
c0013737:	83 c4 08             	add    esp,0x8
c001373a:	5b                   	pop    ebx
c001373b:	c3                   	ret    

c001373c <Device::wakeAll()>:
c001373c:	53                   	push   ebx
c001373d:	83 ec 14             	sub    esp,0x14
c0013740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013746:	53                   	push   ebx
c0013747:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001374a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013750:	83 c4 10             	add    esp,0x10
c0013753:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013756:	74 0f                	je     c0013767 <Device::wakeAll()+0x2b>
c0013758:	83 ec 0c             	sub    esp,0xc
c001375b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001375e:	e8 d9 ff ff ff       	call   c001373c <Device::wakeAll()>
c0013763:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013765:	eb e9                	jmp    c0013750 <Device::wakeAll()+0x14>
c0013767:	83 c4 08             	add    esp,0x8
c001376a:	5b                   	pop    ebx
c001376b:	c3                   	ret    

c001376c <Device::detectAll()>:
c001376c:	53                   	push   ebx
c001376d:	83 ec 14             	sub    esp,0x14
c0013770:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013774:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013776:	53                   	push   ebx
c0013777:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001377a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013786:	74 0f                	je     c0013797 <Device::detectAll()+0x2b>
c0013788:	83 ec 0c             	sub    esp,0xc
c001378b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001378e:	e8 d9 ff ff ff       	call   c001376c <Device::detectAll()>
c0013793:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013795:	eb e9                	jmp    c0013780 <Device::detectAll()+0x14>
c0013797:	83 c4 08             	add    esp,0x8
c001379a:	5b                   	pop    ebx
c001379b:	c3                   	ret    

c001379c <Device::disableLegacyAll()>:
c001379c:	53                   	push   ebx
c001379d:	83 ec 14             	sub    esp,0x14
c00137a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a6:	53                   	push   ebx
c00137a7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00137aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137b6:	74 0f                	je     c00137c7 <Device::disableLegacyAll()+0x2b>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137be:	e8 d9 ff ff ff       	call   c001379c <Device::disableLegacyAll()>
c00137c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137c5:	eb e9                	jmp    c00137b0 <Device::disableLegacyAll()+0x14>
c00137c7:	83 c4 08             	add    esp,0x8
c00137ca:	5b                   	pop    ebx
c00137cb:	c3                   	ret    

c00137cc <Device::loadDriversForAll()>:
c00137cc:	53                   	push   ebx
c00137cd:	83 ec 08             	sub    esp,0x8
c00137d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137da:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137dc:	85 db                	test   ebx,ebx
c00137de:	74 12                	je     c00137f2 <Device::loadDriversForAll()+0x26>
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137e6:	e8 e1 ff ff ff       	call   c00137cc <Device::loadDriversForAll()>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	89 d8                	mov    eax,ebx
c00137f0:	eb e8                	jmp    c00137da <Device::loadDriversForAll()+0xe>
c00137f2:	83 c4 08             	add    esp,0x8
c00137f5:	5b                   	pop    ebx
c00137f6:	c3                   	ret    
c00137f7:	90                   	nop

c00137f8 <Device::closeAll()>:
c00137f8:	53                   	push   ebx
c00137f9:	83 ec 08             	sub    esp,0x8
c00137fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013800:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013802:	6a 00                	push   0x0
c0013804:	6a 00                	push   0x0
c0013806:	6a 00                	push   0x0
c0013808:	53                   	push   ebx
c0013809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001380c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013818:	74 0f                	je     c0013829 <Device::closeAll()+0x31>
c001381a:	83 ec 0c             	sub    esp,0xc
c001381d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013820:	e8 d3 ff ff ff       	call   c00137f8 <Device::closeAll()>
c0013825:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013827:	eb e9                	jmp    c0013812 <Device::closeAll()+0x1a>
c0013829:	83 c4 08             	add    esp,0x8
c001382c:	5b                   	pop    ebx
c001382d:	c3                   	ret    

c001382e <Device::powerSavingAll(PowerSavingLevel)>:
c001382e:	56                   	push   esi
c001382f:	53                   	push   ebx
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013837:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001383b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001384e:	74 0f                	je     c001385f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013850:	52                   	push   edx
c0013851:	52                   	push   edx
c0013852:	56                   	push   esi
c0013853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013856:	e8 d3 ff ff ff       	call   c001382e <Device::powerSavingAll(PowerSavingLevel)>
c001385b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001385d:	eb e9                	jmp    c0013848 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001385f:	58                   	pop    eax
c0013860:	5b                   	pop    ebx
c0013861:	5e                   	pop    esi
c0013862:	c3                   	ret    
c0013863:	90                   	nop

c0013864 <Device::setName(char const*)>:
c0013864:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001386c:	e9 f3 ce fe ff       	jmp    c0000764 <strcpy>
c0013871:	90                   	nop

c0013872 <Device::Device(char const*)>:
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	ba d8 75 02 c0       	mov    edx,0xc00275d8
c001387a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387e:	89 10                	mov    DWORD PTR [eax],edx
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001388e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013892:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001389c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138b8:	83 ec 08             	sub    esp,0x8
c00138bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c3:	e8 9c ff ff ff       	call   c0013864 <Device::setName(char const*)>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	83 ec 0c             	sub    esp,0xc
c00138ce:	6a 08                	push   0x8
c00138d0:	e8 b3 e8 ff ff       	call   c0012188 <operator new(unsigned long)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138e9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013903:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013909:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013914:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001391b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013938:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013946:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013954:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001395e:	90                   	nop
c001395f:	83 c4 0c             	add    esp,0xc
c0013962:	c3                   	ret    
c0013963:	90                   	nop

c0013964 <Device::getName()>:
c0013964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013968:	05 d0 00 00 00       	add    eax,0xd0
c001396d:	c3                   	ret    

c001396e <DriverlessDevice::DriverlessDevice(char const*)>:
c001396e:	83 ec 0c             	sub    esp,0xc
c0013971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013975:	83 ec 08             	sub    esp,0x8
c0013978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001397c:	50                   	push   eax
c001397d:	e8 f0 fe ff ff       	call   c0013872 <Device::Device(char const*)>
c0013982:	83 c4 10             	add    esp,0x10
c0013985:	ba 04 76 02 c0       	mov    edx,0xc0027604
c001398a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398e:	89 10                	mov    DWORD PTR [eax],edx
c0013990:	90                   	nop
c0013991:	83 c4 0c             	add    esp,0xc
c0013994:	c3                   	ret    
c0013995:	90                   	nop

c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013996:	57                   	push   edi
c0013997:	56                   	push   esi
c0013998:	53                   	push   ebx
c0013999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001399d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00139a5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00139ab:	75 0c                	jne    c00139b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00139ad:	52                   	push   edx
c00139ae:	52                   	push   edx
c00139af:	53                   	push   ebx
c00139b0:	56                   	push   esi
c00139b1:	e8 7e 1a 01 00       	call   c0025434 <LinkedList<Device>::addElement(Device*)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00139bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139c2:	74 12                	je     c00139d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00139c4:	50                   	push   eax
c00139c5:	57                   	push   edi
c00139c6:	56                   	push   esi
c00139c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139ca:	e8 c7 ff ff ff       	call   c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139d1:	83 c4 10             	add    esp,0x10
c00139d4:	eb e9                	jmp    c00139bf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139d6:	5b                   	pop    ebx
c00139d7:	5e                   	pop    esi
c00139d8:	5f                   	pop    edi
c00139d9:	c3                   	ret    

c00139da <getDevicesOfType(DeviceType)>:
c00139da:	53                   	push   ebx
c00139db:	83 ec 14             	sub    esp,0x14
c00139de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139e2:	53                   	push   ebx
c00139e3:	e8 28 1b 01 00       	call   c0025510 <LinkedList<Device>::LinkedList()>
c00139e8:	83 c4 0c             	add    esp,0xc
c00139eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139ef:	53                   	push   ebx
c00139f0:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c00139f6:	e8 9b ff ff ff       	call   c0013996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139fb:	89 d8                	mov    eax,ebx
c00139fd:	83 c4 18             	add    esp,0x18
c0013a00:	5b                   	pop    ebx
c0013a01:	c2 04 00             	ret    0x4

c0013a04 <HardDiskController::HardDiskController(char const*)>:
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0b:	83 ec 08             	sub    esp,0x8
c0013a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a12:	50                   	push   eax
c0013a13:	e8 5a fe ff ff       	call   c0013872 <Device::Device(char const*)>
c0013a18:	83 c4 10             	add    esp,0x10
c0013a1b:	ba 30 76 02 c0       	mov    edx,0xc0027630
c0013a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a24:	89 10                	mov    DWORD PTR [eax],edx
c0013a26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a34:	90                   	nop
c0013a35:	83 c4 0c             	add    esp,0xc
c0013a38:	c3                   	ret    
c0013a39:	90                   	nop

c0013a3a <HardDiskController::~HardDiskController()>:
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	ba 30 76 02 c0       	mov    edx,0xc0027630
c0013a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a46:	89 10                	mov    DWORD PTR [eax],edx
c0013a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	50                   	push   eax
c0013a50:	e8 cf fa ff ff       	call   c0013524 <Device::~Device()>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	90                   	nop
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	c3                   	ret    
c0013a5d:	90                   	nop

c0013a5e <HardDiskController::~HardDiskController()>:
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	83 ec 0c             	sub    esp,0xc
c0013a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a68:	e8 cd ff ff ff       	call   c0013a3a <HardDiskController::~HardDiskController()>
c0013a6d:	83 c4 10             	add    esp,0x10
c0013a70:	83 ec 08             	sub    esp,0x8
c0013a73:	68 58 01 00 00       	push   0x158
c0013a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7c:	e8 16 e7 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	83 c4 0c             	add    esp,0xc
c0013a87:	c3                   	ret    

c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8f:	83 ec 08             	sub    esp,0x8
c0013a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a96:	50                   	push   eax
c0013a97:	e8 d6 fd ff ff       	call   c0013872 <Device::Device(char const*)>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	ba 5c 76 02 c0       	mov    edx,0xc002765c
c0013aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa8:	89 10                	mov    DWORD PTR [eax],edx
c0013aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ad2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ad6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aea:	90                   	nop
c0013aeb:	83 c4 0c             	add    esp,0xc
c0013aee:	c3                   	ret    
c0013aef:	90                   	nop

c0013af0 <PhysicalDisk::startCache()>:
c0013af0:	56                   	push   esi
c0013af1:	53                   	push   ebx
c0013af2:	83 ec 10             	sub    esp,0x10
c0013af5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af9:	6a 30                	push   0x30
c0013afb:	e8 88 e6 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013b00:	89 c6                	mov    esi,eax
c0013b02:	58                   	pop    eax
c0013b03:	5a                   	pop    edx
c0013b04:	53                   	push   ebx
c0013b05:	56                   	push   esi
c0013b06:	e8 15 25 00 00       	call   c0016020 <VCache::VCache(PhysicalDisk*)>
c0013b0b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013b11:	83 c4 14             	add    esp,0x14
c0013b14:	5b                   	pop    ebx
c0013b15:	5e                   	pop    esi
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <PhysicalDisk::~PhysicalDisk()>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	ba 5c 76 02 c0       	mov    edx,0xc002765c
c0013b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b24:	89 10                	mov    DWORD PTR [eax],edx
c0013b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	50                   	push   eax
c0013b2e:	e8 f1 f9 ff ff       	call   c0013524 <Device::~Device()>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	90                   	nop
c0013b37:	83 c4 0c             	add    esp,0xc
c0013b3a:	c3                   	ret    
c0013b3b:	90                   	nop

c0013b3c <PhysicalDisk::~PhysicalDisk()>:
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	83 ec 0c             	sub    esp,0xc
c0013b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b46:	e8 cd ff ff ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	83 ec 08             	sub    esp,0x8
c0013b51:	68 6c 01 00 00       	push   0x16c
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 38 e6 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 c4 0c             	add    esp,0xc
c0013b65:	c3                   	ret    

c0013b66 <FPU::FPU(char const*)>:
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6d:	83 ec 08             	sub    esp,0x8
c0013b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b74:	50                   	push   eax
c0013b75:	e8 f8 fc ff ff       	call   c0013872 <Device::Device(char const*)>
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	ba 9c 76 02 c0       	mov    edx,0xc002769c
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	89 10                	mov    DWORD PTR [eax],edx
c0013b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b96:	90                   	nop
c0013b97:	83 c4 0c             	add    esp,0xc
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <FPU::~FPU()>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	ba 9c 76 02 c0       	mov    edx,0xc002769c
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	89 10                	mov    DWORD PTR [eax],edx
c0013baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	50                   	push   eax
c0013bb2:	e8 6d f9 ff ff       	call   c0013524 <Device::~Device()>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	90                   	nop
c0013bbb:	83 c4 0c             	add    esp,0xc
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <FPU::~FPU()>:
c0013bc0:	83 ec 0c             	sub    esp,0xc
c0013bc3:	83 ec 0c             	sub    esp,0xc
c0013bc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bca:	e8 cd ff ff ff       	call   c0013b9c <FPU::~FPU()>
c0013bcf:	83 c4 10             	add    esp,0x10
c0013bd2:	83 ec 08             	sub    esp,0x8
c0013bd5:	68 58 01 00 00       	push   0x158
c0013bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bde:	e8 b4 e5 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	83 c4 0c             	add    esp,0xc
c0013be9:	c3                   	ret    

c0013bea <setupFPU()>:
c0013bea:	53                   	push   ebx
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c0013bf4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bfb:	74 19                	je     c0013c16 <setupFPU()+0x2c>
c0013bfd:	83 ec 0c             	sub    esp,0xc
c0013c00:	68 58 01 00 00       	push   0x158
c0013c05:	e8 7e e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c0a:	89 c3                	mov    ebx,eax
c0013c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0f:	e8 02 e5 00 00       	call   c0022116 <AVX::AVX()>
c0013c14:	eb 5b                	jmp    c0013c71 <setupFPU()+0x87>
c0013c16:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013c1c:	84 c0                	test   al,al
c0013c1e:	79 19                	jns    c0013c39 <setupFPU()+0x4f>
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	68 58 01 00 00       	push   0x158
c0013c28:	e8 5b e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c2d:	89 c3                	mov    ebx,eax
c0013c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c32:	e8 05 e6 00 00       	call   c002223c <SSE::SSE()>
c0013c37:	eb 38                	jmp    c0013c71 <setupFPU()+0x87>
c0013c39:	a8 20                	test   al,0x20
c0013c3b:	74 19                	je     c0013c56 <setupFPU()+0x6c>
c0013c3d:	83 ec 0c             	sub    esp,0xc
c0013c40:	68 58 01 00 00       	push   0x158
c0013c45:	e8 3e e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c4a:	89 c3                	mov    ebx,eax
c0013c4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c4f:	e8 52 e5 00 00       	call   c00221a6 <MMX::MMX()>
c0013c54:	eb 1b                	jmp    c0013c71 <setupFPU()+0x87>
c0013c56:	a8 10                	test   al,0x10
c0013c58:	74 1c                	je     c0013c76 <setupFPU()+0x8c>
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	68 58 01 00 00       	push   0x158
c0013c62:	e8 21 e5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0013c67:	89 c3                	mov    ebx,eax
c0013c69:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c6c:	e8 59 e6 00 00       	call   c00222ca <x87::x87()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	eb 35                	jmp    c0013cab <setupFPU()+0xc1>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	83 e0 ef             	and    eax,0xffffffef
c0013c7c:	31 db                	xor    ebx,ebx
c0013c7e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c84:	68 88 76 02 c0       	push   0xc0027688
c0013c89:	e8 e9 e5 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0013c8e:	e8 c1 3c 00 00       	call   c0017954 <CPU::current()>
c0013c93:	e8 bc 3c 00 00       	call   c0017954 <CPU::current()>
c0013c98:	e8 cb 18 01 00       	call   c0025568 <CPU::readCR0()>
c0013c9d:	83 c8 04             	or     eax,0x4
c0013ca0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ca3:	e8 d2 18 01 00       	call   c002557a <CPU::writeCR0(unsigned long)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	89 d8                	mov    eax,ebx
c0013cad:	83 c4 08             	add    esp,0x8
c0013cb0:	5b                   	pop    ebx
c0013cb1:	c3                   	ret    

c0013cb2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013cb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013cba:	c1 e0 04             	shl    eax,0x4
c0013cbd:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013cc1:	8d 50 10             	lea    edx,[eax+0x10]
c0013cc4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013cca:	74 08                	je     c0013cd4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013ccc:	83 c0 04             	add    eax,0x4
c0013ccf:	39 d0                	cmp    eax,edx
c0013cd1:	75 f1                	jne    c0013cc4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cd3:	c3                   	ret    
c0013cd4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cde:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ce8:	eb e2                	jmp    c0013ccc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cea:	57                   	push   edi
c0013ceb:	31 c0                	xor    eax,eax
c0013ced:	56                   	push   esi
c0013cee:	53                   	push   ebx
c0013cef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cf3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cf7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cfb:	89 da                	mov    edx,ebx
c0013cfd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d01:	c1 e2 04             	shl    edx,0x4
c0013d04:	01 ca                	add    edx,ecx
c0013d06:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013d0e:	74 16                	je     c0013d26 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013d10:	40                   	inc    eax
c0013d11:	83 f8 04             	cmp    eax,0x4
c0013d14:	75 f0                	jne    c0013d06 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013d16:	c7 44 24 10 cc 76 02 c0 	mov    DWORD PTR [esp+0x10],0xc00276cc
c0013d1e:	5b                   	pop    ebx
c0013d1f:	5e                   	pop    esi
c0013d20:	5f                   	pop    edi
c0013d21:	e9 b1 4d 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>
c0013d26:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d29:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d2c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d32:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d38:	5b                   	pop    ebx
c0013d39:	5e                   	pop    esi
c0013d3a:	5f                   	pop    edi
c0013d3b:	c3                   	ret    

c0013d3c <doubleFault(regs*, void*)>:
c0013d3c:	55                   	push   ebp
c0013d3d:	89 e5                	mov    ebp,esp
c0013d3f:	83 ec 08             	sub    esp,0x8
c0013d42:	83 ec 0c             	sub    esp,0xc
c0013d45:	68 07 77 02 c0       	push   0xc0027707
c0013d4a:	e8 88 4d 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0013d4f:	83 c4 10             	add    esp,0x10
c0013d52:	90                   	nop
c0013d53:	c9                   	leave  
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d56:	56                   	push   esi
c0013d57:	53                   	push   ebx
c0013d58:	50                   	push   eax
c0013d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d61:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d66:	75 35                	jne    c0013d9d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d68:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d6b:	31 d2                	xor    edx,edx
c0013d6d:	89 c1                	mov    ecx,eax
c0013d6f:	c1 e1 04             	shl    ecx,0x4
c0013d72:	01 f1                	add    ecx,esi
c0013d74:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d7c:	74 3e                	je     c0013dbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d7e:	42                   	inc    edx
c0013d7f:	83 fa 04             	cmp    edx,0x4
c0013d82:	75 f0                	jne    c0013d74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	68 4c 77 02 c0       	push   0xc002774c
c0013d8c:	e8 46 4d 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d99:	5a                   	pop    edx
c0013d9a:	5b                   	pop    ebx
c0013d9b:	5e                   	pop    esi
c0013d9c:	c3                   	ret    
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	56                   	push   esi
c0013da1:	e8 be fb ff ff       	call   c0013964 <Device::getName()>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013dac:	75 ba                	jne    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dae:	83 fb 0f             	cmp    ebx,0xf
c0013db1:	7f 29                	jg     c0013ddc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013db3:	0f b6 9b a0 98 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6760]
c0013dba:	eb ac                	jmp    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dbc:	8d 04 82             	lea    eax,[edx+eax*4]
c0013dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dc3:	8d 04 86             	lea    eax,[esi+eax*4]
c0013dc6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013dcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dd0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013dd6:	89 d8                	mov    eax,ebx
c0013dd8:	5a                   	pop    edx
c0013dd9:	5b                   	pop    ebx
c0013dda:	5e                   	pop    esi
c0013ddb:	c3                   	ret    
c0013ddc:	83 ec 0c             	sub    esp,0xc
c0013ddf:	68 14 77 02 c0       	push   0xc0027714
c0013de4:	e8 ee 4c 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0013de9:	83 c4 10             	add    esp,0x10
c0013dec:	e9 77 ff ff ff       	jmp    c0013d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013df1:	90                   	nop

c0013df2 <InterruptController::clearAllHandlers(int, bool)>:
c0013df2:	56                   	push   esi
c0013df3:	53                   	push   ebx
c0013df4:	52                   	push   edx
c0013df5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013df9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dfd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013e02:	75 61                	jne    c0013e65 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013e04:	8d 46 20             	lea    eax,[esi+0x20]
c0013e07:	c1 e6 04             	shl    esi,0x4
c0013e0a:	c1 e0 04             	shl    eax,0x4
c0013e0d:	01 de                	add    esi,ebx
c0013e0f:	01 d8                	add    eax,ebx
c0013e11:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013e1b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e25:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e2f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e39:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e43:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e4d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e57:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e61:	58                   	pop    eax
c0013e62:	5b                   	pop    ebx
c0013e63:	5e                   	pop    esi
c0013e64:	c3                   	ret    
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	53                   	push   ebx
c0013e69:	e8 f6 fa ff ff       	call   c0013964 <Device::getName()>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e74:	75 8e                	jne    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e76:	83 fe 0f             	cmp    esi,0xf
c0013e79:	7f 09                	jg     c0013e84 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e7b:	0f b6 b6 a0 98 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6760]
c0013e82:	eb 80                	jmp    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 88 77 02 c0       	push   0xc0027788
c0013e8c:	e8 46 4c 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	e9 6b ff ff ff       	jmp    c0013e04 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e99:	90                   	nop

c0013e9a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e9a:	56                   	push   esi
c0013e9b:	53                   	push   ebx
c0013e9c:	52                   	push   edx
c0013e9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ea1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ea5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013eaa:	75 3a                	jne    c0013ee6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013eac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eb0:	8d 50 20             	lea    edx,[eax+0x20]
c0013eb3:	c1 e2 04             	shl    edx,0x4
c0013eb6:	8d 04 16             	lea    eax,[esi+edx*1]
c0013eb9:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013ebd:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013ec3:	74 0b                	je     c0013ed0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013ec5:	83 c0 04             	add    eax,0x4
c0013ec8:	39 d0                	cmp    eax,edx
c0013eca:	75 f1                	jne    c0013ebd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ecc:	58                   	pop    eax
c0013ecd:	5b                   	pop    ebx
c0013ece:	5e                   	pop    esi
c0013ecf:	c3                   	ret    
c0013ed0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eda:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ee4:	eb df                	jmp    c0013ec5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	56                   	push   esi
c0013eea:	e8 75 fa ff ff       	call   c0013964 <Device::getName()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ef5:	75 b5                	jne    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ef7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013efc:	7f 11                	jg     c0013f0f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013efe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f02:	0f b6 80 a0 98 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6760]
c0013f09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f0d:	eb 9d                	jmp    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f0f:	83 ec 0c             	sub    esp,0xc
c0013f12:	68 88 77 02 c0       	push   0xc0027788
c0013f17:	e8 bb 4b 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	eb 8b                	jmp    c0013eac <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f21 <nmiHandler(regs*, void*)>:
c0013f21:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0013f26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f2a:	e9 83 a9 ff ff       	jmp    c000e8b2 <Computer::handleNMI()>

c0013f2f <int_handler>:
c0013f2f:	55                   	push   ebp
c0013f30:	57                   	push   edi
c0013f31:	56                   	push   esi
c0013f32:	53                   	push   ebx
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f3a:	80 3d 54 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b054,0x0
c0013f41:	74 0b                	je     c0013f4e <int_handler+0x1f>
c0013f43:	fa                   	cli    
c0013f44:	f4                   	hlt    
c0013f45:	80 3d 54 b0 02 c0 00 	cmp    BYTE PTR ds:0xc002b054,0x0
c0013f4c:	75 f5                	jne    c0013f43 <int_handler+0x14>
c0013f4e:	e8 01 3a 00 00       	call   c0017954 <CPU::current()>
c0013f53:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f56:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f5c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f5f:	83 f8 17             	cmp    eax,0x17
c0013f62:	77 13                	ja     c0013f77 <int_handler+0x48>
c0013f64:	83 ec 08             	sub    esp,0x8
c0013f67:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f69:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f6c:	0f b6 c0             	movzx  eax,al
c0013f6f:	50                   	push   eax
c0013f70:	57                   	push   edi
c0013f71:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f74:	83 c4 10             	add    esp,0x10
c0013f77:	83 c3 15             	add    ebx,0x15
c0013f7a:	c1 e3 04             	shl    ebx,0x4
c0013f7d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f81:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f88:	31 db                	xor    ebx,ebx
c0013f8a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f8e:	85 c0                	test   eax,eax
c0013f90:	74 13                	je     c0013fa5 <int_handler+0x76>
c0013f92:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f95:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f99:	74 1c                	je     c0013fb7 <int_handler+0x88>
c0013f9b:	83 ec 08             	sub    esp,0x8
c0013f9e:	52                   	push   edx
c0013f9f:	56                   	push   esi
c0013fa0:	ff d0                	call   eax
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	43                   	inc    ebx
c0013fa6:	83 fb 04             	cmp    ebx,0x4
c0013fa9:	75 df                	jne    c0013f8a <int_handler+0x5b>
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	31 c0                	xor    eax,eax
c0013fb0:	5b                   	pop    ebx
c0013fb1:	31 d2                	xor    edx,edx
c0013fb3:	5e                   	pop    esi
c0013fb4:	5f                   	pop    edi
c0013fb5:	5d                   	pop    ebp
c0013fb6:	c3                   	ret    
c0013fb7:	83 ec 08             	sub    esp,0x8
c0013fba:	52                   	push   edx
c0013fbb:	56                   	push   esi
c0013fbc:	ff d0                	call   eax
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	83 c4 0c             	add    esp,0xc
c0013fc4:	5b                   	pop    ebx
c0013fc5:	5e                   	pop    esi
c0013fc6:	5f                   	pop    edi
c0013fc7:	5d                   	pop    ebp
c0013fc8:	c3                   	ret    
c0013fc9:	90                   	nop

c0013fca <InterruptController::InterruptController(char const*)>:
c0013fca:	83 ec 1c             	sub    esp,0x1c
c0013fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd1:	83 ec 08             	sub    esp,0x8
c0013fd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fd8:	50                   	push   eax
c0013fd9:	e8 94 f8 ff ff       	call   c0013872 <Device::Device(char const*)>
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	ba bc 79 02 c0       	mov    edx,0xc00279bc
c0013fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fea:	89 10                	mov    DWORD PTR [eax],edx
c0013fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013ffa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014002:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001400a:	7f 5e                	jg     c001406a <InterruptController::InterruptController(char const*)+0xa0>
c001400c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014014:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014019:	7f 49                	jg     c0014064 <InterruptController::InterruptController(char const*)+0x9a>
c001401b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014023:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001402a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001402e:	01 ca                	add    edx,ecx
c0014030:	83 c2 54             	add    edx,0x54
c0014033:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001403b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014043:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001404a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001404e:	01 ca                	add    edx,ecx
c0014050:	81 c2 54 04 00 00    	add    edx,0x454
c0014056:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001405e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014062:	eb b0                	jmp    c0014014 <InterruptController::InterruptController(char const*)+0x4a>
c0014064:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014068:	eb 98                	jmp    c0014002 <InterruptController::InterruptController(char const*)+0x38>
c001406a:	90                   	nop
c001406b:	83 c4 1c             	add    esp,0x1c
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <InterruptController::~InterruptController()>:
c0014070:	83 ec 0c             	sub    esp,0xc
c0014073:	ba bc 79 02 c0       	mov    edx,0xc00279bc
c0014078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001407c:	89 10                	mov    DWORD PTR [eax],edx
c001407e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	50                   	push   eax
c0014086:	e8 99 f4 ff ff       	call   c0013524 <Device::~Device()>
c001408b:	83 c4 10             	add    esp,0x10
c001408e:	90                   	nop
c001408f:	83 c4 0c             	add    esp,0xc
c0014092:	c3                   	ret    
c0014093:	90                   	nop

c0014094 <InterruptController::~InterruptController()>:
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	83 ec 0c             	sub    esp,0xc
c001409a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001409e:	e8 cd ff ff ff       	call   c0014070 <InterruptController::~InterruptController()>
c00140a3:	83 c4 10             	add    esp,0x10
c00140a6:	83 ec 08             	sub    esp,0x8
c00140a9:	68 58 21 00 00       	push   0x2158
c00140ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b2:	e8 e0 e0 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00140b7:	83 c4 10             	add    esp,0x10
c00140ba:	83 c4 0c             	add    esp,0xc
c00140bd:	c3                   	ret    

c00140be <displayDebugInfo(regs*)>:
c00140be:	55                   	push   ebp
c00140bf:	57                   	push   edi
c00140c0:	56                   	push   esi
c00140c1:	53                   	push   ebx
c00140c2:	83 ec 24             	sub    esp,0x24
c00140c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140c9:	0f 20 c2             	mov    edx,cr0
c00140cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140d0:	0f 20 d7             	mov    edi,cr2
c00140d3:	0f 20 de             	mov    esi,cr3
c00140d6:	0f 20 e5             	mov    ebp,cr4
c00140d9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140dc:	68 c2 77 02 c0       	push   0xc00277c2
c00140e1:	e8 91 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00140e6:	58                   	pop    eax
c00140e7:	5a                   	pop    edx
c00140e8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140eb:	68 cd 77 02 c0       	push   0xc00277cd
c00140f0:	e8 82 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00140f5:	59                   	pop    ecx
c00140f6:	58                   	pop    eax
c00140f7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140fa:	68 d8 77 02 c0       	push   0xc00277d8
c00140ff:	e8 73 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014104:	58                   	pop    eax
c0014105:	5a                   	pop    edx
c0014106:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014109:	68 e3 77 02 c0       	push   0xc00277e3
c001410e:	e8 64 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014113:	59                   	pop    ecx
c0014114:	58                   	pop    eax
c0014115:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014118:	68 ee 77 02 c0       	push   0xc00277ee
c001411d:	e8 55 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014122:	58                   	pop    eax
c0014123:	5a                   	pop    edx
c0014124:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014127:	68 f9 77 02 c0       	push   0xc00277f9
c001412c:	e8 46 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014131:	59                   	pop    ecx
c0014132:	58                   	pop    eax
c0014133:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014136:	68 04 78 02 c0       	push   0xc0027804
c001413b:	e8 37 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014140:	58                   	pop    eax
c0014141:	5a                   	pop    edx
c0014142:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014145:	68 0f 78 02 c0       	push   0xc002780f
c001414a:	e8 28 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001414f:	59                   	pop    ecx
c0014150:	58                   	pop    eax
c0014151:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014154:	68 1a 78 02 c0       	push   0xc002781a
c0014159:	e8 19 e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001415e:	58                   	pop    eax
c001415f:	5a                   	pop    edx
c0014160:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014163:	68 29 78 02 c0       	push   0xc0027829
c0014168:	e8 0a e1 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001416d:	59                   	pop    ecx
c001416e:	58                   	pop    eax
c001416f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014172:	68 34 78 02 c0       	push   0xc0027834
c0014177:	e8 fb e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001417c:	58                   	pop    eax
c001417d:	5a                   	pop    edx
c001417e:	57                   	push   edi
c001417f:	68 3f 78 02 c0       	push   0xc002783f
c0014184:	e8 ee e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014189:	59                   	pop    ecx
c001418a:	58                   	pop    eax
c001418b:	56                   	push   esi
c001418c:	68 4a 78 02 c0       	push   0xc002784a
c0014191:	e8 e1 e0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014196:	58                   	pop    eax
c0014197:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001419c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a2:	e8 fc c2 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c00141a7:	58                   	pop    eax
c00141a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00141ab:	5a                   	pop    edx
c00141ac:	c1 e0 05             	shl    eax,0x5
c00141af:	05 00 96 02 c0       	add    eax,0xc0029600
c00141b4:	50                   	push   eax
c00141b5:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00141ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c0:	e8 fd c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141c5:	59                   	pop    ecx
c00141c6:	58                   	pop    eax
c00141c7:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00141cc:	68 55 78 02 c0       	push   0xc0027855
c00141d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141d7:	e8 e6 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141dc:	58                   	pop    eax
c00141dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e2:	5a                   	pop    edx
c00141e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141e6:	83 c0 0c             	add    eax,0xc
c00141e9:	50                   	push   eax
c00141ea:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00141ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f5:	e8 c8 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00141fa:	59                   	pop    ecx
c00141fb:	58                   	pop    eax
c00141fc:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014201:	68 5e 78 02 c0       	push   0xc002785e
c0014206:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001420c:	e8 b1 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014211:	58                   	pop    eax
c0014212:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014217:	5a                   	pop    edx
c0014218:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001421b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014221:	e8 c2 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014226:	59                   	pop    ecx
c0014227:	58                   	pop    eax
c0014228:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001422d:	68 66 78 02 c0       	push   0xc0027866
c0014232:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014238:	e8 85 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c001423d:	58                   	pop    eax
c001423e:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014243:	5a                   	pop    edx
c0014244:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014247:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001424d:	e8 96 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014252:	59                   	pop    ecx
c0014253:	58                   	pop    eax
c0014254:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014259:	68 6e 78 02 c0       	push   0xc002786e
c001425e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014264:	e8 59 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014269:	58                   	pop    eax
c001426a:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001426f:	5a                   	pop    edx
c0014270:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014279:	e8 6a c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001427e:	59                   	pop    ecx
c001427f:	58                   	pop    eax
c0014280:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014285:	68 76 78 02 c0       	push   0xc0027876
c001428a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014290:	e8 2d c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014295:	58                   	pop    eax
c0014296:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001429b:	5a                   	pop    edx
c001429c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001429f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a5:	e8 3e c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00142aa:	59                   	pop    ecx
c00142ab:	58                   	pop    eax
c00142ac:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00142b1:	68 7e 78 02 c0       	push   0xc002787e
c00142b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142bc:	e8 01 c6 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00142c1:	58                   	pop    eax
c00142c2:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00142c7:	5a                   	pop    edx
c00142c8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d1:	e8 12 c6 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00142d6:	59                   	pop    ecx
c00142d7:	58                   	pop    eax
c00142d8:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00142dd:	68 86 78 02 c0       	push   0xc0027886
c00142e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e8:	e8 d5 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00142ed:	58                   	pop    eax
c00142ee:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00142f3:	5a                   	pop    edx
c00142f4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142fd:	e8 e6 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014302:	59                   	pop    ecx
c0014303:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014308:	5b                   	pop    ebx
c0014309:	68 8e 78 02 c0       	push   0xc002788e
c001430e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014314:	e8 a9 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014319:	58                   	pop    eax
c001431a:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001431f:	5a                   	pop    edx
c0014320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014324:	52                   	push   edx
c0014325:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432b:	e8 b8 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014330:	59                   	pop    ecx
c0014331:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014336:	5b                   	pop    ebx
c0014337:	68 97 78 02 c0       	push   0xc0027897
c001433c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014342:	e8 7b c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014347:	58                   	pop    eax
c0014348:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001434d:	5a                   	pop    edx
c001434e:	57                   	push   edi
c001434f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014355:	e8 8e c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001435a:	59                   	pop    ecx
c001435b:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014360:	5b                   	pop    ebx
c0014361:	68 9f 78 02 c0       	push   0xc002789f
c0014366:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436c:	e8 51 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014371:	5f                   	pop    edi
c0014372:	58                   	pop    eax
c0014373:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014378:	56                   	push   esi
c0014379:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437f:	e8 64 c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0014384:	58                   	pop    eax
c0014385:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001438a:	5a                   	pop    edx
c001438b:	68 a7 78 02 c0       	push   0xc00278a7
c0014390:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014396:	e8 27 c5 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c001439b:	59                   	pop    ecx
c001439c:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00143a1:	5b                   	pop    ebx
c00143a2:	55                   	push   ebp
c00143a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a9:	e8 3a c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00143ae:	5e                   	pop    esi
c00143af:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00143b4:	5f                   	pop    edi
c00143b5:	68 af 78 02 c0       	push   0xc00278af
c00143ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c0:	e8 fd c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00143c5:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00143ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143d0:	e8 ae 11 01 00       	call   c0025583 <CPU::readDR0()>
c00143d5:	5d                   	pop    ebp
c00143d6:	5a                   	pop    edx
c00143d7:	50                   	push   eax
c00143d8:	53                   	push   ebx
c00143d9:	e8 0a c5 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00143de:	59                   	pop    ecx
c00143df:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00143e4:	5b                   	pop    ebx
c00143e5:	68 b8 78 02 c0       	push   0xc00278b8
c00143ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f0:	e8 cd c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00143f5:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00143fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014400:	e8 90 11 01 00       	call   c0025595 <CPU::readDR1()>
c0014405:	5e                   	pop    esi
c0014406:	5f                   	pop    edi
c0014407:	50                   	push   eax
c0014408:	53                   	push   ebx
c0014409:	e8 da c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001440e:	5d                   	pop    ebp
c001440f:	58                   	pop    eax
c0014410:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014415:	68 c0 78 02 c0       	push   0xc00278c0
c001441a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014420:	e8 9d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014425:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001442a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014430:	e8 72 11 01 00       	call   c00255a7 <CPU::readDR2()>
c0014435:	5a                   	pop    edx
c0014436:	59                   	pop    ecx
c0014437:	50                   	push   eax
c0014438:	53                   	push   ebx
c0014439:	e8 aa c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001443e:	5b                   	pop    ebx
c001443f:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014444:	5e                   	pop    esi
c0014445:	68 c8 78 02 c0       	push   0xc00278c8
c001444a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014450:	e8 6d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014455:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001445a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014460:	e8 54 11 01 00       	call   c00255b9 <CPU::readDR3()>
c0014465:	5f                   	pop    edi
c0014466:	5d                   	pop    ebp
c0014467:	50                   	push   eax
c0014468:	53                   	push   ebx
c0014469:	e8 7a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001446e:	58                   	pop    eax
c001446f:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0014474:	5a                   	pop    edx
c0014475:	68 d0 78 02 c0       	push   0xc00278d0
c001447a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014480:	e8 3d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0014485:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001448a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014490:	e8 36 11 01 00       	call   c00255cb <CPU::readDR6()>
c0014495:	59                   	pop    ecx
c0014496:	5e                   	pop    esi
c0014497:	50                   	push   eax
c0014498:	53                   	push   ebx
c0014499:	e8 4a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c001449e:	5f                   	pop    edi
c001449f:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00144a4:	5d                   	pop    ebp
c00144a5:	68 d8 78 02 c0       	push   0xc00278d8
c00144aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b0:	e8 0d c4 ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c00144b5:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c00144ba:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144c0:	e8 18 11 01 00       	call   c00255dd <CPU::readDR7()>
c00144c5:	5a                   	pop    edx
c00144c6:	59                   	pop    ecx
c00144c7:	50                   	push   eax
c00144c8:	53                   	push   ebx
c00144c9:	e8 1a c4 ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c00144ce:	fa                   	cli    
c00144cf:	f4                   	hlt    
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	eb fe                	jmp    c00144d3 <displayDebugInfo(regs*)+0x415>

c00144d5 <x87EmulHandler(regs*, void*)>:
c00144d5:	53                   	push   ebx
c00144d6:	83 ec 14             	sub    esp,0x14
c00144d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144dd:	53                   	push   ebx
c00144de:	e8 46 8e 00 00       	call   c001d329 <Vm::x87Handler(regs*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	84 c0                	test   al,al
c00144e8:	74 05                	je     c00144ef <x87EmulHandler(regs*, void*)+0x1a>
c00144ea:	83 c4 08             	add    esp,0x8
c00144ed:	5b                   	pop    ebx
c00144ee:	c3                   	ret    
c00144ef:	83 ec 0c             	sub    esp,0xc
c00144f2:	68 e0 78 02 c0       	push   0xc00278e0
c00144f7:	e8 7b dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00144fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144ff:	e8 ba fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014504 <gpFault(regs*, void*)>:
c0014504:	53                   	push   ebx
c0014505:	83 ec 14             	sub    esp,0x14
c0014508:	c7 05 50 a7 02 c0 9d c8 01 c0 	mov    DWORD PTR ds:0xc002a750,0xc001c89d
c0014512:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014516:	53                   	push   ebx
c0014517:	e8 81 83 00 00       	call   c001c89d <Vm::faultHandler(regs*)>
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	84 c0                	test   al,al
c0014521:	74 05                	je     c0014528 <gpFault(regs*, void*)+0x24>
c0014523:	83 c4 08             	add    esp,0x8
c0014526:	5b                   	pop    ebx
c0014527:	c3                   	ret    
c0014528:	83 ec 0c             	sub    esp,0xc
c001452b:	68 f6 78 02 c0       	push   0xc00278f6
c0014530:	e8 42 dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014535:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014538:	e8 81 fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c001453d <pgFault(regs*, void*)>:
c001453d:	83 ec 18             	sub    esp,0x18
c0014540:	68 11 79 02 c0       	push   0xc0027911
c0014545:	e8 2d dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001454a:	58                   	pop    eax
c001454b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001454f:	e8 6a fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014554 <otherISRHandler(regs*, void*)>:
c0014554:	53                   	push   ebx
c0014555:	83 ec 0c             	sub    esp,0xc
c0014558:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001455c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001455f:	50                   	push   eax
c0014560:	50                   	push   eax
c0014561:	68 1e 79 02 c0       	push   0xc002791e
c0014566:	e8 0c dd ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001456b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001456e:	e8 4b fb ff ff       	call   c00140be <displayDebugInfo(regs*)>

c0014573 <opcodeFault(regs*, void*)>:
c0014573:	55                   	push   ebp
c0014574:	89 e5                	mov    ebp,esp
c0014576:	56                   	push   esi
c0014577:	53                   	push   ebx
c0014578:	83 ec 40             	sub    esp,0x40
c001457b:	e8 d4 33 00 00       	call   c0017954 <CPU::current()>
c0014580:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014586:	84 c0                	test   al,al
c0014588:	74 24                	je     c00145ae <opcodeFault(regs*, void*)+0x3b>
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	68 3c 79 02 c0       	push   0xc002793c
c0014592:	e8 e0 dc ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145a0:	8d 50 19             	lea    edx,[eax+0x19]
c00145a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145a9:	e9 77 05 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c00145ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145b7:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00145bb:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00145bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145cb:	8a 00                	mov    al,BYTE PTR [eax]
c00145cd:	3c f0                	cmp    al,0xf0
c00145cf:	75 17                	jne    c00145e8 <opcodeFault(regs*, void*)+0x75>
c00145d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145da:	8d 50 01             	lea    edx,[eax+0x1]
c00145dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e3:	e9 da 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c00145e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145eb:	8a 00                	mov    al,BYTE PTR [eax]
c00145ed:	3c f2                	cmp    al,0xf2
c00145ef:	74 09                	je     c00145fa <opcodeFault(regs*, void*)+0x87>
c00145f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f4:	8a 00                	mov    al,BYTE PTR [eax]
c00145f6:	3c f3                	cmp    al,0xf3
c00145f8:	75 1b                	jne    c0014615 <opcodeFault(regs*, void*)+0xa2>
c00145fa:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014604:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014607:	8d 50 01             	lea    edx,[eax+0x1]
c001460a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014610:	e9 ad 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c0014615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014618:	8a 00                	mov    al,BYTE PTR [eax]
c001461a:	3c 66                	cmp    al,0x66
c001461c:	75 1f                	jne    c001463d <opcodeFault(regs*, void*)+0xca>
c001461e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014622:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014626:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001462c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001462f:	8d 50 01             	lea    edx,[eax+0x1]
c0014632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014635:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014638:	e9 85 00 00 00       	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c001463d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014640:	8a 00                	mov    al,BYTE PTR [eax]
c0014642:	3c 67                	cmp    al,0x67
c0014644:	75 18                	jne    c001465e <opcodeFault(regs*, void*)+0xeb>
c0014646:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001464a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001464d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014650:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014653:	8d 50 01             	lea    edx,[eax+0x1]
c0014656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014659:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001465c:	eb 64                	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c001465e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014661:	8a 00                	mov    al,BYTE PTR [eax]
c0014663:	3c 2e                	cmp    al,0x2e
c0014665:	74 09                	je     c0014670 <opcodeFault(regs*, void*)+0xfd>
c0014667:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466a:	8a 00                	mov    al,BYTE PTR [eax]
c001466c:	3c 3e                	cmp    al,0x3e
c001466e:	75 18                	jne    c0014688 <opcodeFault(regs*, void*)+0x115>
c0014670:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014674:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001467a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001467d:	8d 50 01             	lea    edx,[eax+0x1]
c0014680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014683:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014686:	eb 3a                	jmp    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c0014688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468b:	8a 00                	mov    al,BYTE PTR [eax]
c001468d:	3c 36                	cmp    al,0x36
c001468f:	74 1b                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c0014691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014694:	8a 00                	mov    al,BYTE PTR [eax]
c0014696:	3c 26                	cmp    al,0x26
c0014698:	74 12                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c001469a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469d:	8a 00                	mov    al,BYTE PTR [eax]
c001469f:	3c 64                	cmp    al,0x64
c00146a1:	74 09                	je     c00146ac <opcodeFault(regs*, void*)+0x139>
c00146a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a6:	8a 00                	mov    al,BYTE PTR [eax]
c00146a8:	3c 65                	cmp    al,0x65
c00146aa:	75 16                	jne    c00146c2 <opcodeFault(regs*, void*)+0x14f>
c00146ac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00146b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146b9:	8d 50 01             	lea    edx,[eax+0x1]
c00146bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146c5:	8a 00                	mov    al,BYTE PTR [eax]
c00146c7:	3c 0f                	cmp    al,0xf
c00146c9:	0f 85 ad 00 00 00    	jne    c001477c <opcodeFault(regs*, void*)+0x209>
c00146cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146d2:	40                   	inc    eax
c00146d3:	8a 00                	mov    al,BYTE PTR [eax]
c00146d5:	3c c2                	cmp    al,0xc2
c00146d7:	74 0e                	je     c00146e7 <opcodeFault(regs*, void*)+0x174>
c00146d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146dc:	40                   	inc    eax
c00146dd:	8a 00                	mov    al,BYTE PTR [eax]
c00146df:	3c c3                	cmp    al,0xc3
c00146e1:	0f 85 95 00 00 00    	jne    c001477c <opcodeFault(regs*, void*)+0x209>
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	68 5f 79 02 c0       	push   0xc002795f
c00146ef:	e8 83 db ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00146f4:	83 c4 10             	add    esp,0x10
c00146f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146fd:	8d 50 01             	lea    edx,[eax+0x1]
c0014700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014703:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014706:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014709:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001470c:	8a 00                	mov    al,BYTE PTR [eax]
c001470e:	8d 50 fe             	lea    edx,[eax-0x2]
c0014711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014714:	88 10                	mov    BYTE PTR [eax],dl
c0014716:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014719:	50                   	push   eax
c001471a:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001471d:	50                   	push   eax
c001471e:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014721:	50                   	push   eax
c0014722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014725:	e8 b2 41 00 00       	call   c00188dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001472a:	83 c4 10             	add    esp,0x10
c001472d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014730:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014733:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014736:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014739:	01 d0                	add    eax,edx
c001473b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001473e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014741:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014744:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014747:	48                   	dec    eax
c0014748:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001474b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001474e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014751:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014757:	83 ec 04             	sub    esp,0x4
c001475a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001475d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014760:	50                   	push   eax
c0014761:	e8 03 ba fe ff       	call   c0000169 <voodooXADD>
c0014766:	83 c4 10             	add    esp,0x10
c0014769:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001476c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001476f:	01 c2                	add    edx,eax
c0014771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014774:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014777:	e9 a9 03 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c001477c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001477f:	8a 00                	mov    al,BYTE PTR [eax]
c0014781:	3c 0f                	cmp    al,0xf
c0014783:	0f 85 8b 01 00 00    	jne    c0014914 <opcodeFault(regs*, void*)+0x3a1>
c0014789:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001478c:	40                   	inc    eax
c001478d:	8a 00                	mov    al,BYTE PTR [eax]
c001478f:	3c c7                	cmp    al,0xc7
c0014791:	0f 86 7d 01 00 00    	jbe    c0014914 <opcodeFault(regs*, void*)+0x3a1>
c0014797:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001479a:	40                   	inc    eax
c001479b:	8a 00                	mov    al,BYTE PTR [eax]
c001479d:	3c cf                	cmp    al,0xcf
c001479f:	0f 87 6f 01 00 00    	ja     c0014914 <opcodeFault(regs*, void*)+0x3a1>
c00147a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00147a8:	40                   	inc    eax
c00147a9:	8a 00                	mov    al,BYTE PTR [eax]
c00147ab:	83 c0 38             	add    eax,0x38
c00147ae:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00147b1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00147b5:	75 0b                	jne    c00147c2 <opcodeFault(regs*, void*)+0x24f>
c00147b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ba:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00147bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c0:	eb 75                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147c2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147c6:	75 0b                	jne    c00147d3 <opcodeFault(regs*, void*)+0x260>
c00147c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147cb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d1:	eb 64                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147d3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147d7:	75 0b                	jne    c00147e4 <opcodeFault(regs*, void*)+0x271>
c00147d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e2:	eb 53                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147e4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147e8:	75 0b                	jne    c00147f5 <opcodeFault(regs*, void*)+0x282>
c00147ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147f0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147f3:	eb 42                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c00147f5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147f9:	75 0b                	jne    c0014806 <opcodeFault(regs*, void*)+0x293>
c00147fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147fe:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014801:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014804:	eb 31                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014806:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001480a:	75 0b                	jne    c0014817 <opcodeFault(regs*, void*)+0x2a4>
c001480c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001480f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014812:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014815:	eb 20                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014817:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001481b:	75 0b                	jne    c0014828 <opcodeFault(regs*, void*)+0x2b5>
c001481d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014820:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014823:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014826:	eb 0f                	jmp    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c0014828:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001482c:	75 09                	jne    c0014837 <opcodeFault(regs*, void*)+0x2c4>
c001482e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014831:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014834:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014837:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001483b:	74 10                	je     c001484d <opcodeFault(regs*, void*)+0x2da>
c001483d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014844:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001484b:	eb 2d                	jmp    c001487a <opcodeFault(regs*, void*)+0x307>
c001484d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014850:	c1 e0 18             	shl    eax,0x18
c0014853:	89 c2                	mov    edx,eax
c0014855:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014858:	c1 e0 08             	shl    eax,0x8
c001485b:	25 00 00 ff 00       	and    eax,0xff0000
c0014860:	09 c2                	or     edx,eax
c0014862:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014865:	c1 e8 08             	shr    eax,0x8
c0014868:	25 00 ff 00 00       	and    eax,0xff00
c001486d:	09 c2                	or     edx,eax
c001486f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014872:	c1 e8 18             	shr    eax,0x18
c0014875:	09 d0                	or     eax,edx
c0014877:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001487a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001487e:	75 0b                	jne    c001488b <opcodeFault(regs*, void*)+0x318>
c0014880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014883:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014886:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014889:	eb 75                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c001488b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001488f:	75 0b                	jne    c001489c <opcodeFault(regs*, void*)+0x329>
c0014891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014894:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014897:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001489a:	eb 64                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c001489c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00148a0:	75 0b                	jne    c00148ad <opcodeFault(regs*, void*)+0x33a>
c00148a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a8:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00148ab:	eb 53                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148ad:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00148b1:	75 0b                	jne    c00148be <opcodeFault(regs*, void*)+0x34b>
c00148b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00148bc:	eb 42                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148be:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00148c2:	75 0b                	jne    c00148cf <opcodeFault(regs*, void*)+0x35c>
c00148c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ca:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148cd:	eb 31                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148cf:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148d3:	75 0b                	jne    c00148e0 <opcodeFault(regs*, void*)+0x36d>
c00148d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148de:	eb 20                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148e0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148e4:	75 0b                	jne    c00148f1 <opcodeFault(regs*, void*)+0x37e>
c00148e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148ef:	eb 0f                	jmp    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148f1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148f5:	75 09                	jne    c0014900 <opcodeFault(regs*, void*)+0x38d>
c00148f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148fd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014903:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014906:	8d 50 02             	lea    edx,[eax+0x2]
c0014909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001490f:	e9 11 02 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c0014914:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014917:	8a 00                	mov    al,BYTE PTR [eax]
c0014919:	3c 0f                	cmp    al,0xf
c001491b:	0f 85 76 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014921:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014924:	40                   	inc    eax
c0014925:	8a 00                	mov    al,BYTE PTR [eax]
c0014927:	3c c7                	cmp    al,0xc7
c0014929:	0f 85 68 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c001492f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014935:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014938:	8d 50 01             	lea    edx,[eax+0x1]
c001493b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014941:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014944:	50                   	push   eax
c0014945:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014948:	50                   	push   eax
c0014949:	8d 45 bc             	lea    eax,[ebp-0x44]
c001494c:	50                   	push   eax
c001494d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014950:	e8 87 3f 00 00       	call   c00188dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001495b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001495e:	83 f0 01             	xor    eax,0x1
c0014961:	84 c0                	test   al,al
c0014963:	0f 84 2e 01 00 00    	je     c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014969:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001496c:	3c 01                	cmp    al,0x1
c001496e:	0f 85 23 01 00 00    	jne    c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014974:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014977:	83 f0 01             	xor    eax,0x1
c001497a:	84 c0                	test   al,al
c001497c:	0f 84 15 01 00 00    	je     c0014a97 <opcodeFault(regs*, void*)+0x524>
c0014982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014985:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014988:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001498b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014992:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014995:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014998:	89 c2                	mov    edx,eax
c001499a:	b8 00 00 00 00       	mov    eax,0x0
c001499f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149a2:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00149ab:	ba 00 00 00 00       	mov    edx,0x0
c00149b0:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00149b3:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00149b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00149bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149bf:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149c6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149c9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149cc:	89 c2                	mov    edx,eax
c00149ce:	b8 00 00 00 00       	mov    eax,0x0
c00149d3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149d6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149df:	ba 00 00 00 00       	mov    edx,0x0
c00149e4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149e7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149ea:	e8 3b 70 00 00       	call   c001ba2a <lockScheduler()>
c00149ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00149f7:	89 c1                	mov    ecx,eax
c00149f9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149fc:	89 cb                	mov    ebx,ecx
c00149fe:	89 d0                	mov    eax,edx
c0014a00:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014a03:	89 c6                	mov    esi,eax
c0014a05:	89 f0                	mov    eax,esi
c0014a07:	09 d8                	or     eax,ebx
c0014a09:	85 c0                	test   eax,eax
c0014a0b:	75 21                	jne    c0014a2e <opcodeFault(regs*, void*)+0x4bb>
c0014a0d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014a10:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014a13:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014a16:	89 01                	mov    DWORD PTR [ecx],eax
c0014a18:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a21:	83 c8 40             	or     eax,0x40
c0014a24:	89 c2                	mov    edx,eax
c0014a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a29:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a2c:	eb 3e                	jmp    c0014a6c <opcodeFault(regs*, void*)+0x4f9>
c0014a2e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a31:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a39:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a42:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a45:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a4b:	89 d0                	mov    eax,edx
c0014a4d:	31 d2                	xor    edx,edx
c0014a4f:	89 c3                	mov    ebx,eax
c0014a51:	89 d6                	mov    esi,edx
c0014a53:	89 da                	mov    edx,ebx
c0014a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a58:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a61:	83 e0 bf             	and    eax,0xffffffbf
c0014a64:	89 c2                	mov    edx,eax
c0014a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a69:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a6c:	e8 bb 6f 00 00       	call   c001ba2c <unlockScheduler()>
c0014a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a74:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a77:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a7a:	01 c2                	add    edx,eax
c0014a7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	68 6e 79 02 c0       	push   0xc002796e
c0014a8a:	e8 e8 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	e9 8e 00 00 00       	jmp    c0014b25 <opcodeFault(regs*, void*)+0x5b2>
c0014a97:	83 ec 0c             	sub    esp,0xc
c0014a9a:	68 81 79 02 c0       	push   0xc0027981
c0014a9f:	e8 d3 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aaa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ab3:	c1 e0 04             	shl    eax,0x4
c0014ab6:	01 d0                	add    eax,edx
c0014ab8:	83 c0 03             	add    eax,0x3
c0014abb:	8a 00                	mov    al,BYTE PTR [eax]
c0014abd:	0f b6 d8             	movzx  ebx,al
c0014ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014acc:	c1 e0 04             	shl    eax,0x4
c0014acf:	01 d0                	add    eax,edx
c0014ad1:	83 c0 02             	add    eax,0x2
c0014ad4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad6:	0f b6 c8             	movzx  ecx,al
c0014ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ae5:	c1 e0 04             	shl    eax,0x4
c0014ae8:	01 d0                	add    eax,edx
c0014aea:	40                   	inc    eax
c0014aeb:	8a 00                	mov    al,BYTE PTR [eax]
c0014aed:	0f b6 d0             	movzx  edx,al
c0014af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014afc:	c1 e0 04             	shl    eax,0x4
c0014aff:	01 f0                	add    eax,esi
c0014b01:	8a 00                	mov    al,BYTE PTR [eax]
c0014b03:	0f b6 c0             	movzx  eax,al
c0014b06:	83 ec 0c             	sub    esp,0xc
c0014b09:	53                   	push   ebx
c0014b0a:	51                   	push   ecx
c0014b0b:	52                   	push   edx
c0014b0c:	50                   	push   eax
c0014b0d:	68 94 79 02 c0       	push   0xc0027994
c0014b12:	e8 60 d7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014b17:	83 c4 20             	add    esp,0x20
c0014b1a:	83 ec 0c             	sub    esp,0xc
c0014b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b20:	e8 99 f5 ff ff       	call   c00140be <displayDebugInfo(regs*)>
c0014b25:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b28:	5b                   	pop    ebx
c0014b29:	5e                   	pop    esi
c0014b2a:	5d                   	pop    ebp
c0014b2b:	c3                   	ret    

c0014b2c <displayProgramFault(char const*)>:
c0014b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b34:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b3a:	85 c0                	test   eax,eax
c0014b3c:	74 15                	je     c0014b53 <displayProgramFault(char const*)+0x27>
c0014b3e:	83 ec 0c             	sub    esp,0xc
c0014b41:	6a 04                	push   0x4
c0014b43:	6a 0f                	push   0xf
c0014b45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b49:	50                   	push   eax
c0014b4a:	e8 35 ba ff ff       	call   c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b4f:	83 c4 1c             	add    esp,0x1c
c0014b52:	c3                   	ret    
c0014b53:	c3                   	ret    

c0014b54 <setupInterruptController()>:
c0014b54:	55                   	push   ebp
c0014b55:	89 e5                	mov    ebp,esp
c0014b57:	53                   	push   ebx
c0014b58:	83 ec 14             	sub    esp,0x14
c0014b5b:	e8 f0 2d 00 00       	call   c0017950 <CPU::getNumber()>
c0014b60:	85 c0                	test   eax,eax
c0014b62:	0f 95 c0             	setne  al
c0014b65:	84 c0                	test   al,al
c0014b67:	74 56                	je     c0014bbf <setupInterruptController()+0x6b>
c0014b69:	83 ec 0c             	sub    esp,0xc
c0014b6c:	68 58 21 00 00       	push   0x2158
c0014b71:	e8 12 d6 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	89 c3                	mov    ebx,eax
c0014b7b:	83 ec 0c             	sub    esp,0xc
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 f8 d8 00 00       	call   c002247c <APIC::APIC()>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b8a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b92:	83 c0 08             	add    eax,0x8
c0014b95:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b97:	6a 00                	push   0x0
c0014b99:	6a 00                	push   0x0
c0014b9b:	6a 00                	push   0x0
c0014b9d:	52                   	push   edx
c0014b9e:	ff d0                	call   eax
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0014ba8:	83 ec 08             	sub    esp,0x8
c0014bab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014bae:	50                   	push   eax
c0014baf:	e8 ce ea ff ff       	call   c0013682 <Device::addChild(Device*)>
c0014bb4:	83 c4 10             	add    esp,0x10
c0014bb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014bba:	e9 48 03 00 00       	jmp    c0014f07 <setupInterruptController()+0x3b3>
c0014bbf:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0014bc4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014bca:	83 e0 01             	and    eax,0x1
c0014bcd:	84 c0                	test   al,al
c0014bcf:	0f 95 c0             	setne  al
c0014bd2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bd5:	83 ec 0c             	sub    esp,0xc
c0014bd8:	68 58 21 00 00       	push   0x2158
c0014bdd:	e8 a6 d5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014be2:	83 c4 10             	add    esp,0x10
c0014be5:	89 c3                	mov    ebx,eax
c0014be7:	83 ec 0c             	sub    esp,0xc
c0014bea:	53                   	push   ebx
c0014beb:	e8 d8 dd 00 00       	call   c00229c8 <PIC::PIC()>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bf6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfe:	83 c0 08             	add    eax,0x8
c0014c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c03:	6a 00                	push   0x0
c0014c05:	6a 00                	push   0x0
c0014c07:	6a 00                	push   0x0
c0014c09:	52                   	push   edx
c0014c0a:	ff d0                	call   eax
c0014c0c:	83 c4 10             	add    esp,0x10
c0014c0f:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014c13:	74 6e                	je     c0014c83 <setupInterruptController()+0x12f>
c0014c15:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c1d:	83 c0 0c             	add    eax,0xc
c0014c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c22:	6a 00                	push   0x0
c0014c24:	6a 00                	push   0x0
c0014c26:	6a 00                	push   0x0
c0014c28:	52                   	push   edx
c0014c29:	ff d0                	call   eax
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c32:	74 15                	je     c0014c49 <setupInterruptController()+0xf5>
c0014c34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c39:	83 c0 04             	add    eax,0x4
c0014c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c3e:	83 ec 0c             	sub    esp,0xc
c0014c41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c44:	ff d0                	call   eax
c0014c46:	83 c4 10             	add    esp,0x10
c0014c49:	83 ec 0c             	sub    esp,0xc
c0014c4c:	68 58 21 00 00       	push   0x2158
c0014c51:	e8 32 d5 ff ff       	call   c0012188 <operator new(unsigned long)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	89 c3                	mov    ebx,eax
c0014c5b:	83 ec 0c             	sub    esp,0xc
c0014c5e:	53                   	push   ebx
c0014c5f:	e8 18 d8 00 00       	call   c002247c <APIC::APIC()>
c0014c64:	83 c4 10             	add    esp,0x10
c0014c67:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c6a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c72:	83 c0 08             	add    eax,0x8
c0014c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c77:	6a 00                	push   0x0
c0014c79:	6a 00                	push   0x0
c0014c7b:	6a 00                	push   0x0
c0014c7d:	52                   	push   edx
c0014c7e:	ff d0                	call   eax
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0014c88:	83 ec 08             	sub    esp,0x8
c0014c8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c8e:	50                   	push   eax
c0014c8f:	e8 ee e9 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9c:	83 c0 24             	add    eax,0x24
c0014c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca1:	6a 00                	push   0x0
c0014ca3:	68 54 45 01 c0       	push   0xc0014554
c0014ca8:	6a 00                	push   0x0
c0014caa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cad:	ff d0                	call   eax
c0014caf:	83 c4 10             	add    esp,0x10
c0014cb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb7:	83 c0 24             	add    eax,0x24
c0014cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbc:	6a 00                	push   0x0
c0014cbe:	68 54 45 01 c0       	push   0xc0014554
c0014cc3:	6a 01                	push   0x1
c0014cc5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cc8:	ff d0                	call   eax
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd2:	83 c0 24             	add    eax,0x24
c0014cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd7:	6a 00                	push   0x0
c0014cd9:	68 21 3f 01 c0       	push   0xc0013f21
c0014cde:	6a 02                	push   0x2
c0014ce0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce3:	ff d0                	call   eax
c0014ce5:	83 c4 10             	add    esp,0x10
c0014ce8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ced:	83 c0 24             	add    eax,0x24
c0014cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf2:	6a 00                	push   0x0
c0014cf4:	68 54 45 01 c0       	push   0xc0014554
c0014cf9:	6a 03                	push   0x3
c0014cfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cfe:	ff d0                	call   eax
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d08:	83 c0 24             	add    eax,0x24
c0014d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0d:	6a 00                	push   0x0
c0014d0f:	68 54 45 01 c0       	push   0xc0014554
c0014d14:	6a 04                	push   0x4
c0014d16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d19:	ff d0                	call   eax
c0014d1b:	83 c4 10             	add    esp,0x10
c0014d1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d23:	83 c0 24             	add    eax,0x24
c0014d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d28:	6a 00                	push   0x0
c0014d2a:	68 54 45 01 c0       	push   0xc0014554
c0014d2f:	6a 05                	push   0x5
c0014d31:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d34:	ff d0                	call   eax
c0014d36:	83 c4 10             	add    esp,0x10
c0014d39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3e:	83 c0 24             	add    eax,0x24
c0014d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d43:	6a 00                	push   0x0
c0014d45:	68 73 45 01 c0       	push   0xc0014573
c0014d4a:	6a 06                	push   0x6
c0014d4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d4f:	ff d0                	call   eax
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d59:	83 c0 24             	add    eax,0x24
c0014d5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5e:	6a 00                	push   0x0
c0014d60:	68 d5 44 01 c0       	push   0xc00144d5
c0014d65:	6a 07                	push   0x7
c0014d67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d6a:	ff d0                	call   eax
c0014d6c:	83 c4 10             	add    esp,0x10
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d74:	83 c0 24             	add    eax,0x24
c0014d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d79:	6a 00                	push   0x0
c0014d7b:	68 3c 3d 01 c0       	push   0xc0013d3c
c0014d80:	6a 08                	push   0x8
c0014d82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d85:	ff d0                	call   eax
c0014d87:	83 c4 10             	add    esp,0x10
c0014d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	83 c0 24             	add    eax,0x24
c0014d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d94:	6a 00                	push   0x0
c0014d96:	68 54 45 01 c0       	push   0xc0014554
c0014d9b:	6a 09                	push   0x9
c0014d9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da0:	ff d0                	call   eax
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daa:	83 c0 24             	add    eax,0x24
c0014dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0014daf:	6a 00                	push   0x0
c0014db1:	68 54 45 01 c0       	push   0xc0014554
c0014db6:	6a 0a                	push   0xa
c0014db8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dbb:	ff d0                	call   eax
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc5:	83 c0 24             	add    eax,0x24
c0014dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dca:	6a 00                	push   0x0
c0014dcc:	68 54 45 01 c0       	push   0xc0014554
c0014dd1:	6a 0b                	push   0xb
c0014dd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dd6:	ff d0                	call   eax
c0014dd8:	83 c4 10             	add    esp,0x10
c0014ddb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de0:	83 c0 24             	add    eax,0x24
c0014de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de5:	6a 00                	push   0x0
c0014de7:	68 54 45 01 c0       	push   0xc0014554
c0014dec:	6a 0c                	push   0xc
c0014dee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df1:	ff d0                	call   eax
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dfb:	83 c0 24             	add    eax,0x24
c0014dfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e00:	6a 00                	push   0x0
c0014e02:	68 04 45 01 c0       	push   0xc0014504
c0014e07:	6a 0d                	push   0xd
c0014e09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e0c:	ff d0                	call   eax
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e16:	83 c0 24             	add    eax,0x24
c0014e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1b:	6a 00                	push   0x0
c0014e1d:	68 3d 45 01 c0       	push   0xc001453d
c0014e22:	6a 0e                	push   0xe
c0014e24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e27:	ff d0                	call   eax
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e31:	83 c0 24             	add    eax,0x24
c0014e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e36:	6a 00                	push   0x0
c0014e38:	68 54 45 01 c0       	push   0xc0014554
c0014e3d:	6a 0f                	push   0xf
c0014e3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e42:	ff d0                	call   eax
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4c:	83 c0 24             	add    eax,0x24
c0014e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e51:	6a 00                	push   0x0
c0014e53:	68 54 45 01 c0       	push   0xc0014554
c0014e58:	6a 10                	push   0x10
c0014e5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e5d:	ff d0                	call   eax
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e67:	83 c0 24             	add    eax,0x24
c0014e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6c:	6a 00                	push   0x0
c0014e6e:	68 54 45 01 c0       	push   0xc0014554
c0014e73:	6a 11                	push   0x11
c0014e75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e78:	ff d0                	call   eax
c0014e7a:	83 c4 10             	add    esp,0x10
c0014e7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e82:	83 c0 24             	add    eax,0x24
c0014e85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e87:	6a 00                	push   0x0
c0014e89:	68 54 45 01 c0       	push   0xc0014554
c0014e8e:	6a 12                	push   0x12
c0014e90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e93:	ff d0                	call   eax
c0014e95:	83 c4 10             	add    esp,0x10
c0014e98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9d:	83 c0 24             	add    eax,0x24
c0014ea0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea2:	6a 00                	push   0x0
c0014ea4:	68 54 45 01 c0       	push   0xc0014554
c0014ea9:	6a 13                	push   0x13
c0014eab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eae:	ff d0                	call   eax
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb8:	83 c0 24             	add    eax,0x24
c0014ebb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ebd:	6a 00                	push   0x0
c0014ebf:	68 54 45 01 c0       	push   0xc0014554
c0014ec4:	6a 14                	push   0x14
c0014ec6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ec9:	ff d0                	call   eax
c0014ecb:	83 c4 10             	add    esp,0x10
c0014ece:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed3:	83 c0 24             	add    eax,0x24
c0014ed6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed8:	6a 00                	push   0x0
c0014eda:	68 54 45 01 c0       	push   0xc0014554
c0014edf:	6a 1e                	push   0x1e
c0014ee1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ee4:	ff d0                	call   eax
c0014ee6:	83 c4 10             	add    esp,0x10
c0014ee9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eee:	83 c0 24             	add    eax,0x24
c0014ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef3:	6a 00                	push   0x0
c0014ef5:	68 41 a4 01 c0       	push   0xc001a441
c0014efa:	6a 60                	push   0x60
c0014efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eff:	ff d0                	call   eax
c0014f01:	83 c4 10             	add    esp,0x10
c0014f04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f07:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f0a:	c9                   	leave  
c0014f0b:	c3                   	ret    

c0014f0c <InterruptController::convertLegacyIRQNumber(int)>:
c0014f0c:	55                   	push   ebp
c0014f0d:	89 e5                	mov    ebp,esp
c0014f0f:	83 ec 08             	sub    esp,0x8
c0014f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f15:	83 ec 0c             	sub    esp,0xc
c0014f18:	50                   	push   eax
c0014f19:	e8 46 ea ff ff       	call   c0013964 <Device::getName()>
c0014f1e:	83 c4 10             	add    esp,0x10
c0014f21:	8a 00                	mov    al,BYTE PTR [eax]
c0014f23:	3c 41                	cmp    al,0x41
c0014f25:	0f 94 c0             	sete   al
c0014f28:	84 c0                	test   al,al
c0014f2a:	74 28                	je     c0014f54 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f2c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f30:	7f 12                	jg     c0014f44 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f35:	05 a0 98 02 c0       	add    eax,0xc00298a0
c0014f3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f3c:	0f b6 c0             	movzx  eax,al
c0014f3f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f42:	eb 10                	jmp    c0014f54 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f44:	83 ec 0c             	sub    esp,0xc
c0014f47:	68 14 77 02 c0       	push   0xc0027714
c0014f4c:	e8 86 3b 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f57:	c9                   	leave  
c0014f58:	c3                   	ret    
c0014f59:	90                   	nop

c0014f5a <startGUI(void*)>:
c0014f5a:	55                   	push   ebp
c0014f5b:	89 e5                	mov    ebp,esp
c0014f5d:	53                   	push   ebx
c0014f5e:	83 ec 04             	sub    esp,0x4
c0014f61:	e8 c6 6a 00 00       	call   c001ba2c <unlockScheduler()>
c0014f66:	e8 aa 6a 00 00       	call   c001ba15 <getIRQNestingLevel()>
c0014f6b:	83 ec 08             	sub    esp,0x8
c0014f6e:	50                   	push   eax
c0014f6f:	68 fc 79 02 c0       	push   0xc00279fc
c0014f74:	e8 fe d2 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0014f79:	83 c4 10             	add    esp,0x10
c0014f7c:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c0014f82:	83 ec 08             	sub    esp,0x8
c0014f85:	6a 01                	push   0x1
c0014f87:	68 16 7a 02 c0       	push   0xc0027a16
c0014f8c:	e8 c9 64 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	83 ec 08             	sub    esp,0x8
c0014f97:	53                   	push   ebx
c0014f98:	50                   	push   eax
c0014f99:	e8 82 66 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c0014f9e:	83 c4 10             	add    esp,0x10
c0014fa1:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c0014fa7:	83 ec 08             	sub    esp,0x8
c0014faa:	6a 01                	push   0x1
c0014fac:	68 30 7a 02 c0       	push   0xc0027a30
c0014fb1:	e8 a4 64 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	83 ec 08             	sub    esp,0x8
c0014fbc:	53                   	push   ebx
c0014fbd:	50                   	push   eax
c0014fbe:	e8 5d 66 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	90                   	nop
c0014fc7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fca:	c9                   	leave  
c0014fcb:	c3                   	ret    

c0014fcc <sendKeyToTerminal(unsigned char)>:
c0014fcc:	55                   	push   ebp
c0014fcd:	89 e5                	mov    ebp,esp
c0014fcf:	83 ec 28             	sub    esp,0x28
c0014fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fd8:	a1 84 a6 02 c0       	mov    eax,ds:0xc002a684
c0014fdd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	52                   	push   edx
c0014fe5:	50                   	push   eax
c0014fe6:	e8 d5 ba ff ff       	call   c0010ac0 <VgaText::receiveKey(unsigned char)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014ff2:	75 41                	jne    c0015035 <sendKeyToTerminal(unsigned char)+0x69>
c0014ff4:	e8 58 6a 00 00       	call   c001ba51 <lockStuff()>
c0014ff9:	a1 60 a7 02 c0       	mov    eax,ds:0xc002a760
c0014ffe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015001:	c7 05 60 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a760,0x0
c001500b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001500f:	74 1f                	je     c0015030 <sendKeyToTerminal(unsigned char)+0x64>
c0015011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015014:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015017:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001501a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001501d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015020:	83 ec 0c             	sub    esp,0xc
c0015023:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015026:	e8 0f 70 00 00       	call   c001c03a <unblockTask(ThreadControlBlock*)>
c001502b:	83 c4 10             	add    esp,0x10
c001502e:	eb db                	jmp    c001500b <sendKeyToTerminal(unsigned char)+0x3f>
c0015030:	e8 ae 6d 00 00       	call   c001bde3 <unlockStuff()>
c0015035:	90                   	nop
c0015036:	c9                   	leave  
c0015037:	c3                   	ret    

c0015038 <sendKeyboardToken(KeyboardToken)>:
c0015038:	55                   	push   ebp
c0015039:	89 e5                	mov    ebp,esp
c001503b:	83 ec 18             	sub    esp,0x18
c001503e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015044:	0f b7 c0             	movzx  eax,ax
c0015047:	83 f2 01             	xor    edx,0x1
c001504a:	88 90 80 a7 02 c0    	mov    BYTE PTR [eax-0x3ffd5880],dl
c0015050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015053:	66 3d 03 02          	cmp    ax,0x203
c0015057:	75 07                	jne    c0015060 <sendKeyboardToken(KeyboardToken)+0x28>
c0015059:	a0 80 a8 02 c0       	mov    al,ds:0xc002a880
c001505e:	84 c0                	test   al,al
c0015060:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015064:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015067:	a0 88 ab 02 c0       	mov    al,ds:0xc002ab88
c001506c:	38 c2                	cmp    dl,al
c001506e:	74 1c                	je     c001508c <sendKeyboardToken(KeyboardToken)+0x54>
c0015070:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015073:	a2 88 ab 02 c0       	mov    ds:0xc002ab88,al
c0015078:	a0 88 ab 02 c0       	mov    al,ds:0xc002ab88
c001507d:	0f b6 c0             	movzx  eax,al
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	50                   	push   eax
c0015084:	e8 a5 ac ff ff       	call   c000fd2e <setTerminalScrollLock(bool)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001508f:	84 c0                	test   al,al
c0015091:	0f 84 ae 00 00 00    	je     c0015145 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	66 3d 10 03          	cmp    ax,0x310
c001509e:	75 06                	jne    c00150a6 <sendKeyboardToken(KeyboardToken)+0x6e>
c00150a0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	66 3d 11 03          	cmp    ax,0x311
c00150ad:	75 06                	jne    c00150b5 <sendKeyboardToken(KeyboardToken)+0x7d>
c00150af:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00150b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b8:	66 3d 12 03          	cmp    ax,0x312
c00150bc:	75 06                	jne    c00150c4 <sendKeyboardToken(KeyboardToken)+0x8c>
c00150be:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00150c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c7:	66 3d 13 03          	cmp    ax,0x313
c00150cb:	75 06                	jne    c00150d3 <sendKeyboardToken(KeyboardToken)+0x9b>
c00150cd:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d6:	66 3d 14 03          	cmp    ax,0x314
c00150da:	75 06                	jne    c00150e2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00150dc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e5:	66 3d 15 03          	cmp    ax,0x315
c00150e9:	75 06                	jne    c00150f1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150eb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f4:	66 3d 16 03          	cmp    ax,0x316
c00150f8:	75 06                	jne    c0015100 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150fa:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	66 3d 17 03          	cmp    ax,0x317
c0015107:	75 06                	jne    c001510f <sendKeyboardToken(KeyboardToken)+0xd7>
c0015109:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001510f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015112:	66 3d 18 03          	cmp    ax,0x318
c0015116:	75 06                	jne    c001511e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015118:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001511e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015121:	66 3d 19 03          	cmp    ax,0x319
c0015125:	75 06                	jne    c001512d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015127:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001512d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015130:	66 3d 1a 03          	cmp    ax,0x31a
c0015134:	0f 85 c9 00 00 00    	jne    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001513a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015140:	e9 be 00 00 00       	jmp    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015148:	66 3d 10 03          	cmp    ax,0x310
c001514c:	75 0a                	jne    c0015158 <sendKeyboardToken(KeyboardToken)+0x120>
c001514e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015154:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	66 3d 11 03          	cmp    ax,0x311
c001515f:	75 0a                	jne    c001516b <sendKeyboardToken(KeyboardToken)+0x133>
c0015161:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015167:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516e:	66 3d 12 03          	cmp    ax,0x312
c0015172:	75 0a                	jne    c001517e <sendKeyboardToken(KeyboardToken)+0x146>
c0015174:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001517a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001517e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015181:	66 3d 13 03          	cmp    ax,0x313
c0015185:	75 0a                	jne    c0015191 <sendKeyboardToken(KeyboardToken)+0x159>
c0015187:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001518d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015194:	66 3d 14 03          	cmp    ax,0x314
c0015198:	75 0a                	jne    c00151a4 <sendKeyboardToken(KeyboardToken)+0x16c>
c001519a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00151a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a7:	66 3d 15 03          	cmp    ax,0x315
c00151ab:	75 0a                	jne    c00151b7 <sendKeyboardToken(KeyboardToken)+0x17f>
c00151ad:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00151b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ba:	66 3d 16 03          	cmp    ax,0x316
c00151be:	75 0a                	jne    c00151ca <sendKeyboardToken(KeyboardToken)+0x192>
c00151c0:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cd:	66 3d 17 03          	cmp    ax,0x317
c00151d1:	75 0a                	jne    c00151dd <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151d3:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	66 3d 18 03          	cmp    ax,0x318
c00151e4:	75 0a                	jne    c00151f0 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151e6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f3:	66 3d 19 03          	cmp    ax,0x319
c00151f7:	75 0a                	jne    c0015203 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151f9:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015206:	66 3d 00 02          	cmp    ax,0x200
c001520a:	75 2a                	jne    c0015236 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001520c:	a0 80 ab 02 c0       	mov    al,ds:0xc002ab80
c0015211:	83 f0 01             	xor    eax,0x1
c0015214:	84 c0                	test   al,al
c0015216:	74 1e                	je     c0015236 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015218:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001521d:	6a 01                	push   0x1
c001521f:	6a 00                	push   0x0
c0015221:	68 5a 4f 01 c0       	push   0xc0014f5a
c0015226:	50                   	push   eax
c0015227:	e8 28 69 00 00       	call   c001bb54 <Process::createThread(void (*)(void*), void*, int)>
c001522c:	83 c4 10             	add    esp,0x10
c001522f:	c6 05 80 ab 02 c0 01 	mov    BYTE PTR ds:0xc002ab80,0x1
c0015236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015239:	66 3d 1d 03          	cmp    ax,0x31d
c001523d:	75 06                	jne    c0015245 <sendKeyboardToken(KeyboardToken)+0x20d>
c001523f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015248:	66 3d 1c 03          	cmp    ax,0x31c
c001524c:	75 06                	jne    c0015254 <sendKeyboardToken(KeyboardToken)+0x21c>
c001524e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015257:	66 3d 1b 03          	cmp    ax,0x31b
c001525b:	75 06                	jne    c0015263 <sendKeyboardToken(KeyboardToken)+0x22b>
c001525d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015263:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015266:	66 3d 1e 03          	cmp    ax,0x31e
c001526a:	75 06                	jne    c0015272 <sendKeyboardToken(KeyboardToken)+0x23a>
c001526c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015275:	66 3d 1f 03          	cmp    ax,0x31f
c0015279:	75 06                	jne    c0015281 <sendKeyboardToken(KeyboardToken)+0x249>
c001527b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015284:	66 3d 1a 03          	cmp    ax,0x31a
c0015288:	75 06                	jne    c0015290 <sendKeyboardToken(KeyboardToken)+0x258>
c001528a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015290:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015294:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015297:	83 f0 01             	xor    eax,0x1
c001529a:	84 c0                	test   al,al
c001529c:	74 77                	je     c0015315 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001529e:	a0 81 a8 02 c0       	mov    al,ds:0xc002a881
c00152a3:	84 c0                	test   al,al
c00152a5:	74 41                	je     c00152e8 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00152a7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152ab:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00152af:	74 2b                	je     c00152dc <sendKeyboardToken(KeyboardToken)+0x2a4>
c00152b1:	8b 15 84 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002ab84
c00152b7:	89 d0                	mov    eax,edx
c00152b9:	c1 e0 02             	shl    eax,0x2
c00152bc:	01 d0                	add    eax,edx
c00152be:	01 c0                	add    eax,eax
c00152c0:	a3 84 ab 02 c0       	mov    ds:0xc002ab84,eax
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	0f b7 c0             	movzx  eax,ax
c00152cb:	8d 50 d0             	lea    edx,[eax-0x30]
c00152ce:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c00152d3:	01 d0                	add    eax,edx
c00152d5:	a3 84 ab 02 c0       	mov    ds:0xc002ab84,eax
c00152da:	eb 6d                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c00152dc:	c7 05 84 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ab84,0x0
c00152e6:	eb 61                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c00152e8:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c00152ed:	85 c0                	test   eax,eax
c00152ef:	74 18                	je     c0015309 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152f1:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c00152f6:	0f b6 c0             	movzx  eax,al
c00152f9:	83 ec 0c             	sub    esp,0xc
c00152fc:	50                   	push   eax
c00152fd:	e8 ca fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015309:	c7 05 84 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ab84,0x0
c0015313:	eb 34                	jmp    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c0015315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015318:	66 3d 01 01          	cmp    ax,0x101
c001531c:	75 2b                	jne    c0015349 <sendKeyboardToken(KeyboardToken)+0x311>
c001531e:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c0015323:	85 c0                	test   eax,eax
c0015325:	74 18                	je     c001533f <sendKeyboardToken(KeyboardToken)+0x307>
c0015327:	a1 84 ab 02 c0       	mov    eax,ds:0xc002ab84
c001532c:	0f b6 c0             	movzx  eax,al
c001532f:	83 ec 0c             	sub    esp,0xc
c0015332:	50                   	push   eax
c0015333:	e8 94 fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c0015338:	83 c4 10             	add    esp,0x10
c001533b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001533f:	c7 05 84 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ab84,0x0
c0015349:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001534c:	83 f0 01             	xor    eax,0x1
c001534f:	84 c0                	test   al,al
c0015351:	74 4c                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c0015353:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015356:	83 f0 01             	xor    eax,0x1
c0015359:	84 c0                	test   al,al
c001535b:	74 42                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c001535d:	a0 80 a8 02 c0       	mov    al,ds:0xc002a880
c0015362:	83 f0 01             	xor    eax,0x1
c0015365:	84 c0                	test   al,al
c0015367:	74 36                	je     c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	66 83 f8 1f          	cmp    ax,0x1f
c0015370:	76 09                	jbe    c001537b <sendKeyboardToken(KeyboardToken)+0x343>
c0015372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015375:	66 83 f8 7e          	cmp    ax,0x7e
c0015379:	76 12                	jbe    c001538d <sendKeyboardToken(KeyboardToken)+0x355>
c001537b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537e:	66 83 f8 0a          	cmp    ax,0xa
c0015382:	74 09                	je     c001538d <sendKeyboardToken(KeyboardToken)+0x355>
c0015384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015387:	66 83 f8 08          	cmp    ax,0x8
c001538b:	75 12                	jne    c001539f <sendKeyboardToken(KeyboardToken)+0x367>
c001538d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015390:	0f b6 c0             	movzx  eax,al
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	50                   	push   eax
c0015397:	e8 30 fc ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00153a2:	83 f0 01             	xor    eax,0x1
c00153a5:	84 c0                	test   al,al
c00153a7:	74 4f                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153ac:	83 f0 01             	xor    eax,0x1
c00153af:	84 c0                	test   al,al
c00153b1:	74 45                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153b3:	a0 80 a8 02 c0       	mov    al,ds:0xc002a880
c00153b8:	84 c0                	test   al,al
c00153ba:	74 3c                	je     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bf:	66 83 f8 3f          	cmp    ax,0x3f
c00153c3:	76 33                	jbe    c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c8:	66 83 f8 7f          	cmp    ax,0x7f
c00153cc:	77 2a                	ja     c00153f8 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d1:	88 c2                	mov    dl,al
c00153d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d6:	66 83 f8 5f          	cmp    ax,0x5f
c00153da:	76 04                	jbe    c00153e0 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153dc:	b0 20                	mov    al,0x20
c00153de:	eb 02                	jmp    c00153e2 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153e0:	b0 00                	mov    al,0x0
c00153e2:	29 c2                	sub    edx,eax
c00153e4:	88 d0                	mov    al,dl
c00153e6:	83 e8 40             	sub    eax,0x40
c00153e9:	0f b6 c0             	movzx  eax,al
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	50                   	push   eax
c00153f0:	e8 d7 fb ff ff       	call   c0014fcc <sendKeyToTerminal(unsigned char)>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fb:	66 3d 00 03          	cmp    ax,0x300
c00153ff:	75 0f                	jne    c0015410 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015401:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015404:	83 f0 01             	xor    eax,0x1
c0015407:	84 c0                	test   al,al
c0015409:	74 05                	je     c0015410 <sendKeyboardToken(KeyboardToken)+0x3d8>
c001540b:	e8 45 b1 ff ff       	call   c0010555 <doTerminalCycle()>
c0015410:	90                   	nop
c0015411:	c9                   	leave  
c0015412:	c3                   	ret    

c0015413 <clearInternalKeybuffer(VgaText*)>:
c0015413:	55                   	push   ebp
c0015414:	89 e5                	mov    ebp,esp
c0015416:	83 ec 08             	sub    esp,0x8
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	05 34 11 00 00       	add    eax,0x1134
c0015421:	83 ec 0c             	sub    esp,0xc
c0015424:	50                   	push   eax
c0015425:	e8 b8 b2 fe ff       	call   c00006e2 <strlen>
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015430:	81 c2 34 11 00 00    	add    edx,0x1134
c0015436:	83 ec 04             	sub    esp,0x4
c0015439:	50                   	push   eax
c001543a:	6a 00                	push   0x0
c001543c:	52                   	push   edx
c001543d:	e8 83 b2 fe ff       	call   c00006c5 <memset>
c0015442:	83 c4 10             	add    esp,0x10
c0015445:	90                   	nop
c0015446:	c9                   	leave  
c0015447:	c3                   	ret    

c0015448 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015448:	55                   	push   ebp
c0015449:	89 e5                	mov    ebp,esp
c001544b:	83 ec 18             	sub    esp,0x18
c001544e:	fb                   	sti    
c001544f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015456:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001545a:	0f 84 8a 00 00 00    	je     c00154ea <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015463:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015469:	84 c0                	test   al,al
c001546b:	75 11                	jne    c001547e <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001546d:	e8 b8 65 00 00       	call   c001ba2a <lockScheduler()>
c0015472:	e8 e7 68 00 00       	call   c001bd5e <schedule()>
c0015477:	e8 b0 65 00 00       	call   c001ba2c <unlockScheduler()>
c001547c:	eb e2                	jmp    c0015460 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001547e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015481:	8d 50 01             	lea    edx,[eax+0x1]
c0015484:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015487:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001548a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015490:	88 10                	mov    BYTE PTR [eax],dl
c0015492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015495:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001549b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001549e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a1:	05 34 11 00 00       	add    eax,0x1134
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	50                   	push   eax
c00154aa:	e8 33 b2 fe ff       	call   c00006e2 <strlen>
c00154af:	83 c4 10             	add    esp,0x10
c00154b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154b5:	81 c2 34 11 00 00    	add    edx,0x1134
c00154bb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00154be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154c1:	81 c2 34 11 00 00    	add    edx,0x1134
c00154c7:	83 ec 04             	sub    esp,0x4
c00154ca:	50                   	push   eax
c00154cb:	51                   	push   ecx
c00154cc:	52                   	push   edx
c00154cd:	e8 85 b1 fe ff       	call   c0000657 <memmove>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154db:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154df:	0f 85 71 ff ff ff    	jne    c0015456 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	eb 03                	jmp    c00154ed <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ed:	c9                   	leave  
c00154ee:	c3                   	ret    
c00154ef:	90                   	nop

c00154f0 <Keyboard::Keyboard(char const*)>:
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f7:	83 ec 08             	sub    esp,0x8
c00154fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154fe:	50                   	push   eax
c00154ff:	e8 6e e3 ff ff       	call   c0013872 <Device::Device(char const*)>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	ba 54 7a 02 c0       	mov    edx,0xc0027a54
c001550c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015510:	89 10                	mov    DWORD PTR [eax],edx
c0015512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015516:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015520:	c6 05 64 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a764,0x1
c0015527:	90                   	nop
c0015528:	83 c4 0c             	add    esp,0xc
c001552b:	c3                   	ret    

c001552c <Keyboard::~Keyboard()>:
c001552c:	83 ec 0c             	sub    esp,0xc
c001552f:	ba 54 7a 02 c0       	mov    edx,0xc0027a54
c0015534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015538:	89 10                	mov    DWORD PTR [eax],edx
c001553a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	50                   	push   eax
c0015542:	e8 dd df ff ff       	call   c0013524 <Device::~Device()>
c0015547:	83 c4 10             	add    esp,0x10
c001554a:	90                   	nop
c001554b:	83 c4 0c             	add    esp,0xc
c001554e:	c3                   	ret    
c001554f:	90                   	nop

c0015550 <Keyboard::~Keyboard()>:
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	83 ec 0c             	sub    esp,0xc
c0015556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001555a:	e8 cd ff ff ff       	call   c001552c <Keyboard::~Keyboard()>
c001555f:	83 c4 10             	add    esp,0x10
c0015562:	83 ec 08             	sub    esp,0x8
c0015565:	68 5c 01 00 00       	push   0x15c
c001556a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001556e:	e8 24 cc ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	83 c4 0c             	add    esp,0xc
c0015579:	c3                   	ret    

c001557a <LogicalDisk::close(int, int, void*)>:
c001557a:	83 c8 ff             	or     eax,0xffffffff
c001557d:	c3                   	ret    

c001557e <LogicalDisk::~LogicalDisk()>:
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0015586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558a:	89 10                	mov    DWORD PTR [eax],edx
c001558c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015590:	83 ec 0c             	sub    esp,0xc
c0015593:	50                   	push   eax
c0015594:	e8 8b df ff ff       	call   c0013524 <Device::~Device()>
c0015599:	83 c4 10             	add    esp,0x10
c001559c:	90                   	nop
c001559d:	83 c4 0c             	add    esp,0xc
c00155a0:	c3                   	ret    
c00155a1:	90                   	nop

c00155a2 <LogicalDisk::~LogicalDisk()>:
c00155a2:	83 ec 0c             	sub    esp,0xc
c00155a5:	83 ec 0c             	sub    esp,0xc
c00155a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155ac:	e8 cd ff ff ff       	call   c001557e <LogicalDisk::~LogicalDisk()>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	83 ec 08             	sub    esp,0x8
c00155b7:	68 74 01 00 00       	push   0x174
c00155bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c0:	e8 d2 cb ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	83 c4 0c             	add    esp,0xc
c00155cb:	c3                   	ret    

c00155cc <LogicalDisk::open(int, int, void*)>:
c00155cc:	83 ec 18             	sub    esp,0x18
c00155cf:	68 80 7a 02 c0       	push   0xc0027a80
c00155d4:	e8 fe 34 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c00155d9:	83 c8 ff             	or     eax,0xffffffff
c00155dc:	83 c4 1c             	add    esp,0x1c
c00155df:	c3                   	ret    

c00155e0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155e0:	53                   	push   ebx
c00155e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155ed:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155f3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155f9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155ff:	77 10                	ja     c0015611 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015601:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015607:	89 d3                	mov    ebx,edx
c0015609:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001560f:	72 05                	jb     c0015616 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015611:	83 c8 ff             	or     eax,0xffffffff
c0015614:	89 c2                	mov    edx,eax
c0015616:	5b                   	pop    ebx
c0015617:	c3                   	ret    

c0015618 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015618:	56                   	push   esi
c0015619:	83 c8 ff             	or     eax,0xffffffff
c001561c:	53                   	push   ebx
c001561d:	89 c2                	mov    edx,eax
c001561f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015623:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015627:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001562b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015631:	77 27                	ja     c001565a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015633:	89 d8                	mov    eax,ebx
c0015635:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001563b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015641:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015646:	89 c2                	mov    edx,eax
c0015648:	73 10                	jae    c001565a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001564a:	89 c8                	mov    eax,ecx
c001564c:	89 da                	mov    edx,ebx
c001564e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015654:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001565a:	5b                   	pop    ebx
c001565b:	5e                   	pop    esi
c001565c:	c3                   	ret    
c001565d:	90                   	nop

c001565e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001565e:	83 ec 1c             	sub    esp,0x1c
c0015661:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001566d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015675:	89 04 24             	mov    DWORD PTR [esp],eax
c0015678:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001567c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015684:	83 ec 08             	sub    esp,0x8
c0015687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001568b:	50                   	push   eax
c001568c:	e8 e1 e1 ff ff       	call   c0013872 <Device::Device(char const*)>
c0015691:	83 c4 10             	add    esp,0x10
c0015694:	ba 04 7b 02 c0       	mov    edx,0xc0027b04
c0015699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569d:	89 10                	mov    DWORD PTR [eax],edx
c001569f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ae:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00156c3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156cf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156d5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156e6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156ec:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156fa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015704:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001570e:	90                   	nop
c001570f:	83 c4 1c             	add    esp,0x1c
c0015712:	c3                   	ret    
c0015713:	90                   	nop

c0015714 <LogicalDisk::assignDriveLetter()>:
c0015714:	55                   	push   ebp
c0015715:	57                   	push   edi
c0015716:	56                   	push   esi
c0015717:	53                   	push   ebx
c0015718:	83 ec 14             	sub    esp,0x14
c001571b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001571f:	8b 3d a0 ab 02 c0    	mov    edi,DWORD PTR ds:0xc002aba0
c0015725:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001572b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001572f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015735:	8b 3d a4 ab 02 c0    	mov    edi,DWORD PTR ds:0xc002aba4
c001573b:	3c 01                	cmp    al,0x1
c001573d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015741:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015745:	19 c0                	sbb    eax,eax
c0015747:	83 e0 02             	and    eax,0x2
c001574a:	83 c0 41             	add    eax,0x41
c001574d:	0f be e8             	movsx  ebp,al
c0015750:	3c 43                	cmp    al,0x43
c0015752:	75 10                	jne    c0015764 <LogicalDisk::assignDriveLetter()+0x50>
c0015754:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001575b:	75 5d                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c001575d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015762:	75 56                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c0015764:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015767:	ba 01 00 00 00       	mov    edx,0x1
c001576c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015770:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015774:	d3 e2                	shl    edx,cl
c0015776:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001577a:	89 d7                	mov    edi,edx
c001577c:	89 d6                	mov    esi,edx
c001577e:	c1 ff 1f             	sar    edi,0x1f
c0015781:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015785:	21 f9                	and    ecx,edi
c0015787:	09 d1                	or     ecx,edx
c0015789:	75 2f                	jne    c00157ba <LogicalDisk::assignDriveLetter()+0xa6>
c001578b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001578f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015793:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015799:	09 f2                	or     edx,esi
c001579b:	89 15 a0 ab 02 c0    	mov    DWORD PTR ds:0xc002aba0,edx
c00157a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157a5:	09 fa                	or     edx,edi
c00157a7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00157ab:	89 15 a4 ab 02 c0    	mov    DWORD PTR ds:0xc002aba4,edx
c00157b1:	89 1c bd c0 ab 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5440],ebx
c00157b8:	eb 08                	jmp    c00157c2 <LogicalDisk::assignDriveLetter()+0xae>
c00157ba:	45                   	inc    ebp
c00157bb:	40                   	inc    eax
c00157bc:	3c 5b                	cmp    al,0x5b
c00157be:	75 90                	jne    c0015750 <LogicalDisk::assignDriveLetter()+0x3c>
c00157c0:	31 c0                	xor    eax,eax
c00157c2:	83 c4 14             	add    esp,0x14
c00157c5:	5b                   	pop    ebx
c00157c6:	5e                   	pop    esi
c00157c7:	5f                   	pop    edi
c00157c8:	5d                   	pop    ebp
c00157c9:	c3                   	ret    

c00157ca <LogicalDisk::mount()>:
c00157ca:	56                   	push   esi
c00157cb:	53                   	push   ebx
c00157cc:	51                   	push   ecx
c00157cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157d1:	8b 1d 28 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a728
c00157d7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157e1:	85 db                	test   ebx,ebx
c00157e3:	74 50                	je     c0015835 <LogicalDisk::mount()+0x6b>
c00157e5:	e8 2b 62 00 00       	call   c001ba15 <getIRQNestingLevel()>
c00157ea:	52                   	push   edx
c00157eb:	52                   	push   edx
c00157ec:	50                   	push   eax
c00157ed:	68 a4 7a 02 c0       	push   0xc0027aa4
c00157f2:	e8 80 ca ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00157f7:	83 c4 0c             	add    esp,0xc
c00157fa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015801:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015803:	83 e8 41             	sub    eax,0x41
c0015806:	50                   	push   eax
c0015807:	56                   	push   esi
c0015808:	53                   	push   ebx
c0015809:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	84 c0                	test   al,al
c0015811:	74 08                	je     c001581b <LogicalDisk::mount()+0x51>
c0015813:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015819:	eb 1c                	jmp    c0015837 <LogicalDisk::mount()+0x6d>
c001581b:	e8 f5 61 00 00       	call   c001ba15 <getIRQNestingLevel()>
c0015820:	51                   	push   ecx
c0015821:	51                   	push   ecx
c0015822:	50                   	push   eax
c0015823:	68 bf 7a 02 c0       	push   0xc0027abf
c0015828:	e8 4a ca ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001582d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	eb ac                	jmp    c00157e1 <LogicalDisk::mount()+0x17>
c0015835:	31 c0                	xor    eax,eax
c0015837:	5a                   	pop    edx
c0015838:	5b                   	pop    ebx
c0015839:	5e                   	pop    esi
c001583a:	c3                   	ret    
c001583b:	90                   	nop

c001583c <LogicalDisk::unmount()>:
c001583c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015840:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001584a:	c3                   	ret    
c001584b:	90                   	nop

c001584c <LogicalDisk::unassignDriveLetter()>:
c001584c:	57                   	push   edi
c001584d:	56                   	push   esi
c001584e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015852:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015859:	84 c9                	test   cl,cl
c001585b:	75 0f                	jne    c001586c <LogicalDisk::unassignDriveLetter()+0x20>
c001585d:	c7 44 24 0c da 7a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027ada
c0015865:	5e                   	pop    esi
c0015866:	5f                   	pop    edi
c0015867:	e9 6b 32 00 00       	jmp    c0018ad7 <Krnl::panic(char const*)>
c001586c:	83 e9 41             	sub    ecx,0x41
c001586f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015876:	b8 01 00 00 00       	mov    eax,0x1
c001587b:	c7 04 8d c0 ab 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5440],0x0
c0015886:	d3 e0                	shl    eax,cl
c0015888:	89 c7                	mov    edi,eax
c001588a:	f7 d0                	not    eax
c001588c:	c1 ff 1f             	sar    edi,0x1f
c001588f:	21 05 a0 ab 02 c0    	and    DWORD PTR ds:0xc002aba0,eax
c0015895:	89 fe                	mov    esi,edi
c0015897:	f7 d6                	not    esi
c0015899:	21 35 a4 ab 02 c0    	and    DWORD PTR ds:0xc002aba4,esi
c001589f:	5e                   	pop    esi
c00158a0:	5f                   	pop    edi
c00158a1:	c3                   	ret    

c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00158a2:	57                   	push   edi
c00158a3:	56                   	push   esi
c00158a4:	53                   	push   ebx
c00158a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158b5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158bb:	77 41                	ja     c00158fe <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00158bd:	99                   	cdq    
c00158be:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158c4:	01 c8                	add    eax,ecx
c00158c6:	11 da                	adc    edx,ebx
c00158c8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158ce:	19 d7                	sbb    edi,edx
c00158d0:	72 33                	jb     c0015905 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158d2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158d8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158e2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158e6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158f6:	5b                   	pop    ebx
c00158f7:	5e                   	pop    esi
c00158f8:	5f                   	pop    edi
c00158f9:	e9 9a 09 00 00       	jmp    c0016298 <VCache::read(unsigned long long, int, void*)>
c00158fe:	b8 05 00 00 00       	mov    eax,0x5
c0015903:	eb 05                	jmp    c001590a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015905:	b8 07 00 00 00       	mov    eax,0x7
c001590a:	5b                   	pop    ebx
c001590b:	5e                   	pop    esi
c001590c:	5f                   	pop    edi
c001590d:	c3                   	ret    

c001590e <LogicalDisk::write(unsigned long long, int, void*)>:
c001590e:	57                   	push   edi
c001590f:	56                   	push   esi
c0015910:	53                   	push   ebx
c0015911:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015915:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015919:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001591d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015921:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015927:	77 41                	ja     c001596a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015929:	99                   	cdq    
c001592a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015930:	01 c8                	add    eax,ecx
c0015932:	11 da                	adc    edx,ebx
c0015934:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001593a:	19 d7                	sbb    edi,edx
c001593c:	72 33                	jb     c0015971 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001593e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015944:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001594a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001594e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015952:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015958:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001595e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015962:	5b                   	pop    ebx
c0015963:	5e                   	pop    esi
c0015964:	5f                   	pop    edi
c0015965:	e9 4a 08 00 00       	jmp    c00161b4 <VCache::write(unsigned long long, int, void*)>
c001596a:	b8 05 00 00 00       	mov    eax,0x5
c001596f:	eb 05                	jmp    c0015976 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015971:	b8 07 00 00 00       	mov    eax,0x7
c0015976:	5b                   	pop    ebx
c0015977:	5e                   	pop    esi
c0015978:	5f                   	pop    edi
c0015979:	c3                   	ret    

c001597a <Mouse::Mouse(char const*)>:
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015981:	83 ec 08             	sub    esp,0x8
c0015984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015988:	50                   	push   eax
c0015989:	e8 e4 de ff ff       	call   c0013872 <Device::Device(char const*)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	ba 30 7b 02 c0       	mov    edx,0xc0027b30
c0015996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599a:	89 10                	mov    DWORD PTR [eax],edx
c001599c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00159aa:	90                   	nop
c00159ab:	83 c4 0c             	add    esp,0xc
c00159ae:	c3                   	ret    
c00159af:	90                   	nop

c00159b0 <Mouse::~Mouse()>:
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	ba 30 7b 02 c0       	mov    edx,0xc0027b30
c00159b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159bc:	89 10                	mov    DWORD PTR [eax],edx
c00159be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	50                   	push   eax
c00159c6:	e8 59 db ff ff       	call   c0013524 <Device::~Device()>
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	90                   	nop
c00159cf:	83 c4 0c             	add    esp,0xc
c00159d2:	c3                   	ret    
c00159d3:	90                   	nop

c00159d4 <Mouse::~Mouse()>:
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	83 ec 0c             	sub    esp,0xc
c00159da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159de:	e8 cd ff ff ff       	call   c00159b0 <Mouse::~Mouse()>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	83 ec 08             	sub    esp,0x8
c00159e9:	68 58 01 00 00       	push   0x158
c00159ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159f2:	e8 a0 c7 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	83 c4 0c             	add    esp,0xc
c00159fd:	c3                   	ret    

c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159fe:	55                   	push   ebp
c00159ff:	57                   	push   edi
c0015a00:	56                   	push   esi
c0015a01:	53                   	push   ebx
c0015a02:	81 ec 28 01 00 00    	sub    esp,0x128
c0015a08:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015a0f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015a16:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015a1d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015a24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a28:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a2c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a33:	e8 2c df ff ff       	call   c0013964 <Device::getName()>
c0015a38:	5a                   	pop    edx
c0015a39:	59                   	pop    ecx
c0015a3a:	50                   	push   eax
c0015a3b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a3f:	55                   	push   ebp
c0015a40:	e8 1f ad fe ff       	call   c0000764 <strcpy>
c0015a45:	5b                   	pop    ebx
c0015a46:	58                   	pop    eax
c0015a47:	68 54 7b 02 c0       	push   0xc0027b54
c0015a4c:	55                   	push   ebp
c0015a4d:	e8 c9 ad fe ff       	call   c000081b <strcat>
c0015a52:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a59:	e8 2a c7 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015a5e:	83 c4 0c             	add    esp,0xc
c0015a61:	89 c3                	mov    ebx,eax
c0015a63:	57                   	push   edi
c0015a64:	56                   	push   esi
c0015a65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a6d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a74:	55                   	push   ebp
c0015a75:	50                   	push   eax
c0015a76:	e8 e3 fb ff ff       	call   c001565e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a7b:	83 c4 14             	add    esp,0x14
c0015a7e:	53                   	push   ebx
c0015a7f:	e8 90 fc ff ff       	call   c0015714 <LogicalDisk::assignDriveLetter()>
c0015a84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a87:	e8 3e fd ff ff       	call   c00157ca <LogicalDisk::mount()>
c0015a8c:	58                   	pop    eax
c0015a8d:	5a                   	pop    edx
c0015a8e:	53                   	push   ebx
c0015a8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a96:	e8 e7 db ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015a9b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015aa1:	5b                   	pop    ebx
c0015aa2:	5e                   	pop    esi
c0015aa3:	5f                   	pop    edi
c0015aa4:	5d                   	pop    ebp
c0015aa5:	c3                   	ret    

c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>:
c0015aa6:	55                   	push   ebp
c0015aa7:	57                   	push   edi
c0015aa8:	56                   	push   esi
c0015aa9:	53                   	push   ebx
c0015aaa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015ab0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015ab7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015abd:	3d 00 02 00 00       	cmp    eax,0x200
c0015ac2:	74 27                	je     c0015aeb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015ac4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015aca:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ad0:	83 ec 10             	sub    esp,0x10
c0015ad3:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ad7:	99                   	cdq    
c0015ad8:	c1 e6 0a             	shl    esi,0xa
c0015adb:	52                   	push   edx
c0015adc:	89 fd                	mov    ebp,edi
c0015ade:	50                   	push   eax
c0015adf:	55                   	push   ebp
c0015ae0:	56                   	push   esi
c0015ae1:	e8 f6 d9 00 00       	call   c00234dc <__udivdi3>
c0015ae6:	e9 b1 00 00 00       	jmp    c0015b9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015aeb:	83 ec 0c             	sub    esp,0xc
c0015aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015af0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015af4:	56                   	push   esi
c0015af5:	6a 01                	push   0x1
c0015af7:	6a 00                	push   0x0
c0015af9:	6a 00                	push   0x0
c0015afb:	53                   	push   ebx
c0015afc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015aff:	83 c4 20             	add    esp,0x20
c0015b02:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015b0a:	75 0a                	jne    c0015b16 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015b0c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015b14:	74 2c                	je     c0015b42 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015b16:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b1c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b22:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b28:	83 ec 10             	sub    esp,0x10
c0015b2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b2f:	89 f7                	mov    edi,esi
c0015b31:	c1 e0 0a             	shl    eax,0xa
c0015b34:	c1 ff 1f             	sar    edi,0x1f
c0015b37:	57                   	push   edi
c0015b38:	56                   	push   esi
c0015b39:	52                   	push   edx
c0015b3a:	50                   	push   eax
c0015b3b:	e8 9c d9 00 00       	call   c00234dc <__udivdi3>
c0015b40:	eb 5a                	jmp    c0015b9c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b42:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b49:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b50:	83 e1 7f             	and    ecx,0x7f
c0015b53:	83 e0 7f             	and    eax,0x7f
c0015b56:	01 c1                	add    ecx,eax
c0015b58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b5f:	83 e0 7f             	and    eax,0x7f
c0015b62:	01 c1                	add    ecx,eax
c0015b64:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b6b:	83 e0 7f             	and    eax,0x7f
c0015b6e:	00 c1                	add    cl,al
c0015b70:	74 41                	je     c0015bb3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b72:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b78:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b7e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b84:	83 ec 10             	sub    esp,0x10
c0015b87:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b8b:	89 f7                	mov    edi,esi
c0015b8d:	c1 e0 0a             	shl    eax,0xa
c0015b90:	c1 ff 1f             	sar    edi,0x1f
c0015b93:	57                   	push   edi
c0015b94:	56                   	push   esi
c0015b95:	52                   	push   edx
c0015b96:	50                   	push   eax
c0015b97:	e8 40 d9 00 00       	call   c00234dc <__udivdi3>
c0015b9c:	83 c4 14             	add    esp,0x14
c0015b9f:	52                   	push   edx
c0015ba0:	50                   	push   eax
c0015ba1:	6a 00                	push   0x0
c0015ba3:	6a 00                	push   0x0
c0015ba5:	53                   	push   ebx
c0015ba6:	e8 53 fe ff ff       	call   c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015bab:	83 c4 20             	add    esp,0x20
c0015bae:	e9 79 01 00 00       	jmp    c0015d2c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015bb3:	89 f0                	mov    eax,esi
c0015bb5:	31 f6                	xor    esi,esi
c0015bb7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015bbe:	75 02                	jne    c0015bc2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015bc0:	89 f1                	mov    ecx,esi
c0015bc2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015bc9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015bd0:	c1 e2 08             	shl    edx,0x8
c0015bd3:	c1 e7 10             	shl    edi,0x10
c0015bd6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bde:	09 fa                	or     edx,edi
c0015be0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015be8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bef:	83 c0 10             	add    eax,0x10
c0015bf2:	09 fa                	or     edx,edi
c0015bf4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bfb:	c1 e7 18             	shl    edi,0x18
c0015bfe:	09 fa                	or     edx,edi
c0015c00:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015c07:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015c0b:	c1 e7 10             	shl    edi,0x10
c0015c0e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015c15:	c1 e2 08             	shl    edx,0x8
c0015c18:	09 fa                	or     edx,edi
c0015c1a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015c21:	09 fa                	or     edx,edi
c0015c23:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c2a:	c1 e7 18             	shl    edi,0x18
c0015c2d:	09 fa                	or     edx,edi
c0015c2f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c33:	46                   	inc    esi
c0015c34:	83 fe 04             	cmp    esi,0x4
c0015c37:	0f 85 7a ff ff ff    	jne    c0015bb7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c41:	83 f0 01             	xor    eax,0x1
c0015c44:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c48:	75 57                	jne    c0015ca1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c4e:	83 f0 01             	xor    eax,0x1
c0015c51:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c55:	75 4a                	jne    c0015ca1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c57:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c71:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c77:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c7d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c81:	89 f7                	mov    edi,esi
c0015c83:	c1 e0 0a             	shl    eax,0xa
c0015c86:	c1 ff 1f             	sar    edi,0x1f
c0015c89:	57                   	push   edi
c0015c8a:	56                   	push   esi
c0015c8b:	52                   	push   edx
c0015c8c:	50                   	push   eax
c0015c8d:	e8 4a d8 00 00       	call   c00234dc <__udivdi3>
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c99:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c9d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015ca1:	84 c9                	test   cl,cl
c0015ca3:	74 53                	je     c0015cf8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015ca5:	0f b6 c9             	movzx  ecx,cl
c0015ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015cb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cb4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015cc0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015cc4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015cc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ccc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cd8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cdc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015ce0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015ce4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015ce8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cf0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cf4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cf8:	31 ed                	xor    ebp,ebp
c0015cfa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cfe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015d02:	89 f8                	mov    eax,edi
c0015d04:	09 f0                	or     eax,esi
c0015d06:	74 1e                	je     c0015d26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d08:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015d0c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015d10:	89 d1                	mov    ecx,edx
c0015d12:	09 c1                	or     ecx,eax
c0015d14:	74 10                	je     c0015d26 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	57                   	push   edi
c0015d1a:	56                   	push   esi
c0015d1b:	52                   	push   edx
c0015d1c:	50                   	push   eax
c0015d1d:	53                   	push   ebx
c0015d1e:	e8 db fc ff ff       	call   c00159fe <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015d23:	83 c4 20             	add    esp,0x20
c0015d26:	45                   	inc    ebp
c0015d27:	83 fd 04             	cmp    ebp,0x4
c0015d2a:	75 ce                	jne    c0015cfa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d2c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d32:	5b                   	pop    ebx
c0015d33:	5e                   	pop    esi
c0015d34:	5f                   	pop    edi
c0015d35:	5d                   	pop    ebp
c0015d36:	c3                   	ret    
c0015d37:	90                   	nop

c0015d38 <Timer::Timer(char const*)>:
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3f:	83 ec 08             	sub    esp,0x8
c0015d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d46:	50                   	push   eax
c0015d47:	e8 26 db ff ff       	call   c0013872 <Device::Device(char const*)>
c0015d4c:	83 c4 10             	add    esp,0x10
c0015d4f:	ba 68 7b 02 c0       	mov    edx,0xc0027b68
c0015d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d58:	89 10                	mov    DWORD PTR [eax],edx
c0015d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d68:	90                   	nop
c0015d69:	83 c4 0c             	add    esp,0xc
c0015d6c:	c3                   	ret    
c0015d6d:	90                   	nop

c0015d6e <Timer::~Timer()>:
c0015d6e:	83 ec 0c             	sub    esp,0xc
c0015d71:	ba 68 7b 02 c0       	mov    edx,0xc0027b68
c0015d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7a:	89 10                	mov    DWORD PTR [eax],edx
c0015d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d80:	83 ec 0c             	sub    esp,0xc
c0015d83:	50                   	push   eax
c0015d84:	e8 9b d7 ff ff       	call   c0013524 <Device::~Device()>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	90                   	nop
c0015d8d:	83 c4 0c             	add    esp,0xc
c0015d90:	c3                   	ret    
c0015d91:	90                   	nop

c0015d92 <Timer::~Timer()>:
c0015d92:	83 ec 0c             	sub    esp,0xc
c0015d95:	83 ec 0c             	sub    esp,0xc
c0015d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9c:	e8 cd ff ff ff       	call   c0015d6e <Timer::~Timer()>
c0015da1:	83 c4 10             	add    esp,0x10
c0015da4:	83 ec 08             	sub    esp,0x8
c0015da7:	68 5c 01 00 00       	push   0x15c
c0015dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db0:	e8 e2 c3 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0015db5:	83 c4 10             	add    esp,0x10
c0015db8:	83 c4 0c             	add    esp,0xc
c0015dbb:	c3                   	ret    

c0015dbc <Timer::read()>:
c0015dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dc6:	c3                   	ret    

c0015dc7 <timerHandler(unsigned long long)>:
c0015dc7:	55                   	push   ebp
c0015dc8:	57                   	push   edi
c0015dc9:	56                   	push   esi
c0015dca:	53                   	push   ebx
c0015dcb:	83 ec 0c             	sub    esp,0xc
c0015dce:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dd2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015dd6:	01 35 30 ac 02 c0    	add    DWORD PTR ds:0xc002ac30,esi
c0015ddc:	11 3d 34 ac 02 c0    	adc    DWORD PTR ds:0xc002ac34,edi
c0015de2:	80 3d cd a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5cd,0x0
c0015de9:	0f 84 07 01 00 00    	je     c0015ef6 <timerHandler(unsigned long long)+0x12f>
c0015def:	e8 5d 5c 00 00       	call   c001ba51 <lockStuff()>
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	68 3c ba 02 c0       	push   0xc002ba3c
c0015dfc:	e8 ef f7 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e01:	c7 04 24 3c ba 02 c0 	mov    DWORD PTR [esp],0xc002ba3c
c0015e08:	89 c3                	mov    ebx,eax
c0015e0a:	e8 e9 f7 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e0f:	83 c4 10             	add    esp,0x10
c0015e12:	84 c0                	test   al,al
c0015e14:	74 60                	je     c0015e76 <timerHandler(unsigned long long)+0xaf>
c0015e16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e1c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015e1f:	85 c0                	test   eax,eax
c0015e21:	0f 85 91 00 00 00    	jne    c0015eb8 <timerHandler(unsigned long long)+0xf1>
c0015e27:	e9 be 00 00 00       	jmp    c0015eea <timerHandler(unsigned long long)+0x123>
c0015e2c:	83 ec 0c             	sub    esp,0xc
c0015e2f:	55                   	push   ebp
c0015e30:	e8 05 62 00 00       	call   c001c03a <unblockTask(ThreadControlBlock*)>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	39 eb                	cmp    ebx,ebp
c0015e3a:	75 12                	jne    c0015e4e <timerHandler(unsigned long long)+0x87>
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	68 3c ba 02 c0       	push   0xc002ba3c
c0015e44:	e8 a7 f7 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e49:	89 c3                	mov    ebx,eax
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	68 3c ba 02 c0       	push   0xc002ba3c
c0015e56:	e8 9d f7 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	84 c0                	test   al,al
c0015e60:	75 b4                	jne    c0015e16 <timerHandler(unsigned long long)+0x4f>
c0015e62:	83 ec 0c             	sub    esp,0xc
c0015e65:	68 3c ba 02 c0       	push   0xc002ba3c
c0015e6a:	e8 81 f7 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e6f:	83 c4 10             	add    esp,0x10
c0015e72:	39 d8                	cmp    eax,ebx
c0015e74:	74 a0                	je     c0015e16 <timerHandler(unsigned long long)+0x4f>
c0015e76:	83 ec 0c             	sub    esp,0xc
c0015e79:	68 3c ba 02 c0       	push   0xc002ba3c
c0015e7e:	e8 6d f7 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e83:	c7 04 24 3c ba 02 c0 	mov    DWORD PTR [esp],0xc002ba3c
c0015e8a:	89 c5                	mov    ebp,eax
c0015e8c:	e8 83 f7 00 00       	call   c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e91:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e9a:	39 15 30 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac30,edx
c0015ea0:	a1 34 ac 02 c0       	mov    eax,ds:0xc002ac34
c0015ea5:	19 c8                	sbb    eax,ecx
c0015ea7:	73 83                	jae    c0015e2c <timerHandler(unsigned long long)+0x65>
c0015ea9:	50                   	push   eax
c0015eaa:	50                   	push   eax
c0015eab:	55                   	push   ebp
c0015eac:	68 3c ba 02 c0       	push   0xc002ba3c
c0015eb1:	e8 0c f8 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb6:	eb 93                	jmp    c0015e4b <timerHandler(unsigned long long)+0x84>
c0015eb8:	80 3d cc a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a5cc,0x0
c0015ebf:	74 29                	je     c0015eea <timerHandler(unsigned long long)+0x123>
c0015ec1:	39 c6                	cmp    esi,eax
c0015ec3:	bb 00 00 00 00       	mov    ebx,0x0
c0015ec8:	19 df                	sbb    edi,ebx
c0015eca:	72 19                	jb     c0015ee5 <timerHandler(unsigned long long)+0x11e>
c0015ecc:	e8 59 5b 00 00       	call   c001ba2a <lockScheduler()>
c0015ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015ed9:	e8 80 5e 00 00       	call   c001bd5e <schedule()>
c0015ede:	e8 49 5b 00 00       	call   c001ba2c <unlockScheduler()>
c0015ee3:	eb 05                	jmp    c0015eea <timerHandler(unsigned long long)+0x123>
c0015ee5:	29 f0                	sub    eax,esi
c0015ee7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015eea:	83 c4 0c             	add    esp,0xc
c0015eed:	5b                   	pop    ebx
c0015eee:	5e                   	pop    esi
c0015eef:	5f                   	pop    edi
c0015ef0:	5d                   	pop    ebp
c0015ef1:	e9 ed 5e 00 00       	jmp    c001bde3 <unlockStuff()>
c0015ef6:	83 c4 0c             	add    esp,0xc
c0015ef9:	5b                   	pop    ebx
c0015efa:	5e                   	pop    esi
c0015efb:	5f                   	pop    edi
c0015efc:	5d                   	pop    ebp
c0015efd:	c3                   	ret    

c0015efe <setupTimer(int)>:
c0015efe:	57                   	push   edi
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f05:	e8 46 1a 00 00       	call   c0017950 <CPU::getNumber()>
c0015f0a:	85 c0                	test   eax,eax
c0015f0c:	74 32                	je     c0015f40 <setupTimer(int)+0x42>
c0015f0e:	83 ec 0c             	sub    esp,0xc
c0015f11:	68 60 01 00 00       	push   0x160
c0015f16:	e8 6d c2 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015f1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f1e:	89 c3                	mov    ebx,eax
c0015f20:	e8 51 d0 00 00       	call   c0022f76 <APICTimer::APICTimer()>
c0015f25:	6a 00                	push   0x0
c0015f27:	6a 00                	push   0x0
c0015f29:	56                   	push   esi
c0015f2a:	53                   	push   ebx
c0015f2b:	e8 4e cf 00 00       	call   c0022e7e <APICTimer::open(int, int, void*)>
c0015f30:	83 c4 20             	add    esp,0x20
c0015f33:	e8 1c 1a 00 00       	call   c0017954 <CPU::current()>
c0015f38:	56                   	push   esi
c0015f39:	56                   	push   esi
c0015f3a:	53                   	push   ebx
c0015f3b:	e9 96 00 00 00       	jmp    c0015fd6 <setupTimer(int)+0xd8>
c0015f40:	e8 0f 1a 00 00       	call   c0017954 <CPU::current()>
c0015f45:	83 ec 0c             	sub    esp,0xc
c0015f48:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f4e:	e8 11 da ff ff       	call   c0013964 <Device::getName()>
c0015f53:	83 c4 10             	add    esp,0x10
c0015f56:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f59:	0f 85 87 00 00 00    	jne    c0015fe6 <setupTimer(int)+0xe8>
c0015f5f:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0015f64:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f6b:	74 79                	je     c0015fe6 <setupTimer(int)+0xe8>
c0015f6d:	83 ec 0c             	sub    esp,0xc
c0015f70:	68 5c 01 00 00       	push   0x15c
c0015f75:	e8 0e c2 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f7d:	89 c3                	mov    ebx,eax
c0015f7f:	e8 42 d1 00 00       	call   c00230c6 <PIT::PIT()>
c0015f84:	59                   	pop    ecx
c0015f85:	5f                   	pop    edi
c0015f86:	53                   	push   ebx
c0015f87:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c0015f8d:	e8 f0 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015f92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f94:	6a 00                	push   0x0
c0015f96:	6a 00                	push   0x0
c0015f98:	56                   	push   esi
c0015f99:	53                   	push   ebx
c0015f9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f9d:	83 c4 14             	add    esp,0x14
c0015fa0:	68 60 01 00 00       	push   0x160
c0015fa5:	e8 de c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fad:	89 c7                	mov    edi,eax
c0015faf:	e8 c2 cf 00 00       	call   c0022f76 <APICTimer::APICTimer()>
c0015fb4:	6a 00                	push   0x0
c0015fb6:	6a 00                	push   0x0
c0015fb8:	56                   	push   esi
c0015fb9:	57                   	push   edi
c0015fba:	e8 bf ce 00 00       	call   c0022e7e <APICTimer::open(int, int, void*)>
c0015fbf:	83 c4 20             	add    esp,0x20
c0015fc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc4:	6a 00                	push   0x0
c0015fc6:	6a 00                	push   0x0
c0015fc8:	6a 00                	push   0x0
c0015fca:	53                   	push   ebx
c0015fcb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fce:	e8 81 19 00 00       	call   c0017954 <CPU::current()>
c0015fd3:	5a                   	pop    edx
c0015fd4:	59                   	pop    ecx
c0015fd5:	57                   	push   edi
c0015fd6:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fdc:	e8 a1 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	eb 33                	jmp    c0016019 <setupTimer(int)+0x11b>
c0015fe6:	83 ec 0c             	sub    esp,0xc
c0015fe9:	68 5c 01 00 00       	push   0x15c
c0015fee:	e8 95 c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0015ff3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ff6:	89 c3                	mov    ebx,eax
c0015ff8:	e8 c9 d0 00 00       	call   c00230c6 <PIT::PIT()>
c0015ffd:	58                   	pop    eax
c0015ffe:	5a                   	pop    edx
c0015fff:	53                   	push   ebx
c0016000:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c0016006:	e8 77 d6 ff ff       	call   c0013682 <Device::addChild(Device*)>
c001600b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001600d:	6a 00                	push   0x0
c001600f:	6a 00                	push   0x0
c0016011:	56                   	push   esi
c0016012:	53                   	push   ebx
c0016013:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016016:	83 c4 20             	add    esp,0x20
c0016019:	89 d8                	mov    eax,ebx
c001601b:	5b                   	pop    ebx
c001601c:	5e                   	pop    esi
c001601d:	5f                   	pop    edi
c001601e:	c3                   	ret    
c001601f:	90                   	nop

c0016020 <VCache::VCache(PhysicalDisk*)>:
c0016020:	53                   	push   ebx
c0016021:	83 ec 08             	sub    esp,0x8
c0016024:	ba 98 7b 02 c0       	mov    edx,0xc0027b98
c0016029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602d:	89 10                	mov    DWORD PTR [eax],edx
c001602f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016033:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001603a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016049:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016050:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016062:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016078:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	6a 10                	push   0x10
c0016081:	e8 02 c1 ff ff       	call   c0012188 <operator new(unsigned long)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	89 c3                	mov    ebx,eax
c001608b:	83 ec 0c             	sub    esp,0xc
c001608e:	53                   	push   ebx
c001608f:	e8 ae 5a 00 00       	call   c001bb42 <Mutex::Mutex()>
c0016094:	83 c4 10             	add    esp,0x10
c0016097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001609e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00160a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ad:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00160b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160b8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00160be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00160c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160c9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160d9:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160dc:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e3:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160f1:	c1 e0 06             	shl    eax,0x6
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	50                   	push   eax
c00160f8:	e8 71 90 ff ff       	call   c000f16e <malloc>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	89 c2                	mov    edx,eax
c0016102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016106:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016109:	90                   	nop
c001610a:	83 c4 08             	add    esp,0x8
c001610d:	5b                   	pop    ebx
c001610e:	c3                   	ret    
c001610f:	90                   	nop

c0016110 <VCache::writeWriteBuffer()>:
c0016110:	53                   	push   ebx
c0016111:	83 ec 14             	sub    esp,0x14
c0016114:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016118:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001611b:	8b 10                	mov    edx,DWORD PTR [eax]
c001611d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016120:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016123:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016126:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016129:	50                   	push   eax
c001612a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001612d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016134:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001613b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001613f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016146:	83 c4 28             	add    esp,0x28
c0016149:	5b                   	pop    ebx
c001614a:	c3                   	ret    
c001614b:	90                   	nop

c001614c <VCache::~VCache()>:
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	ba 98 7b 02 c0       	mov    edx,0xc0027b98
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	89 10                	mov    DWORD PTR [eax],edx
c001615a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016161:	84 c0                	test   al,al
c0016163:	74 0f                	je     c0016174 <VCache::~VCache()+0x28>
c0016165:	83 ec 0c             	sub    esp,0xc
c0016168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001616c:	e8 9f ff ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c0016171:	83 c4 10             	add    esp,0x10
c0016174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016178:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001617b:	83 ec 0c             	sub    esp,0xc
c001617e:	50                   	push   eax
c001617f:	e8 fa 8f ff ff       	call   c000f17e <free>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	90                   	nop
c0016188:	83 c4 0c             	add    esp,0xc
c001618b:	c3                   	ret    

c001618c <VCache::~VCache()>:
c001618c:	83 ec 0c             	sub    esp,0xc
c001618f:	83 ec 0c             	sub    esp,0xc
c0016192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016196:	e8 b1 ff ff ff       	call   c001614c <VCache::~VCache()>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	83 ec 08             	sub    esp,0x8
c00161a1:	6a 30                	push   0x30
c00161a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a7:	e8 eb bf ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00161ac:	83 c4 10             	add    esp,0x10
c00161af:	83 c4 0c             	add    esp,0xc
c00161b2:	c3                   	ret    
c00161b3:	90                   	nop

c00161b4 <VCache::write(unsigned long long, int, void*)>:
c00161b4:	55                   	push   ebp
c00161b5:	57                   	push   edi
c00161b6:	56                   	push   esi
c00161b7:	53                   	push   ebx
c00161b8:	83 ec 28             	sub    esp,0x28
c00161bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00161bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00161c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161ce:	e8 d1 5d 00 00       	call   c001bfa4 <Semaphore::acquire()>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161da:	74 66                	je     c0016242 <VCache::write(unsigned long long, int, void*)+0x8e>
c00161dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161df:	99                   	cdq    
c00161e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161e4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161e7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161ea:	89 c1                	mov    ecx,eax
c00161ec:	89 d0                	mov    eax,edx
c00161ee:	31 f1                	xor    ecx,esi
c00161f0:	31 f8                	xor    eax,edi
c00161f2:	89 ca                	mov    edx,ecx
c00161f4:	09 c2                	or     edx,eax
c00161f6:	75 3e                	jne    c0016236 <VCache::write(unsigned long long, int, void*)+0x82>
c00161f8:	83 fd 01             	cmp    ebp,0x1
c00161fb:	75 39                	jne    c0016236 <VCache::write(unsigned long long, int, void*)+0x82>
c00161fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016200:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016206:	51                   	push   ecx
c0016207:	50                   	push   eax
c0016208:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001620c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016210:	0f af c8             	imul   ecx,eax
c0016213:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016216:	51                   	push   ecx
c0016217:	e8 73 a4 fe ff       	call   c000068f <memcpy>
c001621c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001621f:	83 c4 10             	add    esp,0x10
c0016222:	40                   	inc    eax
c0016223:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016226:	83 f8 40             	cmp    eax,0x40
c0016229:	75 57                	jne    c0016282 <VCache::write(unsigned long long, int, void*)+0xce>
c001622b:	83 ec 0c             	sub    esp,0xc
c001622e:	53                   	push   ebx
c001622f:	e8 dc fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c0016234:	eb 34                	jmp    c001626a <VCache::write(unsigned long long, int, void*)+0xb6>
c0016236:	83 ec 0c             	sub    esp,0xc
c0016239:	53                   	push   ebx
c001623a:	e8 d1 fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016245:	83 fd 3f             	cmp    ebp,0x3f
c0016248:	7f 25                	jg     c001626f <VCache::write(unsigned long long, int, void*)+0xbb>
c001624a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001624d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016250:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016253:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016257:	52                   	push   edx
c0016258:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001625e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016262:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016265:	e8 25 a4 fe ff       	call   c000068f <memcpy>
c001626a:	83 c4 10             	add    esp,0x10
c001626d:	eb 13                	jmp    c0016282 <VCache::write(unsigned long long, int, void*)+0xce>
c001626f:	83 ec 0c             	sub    esp,0xc
c0016272:	8b 10                	mov    edx,DWORD PTR [eax]
c0016274:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016278:	55                   	push   ebp
c0016279:	57                   	push   edi
c001627a:	56                   	push   esi
c001627b:	50                   	push   eax
c001627c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001627f:	83 c4 20             	add    esp,0x20
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016288:	e8 9f 62 00 00       	call   c001c52c <Semaphore::release()>
c001628d:	83 c4 2c             	add    esp,0x2c
c0016290:	31 c0                	xor    eax,eax
c0016292:	5b                   	pop    ebx
c0016293:	5e                   	pop    esi
c0016294:	5f                   	pop    edi
c0016295:	5d                   	pop    ebp
c0016296:	c3                   	ret    
c0016297:	90                   	nop

c0016298 <VCache::read(unsigned long long, int, void*)>:
c0016298:	57                   	push   edi
c0016299:	56                   	push   esi
c001629a:	53                   	push   ebx
c001629b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001629f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00162a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162ad:	e8 f2 5c 00 00       	call   c001bfa4 <Semaphore::acquire()>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00162b9:	74 0c                	je     c00162c7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00162bb:	83 ec 0c             	sub    esp,0xc
c00162be:	53                   	push   ebx
c00162bf:	e8 4c fe ff ff       	call   c0016110 <VCache::writeWriteBuffer()>
c00162c4:	83 c4 10             	add    esp,0x10
c00162c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00162cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d7:	57                   	push   edi
c00162d8:	56                   	push   esi
c00162d9:	50                   	push   eax
c00162da:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162dd:	83 c4 14             	add    esp,0x14
c00162e0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162e3:	e8 44 62 00 00       	call   c001c52c <Semaphore::release()>
c00162e8:	83 c4 10             	add    esp,0x10
c00162eb:	31 c0                	xor    eax,eax
c00162ed:	5b                   	pop    ebx
c00162ee:	5e                   	pop    esi
c00162ef:	5f                   	pop    edi
c00162f0:	c3                   	ret    
c00162f1:	90                   	nop

c00162f2 <Video::putrect(int, int, int, int, unsigned int)>:
c00162f2:	55                   	push   ebp
c00162f3:	57                   	push   edi
c00162f4:	56                   	push   esi
c00162f5:	53                   	push   ebx
c00162f6:	83 ec 1c             	sub    esp,0x1c
c00162f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016301:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016305:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016309:	01 e8                	add    eax,ebp
c001630b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001630f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016313:	01 df                	add    edi,ebx
c0016315:	39 fb                	cmp    ebx,edi
c0016317:	7d 1b                	jge    c0016334 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016319:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001631d:	7d 12                	jge    c0016331 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001631f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016321:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016325:	53                   	push   ebx
c0016326:	55                   	push   ebp
c0016327:	45                   	inc    ebp
c0016328:	56                   	push   esi
c0016329:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	eb e8                	jmp    c0016319 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016331:	43                   	inc    ebx
c0016332:	eb e1                	jmp    c0016315 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016334:	83 c4 1c             	add    esp,0x1c
c0016337:	5b                   	pop    ebx
c0016338:	5e                   	pop    esi
c0016339:	5f                   	pop    edi
c001633a:	5d                   	pop    ebp
c001633b:	c3                   	ret    

c001633c <Video::blit(unsigned int*, int, int, int, int)>:
c001633c:	55                   	push   ebp
c001633d:	57                   	push   edi
c001633e:	56                   	push   esi
c001633f:	53                   	push   ebx
c0016340:	83 ec 1c             	sub    esp,0x1c
c0016343:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016347:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001634b:	85 c0                	test   eax,eax
c001634d:	79 02                	jns    c0016351 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001634f:	31 c0                	xor    eax,eax
c0016351:	c1 e0 02             	shl    eax,0x2
c0016354:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016358:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001635c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016360:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016364:	39 d8                	cmp    eax,ebx
c0016366:	7e 49                	jle    c00163b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016368:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001636e:	7c 41                	jl     c00163b1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016370:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016374:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016378:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001637c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016380:	39 f9                	cmp    ecx,edi
c0016382:	7e 22                	jle    c00163a6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016384:	83 c5 04             	add    ebp,0x4
c0016387:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001638d:	7c 14                	jl     c00163a3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001638f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016391:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016394:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016398:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001639c:	56                   	push   esi
c001639d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	47                   	inc    edi
c00163a4:	eb d2                	jmp    c0016378 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00163a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163aa:	43                   	inc    ebx
c00163ab:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00163af:	eb ab                	jmp    c001635c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00163b1:	83 c4 1c             	add    esp,0x1c
c00163b4:	5b                   	pop    ebx
c00163b5:	5e                   	pop    esi
c00163b6:	5f                   	pop    edi
c00163b7:	5d                   	pop    ebp
c00163b8:	c3                   	ret    
c00163b9:	90                   	nop

c00163ba <Video::clearScreen(unsigned int)>:
c00163ba:	57                   	push   edi
c00163bb:	56                   	push   esi
c00163bc:	53                   	push   ebx
c00163bd:	31 db                	xor    ebx,ebx
c00163bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163c3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163c9:	7e 1f                	jle    c00163ea <Video::clearScreen(unsigned int)+0x30>
c00163cb:	31 ff                	xor    edi,edi
c00163cd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163d3:	7e 12                	jle    c00163e7 <Video::clearScreen(unsigned int)+0x2d>
c00163d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00163d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163db:	53                   	push   ebx
c00163dc:	57                   	push   edi
c00163dd:	47                   	inc    edi
c00163de:	56                   	push   esi
c00163df:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163e2:	83 c4 10             	add    esp,0x10
c00163e5:	eb e6                	jmp    c00163cd <Video::clearScreen(unsigned int)+0x13>
c00163e7:	43                   	inc    ebx
c00163e8:	eb d9                	jmp    c00163c3 <Video::clearScreen(unsigned int)+0x9>
c00163ea:	5b                   	pop    ebx
c00163eb:	5e                   	pop    esi
c00163ec:	5f                   	pop    edi
c00163ed:	c3                   	ret    

c00163ee <Video::putpixel(int, int, unsigned int)>:
c00163ee:	c7 44 24 04 a0 7b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027ba0
c00163f6:	e9 7c be ff ff       	jmp    c0012277 <Dbg::kprintf(char const*, ...)>
c00163fb:	90                   	nop

c00163fc <Video::Video(char const*)>:
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016403:	83 ec 08             	sub    esp,0x8
c0016406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640a:	50                   	push   eax
c001640b:	e8 62 d4 ff ff       	call   c0013872 <Device::Device(char const*)>
c0016410:	83 c4 10             	add    esp,0x10
c0016413:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	89 10                	mov    DWORD PTR [eax],edx
c001641e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016422:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001642c:	90                   	nop
c001642d:	83 c4 0c             	add    esp,0xc
c0016430:	c3                   	ret    
c0016431:	90                   	nop

c0016432 <Video::~Video()>:
c0016432:	83 ec 0c             	sub    esp,0xc
c0016435:	ba b8 7b 02 c0       	mov    edx,0xc0027bb8
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	89 10                	mov    DWORD PTR [eax],edx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	50                   	push   eax
c0016448:	e8 d7 d0 ff ff       	call   c0013524 <Device::~Device()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	90                   	nop
c0016451:	83 c4 0c             	add    esp,0xc
c0016454:	c3                   	ret    
c0016455:	90                   	nop

c0016456 <Video::~Video()>:
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	83 ec 0c             	sub    esp,0xc
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 cd ff ff ff       	call   c0016432 <Video::~Video()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 ec 08             	sub    esp,0x8
c001646b:	68 64 01 00 00       	push   0x164
c0016470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016474:	e8 1e bd ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	83 c4 0c             	add    esp,0xc
c001647f:	c3                   	ret    

c0016480 <Video::isMonochrome()>:
c0016480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016484:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <Video::getWidth()>:
c001648c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016490:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016496:	c3                   	ret    
c0016497:	90                   	nop

c0016498 <Video::getHeight()>:
c0016498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001649c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00164a4:	55                   	push   ebp
c00164a5:	57                   	push   edi
c00164a6:	56                   	push   esi
c00164a7:	53                   	push   ebx
c00164a8:	83 ec 2c             	sub    esp,0x2c
c00164ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00164af:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164b3:	83 f8 01             	cmp    eax,0x1
c00164b6:	19 c9                	sbb    ecx,ecx
c00164b8:	31 db                	xor    ebx,ebx
c00164ba:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00164be:	89 cd                	mov    ebp,ecx
c00164c0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164c8:	f7 d5                	not    ebp
c00164ca:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164d4:	01 d8                	add    eax,ebx
c00164d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164da:	56                   	push   esi
c00164db:	e8 b8 ff ff ff       	call   c0016498 <Video::getHeight()>
c00164e0:	59                   	pop    ecx
c00164e1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164e5:	7e 70                	jle    c0016557 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164eb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164ef:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164fa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016501:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016505:	89 f8                	mov    eax,edi
c0016507:	83 c0 20             	add    eax,0x20
c001650a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001650e:	56                   	push   esi
c001650f:	e8 78 ff ff ff       	call   c001648c <Video::getWidth()>
c0016514:	5a                   	pop    edx
c0016515:	39 c7                	cmp    edi,eax
c0016517:	7d 34                	jge    c001654d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016519:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001651e:	74 05                	je     c0016525 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016520:	8b 06                	mov    eax,DWORD PTR [esi]
c0016522:	55                   	push   ebp
c0016523:	eb 0d                	jmp    c0016532 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016525:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001652a:	74 12                	je     c001653e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001652c:	8b 06                	mov    eax,DWORD PTR [esi]
c001652e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016532:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016536:	57                   	push   edi
c0016537:	56                   	push   esi
c0016538:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016542:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016546:	47                   	inc    edi
c0016547:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001654b:	75 c1                	jne    c001650e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001654d:	43                   	inc    ebx
c001654e:	83 fb 20             	cmp    ebx,0x20
c0016551:	0f 85 79 ff ff ff    	jne    c00164d0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016557:	83 c4 2c             	add    esp,0x2c
c001655a:	5b                   	pop    ebx
c001655b:	5e                   	pop    esi
c001655c:	5f                   	pop    edi
c001655d:	5d                   	pop    ebp
c001655e:	c3                   	ret    
c001655f:	90                   	nop

c0016560 <ACPI::close(int, int, void*)>:
c0016560:	83 ec 1c             	sub    esp,0x1c
c0016563:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001656b:	74 0a                	je     c0016577 <ACPI::close(int, int, void*)+0x17>
c001656d:	b8 00 00 00 00       	mov    eax,0x0
c0016572:	e9 9a 00 00 00       	jmp    c0016611 <ACPI::close(int, int, void*)+0xb1>
c0016577:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001657c:	75 37                	jne    c00165b5 <ACPI::close(int, int, void*)+0x55>
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	68 f0 7b 02 c0       	push   0xc0027bf0
c0016586:	e8 ec bc ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	a1 48 ac 02 c0       	mov    eax,ds:0xc002ac48
c0016593:	85 c0                	test   eax,eax
c0016595:	74 07                	je     c001659e <ACPI::close(int, int, void*)+0x3e>
c0016597:	a1 48 ac 02 c0       	mov    eax,ds:0xc002ac48
c001659c:	ff d0                	call   eax
c001659e:	83 ec 0c             	sub    esp,0xc
c00165a1:	68 a4 7c 02 c0       	push   0xc0027ca4
c00165a6:	e8 2c 25 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165b3:	eb 5c                	jmp    c0016611 <ACPI::close(int, int, void*)+0xb1>
c00165b5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00165ba:	75 50                	jne    c001660c <ACPI::close(int, int, void*)+0xac>
c00165bc:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c00165c1:	85 c0                	test   eax,eax
c00165c3:	74 07                	je     c00165cc <ACPI::close(int, int, void*)+0x6c>
c00165c5:	a1 44 ac 02 c0       	mov    eax,ds:0xc002ac44
c00165ca:	ff d0                	call   eax
c00165cc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165d1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165d6:	83 e0 02             	and    eax,0x2
c00165d9:	74 1c                	je     c00165f7 <ACPI::close(int, int, void*)+0x97>
c00165db:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165e6:	89 c2                	mov    edx,eax
c00165e8:	ec                   	in     al,dx
c00165e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165ed:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165f5:	eb da                	jmp    c00165d1 <ACPI::close(int, int, void*)+0x71>
c00165f7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165fe:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016603:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001660b:	ee                   	out    dx,al
c001660c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016611:	83 c4 1c             	add    esp,0x1c
c0016614:	c3                   	ret    

c0016615 <findRSDP()>:
c0016615:	83 ec 1c             	sub    esp,0x1c
c0016618:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c001661d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016623:	83 e0 04             	and    eax,0x4
c0016626:	84 c0                	test   al,al
c0016628:	75 07                	jne    c0016631 <findRSDP()+0x1c>
c001662a:	b8 00 00 00 00       	mov    eax,0x0
c001662f:	eb 6a                	jmp    c001669b <findRSDP()+0x86>
c0016631:	a1 10 a6 02 c0       	mov    eax,ds:0xc002a610
c0016636:	3d ff 07 00 00       	cmp    eax,0x7ff
c001663b:	7f 1b                	jg     c0016658 <findRSDP()+0x43>
c001663d:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0016642:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016648:	83 e2 fb             	and    edx,0xfffffffb
c001664b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016651:	b8 00 00 00 00       	mov    eax,0x0
c0016656:	eb 43                	jmp    c001669b <findRSDP()+0x86>
c0016658:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016660:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016668:	77 2c                	ja     c0016696 <findRSDP()+0x81>
c001666a:	83 ec 04             	sub    esp,0x4
c001666d:	6a 08                	push   0x8
c001666f:	68 fd 7b 02 c0       	push   0xc0027bfd
c0016674:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016678:	e8 af 9f fe ff       	call   c000062c <memcmp>
c001667d:	83 c4 10             	add    esp,0x10
c0016680:	85 c0                	test   eax,eax
c0016682:	0f 94 c0             	sete   al
c0016685:	84 c0                	test   al,al
c0016687:	74 06                	je     c001668f <findRSDP()+0x7a>
c0016689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001668d:	eb 0c                	jmp    c001669b <findRSDP()+0x86>
c001668f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016694:	eb ca                	jmp    c0016660 <findRSDP()+0x4b>
c0016696:	b8 00 00 00 00       	mov    eax,0x0
c001669b:	83 c4 1c             	add    esp,0x1c
c001669e:	c3                   	ret    

c001669f <loadACPITables(unsigned char*)>:
c001669f:	56                   	push   esi
c00166a0:	53                   	push   ebx
c00166a1:	83 ec 44             	sub    esp,0x44
c00166a4:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c00166a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00166af:	83 e0 04             	and    eax,0x4
c00166b2:	84 c0                	test   al,al
c00166b4:	0f 84 05 02 00 00    	je     c00168bf <loadACPITables(unsigned char*)+0x220>
c00166ba:	a0 60 ae 02 c0       	mov    al,ds:0xc002ae60
c00166bf:	84 c0                	test   al,al
c00166c1:	74 75                	je     c0016738 <loadACPITables(unsigned char*)+0x99>
c00166c3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166d2:	83 e8 24             	sub    eax,0x24
c00166d5:	c1 e8 03             	shr    eax,0x3
c00166d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166dc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166ec:	0f 8d b2 00 00 00    	jge    c00167a4 <loadACPITables(unsigned char*)+0x105>
c00166f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166f6:	83 c0 24             	add    eax,0x24
c00166f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016701:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016705:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016709:	c1 e0 03             	shl    eax,0x3
c001670c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016710:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016714:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016717:	8b 00                	mov    eax,DWORD PTR [eax]
c0016719:	89 c1                	mov    ecx,eax
c001671b:	a1 4c ac 02 c0       	mov    eax,ds:0xc002ac4c
c0016720:	8d 50 01             	lea    edx,[eax+0x1]
c0016723:	89 15 4c ac 02 c0    	mov    DWORD PTR ds:0xc002ac4c,edx
c0016729:	89 ca                	mov    edx,ecx
c001672b:	89 14 c5 64 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd539c],edx
c0016732:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016736:	eb ac                	jmp    c00166e4 <loadACPITables(unsigned char*)+0x45>
c0016738:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001673c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016747:	83 e8 24             	sub    eax,0x24
c001674a:	c1 e8 02             	shr    eax,0x2
c001674d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016751:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016759:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001675d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016761:	7d 41                	jge    c00167a4 <loadACPITables(unsigned char*)+0x105>
c0016763:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016767:	83 c0 24             	add    eax,0x24
c001676a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001676e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016772:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001677a:	c1 e0 02             	shl    eax,0x2
c001677d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016781:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016785:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016787:	a1 4c ac 02 c0       	mov    eax,ds:0xc002ac4c
c001678c:	8d 50 01             	lea    edx,[eax+0x1]
c001678f:	89 15 4c ac 02 c0    	mov    DWORD PTR ds:0xc002ac4c,edx
c0016795:	89 ca                	mov    edx,ecx
c0016797:	89 14 c5 64 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd539c],edx
c001679e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00167a2:	eb b5                	jmp    c0016759 <loadACPITables(unsigned char*)+0xba>
c00167a4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00167ac:	a1 4c ac 02 c0       	mov    eax,ds:0xc002ac4c
c00167b1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00167b5:	0f 8d 05 01 00 00    	jge    c00168c0 <loadACPITables(unsigned char*)+0x221>
c00167bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167bf:	8b 04 c5 64 ac 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd539c]
c00167c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d6:	25 ff 0f 00 00       	and    eax,0xfff
c00167db:	89 c6                	mov    esi,eax
c00167dd:	e8 53 ac ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c00167e2:	89 c3                	mov    ebx,eax
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	6a 01                	push   0x1
c00167e9:	e8 b7 aa ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c00167ee:	83 c4 10             	add    esp,0x10
c00167f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167fb:	83 ec 0c             	sub    esp,0xc
c00167fe:	6a 01                	push   0x1
c0016800:	6a 01                	push   0x1
c0016802:	50                   	push   eax
c0016803:	52                   	push   edx
c0016804:	53                   	push   ebx
c0016805:	e8 5a b4 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001680a:	83 c4 20             	add    esp,0x20
c001680d:	09 f0                	or     eax,esi
c001680f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016813:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016817:	c1 e0 03             	shl    eax,0x3
c001681a:	05 60 ac 02 c0       	add    eax,0xc002ac60
c001681f:	83 ec 04             	sub    esp,0x4
c0016822:	6a 04                	push   0x4
c0016824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016828:	50                   	push   eax
c0016829:	e8 61 9e fe ff       	call   c000068f <memcpy>
c001682e:	83 c4 10             	add    esp,0x10
c0016831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016835:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001683c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016840:	05 00 10 00 00       	add    eax,0x1000
c0016845:	c1 e8 0c             	shr    eax,0xc
c0016848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001684c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016850:	89 04 24             	mov    DWORD PTR [esp],eax
c0016853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016857:	25 ff 0f 00 00       	and    eax,0xfff
c001685c:	89 c6                	mov    esi,eax
c001685e:	e8 d2 ab ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016863:	89 c3                	mov    ebx,eax
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001686c:	e8 34 aa ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016878:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001687e:	83 ec 0c             	sub    esp,0xc
c0016881:	6a 01                	push   0x1
c0016883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016887:	50                   	push   eax
c0016888:	52                   	push   edx
c0016889:	53                   	push   ebx
c001688a:	e8 d5 b3 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001688f:	83 c4 20             	add    esp,0x20
c0016892:	09 f0                	or     eax,esi
c0016894:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016898:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001689b:	83 ec 0c             	sub    esp,0xc
c001689e:	50                   	push   eax
c001689f:	e8 5b ad ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c00168a4:	83 c4 10             	add    esp,0x10
c00168a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168af:	89 14 c5 64 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd539c],edx
c00168b6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00168ba:	e9 ed fe ff ff       	jmp    c00167ac <loadACPITables(unsigned char*)+0x10d>
c00168bf:	90                   	nop
c00168c0:	83 c4 44             	add    esp,0x44
c00168c3:	5b                   	pop    ebx
c00168c4:	5e                   	pop    esi
c00168c5:	c3                   	ret    

c00168c6 <findRSDT(unsigned char*)>:
c00168c6:	56                   	push   esi
c00168c7:	53                   	push   ebx
c00168c8:	83 ec 44             	sub    esp,0x44
c00168cb:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c00168d0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168d6:	83 e0 04             	and    eax,0x4
c00168d9:	84 c0                	test   al,al
c00168db:	75 0a                	jne    c00168e7 <findRSDT(unsigned char*)+0x21>
c00168dd:	b8 00 00 00 00       	mov    eax,0x0
c00168e2:	e9 f7 00 00 00       	jmp    c00169de <findRSDT(unsigned char*)+0x118>
c00168e7:	83 ec 04             	sub    esp,0x4
c00168ea:	6a 24                	push   0x24
c00168ec:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168f0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168f4:	50                   	push   eax
c00168f5:	e8 95 9d fe ff       	call   c000068f <memcpy>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016901:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016905:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001690d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016915:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016919:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001691d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016921:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016925:	25 ff 0f 00 00       	and    eax,0xfff
c001692a:	89 c6                	mov    esi,eax
c001692c:	e8 04 ab ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016931:	89 c3                	mov    ebx,eax
c0016933:	83 ec 0c             	sub    esp,0xc
c0016936:	6a 02                	push   0x2
c0016938:	e8 68 a9 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016944:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	6a 01                	push   0x1
c001694f:	6a 02                	push   0x2
c0016951:	50                   	push   eax
c0016952:	52                   	push   edx
c0016953:	53                   	push   ebx
c0016954:	e8 0b b3 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016959:	83 c4 20             	add    esp,0x20
c001695c:	09 f0                	or     eax,esi
c001695e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016966:	25 ff 0f 00 00       	and    eax,0xfff
c001696b:	89 c6                	mov    esi,eax
c001696d:	e8 c3 aa ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c0016972:	89 c3                	mov    ebx,eax
c0016974:	83 ec 0c             	sub    esp,0xc
c0016977:	6a 02                	push   0x2
c0016979:	e8 27 a9 ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016985:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001698b:	83 ec 0c             	sub    esp,0xc
c001698e:	6a 01                	push   0x1
c0016990:	6a 02                	push   0x2
c0016992:	50                   	push   eax
c0016993:	52                   	push   edx
c0016994:	53                   	push   ebx
c0016995:	e8 ca b2 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001699a:	83 c4 20             	add    esp,0x20
c001699d:	09 f0                	or     eax,esi
c001699f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169a3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00169a8:	75 11                	jne    c00169bb <findRSDT(unsigned char*)+0xf5>
c00169aa:	c6 05 60 ae 02 c0 00 	mov    BYTE PTR ds:0xc002ae60,0x0
c00169b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169b5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169b9:	eb 1f                	jmp    c00169da <findRSDT(unsigned char*)+0x114>
c00169bb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00169c0:	75 11                	jne    c00169d3 <findRSDT(unsigned char*)+0x10d>
c00169c2:	c6 05 60 ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae60,0x1
c00169c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169d1:	eb 07                	jmp    c00169da <findRSDT(unsigned char*)+0x114>
c00169d3:	b8 00 00 00 00       	mov    eax,0x0
c00169d8:	eb 04                	jmp    c00169de <findRSDT(unsigned char*)+0x118>
c00169da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169de:	83 c4 44             	add    esp,0x44
c00169e1:	5b                   	pop    ebx
c00169e2:	5e                   	pop    esi
c00169e3:	c3                   	ret    

c00169e4 <findDataTable(unsigned char*, char*)>:
c00169e4:	83 ec 1c             	sub    esp,0x1c
c00169e7:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c00169ec:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169f2:	83 e0 04             	and    eax,0x4
c00169f5:	84 c0                	test   al,al
c00169f7:	75 07                	jne    c0016a00 <findDataTable(unsigned char*, char*)+0x1c>
c00169f9:	b8 00 00 00 00       	mov    eax,0x0
c00169fe:	eb 7c                	jmp    c0016a7c <findDataTable(unsigned char*, char*)+0x98>
c0016a00:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a08:	a1 4c ac 02 c0       	mov    eax,ds:0xc002ac4c
c0016a0d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016a11:	7d 3a                	jge    c0016a4d <findDataTable(unsigned char*, char*)+0x69>
c0016a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a17:	c1 e0 03             	shl    eax,0x3
c0016a1a:	05 60 ac 02 c0       	add    eax,0xc002ac60
c0016a1f:	83 ec 04             	sub    esp,0x4
c0016a22:	6a 04                	push   0x4
c0016a24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a28:	50                   	push   eax
c0016a29:	e8 fe 9b fe ff       	call   c000062c <memcmp>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	85 c0                	test   eax,eax
c0016a33:	0f 94 c0             	sete   al
c0016a36:	84 c0                	test   al,al
c0016a38:	74 0d                	je     c0016a47 <findDataTable(unsigned char*, char*)+0x63>
c0016a3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a3e:	8b 04 c5 64 ac 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd539c]
c0016a45:	eb 35                	jmp    c0016a7c <findDataTable(unsigned char*, char*)+0x98>
c0016a47:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a4b:	eb bb                	jmp    c0016a08 <findDataTable(unsigned char*, char*)+0x24>
c0016a4d:	a0 60 ae 02 c0       	mov    al,ds:0xc002ae60
c0016a52:	84 c0                	test   al,al
c0016a54:	74 07                	je     c0016a5d <findDataTable(unsigned char*, char*)+0x79>
c0016a56:	b8 58 00 00 00       	mov    eax,0x58
c0016a5b:	eb 05                	jmp    c0016a62 <findDataTable(unsigned char*, char*)+0x7e>
c0016a5d:	b8 52 00 00 00       	mov    eax,0x52
c0016a62:	83 ec 04             	sub    esp,0x4
c0016a65:	50                   	push   eax
c0016a66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a6a:	68 c8 7c 02 c0       	push   0xc0027cc8
c0016a6f:	e8 03 b8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0016a74:	83 c4 10             	add    esp,0x10
c0016a77:	b8 00 00 00 00       	mov    eax,0x0
c0016a7c:	83 c4 1c             	add    esp,0x1c
c0016a7f:	c3                   	ret    

c0016a80 <scanMADT()>:
c0016a80:	83 ec 2c             	sub    esp,0x2c
c0016a83:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0016a88:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a8e:	83 e0 04             	and    eax,0x4
c0016a91:	84 c0                	test   al,al
c0016a93:	0f 84 35 04 00 00    	je     c0016ece <scanMADT()+0x44e>
c0016a99:	e8 77 fb ff ff       	call   c0016615 <findRSDP()>
c0016a9e:	a3 6c ae 02 c0       	mov    ds:0xc002ae6c,eax
c0016aa3:	a1 6c ae 02 c0       	mov    eax,ds:0xc002ae6c
c0016aa8:	85 c0                	test   eax,eax
c0016aaa:	75 19                	jne    c0016ac5 <scanMADT()+0x45>
c0016aac:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0016ab1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ab7:	83 e2 fb             	and    edx,0xfffffffb
c0016aba:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ac0:	e9 0d 04 00 00       	jmp    c0016ed2 <scanMADT()+0x452>
c0016ac5:	a1 6c ae 02 c0       	mov    eax,ds:0xc002ae6c
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	50                   	push   eax
c0016ace:	e8 f3 fd ff ff       	call   c00168c6 <findRSDT(unsigned char*)>
c0016ad3:	83 c4 10             	add    esp,0x10
c0016ad6:	a3 68 ae 02 c0       	mov    ds:0xc002ae68,eax
c0016adb:	a1 68 ae 02 c0       	mov    eax,ds:0xc002ae68
c0016ae0:	85 c0                	test   eax,eax
c0016ae2:	75 19                	jne    c0016afd <scanMADT()+0x7d>
c0016ae4:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0016ae9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016aef:	83 e2 fb             	and    edx,0xfffffffb
c0016af2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016af8:	e9 d5 03 00 00       	jmp    c0016ed2 <scanMADT()+0x452>
c0016afd:	a1 68 ae 02 c0       	mov    eax,ds:0xc002ae68
c0016b02:	83 ec 0c             	sub    esp,0xc
c0016b05:	50                   	push   eax
c0016b06:	e8 94 fb ff ff       	call   c001669f <loadACPITables(unsigned char*)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	a1 68 ae 02 c0       	mov    eax,ds:0xc002ae68
c0016b13:	83 ec 08             	sub    esp,0x8
c0016b16:	68 06 7c 02 c0       	push   0xc0027c06
c0016b1b:	50                   	push   eax
c0016b1c:	e8 c3 fe ff ff       	call   c00169e4 <findDataTable(unsigned char*, char*)>
c0016b21:	83 c4 10             	add    esp,0x10
c0016b24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b28:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b2d:	75 19                	jne    c0016b48 <scanMADT()+0xc8>
c0016b2f:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0016b34:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b3a:	83 e2 fe             	and    edx,0xfffffffe
c0016b3d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b43:	e9 8a 03 00 00       	jmp    c0016ed2 <scanMADT()+0x452>
c0016b48:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b57:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b5b:	0f 87 71 03 00 00    	ja     c0016ed2 <scanMADT()+0x452>
c0016b61:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b69:	0f 87 63 03 00 00    	ja     c0016ed2 <scanMADT()+0x452>
c0016b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b7b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b86:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b8a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b92:	8d 50 01             	lea    edx,[eax+0x1]
c0016b95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b9d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016ba1:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016ba5:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016baa:	0f 86 21 03 00 00    	jbe    c0016ed1 <scanMADT()+0x451>
c0016bb0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016bb5:	75 57                	jne    c0016c0e <scanMADT()+0x18e>
c0016bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bbb:	8d 50 01             	lea    edx,[eax+0x1]
c0016bbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bc2:	8a 15 e0 af 02 c0    	mov    dl,BYTE PTR ds:0xc002afe0
c0016bc8:	0f b6 d2             	movzx  edx,dl
c0016bcb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bcf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bd3:	88 82 20 b0 02 c0    	mov    BYTE PTR [edx-0x3ffd4fe0],al
c0016bd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bdd:	8d 50 01             	lea    edx,[eax+0x1]
c0016be0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016be4:	8a 15 e0 af 02 c0    	mov    dl,BYTE PTR ds:0xc002afe0
c0016bea:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bed:	88 0d e0 af 02 c0    	mov    BYTE PTR ds:0xc002afe0,cl
c0016bf3:	0f b6 d2             	movzx  edx,dl
c0016bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bfa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bfe:	88 82 00 b0 02 c0    	mov    BYTE PTR [edx-0x3ffd5000],al
c0016c04:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c09:	e9 ac 02 00 00       	jmp    c0016eba <scanMADT()+0x43a>
c0016c0e:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016c13:	0f 85 14 01 00 00    	jne    c0016d2d <scanMADT()+0x2ad>
c0016c19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1d:	8d 50 01             	lea    edx,[eax+0x1]
c0016c20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c24:	8a 15 a0 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002aea0
c0016c2a:	0f b6 d2             	movzx  edx,dl
c0016c2d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c31:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c35:	88 82 c0 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5140],al
c0016c3b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c47:	01 d0                	add    eax,edx
c0016c49:	83 c0 2c             	add    eax,0x2c
c0016c4c:	8a 00                	mov    al,BYTE PTR [eax]
c0016c4e:	0f b6 d0             	movzx  edx,al
c0016c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c55:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c5c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c60:	0f b6 c0             	movzx  eax,al
c0016c63:	c1 e0 08             	shl    eax,0x8
c0016c66:	89 d1                	mov    ecx,edx
c0016c68:	09 c1                	or     ecx,eax
c0016c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c6e:	8d 50 02             	lea    edx,[eax+0x2]
c0016c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c75:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c79:	0f b6 c0             	movzx  eax,al
c0016c7c:	c1 e0 10             	shl    eax,0x10
c0016c7f:	09 c1                	or     ecx,eax
c0016c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c85:	8d 50 03             	lea    edx,[eax+0x3]
c0016c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c8c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c90:	0f b6 c0             	movzx  eax,al
c0016c93:	c1 e0 18             	shl    eax,0x18
c0016c96:	09 c1                	or     ecx,eax
c0016c98:	89 ca                	mov    edx,ecx
c0016c9a:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c0016c9f:	0f b6 c0             	movzx  eax,al
c0016ca2:	89 14 85 e0 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5120],edx
c0016ca9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016cae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016cb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb6:	01 d0                	add    eax,edx
c0016cb8:	83 c0 2c             	add    eax,0x2c
c0016cbb:	8a 00                	mov    al,BYTE PTR [eax]
c0016cbd:	0f b6 d0             	movzx  edx,al
c0016cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cc4:	8d 48 01             	lea    ecx,[eax+0x1]
c0016cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ccb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016ccf:	0f b6 c0             	movzx  eax,al
c0016cd2:	c1 e0 08             	shl    eax,0x8
c0016cd5:	89 d1                	mov    ecx,edx
c0016cd7:	09 c1                	or     ecx,eax
c0016cd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cdd:	8d 50 02             	lea    edx,[eax+0x2]
c0016ce0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ce4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ce8:	0f b6 c0             	movzx  eax,al
c0016ceb:	c1 e0 10             	shl    eax,0x10
c0016cee:	09 c1                	or     ecx,eax
c0016cf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cf4:	8d 50 03             	lea    edx,[eax+0x3]
c0016cf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cff:	0f b6 c0             	movzx  eax,al
c0016d02:	c1 e0 18             	shl    eax,0x18
c0016d05:	09 c1                	or     ecx,eax
c0016d07:	89 ca                	mov    edx,ecx
c0016d09:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c0016d0e:	0f b6 c0             	movzx  eax,al
c0016d11:	89 14 85 60 af 02 c0 	mov    DWORD PTR [eax*4-0x3ffd50a0],edx
c0016d18:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d1d:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c0016d22:	40                   	inc    eax
c0016d23:	a2 a0 ae 02 c0       	mov    ds:0xc002aea0,al
c0016d28:	e9 8d 01 00 00       	jmp    c0016eba <scanMADT()+0x43a>
c0016d2d:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d32:	0f 85 e9 00 00 00    	jne    c0016e21 <scanMADT()+0x3a1>
c0016d38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d3c:	8d 50 01             	lea    edx,[eax+0x1]
c0016d3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d47:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d4b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d53:	8d 50 01             	lea    edx,[eax+0x1]
c0016d56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d62:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d6e:	01 d0                	add    eax,edx
c0016d70:	83 c0 2c             	add    eax,0x2c
c0016d73:	8a 00                	mov    al,BYTE PTR [eax]
c0016d75:	0f b6 d0             	movzx  edx,al
c0016d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d7c:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d83:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d87:	0f b6 c0             	movzx  eax,al
c0016d8a:	c1 e0 08             	shl    eax,0x8
c0016d8d:	89 d1                	mov    ecx,edx
c0016d8f:	09 c1                	or     ecx,eax
c0016d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d95:	8d 50 02             	lea    edx,[eax+0x2]
c0016d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d9c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016da0:	0f b6 c0             	movzx  eax,al
c0016da3:	c1 e0 10             	shl    eax,0x10
c0016da6:	09 c1                	or     ecx,eax
c0016da8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dac:	8d 50 03             	lea    edx,[eax+0x3]
c0016daf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016db3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016db7:	0f b6 c0             	movzx  eax,al
c0016dba:	c1 e0 18             	shl    eax,0x18
c0016dbd:	09 c8                	or     eax,ecx
c0016dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dc3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016dcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dd0:	01 d0                	add    eax,edx
c0016dd2:	83 c0 2c             	add    eax,0x2c
c0016dd5:	8a 00                	mov    al,BYTE PTR [eax]
c0016dd7:	0f b6 c0             	movzx  eax,al
c0016dda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016dde:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016de1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016de5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016de9:	0f b6 d2             	movzx  edx,dl
c0016dec:	c1 e2 08             	shl    edx,0x8
c0016def:	09 d0                	or     eax,edx
c0016df1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0016df6:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016dfb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016e00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e04:	88 90 a0 98 02 c0    	mov    BYTE PTR [eax-0x3ffd6760],dl
c0016e0a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0016e0f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016e14:	66 89 84 12 80 ae 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5180],ax
c0016e1c:	e9 99 00 00 00       	jmp    c0016eba <scanMADT()+0x43a>
c0016e21:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016e26:	0f 85 82 00 00 00    	jne    c0016eae <scanMADT()+0x42e>
c0016e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e30:	8d 50 01             	lea    edx,[eax+0x1]
c0016e33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016e37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e3b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016e3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016e43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e4b:	01 d0                	add    eax,edx
c0016e4d:	83 c0 2c             	add    eax,0x2c
c0016e50:	8a 00                	mov    al,BYTE PTR [eax]
c0016e52:	0f b6 c0             	movzx  eax,al
c0016e55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e59:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016e5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e60:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016e64:	0f b6 d2             	movzx  edx,dl
c0016e67:	c1 e2 08             	shl    edx,0x8
c0016e6a:	09 d0                	or     eax,edx
c0016e6c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0016e71:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016e76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e7a:	8d 50 01             	lea    edx,[eax+0x1]
c0016e7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016e81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e85:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016e89:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016e8d:	0f b6 4c 24 05       	movzx  ecx,BYTE PTR [esp+0x5]
c0016e92:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0016e97:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0016e9c:	51                   	push   ecx
c0016e9d:	52                   	push   edx
c0016e9e:	50                   	push   eax
c0016e9f:	68 f8 7c 02 c0       	push   0xc0027cf8
c0016ea4:	e8 ce b3 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	eb 0c                	jmp    c0016eba <scanMADT()+0x43a>
c0016eae:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016eb3:	75 05                	jne    c0016eba <scanMADT()+0x43a>
c0016eb5:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016eba:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ec3:	01 d0                	add    eax,edx
c0016ec5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ec9:	e9 82 fc ff ff       	jmp    c0016b50 <scanMADT()+0xd0>
c0016ece:	90                   	nop
c0016ecf:	eb 01                	jmp    c0016ed2 <scanMADT()+0x452>
c0016ed1:	90                   	nop
c0016ed2:	83 c4 2c             	add    esp,0x2c
c0016ed5:	c3                   	ret    

c0016ed6 <ACPI::ACPI()>:
c0016ed6:	83 ec 0c             	sub    esp,0xc
c0016ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edd:	83 ec 08             	sub    esp,0x8
c0016ee0:	68 0b 7c 02 c0       	push   0xc0027c0b
c0016ee5:	50                   	push   eax
c0016ee6:	e8 87 c9 ff ff       	call   c0013872 <Device::Device(char const*)>
c0016eeb:	83 c4 10             	add    esp,0x10
c0016eee:	ba d0 7d 02 c0       	mov    edx,0xc0027dd0
c0016ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef7:	89 10                	mov    DWORD PTR [eax],edx
c0016ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f08:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f16:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f24:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016f2b:	e8 50 fb ff ff       	call   c0016a80 <scanMADT()>
c0016f30:	90                   	nop
c0016f31:	83 c4 0c             	add    esp,0xc
c0016f34:	c3                   	ret    
c0016f35:	90                   	nop

c0016f36 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016f36:	83 ec 2c             	sub    esp,0x2c
c0016f39:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f41:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016f45:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016f49:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016f4e:	88 d0                	mov    al,dl
c0016f50:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f54:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016f59:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f65:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016f6b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016f6f:	0f 8d 97 00 00 00    	jge    c001700c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016f75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f7d:	83 c2 2a             	add    edx,0x2a
c0016f80:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016f84:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016f89:	75 78                	jne    c0017003 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f93:	83 c2 2a             	add    edx,0x2a
c0016f96:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016f9a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016f9e:	75 63                	jne    c0017003 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016fa0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016fa5:	74 3a                	je     c0016fe1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016fa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016faf:	83 c2 2a             	add    edx,0x2a
c0016fb2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fbd:	39 c2                	cmp    edx,eax
c0016fbf:	74 10                	je     c0016fd1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016fc1:	83 ec 0c             	sub    esp,0xc
c0016fc4:	68 34 7d 02 c0       	push   0xc0027d34
c0016fc9:	e8 09 1b 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0016fce:	83 c4 10             	add    esp,0x10
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	68 10 7c 02 c0       	push   0xc0027c10
c0016fd9:	e8 f9 1a 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0016fde:	83 c4 10             	add    esp,0x10
c0016fe1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016fe5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fe9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fed:	83 c2 2a             	add    edx,0x2a
c0016ff0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016ff4:	8b 02                	mov    eax,DWORD PTR [edx]
c0016ff6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016ff9:	89 01                	mov    DWORD PTR [ecx],eax
c0016ffb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016ffe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017003:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017007:	e9 55 ff ff ff       	jmp    c0016f61 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001700c:	90                   	nop
c001700d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017011:	83 c4 2c             	add    esp,0x2c
c0017014:	c2 04 00             	ret    0x4
c0017017:	90                   	nop

c0017018 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017018:	56                   	push   esi
c0017019:	53                   	push   ebx
c001701a:	83 ec 14             	sub    esp,0x14
c001701d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017021:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017025:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017029:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001702e:	88 c8                	mov    al,cl
c0017030:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017034:	88 d0                	mov    al,dl
c0017036:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017048:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001704e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017053:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017058:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001705d:	83 ec 04             	sub    esp,0x4
c0017060:	56                   	push   esi
c0017061:	53                   	push   ebx
c0017062:	51                   	push   ecx
c0017063:	52                   	push   edx
c0017064:	50                   	push   eax
c0017065:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017069:	68 64 7d 02 c0       	push   0xc0027d64
c001706e:	e8 04 b2 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017073:	83 c4 20             	add    esp,0x20
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017084:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017087:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001708b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001708f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017093:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017099:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001709d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00170a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170a4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00170a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ad:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170b3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00170b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00170ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170be:	83 c2 2a             	add    edx,0x2a
c00170c1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00170c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00170d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170da:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00170de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00170e8:	8d 50 01             	lea    edx,[eax+0x1]
c00170eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ef:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00170f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00170ff:	3d 00 08 00 00       	cmp    eax,0x800
c0017104:	75 10                	jne    c0017116 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017106:	83 ec 0c             	sub    esp,0xc
c0017109:	68 1f 7c 02 c0       	push   0xc0027c1f
c001710e:	e8 c4 19 00 00       	call   c0018ad7 <Krnl::panic(char const*)>
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	90                   	nop
c0017117:	83 c4 14             	add    esp,0x14
c001711a:	5b                   	pop    ebx
c001711b:	5e                   	pop    esi
c001711c:	c3                   	ret    
c001711d:	90                   	nop

c001711e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001711e:	b8 00 00 00 00       	mov    eax,0x0
c0017123:	c3                   	ret    

c0017124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017124:	83 ec 1c             	sub    esp,0x1c
c0017127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001712e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017132:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0017137:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001713c:	83 ec 08             	sub    esp,0x8
c001713f:	52                   	push   edx
c0017140:	50                   	push   eax
c0017141:	e8 38 76 ff ff       	call   c000e77e <Computer::readCMOS(unsigned char)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001714d:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0017152:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017157:	83 ec 04             	sub    esp,0x4
c001715a:	6a 01                	push   0x1
c001715c:	52                   	push   edx
c001715d:	50                   	push   eax
c001715e:	e8 31 77 ff ff       	call   c000e894 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	90                   	nop
c0017167:	83 c4 1c             	add    esp,0x1c
c001716a:	c3                   	ret    
c001716b:	90                   	nop

c001716c <ACPI::open(int, int, void*)>:
c001716c:	53                   	push   ebx
c001716d:	83 ec 18             	sub    esp,0x18
c0017170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017174:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001717b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001717f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017185:	84 c0                	test   al,al
c0017187:	74 60                	je     c00171e9 <ACPI::open(int, int, void*)+0x7d>
c0017189:	83 ec 0c             	sub    esp,0xc
c001718c:	68 58 01 00 00       	push   0x158
c0017191:	e8 f2 af ff ff       	call   c0012188 <operator new(unsigned long)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	89 c3                	mov    ebx,eax
c001719b:	83 ec 0c             	sub    esp,0xc
c001719e:	53                   	push   ebx
c001719f:	e8 12 90 00 00       	call   c00201b6 <PCI::PCI()>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00171ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171af:	83 ec 08             	sub    esp,0x8
c00171b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171b6:	50                   	push   eax
c00171b7:	e8 c6 c4 ff ff       	call   c0013682 <Device::addChild(Device*)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00171c5:	83 c0 08             	add    eax,0x8
c00171c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00171ca:	6a 00                	push   0x0
c00171cc:	6a 00                	push   0x0
c00171ce:	6a 00                	push   0x0
c00171d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d4:	ff d0                	call   eax
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	83 ec 0c             	sub    esp,0xc
c00171dc:	68 3c 7c 02 c0       	push   0xc0027c3c
c00171e1:	e8 91 b0 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00171e6:	83 c4 10             	add    esp,0x10
c00171e9:	83 ec 0c             	sub    esp,0xc
c00171ec:	68 47 7c 02 c0       	push   0xc0027c47
c00171f1:	e8 82 37 00 00       	call   c001a978 <Thr::loadKernelSymbolTable(char const*)>
c00171f6:	83 c4 10             	add    esp,0x10
c00171f9:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c00171ff:	83 ec 08             	sub    esp,0x8
c0017202:	6a 01                	push   0x1
c0017204:	68 65 7c 02 c0       	push   0xc0027c65
c0017209:	e8 4c 42 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	83 ec 08             	sub    esp,0x8
c0017214:	53                   	push   ebx
c0017215:	50                   	push   eax
c0017216:	e8 05 44 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0017223:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017229:	83 e0 04             	and    eax,0x4
c001722c:	84 c0                	test   al,al
c001722e:	0f 84 cf 00 00 00    	je     c0017303 <ACPI::open(int, int, void*)+0x197>
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	68 14 01 00 00       	push   0x114
c001723c:	e8 47 af ff ff       	call   c0012188 <operator new(unsigned long)>
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	89 c3                	mov    ebx,eax
c0017246:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c001724b:	83 ec 04             	sub    esp,0x4
c001724e:	50                   	push   eax
c001724f:	68 82 7c 02 c0       	push   0xc0027c82
c0017254:	53                   	push   ebx
c0017255:	e8 4c b5 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017261:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017266:	74 17                	je     c001727f <ACPI::open(int, int, void*)+0x113>
c0017268:	83 ec 0c             	sub    esp,0xc
c001726b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001726f:	e8 04 b8 ff ff       	call   c0012a78 <File::exists()>
c0017274:	83 c4 10             	add    esp,0x10
c0017277:	84 c0                	test   al,al
c0017279:	74 04                	je     c001727f <ACPI::open(int, int, void*)+0x113>
c001727b:	b0 01                	mov    al,0x1
c001727d:	eb 02                	jmp    c0017281 <ACPI::open(int, int, void*)+0x115>
c001727f:	b0 00                	mov    al,0x0
c0017281:	84 c0                	test   al,al
c0017283:	74 25                	je     c00172aa <ACPI::open(int, int, void*)+0x13e>
c0017285:	8b 1d c8 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a5c8
c001728b:	83 ec 08             	sub    esp,0x8
c001728e:	6a 01                	push   0x1
c0017290:	68 82 7c 02 c0       	push   0xc0027c82
c0017295:	e8 c0 41 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c001729a:	83 c4 10             	add    esp,0x10
c001729d:	83 ec 08             	sub    esp,0x8
c00172a0:	53                   	push   ebx
c00172a1:	50                   	push   eax
c00172a2:	e8 79 43 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c00172a7:	83 c4 10             	add    esp,0x10
c00172aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172af:	74 1e                	je     c00172cf <ACPI::open(int, int, void*)+0x163>
c00172b1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172b6:	74 17                	je     c00172cf <ACPI::open(int, int, void*)+0x163>
c00172b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00172be:	83 c0 08             	add    eax,0x8
c00172c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00172c3:	83 ec 0c             	sub    esp,0xc
c00172c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00172ca:	ff d0                	call   eax
c00172cc:	83 c4 10             	add    esp,0x10
c00172cf:	a1 68 ae 02 c0       	mov    eax,ds:0xc002ae68
c00172d4:	83 ec 08             	sub    esp,0x8
c00172d7:	68 9f 7c 02 c0       	push   0xc0027c9f
c00172dc:	50                   	push   eax
c00172dd:	e8 02 f7 ff ff       	call   c00169e4 <findDataTable(unsigned char*, char*)>
c00172e2:	83 c4 10             	add    esp,0x10
c00172e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172e9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00172ee:	74 13                	je     c0017303 <ACPI::open(int, int, void*)+0x197>
c00172f0:	83 ec 08             	sub    esp,0x8
c00172f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00172f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172fb:	e8 24 fe ff ff       	call   c0017124 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	b8 00 00 00 00       	mov    eax,0x0
c0017308:	83 c4 18             	add    esp,0x18
c001730b:	5b                   	pop    ebx
c001730c:	c3                   	ret    
c001730d:	90                   	nop

c001730e <ACPI::sleep()>:
c001730e:	83 ec 0c             	sub    esp,0xc
c0017311:	a1 40 ac 02 c0       	mov    eax,ds:0xc002ac40
c0017316:	85 c0                	test   eax,eax
c0017318:	74 07                	je     c0017321 <ACPI::sleep()+0x13>
c001731a:	a1 40 ac 02 c0       	mov    eax,ds:0xc002ac40
c001731f:	ff d0                	call   eax
c0017321:	90                   	nop
c0017322:	83 c4 0c             	add    esp,0xc
c0017325:	c3                   	ret    

c0017326 <CPU::close(int, int, void*)>:
c0017326:	31 c0                	xor    eax,eax
c0017328:	c3                   	ret    
c0017329:	90                   	nop

c001732a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001732a:	55                   	push   ebp
c001732b:	57                   	push   edi
c001732c:	56                   	push   esi
c001732d:	53                   	push   ebx
c001732e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017332:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017336:	89 ce                	mov    esi,ecx
c0017338:	89 d5                	mov    ebp,edx
c001733a:	80 f9 04             	cmp    cl,0x4
c001733d:	75 28                	jne    c0017367 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001733f:	8d 42 f9             	lea    eax,[edx-0x7]
c0017342:	3c 03                	cmp    al,0x3
c0017344:	0f 86 63 01 00 00    	jbe    c00174ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001734a:	80 fa 03             	cmp    dl,0x3
c001734d:	0f 84 5a 01 00 00    	je     c00174ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017353:	8d 7a f2             	lea    edi,[edx-0xe]
c0017356:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c001735b:	89 fb                	mov    ebx,edi
c001735d:	80 fb 01             	cmp    bl,0x1
c0017360:	77 4e                	ja     c00173b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017362:	e9 52 01 00 00       	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017367:	80 f9 05             	cmp    cl,0x5
c001736a:	75 4d                	jne    c00173b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001736c:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c0017371:	80 fa 03             	cmp    dl,0x3
c0017374:	0f 86 3f 01 00 00    	jbe    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001737a:	8d 7a fa             	lea    edi,[edx-0x6]
c001737d:	b8 90 9a 02 c0       	mov    eax,0xc0029a90
c0017382:	89 fb                	mov    ebx,edi
c0017384:	80 fb 01             	cmp    bl,0x1
c0017387:	0f 86 2c 01 00 00    	jbe    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001738d:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c0017392:	80 fa 08             	cmp    dl,0x8
c0017395:	0f 84 1e 01 00 00    	je     c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001739b:	89 d7                	mov    edi,edx
c001739d:	b8 b0 9a 02 c0       	mov    eax,0xc0029ab0
c00173a2:	83 e7 fb             	and    edi,0xfffffffb
c00173a5:	89 fb                	mov    ebx,edi
c00173a7:	80 fb 09             	cmp    bl,0x9
c00173aa:	0f 84 09 01 00 00    	je     c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173b0:	31 c0                	xor    eax,eax
c00173b2:	89 eb                	mov    ebx,ebp
c00173b4:	0f b6 fb             	movzx  edi,bl
c00173b7:	eb 30                	jmp    c00173e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00173b9:	31 c0                	xor    eax,eax
c00173bb:	80 f9 06             	cmp    cl,0x6
c00173be:	75 f2                	jne    c00173b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173c0:	80 fa 0a             	cmp    dl,0xa
c00173c3:	77 ed                	ja     c00173b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173c5:	bf de 05 00 00       	mov    edi,0x5de
c00173ca:	0f a3 d7             	bt     edi,edx
c00173cd:	73 e3                	jae    c00173b2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173cf:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c00173d4:	e9 e0 00 00 00       	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173d9:	39 c7                	cmp    edi,eax
c00173db:	0f 84 d3 00 00 00    	je     c00174b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00173e1:	40                   	inc    eax
c00173e2:	3d d0 00 00 00       	cmp    eax,0xd0
c00173e7:	74 09                	je     c00173f2 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00173e9:	89 f3                	mov    ebx,esi
c00173eb:	80 fb 0f             	cmp    bl,0xf
c00173ee:	75 f1                	jne    c00173e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00173f0:	eb e7                	jmp    c00173d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00173f2:	80 f9 10             	cmp    cl,0x10
c00173f5:	75 14                	jne    c001740b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00173f7:	8d 42 fc             	lea    eax,[edx-0x4]
c00173fa:	83 e0 fb             	and    eax,0xfffffffb
c00173fd:	3c 02                	cmp    al,0x2
c00173ff:	76 34                	jbe    c0017435 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017401:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017406:	80 fa 02             	cmp    dl,0x2
c0017409:	eb 24                	jmp    c001742f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001740b:	80 f9 11             	cmp    cl,0x11
c001740e:	75 13                	jne    c0017423 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017410:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017415:	80 fa 03             	cmp    dl,0x3
c0017418:	0f 85 9b 00 00 00    	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001741e:	e9 91 00 00 00       	jmp    c00174b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017423:	80 f9 12             	cmp    cl,0x12
c0017426:	75 14                	jne    c001743c <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017428:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c001742d:	fe ca                	dec    dl
c001742f:	0f 85 84 00 00 00    	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017435:	b8 e0 9a 02 c0       	mov    eax,0xc0029ae0
c001743a:	eb 7d                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001743c:	80 f9 14             	cmp    cl,0x14
c001743f:	75 12                	jne    c0017453 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017441:	4a                   	dec    edx
c0017442:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017447:	80 fa 01             	cmp    dl,0x1
c001744a:	77 6d                	ja     c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001744c:	b8 f0 9a 02 c0       	mov    eax,0xc0029af0
c0017451:	eb 66                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017453:	80 f9 15             	cmp    cl,0x15
c0017456:	75 31                	jne    c0017489 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017458:	b8 00 9b 02 c0       	mov    eax,0xc0029b00
c001745d:	80 fa 01             	cmp    dl,0x1
c0017460:	74 57                	je     c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017462:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017467:	80 fa 13             	cmp    dl,0x13
c001746a:	76 0c                	jbe    c0017478 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001746c:	80 fa 30             	cmp    dl,0x30
c001746f:	75 48                	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017471:	b8 20 9b 02 c0       	mov    eax,0xc0029b20
c0017476:	eb 41                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017478:	b9 04 00 09 00       	mov    ecx,0x90004
c001747d:	0f a3 d1             	bt     ecx,edx
c0017480:	73 37                	jae    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017482:	b8 10 9b 02 c0       	mov    eax,0xc0029b10
c0017487:	eb 30                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017489:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c001748e:	80 f9 16             	cmp    cl,0x16
c0017491:	75 26                	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017493:	b8 30 9b 02 c0       	mov    eax,0xc0029b30
c0017498:	84 d2                	test   dl,dl
c001749a:	74 1d                	je     c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001749c:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c00174a1:	80 fa 30             	cmp    dl,0x30
c00174a4:	75 13                	jne    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174a6:	b8 40 9b 02 c0       	mov    eax,0xc0029b40
c00174ab:	eb 0c                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174ad:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c00174b2:	eb 05                	jmp    c00174b9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00174b4:	b8 d0 9a 02 c0       	mov    eax,0xc0029ad0
c00174b9:	5b                   	pop    ebx
c00174ba:	5e                   	pop    esi
c00174bb:	5f                   	pop    edi
c00174bc:	5d                   	pop    ebp
c00174bd:	c3                   	ret    

c00174be <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00174be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00174c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174c6:	80 f9 04             	cmp    cl,0x4
c00174c9:	75 6b                	jne    c0017536 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00174cb:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c00174d0:	80 fa 01             	cmp    dl,0x1
c00174d3:	0f 86 92 02 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174d9:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c00174de:	80 fa 02             	cmp    dl,0x2
c00174e1:	0f 84 84 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174e7:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00174ec:	80 fa 03             	cmp    dl,0x3
c00174ef:	0f 84 76 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f5:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00174fa:	80 fa 04             	cmp    dl,0x4
c00174fd:	0f 84 68 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017503:	b8 00 99 02 c0       	mov    eax,0xc0029900
c0017508:	80 fa 05             	cmp    dl,0x5
c001750b:	0f 84 5a 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017511:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c0017516:	80 fa 07             	cmp    dl,0x7
c0017519:	0f 84 4c 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001751f:	83 ea 08             	sub    edx,0x8
c0017522:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017527:	80 fa 01             	cmp    dl,0x1
c001752a:	0f 87 3b 02 00 00    	ja     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017530:	b8 10 99 02 c0       	mov    eax,0xc0029910
c0017535:	c3                   	ret    
c0017536:	80 f9 05             	cmp    cl,0x5
c0017539:	75 45                	jne    c0017580 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001753b:	8d 4a ff             	lea    ecx,[edx-0x1]
c001753e:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017543:	80 f9 02             	cmp    cl,0x2
c0017546:	0f 86 1f 02 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001754c:	80 fa 04             	cmp    dl,0x4
c001754f:	0f 84 f3 01 00 00    	je     c0017748 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017555:	80 fa 07             	cmp    dl,0x7
c0017558:	0f 84 0d 02 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001755e:	b8 30 99 02 c0       	mov    eax,0xc0029930
c0017563:	80 fa 08             	cmp    dl,0x8
c0017566:	0f 84 ff 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001756c:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017571:	80 fa 09             	cmp    dl,0x9
c0017574:	0f 85 f1 01 00 00    	jne    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001757a:	b8 40 99 02 c0       	mov    eax,0xc0029940
c001757f:	c3                   	ret    
c0017580:	80 f9 06             	cmp    cl,0x6
c0017583:	0f 85 85 01 00 00    	jne    c001770e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017589:	b8 50 99 02 c0       	mov    eax,0xc0029950
c001758e:	80 fa 01             	cmp    dl,0x1
c0017591:	0f 84 d4 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017597:	8d 42 fb             	lea    eax,[edx-0x5]
c001759a:	3c 01                	cmp    al,0x1
c001759c:	0f 86 ac 01 00 00    	jbe    c001774e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00175a2:	80 fa 03             	cmp    dl,0x3
c00175a5:	0f 84 a3 01 00 00    	je     c001774e <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00175ab:	8d 4a f9             	lea    ecx,[edx-0x7]
c00175ae:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00175b3:	80 f9 01             	cmp    cl,0x1
c00175b6:	0f 86 af 01 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175bc:	80 fa 09             	cmp    dl,0x9
c00175bf:	0f 84 8f 01 00 00    	je     c0017754 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00175c5:	8d 4a f6             	lea    ecx,[edx-0xa]
c00175c8:	80 f9 01             	cmp    cl,0x1
c00175cb:	0f 86 9a 01 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175d1:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00175d6:	80 fa 0d             	cmp    dl,0xd
c00175d9:	0f 84 8c 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175df:	b8 90 99 02 c0       	mov    eax,0xc0029990
c00175e4:	80 fa 0e             	cmp    dl,0xe
c00175e7:	0f 84 7e 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175ed:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c00175f2:	80 fa 0f             	cmp    dl,0xf
c00175f5:	0f 84 70 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175fb:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0017600:	80 fa 15             	cmp    dl,0x15
c0017603:	0f 84 62 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017609:	8d 4a ea             	lea    ecx,[edx-0x16]
c001760c:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0017611:	80 f9 01             	cmp    cl,0x1
c0017614:	0f 86 51 01 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001761a:	80 fa 1a             	cmp    dl,0x1a
c001761d:	0f 84 37 01 00 00    	je     c001775a <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017623:	80 fa 1c             	cmp    dl,0x1c
c0017626:	0f 84 34 01 00 00    	je     c0017760 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001762c:	80 fa 1d             	cmp    dl,0x1d
c001762f:	0f 84 36 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017635:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c001763a:	80 fa 25             	cmp    dl,0x25
c001763d:	0f 84 28 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017643:	8d 4a da             	lea    ecx,[edx-0x26]
c0017646:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c001764b:	80 f9 01             	cmp    cl,0x1
c001764e:	0f 86 17 01 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017654:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017659:	80 fa 2a             	cmp    dl,0x2a
c001765c:	0f 84 09 01 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017662:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c0017667:	80 fa 2c             	cmp    dl,0x2c
c001766a:	0f 84 fb 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017670:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017675:	80 fa 2d             	cmp    dl,0x2d
c0017678:	0f 84 ed 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001767e:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c0017683:	80 fa 2e             	cmp    dl,0x2e
c0017686:	0f 84 df 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001768c:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c0017691:	80 fa 2f             	cmp    dl,0x2f
c0017694:	0f 84 d1 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001769a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001769d:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c00176a2:	80 f9 01             	cmp    cl,0x1
c00176a5:	0f 86 c0 00 00 00    	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176ab:	b8 f0 99 02 c0       	mov    eax,0xc00299f0
c00176b0:	80 fa 37             	cmp    dl,0x37
c00176b3:	0f 84 b2 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176b9:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c00176be:	80 fa 3a             	cmp    dl,0x3a
c00176c1:	0f 84 a4 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176c7:	b8 10 9a 02 c0       	mov    eax,0xc0029a10
c00176cc:	80 fa 3c             	cmp    dl,0x3c
c00176cf:	0f 84 96 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176d5:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c00176da:	80 fa 3d             	cmp    dl,0x3d
c00176dd:	0f 84 88 00 00 00    	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176e3:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c00176e8:	80 fa 3e             	cmp    dl,0x3e
c00176eb:	74 7e                	je     c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176ed:	8d 42 bb             	lea    eax,[edx-0x45]
c00176f0:	3c 01                	cmp    al,0x1
c00176f2:	76 72                	jbe    c0017766 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00176f4:	80 fa 3f             	cmp    dl,0x3f
c00176f7:	74 6d                	je     c0017766 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00176f9:	80 fa 4a             	cmp    dl,0x4a
c00176fc:	74 0a                	je     c0017708 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00176fe:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017703:	80 fa 4d             	cmp    dl,0x4d
c0017706:	75 63                	jne    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017708:	b8 f0 99 02 c0       	mov    eax,0xc00299f0
c001770d:	c3                   	ret    
c001770e:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c0017713:	80 f9 0b             	cmp    cl,0xb
c0017716:	75 0a                	jne    c0017722 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017718:	fe ca                	dec    dl
c001771a:	75 4f                	jne    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001771c:	b8 30 9a 02 c0       	mov    eax,0xc0029a30
c0017721:	c3                   	ret    
c0017722:	80 f9 0f             	cmp    cl,0xf
c0017725:	75 44                	jne    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017727:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c001772c:	80 fa 02             	cmp    dl,0x2
c001772f:	76 3a                	jbe    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017731:	8d 42 fd             	lea    eax,[edx-0x3]
c0017734:	3c 01                	cmp    al,0x1
c0017736:	76 0a                	jbe    c0017742 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017738:	b8 e6 80 02 c0       	mov    eax,0xc00280e6
c001773d:	80 fa 06             	cmp    dl,0x6
c0017740:	75 29                	jne    c001776b <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017742:	b8 50 9a 02 c0       	mov    eax,0xc0029a50
c0017747:	c3                   	ret    
c0017748:	b8 30 99 02 c0       	mov    eax,0xc0029930
c001774d:	c3                   	ret    
c001774e:	b8 60 99 02 c0       	mov    eax,0xc0029960
c0017753:	c3                   	ret    
c0017754:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0017759:	c3                   	ret    
c001775a:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c001775f:	c3                   	ret    
c0017760:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0017765:	c3                   	ret    
c0017766:	b8 10 9a 02 c0       	mov    eax,0xc0029a10
c001776b:	c3                   	ret    

c001776c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001776c:	60                   	pusha  
c001776d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017771:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017775:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017779:	9c                   	pushf  
c001777a:	fa                   	cli    
c001777b:	0f 09                	wbinvd 
c001777d:	0f 30                	wrmsr  
c001777f:	9d                   	popf   
c0017780:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017784:	89 02                	mov    DWORD PTR [edx],eax
c0017786:	61                   	popa   
c0017787:	c3                   	ret    

c0017788 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017788:	60                   	pusha  
c0017789:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001778d:	9c                   	pushf  
c001778e:	fa                   	cli    
c001778f:	0f 09                	wbinvd 
c0017791:	31 c0                	xor    eax,eax
c0017793:	31 d2                	xor    edx,edx
c0017795:	0f 32                	rdmsr  
c0017797:	9d                   	popf   
c0017798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001779c:	89 02                	mov    DWORD PTR [edx],eax
c001779e:	61                   	popa   
c001779f:	c3                   	ret    

c00177a0 <CPU::AMD_K6_writeback(int, int, int)>:
c00177a0:	56                   	push   esi
c00177a1:	53                   	push   ebx
c00177a2:	83 ec 10             	sub    esp,0x10
c00177a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00177ae:	75 5d                	jne    c001780d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177b0:	83 f8 08             	cmp    eax,0x8
c00177b3:	75 09                	jne    c00177be <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00177b5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00177ba:	7e 13                	jle    c00177cf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177bc:	eb 30                	jmp    c00177ee <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177be:	83 f8 06             	cmp    eax,0x6
c00177c1:	7c 4a                	jl     c001780d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177c3:	83 f8 07             	cmp    eax,0x7
c00177c6:	7e 07                	jle    c00177cf <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177c8:	83 f8 09             	cmp    eax,0x9
c00177cb:	74 21                	je     c00177ee <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177cd:	eb 3e                	jmp    c001780d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177cf:	89 e6                	mov    esi,esp
c00177d1:	8b 1d 04 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a604
c00177d7:	56                   	push   esi
c00177d8:	c1 eb 15             	shr    ebx,0x15
c00177db:	68 82 00 00 c0       	push   0xc0000082
c00177e0:	83 e3 7e             	and    ebx,0x7e
c00177e3:	e8 a0 ff ff ff       	call   c0017788 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00177e8:	56                   	push   esi
c00177e9:	6a 00                	push   0x0
c00177eb:	53                   	push   ebx
c00177ec:	eb 12                	jmp    c0017800 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00177ee:	89 e3                	mov    ebx,esp
c00177f0:	53                   	push   ebx
c00177f1:	68 82 00 00 c0       	push   0xc0000082
c00177f6:	e8 8d ff ff ff       	call   c0017788 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00177fb:	53                   	push   ebx
c00177fc:	6a 00                	push   0x0
c00177fe:	6a 00                	push   0x0
c0017800:	68 82 00 00 c0       	push   0xc0000082
c0017805:	e8 62 ff ff ff       	call   c001776c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001780a:	83 c4 18             	add    esp,0x18
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	5b                   	pop    ebx
c0017811:	5e                   	pop    esi
c0017812:	c3                   	ret    
c0017813:	90                   	nop

c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017814:	55                   	push   ebp
c0017815:	57                   	push   edi
c0017816:	56                   	push   esi
c0017817:	53                   	push   ebx
c0017818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001781c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017820:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017824:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017828:	39 05 60 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b60,eax
c001782e:	75 23                	jne    c0017853 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017830:	a1 4c b0 02 c0       	mov    eax,ds:0xc002b04c
c0017835:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017839:	89 06                	mov    DWORD PTR [esi],eax
c001783b:	a1 48 b0 02 c0       	mov    eax,ds:0xc002b048
c0017840:	89 07                	mov    DWORD PTR [edi],eax
c0017842:	a1 44 b0 02 c0       	mov    eax,ds:0xc002b044
c0017847:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001784a:	a1 40 b0 02 c0       	mov    eax,ds:0xc002b040
c001784f:	89 02                	mov    DWORD PTR [edx],eax
c0017851:	eb 3f                	jmp    c0017892 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017853:	31 c9                	xor    ecx,ecx
c0017855:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017859:	0f a2                	cpuid  
c001785b:	89 06                	mov    DWORD PTR [esi],eax
c001785d:	89 1f                	mov    DWORD PTR [edi],ebx
c001785f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017863:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017866:	89 10                	mov    DWORD PTR [eax],edx
c0017868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001786c:	a3 60 9b 02 c0       	mov    ds:0xc0029b60,eax
c0017871:	8b 06                	mov    eax,DWORD PTR [esi]
c0017873:	a3 4c b0 02 c0       	mov    ds:0xc002b04c,eax
c0017878:	8b 07                	mov    eax,DWORD PTR [edi]
c001787a:	a3 48 b0 02 c0       	mov    ds:0xc002b048,eax
c001787f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017882:	a3 44 b0 02 c0       	mov    ds:0xc002b044,eax
c0017887:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001788b:	8b 00                	mov    eax,DWORD PTR [eax]
c001788d:	a3 40 b0 02 c0       	mov    ds:0xc002b040,eax
c0017892:	5b                   	pop    ebx
c0017893:	5e                   	pop    esi
c0017894:	5f                   	pop    edi
c0017895:	5d                   	pop    ebp
c0017896:	c3                   	ret    
c0017897:	90                   	nop

c0017898 <CPU::cpuidCheckEDX(unsigned int)>:
c0017898:	83 ec 10             	sub    esp,0x10
c001789b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001789f:	50                   	push   eax
c00178a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178a4:	50                   	push   eax
c00178a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178a9:	50                   	push   eax
c00178aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ae:	50                   	push   eax
c00178af:	6a 01                	push   0x1
c00178b1:	e8 5e ff ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ba:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00178be:	0f 95 c0             	setne  al
c00178c1:	83 c4 24             	add    esp,0x24
c00178c4:	c3                   	ret    
c00178c5:	90                   	nop

c00178c6 <CPU::cpuidCheckECX(unsigned int)>:
c00178c6:	83 ec 10             	sub    esp,0x10
c00178c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178cd:	50                   	push   eax
c00178ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178d2:	50                   	push   eax
c00178d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178d7:	50                   	push   eax
c00178d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178dc:	50                   	push   eax
c00178dd:	6a 01                	push   0x1
c00178df:	e8 30 ff ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178e8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00178ec:	0f 95 c0             	setne  al
c00178ef:	83 c4 24             	add    esp,0x24
c00178f2:	c3                   	ret    
c00178f3:	90                   	nop

c00178f4 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00178f4:	83 ec 10             	sub    esp,0x10
c00178f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178fb:	50                   	push   eax
c00178fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017900:	50                   	push   eax
c0017901:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017905:	50                   	push   eax
c0017906:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001790a:	50                   	push   eax
c001790b:	6a 07                	push   0x7
c001790d:	e8 02 ff ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017912:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017916:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001791a:	0f 95 c0             	setne  al
c001791d:	83 c4 24             	add    esp,0x24
c0017920:	c3                   	ret    
c0017921:	90                   	nop

c0017922 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017922:	83 ec 10             	sub    esp,0x10
c0017925:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017929:	50                   	push   eax
c001792a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001792e:	50                   	push   eax
c001792f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017933:	50                   	push   eax
c0017934:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017938:	50                   	push   eax
c0017939:	6a 07                	push   0x7
c001793b:	e8 d4 fe ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017944:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017948:	0f 95 c0             	setne  al
c001794b:	83 c4 24             	add    esp,0x24
c001794e:	c3                   	ret    
c001794f:	90                   	nop

c0017950 <CPU::getNumber()>:
c0017950:	31 c0                	xor    eax,eax
c0017952:	c3                   	ret    
c0017953:	90                   	nop

c0017954 <CPU::current()>:
c0017954:	e8 f7 ff ff ff       	call   c0017950 <CPU::getNumber()>
c0017959:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c001795f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017966:	c3                   	ret    
c0017967:	90                   	nop

c0017968 <CPU::CPU()>:
c0017968:	83 ec 0c             	sub    esp,0xc
c001796b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796f:	83 ec 08             	sub    esp,0x8
c0017972:	68 e6 80 02 c0       	push   0xc00280e6
c0017977:	50                   	push   eax
c0017978:	e8 f5 be ff ff       	call   c0013872 <Device::Device(char const*)>
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	ba c0 81 02 c0       	mov    edx,0xc00281c0
c0017985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017989:	89 10                	mov    DWORD PTR [eax],edx
c001798b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001799d:	05 78 01 00 00       	add    eax,0x178
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	50                   	push   eax
c00179a6:	e8 d3 6f ff ff       	call   c000e97e <GDT::GDT()>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b2:	05 7c 09 00 00       	add    eax,0x97c
c00179b7:	83 ec 0c             	sub    esp,0xc
c00179ba:	50                   	push   eax
c00179bb:	e8 1e 72 ff ff       	call   c000ebde <IDT::IDT()>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c7:	05 7c 11 00 00       	add    eax,0x117c
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	50                   	push   eax
c00179d0:	e8 4d 92 ff ff       	call   c0010c22 <TSS::TSS()>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179dc:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00179e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179e7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00179f1:	90                   	nop
c00179f2:	83 c4 0c             	add    esp,0xc
c00179f5:	c3                   	ret    

c00179f6 <CPU::displayFeatures()>:
c00179f6:	53                   	push   ebx
c00179f7:	83 ec 10             	sub    esp,0x10
c00179fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179fe:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017a04:	68 f4 7d 02 c0       	push   0xc0027df4
c0017a09:	e8 69 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a0e:	59                   	pop    ecx
c0017a0f:	58                   	pop    eax
c0017a10:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017a16:	50                   	push   eax
c0017a17:	68 05 7e 02 c0       	push   0xc0027e05
c0017a1c:	e8 56 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a21:	58                   	pop    eax
c0017a22:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017a28:	5a                   	pop    edx
c0017a29:	c1 e8 0e             	shr    eax,0xe
c0017a2c:	0f b6 c0             	movzx  eax,al
c0017a2f:	50                   	push   eax
c0017a30:	68 16 7e 02 c0       	push   0xc0027e16
c0017a35:	e8 3d a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a3a:	59                   	pop    ecx
c0017a3b:	58                   	pop    eax
c0017a3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017a42:	66 c1 e8 06          	shr    ax,0x6
c0017a46:	0f b6 c0             	movzx  eax,al
c0017a49:	50                   	push   eax
c0017a4a:	68 27 7e 02 c0       	push   0xc0027e27
c0017a4f:	e8 23 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a54:	c7 04 24 3a 82 02 c0 	mov    DWORD PTR [esp],0xc002823a
c0017a5b:	e8 17 a8 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017a68:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017a6f:	74 05                	je     c0017a76 <CPU::displayFeatures()+0x80>
c0017a71:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017a76:	52                   	push   edx
c0017a77:	52                   	push   edx
c0017a78:	50                   	push   eax
c0017a79:	68 38 7e 02 c0       	push   0xc0027e38
c0017a7e:	e8 f4 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017a8b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017a92:	78 05                	js     c0017a99 <CPU::displayFeatures()+0xa3>
c0017a94:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017a99:	51                   	push   ecx
c0017a9a:	51                   	push   ecx
c0017a9b:	50                   	push   eax
c0017a9c:	68 4f 7e 02 c0       	push   0xc0027e4f
c0017aa1:	e8 d1 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017aa6:	83 c4 10             	add    esp,0x10
c0017aa9:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017aae:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017ab5:	75 05                	jne    c0017abc <CPU::displayFeatures()+0xc6>
c0017ab7:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017abc:	52                   	push   edx
c0017abd:	52                   	push   edx
c0017abe:	50                   	push   eax
c0017abf:	68 66 7e 02 c0       	push   0xc0027e66
c0017ac4:	e8 ae a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017ad1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017ad8:	75 05                	jne    c0017adf <CPU::displayFeatures()+0xe9>
c0017ada:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017adf:	51                   	push   ecx
c0017ae0:	51                   	push   ecx
c0017ae1:	50                   	push   eax
c0017ae2:	68 7d 7e 02 c0       	push   0xc0027e7d
c0017ae7:	e8 8b a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017aec:	83 c4 10             	add    esp,0x10
c0017aef:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017af4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017afb:	75 05                	jne    c0017b02 <CPU::displayFeatures()+0x10c>
c0017afd:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017b02:	52                   	push   edx
c0017b03:	52                   	push   edx
c0017b04:	50                   	push   eax
c0017b05:	68 94 7e 02 c0       	push   0xc0027e94
c0017b0a:	e8 68 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017b17:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017b1e:	75 05                	jne    c0017b25 <CPU::displayFeatures()+0x12f>
c0017b20:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017b25:	51                   	push   ecx
c0017b26:	51                   	push   ecx
c0017b27:	50                   	push   eax
c0017b28:	68 ab 7e 02 c0       	push   0xc0027eab
c0017b2d:	e8 45 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017b3a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017b41:	75 05                	jne    c0017b48 <CPU::displayFeatures()+0x152>
c0017b43:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017b48:	52                   	push   edx
c0017b49:	52                   	push   edx
c0017b4a:	50                   	push   eax
c0017b4b:	68 c2 7e 02 c0       	push   0xc0027ec2
c0017b50:	e8 22 a7 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017b5d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017b64:	75 05                	jne    c0017b6b <CPU::displayFeatures()+0x175>
c0017b66:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017b6b:	51                   	push   ecx
c0017b6c:	51                   	push   ecx
c0017b6d:	50                   	push   eax
c0017b6e:	68 d9 7e 02 c0       	push   0xc0027ed9
c0017b73:	e8 ff a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b78:	83 c4 10             	add    esp,0x10
c0017b7b:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017b80:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017b87:	75 05                	jne    c0017b8e <CPU::displayFeatures()+0x198>
c0017b89:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017b8e:	52                   	push   edx
c0017b8f:	52                   	push   edx
c0017b90:	50                   	push   eax
c0017b91:	68 f0 7e 02 c0       	push   0xc0027ef0
c0017b96:	e8 dc a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017ba3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017baa:	75 05                	jne    c0017bb1 <CPU::displayFeatures()+0x1bb>
c0017bac:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017bb1:	51                   	push   ecx
c0017bb2:	51                   	push   ecx
c0017bb3:	50                   	push   eax
c0017bb4:	68 07 7f 02 c0       	push   0xc0027f07
c0017bb9:	e8 b9 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017bc6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017bcd:	75 05                	jne    c0017bd4 <CPU::displayFeatures()+0x1de>
c0017bcf:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017bd4:	52                   	push   edx
c0017bd5:	52                   	push   edx
c0017bd6:	50                   	push   eax
c0017bd7:	68 1e 7f 02 c0       	push   0xc0027f1e
c0017bdc:	e8 96 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017be1:	83 c4 10             	add    esp,0x10
c0017be4:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017be9:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017bf0:	75 05                	jne    c0017bf7 <CPU::displayFeatures()+0x201>
c0017bf2:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017bf7:	51                   	push   ecx
c0017bf8:	51                   	push   ecx
c0017bf9:	50                   	push   eax
c0017bfa:	68 35 7f 02 c0       	push   0xc0027f35
c0017bff:	e8 73 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c04:	83 c4 10             	add    esp,0x10
c0017c07:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017c0c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017c13:	75 05                	jne    c0017c1a <CPU::displayFeatures()+0x224>
c0017c15:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017c1a:	52                   	push   edx
c0017c1b:	52                   	push   edx
c0017c1c:	50                   	push   eax
c0017c1d:	68 4c 7f 02 c0       	push   0xc0027f4c
c0017c22:	e8 50 a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017c2f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017c36:	78 05                	js     c0017c3d <CPU::displayFeatures()+0x247>
c0017c38:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017c3d:	51                   	push   ecx
c0017c3e:	51                   	push   ecx
c0017c3f:	50                   	push   eax
c0017c40:	68 63 7f 02 c0       	push   0xc0027f63
c0017c45:	e8 2d a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c4a:	83 c4 10             	add    esp,0x10
c0017c4d:	b8 d8 6a 02 c0       	mov    eax,0xc0026ad8
c0017c52:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017c59:	75 05                	jne    c0017c60 <CPU::displayFeatures()+0x26a>
c0017c5b:	b8 dc 6a 02 c0       	mov    eax,0xc0026adc
c0017c60:	52                   	push   edx
c0017c61:	52                   	push   edx
c0017c62:	50                   	push   eax
c0017c63:	68 7a 7f 02 c0       	push   0xc0027f7a
c0017c68:	e8 0a a6 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0017c6d:	83 c4 18             	add    esp,0x18
c0017c70:	5b                   	pop    ebx
c0017c71:	c3                   	ret    

c0017c72 <CPU::detectFeatures()>:
c0017c72:	55                   	push   ebp
c0017c73:	57                   	push   edi
c0017c74:	56                   	push   esi
c0017c75:	53                   	push   ebx
c0017c76:	83 ec 50             	sub    esp,0x50
c0017c79:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017c7d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017c87:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017c8e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017c94:	6a 0d                	push   0xd
c0017c96:	6a 00                	push   0x0
c0017c98:	57                   	push   edi
c0017c99:	e8 27 8a fe ff       	call   c00006c5 <memset>
c0017c9e:	83 c4 10             	add    esp,0x10
c0017ca1:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0017ca6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017cad:	0f 84 20 09 00 00    	je     c00185d3 <CPU::detectFeatures()+0x961>
c0017cb3:	83 ec 0c             	sub    esp,0xc
c0017cb6:	6a 10                	push   0x10
c0017cb8:	e8 db fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017cbd:	83 e0 01             	and    eax,0x1
c0017cc0:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cc3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cc9:	83 e0 fd             	and    eax,0xfffffffd
c0017ccc:	09 d0                	or     eax,edx
c0017cce:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cd4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017cdb:	e8 b8 fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017ce0:	83 e0 01             	and    eax,0x1
c0017ce3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017cea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cf0:	83 e0 fb             	and    eax,0xfffffffb
c0017cf3:	09 d0                	or     eax,edx
c0017cf5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cfb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017d02:	e8 91 fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017d07:	83 e0 01             	and    eax,0x1
c0017d0a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017d11:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d17:	83 e0 f7             	and    eax,0xfffffff7
c0017d1a:	09 d0                	or     eax,edx
c0017d1c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d22:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017d29:	e8 6a fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017d2e:	83 e0 01             	and    eax,0x1
c0017d31:	c1 e0 04             	shl    eax,0x4
c0017d34:	88 c2                	mov    dl,al
c0017d36:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d3c:	83 e0 ef             	and    eax,0xffffffef
c0017d3f:	09 d0                	or     eax,edx
c0017d41:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d47:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017d4e:	e8 45 fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017d53:	83 e0 01             	and    eax,0x1
c0017d56:	c1 e0 05             	shl    eax,0x5
c0017d59:	88 c2                	mov    dl,al
c0017d5b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d61:	83 e0 df             	and    eax,0xffffffdf
c0017d64:	09 d0                	or     eax,edx
c0017d66:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d6c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017d73:	e8 20 fb ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017d78:	83 e0 01             	and    eax,0x1
c0017d7b:	8d 14 00             	lea    edx,[eax+eax*1]
c0017d7e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017d84:	83 e0 fd             	and    eax,0xfffffffd
c0017d87:	09 d0                	or     eax,edx
c0017d89:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017d8f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017d96:	e8 fd fa ff ff       	call   c0017898 <CPU::cpuidCheckEDX(unsigned int)>
c0017d9b:	83 e0 01             	and    eax,0x1
c0017d9e:	c1 e0 06             	shl    eax,0x6
c0017da1:	88 c2                	mov    dl,al
c0017da3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017da9:	83 e0 bf             	and    eax,0xffffffbf
c0017dac:	09 d0                	or     eax,edx
c0017dae:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017db4:	58                   	pop    eax
c0017db5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017db9:	56                   	push   esi
c0017dba:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017dbe:	55                   	push   ebp
c0017dbf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017dc3:	50                   	push   eax
c0017dc4:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017dc8:	52                   	push   edx
c0017dc9:	6a 00                	push   0x0
c0017dcb:	e8 44 fa ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017dd0:	83 c4 1c             	add    esp,0x1c
c0017dd3:	6a 04                	push   0x4
c0017dd5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dd9:	50                   	push   eax
c0017dda:	57                   	push   edi
c0017ddb:	e8 af 88 fe ff       	call   c000068f <memcpy>
c0017de0:	83 c4 0c             	add    esp,0xc
c0017de3:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017de9:	6a 04                	push   0x4
c0017deb:	56                   	push   esi
c0017dec:	50                   	push   eax
c0017ded:	e8 9d 88 fe ff       	call   c000068f <memcpy>
c0017df2:	83 c4 0c             	add    esp,0xc
c0017df5:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017dfb:	6a 04                	push   0x4
c0017dfd:	55                   	push   ebp
c0017dfe:	50                   	push   eax
c0017dff:	e8 8b 88 fe ff       	call   c000068f <memcpy>
c0017e04:	58                   	pop    eax
c0017e05:	5a                   	pop    edx
c0017e06:	68 91 7f 02 c0       	push   0xc0027f91
c0017e0b:	57                   	push   edi
c0017e0c:	e8 a4 89 fe ff       	call   c00007b5 <strcmp>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	85 c0                	test   eax,eax
c0017e16:	75 0f                	jne    c0017e27 <CPU::detectFeatures()+0x1b5>
c0017e18:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017e22:	e9 22 02 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017e27:	50                   	push   eax
c0017e28:	50                   	push   eax
c0017e29:	68 9e 7f 02 c0       	push   0xc0027f9e
c0017e2e:	57                   	push   edi
c0017e2f:	e8 81 89 fe ff       	call   c00007b5 <strcmp>
c0017e34:	83 c4 10             	add    esp,0x10
c0017e37:	85 c0                	test   eax,eax
c0017e39:	74 dd                	je     c0017e18 <CPU::detectFeatures()+0x1a6>
c0017e3b:	51                   	push   ecx
c0017e3c:	51                   	push   ecx
c0017e3d:	68 ab 7f 02 c0       	push   0xc0027fab
c0017e42:	57                   	push   edi
c0017e43:	e8 6d 89 fe ff       	call   c00007b5 <strcmp>
c0017e48:	83 c4 10             	add    esp,0x10
c0017e4b:	85 c0                	test   eax,eax
c0017e4d:	74 2a                	je     c0017e79 <CPU::detectFeatures()+0x207>
c0017e4f:	52                   	push   edx
c0017e50:	52                   	push   edx
c0017e51:	68 b8 7f 02 c0       	push   0xc0027fb8
c0017e56:	57                   	push   edi
c0017e57:	e8 59 89 fe ff       	call   c00007b5 <strcmp>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	85 c0                	test   eax,eax
c0017e61:	74 16                	je     c0017e79 <CPU::detectFeatures()+0x207>
c0017e63:	50                   	push   eax
c0017e64:	50                   	push   eax
c0017e65:	68 c5 7f 02 c0       	push   0xc0027fc5
c0017e6a:	57                   	push   edi
c0017e6b:	e8 45 89 fe ff       	call   c00007b5 <strcmp>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	85 c0                	test   eax,eax
c0017e75:	74 48                	je     c0017ebf <CPU::detectFeatures()+0x24d>
c0017e77:	eb 0f                	jmp    c0017e88 <CPU::detectFeatures()+0x216>
c0017e79:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017e83:	e9 c1 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017e88:	50                   	push   eax
c0017e89:	50                   	push   eax
c0017e8a:	68 d2 7f 02 c0       	push   0xc0027fd2
c0017e8f:	57                   	push   edi
c0017e90:	e8 20 89 fe ff       	call   c00007b5 <strcmp>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	85 c0                	test   eax,eax
c0017e9a:	74 23                	je     c0017ebf <CPU::detectFeatures()+0x24d>
c0017e9c:	50                   	push   eax
c0017e9d:	50                   	push   eax
c0017e9e:	68 df 7f 02 c0       	push   0xc0027fdf
c0017ea3:	57                   	push   edi
c0017ea4:	e8 0c 89 fe ff       	call   c00007b5 <strcmp>
c0017ea9:	83 c4 10             	add    esp,0x10
c0017eac:	85 c0                	test   eax,eax
c0017eae:	75 1e                	jne    c0017ece <CPU::detectFeatures()+0x25c>
c0017eb0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017eba:	e9 8a 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017ebf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017ec9:	e9 7b 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017ece:	50                   	push   eax
c0017ecf:	50                   	push   eax
c0017ed0:	68 ec 7f 02 c0       	push   0xc0027fec
c0017ed5:	57                   	push   edi
c0017ed6:	e8 da 88 fe ff       	call   c00007b5 <strcmp>
c0017edb:	83 c4 10             	add    esp,0x10
c0017ede:	85 c0                	test   eax,eax
c0017ee0:	75 0f                	jne    c0017ef1 <CPU::detectFeatures()+0x27f>
c0017ee2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017eec:	e9 58 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017ef1:	50                   	push   eax
c0017ef2:	50                   	push   eax
c0017ef3:	68 ab 7f 02 c0       	push   0xc0027fab
c0017ef8:	57                   	push   edi
c0017ef9:	e8 b7 88 fe ff       	call   c00007b5 <strcmp>
c0017efe:	83 c4 10             	add    esp,0x10
c0017f01:	85 c0                	test   eax,eax
c0017f03:	75 0f                	jne    c0017f14 <CPU::detectFeatures()+0x2a2>
c0017f05:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017f0f:	e9 35 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017f14:	50                   	push   eax
c0017f15:	50                   	push   eax
c0017f16:	68 f9 7f 02 c0       	push   0xc0027ff9
c0017f1b:	57                   	push   edi
c0017f1c:	e8 94 88 fe ff       	call   c00007b5 <strcmp>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	85 c0                	test   eax,eax
c0017f26:	75 0f                	jne    c0017f37 <CPU::detectFeatures()+0x2c5>
c0017f28:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017f32:	e9 12 01 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017f37:	51                   	push   ecx
c0017f38:	51                   	push   ecx
c0017f39:	68 06 80 02 c0       	push   0xc0028006
c0017f3e:	57                   	push   edi
c0017f3f:	e8 71 88 fe ff       	call   c00007b5 <strcmp>
c0017f44:	83 c4 10             	add    esp,0x10
c0017f47:	85 c0                	test   eax,eax
c0017f49:	75 0f                	jne    c0017f5a <CPU::detectFeatures()+0x2e8>
c0017f4b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017f55:	e9 ef 00 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017f5a:	52                   	push   edx
c0017f5b:	52                   	push   edx
c0017f5c:	68 13 80 02 c0       	push   0xc0028013
c0017f61:	57                   	push   edi
c0017f62:	e8 4e 88 fe ff       	call   c00007b5 <strcmp>
c0017f67:	83 c4 10             	add    esp,0x10
c0017f6a:	85 c0                	test   eax,eax
c0017f6c:	75 0f                	jne    c0017f7d <CPU::detectFeatures()+0x30b>
c0017f6e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017f78:	e9 cc 00 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017f7d:	50                   	push   eax
c0017f7e:	50                   	push   eax
c0017f7f:	68 20 80 02 c0       	push   0xc0028020
c0017f84:	57                   	push   edi
c0017f85:	e8 2b 88 fe ff       	call   c00007b5 <strcmp>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	85 c0                	test   eax,eax
c0017f8f:	75 0f                	jne    c0017fa0 <CPU::detectFeatures()+0x32e>
c0017f91:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017f9b:	e9 a9 00 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017fa0:	50                   	push   eax
c0017fa1:	50                   	push   eax
c0017fa2:	68 2d 80 02 c0       	push   0xc002802d
c0017fa7:	57                   	push   edi
c0017fa8:	e8 08 88 fe ff       	call   c00007b5 <strcmp>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	85 c0                	test   eax,eax
c0017fb2:	75 0f                	jne    c0017fc3 <CPU::detectFeatures()+0x351>
c0017fb4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017fbe:	e9 86 00 00 00       	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017fc3:	50                   	push   eax
c0017fc4:	50                   	push   eax
c0017fc5:	68 3a 80 02 c0       	push   0xc002803a
c0017fca:	57                   	push   edi
c0017fcb:	e8 e5 87 fe ff       	call   c00007b5 <strcmp>
c0017fd0:	83 c4 10             	add    esp,0x10
c0017fd3:	85 c0                	test   eax,eax
c0017fd5:	75 0c                	jne    c0017fe3 <CPU::detectFeatures()+0x371>
c0017fd7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017fe1:	eb 66                	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0017fe3:	50                   	push   eax
c0017fe4:	50                   	push   eax
c0017fe5:	68 47 80 02 c0       	push   0xc0028047
c0017fea:	57                   	push   edi
c0017feb:	e8 c5 87 fe ff       	call   c00007b5 <strcmp>
c0017ff0:	83 c4 10             	add    esp,0x10
c0017ff3:	85 c0                	test   eax,eax
c0017ff5:	75 0c                	jne    c0018003 <CPU::detectFeatures()+0x391>
c0017ff7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018001:	eb 46                	jmp    c0018049 <CPU::detectFeatures()+0x3d7>
c0018003:	50                   	push   eax
c0018004:	50                   	push   eax
c0018005:	68 54 80 02 c0       	push   0xc0028054
c001800a:	57                   	push   edi
c001800b:	e8 a5 87 fe ff       	call   c00007b5 <strcmp>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	85 c0                	test   eax,eax
c0018015:	74 e0                	je     c0017ff7 <CPU::detectFeatures()+0x385>
c0018017:	50                   	push   eax
c0018018:	50                   	push   eax
c0018019:	68 61 80 02 c0       	push   0xc0028061
c001801e:	57                   	push   edi
c001801f:	e8 91 87 fe ff       	call   c00007b5 <strcmp>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	85 c0                	test   eax,eax
c0018029:	74 cc                	je     c0017ff7 <CPU::detectFeatures()+0x385>
c001802b:	51                   	push   ecx
c001802c:	51                   	push   ecx
c001802d:	68 6e 80 02 c0       	push   0xc002806e
c0018032:	57                   	push   edi
c0018033:	e8 7d 87 fe ff       	call   c00007b5 <strcmp>
c0018038:	83 c4 10             	add    esp,0x10
c001803b:	85 c0                	test   eax,eax
c001803d:	74 b8                	je     c0017ff7 <CPU::detectFeatures()+0x385>
c001803f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018049:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001804e:	0f 86 be 00 00 00    	jbe    c0018112 <CPU::detectFeatures()+0x4a0>
c0018054:	83 ec 0c             	sub    esp,0xc
c0018057:	68 80 00 00 00       	push   0x80
c001805c:	e8 93 f8 ff ff       	call   c00178f4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018061:	83 e0 01             	and    eax,0x1
c0018064:	c1 e0 06             	shl    eax,0x6
c0018067:	88 c2                	mov    dl,al
c0018069:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001806f:	83 e0 bf             	and    eax,0xffffffbf
c0018072:	09 d0                	or     eax,edx
c0018074:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001807a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018081:	e8 6e f8 ff ff       	call   c00178f4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018086:	83 e0 01             	and    eax,0x1
c0018089:	c1 e0 04             	shl    eax,0x4
c001808c:	88 c2                	mov    dl,al
c001808e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018094:	83 e0 ef             	and    eax,0xffffffef
c0018097:	09 d0                	or     eax,edx
c0018099:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001809f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00180a6:	e8 49 f8 ff ff       	call   c00178f4 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00180ab:	c1 e0 07             	shl    eax,0x7
c00180ae:	88 c2                	mov    dl,al
c00180b0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00180b6:	83 e0 7f             	and    eax,0x7f
c00180b9:	09 d0                	or     eax,edx
c00180bb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00180c1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00180c8:	e8 55 f8 ff ff       	call   c0017922 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00180cd:	83 e0 01             	and    eax,0x1
c00180d0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00180d7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00180dd:	83 e0 f7             	and    eax,0xfffffff7
c00180e0:	09 d0                	or     eax,edx
c00180e2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00180e8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00180ef:	e8 2e f8 ff ff       	call   c0017922 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00180f4:	83 c4 10             	add    esp,0x10
c00180f7:	83 e0 01             	and    eax,0x1
c00180fa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018101:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018107:	83 e0 fb             	and    eax,0xfffffffb
c001810a:	09 d0                	or     eax,edx
c001810c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018112:	83 ec 0c             	sub    esp,0xc
c0018115:	56                   	push   esi
c0018116:	55                   	push   ebp
c0018117:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001811b:	57                   	push   edi
c001811c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018120:	50                   	push   eax
c0018121:	6a 01                	push   0x1
c0018123:	e8 ec f6 ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018128:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001812c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018132:	88 ca                	mov    dl,cl
c0018134:	83 e0 f0             	and    eax,0xfffffff0
c0018137:	83 e2 0f             	and    edx,0xf
c001813a:	09 d0                	or     eax,edx
c001813c:	88 ca                	mov    dl,cl
c001813e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018144:	c0 ea 04             	shr    dl,0x4
c0018147:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001814b:	0f b6 c2             	movzx  eax,dl
c001814e:	83 c4 20             	add    esp,0x20
c0018151:	c1 e0 06             	shl    eax,0x6
c0018154:	89 c5                	mov    ebp,eax
c0018156:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001815c:	66 25 3f c0          	and    ax,0xc03f
c0018160:	09 e8                	or     eax,ebp
c0018162:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018169:	89 c8                	mov    eax,ecx
c001816b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018171:	c1 e8 08             	shr    eax,0x8
c0018174:	83 e2 3f             	and    edx,0x3f
c0018177:	83 e0 0f             	and    eax,0xf
c001817a:	89 c5                	mov    ebp,eax
c001817c:	c1 e5 06             	shl    ebp,0x6
c001817f:	09 d5                	or     ebp,edx
c0018181:	89 ea                	mov    edx,ebp
c0018183:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018189:	88 c2                	mov    dl,al
c001818b:	c0 ea 02             	shr    dl,0x2
c001818e:	89 d5                	mov    ebp,edx
c0018190:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018196:	83 e2 c0             	and    edx,0xffffffc0
c0018199:	09 d5                	or     ebp,edx
c001819b:	89 ea                	mov    edx,ebp
c001819d:	89 cd                	mov    ebp,ecx
c001819f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00181a5:	c1 ed 0c             	shr    ebp,0xc
c00181a8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00181ae:	83 e5 03             	and    ebp,0x3
c00181b1:	83 e2 cf             	and    edx,0xffffffcf
c00181b4:	c1 e5 04             	shl    ebp,0x4
c00181b7:	09 d5                	or     ebp,edx
c00181b9:	3c 06                	cmp    al,0x6
c00181bb:	89 ea                	mov    edx,ebp
c00181bd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00181c3:	74 04                	je     c00181c9 <CPU::detectFeatures()+0x557>
c00181c5:	3c 0f                	cmp    al,0xf
c00181c7:	75 5c                	jne    c0018225 <CPU::detectFeatures()+0x5b3>
c00181c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00181cd:	89 cd                	mov    ebp,ecx
c00181cf:	c1 ed 10             	shr    ebp,0x10
c00181d2:	c1 e5 04             	shl    ebp,0x4
c00181d5:	09 ea                	or     edx,ebp
c00181d7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00181dd:	0f b6 d2             	movzx  edx,dl
c00181e0:	66 81 e5 3f c0       	and    bp,0xc03f
c00181e5:	c1 e2 06             	shl    edx,0x6
c00181e8:	09 ea                	or     edx,ebp
c00181ea:	3c 0f                	cmp    al,0xf
c00181ec:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00181f3:	75 30                	jne    c0018225 <CPU::detectFeatures()+0x5b3>
c00181f5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00181fb:	c1 e9 14             	shr    ecx,0x14
c00181fe:	83 e0 3f             	and    eax,0x3f
c0018201:	83 c1 0f             	add    ecx,0xf
c0018204:	88 ca                	mov    dl,cl
c0018206:	c0 e9 02             	shr    cl,0x2
c0018209:	c1 e2 06             	shl    edx,0x6
c001820c:	09 d0                	or     eax,edx
c001820e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018214:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001821a:	83 e0 c0             	and    eax,0xffffffc0
c001821d:	09 c1                	or     ecx,eax
c001821f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001822f:	56                   	push   esi
c0018230:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018234:	50                   	push   eax
c0018235:	57                   	push   edi
c0018236:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001823a:	55                   	push   ebp
c001823b:	68 00 00 00 80       	push   0x80000000
c0018240:	e8 cf f5 ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018245:	83 c4 20             	add    esp,0x20
c0018248:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018250:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018254:	76 1e                	jbe    c0018274 <CPU::detectFeatures()+0x602>
c0018256:	83 ec 0c             	sub    esp,0xc
c0018259:	56                   	push   esi
c001825a:	50                   	push   eax
c001825b:	57                   	push   edi
c001825c:	55                   	push   ebp
c001825d:	68 01 00 00 80       	push   0x80000001
c0018262:	e8 ad f5 ff ff       	call   c0017814 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018267:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018271:	83 c4 20             	add    esp,0x20
c0018274:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001827a:	83 f8 01             	cmp    eax,0x1
c001827d:	75 6f                	jne    c00182ee <CPU::detectFeatures()+0x67c>
c001827f:	51                   	push   ecx
c0018280:	51                   	push   ecx
c0018281:	68 7a 80 02 c0       	push   0xc002807a
c0018286:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001828a:	56                   	push   esi
c001828b:	e8 d4 84 fe ff       	call   c0000764 <strcpy>
c0018290:	5f                   	pop    edi
c0018291:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018297:	5d                   	pop    ebp
c0018298:	66 c1 e8 06          	shr    ax,0x6
c001829c:	0f b6 c0             	movzx  eax,al
c001829f:	50                   	push   eax
c00182a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182a6:	c1 e8 0e             	shr    eax,0xe
c00182a9:	0f b6 c0             	movzx  eax,al
c00182ac:	50                   	push   eax
c00182ad:	e8 0c f2 ff ff       	call   c00174be <CPU::lookupIntelName(unsigned char, unsigned char)>
c00182b2:	5a                   	pop    edx
c00182b3:	59                   	pop    ecx
c00182b4:	50                   	push   eax
c00182b5:	56                   	push   esi
c00182b6:	e8 60 85 fe ff       	call   c000081b <strcat>
c00182bb:	5f                   	pop    edi
c00182bc:	5d                   	pop    ebp
c00182bd:	56                   	push   esi
c00182be:	53                   	push   ebx
c00182bf:	e8 a0 b5 ff ff       	call   c0013864 <Device::setName(char const*)>
c00182c4:	58                   	pop    eax
c00182c5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00182cb:	5a                   	pop    edx
c00182cc:	68 81 80 02 c0       	push   0xc0028081
c00182d1:	50                   	push   eax
c00182d2:	e8 de 84 fe ff       	call   c00007b5 <strcmp>
c00182d7:	83 c4 10             	add    esp,0x10
c00182da:	85 c0                	test   eax,eax
c00182dc:	0f 85 73 03 00 00    	jne    c0018655 <CPU::detectFeatures()+0x9e3>
c00182e2:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00182e9:	e9 67 03 00 00       	jmp    c0018655 <CPU::detectFeatures()+0x9e3>
c00182ee:	83 f8 02             	cmp    eax,0x2
c00182f1:	0f 85 b5 00 00 00    	jne    c00183ac <CPU::detectFeatures()+0x73a>
c00182f7:	57                   	push   edi
c00182f8:	57                   	push   edi
c00182f9:	68 93 80 02 c0       	push   0xc0028093
c00182fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018302:	56                   	push   esi
c0018303:	e8 5c 84 fe ff       	call   c0000764 <strcpy>
c0018308:	5d                   	pop    ebp
c0018309:	58                   	pop    eax
c001830a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018310:	66 c1 e8 06          	shr    ax,0x6
c0018314:	0f b6 c0             	movzx  eax,al
c0018317:	50                   	push   eax
c0018318:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001831e:	c1 e8 0e             	shr    eax,0xe
c0018321:	0f b6 c0             	movzx  eax,al
c0018324:	50                   	push   eax
c0018325:	e8 00 f0 ff ff       	call   c001732a <CPU::lookupAMDName(unsigned char, unsigned char)>
c001832a:	5a                   	pop    edx
c001832b:	59                   	pop    ecx
c001832c:	50                   	push   eax
c001832d:	56                   	push   esi
c001832e:	e8 e8 84 fe ff       	call   c000081b <strcat>
c0018333:	5f                   	pop    edi
c0018334:	5d                   	pop    ebp
c0018335:	56                   	push   esi
c0018336:	53                   	push   ebx
c0018337:	e8 28 b5 ff ff       	call   c0013864 <Device::setName(char const*)>
c001833c:	58                   	pop    eax
c001833d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018343:	5a                   	pop    edx
c0018344:	68 98 80 02 c0       	push   0xc0028098
c0018349:	50                   	push   eax
c001834a:	e8 66 84 fe ff       	call   c00007b5 <strcmp>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	85 c0                	test   eax,eax
c0018354:	75 20                	jne    c0018376 <CPU::detectFeatures()+0x704>
c0018356:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c001835c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018362:	a8 01                	test   al,0x1
c0018364:	74 10                	je     c0018376 <CPU::detectFeatures()+0x704>
c0018366:	83 e0 fe             	and    eax,0xfffffffe
c0018369:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001836f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018376:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001837c:	c1 e8 0e             	shr    eax,0xe
c001837f:	3c 05                	cmp    al,0x5
c0018381:	0f 85 ce 02 00 00    	jne    c0018655 <CPU::detectFeatures()+0x9e3>
c0018387:	56                   	push   esi
c0018388:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001838e:	83 e0 0f             	and    eax,0xf
c0018391:	50                   	push   eax
c0018392:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018398:	66 c1 e8 06          	shr    ax,0x6
c001839c:	0f b6 c0             	movzx  eax,al
c001839f:	50                   	push   eax
c00183a0:	6a 05                	push   0x5
c00183a2:	e8 f9 f3 ff ff       	call   c00177a0 <CPU::AMD_K6_writeback(int, int, int)>
c00183a7:	e9 1f 02 00 00       	jmp    c00185cb <CPU::detectFeatures()+0x959>
c00183ac:	8d 50 fd             	lea    edx,[eax-0x3]
c00183af:	83 fa 01             	cmp    edx,0x1
c00183b2:	76 09                	jbe    c00183bd <CPU::detectFeatures()+0x74b>
c00183b4:	83 f8 06             	cmp    eax,0x6
c00183b7:	0f 85 91 01 00 00    	jne    c001854e <CPU::detectFeatures()+0x8dc>
c00183bd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183c3:	c1 ea 0e             	shr    edx,0xe
c00183c6:	80 fa 05             	cmp    dl,0x5
c00183c9:	75 7b                	jne    c0018446 <CPU::detectFeatures()+0x7d4>
c00183cb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183d1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00183d6:	66 81 fa 00 01       	cmp    dx,0x100
c00183db:	75 0c                	jne    c00183e9 <CPU::detectFeatures()+0x777>
c00183dd:	51                   	push   ecx
c00183de:	51                   	push   ecx
c00183df:	68 9f 80 02 c0       	push   0xc002809f
c00183e4:	e9 dc 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00183e9:	66 81 fa 00 02       	cmp    dx,0x200
c00183ee:	75 0c                	jne    c00183fc <CPU::detectFeatures()+0x78a>
c00183f0:	52                   	push   edx
c00183f1:	52                   	push   edx
c00183f2:	68 b2 80 02 c0       	push   0xc00280b2
c00183f7:	e9 c9 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00183fc:	66 81 fa 40 02       	cmp    dx,0x240
c0018401:	75 0c                	jne    c001840f <CPU::detectFeatures()+0x79d>
c0018403:	50                   	push   eax
c0018404:	50                   	push   eax
c0018405:	68 c4 80 02 c0       	push   0xc00280c4
c001840a:	e9 b6 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c001840f:	83 f8 06             	cmp    eax,0x6
c0018412:	75 0c                	jne    c0018420 <CPU::detectFeatures()+0x7ae>
c0018414:	50                   	push   eax
c0018415:	50                   	push   eax
c0018416:	68 d6 80 02 c0       	push   0xc00280d6
c001841b:	e9 a5 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018420:	83 f8 04             	cmp    eax,0x4
c0018423:	75 0c                	jne    c0018431 <CPU::detectFeatures()+0x7bf>
c0018425:	50                   	push   eax
c0018426:	50                   	push   eax
c0018427:	68 e2 80 02 c0       	push   0xc00280e2
c001842c:	e9 94 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018431:	83 f8 03             	cmp    eax,0x3
c0018434:	0f 85 1b 02 00 00    	jne    c0018655 <CPU::detectFeatures()+0x9e3>
c001843a:	50                   	push   eax
c001843b:	50                   	push   eax
c001843c:	68 ea 80 02 c0       	push   0xc00280ea
c0018441:	e9 7f 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018446:	80 fa 06             	cmp    dl,0x6
c0018449:	0f 85 db 00 00 00    	jne    c001852a <CPU::detectFeatures()+0x8b8>
c001844f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018455:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001845a:	66 81 fa 80 01       	cmp    dx,0x180
c001845f:	75 0c                	jne    c001846d <CPU::detectFeatures()+0x7fb>
c0018461:	50                   	push   eax
c0018462:	50                   	push   eax
c0018463:	68 f5 80 02 c0       	push   0xc00280f5
c0018468:	e9 58 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c001846d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018473:	66 f7 c1 80 ff       	test   cx,0xff80
c0018478:	75 0c                	jne    c0018486 <CPU::detectFeatures()+0x814>
c001847a:	50                   	push   eax
c001847b:	50                   	push   eax
c001847c:	68 05 81 02 c0       	push   0xc0028105
c0018481:	e9 3f 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018486:	66 81 fa 40 02       	cmp    dx,0x240
c001848b:	75 0c                	jne    c0018499 <CPU::detectFeatures()+0x827>
c001848d:	55                   	push   ebp
c001848e:	55                   	push   ebp
c001848f:	68 0c 81 02 c0       	push   0xc002810c
c0018494:	e9 2c 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018499:	66 81 fa 80 02       	cmp    dx,0x280
c001849e:	75 0c                	jne    c00184ac <CPU::detectFeatures()+0x83a>
c00184a0:	57                   	push   edi
c00184a1:	57                   	push   edi
c00184a2:	68 15 81 02 c0       	push   0xc0028115
c00184a7:	e9 19 01 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00184ac:	66 81 fa 40 03       	cmp    dx,0x340
c00184b1:	74 ed                	je     c00184a0 <CPU::detectFeatures()+0x82e>
c00184b3:	66 81 fa c0 03       	cmp    dx,0x3c0
c00184b8:	75 0c                	jne    c00184c6 <CPU::detectFeatures()+0x854>
c00184ba:	56                   	push   esi
c00184bb:	56                   	push   esi
c00184bc:	68 1c 81 02 c0       	push   0xc002811c
c00184c1:	e9 ff 00 00 00       	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00184c6:	83 f8 06             	cmp    eax,0x6
c00184c9:	0f 84 45 ff ff ff    	je     c0018414 <CPU::detectFeatures()+0x7a2>
c00184cf:	83 f8 04             	cmp    eax,0x4
c00184d2:	0f 84 4d ff ff ff    	je     c0018425 <CPU::detectFeatures()+0x7b3>
c00184d8:	83 f8 03             	cmp    eax,0x3
c00184db:	0f 85 74 01 00 00    	jne    c0018655 <CPU::detectFeatures()+0x9e3>
c00184e1:	51                   	push   ecx
c00184e2:	51                   	push   ecx
c00184e3:	68 25 81 02 c0       	push   0xc0028125
c00184e8:	53                   	push   ebx
c00184e9:	e8 76 b3 ff ff       	call   c0013864 <Device::setName(char const*)>
c00184ee:	b1 c1                	mov    cl,0xc1
c00184f0:	88 c8                	mov    al,cl
c00184f2:	e6 22                	out    0x22,al
c00184f4:	e4 23                	in     al,0x23
c00184f6:	88 c2                	mov    dl,al
c00184f8:	88 c8                	mov    al,cl
c00184fa:	e6 22                	out    0x22,al
c00184fc:	88 d0                	mov    al,dl
c00184fe:	83 c8 10             	or     eax,0x10
c0018501:	e6 23                	out    0x23,al
c0018503:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001850a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001850d:	89 d0                	mov    eax,edx
c001850f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018515:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018519:	40                   	inc    eax
c001851a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018520:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018525:	e9 a1 00 00 00       	jmp    c00185cb <CPU::detectFeatures()+0x959>
c001852a:	83 f8 06             	cmp    eax,0x6
c001852d:	0f 84 e1 fe ff ff    	je     c0018414 <CPU::detectFeatures()+0x7a2>
c0018533:	83 f8 04             	cmp    eax,0x4
c0018536:	0f 84 e9 fe ff ff    	je     c0018425 <CPU::detectFeatures()+0x7b3>
c001853c:	83 f8 03             	cmp    eax,0x3
c001853f:	0f 85 10 01 00 00    	jne    c0018655 <CPU::detectFeatures()+0x9e3>
c0018545:	52                   	push   edx
c0018546:	52                   	push   edx
c0018547:	68 30 81 02 c0       	push   0xc0028130
c001854c:	eb 77                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c001854e:	83 f8 07             	cmp    eax,0x7
c0018551:	75 09                	jne    c001855c <CPU::detectFeatures()+0x8ea>
c0018553:	50                   	push   eax
c0018554:	50                   	push   eax
c0018555:	68 3a 81 02 c0       	push   0xc002813a
c001855a:	eb 69                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c001855c:	83 f8 0a             	cmp    eax,0xa
c001855f:	75 09                	jne    c001856a <CPU::detectFeatures()+0x8f8>
c0018561:	50                   	push   eax
c0018562:	50                   	push   eax
c0018563:	68 45 81 02 c0       	push   0xc0028145
c0018568:	eb 5b                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c001856a:	83 f8 0b             	cmp    eax,0xb
c001856d:	75 09                	jne    c0018578 <CPU::detectFeatures()+0x906>
c001856f:	50                   	push   eax
c0018570:	50                   	push   eax
c0018571:	68 4d 81 02 c0       	push   0xc002814d
c0018576:	eb 4d                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018578:	83 f8 08             	cmp    eax,0x8
c001857b:	75 09                	jne    c0018586 <CPU::detectFeatures()+0x914>
c001857d:	50                   	push   eax
c001857e:	50                   	push   eax
c001857f:	68 56 81 02 c0       	push   0xc0028156
c0018584:	eb 3f                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018586:	83 f8 09             	cmp    eax,0x9
c0018589:	75 09                	jne    c0018594 <CPU::detectFeatures()+0x922>
c001858b:	50                   	push   eax
c001858c:	50                   	push   eax
c001858d:	68 5e 81 02 c0       	push   0xc002815e
c0018592:	eb 31                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c0018594:	83 f8 05             	cmp    eax,0x5
c0018597:	75 09                	jne    c00185a2 <CPU::detectFeatures()+0x930>
c0018599:	50                   	push   eax
c001859a:	50                   	push   eax
c001859b:	68 66 81 02 c0       	push   0xc0028166
c00185a0:	eb 23                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00185a2:	83 f8 0c             	cmp    eax,0xc
c00185a5:	75 09                	jne    c00185b0 <CPU::detectFeatures()+0x93e>
c00185a7:	55                   	push   ebp
c00185a8:	55                   	push   ebp
c00185a9:	68 74 81 02 c0       	push   0xc0028174
c00185ae:	eb 15                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00185b0:	83 f8 0d             	cmp    eax,0xd
c00185b3:	75 09                	jne    c00185be <CPU::detectFeatures()+0x94c>
c00185b5:	57                   	push   edi
c00185b6:	57                   	push   edi
c00185b7:	68 7f 81 02 c0       	push   0xc002817f
c00185bc:	eb 07                	jmp    c00185c5 <CPU::detectFeatures()+0x953>
c00185be:	56                   	push   esi
c00185bf:	56                   	push   esi
c00185c0:	68 93 81 02 c0       	push   0xc0028193
c00185c5:	53                   	push   ebx
c00185c6:	e8 99 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c00185cb:	83 c4 10             	add    esp,0x10
c00185ce:	e9 82 00 00 00       	jmp    c0018655 <CPU::detectFeatures()+0x9e3>
c00185d3:	51                   	push   ecx
c00185d4:	51                   	push   ecx
c00185d5:	68 df 7f 02 c0       	push   0xc0027fdf
c00185da:	57                   	push   edi
c00185db:	e8 84 81 fe ff       	call   c0000764 <strcpy>
c00185e0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00185ea:	e8 74 7c fe ff       	call   c0000263 <is486>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	85 c0                	test   eax,eax
c00185f4:	74 2d                	je     c0018623 <CPU::detectFeatures()+0x9b1>
c00185f6:	52                   	push   edx
c00185f7:	52                   	push   edx
c00185f8:	68 9f 81 02 c0       	push   0xc002819f
c00185fd:	53                   	push   ebx
c00185fe:	e8 61 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c0018603:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001860a:	e8 59 cf 00 00       	call   c0025568 <CPU::readCR0()>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	83 e0 14             	and    eax,0x14
c0018615:	83 f8 04             	cmp    eax,0x4
c0018618:	75 1f                	jne    c0018639 <CPU::detectFeatures()+0x9c7>
c001861a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018621:	eb 32                	jmp    c0018655 <CPU::detectFeatures()+0x9e3>
c0018623:	50                   	push   eax
c0018624:	50                   	push   eax
c0018625:	68 aa 81 02 c0       	push   0xc00281aa
c001862a:	53                   	push   ebx
c001862b:	e8 34 b2 ff ff       	call   c0013864 <Device::setName(char const*)>
c0018630:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018637:	eb d1                	jmp    c001860a <CPU::detectFeatures()+0x998>
c0018639:	e8 00 7c fe ff       	call   c000023e <hasLegacyFPU>
c001863e:	83 e0 01             	and    eax,0x1
c0018641:	8d 14 00             	lea    edx,[eax+eax*1]
c0018644:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001864a:	83 e0 fd             	and    eax,0xfffffffd
c001864d:	09 d0                	or     eax,edx
c001864f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018655:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001865c:	83 c4 4c             	add    esp,0x4c
c001865f:	5b                   	pop    ebx
c0018660:	5e                   	pop    esi
c0018661:	5f                   	pop    edi
c0018662:	5d                   	pop    ebp
c0018663:	c3                   	ret    

c0018664 <CPU::setupSMEP()>:
c0018664:	83 ec 0c             	sub    esp,0xc
c0018667:	e8 c6 d1 00 00       	call   c0025832 <CPU::readCR4()>
c001866c:	0d 00 00 10 00       	or     eax,0x100000
c0018671:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018675:	83 c4 0c             	add    esp,0xc
c0018678:	e9 d0 d1 00 00       	jmp    c002584d <CPU::writeCR4(unsigned long)>
c001867d:	90                   	nop

c001867e <CPU::setupUMIP()>:
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	e8 ac d1 00 00       	call   c0025832 <CPU::readCR4()>
c0018686:	80 cc 08             	or     ah,0x8
c0018689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001868d:	83 c4 0c             	add    esp,0xc
c0018690:	e9 b8 d1 00 00       	jmp    c002584d <CPU::writeCR4(unsigned long)>
c0018695:	90                   	nop

c0018696 <CPU::setupTSC()>:
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	e8 94 d1 00 00       	call   c0025832 <CPU::readCR4()>
c001869e:	83 c8 04             	or     eax,0x4
c00186a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186a5:	83 c4 0c             	add    esp,0xc
c00186a8:	e9 a0 d1 00 00       	jmp    c002584d <CPU::writeCR4(unsigned long)>
c00186ad:	90                   	nop

c00186ae <CPU::setupLargePages()>:
c00186ae:	83 ec 0c             	sub    esp,0xc
c00186b1:	e8 7c d1 00 00       	call   c0025832 <CPU::readCR4()>
c00186b6:	83 c8 10             	or     eax,0x10
c00186b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186bd:	83 c4 0c             	add    esp,0xc
c00186c0:	e9 88 d1 00 00       	jmp    c002584d <CPU::writeCR4(unsigned long)>
c00186c5:	90                   	nop

c00186c6 <CPU::setupPAT()>:
c00186c6:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c00186cb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00186d2:	74 2c                	je     c0018700 <CPU::setupPAT()+0x3a>
c00186d4:	53                   	push   ebx
c00186d5:	83 ec 10             	sub    esp,0x10
c00186d8:	68 77 02 00 00       	push   0x277
c00186dd:	50                   	push   eax
c00186de:	e8 2b 60 ff ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c00186e3:	83 e2 f8             	and    edx,0xfffffff8
c00186e6:	83 ca 01             	or     edx,0x1
c00186e9:	52                   	push   edx
c00186ea:	50                   	push   eax
c00186eb:	68 77 02 00 00       	push   0x277
c00186f0:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c00186f6:	e8 3f 60 ff ff       	call   c000e73a <Computer::wrmsr(unsigned int, unsigned long long)>
c00186fb:	83 c4 28             	add    esp,0x28
c00186fe:	5b                   	pop    ebx
c00186ff:	c3                   	ret    
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <CPU::setupMTRR()>:
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <CPU::setupGlobalPages()>:
c0018704:	83 ec 0c             	sub    esp,0xc
c0018707:	e8 26 d1 00 00       	call   c0025832 <CPU::readCR4()>
c001870c:	0c 80                	or     al,0x80
c001870e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018712:	83 c4 0c             	add    esp,0xc
c0018715:	e9 33 d1 00 00       	jmp    c002584d <CPU::writeCR4(unsigned long)>

c001871a <CPU::allowUsermodeDataAccess()>:
c001871a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001871e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018725:	74 03                	je     c001872a <CPU::allowUsermodeDataAccess()+0x10>
c0018727:	0f 01 cb             	stac   
c001872a:	c3                   	ret    
c001872b:	90                   	nop

c001872c <CPU::prohibitUsermodeDataAccess()>:
c001872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018730:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018737:	74 03                	je     c001873c <CPU::prohibitUsermodeDataAccess()+0x10>
c0018739:	0f 01 ca             	clac   
c001873c:	c3                   	ret    
c001873d:	90                   	nop

c001873e <CPU::setupSMAP()>:
c001873e:	53                   	push   ebx
c001873f:	83 ec 08             	sub    esp,0x8
c0018742:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018746:	e8 e7 d0 00 00       	call   c0025832 <CPU::readCR4()>
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	0d 00 00 20 00       	or     eax,0x200000
c0018753:	50                   	push   eax
c0018754:	e8 f4 d0 00 00       	call   c002584d <CPU::writeCR4(unsigned long)>
c0018759:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001875d:	83 c4 18             	add    esp,0x18
c0018760:	5b                   	pop    ebx
c0018761:	eb c9                	jmp    c001872c <CPU::prohibitUsermodeDataAccess()>
c0018763:	90                   	nop

c0018764 <CPU::setupFeatures()>:
c0018764:	53                   	push   ebx
c0018765:	83 ec 08             	sub    esp,0x8
c0018768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001876c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018773:	74 0c                	je     c0018781 <CPU::setupFeatures()+0x1d>
c0018775:	83 ec 0c             	sub    esp,0xc
c0018778:	53                   	push   ebx
c0018779:	e8 e6 fe ff ff       	call   c0018664 <CPU::setupSMEP()>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018788:	74 0c                	je     c0018796 <CPU::setupFeatures()+0x32>
c001878a:	83 ec 0c             	sub    esp,0xc
c001878d:	53                   	push   ebx
c001878e:	e8 ab ff ff ff       	call   c001873e <CPU::setupSMAP()>
c0018793:	83 c4 10             	add    esp,0x10
c0018796:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001879d:	74 0c                	je     c00187ab <CPU::setupFeatures()+0x47>
c001879f:	83 ec 0c             	sub    esp,0xc
c00187a2:	53                   	push   ebx
c00187a3:	e8 d6 fe ff ff       	call   c001867e <CPU::setupUMIP()>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00187b2:	74 0c                	je     c00187c0 <CPU::setupFeatures()+0x5c>
c00187b4:	83 ec 0c             	sub    esp,0xc
c00187b7:	53                   	push   ebx
c00187b8:	e8 d9 fe ff ff       	call   c0018696 <CPU::setupTSC()>
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00187c7:	74 0c                	je     c00187d5 <CPU::setupFeatures()+0x71>
c00187c9:	83 ec 0c             	sub    esp,0xc
c00187cc:	53                   	push   ebx
c00187cd:	e8 dc fe ff ff       	call   c00186ae <CPU::setupLargePages()>
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00187dc:	74 0c                	je     c00187ea <CPU::setupFeatures()+0x86>
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	53                   	push   ebx
c00187e2:	e8 1d ff ff ff       	call   c0018704 <CPU::setupGlobalPages()>
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00187f1:	74 0d                	je     c0018800 <CPU::setupFeatures()+0x9c>
c00187f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00187f7:	83 c4 08             	add    esp,0x8
c00187fa:	5b                   	pop    ebx
c00187fb:	e9 c6 fe ff ff       	jmp    c00186c6 <CPU::setupPAT()>
c0018800:	83 c4 08             	add    esp,0x8
c0018803:	5b                   	pop    ebx
c0018804:	c3                   	ret    
c0018805:	90                   	nop

c0018806 <CPU::open(int, int, void*)>:
c0018806:	57                   	push   edi
c0018807:	56                   	push   esi
c0018808:	53                   	push   ebx
c0018809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001880d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018811:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018817:	83 ec 0c             	sub    esp,0xc
c001881a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018820:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018826:	50                   	push   eax
c0018827:	e8 ce 61 ff ff       	call   c000e9fa <GDT::setup()>
c001882c:	83 c4 0c             	add    esp,0xc
c001882f:	6a 00                	push   0x0
c0018831:	68 ef be ad de       	push   0xdeadbeef
c0018836:	57                   	push   edi
c0018837:	e8 26 84 ff ff       	call   c0010c62 <TSS::setup(unsigned long, unsigned long)>
c001883c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001883f:	e8 fe 83 ff ff       	call   c0010c42 <TSS::flush()>
c0018844:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001884a:	89 04 24             	mov    DWORD PTR [esp],eax
c001884d:	e8 02 64 ff ff       	call   c000ec54 <IDT::setup()>
c0018852:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018859:	e8 e6 cf 00 00       	call   c0025844 <CPU::writeDR7(unsigned long)>
c001885e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018868:	e8 ab 6e ff ff       	call   c000f718 <Phys::allocatePage()>
c001886d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018873:	89 30                	mov    DWORD PTR [eax],esi
c0018875:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001887b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001887e:	58                   	pop    eax
c001887f:	5a                   	pop    edx
c0018880:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018886:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001888a:	e8 b9 93 ff ff       	call   c0011c48 <VAS::setCPUSpecific(unsigned long)>
c001888f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018892:	e8 db f3 ff ff       	call   c0017c72 <CPU::detectFeatures()>
c0018897:	e8 b8 c2 ff ff       	call   c0014b54 <setupInterruptController()>
c001889c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00188a2:	a1 e0 a5 02 c0       	mov    eax,ds:0xc002a5e0
c00188a7:	83 e0 10             	and    eax,0x10
c00188aa:	83 f8 01             	cmp    eax,0x1
c00188ad:	19 c0                	sbb    eax,eax
c00188af:	83 e0 46             	and    eax,0x46
c00188b2:	83 c0 1e             	add    eax,0x1e
c00188b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00188b8:	e8 41 d6 ff ff       	call   c0015efe <setupTimer(int)>
c00188bd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00188c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188c6:	e8 99 fe ff ff       	call   c0018764 <CPU::setupFeatures()>
c00188cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188ce:	e8 23 f1 ff ff       	call   c00179f6 <CPU::displayFeatures()>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	31 c0                	xor    eax,eax
c00188d8:	5b                   	pop    ebx
c00188d9:	5e                   	pop    esi
c00188da:	5f                   	pop    edi
c00188db:	c3                   	ret    

c00188dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00188dc:	57                   	push   edi
c00188dd:	56                   	push   esi
c00188de:	53                   	push   ebx
c00188df:	51                   	push   ecx
c00188e0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00188e4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00188e7:	0f 02 c0             	lar    eax,ax
c00188ea:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00188ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188f1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00188f4:	88 ca                	mov    dl,cl
c00188f6:	c0 ea 06             	shr    dl,0x6
c00188f9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00188fd:	89 ca                	mov    edx,ecx
c00188ff:	66 c1 ea 03          	shr    dx,0x3
c0018903:	83 e2 07             	and    edx,0x7
c0018906:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001890b:	88 17                	mov    BYTE PTR [edi],dl
c001890d:	0f 84 a6 01 00 00    	je     c0018ab9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018913:	83 e1 07             	and    ecx,0x7
c0018916:	80 f9 04             	cmp    cl,0x4
c0018919:	0f 84 98 00 00 00    	je     c00189b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001891f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018924:	0f 95 c0             	setne  al
c0018927:	80 f9 05             	cmp    cl,0x5
c001892a:	0f 95 c2             	setne  dl
c001892d:	08 c2                	or     dl,al
c001892f:	74 79                	je     c00189aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018931:	84 c9                	test   cl,cl
c0018933:	75 05                	jne    c001893a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018935:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018938:	eb 3c                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001893a:	80 f9 01             	cmp    cl,0x1
c001893d:	75 05                	jne    c0018944 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001893f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018942:	eb 32                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018944:	80 f9 02             	cmp    cl,0x2
c0018947:	75 05                	jne    c001894e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018949:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001894c:	eb 28                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001894e:	31 c0                	xor    eax,eax
c0018950:	80 f9 03             	cmp    cl,0x3
c0018953:	75 05                	jne    c001895a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018955:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018958:	eb 1c                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001895a:	80 f9 05             	cmp    cl,0x5
c001895d:	75 05                	jne    c0018964 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001895f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018962:	eb 12                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018964:	80 f9 06             	cmp    cl,0x6
c0018967:	75 05                	jne    c001896e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018969:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001896c:	eb 08                	jmp    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001896e:	80 f9 07             	cmp    cl,0x7
c0018971:	75 03                	jne    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018973:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018976:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001897b:	75 10                	jne    c001898d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001897d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018981:	b9 03 00 00 00       	mov    ecx,0x3
c0018986:	01 d0                	add    eax,edx
c0018988:	e9 37 01 00 00       	jmp    c0018ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001898d:	b9 02 00 00 00       	mov    ecx,0x2
c0018992:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018997:	0f 85 27 01 00 00    	jne    c0018ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001899d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00189a0:	b9 06 00 00 00       	mov    ecx,0x6
c00189a5:	e9 1a 01 00 00       	jmp    c0018ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189aa:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00189ad:	b9 06 00 00 00       	mov    ecx,0x6
c00189b2:	e9 0f 01 00 00       	jmp    c0018ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00189ba:	88 ca                	mov    dl,cl
c00189bc:	c0 ea 06             	shr    dl,0x6
c00189bf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00189c3:	89 ca                	mov    edx,ecx
c00189c5:	66 c1 ea 03          	shr    dx,0x3
c00189c9:	83 e2 07             	and    edx,0x7
c00189cc:	80 e1 07             	and    cl,0x7
c00189cf:	75 05                	jne    c00189d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00189d1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00189d4:	eb 4c                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189d6:	80 f9 01             	cmp    cl,0x1
c00189d9:	75 05                	jne    c00189e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00189db:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00189de:	eb 42                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189e0:	80 f9 02             	cmp    cl,0x2
c00189e3:	75 05                	jne    c00189ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00189e5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00189e8:	eb 38                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189ea:	80 f9 03             	cmp    cl,0x3
c00189ed:	75 05                	jne    c00189f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00189ef:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00189f2:	eb 2e                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189f4:	80 f9 04             	cmp    cl,0x4
c00189f7:	75 12                	jne    c0018a0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00189f9:	f6 c4 60             	test   ah,0x60
c00189fc:	75 08                	jne    c0018a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00189fe:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018a01:	8d 78 14             	lea    edi,[eax+0x14]
c0018a04:	eb 1c                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a06:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018a09:	eb 17                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a0b:	80 f9 05             	cmp    cl,0x5
c0018a0e:	75 05                	jne    c0018a15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018a10:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018a13:	eb 0d                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a15:	80 f9 06             	cmp    cl,0x6
c0018a18:	75 05                	jne    c0018a1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018a1a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018a1d:	eb 03                	jmp    c0018a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018a1f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018a22:	84 d2                	test   dl,dl
c0018a24:	75 05                	jne    c0018a2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018a26:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018a29:	eb 3c                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a2b:	80 fa 01             	cmp    dl,0x1
c0018a2e:	75 05                	jne    c0018a35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018a30:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018a33:	eb 32                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a35:	80 fa 02             	cmp    dl,0x2
c0018a38:	75 05                	jne    c0018a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018a3a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018a3d:	eb 28                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a3f:	80 fa 03             	cmp    dl,0x3
c0018a42:	75 05                	jne    c0018a49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018a44:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018a47:	eb 1e                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a49:	31 c0                	xor    eax,eax
c0018a4b:	80 fa 04             	cmp    dl,0x4
c0018a4e:	74 17                	je     c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a50:	80 fa 05             	cmp    dl,0x5
c0018a53:	75 05                	jne    c0018a5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018a55:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018a58:	eb 0d                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a5a:	80 fa 06             	cmp    dl,0x6
c0018a5d:	75 05                	jne    c0018a64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018a5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018a62:	eb 03                	jmp    c0018a67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a64:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018a67:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018a6c:	0f 94 c2             	sete   dl
c0018a6f:	80 f9 05             	cmp    cl,0x5
c0018a72:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018a76:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018a7b:	d3 e0                	shl    eax,cl
c0018a7d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018a81:	74 0a                	je     c0018a8d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018a83:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018a86:	b9 07 00 00 00       	mov    ecx,0x7
c0018a8b:	eb 37                	jmp    c0018ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018a8d:	01 f8                	add    eax,edi
c0018a8f:	b9 03 00 00 00       	mov    ecx,0x3
c0018a94:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018a99:	74 2b                	je     c0018ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018a9b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018aa0:	75 0d                	jne    c0018aaf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018aa2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018aa6:	01 c8                	add    eax,ecx
c0018aa8:	b9 04 00 00 00       	mov    ecx,0x4
c0018aad:	eb 17                	jmp    c0018ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018aaf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018ab2:	b9 07 00 00 00       	mov    ecx,0x7
c0018ab7:	eb 0d                	jmp    c0018ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ab9:	b9 02 00 00 00       	mov    ecx,0x2
c0018abe:	b2 01                	mov    dl,0x1
c0018ac0:	31 c0                	xor    eax,eax
c0018ac2:	eb 02                	jmp    c0018ac6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018ac4:	31 d2                	xor    edx,edx
c0018ac6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018aca:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018acc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ad0:	88 11                	mov    BYTE PTR [ecx],dl
c0018ad2:	5a                   	pop    edx
c0018ad3:	5b                   	pop    ebx
c0018ad4:	5e                   	pop    esi
c0018ad5:	5f                   	pop    edi
c0018ad6:	c3                   	ret    

c0018ad7 <Krnl::panic(char const*)>:
c0018ad7:	55                   	push   ebp
c0018ad8:	89 e5                	mov    ebp,esp
c0018ada:	53                   	push   ebx
c0018adb:	50                   	push   eax
c0018adc:	a1 50 b0 02 c0       	mov    eax,ds:0xc002b050
c0018ae1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018ae4:	85 c0                	test   eax,eax
c0018ae6:	74 02                	je     c0018aea <Krnl::panic(char const*)+0x13>
c0018ae8:	ff d0                	call   eax
c0018aea:	fa                   	cli    
c0018aeb:	c6 05 54 b0 02 c0 01 	mov    BYTE PTR ds:0xc002b054,0x1
c0018af2:	83 ec 08             	sub    esp,0x8
c0018af5:	c6 05 80 95 02 c0 00 	mov    BYTE PTR ds:0xc0029580,0x0
c0018afc:	53                   	push   ebx
c0018afd:	68 e4 81 02 c0       	push   0xc00281e4
c0018b02:	e8 70 97 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018b07:	58                   	pop    eax
c0018b08:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b13:	e8 8b 79 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c0018b18:	83 c4 0c             	add    esp,0xc
c0018b1b:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b20:	6a 01                	push   0x1
c0018b22:	6a 0f                	push   0xf
c0018b24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b2a:	e8 b3 73 ff ff       	call   c000fee2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018b2f:	5a                   	pop    edx
c0018b30:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b3b:	e8 04 7c ff ff       	call   c0010744 <VgaText::clearScreen()>
c0018b40:	59                   	pop    ecx
c0018b41:	58                   	pop    eax
c0018b42:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b47:	68 fd 81 02 c0       	push   0xc00281fd
c0018b4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b52:	e8 6b 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b57:	58                   	pop    eax
c0018b58:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b5d:	5a                   	pop    edx
c0018b5e:	68 a4 82 02 c0       	push   0xc00282a4
c0018b63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b69:	e8 54 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b6e:	59                   	pop    ecx
c0018b6f:	58                   	pop    eax
c0018b70:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b75:	68 19 82 02 c0       	push   0xc0028219
c0018b7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b80:	e8 3d 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b85:	58                   	pop    eax
c0018b86:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b8b:	5a                   	pop    edx
c0018b8c:	53                   	push   ebx
c0018b8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b93:	e8 2a 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018b98:	59                   	pop    ecx
c0018b99:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018b9e:	5b                   	pop    ebx
c0018b9f:	68 39 82 02 c0       	push   0xc0028239
c0018ba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018baa:	e8 13 7d ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018baf:	58                   	pop    eax
c0018bb0:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018bb5:	5a                   	pop    edx
c0018bb6:	68 e0 82 02 c0       	push   0xc00282e0
c0018bbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bc1:	e8 fc 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bc6:	59                   	pop    ecx
c0018bc7:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018bcc:	5b                   	pop    ebx
c0018bcd:	68 19 82 02 c0       	push   0xc0028219
c0018bd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bd8:	e8 e5 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bdd:	58                   	pop    eax
c0018bde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018be3:	5a                   	pop    edx
c0018be4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018be7:	83 c0 0c             	add    eax,0xc
c0018bea:	50                   	push   eax
c0018beb:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018bf0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bf6:	e8 c7 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018bfb:	59                   	pop    ecx
c0018bfc:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018c01:	5b                   	pop    ebx
c0018c02:	68 38 82 02 c0       	push   0xc0028238
c0018c07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c0d:	e8 b0 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c12:	58                   	pop    eax
c0018c13:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018c18:	5a                   	pop    edx
c0018c19:	68 0c 83 02 c0       	push   0xc002830c
c0018c1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c24:	e8 99 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c29:	59                   	pop    ecx
c0018c2a:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018c2f:	5b                   	pop    ebx
c0018c30:	68 4c 83 02 c0       	push   0xc002834c
c0018c35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c3b:	e8 82 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c40:	58                   	pop    eax
c0018c41:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018c46:	5a                   	pop    edx
c0018c47:	68 24 82 02 c0       	push   0xc0028224
c0018c4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c52:	e8 6b 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018c57:	59                   	pop    ecx
c0018c58:	5b                   	pop    ebx
c0018c59:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c5c:	68 3c 82 02 c0       	push   0xc002823c
c0018c61:	e8 11 96 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018c66:	58                   	pop    eax
c0018c67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c6a:	5a                   	pop    edx
c0018c6b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018c6e:	68 45 82 02 c0       	push   0xc0028245
c0018c73:	e8 ff 95 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018c78:	59                   	pop    ecx
c0018c79:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c7c:	5b                   	pop    ebx
c0018c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c7f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018c82:	68 4e 82 02 c0       	push   0xc002824e
c0018c87:	e8 eb 95 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0018c8c:	58                   	pop    eax
c0018c8d:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018c92:	5a                   	pop    edx
c0018c93:	68 90 83 02 c0       	push   0xc0028390
c0018c98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c9e:	e8 1f 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018ca3:	59                   	pop    ecx
c0018ca4:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018ca9:	5b                   	pop    ebx
c0018caa:	68 57 82 02 c0       	push   0xc0028257
c0018caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cb5:	e8 08 7c ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018cba:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018cbf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018cc5:	e8 9e c8 00 00       	call   c0025568 <CPU::readCR0()>
c0018cca:	5a                   	pop    edx
c0018ccb:	59                   	pop    ecx
c0018ccc:	50                   	push   eax
c0018ccd:	53                   	push   ebx
c0018cce:	e8 15 7c ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018cd3:	5b                   	pop    ebx
c0018cd4:	58                   	pop    eax
c0018cd5:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018cda:	68 61 82 02 c0       	push   0xc0028261
c0018cdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ce5:	e8 d8 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018cea:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018cef:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018cf5:	e8 5c cb 00 00       	call   c0025856 <CPU::readCR2()>
c0018cfa:	5a                   	pop    edx
c0018cfb:	59                   	pop    ecx
c0018cfc:	50                   	push   eax
c0018cfd:	53                   	push   ebx
c0018cfe:	e8 e5 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d03:	5b                   	pop    ebx
c0018d04:	58                   	pop    eax
c0018d05:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d0a:	68 6b 82 02 c0       	push   0xc002826b
c0018d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d15:	e8 a8 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d1a:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d1f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d25:	e8 cb c4 00 00       	call   c00251f5 <CPU::readCR3()>
c0018d2a:	5a                   	pop    edx
c0018d2b:	59                   	pop    ecx
c0018d2c:	50                   	push   eax
c0018d2d:	53                   	push   ebx
c0018d2e:	e8 b5 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d33:	5b                   	pop    ebx
c0018d34:	58                   	pop    eax
c0018d35:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d3a:	68 7e 82 02 c0       	push   0xc002827e
c0018d3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d45:	e8 78 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d4a:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d4f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d55:	e8 d8 ca 00 00       	call   c0025832 <CPU::readCR4()>
c0018d5a:	5a                   	pop    edx
c0018d5b:	59                   	pop    ecx
c0018d5c:	50                   	push   eax
c0018d5d:	53                   	push   ebx
c0018d5e:	e8 85 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d63:	5b                   	pop    ebx
c0018d64:	58                   	pop    eax
c0018d65:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d6a:	68 88 82 02 c0       	push   0xc0028288
c0018d6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d75:	e8 48 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018d7a:	5a                   	pop    edx
c0018d7b:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d80:	59                   	pop    ecx
c0018d81:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018d87:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018d8a:	50                   	push   eax
c0018d8b:	e8 58 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018d90:	5b                   	pop    ebx
c0018d91:	58                   	pop    eax
c0018d92:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018d97:	68 9f 82 02 c0       	push   0xc002829f
c0018d9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018da2:	e8 1b 7b ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018da7:	5a                   	pop    edx
c0018da8:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018dad:	59                   	pop    ecx
c0018dae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018db4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018db7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018dba:	50                   	push   eax
c0018dbb:	e8 28 7b ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018dc0:	5b                   	pop    ebx
c0018dc1:	58                   	pop    eax
c0018dc2:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018dc7:	68 9f 82 02 c0       	push   0xc002829f
c0018dcc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018dd2:	e8 eb 7a ff ff       	call   c00108c2 <VgaText::puts(char const*)>
c0018dd7:	59                   	pop    ecx
c0018dd8:	a1 54 ba 02 c0       	mov    eax,ds:0xc002ba54
c0018ddd:	5b                   	pop    ebx
c0018dde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018de4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018de7:	8b 12                	mov    edx,DWORD PTR [edx]
c0018de9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018dec:	50                   	push   eax
c0018ded:	e8 f6 7a ff ff       	call   c00108e8 <VgaText::putx(unsigned int)>
c0018df2:	83 c4 10             	add    esp,0x10
c0018df5:	b2 fe                	mov    dl,0xfe
c0018df7:	e4 60                	in     al,0x60
c0018df9:	3c 1c                	cmp    al,0x1c
c0018dfb:	74 04                	je     c0018e01 <Krnl::panic(char const*)+0x32a>
c0018dfd:	3c 5a                	cmp    al,0x5a
c0018dff:	75 f6                	jne    c0018df7 <Krnl::panic(char const*)+0x320>
c0018e01:	e4 64                	in     al,0x64
c0018e03:	a8 02                	test   al,0x2
c0018e05:	75 fa                	jne    c0018e01 <Krnl::panic(char const*)+0x32a>
c0018e07:	88 d0                	mov    al,dl
c0018e09:	e6 64                	out    0x64,al
c0018e0b:	fa                   	cli    
c0018e0c:	f4                   	hlt    
c0018e0d:	eb e8                	jmp    c0018df7 <Krnl::panic(char const*)+0x320>

c0018e0f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018e0f:	55                   	push   ebp
c0018e10:	57                   	push   edi
c0018e11:	56                   	push   esi
c0018e12:	53                   	push   ebx
c0018e13:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e19:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018e20:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018e22:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018e25:	80 fb 40             	cmp    bl,0x40
c0018e28:	75 1b                	jne    c0018e45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018e2a:	8a 16                	mov    dl,BYTE PTR [esi]
c0018e2c:	84 d2                	test   dl,dl
c0018e2e:	0f 84 f1 00 00 00    	je     c0018f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e34:	8d 46 01             	lea    eax,[esi+0x1]
c0018e37:	80 fa 3a             	cmp    dl,0x3a
c0018e3a:	74 04                	je     c0018e40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018e3c:	89 c6                	mov    esi,eax
c0018e3e:	eb ea                	jmp    c0018e2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018e40:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018e43:	89 c6                	mov    esi,eax
c0018e45:	50                   	push   eax
c0018e46:	6a 40                	push   0x40
c0018e48:	6a 00                	push   0x0
c0018e4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e4e:	50                   	push   eax
c0018e4f:	e8 71 78 fe ff       	call   c00006c5 <memset>
c0018e54:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018e5b:	31 c0                	xor    eax,eax
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018e62:	84 c9                	test   cl,cl
c0018e64:	0f 84 bb 00 00 00    	je     c0018f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e6a:	3d c7 00 00 00       	cmp    eax,0xc7
c0018e6f:	0f 8f b0 00 00 00    	jg     c0018f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e75:	80 f9 0a             	cmp    cl,0xa
c0018e78:	0f 85 98 00 00 00    	jne    c0018f16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018e7e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018e83:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018e87:	a8 df                	test   al,0xdf
c0018e89:	0f 94 c1             	sete   cl
c0018e8c:	3c 23                	cmp    al,0x23
c0018e8e:	0f 94 c2             	sete   dl
c0018e91:	08 d1                	or     cl,dl
c0018e93:	75 4a                	jne    c0018edf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e95:	8d 50 f7             	lea    edx,[eax-0x9]
c0018e98:	80 fa 01             	cmp    dl,0x1
c0018e9b:	76 42                	jbe    c0018edf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e9d:	3c 5b                	cmp    al,0x5b
c0018e9f:	75 42                	jne    c0018ee3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018ea1:	80 fb 40             	cmp    bl,0x40
c0018ea4:	75 39                	jne    c0018edf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018ead:	52                   	push   edx
c0018eae:	e8 2f 78 fe ff       	call   c00006e2 <strlen>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	83 f8 3f             	cmp    eax,0x3f
c0018eb9:	77 6a                	ja     c0018f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018ebb:	50                   	push   eax
c0018ebc:	50                   	push   eax
c0018ebd:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018ec1:	52                   	push   edx
c0018ec2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ec6:	52                   	push   edx
c0018ec7:	e8 98 78 fe ff       	call   c0000764 <strcpy>
c0018ecc:	58                   	pop    eax
c0018ecd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ed1:	52                   	push   edx
c0018ed2:	e8 0b 78 fe ff       	call   c00006e2 <strlen>
c0018ed7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	31 d2                	xor    edx,edx
c0018ee1:	eb 3a                	jmp    c0018f1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018ee3:	80 fb 40             	cmp    bl,0x40
c0018ee6:	74 06                	je     c0018eee <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018ee8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018eec:	eb 20                	jmp    c0018f0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018eee:	50                   	push   eax
c0018eef:	50                   	push   eax
c0018ef0:	55                   	push   ebp
c0018ef1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ef5:	50                   	push   eax
c0018ef6:	e8 ba 78 fe ff       	call   c00007b5 <strcmp>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	85 c0                	test   eax,eax
c0018f00:	75 dd                	jne    c0018edf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018f02:	eb e4                	jmp    c0018ee8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018f04:	8d 50 01             	lea    edx,[eax+0x1]
c0018f07:	80 f9 3d             	cmp    cl,0x3d
c0018f0a:	74 1d                	je     c0018f29 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018f0c:	89 d0                	mov    eax,edx
c0018f0e:	8a 08                	mov    cl,BYTE PTR [eax]
c0018f10:	84 c9                	test   cl,cl
c0018f12:	75 f0                	jne    c0018f04 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018f14:	eb 0f                	jmp    c0018f25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018f16:	8d 50 01             	lea    edx,[eax+0x1]
c0018f19:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018f1d:	47                   	inc    edi
c0018f1e:	89 d0                	mov    eax,edx
c0018f20:	e9 3b ff ff ff       	jmp    c0018e60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018f25:	31 c0                	xor    eax,eax
c0018f27:	eb 33                	jmp    c0018f5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018f29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f2d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018f30:	50                   	push   eax
c0018f31:	50                   	push   eax
c0018f32:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018f36:	50                   	push   eax
c0018f37:	56                   	push   esi
c0018f38:	e8 78 78 fe ff       	call   c00007b5 <strcmp>
c0018f3d:	83 c4 10             	add    esp,0x10
c0018f40:	85 c0                	test   eax,eax
c0018f42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f46:	75 97                	jne    c0018edf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018f48:	51                   	push   ecx
c0018f49:	51                   	push   ecx
c0018f4a:	52                   	push   edx
c0018f4b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018f52:	e8 0d 78 fe ff       	call   c0000764 <strcpy>
c0018f57:	83 c4 10             	add    esp,0x10
c0018f5a:	b0 01                	mov    al,0x1
c0018f5c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018f62:	5b                   	pop    ebx
c0018f63:	5e                   	pop    esi
c0018f64:	5f                   	pop    edi
c0018f65:	5d                   	pop    ebp
c0018f66:	c3                   	ret    

c0018f67 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018f67:	57                   	push   edi
c0018f68:	56                   	push   esi
c0018f69:	53                   	push   ebx
c0018f6a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f70:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018f77:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018f7e:	53                   	push   ebx
c0018f7f:	e8 5e 77 fe ff       	call   c00006e2 <strlen>
c0018f84:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f87:	89 c7                	mov    edi,eax
c0018f89:	e8 54 77 fe ff       	call   c00006e2 <strlen>
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018f95:	31 ff                	xor    edi,edi
c0018f97:	3d ff 00 00 00       	cmp    eax,0xff
c0018f9c:	0f 87 18 01 00 00    	ja     c00190ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018fa2:	51                   	push   ecx
c0018fa3:	51                   	push   ecx
c0018fa4:	56                   	push   esi
c0018fa5:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018fa9:	56                   	push   esi
c0018faa:	e8 b5 77 fe ff       	call   c0000764 <strcpy>
c0018faf:	58                   	pop    eax
c0018fb0:	5a                   	pop    edx
c0018fb1:	68 88 87 02 c0       	push   0xc0028788
c0018fb6:	56                   	push   esi
c0018fb7:	e8 5f 78 fe ff       	call   c000081b <strcat>
c0018fbc:	59                   	pop    ecx
c0018fbd:	58                   	pop    eax
c0018fbe:	53                   	push   ebx
c0018fbf:	56                   	push   esi
c0018fc0:	e8 56 78 fe ff       	call   c000081b <strcat>
c0018fc5:	58                   	pop    eax
c0018fc6:	5a                   	pop    edx
c0018fc7:	68 b6 83 02 c0       	push   0xc00283b6
c0018fcc:	56                   	push   esi
c0018fcd:	e8 49 78 fe ff       	call   c000081b <strcat>
c0018fd2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018fd9:	e8 aa 91 ff ff       	call   c0012188 <operator new(unsigned long)>
c0018fde:	83 c4 0c             	add    esp,0xc
c0018fe1:	89 c3                	mov    ebx,eax
c0018fe3:	ff 35 54 ba 02 c0    	push   DWORD PTR ds:0xc002ba54
c0018fe9:	56                   	push   esi
c0018fea:	50                   	push   eax
c0018feb:	e8 b6 97 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0018ff0:	59                   	pop    ecx
c0018ff1:	5e                   	pop    esi
c0018ff2:	6a 01                	push   0x1
c0018ff4:	53                   	push   ebx
c0018ff5:	e8 10 98 ff ff       	call   c001280a <File::open(FileOpenMode)>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	85 c0                	test   eax,eax
c0018fff:	74 08                	je     c0019009 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0019001:	83 ec 0c             	sub    esp,0xc
c0019004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019006:	53                   	push   ebx
c0019007:	eb 2e                	jmp    c0019037 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0019009:	52                   	push   edx
c001900a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001900e:	50                   	push   eax
c001900f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019013:	50                   	push   eax
c0019014:	53                   	push   ebx
c0019015:	e8 9c 9a ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001901a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	89 c1                	mov    ecx,eax
c0019023:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0019027:	75 13                	jne    c001903c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0019029:	83 ec 0c             	sub    esp,0xc
c001902c:	53                   	push   ebx
c001902d:	e8 36 98 ff ff       	call   c0012868 <File::close()>
c0019032:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019034:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019037:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001903a:	eb 7b                	jmp    c00190b7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	50                   	push   eax
c0019040:	e8 29 61 ff ff       	call   c000f16e <malloc>
c0019045:	89 c6                	mov    esi,eax
c0019047:	58                   	pop    eax
c0019048:	8b 03                	mov    eax,DWORD PTR [ebx]
c001904a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001904e:	52                   	push   edx
c001904f:	56                   	push   esi
c0019050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019054:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019058:	53                   	push   ebx
c0019059:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001905c:	83 c4 20             	add    esp,0x20
c001905f:	85 c0                	test   eax,eax
c0019061:	75 0a                	jne    c001906d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019063:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019067:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001906b:	74 18                	je     c0019085 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001906d:	83 ec 0c             	sub    esp,0xc
c0019070:	31 ff                	xor    edi,edi
c0019072:	53                   	push   ebx
c0019073:	e8 f0 97 ff ff       	call   c0012868 <File::close()>
c0019078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001907a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001907d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	eb 35                	jmp    c00190ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019085:	83 ec 0c             	sub    esp,0xc
c0019088:	53                   	push   ebx
c0019089:	e8 da 97 ff ff       	call   c0012868 <File::close()>
c001908e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019093:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019096:	83 c4 0c             	add    esp,0xc
c0019099:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00190a0:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00190a7:	56                   	push   esi
c00190a8:	e8 62 fd ff ff       	call   c0018e0f <Reg::findLineFromLoadedData(char*, char*, char*)>
c00190ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00190b0:	89 c7                	mov    edi,eax
c00190b2:	e8 c7 60 ff ff       	call   c000f17e <free>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	81 c4 10 01 00 00    	add    esp,0x110
c00190c0:	89 f8                	mov    eax,edi
c00190c2:	5b                   	pop    ebx
c00190c3:	5e                   	pop    esi
c00190c4:	5f                   	pop    edi
c00190c5:	c3                   	ret    

c00190c6 <Reg::getLine(char*, char*, char*)>:
c00190c6:	57                   	push   edi
c00190c7:	56                   	push   esi
c00190c8:	53                   	push   ebx
c00190c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00190cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00190d5:	57                   	push   edi
c00190d6:	56                   	push   esi
c00190d7:	53                   	push   ebx
c00190d8:	68 bb 83 02 c0       	push   0xc00283bb
c00190dd:	e8 85 fe ff ff       	call   c0018f67 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	84 c0                	test   al,al
c00190e7:	75 10                	jne    c00190f9 <Reg::getLine(char*, char*, char*)+0x33>
c00190e9:	57                   	push   edi
c00190ea:	56                   	push   esi
c00190eb:	53                   	push   ebx
c00190ec:	68 e0 83 02 c0       	push   0xc00283e0
c00190f1:	e8 71 fe ff ff       	call   c0018f67 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00190f6:	83 c4 10             	add    esp,0x10
c00190f9:	5b                   	pop    ebx
c00190fa:	5e                   	pop    esi
c00190fb:	5f                   	pop    edi
c00190fc:	c3                   	ret    

c00190fd <Reg::readInt(char*, char*, int*)>:
c00190fd:	55                   	push   ebp
c00190fe:	57                   	push   edi
c00190ff:	56                   	push   esi
c0019100:	53                   	push   ebx
c0019101:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019107:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001910b:	57                   	push   edi
c001910c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019113:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001911a:	e8 a7 ff ff ff       	call   c00190c6 <Reg::getLine(char*, char*, char*)>
c001911f:	83 c4 10             	add    esp,0x10
c0019122:	84 c0                	test   al,al
c0019124:	0f 84 b3 00 00 00    	je     c00191dd <Reg::readInt(char*, char*, int*)+0xe0>
c001912a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001912e:	80 fa 2b             	cmp    dl,0x2b
c0019131:	74 0c                	je     c001913f <Reg::readInt(char*, char*, int*)+0x42>
c0019133:	80 fa 2d             	cmp    dl,0x2d
c0019136:	75 0e                	jne    c0019146 <Reg::readInt(char*, char*, int*)+0x49>
c0019138:	ba 01 00 00 00       	mov    edx,0x1
c001913d:	eb 0b                	jmp    c001914a <Reg::readInt(char*, char*, int*)+0x4d>
c001913f:	ba 01 00 00 00       	mov    edx,0x1
c0019144:	eb 02                	jmp    c0019148 <Reg::readInt(char*, char*, int*)+0x4b>
c0019146:	31 d2                	xor    edx,edx
c0019148:	31 c0                	xor    eax,eax
c001914a:	be 0a 00 00 00       	mov    esi,0xa
c001914f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019154:	75 20                	jne    c0019176 <Reg::readInt(char*, char*, int*)+0x79>
c0019156:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001915a:	80 f9 78             	cmp    cl,0x78
c001915d:	75 0a                	jne    c0019169 <Reg::readInt(char*, char*, int*)+0x6c>
c001915f:	83 c2 02             	add    edx,0x2
c0019162:	be 10 00 00 00       	mov    esi,0x10
c0019167:	eb 0d                	jmp    c0019176 <Reg::readInt(char*, char*, int*)+0x79>
c0019169:	80 f9 62             	cmp    cl,0x62
c001916c:	75 08                	jne    c0019176 <Reg::readInt(char*, char*, int*)+0x79>
c001916e:	83 c2 02             	add    edx,0x2
c0019171:	be 02 00 00 00       	mov    esi,0x2
c0019176:	01 d7                	add    edi,edx
c0019178:	31 d2                	xor    edx,edx
c001917a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001917c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019180:	80 fb 0d             	cmp    bl,0xd
c0019183:	0f 94 c3             	sete   bl
c0019186:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001918b:	0f 94 c1             	sete   cl
c001918e:	08 cb                	or     bl,cl
c0019190:	75 3a                	jne    c00191cc <Reg::readInt(char*, char*, int*)+0xcf>
c0019192:	0f af d6             	imul   edx,esi
c0019195:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001919a:	83 fe 10             	cmp    esi,0x10
c001919d:	75 26                	jne    c00191c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001919f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00191a3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00191a6:	89 e9                	mov    ecx,ebp
c00191a8:	80 f9 05             	cmp    cl,0x5
c00191ab:	77 06                	ja     c00191b3 <Reg::readInt(char*, char*, int*)+0xb6>
c00191ad:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00191b1:	eb 16                	jmp    c00191c9 <Reg::readInt(char*, char*, int*)+0xcc>
c00191b3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00191b7:	83 e9 61             	sub    ecx,0x61
c00191ba:	80 f9 05             	cmp    cl,0x5
c00191bd:	77 06                	ja     c00191c5 <Reg::readInt(char*, char*, int*)+0xc8>
c00191bf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00191c3:	eb 04                	jmp    c00191c9 <Reg::readInt(char*, char*, int*)+0xcc>
c00191c5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00191c9:	47                   	inc    edi
c00191ca:	eb ae                	jmp    c001917a <Reg::readInt(char*, char*, int*)+0x7d>
c00191cc:	84 c0                	test   al,al
c00191ce:	74 02                	je     c00191d2 <Reg::readInt(char*, char*, int*)+0xd5>
c00191d0:	f7 da                	neg    edx
c00191d2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00191d9:	89 10                	mov    DWORD PTR [eax],edx
c00191db:	88 d8                	mov    al,bl
c00191dd:	81 c4 ec 00 00 00    	add    esp,0xec
c00191e3:	5b                   	pop    ebx
c00191e4:	5e                   	pop    esi
c00191e5:	5f                   	pop    edi
c00191e6:	5d                   	pop    ebp
c00191e7:	c3                   	ret    

c00191e8 <Reg::readString(char*, char*, char*, int)>:
c00191e8:	57                   	push   edi
c00191e9:	56                   	push   esi
c00191ea:	53                   	push   ebx
c00191eb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00191f1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00191f8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00191fc:	57                   	push   edi
c00191fd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019204:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001920b:	e8 b6 fe ff ff       	call   c00190c6 <Reg::getLine(char*, char*, char*)>
c0019210:	83 c4 10             	add    esp,0x10
c0019213:	89 c6                	mov    esi,eax
c0019215:	84 c0                	test   al,al
c0019217:	74 44                	je     c001925d <Reg::readString(char*, char*, char*, int)+0x75>
c0019219:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019220:	31 c0                	xor    eax,eax
c0019222:	4a                   	dec    edx
c0019223:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019226:	84 c9                	test   cl,cl
c0019228:	74 0f                	je     c0019239 <Reg::readString(char*, char*, char*, int)+0x51>
c001922a:	39 c2                	cmp    edx,eax
c001922c:	7e 0b                	jle    c0019239 <Reg::readString(char*, char*, char*, int)+0x51>
c001922e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019231:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019236:	40                   	inc    eax
c0019237:	eb ea                	jmp    c0019223 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019239:	83 ec 0c             	sub    esp,0xc
c001923c:	53                   	push   ebx
c001923d:	e8 a0 74 fe ff       	call   c00006e2 <strlen>
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001924a:	75 11                	jne    c001925d <Reg::readString(char*, char*, char*, int)+0x75>
c001924c:	83 ec 0c             	sub    esp,0xc
c001924f:	53                   	push   ebx
c0019250:	e8 8d 74 fe ff       	call   c00006e2 <strlen>
c0019255:	83 c4 10             	add    esp,0x10
c0019258:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001925d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019263:	89 f0                	mov    eax,esi
c0019265:	5b                   	pop    ebx
c0019266:	5e                   	pop    esi
c0019267:	5f                   	pop    edi
c0019268:	c3                   	ret    

c0019269 <Reg::readBool(char*, char*, bool*)>:
c0019269:	83 ec 20             	sub    esp,0x20
c001926c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019270:	50                   	push   eax
c0019271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019279:	e8 7f fe ff ff       	call   c00190fd <Reg::readInt(char*, char*, int*)>
c001927e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019283:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019287:	0f 95 02             	setne  BYTE PTR [edx]
c001928a:	83 c4 2c             	add    esp,0x2c
c001928d:	c3                   	ret    

c001928e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001928e:	53                   	push   ebx
c001928f:	83 ec 1c             	sub    esp,0x1c
c0019292:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019296:	8d 44 24 13          	lea    eax,[esp+0x13]
c001929a:	50                   	push   eax
c001929b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001929f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192a3:	e8 c1 ff ff ff       	call   c0019269 <Reg::readBool(char*, char*, bool*)>
c00192a8:	83 c4 10             	add    esp,0x10
c00192ab:	84 c0                	test   al,al
c00192ad:	74 04                	je     c00192b3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00192af:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00192b3:	88 d8                	mov    al,bl
c00192b5:	83 c4 18             	add    esp,0x18
c00192b8:	5b                   	pop    ebx
c00192b9:	c3                   	ret    

c00192ba <Reg::readIntWithDefault(char*, char*, int)>:
c00192ba:	53                   	push   ebx
c00192bb:	83 ec 1c             	sub    esp,0x1c
c00192be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00192c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00192c6:	50                   	push   eax
c00192c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192cf:	e8 29 fe ff ff       	call   c00190fd <Reg::readInt(char*, char*, int*)>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	84 c0                	test   al,al
c00192d9:	74 04                	je     c00192df <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00192db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00192df:	89 d8                	mov    eax,ebx
c00192e1:	83 c4 18             	add    esp,0x18
c00192e4:	5b                   	pop    ebx
c00192e5:	c3                   	ret    

c00192e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00192e6:	56                   	push   esi
c00192e7:	53                   	push   ebx
c00192e8:	51                   	push   ecx
c00192e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00192ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192f5:	56                   	push   esi
c00192f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192fe:	e8 e5 fe ff ff       	call   c00191e8 <Reg::readString(char*, char*, char*, int)>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	84 c0                	test   al,al
c0019308:	74 02                	je     c001930c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001930a:	89 f3                	mov    ebx,esi
c001930c:	89 d8                	mov    eax,ebx
c001930e:	5a                   	pop    edx
c001930f:	5b                   	pop    ebx
c0019310:	5e                   	pop    esi
c0019311:	c3                   	ret    

c0019312 <Sys::exit(regs*)>:
c0019312:	83 ec 18             	sub    esp,0x18
c0019315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019319:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001931c:	e8 1f 31 00 00       	call   c001c440 <terminateTask(int)>
c0019321:	83 c8 ff             	or     eax,0xffffffff
c0019324:	83 c4 1c             	add    esp,0x1c
c0019327:	89 c2                	mov    edx,eax
c0019329:	c3                   	ret    

c001932a <Sys::loadDLL(regs*)>:
c001932a:	56                   	push   esi
c001932b:	53                   	push   ebx
c001932c:	31 d2                	xor    edx,edx
c001932e:	51                   	push   ecx
c001932f:	b8 01 00 00 00       	mov    eax,0x1
c0019334:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019338:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001933c:	74 7d                	je     c00193bb <Sys::loadDLL(regs*)+0x91>
c001933e:	83 ec 0c             	sub    esp,0xc
c0019341:	68 14 01 00 00       	push   0x114
c0019346:	e8 3d 8e ff ff       	call   c0012188 <operator new(unsigned long)>
c001934b:	83 c4 0c             	add    esp,0xc
c001934e:	89 c3                	mov    ebx,eax
c0019350:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019355:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019358:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001935b:	53                   	push   ebx
c001935c:	e8 45 94 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019361:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019364:	e8 0f 97 ff ff       	call   c0012a78 <File::exists()>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	84 c0                	test   al,al
c001936e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019370:	75 11                	jne    c0019383 <Sys::loadDLL(regs*)+0x59>
c0019372:	83 ec 0c             	sub    esp,0xc
c0019375:	53                   	push   ebx
c0019376:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	b8 03 00 00 00       	mov    eax,0x3
c0019381:	eb 36                	jmp    c00193b9 <Sys::loadDLL(regs*)+0x8f>
c0019383:	83 ec 0c             	sub    esp,0xc
c0019386:	53                   	push   ebx
c0019387:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001938a:	58                   	pop    eax
c001938b:	5a                   	pop    edx
c001938c:	6a 00                	push   0x0
c001938e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019391:	e8 c4 20 00 00       	call   c001b45a <Thr::loadDLL(char const*, bool)>
c0019396:	83 c4 10             	add    esp,0x10
c0019399:	89 c1                	mov    ecx,eax
c001939b:	31 d2                	xor    edx,edx
c001939d:	b8 04 00 00 00       	mov    eax,0x4
c00193a2:	85 c9                	test   ecx,ecx
c00193a4:	74 15                	je     c00193bb <Sys::loadDLL(regs*)+0x91>
c00193a6:	53                   	push   ebx
c00193a7:	53                   	push   ebx
c00193a8:	ff 35 c8 a5 02 c0    	push   DWORD PTR ds:0xc002a5c8
c00193ae:	51                   	push   ecx
c00193af:	e8 6c 22 00 00       	call   c001b620 <Thr::executeDLL(unsigned long, void*)>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	31 c0                	xor    eax,eax
c00193b9:	31 d2                	xor    edx,edx
c00193bb:	59                   	pop    ecx
c00193bc:	5b                   	pop    ebx
c00193bd:	5e                   	pop    esi
c00193be:	c3                   	ret    

c00193bf <Sys::read(regs*)>:
c00193bf:	57                   	push   edi
c00193c0:	56                   	push   esi
c00193c1:	53                   	push   ebx
c00193c2:	83 ec 10             	sub    esp,0x10
c00193c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00193cc:	83 f8 02             	cmp    eax,0x2
c00193cf:	77 10                	ja     c00193e1 <Sys::read(regs*)+0x22>
c00193d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193d9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193df:	eb 0e                	jmp    c00193ef <Sys::read(regs*)+0x30>
c00193e1:	83 ec 0c             	sub    esp,0xc
c00193e4:	50                   	push   eax
c00193e5:	e8 65 7d ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	89 c1                	mov    ecx,eax
c00193ef:	83 c8 ff             	or     eax,0xffffffff
c00193f2:	85 c9                	test   ecx,ecx
c00193f4:	89 c2                	mov    edx,eax
c00193f6:	74 28                	je     c0019420 <Sys::read(regs*)+0x61>
c00193f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019400:	31 ff                	xor    edi,edi
c0019402:	83 ec 0c             	sub    esp,0xc
c0019405:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019407:	8d 54 24 18          	lea    edx,[esp+0x18]
c001940b:	52                   	push   edx
c001940c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001940f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019412:	57                   	push   edi
c0019413:	56                   	push   esi
c0019414:	51                   	push   ecx
c0019415:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001941c:	83 c4 20             	add    esp,0x20
c001941f:	99                   	cdq    
c0019420:	83 c4 10             	add    esp,0x10
c0019423:	5b                   	pop    ebx
c0019424:	5e                   	pop    esi
c0019425:	5f                   	pop    edi
c0019426:	c3                   	ret    

c0019427 <Sys::sbrk(regs*)>:
c0019427:	56                   	push   esi
c0019428:	53                   	push   ebx
c0019429:	50                   	push   eax
c001942a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001942f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019433:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019436:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019439:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001943f:	85 db                	test   ebx,ebx
c0019441:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019444:	74 02                	je     c0019448 <Sys::sbrk(regs*)+0x21>
c0019446:	79 06                	jns    c001944e <Sys::sbrk(regs*)+0x27>
c0019448:	89 f0                	mov    eax,esi
c001944a:	31 d2                	xor    edx,edx
c001944c:	eb 2a                	jmp    c0019478 <Sys::sbrk(regs*)+0x51>
c001944e:	83 c8 ff             	or     eax,0xffffffff
c0019451:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019457:	89 c2                	mov    edx,eax
c0019459:	77 1d                	ja     c0019478 <Sys::sbrk(regs*)+0x51>
c001945b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019461:	50                   	push   eax
c0019462:	c1 ea 0c             	shr    edx,0xc
c0019465:	68 07 04 00 00       	push   0x407
c001946a:	52                   	push   edx
c001946b:	51                   	push   ecx
c001946c:	e8 07 86 ff ff       	call   c0011a78 <VAS::allocatePages(int, int)>
c0019471:	89 f0                	mov    eax,esi
c0019473:	31 d2                	xor    edx,edx
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	59                   	pop    ecx
c0019479:	5b                   	pop    ebx
c001947a:	5e                   	pop    esi
c001947b:	c3                   	ret    

c001947c <Sys::write(regs*)>:
c001947c:	57                   	push   edi
c001947d:	56                   	push   esi
c001947e:	53                   	push   ebx
c001947f:	83 ec 10             	sub    esp,0x10
c0019482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019486:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019489:	83 f8 02             	cmp    eax,0x2
c001948c:	77 10                	ja     c001949e <Sys::write(regs*)+0x22>
c001948e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019493:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019496:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001949c:	eb 0e                	jmp    c00194ac <Sys::write(regs*)+0x30>
c001949e:	83 ec 0c             	sub    esp,0xc
c00194a1:	50                   	push   eax
c00194a2:	e8 a8 7c ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00194a7:	83 c4 10             	add    esp,0x10
c00194aa:	89 c1                	mov    ecx,eax
c00194ac:	83 c8 ff             	or     eax,0xffffffff
c00194af:	85 c9                	test   ecx,ecx
c00194b1:	89 c2                	mov    edx,eax
c00194b3:	74 28                	je     c00194dd <Sys::write(regs*)+0x61>
c00194b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00194bd:	31 ff                	xor    edi,edi
c00194bf:	83 ec 0c             	sub    esp,0xc
c00194c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00194c4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00194c8:	52                   	push   edx
c00194c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00194cc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00194cf:	57                   	push   edi
c00194d0:	56                   	push   esi
c00194d1:	51                   	push   ecx
c00194d2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00194d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194d9:	83 c4 20             	add    esp,0x20
c00194dc:	99                   	cdq    
c00194dd:	83 c4 10             	add    esp,0x10
c00194e0:	5b                   	pop    ebx
c00194e1:	5e                   	pop    esi
c00194e2:	5f                   	pop    edi
c00194e3:	c3                   	ret    

c00194e4 <Sys::yield(regs*)>:
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	e8 3e 25 00 00       	call   c001ba2a <lockScheduler()>
c00194ec:	e8 6d 28 00 00       	call   c001bd5e <schedule()>
c00194f1:	e8 36 25 00 00       	call   c001ba2c <unlockScheduler()>
c00194f6:	31 c0                	xor    eax,eax
c00194f8:	31 d2                	xor    edx,edx
c00194fa:	83 c4 0c             	add    esp,0xc
c00194fd:	c3                   	ret    

c00194fe <sysCallGetPID(regs*)>:
c00194fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019503:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019506:	8b 00                	mov    eax,DWORD PTR [eax]
c0019508:	99                   	cdq    
c0019509:	c3                   	ret    

c001950a <sysCallSeekDir(regs*)>:
c001950a:	31 c0                	xor    eax,eax
c001950c:	31 d2                	xor    edx,edx
c001950e:	c3                   	ret    

c001950f <sysCallTellDir(regs*)>:
c001950f:	31 c0                	xor    eax,eax
c0019511:	31 d2                	xor    edx,edx
c0019513:	c3                   	ret    

c0019514 <sysCallVerify(regs*)>:
c0019514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019518:	31 d2                	xor    edx,edx
c001951a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001951d:	c3                   	ret    

c001951e <sysCallFork(regs*)>:
c001951e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019528:	c3                   	ret    

c0019529 <sysCallExecve(regs*)>:
c0019529:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001952e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019533:	c3                   	ret    

c0019534 <sysCallGetArgc(regs*)>:
c0019534:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019539:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001953c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019542:	99                   	cdq    
c0019543:	c3                   	ret    

c0019544 <sysFormatDisk(regs*)>:
c0019544:	56                   	push   esi
c0019545:	53                   	push   ebx
c0019546:	53                   	push   ebx
c0019547:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001954b:	8b 1d 28 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a728
c0019551:	eb 25                	jmp    c0019578 <sysFormatDisk(regs*)+0x34>
c0019553:	83 ec 0c             	sub    esp,0xc
c0019556:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019559:	8b 13                	mov    edx,DWORD PTR [ebx]
c001955b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001955e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019561:	50                   	push   eax
c0019562:	ff 34 85 c0 ab 02 c0 	push   DWORD PTR [eax*4-0x3ffd5440]
c0019569:	53                   	push   ebx
c001956a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001956d:	83 c4 20             	add    esp,0x20
c0019570:	83 f8 08             	cmp    eax,0x8
c0019573:	75 12                	jne    c0019587 <sysFormatDisk(regs*)+0x43>
c0019575:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019578:	85 db                	test   ebx,ebx
c001957a:	75 d7                	jne    c0019553 <sysFormatDisk(regs*)+0xf>
c001957c:	59                   	pop    ecx
c001957d:	b8 03 00 00 00       	mov    eax,0x3
c0019582:	31 d2                	xor    edx,edx
c0019584:	5b                   	pop    ebx
c0019585:	5e                   	pop    esi
c0019586:	c3                   	ret    
c0019587:	85 c0                	test   eax,eax
c0019589:	74 1b                	je     c00195a6 <sysFormatDisk(regs*)+0x62>
c001958b:	83 f8 09             	cmp    eax,0x9
c001958e:	74 0b                	je     c001959b <sysFormatDisk(regs*)+0x57>
c0019590:	59                   	pop    ecx
c0019591:	b8 02 00 00 00       	mov    eax,0x2
c0019596:	31 d2                	xor    edx,edx
c0019598:	5b                   	pop    ebx
c0019599:	5e                   	pop    esi
c001959a:	c3                   	ret    
c001959b:	59                   	pop    ecx
c001959c:	b8 01 00 00 00       	mov    eax,0x1
c00195a1:	31 d2                	xor    edx,edx
c00195a3:	5b                   	pop    ebx
c00195a4:	5e                   	pop    esi
c00195a5:	c3                   	ret    
c00195a6:	59                   	pop    ecx
c00195a7:	31 c0                	xor    eax,eax
c00195a9:	31 d2                	xor    edx,edx
c00195ab:	5b                   	pop    ebx
c00195ac:	5e                   	pop    esi
c00195ad:	c3                   	ret    

c00195ae <sysSetDiskVolumeLabel(regs*)>:
c00195ae:	56                   	push   esi
c00195af:	53                   	push   ebx
c00195b0:	53                   	push   ebx
c00195b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195b5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00195b8:	83 f8 19             	cmp    eax,0x19
c00195bb:	77 29                	ja     c00195e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195bd:	8b 0c 85 c0 ab 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5440]
c00195c4:	85 c9                	test   ecx,ecx
c00195c6:	74 1e                	je     c00195e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195c8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00195cb:	85 d2                	test   edx,edx
c00195cd:	74 17                	je     c00195e6 <sysSetDiskVolumeLabel(regs*)+0x38>
c00195cf:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00195d5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00195d7:	52                   	push   edx
c00195d8:	50                   	push   eax
c00195d9:	51                   	push   ecx
c00195da:	53                   	push   ebx
c00195db:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	99                   	cdq    
c00195e2:	59                   	pop    ecx
c00195e3:	5b                   	pop    ebx
c00195e4:	5e                   	pop    esi
c00195e5:	c3                   	ret    
c00195e6:	59                   	pop    ecx
c00195e7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00195ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00195f1:	5b                   	pop    ebx
c00195f2:	5e                   	pop    esi
c00195f3:	c3                   	ret    

c00195f4 <sysGetDiskVolumeLabel(regs*)>:
c00195f4:	57                   	push   edi
c00195f5:	56                   	push   esi
c00195f6:	53                   	push   ebx
c00195f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00195fe:	83 fa 19             	cmp    edx,0x19
c0019601:	77 34                	ja     c0019637 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019603:	8b 0c 95 c0 ab 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5440]
c001960a:	85 c9                	test   ecx,ecx
c001960c:	74 29                	je     c0019637 <sysGetDiskVolumeLabel(regs*)+0x43>
c001960e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019611:	85 db                	test   ebx,ebx
c0019613:	74 22                	je     c0019637 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019615:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019618:	85 c0                	test   eax,eax
c001961a:	74 1b                	je     c0019637 <sysGetDiskVolumeLabel(regs*)+0x43>
c001961c:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019622:	83 ec 0c             	sub    esp,0xc
c0019625:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019627:	50                   	push   eax
c0019628:	53                   	push   ebx
c0019629:	52                   	push   edx
c001962a:	51                   	push   ecx
c001962b:	56                   	push   esi
c001962c:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001962f:	83 c4 20             	add    esp,0x20
c0019632:	99                   	cdq    
c0019633:	5b                   	pop    ebx
c0019634:	5e                   	pop    esi
c0019635:	5f                   	pop    edi
c0019636:	c3                   	ret    
c0019637:	5b                   	pop    ebx
c0019638:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001963d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019642:	5e                   	pop    esi
c0019643:	5f                   	pop    edi
c0019644:	c3                   	ret    

c0019645 <sysShutdown(regs*)>:
c0019645:	83 ec 0c             	sub    esp,0xc
c0019648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001964c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001964f:	85 c0                	test   eax,eax
c0019651:	74 18                	je     c001966b <sysShutdown(regs*)+0x26>
c0019653:	83 f8 01             	cmp    eax,0x1
c0019656:	74 38                	je     c0019690 <sysShutdown(regs*)+0x4b>
c0019658:	83 f8 02             	cmp    eax,0x2
c001965b:	74 24                	je     c0019681 <sysShutdown(regs*)+0x3c>
c001965d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019662:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019667:	83 c4 0c             	add    esp,0xc
c001966a:	c3                   	ret    
c001966b:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0019670:	8b 10                	mov    edx,DWORD PTR [eax]
c0019672:	6a 00                	push   0x0
c0019674:	6a 00                	push   0x0
c0019676:	6a 00                	push   0x0
c0019678:	50                   	push   eax
c0019679:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	eb dc                	jmp    c001965d <sysShutdown(regs*)+0x18>
c0019681:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0019686:	8b 10                	mov    edx,DWORD PTR [eax]
c0019688:	6a 00                	push   0x0
c001968a:	6a 00                	push   0x0
c001968c:	6a 01                	push   0x1
c001968e:	eb e8                	jmp    c0019678 <sysShutdown(regs*)+0x33>
c0019690:	a1 40 ac 02 c0       	mov    eax,ds:0xc002ac40
c0019695:	85 c0                	test   eax,eax
c0019697:	74 02                	je     c001969b <sysShutdown(regs*)+0x56>
c0019699:	ff d0                	call   eax
c001969b:	31 c0                	xor    eax,eax
c001969d:	31 d2                	xor    edx,edx
c001969f:	83 c4 0c             	add    esp,0xc
c00196a2:	c3                   	ret    

c00196a3 <sysCallGetCwd(regs*)>:
c00196a3:	83 ec 10             	sub    esp,0x10
c00196a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196aa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00196ad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00196b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196b5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00196b8:	e8 5a 94 ff ff       	call   c0012b17 <getcwd(Process*, char*, int)>
c00196bd:	83 c4 1c             	add    esp,0x1c
c00196c0:	99                   	cdq    
c00196c1:	c3                   	ret    

c00196c2 <sysCallSetCwd(regs*)>:
c00196c2:	83 ec 14             	sub    esp,0x14
c00196c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196c9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00196cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00196d4:	e8 68 94 ff ff       	call   c0012b41 <setcwd(Process*, char*)>
c00196d9:	83 c4 1c             	add    esp,0x1c
c00196dc:	99                   	cdq    
c00196dd:	c3                   	ret    

c00196de <sysCallRealpath(regs*)>:
c00196de:	83 ec 0c             	sub    esp,0xc
c00196e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00196e8:	85 d2                	test   edx,edx
c00196ea:	74 07                	je     c00196f3 <sysCallRealpath(regs*)+0x15>
c00196ec:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00196ef:	85 c0                	test   eax,eax
c00196f1:	75 0b                	jne    c00196fe <sysCallRealpath(regs*)+0x20>
c00196f3:	b8 01 00 00 00       	mov    eax,0x1
c00196f8:	31 d2                	xor    edx,edx
c00196fa:	83 c4 0c             	add    esp,0xc
c00196fd:	c3                   	ret    
c00196fe:	51                   	push   ecx
c00196ff:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019705:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019708:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001970e:	51                   	push   ecx
c001970f:	52                   	push   edx
c0019710:	50                   	push   eax
c0019711:	e8 e6 8e ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c0019716:	83 c4 10             	add    esp,0x10
c0019719:	31 c0                	xor    eax,eax
c001971b:	31 d2                	xor    edx,edx
c001971d:	83 c4 0c             	add    esp,0xc
c0019720:	c3                   	ret    

c0019721 <sysCallReadDir(regs*)>:
c0019721:	53                   	push   ebx
c0019722:	83 ec 18             	sub    esp,0x18
c0019725:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019729:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001972c:	83 f8 02             	cmp    eax,0x2
c001972f:	76 53                	jbe    c0019784 <sysCallReadDir(regs*)+0x63>
c0019731:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019734:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001973a:	77 4f                	ja     c001978b <sysCallReadDir(regs*)+0x6a>
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	50                   	push   eax
c0019740:	e8 0a 7a ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	85 c0                	test   eax,eax
c001974a:	74 50                	je     c001979c <sysCallReadDir(regs*)+0x7b>
c001974c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019754:	83 ec 0c             	sub    esp,0xc
c0019757:	8b 10                	mov    edx,DWORD PTR [eax]
c0019759:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001975d:	51                   	push   ecx
c001975e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019761:	6a 00                	push   0x0
c0019763:	68 10 01 00 00       	push   0x110
c0019768:	50                   	push   eax
c0019769:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001976c:	83 c4 20             	add    esp,0x20
c001976f:	85 c0                	test   eax,eax
c0019771:	74 38                	je     c00197ab <sysCallReadDir(regs*)+0x8a>
c0019773:	83 f8 07             	cmp    eax,0x7
c0019776:	74 0c                	je     c0019784 <sysCallReadDir(regs*)+0x63>
c0019778:	b8 02 00 00 00       	mov    eax,0x2
c001977d:	31 d2                	xor    edx,edx
c001977f:	83 c4 18             	add    esp,0x18
c0019782:	5b                   	pop    ebx
c0019783:	c3                   	ret    
c0019784:	b8 01 00 00 00       	mov    eax,0x1
c0019789:	eb f2                	jmp    c001977d <sysCallReadDir(regs*)+0x5c>
c001978b:	83 ec 08             	sub    esp,0x8
c001978e:	52                   	push   edx
c001978f:	68 fc 83 02 c0       	push   0xc00283fc
c0019794:	e8 de 8a ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019799:	83 c4 10             	add    esp,0x10
c001979c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197a1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197a6:	83 c4 18             	add    esp,0x18
c00197a9:	5b                   	pop    ebx
c00197aa:	c3                   	ret    
c00197ab:	31 c0                	xor    eax,eax
c00197ad:	eb ce                	jmp    c001977d <sysCallReadDir(regs*)+0x5c>

c00197af <sysCallIsATTY(regs*)>:
c00197af:	83 ec 0c             	sub    esp,0xc
c00197b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00197b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00197b9:	83 f8 02             	cmp    eax,0x2
c00197bc:	76 07                	jbe    c00197c5 <sysCallIsATTY(regs*)+0x16>
c00197be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00197c3:	75 26                	jne    c00197eb <sysCallIsATTY(regs*)+0x3c>
c00197c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00197ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00197cd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00197d3:	85 c0                	test   eax,eax
c00197d5:	74 24                	je     c00197fb <sysCallIsATTY(regs*)+0x4c>
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	8b 10                	mov    edx,DWORD PTR [eax]
c00197dc:	50                   	push   eax
c00197dd:	ff 12                	call   DWORD PTR [edx]
c00197df:	31 d2                	xor    edx,edx
c00197e1:	0f b6 c0             	movzx  eax,al
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	83 c4 0c             	add    esp,0xc
c00197ea:	c3                   	ret    
c00197eb:	83 ec 0c             	sub    esp,0xc
c00197ee:	50                   	push   eax
c00197ef:	e8 5b 79 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00197f4:	83 c4 10             	add    esp,0x10
c00197f7:	85 c0                	test   eax,eax
c00197f9:	75 dc                	jne    c00197d7 <sysCallIsATTY(regs*)+0x28>
c00197fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019800:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019805:	83 c4 0c             	add    esp,0xc
c0019808:	c3                   	ret    

c0019809 <sysCallSeek(regs*)>:
c0019809:	53                   	push   ebx
c001980a:	83 ec 08             	sub    esp,0x8
c001980d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019811:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019814:	83 f8 02             	cmp    eax,0x2
c0019817:	76 4a                	jbe    c0019863 <sysCallSeek(regs*)+0x5a>
c0019819:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001981e:	77 32                	ja     c0019852 <sysCallSeek(regs*)+0x49>
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	50                   	push   eax
c0019824:	e8 26 79 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019829:	83 c4 0c             	add    esp,0xc
c001982c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001982f:	31 db                	xor    ebx,ebx
c0019831:	53                   	push   ebx
c0019832:	51                   	push   ecx
c0019833:	50                   	push   eax
c0019834:	e8 8f 90 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c0019839:	83 c4 10             	add    esp,0x10
c001983c:	85 c0                	test   eax,eax
c001983e:	0f 95 c0             	setne  al
c0019841:	31 d2                	xor    edx,edx
c0019843:	0f b6 c0             	movzx  eax,al
c0019846:	f7 d8                	neg    eax
c0019848:	83 d2 00             	adc    edx,0x0
c001984b:	83 c4 08             	add    esp,0x8
c001984e:	f7 da                	neg    edx
c0019850:	5b                   	pop    ebx
c0019851:	c3                   	ret    
c0019852:	83 ec 08             	sub    esp,0x8
c0019855:	50                   	push   eax
c0019856:	68 b8 84 02 c0       	push   0xc00284b8
c001985b:	e8 17 8a ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019868:	ba ff ff ff ff       	mov    edx,0xffffffff
c001986d:	83 c4 08             	add    esp,0x8
c0019870:	5b                   	pop    ebx
c0019871:	c3                   	ret    

c0019872 <sysCallTell(regs*)>:
c0019872:	53                   	push   ebx
c0019873:	83 ec 08             	sub    esp,0x8
c0019876:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001987a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001987d:	83 f8 02             	cmp    eax,0x2
c0019880:	76 5e                	jbe    c00198e0 <sysCallTell(regs*)+0x6e>
c0019882:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019887:	77 2d                	ja     c00198b6 <sysCallTell(regs*)+0x44>
c0019889:	83 ec 0c             	sub    esp,0xc
c001988c:	50                   	push   eax
c001988d:	e8 bd 78 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019892:	5a                   	pop    edx
c0019893:	59                   	pop    ecx
c0019894:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019897:	50                   	push   eax
c0019898:	e8 81 90 ff ff       	call   c001291e <File::tell(unsigned long long*)>
c001989d:	83 c4 10             	add    esp,0x10
c00198a0:	85 c0                	test   eax,eax
c00198a2:	0f 95 c0             	setne  al
c00198a5:	31 d2                	xor    edx,edx
c00198a7:	0f b6 c0             	movzx  eax,al
c00198aa:	f7 d8                	neg    eax
c00198ac:	83 d2 00             	adc    edx,0x0
c00198af:	83 c4 08             	add    esp,0x8
c00198b2:	f7 da                	neg    edx
c00198b4:	5b                   	pop    ebx
c00198b5:	c3                   	ret    
c00198b6:	83 ec 08             	sub    esp,0x8
c00198b9:	50                   	push   eax
c00198ba:	68 d2 84 02 c0       	push   0xc00284d2
c00198bf:	e8 b3 89 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00198c4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00198c7:	83 c4 10             	add    esp,0x10
c00198ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00198d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198d7:	31 d2                	xor    edx,edx
c00198d9:	31 c0                	xor    eax,eax
c00198db:	83 c4 08             	add    esp,0x8
c00198de:	5b                   	pop    ebx
c00198df:	c3                   	ret    
c00198e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198ea:	83 c4 08             	add    esp,0x8
c00198ed:	5b                   	pop    ebx
c00198ee:	c3                   	ret    

c00198ef <sysCallSizeFromFilename(regs*)>:
c00198ef:	57                   	push   edi
c00198f0:	56                   	push   esi
c00198f1:	53                   	push   ebx
c00198f2:	83 ec 10             	sub    esp,0x10
c00198f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198f9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00198fc:	83 fb 02             	cmp    ebx,0x2
c00198ff:	0f 86 8a 00 00 00    	jbe    c001998f <sysCallSizeFromFilename(regs*)+0xa0>
c0019905:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001990b:	77 56                	ja     c0019963 <sysCallSizeFromFilename(regs*)+0x74>
c001990d:	83 ec 0c             	sub    esp,0xc
c0019910:	68 14 01 00 00       	push   0x114
c0019915:	e8 6e 88 ff ff       	call   c0012188 <operator new(unsigned long)>
c001991a:	83 c4 0c             	add    esp,0xc
c001991d:	89 c7                	mov    edi,eax
c001991f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019924:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019927:	53                   	push   ebx
c0019928:	57                   	push   edi
c0019929:	e8 78 8e ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001992e:	83 c4 0c             	add    esp,0xc
c0019931:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019935:	50                   	push   eax
c0019936:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019939:	57                   	push   edi
c001993a:	e8 77 91 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001993f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019942:	89 c3                	mov    ebx,eax
c0019944:	8b 07                	mov    eax,DWORD PTR [edi]
c0019946:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	31 c0                	xor    eax,eax
c001994e:	85 db                	test   ebx,ebx
c0019950:	0f 95 c0             	setne  al
c0019953:	31 d2                	xor    edx,edx
c0019955:	f7 d8                	neg    eax
c0019957:	83 d2 00             	adc    edx,0x0
c001995a:	83 c4 10             	add    esp,0x10
c001995d:	f7 da                	neg    edx
c001995f:	5b                   	pop    ebx
c0019960:	5e                   	pop    esi
c0019961:	5f                   	pop    edi
c0019962:	c3                   	ret    
c0019963:	83 ec 08             	sub    esp,0x8
c0019966:	53                   	push   ebx
c0019967:	68 ec 84 02 c0       	push   0xc00284ec
c001996c:	e8 06 89 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019971:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001997d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019984:	31 d2                	xor    edx,edx
c0019986:	83 c4 10             	add    esp,0x10
c0019989:	31 c0                	xor    eax,eax
c001998b:	5b                   	pop    ebx
c001998c:	5e                   	pop    esi
c001998d:	5f                   	pop    edi
c001998e:	c3                   	ret    
c001998f:	83 c4 10             	add    esp,0x10
c0019992:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019997:	5b                   	pop    ebx
c0019998:	ba ff ff ff ff       	mov    edx,0xffffffff
c001999d:	5e                   	pop    esi
c001999e:	5f                   	pop    edi
c001999f:	c3                   	ret    

c00199a0 <sysCallSize(regs*)>:
c00199a0:	53                   	push   ebx
c00199a1:	83 ec 18             	sub    esp,0x18
c00199a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00199a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00199ab:	83 f8 02             	cmp    eax,0x2
c00199ae:	76 64                	jbe    c0019a14 <sysCallSize(regs*)+0x74>
c00199b0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00199b5:	77 33                	ja     c00199ea <sysCallSize(regs*)+0x4a>
c00199b7:	83 ec 0c             	sub    esp,0xc
c00199ba:	50                   	push   eax
c00199bb:	e8 8f 77 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c00199c0:	83 c4 0c             	add    esp,0xc
c00199c3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00199c7:	52                   	push   edx
c00199c8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00199cb:	50                   	push   eax
c00199cc:	e8 e5 90 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c00199d1:	83 c4 10             	add    esp,0x10
c00199d4:	85 c0                	test   eax,eax
c00199d6:	0f 95 c0             	setne  al
c00199d9:	31 d2                	xor    edx,edx
c00199db:	0f b6 c0             	movzx  eax,al
c00199de:	f7 d8                	neg    eax
c00199e0:	83 d2 00             	adc    edx,0x0
c00199e3:	83 c4 18             	add    esp,0x18
c00199e6:	f7 da                	neg    edx
c00199e8:	5b                   	pop    ebx
c00199e9:	c3                   	ret    
c00199ea:	83 ec 08             	sub    esp,0x8
c00199ed:	50                   	push   eax
c00199ee:	68 ec 84 02 c0       	push   0xc00284ec
c00199f3:	e8 7f 88 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00199f8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019a04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a0b:	31 d2                	xor    edx,edx
c0019a0d:	31 c0                	xor    eax,eax
c0019a0f:	83 c4 18             	add    esp,0x18
c0019a12:	5b                   	pop    ebx
c0019a13:	c3                   	ret    
c0019a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a1e:	83 c4 18             	add    esp,0x18
c0019a21:	5b                   	pop    ebx
c0019a22:	c3                   	ret    

c0019a23 <sysCallClose(regs*)>:
c0019a23:	53                   	push   ebx
c0019a24:	83 ec 08             	sub    esp,0x8
c0019a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a2e:	83 f8 02             	cmp    eax,0x2
c0019a31:	76 50                	jbe    c0019a83 <sysCallClose(regs*)+0x60>
c0019a33:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019a38:	74 58                	je     c0019a92 <sysCallClose(regs*)+0x6f>
c0019a3a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a3f:	74 60                	je     c0019aa1 <sysCallClose(regs*)+0x7e>
c0019a41:	77 2f                	ja     c0019a72 <sysCallClose(regs*)+0x4f>
c0019a43:	83 ec 0c             	sub    esp,0xc
c0019a46:	50                   	push   eax
c0019a47:	e8 03 77 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019a4c:	89 c3                	mov    ebx,eax
c0019a4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a51:	e8 12 8e ff ff       	call   c0012868 <File::close()>
c0019a56:	83 c4 10             	add    esp,0x10
c0019a59:	85 db                	test   ebx,ebx
c0019a5b:	74 0c                	je     c0019a69 <sysCallClose(regs*)+0x46>
c0019a5d:	83 ec 0c             	sub    esp,0xc
c0019a60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a62:	53                   	push   ebx
c0019a63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a66:	83 c4 10             	add    esp,0x10
c0019a69:	31 c0                	xor    eax,eax
c0019a6b:	31 d2                	xor    edx,edx
c0019a6d:	83 c4 08             	add    esp,0x8
c0019a70:	5b                   	pop    ebx
c0019a71:	c3                   	ret    
c0019a72:	83 ec 08             	sub    esp,0x8
c0019a75:	50                   	push   eax
c0019a76:	68 20 84 02 c0       	push   0xc0028420
c0019a7b:	e8 f7 87 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019a80:	83 c4 10             	add    esp,0x10
c0019a83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a88:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a8d:	83 c4 08             	add    esp,0x8
c0019a90:	5b                   	pop    ebx
c0019a91:	c3                   	ret    
c0019a92:	83 ec 0c             	sub    esp,0xc
c0019a95:	68 07 85 02 c0       	push   0xc0028507
c0019a9a:	e8 d8 87 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019a9f:	eb c5                	jmp    c0019a66 <sysCallClose(regs*)+0x43>
c0019aa1:	83 ec 0c             	sub    esp,0xc
c0019aa4:	68 15 85 02 c0       	push   0xc0028515
c0019aa9:	eb ef                	jmp    c0019a9a <sysCallClose(regs*)+0x77>

c0019aab <sysCallOpenDir(regs*)>:
c0019aab:	56                   	push   esi
c0019aac:	53                   	push   ebx
c0019aad:	53                   	push   ebx
c0019aae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ab2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019ab5:	85 f6                	test   esi,esi
c0019ab7:	74 51                	je     c0019b0a <sysCallOpenDir(regs*)+0x5f>
c0019ab9:	83 ec 0c             	sub    esp,0xc
c0019abc:	68 14 01 00 00       	push   0x114
c0019ac1:	e8 c2 86 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019ac6:	83 c4 0c             	add    esp,0xc
c0019ac9:	89 c6                	mov    esi,eax
c0019acb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ad0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ad3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ad6:	56                   	push   esi
c0019ad7:	e8 8c 91 ff ff       	call   c0012c68 <Directory::Directory(char const*, Process*)>
c0019adc:	89 34 24             	mov    DWORD PTR [esp],esi
c0019adf:	e8 e8 91 ff ff       	call   c0012ccc <Directory::open()>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	85 c0                	test   eax,eax
c0019ae9:	75 1f                	jne    c0019b0a <sysCallOpenDir(regs*)+0x5f>
c0019aeb:	83 ec 0c             	sub    esp,0xc
c0019aee:	56                   	push   esi
c0019aef:	e8 a6 73 ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c0019af4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	89 02                	mov    DWORD PTR [edx],eax
c0019afc:	c1 f8 1f             	sar    eax,0x1f
c0019aff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019b02:	31 c0                	xor    eax,eax
c0019b04:	59                   	pop    ecx
c0019b05:	31 d2                	xor    edx,edx
c0019b07:	5b                   	pop    ebx
c0019b08:	5e                   	pop    esi
c0019b09:	c3                   	ret    
c0019b0a:	59                   	pop    ecx
c0019b0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b15:	5b                   	pop    ebx
c0019b16:	5e                   	pop    esi
c0019b17:	c3                   	ret    

c0019b18 <sysCallMakeDir(regs*)>:
c0019b18:	56                   	push   esi
c0019b19:	53                   	push   ebx
c0019b1a:	83 ec 10             	sub    esp,0x10
c0019b1d:	68 14 01 00 00       	push   0x114
c0019b22:	e8 61 86 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019b27:	83 c4 0c             	add    esp,0xc
c0019b2a:	89 c3                	mov    ebx,eax
c0019b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019b3b:	53                   	push   ebx
c0019b3c:	e8 27 91 ff ff       	call   c0012c68 <Directory::Directory(char const*, Process*)>
c0019b41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b44:	e8 63 93 ff ff       	call   c0012eac <Directory::create()>
c0019b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b4c:	89 c6                	mov    esi,eax
c0019b4e:	e8 d5 91 ff ff       	call   c0012d28 <Directory::close()>
c0019b53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b5b:	31 c0                	xor    eax,eax
c0019b5d:	85 f6                	test   esi,esi
c0019b5f:	0f 95 c0             	setne  al
c0019b62:	31 d2                	xor    edx,edx
c0019b64:	f7 d8                	neg    eax
c0019b66:	83 d2 00             	adc    edx,0x0
c0019b69:	83 c4 14             	add    esp,0x14
c0019b6c:	f7 da                	neg    edx
c0019b6e:	5b                   	pop    ebx
c0019b6f:	5e                   	pop    esi
c0019b70:	c3                   	ret    

c0019b71 <sysCallCloseDir(regs*)>:
c0019b71:	53                   	push   ebx
c0019b72:	83 ec 08             	sub    esp,0x8
c0019b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019b7c:	83 f8 02             	cmp    eax,0x2
c0019b7f:	76 47                	jbe    c0019bc8 <sysCallCloseDir(regs*)+0x57>
c0019b81:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b86:	77 2f                	ja     c0019bb7 <sysCallCloseDir(regs*)+0x46>
c0019b88:	83 ec 0c             	sub    esp,0xc
c0019b8b:	50                   	push   eax
c0019b8c:	e8 be 75 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019b91:	89 c3                	mov    ebx,eax
c0019b93:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b96:	e8 8d 91 ff ff       	call   c0012d28 <Directory::close()>
c0019b9b:	83 c4 10             	add    esp,0x10
c0019b9e:	85 db                	test   ebx,ebx
c0019ba0:	74 0c                	je     c0019bae <sysCallCloseDir(regs*)+0x3d>
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ba7:	53                   	push   ebx
c0019ba8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	31 c0                	xor    eax,eax
c0019bb0:	31 d2                	xor    edx,edx
c0019bb2:	83 c4 08             	add    esp,0x8
c0019bb5:	5b                   	pop    ebx
c0019bb6:	c3                   	ret    
c0019bb7:	83 ec 08             	sub    esp,0x8
c0019bba:	50                   	push   eax
c0019bbb:	68 48 84 02 c0       	push   0xc0028448
c0019bc0:	e8 b2 86 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019bcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019bd2:	83 c4 08             	add    esp,0x8
c0019bd5:	5b                   	pop    ebx
c0019bd6:	c3                   	ret    

c0019bd7 <sysCallWait(regs*)>:
c0019bd7:	83 ec 10             	sub    esp,0x10
c0019bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bde:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019be1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019be4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019be7:	e8 ed 22 00 00       	call   c001bed9 <waitTask(int, int*, int)>
c0019bec:	83 c4 1c             	add    esp,0x1c
c0019bef:	99                   	cdq    
c0019bf0:	c3                   	ret    

c0019bf1 <sysCallRmdir(regs*)>:
c0019bf1:	56                   	push   esi
c0019bf2:	53                   	push   ebx
c0019bf3:	83 ec 10             	sub    esp,0x10
c0019bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bfa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019bfd:	68 14 01 00 00       	push   0x114
c0019c02:	e8 81 85 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019c07:	83 c4 0c             	add    esp,0xc
c0019c0a:	89 c3                	mov    ebx,eax
c0019c0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c11:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019c14:	56                   	push   esi
c0019c15:	53                   	push   ebx
c0019c16:	e8 8b 8b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019c1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c1e:	e8 5f 8d ff ff       	call   c0012982 <File::unlink()>
c0019c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c26:	89 c6                	mov    esi,eax
c0019c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c2d:	31 c0                	xor    eax,eax
c0019c2f:	85 f6                	test   esi,esi
c0019c31:	0f 95 c0             	setne  al
c0019c34:	31 d2                	xor    edx,edx
c0019c36:	f7 d8                	neg    eax
c0019c38:	83 d2 00             	adc    edx,0x0
c0019c3b:	83 c4 14             	add    esp,0x14
c0019c3e:	f7 da                	neg    edx
c0019c40:	5b                   	pop    ebx
c0019c41:	5e                   	pop    esi
c0019c42:	c3                   	ret    

c0019c43 <sysCallUnlink(regs*)>:
c0019c43:	56                   	push   esi
c0019c44:	53                   	push   ebx
c0019c45:	83 ec 10             	sub    esp,0x10
c0019c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c4c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019c4f:	68 14 01 00 00       	push   0x114
c0019c54:	e8 2f 85 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019c59:	83 c4 0c             	add    esp,0xc
c0019c5c:	89 c3                	mov    ebx,eax
c0019c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c63:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019c66:	56                   	push   esi
c0019c67:	53                   	push   ebx
c0019c68:	e8 39 8b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019c6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c70:	e8 0d 8d ff ff       	call   c0012982 <File::unlink()>
c0019c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c78:	89 c6                	mov    esi,eax
c0019c7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c7f:	31 c0                	xor    eax,eax
c0019c81:	85 f6                	test   esi,esi
c0019c83:	0f 95 c0             	setne  al
c0019c86:	31 d2                	xor    edx,edx
c0019c88:	f7 d8                	neg    eax
c0019c8a:	83 d2 00             	adc    edx,0x0
c0019c8d:	83 c4 14             	add    esp,0x14
c0019c90:	f7 da                	neg    edx
c0019c92:	5b                   	pop    ebx
c0019c93:	5e                   	pop    esi
c0019c94:	c3                   	ret    

c0019c95 <sysCallGetArgv(regs*)>:
c0019c95:	83 ec 0c             	sub    esp,0xc
c0019c98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c9c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019c9f:	85 c0                	test   eax,eax
c0019ca1:	78 2b                	js     c0019cce <sysCallGetArgv(regs*)+0x39>
c0019ca3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019ca9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019cac:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019cb2:	7d 1a                	jge    c0019cce <sysCallGetArgv(regs*)+0x39>
c0019cb4:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019cbb:	85 c0                	test   eax,eax
c0019cbd:	74 17                	je     c0019cd6 <sysCallGetArgv(regs*)+0x41>
c0019cbf:	83 ec 08             	sub    esp,0x8
c0019cc2:	50                   	push   eax
c0019cc3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019cc6:	e8 99 6a fe ff       	call   c0000764 <strcpy>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	31 c0                	xor    eax,eax
c0019cd0:	31 d2                	xor    edx,edx
c0019cd2:	83 c4 0c             	add    esp,0xc
c0019cd5:	c3                   	ret    
c0019cd6:	b8 01 00 00 00       	mov    eax,0x1
c0019cdb:	31 d2                	xor    edx,edx
c0019cdd:	83 c4 0c             	add    esp,0xc
c0019ce0:	c3                   	ret    

c0019ce1 <sysCallTTYName(regs*)>:
c0019ce1:	56                   	push   esi
c0019ce2:	53                   	push   ebx
c0019ce3:	53                   	push   ebx
c0019ce4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ce8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ceb:	85 c0                	test   eax,eax
c0019ced:	74 5f                	je     c0019d4e <sysCallTTYName(regs*)+0x6d>
c0019cef:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cf2:	83 f8 02             	cmp    eax,0x2
c0019cf5:	77 3e                	ja     c0019d35 <sysCallTTYName(regs*)+0x54>
c0019cf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019cff:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019d05:	85 db                	test   ebx,ebx
c0019d07:	74 45                	je     c0019d4e <sysCallTTYName(regs*)+0x6d>
c0019d09:	83 ec 0c             	sub    esp,0xc
c0019d0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d0e:	53                   	push   ebx
c0019d0f:	ff 10                	call   DWORD PTR [eax]
c0019d11:	83 c4 10             	add    esp,0x10
c0019d14:	84 c0                	test   al,al
c0019d16:	74 41                	je     c0019d59 <sysCallTTYName(regs*)+0x78>
c0019d18:	83 ec 08             	sub    esp,0x8
c0019d1b:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019d21:	53                   	push   ebx
c0019d22:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019d25:	e8 3a 6a fe ff       	call   c0000764 <strcpy>
c0019d2a:	83 c4 10             	add    esp,0x10
c0019d2d:	31 c0                	xor    eax,eax
c0019d2f:	59                   	pop    ecx
c0019d30:	31 d2                	xor    edx,edx
c0019d32:	5b                   	pop    ebx
c0019d33:	5e                   	pop    esi
c0019d34:	c3                   	ret    
c0019d35:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d3a:	74 bb                	je     c0019cf7 <sysCallTTYName(regs*)+0x16>
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	50                   	push   eax
c0019d40:	e8 0a 74 ff ff       	call   c001114f <getFromFileDescriptor(int)>
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	89 c3                	mov    ebx,eax
c0019d4a:	85 db                	test   ebx,ebx
c0019d4c:	75 bb                	jne    c0019d09 <sysCallTTYName(regs*)+0x28>
c0019d4e:	59                   	pop    ecx
c0019d4f:	b8 01 00 00 00       	mov    eax,0x1
c0019d54:	31 d2                	xor    edx,edx
c0019d56:	5b                   	pop    ebx
c0019d57:	5e                   	pop    esi
c0019d58:	c3                   	ret    
c0019d59:	59                   	pop    ecx
c0019d5a:	b8 02 00 00 00       	mov    eax,0x2
c0019d5f:	31 d2                	xor    edx,edx
c0019d61:	5b                   	pop    ebx
c0019d62:	5e                   	pop    esi
c0019d63:	c3                   	ret    

c0019d64 <sysCallGetEnv(regs*)>:
c0019d64:	83 ec 0c             	sub    esp,0xc
c0019d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d6b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019d6e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019d71:	85 c9                	test   ecx,ecx
c0019d73:	75 22                	jne    c0019d97 <sysCallGetEnv(regs*)+0x33>
c0019d75:	85 d2                	test   edx,edx
c0019d77:	74 08                	je     c0019d81 <sysCallGetEnv(regs*)+0x1d>
c0019d79:	31 c0                	xor    eax,eax
c0019d7b:	31 d2                	xor    edx,edx
c0019d7d:	83 c4 0c             	add    esp,0xc
c0019d80:	c3                   	ret    
c0019d81:	83 ec 0c             	sub    esp,0xc
c0019d84:	68 6c 84 02 c0       	push   0xc002846c
c0019d89:	e8 54 69 fe ff       	call   c00006e2 <strlen>
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	31 d2                	xor    edx,edx
c0019d93:	83 c4 0c             	add    esp,0xc
c0019d96:	c3                   	ret    
c0019d97:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019d9a:	85 d2                	test   edx,edx
c0019d9c:	74 05                	je     c0019da3 <sysCallGetEnv(regs*)+0x3f>
c0019d9e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019da1:	eb d6                	jmp    c0019d79 <sysCallGetEnv(regs*)+0x15>
c0019da3:	83 ec 08             	sub    esp,0x8
c0019da6:	68 6c 84 02 c0       	push   0xc002846c
c0019dab:	50                   	push   eax
c0019dac:	e8 b3 69 fe ff       	call   c0000764 <strcpy>
c0019db1:	83 c4 10             	add    esp,0x10
c0019db4:	eb c3                	jmp    c0019d79 <sysCallGetEnv(regs*)+0x15>

c0019db6 <sysCallUSleep(regs*)>:
c0019db6:	83 ec 14             	sub    esp,0x14
c0019db9:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019dbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dc2:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019dc9:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019dcc:	01 ca                	add    edx,ecx
c0019dce:	52                   	push   edx
c0019dcf:	50                   	push   eax
c0019dd0:	e8 9d 21 00 00       	call   c001bf72 <nanoSleep(unsigned long long)>
c0019dd5:	31 c0                	xor    eax,eax
c0019dd7:	31 d2                	xor    edx,edx
c0019dd9:	83 c4 1c             	add    esp,0x1c
c0019ddc:	c3                   	ret    

c0019ddd <sysCallSpawn(regs*)>:
c0019ddd:	56                   	push   esi
c0019dde:	53                   	push   ebx
c0019ddf:	53                   	push   ebx
c0019de0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019de4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019de7:	85 f6                	test   esi,esi
c0019de9:	75 08                	jne    c0019df3 <sysCallSpawn(regs*)+0x16>
c0019deb:	59                   	pop    ecx
c0019dec:	31 c0                	xor    eax,eax
c0019dee:	31 d2                	xor    edx,edx
c0019df0:	5b                   	pop    ebx
c0019df1:	5e                   	pop    esi
c0019df2:	c3                   	ret    
c0019df3:	83 ec 0c             	sub    esp,0xc
c0019df6:	68 3b 07 00 00       	push   0x73b
c0019dfb:	e8 88 83 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019e00:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019e03:	89 c6                	mov    esi,eax
c0019e05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e0a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e0d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019e10:	56                   	push   esi
c0019e11:	e8 bc 18 00 00       	call   c001b6d2 <Process::Process(char const*, Process*, char**)>
c0019e16:	83 c4 20             	add    esp,0x20
c0019e19:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019e20:	75 c9                	jne    c0019deb <sysCallSpawn(regs*)+0xe>
c0019e22:	83 ec 0c             	sub    esp,0xc
c0019e25:	56                   	push   esi
c0019e26:	e8 0d 1e 00 00       	call   c001bc38 <Process::createUserThread()>
c0019e2b:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e2d:	83 c4 10             	add    esp,0x10
c0019e30:	99                   	cdq    
c0019e31:	59                   	pop    ecx
c0019e32:	5b                   	pop    ebx
c0019e33:	5e                   	pop    esi
c0019e34:	c3                   	ret    

c0019e35 <sysAppSettings(regs*)>:
c0019e35:	53                   	push   ebx
c0019e36:	83 ec 08             	sub    esp,0x8
c0019e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e3d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019e40:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019e46:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019e4b:	66 3d c0 09          	cmp    ax,0x9c0
c0019e4f:	75 2f                	jne    c0019e80 <sysAppSettings(regs*)+0x4b>
c0019e51:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019e57:	83 e0 1f             	and    eax,0x1f
c0019e5a:	3c 01                	cmp    al,0x1
c0019e5c:	74 2e                	je     c0019e8c <sysAppSettings(regs*)+0x57>
c0019e5e:	3c 07                	cmp    al,0x7
c0019e60:	0f 84 bd 00 00 00    	je     c0019f23 <sysAppSettings(regs*)+0xee>
c0019e66:	84 c0                	test   al,al
c0019e68:	0f 84 dc 00 00 00    	je     c0019f4a <sysAppSettings(regs*)+0x115>
c0019e6e:	3c 08                	cmp    al,0x8
c0019e70:	74 6d                	je     c0019edf <sysAppSettings(regs*)+0xaa>
c0019e72:	0f b6 c0             	movzx  eax,al
c0019e75:	83 c4 08             	add    esp,0x8
c0019e78:	05 e8 03 00 00       	add    eax,0x3e8
c0019e7d:	5b                   	pop    ebx
c0019e7e:	99                   	cdq    
c0019e7f:	c3                   	ret    
c0019e80:	b8 01 00 00 00       	mov    eax,0x1
c0019e85:	31 d2                	xor    edx,edx
c0019e87:	83 c4 08             	add    esp,0x8
c0019e8a:	5b                   	pop    ebx
c0019e8b:	c3                   	ret    
c0019e8c:	51                   	push   ecx
c0019e8d:	68 00 01 00 00       	push   0x100
c0019e92:	6a 00                	push   0x0
c0019e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e9c:	83 c0 0c             	add    eax,0xc
c0019e9f:	50                   	push   eax
c0019ea0:	e8 20 68 fe ff       	call   c00006c5 <memset>
c0019ea5:	83 c4 0c             	add    esp,0xc
c0019ea8:	68 ff 00 00 00       	push   0xff
c0019ead:	53                   	push   ebx
c0019eae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019eb3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019eb6:	83 c0 0c             	add    eax,0xc
c0019eb9:	50                   	push   eax
c0019eba:	e8 d0 67 fe ff       	call   c000068f <memcpy>
c0019ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ec4:	5b                   	pop    ebx
c0019ec5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ec8:	5a                   	pop    edx
c0019ec9:	8d 50 0c             	lea    edx,[eax+0xc]
c0019ecc:	52                   	push   edx
c0019ecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed3:	e8 3e 64 ff ff       	call   c0010316 <VgaText::setTitle(char*)>
c0019ed8:	83 c4 10             	add    esp,0x10
c0019edb:	31 c0                	xor    eax,eax
c0019edd:	eb a6                	jmp    c0019e85 <sysAppSettings(regs*)+0x50>
c0019edf:	83 ec 08             	sub    esp,0x8
c0019ee2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019ee8:	83 e0 0f             	and    eax,0xf
c0019eeb:	50                   	push   eax
c0019eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ef1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019efa:	e8 07 64 ff ff       	call   c0010306 <VgaText::setTitleColour(VgaColour)>
c0019eff:	58                   	pop    eax
c0019f00:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019f06:	5a                   	pop    edx
c0019f07:	c1 e8 04             	shr    eax,0x4
c0019f0a:	83 e0 0f             	and    eax,0xf
c0019f0d:	50                   	push   eax
c0019f0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f1c:	e8 d5 63 ff ff       	call   c00102f6 <VgaText::setTitleTextColour(VgaColour)>
c0019f21:	eb b5                	jmp    c0019ed8 <sysAppSettings(regs*)+0xa3>
c0019f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019f2b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019f31:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019f37:	c0 e8 06             	shr    al,0x6
c0019f3a:	83 e0 01             	and    eax,0x1
c0019f3d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019f43:	31 c0                	xor    eax,eax
c0019f45:	e9 3b ff ff ff       	jmp    c0019e85 <sysAppSettings(regs*)+0x50>
c0019f4a:	b8 02 00 00 00       	mov    eax,0x2
c0019f4f:	e9 31 ff ff ff       	jmp    c0019e85 <sysAppSettings(regs*)+0x50>

c0019f54 <sysSetFatAttrib(regs*)>:
c0019f54:	57                   	push   edi
c0019f55:	56                   	push   esi
c0019f56:	53                   	push   ebx
c0019f57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f5b:	83 ec 0c             	sub    esp,0xc
c0019f5e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019f61:	68 14 01 00 00       	push   0x114
c0019f66:	e8 1d 82 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019f6b:	83 c4 0c             	add    esp,0xc
c0019f6e:	89 c3                	mov    ebx,eax
c0019f70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f78:	57                   	push   edi
c0019f79:	53                   	push   ebx
c0019f7a:	e8 27 88 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c0019f7f:	83 c4 0c             	add    esp,0xc
c0019f82:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f85:	0f b6 d4             	movzx  edx,ah
c0019f88:	0f b6 c0             	movzx  eax,al
c0019f8b:	52                   	push   edx
c0019f8c:	50                   	push   eax
c0019f8d:	53                   	push   ebx
c0019f8e:	e8 89 8a ff ff       	call   c0012a1c <File::chfatattr(unsigned char, unsigned char)>
c0019f93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f96:	89 c6                	mov    esi,eax
c0019f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	31 c0                	xor    eax,eax
c0019fa2:	5b                   	pop    ebx
c0019fa3:	85 f6                	test   esi,esi
c0019fa5:	5e                   	pop    esi
c0019fa6:	0f 95 c0             	setne  al
c0019fa9:	5f                   	pop    edi
c0019faa:	31 d2                	xor    edx,edx
c0019fac:	f7 d8                	neg    eax
c0019fae:	83 d2 00             	adc    edx,0x0
c0019fb1:	f7 da                	neg    edx
c0019fb3:	c3                   	ret    

c0019fb4 <sysPanic(regs*)>:
c0019fb4:	83 ec 18             	sub    esp,0x18
c0019fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fbb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019fbe:	e8 14 eb ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0019fc3:	c7 04 24 23 85 02 c0 	mov    DWORD PTR [esp],0xc0028523
c0019fca:	e8 08 eb ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0019fcf:	b8 01 00 00 00       	mov    eax,0x1
c0019fd4:	31 d2                	xor    edx,edx
c0019fd6:	83 c4 1c             	add    esp,0x1c
c0019fd9:	c3                   	ret    

c0019fda <sysPipe(regs*)>:
c0019fda:	57                   	push   edi
c0019fdb:	56                   	push   esi
c0019fdc:	53                   	push   ebx
c0019fdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019fe7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019fea:	6a 20                	push   0x20
c0019fec:	e8 97 81 ff ff       	call   c0012188 <operator new(unsigned long)>
c0019ff1:	89 c3                	mov    ebx,eax
c0019ff3:	58                   	pop    eax
c0019ff4:	5a                   	pop    edx
c0019ff5:	68 00 50 00 00       	push   0x5000
c0019ffa:	53                   	push   ebx
c0019ffb:	e8 54 5c ff ff       	call   c000fc54 <Pipe::Pipe(int)>
c001a000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a003:	e8 92 6e ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a008:	89 07                	mov    DWORD PTR [edi],eax
c001a00a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a00d:	e8 88 6e ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a012:	83 c4 10             	add    esp,0x10
c001a015:	89 06                	mov    DWORD PTR [esi],eax
c001a017:	31 d2                	xor    edx,edx
c001a019:	5b                   	pop    ebx
c001a01a:	31 c0                	xor    eax,eax
c001a01c:	5e                   	pop    esi
c001a01d:	5f                   	pop    edi
c001a01e:	c3                   	ret    

c001a01f <sysGetUnixTime(regs*)>:
c001a01f:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c001a024:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a02a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a02e:	e9 3b 91 ff ff       	jmp    c001316e <Clock::timeInSecondsLocal()>

c001a033 <string_ends_with(char const*, char const*)>:
c001a033:	57                   	push   edi
c001a034:	56                   	push   esi
c001a035:	53                   	push   ebx
c001a036:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a03a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a03e:	83 ec 0c             	sub    esp,0xc
c001a041:	53                   	push   ebx
c001a042:	e8 9b 66 fe ff       	call   c00006e2 <strlen>
c001a047:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a04a:	89 c6                	mov    esi,eax
c001a04c:	e8 91 66 fe ff       	call   c00006e2 <strlen>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	39 c6                	cmp    esi,eax
c001a056:	7d 06                	jge    c001a05e <string_ends_with(char const*, char const*)+0x2b>
c001a058:	5b                   	pop    ebx
c001a059:	31 c0                	xor    eax,eax
c001a05b:	5e                   	pop    esi
c001a05c:	5f                   	pop    edi
c001a05d:	c3                   	ret    
c001a05e:	83 ec 08             	sub    esp,0x8
c001a061:	29 c6                	sub    esi,eax
c001a063:	57                   	push   edi
c001a064:	01 f3                	add    ebx,esi
c001a066:	53                   	push   ebx
c001a067:	e8 49 67 fe ff       	call   c00007b5 <strcmp>
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	85 c0                	test   eax,eax
c001a071:	5b                   	pop    ebx
c001a072:	0f 94 c0             	sete   al
c001a075:	5e                   	pop    esi
c001a076:	0f b6 c0             	movzx  eax,al
c001a079:	5f                   	pop    edi
c001a07a:	c3                   	ret    

c001a07b <sysCallOpen(regs*)>:
c001a07b:	56                   	push   esi
c001a07c:	53                   	push   ebx
c001a07d:	81 ec 04 01 00 00    	sub    esp,0x104
c001a083:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a08a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a08d:	85 c9                	test   ecx,ecx
c001a08f:	0f 84 b3 00 00 00    	je     c001a148 <sysCallOpen(regs*)+0xcd>
c001a095:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a098:	85 c0                	test   eax,eax
c001a09a:	0f 84 a8 00 00 00    	je     c001a148 <sysCallOpen(regs*)+0xcd>
c001a0a0:	52                   	push   edx
c001a0a1:	68 32 85 02 c0       	push   0xc0028532
c001a0a6:	50                   	push   eax
c001a0a7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a0ab:	56                   	push   esi
c001a0ac:	e8 4b 85 ff ff       	call   c00125fc <standardiseFiles(char*, char const*, char const*)>
c001a0b1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0b4:	e8 29 66 fe ff       	call   c00006e2 <strlen>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	48                   	dec    eax
c001a0bd:	74 1d                	je     c001a0dc <sysCallOpen(regs*)+0x61>
c001a0bf:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a0c2:	eb 0f                	jmp    c001a0d3 <sysCallOpen(regs*)+0x58>
c001a0c4:	80 fa 3a             	cmp    dl,0x3a
c001a0c7:	74 0f                	je     c001a0d8 <sysCallOpen(regs*)+0x5d>
c001a0c9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a0cd:	48                   	dec    eax
c001a0ce:	74 0c                	je     c001a0dc <sysCallOpen(regs*)+0x61>
c001a0d0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a0d3:	80 fa 2e             	cmp    dl,0x2e
c001a0d6:	75 ec                	jne    c001a0c4 <sysCallOpen(regs*)+0x49>
c001a0d8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a0dc:	83 ec 08             	sub    esp,0x8
c001a0df:	68 36 85 02 c0       	push   0xc0028536
c001a0e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0e7:	e8 47 ff ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a0ec:	83 c4 10             	add    esp,0x10
c001a0ef:	85 c0                	test   eax,eax
c001a0f1:	75 17                	jne    c001a10a <sysCallOpen(regs*)+0x8f>
c001a0f3:	83 ec 08             	sub    esp,0x8
c001a0f6:	68 57 85 02 c0       	push   0xc0028557
c001a0fb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0fe:	e8 30 ff ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a103:	83 c4 10             	add    esp,0x10
c001a106:	85 c0                	test   eax,eax
c001a108:	74 51                	je     c001a15b <sysCallOpen(regs*)+0xe0>
c001a10a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a10d:	83 ec 08             	sub    esp,0x8
c001a110:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a116:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a11d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a120:	ff 30                	push   DWORD PTR [eax]
c001a122:	68 3b 85 02 c0       	push   0xc002853b
c001a127:	e8 4b 81 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a12c:	c7 04 24 4a 85 02 c0 	mov    DWORD PTR [esp],0xc002854a
c001a133:	e8 3f 81 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	81 c4 04 01 00 00    	add    esp,0x104
c001a141:	31 c0                	xor    eax,eax
c001a143:	31 d2                	xor    edx,edx
c001a145:	5b                   	pop    ebx
c001a146:	5e                   	pop    esi
c001a147:	c3                   	ret    
c001a148:	81 c4 04 01 00 00    	add    esp,0x104
c001a14e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a153:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a158:	5b                   	pop    ebx
c001a159:	5e                   	pop    esi
c001a15a:	c3                   	ret    
c001a15b:	83 ec 08             	sub    esp,0x8
c001a15e:	68 37 85 02 c0       	push   0xc0028537
c001a163:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a166:	e8 4a 66 fe ff       	call   c00007b5 <strcmp>
c001a16b:	83 c4 10             	add    esp,0x10
c001a16e:	85 c0                	test   eax,eax
c001a170:	74 98                	je     c001a10a <sysCallOpen(regs*)+0x8f>
c001a172:	83 ec 08             	sub    esp,0x8
c001a175:	68 36 85 02 c0       	push   0xc0028536
c001a17a:	56                   	push   esi
c001a17b:	e8 b3 fe ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	85 c0                	test   eax,eax
c001a185:	75 83                	jne    c001a10a <sysCallOpen(regs*)+0x8f>
c001a187:	83 ec 08             	sub    esp,0x8
c001a18a:	68 5c 85 02 c0       	push   0xc002855c
c001a18f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a192:	e8 9c fe ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	85 c0                	test   eax,eax
c001a19c:	0f 85 d1 00 00 00    	jne    c001a273 <sysCallOpen(regs*)+0x1f8>
c001a1a2:	83 ec 08             	sub    esp,0x8
c001a1a5:	68 61 85 02 c0       	push   0xc0028561
c001a1aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1ad:	e8 81 fe ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a1b2:	83 c4 10             	add    esp,0x10
c001a1b5:	85 c0                	test   eax,eax
c001a1b7:	0f 85 b6 00 00 00    	jne    c001a273 <sysCallOpen(regs*)+0x1f8>
c001a1bd:	83 ec 08             	sub    esp,0x8
c001a1c0:	68 5d 85 02 c0       	push   0xc002855d
c001a1c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1c8:	e8 e8 65 fe ff       	call   c00007b5 <strcmp>
c001a1cd:	83 c4 10             	add    esp,0x10
c001a1d0:	85 c0                	test   eax,eax
c001a1d2:	0f 84 9b 00 00 00    	je     c001a273 <sysCallOpen(regs*)+0x1f8>
c001a1d8:	83 ec 08             	sub    esp,0x8
c001a1db:	68 5c 85 02 c0       	push   0xc002855c
c001a1e0:	56                   	push   esi
c001a1e1:	e8 4d fe ff ff       	call   c001a033 <string_ends_with(char const*, char const*)>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	85 c0                	test   eax,eax
c001a1eb:	0f 85 82 00 00 00    	jne    c001a273 <sysCallOpen(regs*)+0x1f8>
c001a1f1:	83 ec 0c             	sub    esp,0xc
c001a1f4:	68 14 01 00 00       	push   0x114
c001a1f9:	e8 8a 7f ff ff       	call   c0012188 <operator new(unsigned long)>
c001a1fe:	83 c4 0c             	add    esp,0xc
c001a201:	89 c6                	mov    esi,eax
c001a203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a208:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a20b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a20e:	56                   	push   esi
c001a20f:	e8 92 85 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a214:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	0f b6 c2             	movzx  eax,dl
c001a21d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a220:	89 d0                	mov    eax,edx
c001a222:	83 e0 01             	and    eax,0x1
c001a225:	f6 c2 02             	test   dl,0x2
c001a228:	74 03                	je     c001a22d <sysCallOpen(regs*)+0x1b2>
c001a22a:	83 c8 02             	or     eax,0x2
c001a22d:	f6 c2 04             	test   dl,0x4
c001a230:	74 03                	je     c001a235 <sysCallOpen(regs*)+0x1ba>
c001a232:	83 c8 04             	or     eax,0x4
c001a235:	f6 c2 08             	test   dl,0x8
c001a238:	74 03                	je     c001a23d <sysCallOpen(regs*)+0x1c2>
c001a23a:	83 c8 0a             	or     eax,0xa
c001a23d:	83 e2 10             	and    edx,0x10
c001a240:	74 03                	je     c001a245 <sysCallOpen(regs*)+0x1ca>
c001a242:	83 c8 12             	or     eax,0x12
c001a245:	83 ec 08             	sub    esp,0x8
c001a248:	50                   	push   eax
c001a249:	56                   	push   esi
c001a24a:	e8 bb 85 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	85 c0                	test   eax,eax
c001a254:	0f 85 ee fe ff ff    	jne    c001a148 <sysCallOpen(regs*)+0xcd>
c001a25a:	83 ec 0c             	sub    esp,0xc
c001a25d:	56                   	push   esi
c001a25e:	e8 37 6c ff ff       	call   c0010e9a <UnixFile::getFileDescriptor()>
c001a263:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a266:	89 02                	mov    DWORD PTR [edx],eax
c001a268:	c1 f8 1f             	sar    eax,0x1f
c001a26b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a26e:	e9 c5 fe ff ff       	jmp    c001a138 <sysCallOpen(regs*)+0xbd>
c001a273:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a276:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a27c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a283:	e9 b3 fe ff ff       	jmp    c001a13b <sysCallOpen(regs*)+0xc0>

c001a288 <setupSystemCalls()>:
c001a288:	c7 05 60 b0 02 c0 e4 94 01 c0 	mov    DWORD PTR ds:0xc002b060,0xc00194e4
c001a292:	c7 05 64 b0 02 c0 12 93 01 c0 	mov    DWORD PTR ds:0xc002b064,0xc0019312
c001a29c:	c7 05 68 b0 02 c0 27 94 01 c0 	mov    DWORD PTR ds:0xc002b068,0xc0019427
c001a2a6:	c7 05 6c b0 02 c0 7c 94 01 c0 	mov    DWORD PTR ds:0xc002b06c,0xc001947c
c001a2b0:	c7 05 70 b0 02 c0 bf 93 01 c0 	mov    DWORD PTR ds:0xc002b070,0xc00193bf
c001a2ba:	c7 05 74 b0 02 c0 fe 94 01 c0 	mov    DWORD PTR ds:0xc002b074,0xc00194fe
c001a2c4:	c7 05 78 b0 02 c0 a3 96 01 c0 	mov    DWORD PTR ds:0xc002b078,0xc00196a3
c001a2ce:	c7 05 7c b0 02 c0 c2 96 01 c0 	mov    DWORD PTR ds:0xc002b07c,0xc00196c2
c001a2d8:	c7 05 84 b0 02 c0 23 9a 01 c0 	mov    DWORD PTR ds:0xc002b084,0xc0019a23
c001a2e2:	c7 05 80 b0 02 c0 7b a0 01 c0 	mov    DWORD PTR ds:0xc002b080,0xc001a07b
c001a2ec:	c7 05 88 b0 02 c0 ab 9a 01 c0 	mov    DWORD PTR ds:0xc002b088,0xc0019aab
c001a2f6:	c7 05 8c b0 02 c0 21 97 01 c0 	mov    DWORD PTR ds:0xc002b08c,0xc0019721
c001a300:	c7 05 90 b0 02 c0 0a 95 01 c0 	mov    DWORD PTR ds:0xc002b090,0xc001950a
c001a30a:	c7 05 94 b0 02 c0 0f 95 01 c0 	mov    DWORD PTR ds:0xc002b094,0xc001950f
c001a314:	c7 05 98 b0 02 c0 18 9b 01 c0 	mov    DWORD PTR ds:0xc002b098,0xc0019b18
c001a31e:	c7 05 9c b0 02 c0 71 9b 01 c0 	mov    DWORD PTR ds:0xc002b09c,0xc0019b71
c001a328:	c7 05 a0 b0 02 c0 09 98 01 c0 	mov    DWORD PTR ds:0xc002b0a0,0xc0019809
c001a332:	c7 05 a4 b0 02 c0 72 98 01 c0 	mov    DWORD PTR ds:0xc002b0a4,0xc0019872
c001a33c:	c7 05 a8 b0 02 c0 a0 99 01 c0 	mov    DWORD PTR ds:0xc002b0a8,0xc00199a0
c001a346:	c7 05 ac b0 02 c0 14 95 01 c0 	mov    DWORD PTR ds:0xc002b0ac,0xc0019514
c001a350:	c7 05 b0 b0 02 c0 d7 9b 01 c0 	mov    DWORD PTR ds:0xc002b0b0,0xc0019bd7
c001a35a:	c7 05 b4 b0 02 c0 1e 95 01 c0 	mov    DWORD PTR ds:0xc002b0b4,0xc001951e
c001a364:	c7 05 b8 b0 02 c0 29 95 01 c0 	mov    DWORD PTR ds:0xc002b0b8,0xc0019529
c001a36e:	c7 05 bc b0 02 c0 f1 9b 01 c0 	mov    DWORD PTR ds:0xc002b0bc,0xc0019bf1
c001a378:	c7 05 c0 b0 02 c0 43 9c 01 c0 	mov    DWORD PTR ds:0xc002b0c0,0xc0019c43
c001a382:	c7 05 c4 b0 02 c0 34 95 01 c0 	mov    DWORD PTR ds:0xc002b0c4,0xc0019534
c001a38c:	c7 05 c8 b0 02 c0 95 9c 01 c0 	mov    DWORD PTR ds:0xc002b0c8,0xc0019c95
c001a396:	c7 05 cc b0 02 c0 de 96 01 c0 	mov    DWORD PTR ds:0xc002b0cc,0xc00196de
c001a3a0:	c7 05 d0 b0 02 c0 e1 9c 01 c0 	mov    DWORD PTR ds:0xc002b0d0,0xc0019ce1
c001a3aa:	c7 05 d4 b0 02 c0 af 97 01 c0 	mov    DWORD PTR ds:0xc002b0d4,0xc00197af
c001a3b4:	c7 05 d8 b0 02 c0 b6 9d 01 c0 	mov    DWORD PTR ds:0xc002b0d8,0xc0019db6
c001a3be:	c7 05 dc b0 02 c0 ef 98 01 c0 	mov    DWORD PTR ds:0xc002b0dc,0xc00198ef
c001a3c8:	c7 05 e0 b0 02 c0 dd 9d 01 c0 	mov    DWORD PTR ds:0xc002b0e0,0xc0019ddd
c001a3d2:	c7 05 e4 b0 02 c0 64 9d 01 c0 	mov    DWORD PTR ds:0xc002b0e4,0xc0019d64
c001a3dc:	c7 05 e8 b0 02 c0 35 9e 01 c0 	mov    DWORD PTR ds:0xc002b0e8,0xc0019e35
c001a3e6:	c7 05 ec b0 02 c0 44 95 01 c0 	mov    DWORD PTR ds:0xc002b0ec,0xc0019544
c001a3f0:	c7 05 f0 b0 02 c0 ae 95 01 c0 	mov    DWORD PTR ds:0xc002b0f0,0xc00195ae
c001a3fa:	c7 05 f4 b0 02 c0 f4 95 01 c0 	mov    DWORD PTR ds:0xc002b0f4,0xc00195f4
c001a404:	c7 05 f8 b0 02 c0 54 9f 01 c0 	mov    DWORD PTR ds:0xc002b0f8,0xc0019f54
c001a40e:	c7 05 fc b0 02 c0 b4 9f 01 c0 	mov    DWORD PTR ds:0xc002b0fc,0xc0019fb4
c001a418:	c7 05 00 b1 02 c0 45 96 01 c0 	mov    DWORD PTR ds:0xc002b100,0xc0019645
c001a422:	c7 05 04 b1 02 c0 da 9f 01 c0 	mov    DWORD PTR ds:0xc002b104,0xc0019fda
c001a42c:	c7 05 08 b1 02 c0 1f a0 01 c0 	mov    DWORD PTR ds:0xc002b108,0xc001a01f
c001a436:	c7 05 0c b1 02 c0 2a 93 01 c0 	mov    DWORD PTR ds:0xc002b10c,0xc001932a
c001a440:	c3                   	ret    

c001a441 <systemCall(regs*, void*)>:
c001a441:	53                   	push   ebx
c001a442:	83 ec 08             	sub    esp,0x8
c001a445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a449:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a44c:	83 f8 7f             	cmp    eax,0x7f
c001a44f:	77 16                	ja     c001a467 <systemCall(regs*, void*)+0x26>
c001a451:	8b 14 85 60 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4fa0]
c001a458:	85 d2                	test   edx,edx
c001a45a:	74 0b                	je     c001a467 <systemCall(regs*, void*)+0x26>
c001a45c:	83 ec 0c             	sub    esp,0xc
c001a45f:	53                   	push   ebx
c001a460:	ff d2                	call   edx
c001a462:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a465:	eb 0d                	jmp    c001a474 <systemCall(regs*, void*)+0x33>
c001a467:	52                   	push   edx
c001a468:	52                   	push   edx
c001a469:	50                   	push   eax
c001a46a:	68 66 85 02 c0       	push   0xc0028566
c001a46f:	e8 03 7e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a47c:	31 d2                	xor    edx,edx
c001a47e:	83 c4 08             	add    esp,0x8
c001a481:	5b                   	pop    ebx
c001a482:	c3                   	ret    

c001a483 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a483:	55                   	push   ebp
c001a484:	89 e5                	mov    ebp,esp
c001a486:	57                   	push   edi
c001a487:	56                   	push   esi
c001a488:	53                   	push   ebx
c001a489:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a48f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a492:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a495:	85 c0                	test   eax,eax
c001a497:	0f 95 c1             	setne  cl
c001a49a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a49e:	0f 94 c2             	sete   dl
c001a4a1:	84 d1                	test   cl,dl
c001a4a3:	74 26                	je     c001a4cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a4a5:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a4ac:	74 1d                	je     c001a4cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a4ae:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a4b1:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a4b7:	89 d6                	mov    esi,edx
c001a4b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a4bf:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a4c5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a4c8:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a4cb:	83 ec 0c             	sub    esp,0xc
c001a4ce:	05 ff 0f 00 00       	add    eax,0xfff
c001a4d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a4d6:	6a 01                	push   0x1
c001a4d8:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a4de:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a4e4:	e8 bc 6d ff ff       	call   c00112a5 <Virt::allocateKernelVirtualPages(int)>
c001a4e9:	83 c4 10             	add    esp,0x10
c001a4ec:	89 c6                	mov    esi,eax
c001a4ee:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a4f4:	0f 86 21 01 00 00    	jbe    c001a61b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a4fa:	c1 eb 0c             	shr    ebx,0xc
c001a4fd:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a507:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a50d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a510:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a513:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a519:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a51c:	29 d8                	sub    eax,ebx
c001a51e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a524:	0f 83 f4 00 00 00    	jae    c001a61e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a52a:	83 ec 0c             	sub    esp,0xc
c001a52d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a533:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a536:	3d 00 10 00 00       	cmp    eax,0x1000
c001a53b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a53d:	52                   	push   edx
c001a53e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a544:	52                   	push   edx
c001a545:	76 05                	jbe    c001a54c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a547:	b8 00 10 00 00       	mov    eax,0x1000
c001a54c:	31 d2                	xor    edx,edx
c001a54e:	52                   	push   edx
c001a54f:	50                   	push   eax
c001a550:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a553:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a556:	83 c4 20             	add    esp,0x20
c001a559:	85 c0                	test   eax,eax
c001a55b:	74 1f                	je     c001a57c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a55d:	51                   	push   ecx
c001a55e:	51                   	push   ecx
c001a55f:	50                   	push   eax
c001a560:	68 7a 85 02 c0       	push   0xc002857a
c001a565:	e8 0d 7d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a56a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a56d:	e8 8d 70 ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	31 c0                	xor    eax,eax
c001a577:	e9 7c 01 00 00       	jmp    c001a6f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a57c:	e8 a9 14 00 00       	call   c001ba2a <lockScheduler()>
c001a581:	e8 92 51 ff ff       	call   c000f718 <Phys::allocatePage()>
c001a586:	6a 07                	push   0x7
c001a588:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a58e:	56                   	push   esi
c001a58f:	50                   	push   eax
c001a590:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a596:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a599:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a59f:	e8 d4 73 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5a4:	83 c4 0c             	add    esp,0xc
c001a5a7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5ad:	6a 00                	push   0x0
c001a5af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a5b5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a5b8:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a5be:	e8 13 72 ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a5c3:	58                   	pop    eax
c001a5c4:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a5ca:	5a                   	pop    edx
c001a5cb:	68 07 04 00 00       	push   0x407
c001a5d0:	53                   	push   ebx
c001a5d1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5d7:	50                   	push   eax
c001a5d8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5de:	6a 00                	push   0x0
c001a5e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5ee:	e8 3b 77 ff ff       	call   c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5f3:	83 c4 1c             	add    esp,0x1c
c001a5f6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a5fc:	68 00 10 00 00       	push   0x1000
c001a601:	50                   	push   eax
c001a602:	56                   	push   esi
c001a603:	e8 87 60 fe ff       	call   c000068f <memcpy>
c001a608:	e8 1f 14 00 00       	call   c001ba2c <unlockScheduler()>
c001a60d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a613:	83 c4 10             	add    esp,0x10
c001a616:	e9 f5 fe ff ff       	jmp    c001a510 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a61b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a61e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a628:	0f 86 bc 00 00 00    	jbe    c001a6ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a62e:	e8 f7 13 00 00       	call   c001ba2a <lockScheduler()>
c001a633:	51                   	push   ecx
c001a634:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a63a:	6a 00                	push   0x0
c001a63c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a641:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a644:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a64a:	e8 87 71 ff ff       	call   c00117d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001a64f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a655:	83 c4 10             	add    esp,0x10
c001a658:	c1 e8 0c             	shr    eax,0xc
c001a65b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a665:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a66b:	e8 a8 50 ff ff       	call   c000f718 <Phys::allocatePage()>
c001a670:	6a 07                	push   0x7
c001a672:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a678:	56                   	push   esi
c001a679:	50                   	push   eax
c001a67a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a680:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a683:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a689:	e8 ea 72 ff ff       	call   c0011978 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a68e:	58                   	pop    eax
c001a68f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a695:	5a                   	pop    edx
c001a696:	68 07 04 00 00       	push   0x407
c001a69b:	53                   	push   ebx
c001a69c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a6a2:	50                   	push   eax
c001a6a3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a6a9:	6a 00                	push   0x0
c001a6ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a6b9:	e8 70 76 ff ff       	call   c0011d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a6be:	83 c4 1c             	add    esp,0x1c
c001a6c1:	68 00 10 00 00       	push   0x1000
c001a6c6:	6a 00                	push   0x0
c001a6c8:	56                   	push   esi
c001a6c9:	e8 f7 5f fe ff       	call   c00006c5 <memset>
c001a6ce:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a6d4:	83 c4 10             	add    esp,0x10
c001a6d7:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a6dd:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a6e3:	77 86                	ja     c001a66b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a6e5:	e8 42 13 00 00       	call   c001ba2c <unlockScheduler()>
c001a6ea:	83 ec 0c             	sub    esp,0xc
c001a6ed:	56                   	push   esi
c001a6ee:	e8 0c 6f ff ff       	call   c00115ff <Virt::freeKernelVirtualPages(unsigned long)>
c001a6f3:	83 c4 10             	add    esp,0x10
c001a6f6:	b0 01                	mov    al,0x1
c001a6f8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a6fb:	5b                   	pop    ebx
c001a6fc:	5e                   	pop    esi
c001a6fd:	5f                   	pop    edi
c001a6fe:	5d                   	pop    ebp
c001a6ff:	c3                   	ret    

c001a700 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a700:	55                   	push   ebp
c001a701:	57                   	push   edi
c001a702:	56                   	push   esi
c001a703:	53                   	push   ebx
c001a704:	83 ec 48             	sub    esp,0x48
c001a707:	68 14 01 00 00       	push   0x114
c001a70c:	e8 77 7a ff ff       	call   c0012188 <operator new(unsigned long)>
c001a711:	83 c4 0c             	add    esp,0xc
c001a714:	89 c6                	mov    esi,eax
c001a716:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a71a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a71e:	50                   	push   eax
c001a71f:	e8 82 80 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a724:	58                   	pop    eax
c001a725:	5a                   	pop    edx
c001a726:	6a 01                	push   0x1
c001a728:	56                   	push   esi
c001a729:	e8 dc 80 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	85 c0                	test   eax,eax
c001a733:	0f 85 47 01 00 00    	jne    c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a739:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a741:	83 ec 0c             	sub    esp,0xc
c001a744:	6a 34                	push   0x34
c001a746:	e8 23 4a ff ff       	call   c000f16e <malloc>
c001a74b:	89 c3                	mov    ebx,eax
c001a74d:	58                   	pop    eax
c001a74e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a750:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a754:	57                   	push   edi
c001a755:	53                   	push   ebx
c001a756:	6a 00                	push   0x0
c001a758:	6a 34                	push   0x34
c001a75a:	56                   	push   esi
c001a75b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a75e:	83 c4 20             	add    esp,0x20
c001a761:	85 c0                	test   eax,eax
c001a763:	0f 85 17 01 00 00    	jne    c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a769:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a76f:	0f 85 0b 01 00 00    	jne    c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a775:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a778:	85 c0                	test   eax,eax
c001a77a:	0f 84 00 01 00 00    	je     c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a780:	31 d2                	xor    edx,edx
c001a782:	55                   	push   ebp
c001a783:	52                   	push   edx
c001a784:	50                   	push   eax
c001a785:	56                   	push   esi
c001a786:	e8 3d 81 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a78b:	83 c4 10             	add    esp,0x10
c001a78e:	85 c0                	test   eax,eax
c001a790:	0f 85 ea 00 00 00    	jne    c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a79c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a7a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a7a4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a7a8:	0f af c2             	imul   eax,edx
c001a7ab:	50                   	push   eax
c001a7ac:	e8 bd 49 ff ff       	call   c000f16e <malloc>
c001a7b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a7b8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a7ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7be:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a7c2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a7c6:	0f af c2             	imul   eax,edx
c001a7c9:	99                   	cdq    
c001a7ca:	52                   	push   edx
c001a7cb:	50                   	push   eax
c001a7cc:	56                   	push   esi
c001a7cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a7d0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a7d3:	83 c4 20             	add    esp,0x20
c001a7d6:	85 c0                	test   eax,eax
c001a7d8:	0f 84 a2 00 00 00    	je     c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7de:	31 d2                	xor    edx,edx
c001a7e0:	51                   	push   ecx
c001a7e1:	52                   	push   edx
c001a7e2:	50                   	push   eax
c001a7e3:	56                   	push   esi
c001a7e4:	e8 df 80 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	85 c0                	test   eax,eax
c001a7ee:	0f 85 8c 00 00 00    	jne    c001a880 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7f4:	83 ec 0c             	sub    esp,0xc
c001a7f7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a7fb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a7ff:	31 ed                	xor    ebp,ebp
c001a801:	0f af c2             	imul   eax,edx
c001a804:	50                   	push   eax
c001a805:	e8 64 49 ff ff       	call   c000f16e <malloc>
c001a80a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a80d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a811:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a813:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a817:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a81b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a81f:	0f af c2             	imul   eax,edx
c001a822:	99                   	cdq    
c001a823:	52                   	push   edx
c001a824:	50                   	push   eax
c001a825:	56                   	push   esi
c001a826:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a829:	83 c4 20             	add    esp,0x20
c001a82c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a834:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a838:	0f 86 80 00 00 00    	jbe    c001a8be <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a83e:	0f b7 fd             	movzx  edi,bp
c001a841:	c1 e7 05             	shl    edi,0x5
c001a844:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a848:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a84b:	75 6b                	jne    c001a8b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a84d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a850:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a854:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a857:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a85b:	52                   	push   edx
c001a85c:	31 d2                	xor    edx,edx
c001a85e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a861:	52                   	push   edx
c001a862:	50                   	push   eax
c001a863:	56                   	push   esi
c001a864:	e8 5f 80 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001a869:	83 c4 10             	add    esp,0x10
c001a86c:	85 c0                	test   eax,eax
c001a86e:	74 17                	je     c001a887 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a870:	83 ec 0c             	sub    esp,0xc
c001a873:	68 a5 85 02 c0       	push   0xc00285a5
c001a878:	e8 fa 79 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	31 c0                	xor    eax,eax
c001a882:	e9 87 00 00 00       	jmp    c001a90e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a887:	83 ec 0c             	sub    esp,0xc
c001a88a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a88d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a890:	50                   	push   eax
c001a891:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a899:	56                   	push   esi
c001a89a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a89e:	e8 e0 fb ff ff       	call   c001a483 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a8a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8a7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a8ab:	83 c4 20             	add    esp,0x20
c001a8ae:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a8b2:	73 04                	jae    c001a8b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a8b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8b8:	45                   	inc    ebp
c001a8b9:	e9 76 ff ff ff       	jmp    c001a834 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a8be:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a8c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ca:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a8d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a8de:	05 00 10 00 00       	add    eax,0x1000
c001a8e3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8ea:	e8 8f 48 ff ff       	call   c000f17e <free>
c001a8ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8f2:	e8 87 48 ff ff       	call   c000f17e <free>
c001a8f7:	58                   	pop    eax
c001a8f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8fc:	e8 7d 48 ff ff       	call   c000f17e <free>
c001a901:	89 34 24             	mov    DWORD PTR [esp],esi
c001a904:	e8 5f 7f ff ff       	call   c0012868 <File::close()>
c001a909:	83 c4 10             	add    esp,0x10
c001a90c:	b0 01                	mov    al,0x1
c001a90e:	83 c4 3c             	add    esp,0x3c
c001a911:	5b                   	pop    ebx
c001a912:	5e                   	pop    esi
c001a913:	5f                   	pop    edi
c001a914:	5d                   	pop    ebp
c001a915:	c3                   	ret    

c001a916 <Thr::runtimeReferenceHelper()>:
c001a916:	83 ec 18             	sub    esp,0x18
c001a919:	68 ad 85 02 c0       	push   0xc00285ad
c001a91e:	e8 54 79 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001a923:	fa                   	cli    
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	eb fe                	jmp    c001a927 <Thr::runtimeReferenceHelper()+0x11>

c001a929 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a929:	57                   	push   edi
c001a92a:	56                   	push   esi
c001a92b:	53                   	push   ebx
c001a92c:	31 db                	xor    ebx,ebx
c001a92e:	39 1d 00 ba 02 c0    	cmp    DWORD PTR ds:0xc002ba00,ebx
c001a934:	7e 3c                	jle    c001a972 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a936:	8b 34 9d 80 b9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4680]
c001a93d:	31 ff                	xor    edi,edi
c001a93f:	39 3c 9d 80 b8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4780],edi
c001a946:	7e 27                	jle    c001a96f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a948:	50                   	push   eax
c001a949:	50                   	push   eax
c001a94a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a94e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a950:	03 04 9d 00 b9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4700]
c001a957:	50                   	push   eax
c001a958:	e8 58 5e fe ff       	call   c00007b5 <strcmp>
c001a95d:	83 c4 10             	add    esp,0x10
c001a960:	85 c0                	test   eax,eax
c001a962:	75 05                	jne    c001a969 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a964:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a967:	eb 0b                	jmp    c001a974 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a969:	83 c6 10             	add    esi,0x10
c001a96c:	47                   	inc    edi
c001a96d:	eb d0                	jmp    c001a93f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a96f:	43                   	inc    ebx
c001a970:	eb bc                	jmp    c001a92e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a972:	31 c0                	xor    eax,eax
c001a974:	5b                   	pop    ebx
c001a975:	5e                   	pop    esi
c001a976:	5f                   	pop    edi
c001a977:	c3                   	ret    

c001a978 <Thr::loadKernelSymbolTable(char const*)>:
c001a978:	55                   	push   ebp
c001a979:	57                   	push   edi
c001a97a:	56                   	push   esi
c001a97b:	53                   	push   ebx
c001a97c:	83 ec 68             	sub    esp,0x68
c001a97f:	8b 35 54 ba 02 c0    	mov    esi,DWORD PTR ds:0xc002ba54
c001a985:	68 14 01 00 00       	push   0x114
c001a98a:	e8 f9 77 ff ff       	call   c0012188 <operator new(unsigned long)>
c001a98f:	83 c4 0c             	add    esp,0xc
c001a992:	89 c3                	mov    ebx,eax
c001a994:	56                   	push   esi
c001a995:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a999:	50                   	push   eax
c001a99a:	e8 07 7e ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001a99f:	5e                   	pop    esi
c001a9a0:	5f                   	pop    edi
c001a9a1:	6a 01                	push   0x1
c001a9a3:	53                   	push   ebx
c001a9a4:	e8 61 7e ff ff       	call   c001280a <File::open(FileOpenMode)>
c001a9a9:	83 c4 10             	add    esp,0x10
c001a9ac:	31 d2                	xor    edx,edx
c001a9ae:	85 c0                	test   eax,eax
c001a9b0:	0f 85 79 02 00 00    	jne    c001ac2f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a9b6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a9be:	83 ec 0c             	sub    esp,0xc
c001a9c1:	6a 34                	push   0x34
c001a9c3:	e8 a6 47 ff ff       	call   c000f16e <malloc>
c001a9c8:	59                   	pop    ecx
c001a9c9:	89 c7                	mov    edi,eax
c001a9cb:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a9cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d1:	56                   	push   esi
c001a9d2:	57                   	push   edi
c001a9d3:	6a 00                	push   0x0
c001a9d5:	6a 34                	push   0x34
c001a9d7:	53                   	push   ebx
c001a9d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9db:	83 c4 20             	add    esp,0x20
c001a9de:	85 c0                	test   eax,eax
c001a9e0:	74 17                	je     c001a9f9 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a9e2:	83 ec 0c             	sub    esp,0xc
c001a9e5:	68 cf 85 02 c0       	push   0xc00285cf
c001a9ea:	e8 e8 e0 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	31 d2                	xor    edx,edx
c001a9f4:	e9 36 02 00 00       	jmp    c001ac2f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a9f9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a9ff:	75 e1                	jne    c001a9e2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa01:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001aa04:	85 c0                	test   eax,eax
c001aa06:	74 da                	je     c001a9e2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa08:	52                   	push   edx
c001aa09:	31 d2                	xor    edx,edx
c001aa0b:	52                   	push   edx
c001aa0c:	50                   	push   eax
c001aa0d:	53                   	push   ebx
c001aa0e:	e8 b5 7e ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aa13:	83 c4 10             	add    esp,0x10
c001aa16:	85 c0                	test   eax,eax
c001aa18:	75 c8                	jne    c001a9e2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001aa1a:	83 ec 0c             	sub    esp,0xc
c001aa1d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001aa21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001aa25:	31 ed                	xor    ebp,ebp
c001aa27:	0f af c2             	imul   eax,edx
c001aa2a:	50                   	push   eax
c001aa2b:	e8 3e 47 ff ff       	call   c000f16e <malloc>
c001aa30:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa37:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001aa39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa3d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001aa41:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001aa45:	0f af c2             	imul   eax,edx
c001aa48:	99                   	cdq    
c001aa49:	52                   	push   edx
c001aa4a:	50                   	push   eax
c001aa4b:	53                   	push   ebx
c001aa4c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aa4f:	83 c4 20             	add    esp,0x20
c001aa52:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa5a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001aa62:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001aa6a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa72:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001aa76:	0f 86 aa 00 00 00    	jbe    c001ab26 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001aa7c:	0f b7 f5             	movzx  esi,bp
c001aa7f:	6b f6 28             	imul   esi,esi,0x28
c001aa82:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001aa86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aa89:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa8d:	50                   	push   eax
c001aa8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa92:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001aa96:	8b 16                	mov    edx,DWORD PTR [esi]
c001aa98:	6b c0 28             	imul   eax,eax,0x28
c001aa9b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001aa9f:	89 d0                	mov    eax,edx
c001aaa1:	31 d2                	xor    edx,edx
c001aaa3:	52                   	push   edx
c001aaa4:	50                   	push   eax
c001aaa5:	53                   	push   ebx
c001aaa6:	e8 1d 7e ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aaab:	83 c4 0c             	add    esp,0xc
c001aaae:	6a 20                	push   0x20
c001aab0:	6a 00                	push   0x0
c001aab2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aab6:	52                   	push   edx
c001aab7:	e8 09 5c fe ff       	call   c00006c5 <memset>
c001aabc:	58                   	pop    eax
c001aabd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aabf:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001aac3:	51                   	push   ecx
c001aac4:	8d 54 24 40          	lea    edx,[esp+0x40]
c001aac8:	52                   	push   edx
c001aac9:	6a 00                	push   0x0
c001aacb:	6a 1f                	push   0x1f
c001aacd:	53                   	push   ebx
c001aace:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aad1:	83 c4 18             	add    esp,0x18
c001aad4:	68 e6 85 02 c0       	push   0xc00285e6
c001aad9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aadd:	52                   	push   edx
c001aade:	e8 d2 5c fe ff       	call   c00007b5 <strcmp>
c001aae3:	83 c4 10             	add    esp,0x10
c001aae6:	85 c0                	test   eax,eax
c001aae8:	75 0f                	jne    c001aaf9 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aaea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aaed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aaf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaf9:	50                   	push   eax
c001aafa:	50                   	push   eax
c001aafb:	68 ee 85 02 c0       	push   0xc00285ee
c001ab00:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ab04:	50                   	push   eax
c001ab05:	e8 ab 5c fe ff       	call   c00007b5 <strcmp>
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	85 c0                	test   eax,eax
c001ab0f:	75 0f                	jne    c001ab20 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001ab11:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab20:	45                   	inc    ebp
c001ab21:	e9 4c ff ff ff       	jmp    c001aa72 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001ab26:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ab2b:	75 10                	jne    c001ab3d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001ab2d:	83 ec 0c             	sub    esp,0xc
c001ab30:	68 f6 85 02 c0       	push   0xc00285f6
c001ab35:	e8 9d df ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ab42:	75 10                	jne    c001ab54 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001ab44:	83 ec 0c             	sub    esp,0xc
c001ab47:	68 f6 85 02 c0       	push   0xc00285f6
c001ab4c:	e8 86 df ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001ab51:	83 c4 10             	add    esp,0x10
c001ab54:	31 d2                	xor    edx,edx
c001ab56:	50                   	push   eax
c001ab57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab5b:	52                   	push   edx
c001ab5c:	50                   	push   eax
c001ab5d:	53                   	push   ebx
c001ab5e:	e8 65 7d ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ab63:	5a                   	pop    edx
c001ab64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ab68:	e8 01 46 ff ff       	call   c000f16e <malloc>
c001ab6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ab75:	89 c1                	mov    ecx,eax
c001ab77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab7f:	5e                   	pop    esi
c001ab80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab82:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ab86:	55                   	push   ebp
c001ab87:	51                   	push   ecx
c001ab88:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001ab8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab94:	53                   	push   ebx
c001ab95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab98:	83 c4 14             	add    esp,0x14
c001ab9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ab9f:	e8 ca 45 ff ff       	call   c000f16e <malloc>
c001aba4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aba7:	89 c6                	mov    esi,eax
c001aba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abab:	56                   	push   esi
c001abac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001abb4:	53                   	push   ebx
c001abb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abbc:	8b 15 00 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002ba00
c001abc2:	83 c4 1c             	add    esp,0x1c
c001abc5:	c1 e8 04             	shr    eax,0x4
c001abc8:	89 04 95 80 b8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4780],eax
c001abcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001abd3:	31 d2                	xor    edx,edx
c001abd5:	52                   	push   edx
c001abd6:	50                   	push   eax
c001abd7:	53                   	push   ebx
c001abd8:	e8 eb 7c ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001abdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001abe0:	31 d2                	xor    edx,edx
c001abe2:	56                   	push   esi
c001abe3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001abe7:	52                   	push   edx
c001abe8:	50                   	push   eax
c001abe9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abeb:	53                   	push   ebx
c001abec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abef:	83 c4 14             	add    esp,0x14
c001abf2:	53                   	push   ebx
c001abf3:	e8 70 7c ff ff       	call   c0012868 <File::close()>
c001abf8:	5d                   	pop    ebp
c001abf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfd:	e8 7c 45 ff ff       	call   c000f17e <free>
c001ac02:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ac05:	e8 74 45 ff ff       	call   c000f17e <free>
c001ac0a:	a1 00 ba 02 c0       	mov    eax,ds:0xc002ba00
c001ac0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ac13:	8d 50 01             	lea    edx,[eax+0x1]
c001ac16:	89 0c 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],ecx
c001ac1d:	89 15 00 ba 02 c0    	mov    DWORD PTR ds:0xc002ba00,edx
c001ac23:	89 34 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],esi
c001ac2a:	83 c4 10             	add    esp,0x10
c001ac2d:	b2 01                	mov    dl,0x1
c001ac2f:	83 c4 5c             	add    esp,0x5c
c001ac32:	88 d0                	mov    al,dl
c001ac34:	5b                   	pop    ebx
c001ac35:	5e                   	pop    esi
c001ac36:	5f                   	pop    edi
c001ac37:	5d                   	pop    ebp
c001ac38:	c3                   	ret    

c001ac39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ac39:	55                   	push   ebp
c001ac3a:	57                   	push   edi
c001ac3b:	56                   	push   esi
c001ac3c:	53                   	push   ebx
c001ac3d:	81 ec 68 03 00 00    	sub    esp,0x368
c001ac43:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ac4a:	8b 1d 54 ba 02 c0    	mov    ebx,DWORD PTR ds:0xc002ba54
c001ac50:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ac54:	68 14 01 00 00       	push   0x114
c001ac59:	e8 2a 75 ff ff       	call   c0012188 <operator new(unsigned long)>
c001ac5e:	83 c4 0c             	add    esp,0xc
c001ac61:	89 c7                	mov    edi,eax
c001ac63:	53                   	push   ebx
c001ac64:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ac6b:	50                   	push   eax
c001ac6c:	e8 35 7b ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001ac71:	5e                   	pop    esi
c001ac72:	5d                   	pop    ebp
c001ac73:	6a 01                	push   0x1
c001ac75:	57                   	push   edi
c001ac76:	e8 8f 7b ff ff       	call   c001280a <File::open(FileOpenMode)>
c001ac7b:	83 c4 10             	add    esp,0x10
c001ac7e:	85 c0                	test   eax,eax
c001ac80:	0f 85 10 07 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac86:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ac8e:	83 ec 0c             	sub    esp,0xc
c001ac91:	6a 34                	push   0x34
c001ac93:	e8 d6 44 ff ff       	call   c000f16e <malloc>
c001ac98:	5b                   	pop    ebx
c001ac99:	89 c5                	mov    ebp,eax
c001ac9b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ac9f:	8b 07                	mov    eax,DWORD PTR [edi]
c001aca1:	53                   	push   ebx
c001aca2:	55                   	push   ebp
c001aca3:	6a 00                	push   0x0
c001aca5:	6a 34                	push   0x34
c001aca7:	57                   	push   edi
c001aca8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001acab:	83 c4 20             	add    esp,0x20
c001acae:	85 c0                	test   eax,eax
c001acb0:	0f 85 e0 06 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acb6:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001acbd:	0f 85 d3 06 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acc3:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001acc6:	85 c0                	test   eax,eax
c001acc8:	0f 84 c8 06 00 00    	je     c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acce:	31 d2                	xor    edx,edx
c001acd0:	51                   	push   ecx
c001acd1:	52                   	push   edx
c001acd2:	50                   	push   eax
c001acd3:	57                   	push   edi
c001acd4:	e8 ef 7b ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001acd9:	83 c4 10             	add    esp,0x10
c001acdc:	85 c0                	test   eax,eax
c001acde:	0f 85 b2 06 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001acea:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001acee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acf2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001acf6:	0f af c2             	imul   eax,edx
c001acf9:	50                   	push   eax
c001acfa:	e8 6f 44 ff ff       	call   c000f16e <malloc>
c001acff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad06:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad0c:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ad10:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ad14:	0f af c2             	imul   eax,edx
c001ad17:	99                   	cdq    
c001ad18:	52                   	push   edx
c001ad19:	50                   	push   eax
c001ad1a:	57                   	push   edi
c001ad1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad1e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ad21:	83 c4 20             	add    esp,0x20
c001ad24:	85 c0                	test   eax,eax
c001ad26:	0f 84 6a 06 00 00    	je     c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad2c:	52                   	push   edx
c001ad2d:	31 d2                	xor    edx,edx
c001ad2f:	52                   	push   edx
c001ad30:	50                   	push   eax
c001ad31:	57                   	push   edi
c001ad32:	e8 91 7b ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	85 c0                	test   eax,eax
c001ad3c:	0f 85 54 06 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad42:	83 ec 0c             	sub    esp,0xc
c001ad45:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad49:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad4d:	31 f6                	xor    esi,esi
c001ad4f:	0f af c2             	imul   eax,edx
c001ad52:	50                   	push   eax
c001ad53:	e8 16 44 ff ff       	call   c000f16e <malloc>
c001ad58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ad5f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad65:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad69:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad6d:	0f af c2             	imul   eax,edx
c001ad70:	99                   	cdq    
c001ad71:	52                   	push   edx
c001ad72:	50                   	push   eax
c001ad73:	57                   	push   edi
c001ad74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad77:	83 c4 20             	add    esp,0x20
c001ad7a:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ad7e:	0f 86 af 00 00 00    	jbe    c001ae33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ad84:	0f b7 de             	movzx  ebx,si
c001ad87:	c1 e3 05             	shl    ebx,0x5
c001ad8a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001ad8e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ad91:	0f 85 96 00 00 00    	jne    c001ae2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001ad97:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ad9a:	31 d2                	xor    edx,edx
c001ad9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ada0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ada3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ada7:	50                   	push   eax
c001ada8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001adab:	52                   	push   edx
c001adac:	50                   	push   eax
c001adad:	57                   	push   edi
c001adae:	e8 15 7b ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	85 c0                	test   eax,eax
c001adb8:	0f 85 d8 05 00 00    	jne    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001adbe:	52                   	push   edx
c001adbf:	52                   	push   edx
c001adc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001adc4:	68 10 86 02 c0       	push   0xc0028610
c001adc9:	e8 a9 74 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001adce:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001add5:	31 d2                	xor    edx,edx
c001add7:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001addb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001addf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ade3:	59                   	pop    ecx
c001ade4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ade6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aded:	50                   	push   eax
c001adee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf6:	52                   	push   edx
c001adf7:	50                   	push   eax
c001adf8:	57                   	push   edi
c001adf9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001adfc:	83 c4 18             	add    esp,0x18
c001adff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ae02:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ae05:	50                   	push   eax
c001ae06:	68 34 86 02 c0       	push   0xc0028634
c001ae0b:	e8 67 74 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001ae10:	83 c4 0c             	add    esp,0xc
c001ae13:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ae16:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ae19:	50                   	push   eax
c001ae1a:	6a 00                	push   0x0
c001ae1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae20:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ae24:	50                   	push   eax
c001ae25:	e8 9b 58 fe ff       	call   c00006c5 <memset>
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	46                   	inc    esi
c001ae2e:	e9 47 ff ff ff       	jmp    c001ad7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ae33:	31 db                	xor    ebx,ebx
c001ae35:	50                   	push   eax
c001ae36:	68 00 01 00 00       	push   0x100
c001ae3b:	6a 00                	push   0x0
c001ae3d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ae41:	50                   	push   eax
c001ae42:	e8 7e 58 fe ff       	call   c00006c5 <memset>
c001ae47:	83 c4 0c             	add    esp,0xc
c001ae4a:	68 00 01 00 00       	push   0x100
c001ae4f:	6a 00                	push   0x0
c001ae51:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ae58:	50                   	push   eax
c001ae59:	e8 67 58 fe ff       	call   c00006c5 <memset>
c001ae5e:	83 c4 10             	add    esp,0x10
c001ae61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ae69:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ae71:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ae79:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ae81:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ae89:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ae8d:	0f 86 2f 01 00 00    	jbe    c001afc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ae93:	0f b7 f3             	movzx  esi,bx
c001ae96:	6b f6 28             	imul   esi,esi,0x28
c001ae99:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001ae9d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aea4:	50                   	push   eax
c001aea5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aea9:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001aead:	8b 06                	mov    eax,DWORD PTR [esi]
c001aeaf:	6b d2 28             	imul   edx,edx,0x28
c001aeb2:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001aeb6:	31 d2                	xor    edx,edx
c001aeb8:	52                   	push   edx
c001aeb9:	50                   	push   eax
c001aeba:	57                   	push   edi
c001aebb:	e8 08 7a ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001aec0:	83 c4 0c             	add    esp,0xc
c001aec3:	6a 20                	push   0x20
c001aec5:	6a 00                	push   0x0
c001aec7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001aece:	51                   	push   ecx
c001aecf:	e8 f1 57 fe ff       	call   c00006c5 <memset>
c001aed4:	58                   	pop    eax
c001aed5:	8b 07                	mov    eax,DWORD PTR [edi]
c001aed7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001aedb:	52                   	push   edx
c001aedc:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001aee3:	51                   	push   ecx
c001aee4:	6a 00                	push   0x0
c001aee6:	6a 1f                	push   0x1f
c001aee8:	57                   	push   edi
c001aee9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aeec:	83 c4 1c             	add    esp,0x1c
c001aeef:	6a 09                	push   0x9
c001aef1:	68 51 86 02 c0       	push   0xc0028651
c001aef6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001aefd:	51                   	push   ecx
c001aefe:	e8 29 57 fe ff       	call   c000062c <memcmp>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	85 c0                	test   eax,eax
c001af08:	75 21                	jne    c001af2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001af0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af16:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001af1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af1d:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001af24:	89 c8                	mov    eax,ecx
c001af26:	40                   	inc    eax
c001af27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af2b:	50                   	push   eax
c001af2c:	6a 09                	push   0x9
c001af2e:	68 5b 86 02 c0       	push   0xc002865b
c001af33:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af3a:	50                   	push   eax
c001af3b:	e8 ec 56 fe ff       	call   c000062c <memcmp>
c001af40:	83 c4 10             	add    esp,0x10
c001af43:	85 c0                	test   eax,eax
c001af45:	75 21                	jne    c001af68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001af47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af4b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af53:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001af57:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af5a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001af61:	89 c8                	mov    eax,ecx
c001af63:	40                   	inc    eax
c001af64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af68:	50                   	push   eax
c001af69:	50                   	push   eax
c001af6a:	68 e6 85 02 c0       	push   0xc00285e6
c001af6f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af76:	50                   	push   eax
c001af77:	e8 39 58 fe ff       	call   c00007b5 <strcmp>
c001af7c:	83 c4 10             	add    esp,0x10
c001af7f:	85 c0                	test   eax,eax
c001af81:	75 0f                	jne    c001af92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001af83:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af92:	50                   	push   eax
c001af93:	50                   	push   eax
c001af94:	68 ee 85 02 c0       	push   0xc00285ee
c001af99:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001afa0:	50                   	push   eax
c001afa1:	e8 0f 58 fe ff       	call   c00007b5 <strcmp>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	85 c0                	test   eax,eax
c001afab:	75 0f                	jne    c001afbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001afad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001afb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001afb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afbc:	43                   	inc    ebx
c001afbd:	e9 c7 fe ff ff       	jmp    c001ae89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001afc2:	31 d2                	xor    edx,edx
c001afc4:	50                   	push   eax
c001afc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afc9:	52                   	push   edx
c001afca:	50                   	push   eax
c001afcb:	57                   	push   edi
c001afcc:	e8 f7 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001afd1:	5a                   	pop    edx
c001afd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afd6:	e8 93 41 ff ff       	call   c000f16e <malloc>
c001afdb:	31 d2                	xor    edx,edx
c001afdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001afe1:	59                   	pop    ecx
c001afe2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001afe4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001afe8:	53                   	push   ebx
c001afe9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aff1:	52                   	push   edx
c001aff2:	50                   	push   eax
c001aff3:	57                   	push   edi
c001aff4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aff7:	83 c4 14             	add    esp,0x14
c001affa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001affe:	e8 6b 41 ff ff       	call   c000f16e <malloc>
c001b003:	31 d2                	xor    edx,edx
c001b005:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b009:	83 c4 0c             	add    esp,0xc
c001b00c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b010:	52                   	push   edx
c001b011:	50                   	push   eax
c001b012:	57                   	push   edi
c001b013:	e8 b0 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001b018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b01b:	31 d2                	xor    edx,edx
c001b01d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b021:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b027:	52                   	push   edx
c001b028:	50                   	push   eax
c001b029:	57                   	push   edi
c001b02a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b02d:	83 c4 20             	add    esp,0x20
c001b030:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b038:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b03c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b040:	0f 84 54 03 00 00    	je     c001b39a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001b046:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b04d:	31 d2                	xor    edx,edx
c001b04f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b053:	c1 e8 03             	shr    eax,0x3
c001b056:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b05a:	50                   	push   eax
c001b05b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b05f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b063:	52                   	push   edx
c001b064:	50                   	push   eax
c001b065:	57                   	push   edi
c001b066:	e8 5d 78 ff ff       	call   c00128c8 <File::seek(unsigned long long)>
c001b06b:	58                   	pop    eax
c001b06c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b070:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b077:	e8 f2 40 ff ff       	call   c000f16e <malloc>
c001b07c:	31 d2                	xor    edx,edx
c001b07e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b082:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b084:	58                   	pop    eax
c001b085:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b089:	50                   	push   eax
c001b08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b08e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b092:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b099:	52                   	push   edx
c001b09a:	50                   	push   eax
c001b09b:	57                   	push   edi
c001b09c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b09f:	83 c4 20             	add    esp,0x20
c001b0a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b0aa:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b0ae:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b0b2:	0f 8d c6 02 00 00    	jge    c001b37e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001b0b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0c0:	31 db                	xor    ebx,ebx
c001b0c2:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b0c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b0c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0cd:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b0d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0d5:	c1 e8 08             	shr    eax,0x8
c001b0d8:	89 c6                	mov    esi,eax
c001b0da:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b0de:	c1 e6 04             	shl    esi,0x4
c001b0e1:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b0e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b0e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0ec:	85 c0                	test   eax,eax
c001b0ee:	0f 85 17 01 00 00    	jne    c001b20b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b0f4:	83 ec 0c             	sub    esp,0xc
c001b0f7:	b3 01                	mov    bl,0x1
c001b0f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0fd:	03 06                	add    eax,DWORD PTR [esi]
c001b0ff:	50                   	push   eax
c001b100:	e8 24 f8 ff ff       	call   c001a929 <Thr::getAddressOfKernelSymbol(char const*)>
c001b105:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b109:	83 c4 10             	add    esp,0x10
c001b10c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b111:	0f 85 f4 00 00 00    	jne    c001b20b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b117:	50                   	push   eax
c001b118:	50                   	push   eax
c001b119:	68 65 86 02 c0       	push   0xc0028665
c001b11e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b122:	03 06                	add    eax,DWORD PTR [esi]
c001b124:	50                   	push   eax
c001b125:	e8 8b 56 fe ff       	call   c00007b5 <strcmp>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	85 c0                	test   eax,eax
c001b12f:	75 0a                	jne    c001b13b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b131:	b8 dc 34 02 c0       	mov    eax,0xc00234dc
c001b136:	e9 ca 00 00 00       	jmp    c001b205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b13b:	50                   	push   eax
c001b13c:	50                   	push   eax
c001b13d:	68 6f 86 02 c0       	push   0xc002866f
c001b142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b146:	03 06                	add    eax,DWORD PTR [esi]
c001b148:	50                   	push   eax
c001b149:	e8 67 56 fe ff       	call   c00007b5 <strcmp>
c001b14e:	83 c4 10             	add    esp,0x10
c001b151:	85 c0                	test   eax,eax
c001b153:	75 0a                	jne    c001b15f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b155:	b8 10 32 02 c0       	mov    eax,0xc0023210
c001b15a:	e9 a6 00 00 00       	jmp    c001b205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b15f:	53                   	push   ebx
c001b160:	53                   	push   ebx
c001b161:	68 78 86 02 c0       	push   0xc0028678
c001b166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b16a:	03 06                	add    eax,DWORD PTR [esi]
c001b16c:	50                   	push   eax
c001b16d:	e8 43 56 fe ff       	call   c00007b5 <strcmp>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	85 c0                	test   eax,eax
c001b177:	75 0a                	jne    c001b183 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b179:	b8 dc 35 02 c0       	mov    eax,0xc00235dc
c001b17e:	e9 82 00 00 00       	jmp    c001b205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b183:	51                   	push   ecx
c001b184:	51                   	push   ecx
c001b185:	68 82 86 02 c0       	push   0xc0028682
c001b18a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b18e:	03 06                	add    eax,DWORD PTR [esi]
c001b190:	50                   	push   eax
c001b191:	e8 1f 56 fe ff       	call   c00007b5 <strcmp>
c001b196:	83 c4 10             	add    esp,0x10
c001b199:	85 c0                	test   eax,eax
c001b19b:	74 63                	je     c001b200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b19d:	50                   	push   eax
c001b19e:	50                   	push   eax
c001b19f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1a3:	03 06                	add    eax,DWORD PTR [esi]
c001b1a5:	50                   	push   eax
c001b1a6:	68 8b 86 02 c0       	push   0xc002868b
c001b1ab:	e8 c7 70 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b1b0:	58                   	pop    eax
c001b1b1:	5a                   	pop    edx
c001b1b2:	68 a5 86 02 c0       	push   0xc00286a5
c001b1b7:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b1be:	53                   	push   ebx
c001b1bf:	e8 a0 55 fe ff       	call   c0000764 <strcpy>
c001b1c4:	59                   	pop    ecx
c001b1c5:	58                   	pop    eax
c001b1c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ca:	03 06                	add    eax,DWORD PTR [esi]
c001b1cc:	50                   	push   eax
c001b1cd:	53                   	push   ebx
c001b1ce:	e8 48 56 fe ff       	call   c000081b <strcat>
c001b1d3:	58                   	pop    eax
c001b1d4:	5a                   	pop    edx
c001b1d5:	68 3b 87 02 c0       	push   0xc002873b
c001b1da:	53                   	push   ebx
c001b1db:	e8 3b 56 fe ff       	call   c000081b <strcat>
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1e8:	0f 84 4b 01 00 00    	je     c001b339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1ee:	83 ec 0c             	sub    esp,0xc
c001b1f1:	53                   	push   ebx
c001b1f2:	e8 e0 d8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b1fe:	eb 0b                	jmp    c001b20b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b200:	b8 5c 33 02 c0       	mov    eax,0xc002335c
c001b205:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b209:	b3 01                	mov    bl,0x1
c001b20b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b210:	0f 85 80 00 00 00    	jne    c001b296 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b216:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b21d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b221:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b225:	01 ce                	add    esi,ecx
c001b227:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b22f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b231:	0f 94 c2             	sete   dl
c001b234:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b23c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b241:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b245:	84 db                	test   bl,bl
c001b247:	74 31                	je     c001b27a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b249:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b24d:	01 c3                	add    ebx,eax
c001b24f:	84 d2                	test   dl,dl
c001b251:	75 0a                	jne    c001b25d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b253:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b257:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b25b:	76 32                	jbe    c001b28f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b25d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b262:	0f 84 d1 00 00 00    	je     c001b339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	68 bc 86 02 c0       	push   0xc00286bc
c001b270:	e8 62 d8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	eb 15                	jmp    c001b28f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b27a:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b27d:	84 d2                	test   dl,dl
c001b27f:	75 0e                	jne    c001b28f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b281:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b285:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b289:	77 04                	ja     c001b28f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b28b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b28f:	89 1e                	mov    DWORD PTR [esi],ebx
c001b291:	e9 df 00 00 00       	jmp    c001b375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b296:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b29b:	75 6e                	jne    c001b30b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b29d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b2a4:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b2a8:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b2ac:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b2b4:	74 17                	je     c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b2b6:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b2be:	74 0d                	je     c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b2c0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b2c4:	83 e8 04             	sub    eax,0x4
c001b2c7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b2cb:	76 17                	jbe    c001b2e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b2cd:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b2d2:	74 65                	je     c001b339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	68 d8 86 02 c0       	push   0xc00286d8
c001b2dc:	e8 f6 d7 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b2e1:	83 c4 10             	add    esp,0x10
c001b2e4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b2e6:	84 db                	test   bl,bl
c001b2e8:	74 13                	je     c001b2fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b2ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2ee:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b2f5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b2f9:	01 d0                	add    eax,edx
c001b2fb:	eb 06                	jmp    c001b303 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b2fd:	89 d0                	mov    eax,edx
c001b2ff:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b303:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b307:	89 06                	mov    DWORD PTR [esi],eax
c001b309:	eb 6a                	jmp    c001b375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b30b:	50                   	push   eax
c001b30c:	50                   	push   eax
c001b30d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b312:	50                   	push   eax
c001b313:	68 f4 86 02 c0       	push   0xc00286f4
c001b318:	e8 5a 6f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b31d:	83 c4 10             	add    esp,0x10
c001b320:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b325:	74 12                	je     c001b339 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	68 ff 86 02 c0       	push   0xc00286ff
c001b32f:	e8 a3 d7 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	eb 3c                	jmp    c001b375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b339:	83 ec 0c             	sub    esp,0xc
c001b33c:	57                   	push   edi
c001b33d:	e8 26 75 ff ff       	call   c0012868 <File::close()>
c001b342:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b345:	8b 07                	mov    eax,DWORD PTR [edi]
c001b347:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b34a:	59                   	pop    ecx
c001b34b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b34f:	e8 2a 3e ff ff       	call   c000f17e <free>
c001b354:	5b                   	pop    ebx
c001b355:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b359:	e8 20 3e ff ff       	call   c000f17e <free>
c001b35e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b361:	e8 18 3e ff ff       	call   c000f17e <free>
c001b366:	5e                   	pop    esi
c001b367:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b36b:	e8 0e 3e ff ff       	call   c000f17e <free>
c001b370:	83 c4 10             	add    esp,0x10
c001b373:	eb 21                	jmp    c001b396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b375:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b379:	e9 2c fd ff ff       	jmp    c001b0aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b37e:	83 ec 0c             	sub    esp,0xc
c001b381:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b385:	e8 f4 3d ff ff       	call   c000f17e <free>
c001b38a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	e9 a2 fc ff ff       	jmp    c001b038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b396:	31 c0                	xor    eax,eax
c001b398:	eb 32                	jmp    c001b3cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b39a:	83 ec 0c             	sub    esp,0xc
c001b39d:	57                   	push   edi
c001b39e:	e8 c5 74 ff ff       	call   c0012868 <File::close()>
c001b3a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b3a6:	8b 07                	mov    eax,DWORD PTR [edi]
c001b3a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ab:	58                   	pop    eax
c001b3ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3b0:	e8 c9 3d ff ff       	call   c000f17e <free>
c001b3b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b3b8:	e8 c1 3d ff ff       	call   c000f17e <free>
c001b3bd:	5a                   	pop    edx
c001b3be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b3c2:	e8 b7 3d ff ff       	call   c000f17e <free>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	b0 01                	mov    al,0x1
c001b3cc:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b3d2:	5b                   	pop    ebx
c001b3d3:	5e                   	pop    esi
c001b3d4:	5f                   	pop    edi
c001b3d5:	5d                   	pop    ebp
c001b3d6:	c3                   	ret    

c001b3d7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b3d7:	56                   	push   esi
c001b3d8:	31 d2                	xor    edx,edx
c001b3da:	53                   	push   ebx
c001b3db:	8b 1d 60 b2 02 c0    	mov    ebx,DWORD PTR ds:0xc002b260
c001b3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b3e5:	39 d3                	cmp    ebx,edx
c001b3e7:	7e 1b                	jle    c001b404 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b3e9:	8b 04 95 80 b4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4b80]
c001b3f0:	39 c8                	cmp    eax,ecx
c001b3f2:	77 0d                	ja     c001b401 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b3f4:	8b 34 95 80 b2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4d80]
c001b3fb:	01 c6                	add    esi,eax
c001b3fd:	39 ce                	cmp    esi,ecx
c001b3ff:	77 05                	ja     c001b406 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b401:	42                   	inc    edx
c001b402:	eb e1                	jmp    c001b3e5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b404:	31 c0                	xor    eax,eax
c001b406:	5b                   	pop    ebx
c001b407:	5e                   	pop    esi
c001b408:	c3                   	ret    

c001b409 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b409:	53                   	push   ebx
c001b40a:	31 c0                	xor    eax,eax
c001b40c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b410:	8b 1d 60 b2 02 c0    	mov    ebx,DWORD PTR ds:0xc002b260
c001b416:	39 c3                	cmp    ebx,eax
c001b418:	7e 22                	jle    c001b43c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b41a:	8b 14 85 80 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4b80]
c001b421:	39 ca                	cmp    edx,ecx
c001b423:	77 14                	ja     c001b439 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b425:	03 14 85 80 b2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4d80]
c001b42c:	39 ca                	cmp    edx,ecx
c001b42e:	76 09                	jbe    c001b439 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b430:	8b 04 85 80 b6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4980]
c001b437:	eb 05                	jmp    c001b43e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b439:	40                   	inc    eax
c001b43a:	eb da                	jmp    c001b416 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b43c:	31 c0                	xor    eax,eax
c001b43e:	5b                   	pop    ebx
c001b43f:	c3                   	ret    

c001b440 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b440:	53                   	push   ebx
c001b441:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b445:	53                   	push   ebx
c001b446:	e8 8c ff ff ff       	call   c001b3d7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b44b:	5a                   	pop    edx
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	85 c0                	test   eax,eax
c001b450:	74 04                	je     c001b456 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b452:	89 da                	mov    edx,ebx
c001b454:	29 c2                	sub    edx,eax
c001b456:	89 d0                	mov    eax,edx
c001b458:	5b                   	pop    ebx
c001b459:	c3                   	ret    

c001b45a <Thr::loadDLL(char const*, bool)>:
c001b45a:	55                   	push   ebp
c001b45b:	57                   	push   edi
c001b45c:	56                   	push   esi
c001b45d:	53                   	push   ebx
c001b45e:	81 ec 34 01 00 00    	sub    esp,0x134
c001b464:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b46b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b472:	56                   	push   esi
c001b473:	68 17 87 02 c0       	push   0xc0028717
c001b478:	e8 fa 6d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b47d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b484:	e8 ff 6c ff ff       	call   c0012188 <operator new(unsigned long)>
c001b489:	83 c4 0c             	add    esp,0xc
c001b48c:	89 c3                	mov    ebx,eax
c001b48e:	ff 35 54 ba 02 c0    	push   DWORD PTR ds:0xc002ba54
c001b494:	56                   	push   esi
c001b495:	50                   	push   eax
c001b496:	e8 0b 73 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001b49b:	83 c4 0c             	add    esp,0xc
c001b49e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b4a2:	50                   	push   eax
c001b4a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b4a7:	50                   	push   eax
c001b4a8:	53                   	push   ebx
c001b4a9:	e8 08 76 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001b4ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4b6:	83 c4 10             	add    esp,0x10
c001b4b9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b4be:	75 0a                	jne    c001b4ca <Thr::loadDLL(char const*, bool)+0x70>
c001b4c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4c4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b4c8:	75 3c                	jne    c001b506 <Thr::loadDLL(char const*, bool)+0xac>
c001b4ca:	89 e8                	mov    eax,ebp
c001b4cc:	84 c0                	test   al,al
c001b4ce:	0f 84 3d 01 00 00    	je     c001b611 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b4d4:	50                   	push   eax
c001b4d5:	50                   	push   eax
c001b4d6:	68 28 87 02 c0       	push   0xc0028728
c001b4db:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b4df:	53                   	push   ebx
c001b4e0:	e8 7f 52 fe ff       	call   c0000764 <strcpy>
c001b4e5:	58                   	pop    eax
c001b4e6:	5a                   	pop    edx
c001b4e7:	56                   	push   esi
c001b4e8:	53                   	push   ebx
c001b4e9:	e8 2d 53 fe ff       	call   c000081b <strcat>
c001b4ee:	59                   	pop    ecx
c001b4ef:	5f                   	pop    edi
c001b4f0:	68 3b 87 02 c0       	push   0xc002873b
c001b4f5:	53                   	push   ebx
c001b4f6:	e8 20 53 fe ff       	call   c000081b <strcat>
c001b4fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4fe:	e8 d4 d5 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	e8 2a 5f ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c001b50b:	51                   	push   ecx
c001b50c:	6a 03                	push   0x3
c001b50e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b512:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b516:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b51c:	83 d3 00             	adc    ebx,0x0
c001b51f:	89 ca                	mov    edx,ecx
c001b521:	89 d1                	mov    ecx,edx
c001b523:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b527:	51                   	push   ecx
c001b528:	50                   	push   eax
c001b529:	e8 4a 65 ff ff       	call   c0011a78 <VAS::allocatePages(int, int)>
c001b52e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b531:	89 c3                	mov    ebx,eax
c001b533:	e8 aa 51 fe ff       	call   c00006e2 <strlen>
c001b538:	8b 3d 60 b2 02 c0    	mov    edi,DWORD PTR ds:0xc002b260
c001b53e:	40                   	inc    eax
c001b53f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b542:	e8 27 3c ff ff       	call   c000f16e <malloc>
c001b547:	89 04 bd 80 b6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4980],eax
c001b54e:	5f                   	pop    edi
c001b54f:	58                   	pop    eax
c001b550:	a1 60 b2 02 c0       	mov    eax,ds:0xc002b260
c001b555:	56                   	push   esi
c001b556:	ff 34 85 80 b6 02 c0 	push   DWORD PTR [eax*4-0x3ffd4980]
c001b55d:	e8 02 52 fe ff       	call   c0000764 <strcpy>
c001b562:	a1 60 b2 02 c0       	mov    eax,ds:0xc002b260
c001b567:	8d 50 01             	lea    edx,[eax+0x1]
c001b56a:	89 1c 85 80 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4b80],ebx
c001b571:	89 15 60 b2 02 c0    	mov    DWORD PTR ds:0xc002b260,edx
c001b577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b57b:	83 c4 0c             	add    esp,0xc
c001b57e:	89 14 85 80 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d80],edx
c001b585:	6a 01                	push   0x1
c001b587:	53                   	push   ebx
c001b588:	56                   	push   esi
c001b589:	e8 ab f6 ff ff       	call   c001ac39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b58e:	83 c4 10             	add    esp,0x10
c001b591:	89 c7                	mov    edi,eax
c001b593:	fe c8                	dec    al
c001b595:	74 16                	je     c001b5ad <Thr::loadDLL(char const*, bool)+0x153>
c001b597:	89 e8                	mov    eax,ebp
c001b599:	84 c0                	test   al,al
c001b59b:	74 10                	je     c001b5ad <Thr::loadDLL(char const*, bool)+0x153>
c001b59d:	83 ec 0c             	sub    esp,0xc
c001b5a0:	68 3d 87 02 c0       	push   0xc002873d
c001b5a5:	e8 2d d5 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b5aa:	83 c4 10             	add    esp,0x10
c001b5ad:	31 f6                	xor    esi,esi
c001b5af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5b7:	05 ff 0f 00 00       	add    eax,0xfff
c001b5bc:	83 d2 00             	adc    edx,0x0
c001b5bf:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b5c3:	c1 ea 0c             	shr    edx,0xc
c001b5c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b5ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b5ce:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b5d2:	ba 00 00 00 00       	mov    edx,0x0
c001b5d7:	89 d0                	mov    eax,edx
c001b5d9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b5dd:	73 2c                	jae    c001b60b <Thr::loadDLL(char const*, bool)+0x1b1>
c001b5df:	e8 51 5e ff ff       	call   c0011435 <Virt::getAKernelVAS()>
c001b5e4:	89 f5                	mov    ebp,esi
c001b5e6:	c1 e5 0c             	shl    ebp,0xc
c001b5e9:	52                   	push   edx
c001b5ea:	01 dd                	add    ebp,ebx
c001b5ec:	52                   	push   edx
c001b5ed:	55                   	push   ebp
c001b5ee:	50                   	push   eax
c001b5ef:	e8 ec 5f ff ff       	call   c00115e0 <VAS::getPageTableEntry(unsigned long)>
c001b5f4:	83 c4 10             	add    esp,0x10
c001b5f7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b5fa:	75 0c                	jne    c001b608 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	55                   	push   ebp
c001b600:	e8 89 40 ff ff       	call   c000f68e <Phys::freePage(unsigned long)>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	46                   	inc    esi
c001b609:	eb a4                	jmp    c001b5af <Thr::loadDLL(char const*, bool)+0x155>
c001b60b:	89 f8                	mov    eax,edi
c001b60d:	84 c0                	test   al,al
c001b60f:	75 02                	jne    c001b613 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b611:	31 db                	xor    ebx,ebx
c001b613:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b619:	89 d8                	mov    eax,ebx
c001b61b:	5b                   	pop    ebx
c001b61c:	5e                   	pop    esi
c001b61d:	5f                   	pop    edi
c001b61e:	5d                   	pop    ebp
c001b61f:	c3                   	ret    

c001b620 <Thr::executeDLL(unsigned long, void*)>:
c001b620:	56                   	push   esi
c001b621:	53                   	push   ebx
c001b622:	51                   	push   ecx
c001b623:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b62b:	85 db                	test   ebx,ebx
c001b62d:	75 10                	jne    c001b63f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b62f:	83 ec 0c             	sub    esp,0xc
c001b632:	68 5c 87 02 c0       	push   0xc002875c
c001b637:	e8 9b d4 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b643:	89 d8                	mov    eax,ebx
c001b645:	5a                   	pop    edx
c001b646:	5b                   	pop    ebx
c001b647:	5e                   	pop    esi
c001b648:	ff e0                	jmp    eax

c001b64a <changeTSS>:
c001b64a:	83 ec 0c             	sub    esp,0xc
c001b64d:	e8 02 c3 ff ff       	call   c0017954 <CPU::current()>
c001b652:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b658:	83 ec 08             	sub    esp,0x8
c001b65b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b65e:	05 7c 11 00 00       	add    eax,0x117c
c001b663:	c1 e1 15             	shl    ecx,0x15
c001b666:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b66b:	29 ca                	sub    edx,ecx
c001b66d:	52                   	push   edx
c001b66e:	50                   	push   eax
c001b66f:	e8 bc 55 ff ff       	call   c0010c30 <TSS::setESP(unsigned long)>
c001b674:	83 c4 1c             	add    esp,0x1c
c001b677:	c3                   	ret    

c001b678 <Process::addArgs(char**)>:
c001b678:	57                   	push   edi
c001b679:	56                   	push   esi
c001b67a:	53                   	push   ebx
c001b67b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b67f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b683:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b68d:	85 ff                	test   edi,edi
c001b68f:	74 3d                	je     c001b6ce <Process::addArgs(char**)+0x56>
c001b691:	8b 07                	mov    eax,DWORD PTR [edi]
c001b693:	85 c0                	test   eax,eax
c001b695:	74 37                	je     c001b6ce <Process::addArgs(char**)+0x56>
c001b697:	31 db                	xor    ebx,ebx
c001b699:	83 ec 0c             	sub    esp,0xc
c001b69c:	50                   	push   eax
c001b69d:	e8 40 50 fe ff       	call   c00006e2 <strlen>
c001b6a2:	40                   	inc    eax
c001b6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6a6:	e8 c3 3a ff ff       	call   c000f16e <malloc>
c001b6ab:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b6b2:	5a                   	pop    edx
c001b6b3:	59                   	pop    ecx
c001b6b4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b6b7:	43                   	inc    ebx
c001b6b8:	50                   	push   eax
c001b6b9:	e8 a6 50 fe ff       	call   c0000764 <strcpy>
c001b6be:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b6c4:	83 c4 10             	add    esp,0x10
c001b6c7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b6ca:	85 c0                	test   eax,eax
c001b6cc:	75 cb                	jne    c001b699 <Process::addArgs(char**)+0x21>
c001b6ce:	5b                   	pop    ebx
c001b6cf:	5e                   	pop    esi
c001b6d0:	5f                   	pop    edi
c001b6d1:	c3                   	ret    

c001b6d2 <Process::Process(char const*, Process*, char**)>:
c001b6d2:	56                   	push   esi
c001b6d3:	53                   	push   ebx
c001b6d4:	83 ec 14             	sub    esp,0x14
c001b6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6db:	05 0c 02 00 00       	add    eax,0x20c
c001b6e0:	bb 07 00 00 00       	mov    ebx,0x7
c001b6e5:	89 c6                	mov    esi,eax
c001b6e7:	85 db                	test   ebx,ebx
c001b6e9:	78 12                	js     c001b6fd <Process::Process(char const*, Process*, char**)+0x2b>
c001b6eb:	83 ec 0c             	sub    esp,0xc
c001b6ee:	56                   	push   esi
c001b6ef:	e8 76 a1 00 00       	call   c002586a <ThreadControlBlock::ThreadControlBlock()>
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	83 c6 63             	add    esi,0x63
c001b6fa:	4b                   	dec    ebx
c001b6fb:	eb ea                	jmp    c001b6e7 <Process::Process(char const*, Process*, char**)+0x15>
c001b6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b701:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b708:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b715:	a1 64 9b 02 c0       	mov    eax,ds:0xc0029b64
c001b71a:	8d 50 01             	lea    edx,[eax+0x1]
c001b71d:	89 15 64 9b 02 c0    	mov    DWORD PTR ds:0xc0029b64,edx
c001b723:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b727:	89 02                	mov    DWORD PTR [edx],eax
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	6a 10                	push   0x10
c001b72e:	e8 55 6a ff ff       	call   c0012188 <operator new(unsigned long)>
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	89 c3                	mov    ebx,eax
c001b738:	83 ec 08             	sub    esp,0x8
c001b73b:	6a 00                	push   0x0
c001b73d:	53                   	push   ebx
c001b73e:	e8 d9 66 ff ff       	call   c0011e1c <VAS::VAS(bool)>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b74a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b754:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b762:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b766:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b770:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b776:	85 c0                	test   eax,eax
c001b778:	74 42                	je     c001b7bc <Process::Process(char const*, Process*, char**)+0xea>
c001b77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b784:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b78e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b794:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b798:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b79e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a8:	05 0c 01 00 00       	add    eax,0x10c
c001b7ad:	83 ec 08             	sub    esp,0x8
c001b7b0:	52                   	push   edx
c001b7b1:	50                   	push   eax
c001b7b2:	e8 ad 4f fe ff       	call   c0000764 <strcpy>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	eb 5c                	jmp    c001b818 <Process::Process(char const*, Process*, char**)+0x146>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	68 60 12 00 00       	push   0x1260
c001b7c4:	e8 bf 69 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b7c9:	83 c4 10             	add    esp,0x10
c001b7cc:	89 c3                	mov    ebx,eax
c001b7ce:	83 ec 08             	sub    esp,0x8
c001b7d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7d5:	53                   	push   ebx
c001b7d6:	e8 53 51 ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b7f2:	83 ec 0c             	sub    esp,0xc
c001b7f5:	50                   	push   eax
c001b7f6:	e8 34 45 ff ff       	call   c000fd2f <addToTerminalCycle(VgaText*)>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b802:	05 0c 01 00 00       	add    eax,0x10c
c001b807:	83 ec 08             	sub    esp,0x8
c001b80a:	68 86 87 02 c0       	push   0xc0028786
c001b80f:	50                   	push   eax
c001b810:	e8 4f 4f fe ff       	call   c0000764 <strcpy>
c001b815:	83 c4 10             	add    esp,0x10
c001b818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81c:	83 c0 0c             	add    eax,0xc
c001b81f:	83 ec 08             	sub    esp,0x8
c001b822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b826:	50                   	push   eax
c001b827:	e8 38 4f fe ff       	call   c0000764 <strcpy>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	83 ec 08             	sub    esp,0x8
c001b832:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b836:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b83a:	e8 39 fe ff ff       	call   c001b678 <Process::addArgs(char**)>
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	83 ec 08             	sub    esp,0x8
c001b845:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b849:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b84d:	e8 ae ee ff ff       	call   c001a700 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b852:	83 c4 10             	add    esp,0x10
c001b855:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b859:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b85d:	83 f0 01             	xor    eax,0x1
c001b860:	88 c2                	mov    dl,al
c001b862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b866:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b86c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b871:	83 ec 08             	sub    esp,0x8
c001b874:	50                   	push   eax
c001b875:	68 84 88 02 c0       	push   0xc0028884
c001b87a:	e8 f8 69 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	90                   	nop
c001b883:	83 c4 14             	add    esp,0x14
c001b886:	5b                   	pop    ebx
c001b887:	5e                   	pop    esi
c001b888:	c3                   	ret    
c001b889:	90                   	nop

c001b88a <Process::Process(bool, char const*, Process*, char**)>:
c001b88a:	56                   	push   esi
c001b88b:	53                   	push   ebx
c001b88c:	83 ec 14             	sub    esp,0x14
c001b88f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b893:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b89b:	05 0c 02 00 00       	add    eax,0x20c
c001b8a0:	bb 07 00 00 00       	mov    ebx,0x7
c001b8a5:	89 c6                	mov    esi,eax
c001b8a7:	85 db                	test   ebx,ebx
c001b8a9:	78 12                	js     c001b8bd <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	56                   	push   esi
c001b8af:	e8 b6 9f 00 00       	call   c002586a <ThreadControlBlock::ThreadControlBlock()>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	83 c6 63             	add    esi,0x63
c001b8ba:	4b                   	dec    ebx
c001b8bb:	eb ea                	jmp    c001b8a7 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b8c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8cc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b8d5:	a1 64 9b 02 c0       	mov    eax,ds:0xc0029b64
c001b8da:	8d 50 01             	lea    edx,[eax+0x1]
c001b8dd:	89 15 64 9b 02 c0    	mov    DWORD PTR ds:0xc0029b64,edx
c001b8e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8e7:	89 02                	mov    DWORD PTR [edx],eax
c001b8e9:	83 ec 0c             	sub    esp,0xc
c001b8ec:	6a 10                	push   0x10
c001b8ee:	e8 95 68 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b8f3:	83 c4 10             	add    esp,0x10
c001b8f6:	89 c3                	mov    ebx,eax
c001b8f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8fd:	83 ec 08             	sub    esp,0x8
c001b900:	50                   	push   eax
c001b901:	53                   	push   ebx
c001b902:	e8 15 65 ff ff       	call   c0011e1c <VAS::VAS(bool)>
c001b907:	83 c4 10             	add    esp,0x10
c001b90a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b90e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b918:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b926:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b92a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b934:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b93a:	85 c0                	test   eax,eax
c001b93c:	74 42                	je     c001b980 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b942:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b948:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b952:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b95c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b962:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b96c:	05 0c 01 00 00       	add    eax,0x10c
c001b971:	83 ec 08             	sub    esp,0x8
c001b974:	52                   	push   edx
c001b975:	50                   	push   eax
c001b976:	e8 e9 4d fe ff       	call   c0000764 <strcpy>
c001b97b:	83 c4 10             	add    esp,0x10
c001b97e:	eb 5c                	jmp    c001b9dc <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b980:	83 ec 0c             	sub    esp,0xc
c001b983:	68 60 12 00 00       	push   0x1260
c001b988:	e8 fb 67 ff ff       	call   c0012188 <operator new(unsigned long)>
c001b98d:	83 c4 10             	add    esp,0x10
c001b990:	89 c3                	mov    ebx,eax
c001b992:	83 ec 08             	sub    esp,0x8
c001b995:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b999:	53                   	push   ebx
c001b99a:	e8 8f 4f ff ff       	call   c001092e <VgaText::VgaText(char const*)>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9a6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	50                   	push   eax
c001b9ba:	e8 70 43 ff ff       	call   c000fd2f <addToTerminalCycle(VgaText*)>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9c6:	05 0c 01 00 00       	add    eax,0x10c
c001b9cb:	83 ec 08             	sub    esp,0x8
c001b9ce:	68 86 87 02 c0       	push   0xc0028786
c001b9d3:	50                   	push   eax
c001b9d4:	e8 8b 4d fe ff       	call   c0000764 <strcpy>
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e0:	83 c0 0c             	add    eax,0xc
c001b9e3:	83 ec 08             	sub    esp,0x8
c001b9e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9ea:	50                   	push   eax
c001b9eb:	e8 74 4d fe ff       	call   c0000764 <strcpy>
c001b9f0:	83 c4 10             	add    esp,0x10
c001b9f3:	83 ec 08             	sub    esp,0x8
c001b9f6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b9fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9fe:	e8 75 fc ff ff       	call   c001b678 <Process::addArgs(char**)>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	90                   	nop
c001ba07:	83 c4 14             	add    esp,0x14
c001ba0a:	5b                   	pop    ebx
c001ba0b:	5e                   	pop    esi
c001ba0c:	c3                   	ret    

c001ba0d <disableIRQs()>:
c001ba0d:	fa                   	cli    
c001ba0e:	ff 05 2c ba 02 c0    	inc    DWORD PTR ds:0xc002ba2c
c001ba14:	c3                   	ret    

c001ba15 <getIRQNestingLevel()>:
c001ba15:	a1 2c ba 02 c0       	mov    eax,ds:0xc002ba2c
c001ba1a:	c3                   	ret    

c001ba1b <enableIRQs()>:
c001ba1b:	a1 2c ba 02 c0       	mov    eax,ds:0xc002ba2c
c001ba20:	48                   	dec    eax
c001ba21:	a3 2c ba 02 c0       	mov    ds:0xc002ba2c,eax
c001ba26:	75 01                	jne    c001ba29 <enableIRQs()+0xe>
c001ba28:	fb                   	sti    
c001ba29:	c3                   	ret    

c001ba2a <lockScheduler()>:
c001ba2a:	eb e1                	jmp    c001ba0d <disableIRQs()>

c001ba2c <unlockScheduler()>:
c001ba2c:	eb ed                	jmp    c001ba1b <enableIRQs()>

c001ba2e <userModeEntryPoint(void*)>:
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	e8 f6 ff ff ff       	call   c001ba2c <unlockScheduler()>
c001ba36:	fb                   	sti    
c001ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba3f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ba45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba49:	83 c4 0c             	add    esp,0xc
c001ba4c:	e9 79 48 fe ff       	jmp    c00002ca <goToUsermode>

c001ba51 <lockStuff()>:
c001ba51:	e8 b7 ff ff ff       	call   c001ba0d <disableIRQs()>
c001ba56:	ff 05 28 ba 02 c0    	inc    DWORD PTR ds:0xc002ba28
c001ba5c:	c3                   	ret    

c001ba5d <taskStartupFunction>:
c001ba5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba62:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ba65:	c3                   	ret    

c001ba66 <updateTimeUsed()>:
c001ba66:	57                   	push   edi
c001ba67:	56                   	push   esi
c001ba68:	53                   	push   ebx
c001ba69:	e8 e6 be ff ff       	call   c0017954 <CPU::current()>
c001ba6e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ba75:	74 49                	je     c001bac0 <updateTimeUsed()+0x5a>
c001ba77:	0f 31                	rdtsc  
c001ba79:	89 c1                	mov    ecx,eax
c001ba7b:	a3 68 ba 02 c0       	mov    ds:0xc002ba68,eax
c001ba80:	2b 0d 58 ba 02 c0    	sub    ecx,DWORD PTR ds:0xc002ba58
c001ba86:	89 d3                	mov    ebx,edx
c001ba88:	89 0d 60 ba 02 c0    	mov    DWORD PTR ds:0xc002ba60,ecx
c001ba8e:	1b 1d 5c ba 02 c0    	sbb    ebx,DWORD PTR ds:0xc002ba5c
c001ba94:	a3 58 ba 02 c0       	mov    ds:0xc002ba58,eax
c001ba99:	89 1d 64 ba 02 c0    	mov    DWORD PTR ds:0xc002ba64,ebx
c001ba9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa4:	89 15 6c ba 02 c0    	mov    DWORD PTR ds:0xc002ba6c,edx
c001baaa:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001baad:	89 15 5c ba 02 c0    	mov    DWORD PTR ds:0xc002ba5c,edx
c001bab3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001bab6:	01 f1                	add    ecx,esi
c001bab8:	11 fb                	adc    ebx,edi
c001baba:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001babd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001bac0:	5b                   	pop    ebx
c001bac1:	5e                   	pop    esi
c001bac2:	5f                   	pop    edi
c001bac3:	c3                   	ret    

c001bac4 <switchToThread(ThreadControlBlock*)>:
c001bac4:	53                   	push   ebx
c001bac5:	83 ec 08             	sub    esp,0x8
c001bac8:	a1 28 ba 02 c0       	mov    eax,ds:0xc002ba28
c001bacd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bad1:	85 c0                	test   eax,eax
c001bad3:	75 30                	jne    c001bb05 <switchToThread(ThreadControlBlock*)+0x41>
c001bad5:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001bad8:	3c ff                	cmp    al,0xff
c001bada:	74 25                	je     c001bb01 <switchToThread(ThreadControlBlock*)+0x3d>
c001badc:	0f b6 d0             	movzx  edx,al
c001badf:	b8 84 03 00 00       	mov    eax,0x384
c001bae4:	29 d0                	sub    eax,edx
c001bae6:	c1 e0 10             	shl    eax,0x10
c001bae9:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001baec:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001baef:	e8 72 ff ff ff       	call   c001ba66 <updateTimeUsed()>
c001baf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001baf8:	83 c4 08             	add    esp,0x8
c001bafb:	5b                   	pop    ebx
c001bafc:	e9 02 48 fe ff       	jmp    c0000303 <switchToThreadASM>
c001bb01:	31 c0                	xor    eax,eax
c001bb03:	eb e7                	jmp    c001baec <switchToThread(ThreadControlBlock*)+0x28>
c001bb05:	c7 05 24 ba 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ba24,0x1
c001bb0f:	83 c4 08             	add    esp,0x8
c001bb12:	5b                   	pop    ebx
c001bb13:	c3                   	ret    

c001bb14 <Semaphore::Semaphore(int)>:
c001bb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bb1c:	89 10                	mov    DWORD PTR [eax],edx
c001bb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb22:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001bb29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb3f:	90                   	nop
c001bb40:	c3                   	ret    
c001bb41:	90                   	nop

c001bb42 <Mutex::Mutex()>:
c001bb42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb46:	6a 01                	push   0x1
c001bb48:	50                   	push   eax
c001bb49:	e8 c6 ff ff ff       	call   c001bb14 <Semaphore::Semaphore(int)>
c001bb4e:	83 c4 08             	add    esp,0x8
c001bb51:	90                   	nop
c001bb52:	c3                   	ret    
c001bb53:	90                   	nop

c001bb54 <Process::createThread(void (*)(void*), void*, int)>:
c001bb54:	55                   	push   ebp
c001bb55:	31 c9                	xor    ecx,ecx
c001bb57:	57                   	push   edi
c001bb58:	56                   	push   esi
c001bb59:	53                   	push   ebx
c001bb5a:	83 ec 1c             	sub    esp,0x1c
c001bb5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb61:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bb68:	89 f2                	mov    edx,esi
c001bb6a:	0f b7 c2             	movzx  eax,dx
c001bb6d:	83 e2 01             	and    edx,0x1
c001bb70:	74 14                	je     c001bb86 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bb72:	d1 f8                	sar    eax,1
c001bb74:	41                   	inc    ecx
c001bb75:	89 c2                	mov    edx,eax
c001bb77:	83 f9 10             	cmp    ecx,0x10
c001bb7a:	75 ee                	jne    c001bb6a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bb7c:	83 c4 1c             	add    esp,0x1c
c001bb7f:	31 c0                	xor    eax,eax
c001bb81:	5b                   	pop    ebx
c001bb82:	5e                   	pop    esi
c001bb83:	5f                   	pop    edi
c001bb84:	5d                   	pop    ebp
c001bb85:	c3                   	ret    
c001bb86:	83 ec 08             	sub    esp,0x8
c001bb89:	b8 01 00 00 00       	mov    eax,0x1
c001bb8e:	d3 e0                	shl    eax,cl
c001bb90:	09 c6                	or     esi,eax
c001bb92:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bb98:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bb9f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bba2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bba5:	01 ce                	add    esi,ecx
c001bba7:	89 f0                	mov    eax,esi
c001bba9:	c1 e0 05             	shl    eax,0x5
c001bbac:	01 c6                	add    esi,eax
c001bbae:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bbb1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bbb7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bbbd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bbc1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bbc7:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bbcd:	89 ca                	mov    edx,ecx
c001bbcf:	f7 da                	neg    edx
c001bbd1:	c1 e2 15             	shl    edx,0x15
c001bbd4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bbda:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bbe0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bbe4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bbee:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bbf4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bbf8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bbfe:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bc08:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bc12:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bc19:	50                   	push   eax
c001bc1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc1e:	68 48 ba 02 c0       	push   0xc002ba48
c001bc23:	e8 9a 9a 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc2f:	83 c4 1c             	add    esp,0x1c
c001bc32:	5b                   	pop    ebx
c001bc33:	5e                   	pop    esi
c001bc34:	5f                   	pop    edi
c001bc35:	5d                   	pop    ebp
c001bc36:	c3                   	ret    
c001bc37:	90                   	nop

c001bc38 <Process::createUserThread()>:
c001bc38:	83 ec 0c             	sub    esp,0xc
c001bc3b:	68 80 00 00 00       	push   0x80
c001bc40:	6a 00                	push   0x0
c001bc42:	68 2e ba 01 c0       	push   0xc001ba2e
c001bc47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc4b:	e8 04 ff ff ff       	call   c001bb54 <Process::createThread(void (*)(void*), void*, int)>
c001bc50:	83 c4 1c             	add    esp,0x1c
c001bc53:	c3                   	ret    

c001bc54 <setupMultitasking(void (*)())>:
c001bc54:	56                   	push   esi
c001bc55:	53                   	push   ebx
c001bc56:	53                   	push   ebx
c001bc57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc5b:	eb 10                	jmp    c001bc6d <setupMultitasking(void (*)())+0x19>
c001bc5d:	83 ec 0c             	sub    esp,0xc
c001bc60:	68 48 ba 02 c0       	push   0xc002ba48
c001bc65:	e8 aa 99 00 00       	call   c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bc6a:	83 c4 10             	add    esp,0x10
c001bc6d:	83 ec 0c             	sub    esp,0xc
c001bc70:	68 48 ba 02 c0       	push   0xc002ba48
c001bc75:	e8 7e 99 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc7a:	83 c4 10             	add    esp,0x10
c001bc7d:	84 c0                	test   al,al
c001bc7f:	74 dc                	je     c001bc5d <setupMultitasking(void (*)())+0x9>
c001bc81:	83 ec 0c             	sub    esp,0xc
c001bc84:	68 3b 07 00 00       	push   0x73b
c001bc89:	e8 fa 64 ff ff       	call   c0012188 <operator new(unsigned long)>
c001bc8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bc95:	89 c3                	mov    ebx,eax
c001bc97:	6a 00                	push   0x0
c001bc99:	68 8a 87 02 c0       	push   0xc002878a
c001bc9e:	6a 01                	push   0x1
c001bca0:	50                   	push   eax
c001bca1:	e8 e4 fb ff ff       	call   c001b88a <Process::Process(bool, char const*, Process*, char**)>
c001bca6:	83 c4 18             	add    esp,0x18
c001bca9:	89 1d 54 ba 02 c0    	mov    DWORD PTR ds:0xc002ba54,ebx
c001bcaf:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bcb5:	68 ac 88 02 c0       	push   0xc00288ac
c001bcba:	e8 b8 65 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001bcbf:	58                   	pop    eax
c001bcc0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bcc6:	e8 d8 47 ff ff       	call   c00104a3 <setActiveTerminal(VgaText*)>
c001bccb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bcd3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bcd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bcdc:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bce6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bcec:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bcf2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bcfc:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bd06:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bd10:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bd16:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bd1c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bd26:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bd2c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bd36:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bd3c:	5a                   	pop    edx
c001bd3d:	59                   	pop    ecx
c001bd3e:	68 86 87 02 c0       	push   0xc0028786
c001bd43:	50                   	push   eax
c001bd44:	e8 1b 4a fe ff       	call   c0000764 <strcpy>
c001bd49:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bd50:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bd54:	83 c4 14             	add    esp,0x14
c001bd57:	5b                   	pop    ebx
c001bd58:	5e                   	pop    esi
c001bd59:	e9 97 45 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bd5e <schedule()>:
c001bd5e:	a1 28 ba 02 c0       	mov    eax,ds:0xc002ba28
c001bd63:	85 c0                	test   eax,eax
c001bd65:	74 0b                	je     c001bd72 <schedule()+0x14>
c001bd67:	c7 05 24 ba 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ba24,0x1
c001bd71:	c3                   	ret    
c001bd72:	53                   	push   ebx
c001bd73:	83 ec 14             	sub    esp,0x14
c001bd76:	68 48 ba 02 c0       	push   0xc002ba48
c001bd7b:	e8 78 98 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bd80:	83 c4 10             	add    esp,0x10
c001bd83:	84 c0                	test   al,al
c001bd85:	75 38                	jne    c001bdbf <schedule()+0x61>
c001bd87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bd8f:	4a                   	dec    edx
c001bd90:	74 32                	je     c001bdc4 <schedule()+0x66>
c001bd92:	83 ec 0c             	sub    esp,0xc
c001bd95:	68 48 ba 02 c0       	push   0xc002ba48
c001bd9a:	e8 51 98 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bd9f:	c7 04 24 48 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba48
c001bda6:	89 c3                	mov    ebx,eax
c001bda8:	e8 67 98 00 00       	call   c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bdad:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bdb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdb7:	e8 08 fd ff ff       	call   c001bac4 <switchToThread(ThreadControlBlock*)>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	83 c4 08             	add    esp,0x8
c001bdc2:	5b                   	pop    ebx
c001bdc3:	c3                   	ret    
c001bdc4:	83 ec 08             	sub    esp,0x8
c001bdc7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bdce:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bdd4:	68 48 ba 02 c0       	push   0xc002ba48
c001bdd9:	e8 e4 98 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	eb af                	jmp    c001bd92 <schedule()+0x34>

c001bde3 <unlockStuff()>:
c001bde3:	a1 28 ba 02 c0       	mov    eax,ds:0xc002ba28
c001bde8:	48                   	dec    eax
c001bde9:	a3 28 ba 02 c0       	mov    ds:0xc002ba28,eax
c001bdee:	75 09                	jne    c001bdf9 <unlockStuff()+0x16>
c001bdf0:	a1 24 ba 02 c0       	mov    eax,ds:0xc002ba24
c001bdf5:	85 c0                	test   eax,eax
c001bdf7:	75 05                	jne    c001bdfe <unlockStuff()+0x1b>
c001bdf9:	e9 1d fc ff ff       	jmp    c001ba1b <enableIRQs()>
c001bdfe:	83 ec 0c             	sub    esp,0xc
c001be01:	c7 05 24 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ba24,0x0
c001be0b:	e8 4e ff ff ff       	call   c001bd5e <schedule()>
c001be10:	83 c4 0c             	add    esp,0xc
c001be13:	e9 03 fc ff ff       	jmp    c001ba1b <enableIRQs()>

c001be18 <Semaphore::tryAcquire()>:
c001be18:	83 ec 0c             	sub    esp,0xc
c001be1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1f:	e8 2d fc ff ff       	call   c001ba51 <lockStuff()>
c001be24:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001be27:	3b 10                	cmp    edx,DWORD PTR [eax]
c001be29:	7c 0b                	jl     c001be36 <Semaphore::tryAcquire()+0x1e>
c001be2b:	e8 b3 ff ff ff       	call   c001bde3 <unlockStuff()>
c001be30:	31 c0                	xor    eax,eax
c001be32:	83 c4 0c             	add    esp,0xc
c001be35:	c3                   	ret    
c001be36:	42                   	inc    edx
c001be37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001be3a:	e8 a4 ff ff ff       	call   c001bde3 <unlockStuff()>
c001be3f:	b0 01                	mov    al,0x1
c001be41:	83 c4 0c             	add    esp,0xc
c001be44:	c3                   	ret    
c001be45:	90                   	nop

c001be46 <Semaphore::assertLocked(char const*)>:
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be51:	e8 fb fb ff ff       	call   c001ba51 <lockStuff()>
c001be56:	8b 08                	mov    ecx,DWORD PTR [eax]
c001be58:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001be5b:	7c 05                	jl     c001be62 <Semaphore::assertLocked(char const*)+0x1c>
c001be5d:	83 c4 0c             	add    esp,0xc
c001be60:	eb 81                	jmp    c001bde3 <unlockStuff()>
c001be62:	83 ec 0c             	sub    esp,0xc
c001be65:	52                   	push   edx
c001be66:	e8 6c cc ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	83 c4 0c             	add    esp,0xc
c001be71:	e9 6d ff ff ff       	jmp    c001bde3 <unlockStuff()>

c001be76 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001be76:	83 ec 0c             	sub    esp,0xc
c001be79:	e8 97 fb ff ff       	call   c001ba15 <getIRQNestingLevel()>
c001be7e:	83 ec 08             	sub    esp,0x8
c001be81:	50                   	push   eax
c001be82:	68 e0 88 02 c0       	push   0xc00288e0
c001be87:	e8 eb 63 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001be8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be95:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be98:	e8 c1 fe ff ff       	call   c001bd5e <schedule()>
c001be9d:	e8 8a fb ff ff       	call   c001ba2c <unlockScheduler()>
c001bea2:	e8 6e fb ff ff       	call   c001ba15 <getIRQNestingLevel()>
c001bea7:	5a                   	pop    edx
c001bea8:	59                   	pop    ecx
c001bea9:	50                   	push   eax
c001beaa:	68 14 89 02 c0       	push   0xc0028914
c001beaf:	e8 c3 63 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001beb4:	83 c4 1c             	add    esp,0x1c
c001beb7:	c3                   	ret    

c001beb8 <blockTask(TaskState)>:
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bebf:	e8 66 fb ff ff       	call   c001ba2a <lockScheduler()>
c001bec4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001becc:	e8 8d fe ff ff       	call   c001bd5e <schedule()>
c001bed1:	83 c4 0c             	add    esp,0xc
c001bed4:	e9 53 fb ff ff       	jmp    c001ba2c <unlockScheduler()>

c001bed9 <waitTask(int, int*, int)>:
c001bed9:	83 ec 18             	sub    esp,0x18
c001bedc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bee5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bee8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001beec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef1:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001bef4:	6a 07                	push   0x7
c001bef6:	e8 bd ff ff ff       	call   c001beb8 <blockTask(TaskState)>
c001befb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf00:	83 c4 10             	add    esp,0x10
c001bf03:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001bf06:	85 d2                	test   edx,edx
c001bf08:	74 0a                	je     c001bf14 <waitTask(int, int*, int)+0x3b>
c001bf0a:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001bf0d:	89 02                	mov    DWORD PTR [edx],eax
c001bf0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf14:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	c3                   	ret    

c001bf1b <nanoSleepUntil(unsigned long long)>:
c001bf1b:	83 ec 0c             	sub    esp,0xc
c001bf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf26:	3b 05 30 ac 02 c0    	cmp    eax,DWORD PTR ds:0xc002ac30
c001bf2c:	89 d1                	mov    ecx,edx
c001bf2e:	1b 0d 34 ac 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ac34
c001bf34:	73 04                	jae    c001bf3a <nanoSleepUntil(unsigned long long)+0x1f>
c001bf36:	83 c4 0c             	add    esp,0xc
c001bf39:	c3                   	ret    
c001bf3a:	e8 12 fb ff ff       	call   c001ba51 <lockStuff()>
c001bf3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf45:	83 ec 08             	sub    esp,0x8
c001bf48:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001bf4b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001bf4e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bf54:	68 3c ba 02 c0       	push   0xc002ba3c
c001bf59:	e8 64 97 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bf5e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001bf65:	e8 4e ff ff ff       	call   c001beb8 <blockTask(TaskState)>
c001bf6a:	83 c4 1c             	add    esp,0x1c
c001bf6d:	e9 71 fe ff ff       	jmp    c001bde3 <unlockStuff()>

c001bf72 <nanoSleep(unsigned long long)>:
c001bf72:	a1 30 ac 02 c0       	mov    eax,ds:0xc002ac30
c001bf77:	8b 15 34 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac34
c001bf7d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001bf81:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001bf85:	eb 94                	jmp    c001bf1b <nanoSleepUntil(unsigned long long)>

c001bf87 <sleep(unsigned long long)>:
c001bf87:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bf8f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001bf94:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001bf98:	01 ca                	add    edx,ecx
c001bf9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf9e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfa2:	eb ce                	jmp    c001bf72 <nanoSleep(unsigned long long)>

c001bfa4 <Semaphore::acquire()>:
c001bfa4:	83 ec 0c             	sub    esp,0xc
c001bfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfab:	e8 a1 fa ff ff       	call   c001ba51 <lockStuff()>
c001bfb0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bfb3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bfb5:	7d 0c                	jge    c001bfc3 <Semaphore::acquire()+0x1f>
c001bfb7:	42                   	inc    edx
c001bfb8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bfbb:	83 c4 0c             	add    esp,0xc
c001bfbe:	e9 20 fe ff ff       	jmp    c001bde3 <unlockStuff()>
c001bfc3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfc9:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bfd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bfd3:	85 d2                	test   edx,edx
c001bfd5:	74 2a                	je     c001c001 <Semaphore::acquire()+0x5d>
c001bfd7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bfda:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfe0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bfe3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfe9:	83 ec 0c             	sub    esp,0xc
c001bfec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfef:	6a 05                	push   0x5
c001bff1:	e8 c2 fe ff ff       	call   c001beb8 <blockTask(TaskState)>
c001bff6:	83 c4 10             	add    esp,0x10
c001bff9:	83 c4 0c             	add    esp,0xc
c001bffc:	e9 e2 fd ff ff       	jmp    c001bde3 <unlockStuff()>
c001c001:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c007:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c00a:	eb d7                	jmp    c001bfe3 <Semaphore::acquire()+0x3f>

c001c00c <taskReturned>:
c001c00c:	83 ec 18             	sub    esp,0x18
c001c00f:	68 48 89 02 c0       	push   0xc0028948
c001c014:	e8 be ca ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001c019:	83 c4 10             	add    esp,0x10
c001c01c:	83 ec 0c             	sub    esp,0xc
c001c01f:	6a 02                	push   0x2
c001c021:	e8 92 fe ff ff       	call   c001beb8 <blockTask(TaskState)>
c001c026:	e8 ff f9 ff ff       	call   c001ba2a <lockScheduler()>
c001c02b:	e8 2e fd ff ff       	call   c001bd5e <schedule()>
c001c030:	e8 f7 f9 ff ff       	call   c001ba2c <unlockScheduler()>
c001c035:	83 c4 10             	add    esp,0x10
c001c038:	eb e2                	jmp    c001c01c <taskReturned+0x10>

c001c03a <unblockTask(ThreadControlBlock*)>:
c001c03a:	53                   	push   ebx
c001c03b:	83 ec 08             	sub    esp,0x8
c001c03e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c042:	e8 e3 f9 ff ff       	call   c001ba2a <lockScheduler()>
c001c047:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c04a:	85 c0                	test   eax,eax
c001c04c:	74 5c                	je     c001c0aa <unblockTask(ThreadControlBlock*)+0x70>
c001c04e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c051:	48                   	dec    eax
c001c052:	74 31                	je     c001c085 <unblockTask(ThreadControlBlock*)+0x4b>
c001c054:	83 ec 0c             	sub    esp,0xc
c001c057:	68 48 ba 02 c0       	push   0xc002ba48
c001c05c:	e8 8f 95 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	85 c0                	test   eax,eax
c001c066:	75 17                	jne    c001c07f <unblockTask(ThreadControlBlock*)+0x45>
c001c068:	eb 65                	jmp    c001c0cf <unblockTask(ThreadControlBlock*)+0x95>
c001c06a:	83 ec 08             	sub    esp,0x8
c001c06d:	50                   	push   eax
c001c06e:	68 48 ba 02 c0       	push   0xc002ba48
c001c073:	e8 88 98 00 00       	call   c0025900 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	85 c0                	test   eax,eax
c001c07d:	74 50                	je     c001c0cf <unblockTask(ThreadControlBlock*)+0x95>
c001c07f:	39 c3                	cmp    ebx,eax
c001c081:	75 e7                	jne    c001c06a <unblockTask(ThreadControlBlock*)+0x30>
c001c083:	eb 1c                	jmp    c001c0a1 <unblockTask(ThreadControlBlock*)+0x67>
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	68 38 8a 02 c0       	push   0xc0028a38
c001c08d:	e8 e5 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c092:	c7 04 24 c4 89 02 c0 	mov    DWORD PTR [esp],0xc00289c4
c001c099:	e8 d9 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c09e:	83 c4 10             	add    esp,0x10
c001c0a1:	83 c4 08             	add    esp,0x8
c001c0a4:	5b                   	pop    ebx
c001c0a5:	e9 82 f9 ff ff       	jmp    c001ba2c <unlockScheduler()>
c001c0aa:	83 ec 0c             	sub    esp,0xc
c001c0ad:	68 7c 89 02 c0       	push   0xc002897c
c001c0b2:	e8 c0 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0b7:	c7 04 24 c4 89 02 c0 	mov    DWORD PTR [esp],0xc00289c4
c001c0be:	e8 b4 61 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c0c3:	83 c4 10             	add    esp,0x10
c001c0c6:	83 c4 08             	add    esp,0x8
c001c0c9:	5b                   	pop    ebx
c001c0ca:	e9 5d f9 ff ff       	jmp    c001ba2c <unlockScheduler()>
c001c0cf:	83 ec 08             	sub    esp,0x8
c001c0d2:	53                   	push   ebx
c001c0d3:	68 48 ba 02 c0       	push   0xc002ba48
c001c0d8:	e8 e5 95 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	83 c4 08             	add    esp,0x8
c001c0e3:	5b                   	pop    ebx
c001c0e4:	e9 43 f9 ff ff       	jmp    c001ba2c <unlockScheduler()>

c001c0e9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c0e9:	55                   	push   ebp
c001c0ea:	57                   	push   edi
c001c0eb:	56                   	push   esi
c001c0ec:	53                   	push   ebx
c001c0ed:	83 ec 1c             	sub    esp,0x1c
c001c0f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0f7:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c0fd:	85 c9                	test   ecx,ecx
c001c0ff:	7e 20                	jle    c001c121 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c101:	31 f6                	xor    esi,esi
c001c103:	83 ec 0c             	sub    esp,0xc
c001c106:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c10d:	46                   	inc    esi
c001c10e:	e8 6b 30 ff ff       	call   c000f17e <free>
c001c113:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c116:	83 c4 10             	add    esp,0x10
c001c119:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c11f:	7f e2                	jg     c001c103 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c121:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c12b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c130:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c133:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c136:	d3 c0                	rol    eax,cl
c001c138:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c13f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c142:	89 f7                	mov    edi,esi
c001c144:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c14c:	0f 85 4f 01 00 00    	jne    c001c2a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c152:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c158:	85 c0                	test   eax,eax
c001c15a:	0f 84 aa 00 00 00    	je     c001c20a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c160:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c163:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c167:	31 c9                	xor    ecx,ecx
c001c169:	eb 10                	jmp    c001c17b <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c16b:	41                   	inc    ecx
c001c16c:	83 f9 10             	cmp    ecx,0x10
c001c16f:	0f 84 95 00 00 00    	je     c001c20a <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c175:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c17b:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c182:	d3 fa                	sar    edx,cl
c001c184:	83 e2 01             	and    edx,0x1
c001c187:	74 e2                	je     c001c16b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c189:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c18c:	01 ca                	add    edx,ecx
c001c18e:	89 d5                	mov    ebp,edx
c001c190:	c1 e5 05             	shl    ebp,0x5
c001c193:	01 ea                	add    edx,ebp
c001c195:	01 d0                	add    eax,edx
c001c197:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c19d:	83 fd 07             	cmp    ebp,0x7
c001c1a0:	75 c9                	jne    c001c16b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1a2:	05 40 02 00 00       	add    eax,0x240
c001c1a7:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c1aa:	83 fd ff             	cmp    ebp,0xffffffff
c001c1ad:	0f 8c 08 01 00 00    	jl     c001c2bb <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c1b3:	0f 84 b9 01 00 00    	je     c001c372 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c1b9:	85 ed                	test   ebp,ebp
c001c1bb:	0f 84 a0 01 00 00    	je     c001c361 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c1c1:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c1c3:	75 a6                	jne    c001c16b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1c5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c1cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1cf:	01 d0                	add    eax,edx
c001c1d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c1d5:	83 ec 0c             	sub    esp,0xc
c001c1d8:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c1de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c1e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c1e7:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c1ee:	50                   	push   eax
c001c1ef:	e8 46 fe ff ff       	call   c001c03a <unblockTask(ThreadControlBlock*)>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1fe:	89 f7                	mov    edi,esi
c001c200:	41                   	inc    ecx
c001c201:	83 f9 10             	cmp    ecx,0x10
c001c204:	0f 85 6b ff ff ff    	jne    c001c175 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c20a:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c210:	85 c0                	test   eax,eax
c001c212:	74 5d                	je     c001c271 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c214:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c21a:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c220:	74 4f                	je     c001c271 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c222:	83 ec 0c             	sub    esp,0xc
c001c225:	68 48 ba 02 c0       	push   0xc002ba48
c001c22a:	e8 c1 93 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c22f:	c7 04 24 48 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba48
c001c236:	89 c7                	mov    edi,eax
c001c238:	e8 bb 93 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c23d:	83 c4 10             	add    esp,0x10
c001c240:	84 c0                	test   al,al
c001c242:	0f 84 e4 00 00 00    	je     c001c32c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c248:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c24b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c251:	85 d2                	test   edx,edx
c001c253:	74 0f                	je     c001c264 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c255:	83 ec 0c             	sub    esp,0xc
c001c258:	8b 02                	mov    eax,DWORD PTR [edx]
c001c25a:	52                   	push   edx
c001c25b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c25e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c261:	83 c4 10             	add    esp,0x10
c001c264:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c26e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c271:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c277:	85 db                	test   ebx,ebx
c001c279:	74 16                	je     c001c291 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c27b:	83 ec 0c             	sub    esp,0xc
c001c27e:	53                   	push   ebx
c001c27f:	e8 88 55 ff ff       	call   c001180c <VAS::~VAS()>
c001c284:	58                   	pop    eax
c001c285:	5a                   	pop    edx
c001c286:	6a 10                	push   0x10
c001c288:	53                   	push   ebx
c001c289:	e8 09 5f ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	83 ec 0c             	sub    esp,0xc
c001c294:	68 91 87 02 c0       	push   0xc0028791
c001c299:	e8 d9 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c29e:	83 c4 10             	add    esp,0x10
c001c2a1:	83 ec 08             	sub    esp,0x8
c001c2a4:	68 3b 07 00 00       	push   0x73b
c001c2a9:	68 9f 87 02 c0       	push   0xc002879f
c001c2ae:	e8 c4 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c2b3:	83 c4 2c             	add    esp,0x2c
c001c2b6:	5b                   	pop    ebx
c001c2b7:	5e                   	pop    esi
c001c2b8:	5f                   	pop    edi
c001c2b9:	5d                   	pop    ebp
c001c2ba:	c3                   	ret    
c001c2bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c2bf:	83 ec 0c             	sub    esp,0xc
c001c2c2:	68 7c 8a 02 c0       	push   0xc0028a7c
c001c2c7:	e8 0b c8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001c2cc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	89 f7                	mov    edi,esi
c001c2d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c2d8:	e9 8e fe ff ff       	jmp    c001c16b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c2dd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c2e3:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c2e9:	75 1c                	jne    c001c307 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	68 e4 8a 02 c0       	push   0xc0028ae4
c001c2f3:	e8 7f 5f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c2f8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c2ff:	e8 b4 fb ff ff       	call   c001beb8 <blockTask(TaskState)>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	83 ec 08             	sub    esp,0x8
c001c30a:	56                   	push   esi
c001c30b:	68 48 ba 02 c0       	push   0xc002ba48
c001c310:	e8 ad 93 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c315:	c7 04 24 48 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba48
c001c31c:	e8 cf 92 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c321:	83 c4 10             	add    esp,0x10
c001c324:	39 f8                	cmp    eax,edi
c001c326:	0f 84 1c ff ff ff    	je     c001c248 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c32c:	83 ec 0c             	sub    esp,0xc
c001c32f:	68 48 ba 02 c0       	push   0xc002ba48
c001c334:	e8 b7 92 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c339:	c7 04 24 48 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba48
c001c340:	89 c6                	mov    esi,eax
c001c342:	e8 cd 92 00 00       	call   c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c347:	83 c4 10             	add    esp,0x10
c001c34a:	39 f3                	cmp    ebx,esi
c001c34c:	74 b9                	je     c001c307 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c34e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c351:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c354:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c35a:	75 ab                	jne    c001c307 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c35c:	e9 7c ff ff ff       	jmp    c001c2dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c361:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c365:	83 ec 0c             	sub    esp,0xc
c001c368:	68 b0 8a 02 c0       	push   0xc0028ab0
c001c36d:	e9 55 ff ff ff       	jmp    c001c2c7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c372:	8b 36                	mov    esi,DWORD PTR [esi]
c001c374:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c378:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c37b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c37e:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c384:	01 d7                	add    edi,edx
c001c386:	89 f8                	mov    eax,edi
c001c388:	e9 44 fe ff ff       	jmp    c001c1d1 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c38d <cleanerTaskFunction(void*)>:
c001c38d:	53                   	push   ebx
c001c38e:	83 ec 08             	sub    esp,0x8
c001c391:	e8 96 f6 ff ff       	call   c001ba2c <unlockScheduler()>
c001c396:	e8 8f f6 ff ff       	call   c001ba2a <lockScheduler()>
c001c39b:	80 3d 0c ba 02 c0 00 	cmp    BYTE PTR ds:0xc002ba0c,0x0
c001c3a2:	0f 85 8e 00 00 00    	jne    c001c436 <cleanerTaskFunction(void*)+0xa9>
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	6a 02                	push   0x2
c001c3ad:	e8 c4 fa ff ff       	call   c001be76 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	c6 05 0c ba 02 c0 00 	mov    BYTE PTR ds:0xc002ba0c,0x0
c001c3bc:	e8 90 f6 ff ff       	call   c001ba51 <lockStuff()>
c001c3c1:	e8 64 f6 ff ff       	call   c001ba2a <lockScheduler()>
c001c3c6:	83 ec 0c             	sub    esp,0xc
c001c3c9:	68 30 ba 02 c0       	push   0xc002ba30
c001c3ce:	e8 25 92 00 00       	call   c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	84 c0                	test   al,al
c001c3d8:	75 40                	jne    c001c41a <cleanerTaskFunction(void*)+0x8d>
c001c3da:	83 ec 0c             	sub    esp,0xc
c001c3dd:	68 30 ba 02 c0       	push   0xc002ba30
c001c3e2:	e8 09 92 00 00       	call   c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c3e7:	c7 04 24 30 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba30
c001c3ee:	89 c3                	mov    ebx,eax
c001c3f0:	e8 1f 92 00 00       	call   c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c3f5:	c7 04 24 b5 87 02 c0 	mov    DWORD PTR [esp],0xc00287b5
c001c3fc:	e8 76 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c401:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c404:	e8 e0 fc ff ff       	call   c001c0e9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c409:	c7 04 24 ce 87 02 c0 	mov    DWORD PTR [esp],0xc00287ce
c001c410:	e8 62 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c415:	83 c4 10             	add    esp,0x10
c001c418:	eb ac                	jmp    c001c3c6 <cleanerTaskFunction(void*)+0x39>
c001c41a:	e8 0d f6 ff ff       	call   c001ba2c <unlockScheduler()>
c001c41f:	e8 bf f9 ff ff       	call   c001bde3 <unlockStuff()>
c001c424:	e8 01 f6 ff ff       	call   c001ba2a <lockScheduler()>
c001c429:	80 3d 0c ba 02 c0 00 	cmp    BYTE PTR ds:0xc002ba0c,0x0
c001c430:	0f 84 72 ff ff ff    	je     c001c3a8 <cleanerTaskFunction(void*)+0x1b>
c001c436:	e8 f1 f5 ff ff       	call   c001ba2c <unlockScheduler()>
c001c43b:	e9 75 ff ff ff       	jmp    c001c3b5 <cleanerTaskFunction(void*)+0x28>

c001c440 <terminateTask(int)>:
c001c440:	83 ec 14             	sub    esp,0x14
c001c443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c448:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c44b:	83 c0 0c             	add    eax,0xc
c001c44e:	50                   	push   eax
c001c44f:	68 0c 8b 02 c0       	push   0xc0028b0c
c001c454:	e8 1e 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c459:	e8 f3 f5 ff ff       	call   c001ba51 <lockStuff()>
c001c45e:	e8 c7 f5 ff ff       	call   c001ba2a <lockScheduler()>
c001c463:	c7 04 24 e1 87 02 c0 	mov    DWORD PTR [esp],0xc00287e1
c001c46a:	e8 08 5e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c46f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c473:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c478:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c47b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c480:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c483:	5a                   	pop    edx
c001c484:	59                   	pop    ecx
c001c485:	50                   	push   eax
c001c486:	68 30 ba 02 c0       	push   0xc002ba30
c001c48b:	e8 32 92 00 00       	call   c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c495:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c49c:	c7 04 24 fb 87 02 c0 	mov    DWORD PTR [esp],0xc00287fb
c001c4a3:	e8 cf 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4a8:	83 c4 10             	add    esp,0x10
c001c4ab:	a1 08 ba 02 c0       	mov    eax,ds:0xc002ba08
c001c4b0:	85 c0                	test   eax,eax
c001c4b2:	74 5a                	je     c001c50e <terminateTask(int)+0xce>
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	68 15 88 02 c0       	push   0xc0028815
c001c4bc:	e8 b6 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4c1:	58                   	pop    eax
c001c4c2:	c6 05 0c ba 02 c0 01 	mov    BYTE PTR ds:0xc002ba0c,0x1
c001c4c9:	ff 35 08 ba 02 c0    	push   DWORD PTR ds:0xc002ba08
c001c4cf:	e8 66 fb ff ff       	call   c001c03a <unblockTask(ThreadControlBlock*)>
c001c4d4:	c7 04 24 2f 88 02 c0 	mov    DWORD PTR [esp],0xc002882f
c001c4db:	e8 97 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4e0:	83 c4 10             	add    esp,0x10
c001c4e3:	e8 44 f5 ff ff       	call   c001ba2c <unlockScheduler()>
c001c4e8:	e8 f6 f8 ff ff       	call   c001bde3 <unlockStuff()>
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	68 67 88 02 c0       	push   0xc0028867
c001c4f5:	e8 7d 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c4fa:	83 c4 10             	add    esp,0x10
c001c4fd:	e8 28 f5 ff ff       	call   c001ba2a <lockScheduler()>
c001c502:	e8 57 f8 ff ff       	call   c001bd5e <schedule()>
c001c507:	e8 20 f5 ff ff       	call   c001ba2c <unlockScheduler()>
c001c50c:	eb ef                	jmp    c001c4fd <terminateTask(int)+0xbd>
c001c50e:	83 ec 0c             	sub    esp,0xc
c001c511:	68 49 88 02 c0       	push   0xc0028849
c001c516:	e8 5c 5d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	eb c3                	jmp    c001c4e3 <terminateTask(int)+0xa3>

c001c520 <Thr::terminateFromIRQ(int)>:
c001c520:	83 ec 18             	sub    esp,0x18
c001c523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c527:	e8 14 ff ff ff       	call   c001c440 <terminateTask(int)>

c001c52c <Semaphore::release()>:
c001c52c:	83 ec 0c             	sub    esp,0xc
c001c52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c533:	e8 19 f5 ff ff       	call   c001ba51 <lockStuff()>
c001c538:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c53b:	85 d2                	test   edx,edx
c001c53d:	74 1a                	je     c001c559 <Semaphore::release()+0x2d>
c001c53f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c542:	83 ec 0c             	sub    esp,0xc
c001c545:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c548:	52                   	push   edx
c001c549:	e8 ec fa ff ff       	call   c001c03a <unblockTask(ThreadControlBlock*)>
c001c54e:	83 c4 10             	add    esp,0x10
c001c551:	83 c4 0c             	add    esp,0xc
c001c554:	e9 8a f8 ff ff       	jmp    c001bde3 <unlockStuff()>
c001c559:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c55c:	83 c4 0c             	add    esp,0xc
c001c55f:	e9 7f f8 ff ff       	jmp    c001bde3 <unlockStuff()>

c001c564 <__static_initialization_and_destruction_0(int, int)>:
c001c564:	83 ec 0c             	sub    esp,0xc
c001c567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c56c:	0f 85 88 00 00 00    	jne    c001c5fa <__static_initialization_and_destruction_0(int, int)+0x96>
c001c572:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c57a:	75 7e                	jne    c001c5fa <__static_initialization_and_destruction_0(int, int)+0x96>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	68 48 ba 02 c0       	push   0xc002ba48
c001c584:	e8 1f 93 00 00       	call   c00258a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c589:	83 c4 10             	add    esp,0x10
c001c58c:	83 ec 04             	sub    esp,0x4
c001c58f:	68 58 95 02 c0       	push   0xc0029558
c001c594:	68 48 ba 02 c0       	push   0xc002ba48
c001c599:	68 68 58 02 c0       	push   0xc0025868
c001c59e:	e8 70 5b ff ff       	call   c0012113 <__cxa_atexit>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	83 ec 0c             	sub    esp,0xc
c001c5a9:	68 3c ba 02 c0       	push   0xc002ba3c
c001c5ae:	e8 f5 92 00 00       	call   c00258a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c5b3:	83 c4 10             	add    esp,0x10
c001c5b6:	83 ec 04             	sub    esp,0x4
c001c5b9:	68 58 95 02 c0       	push   0xc0029558
c001c5be:	68 3c ba 02 c0       	push   0xc002ba3c
c001c5c3:	68 68 58 02 c0       	push   0xc0025868
c001c5c8:	e8 46 5b ff ff       	call   c0012113 <__cxa_atexit>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	83 ec 0c             	sub    esp,0xc
c001c5d3:	68 30 ba 02 c0       	push   0xc002ba30
c001c5d8:	e8 cb 92 00 00       	call   c00258a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c5dd:	83 c4 10             	add    esp,0x10
c001c5e0:	83 ec 04             	sub    esp,0x4
c001c5e3:	68 58 95 02 c0       	push   0xc0029558
c001c5e8:	68 30 ba 02 c0       	push   0xc002ba30
c001c5ed:	68 68 58 02 c0       	push   0xc0025868
c001c5f2:	e8 1c 5b ff ff       	call   c0012113 <__cxa_atexit>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	90                   	nop
c001c5fb:	83 c4 0c             	add    esp,0xc
c001c5fe:	c3                   	ret    

c001c5ff <_GLOBAL__sub_I_kernelProcess>:
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	83 ec 08             	sub    esp,0x8
c001c605:	68 ff ff 00 00       	push   0xffff
c001c60a:	6a 01                	push   0x1
c001c60c:	e8 53 ff ff ff       	call   c001c564 <__static_initialization_and_destruction_0(int, int)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	83 c4 0c             	add    esp,0xc
c001c617:	c3                   	ret    

c001c618 <Vm::vm8086EntryPoint(void*)>:
c001c618:	83 ec 0c             	sub    esp,0xc
c001c61b:	e8 0c f4 ff ff       	call   c001ba2c <unlockScheduler()>
c001c620:	fb                   	sti    
c001c621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c626:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c62a:	52                   	push   edx
c001c62b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c62f:	52                   	push   edx
c001c630:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c634:	52                   	push   edx
c001c635:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c639:	50                   	push   eax
c001c63a:	e8 5a 3c fe ff       	call   c0000299 <goToVM86>
c001c63f:	83 c4 1c             	add    esp,0x1c
c001c642:	c3                   	ret    

c001c643 <Vm::inbv(unsigned short)>:
c001c643:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c647:	ec                   	in     al,dx
c001c648:	c3                   	ret    

c001c649 <Vm::outbv(unsigned short, unsigned char)>:
c001c649:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c64d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c651:	ee                   	out    dx,al
c001c652:	c3                   	ret    

c001c653 <Vm::realToLinear(unsigned short, unsigned short)>:
c001c653:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c658:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c65d:	c1 e0 04             	shl    eax,0x4
c001c660:	01 d0                	add    eax,edx
c001c662:	c3                   	ret    

c001c663 <Vm::getSegment(unsigned int)>:
c001c663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c667:	c1 e8 10             	shr    eax,0x10
c001c66a:	c3                   	ret    

c001c66b <Vm::getOffset(unsigned int)>:
c001c66b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c66f:	c3                   	ret    

c001c670 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c670:	55                   	push   ebp
c001c671:	57                   	push   edi
c001c672:	56                   	push   esi
c001c673:	53                   	push   ebx
c001c674:	83 ec 2c             	sub    esp,0x2c
c001c677:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c67b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c67f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c683:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c687:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c68b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c68f:	e8 96 f3 ff ff       	call   c001ba2a <lockScheduler()>
c001c694:	68 80 00 00 00       	push   0x80
c001c699:	6a 00                	push   0x0
c001c69b:	68 18 c6 01 c0       	push   0xc001c618
c001c6a0:	55                   	push   ebp
c001c6a1:	e8 ae f4 ff ff       	call   c001bb54 <Process::createThread(void (*)(void*), void*, int)>
c001c6a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6aa:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c6ae:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c6b2:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c6b6:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c6ba:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c6be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6c5:	e8 be 5a ff ff       	call   c0012188 <operator new(unsigned long)>
c001c6ca:	83 c4 0c             	add    esp,0xc
c001c6cd:	89 c3                	mov    ebx,eax
c001c6cf:	55                   	push   ebp
c001c6d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c6d4:	50                   	push   eax
c001c6d5:	e8 cc 60 ff ff       	call   c00127a6 <File::File(char const*, Process*)>
c001c6da:	83 c4 0c             	add    esp,0xc
c001c6dd:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c6e1:	50                   	push   eax
c001c6e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c6e6:	50                   	push   eax
c001c6e7:	53                   	push   ebx
c001c6e8:	e8 c9 63 ff ff       	call   c0012ab6 <File::stat(unsigned long long*, bool*)>
c001c6ed:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c6f1:	83 c4 10             	add    esp,0x10
c001c6f4:	84 d2                	test   dl,dl
c001c6f6:	74 1c                	je     c001c714 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	68 2b 8b 02 c0       	push   0xc0028b2b
c001c700:	e8 d2 c3 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001c705:	e8 22 f3 ff ff       	call   c001ba2c <unlockScheduler()>
c001c70a:	83 c4 10             	add    esp,0x10
c001c70d:	31 d2                	xor    edx,edx
c001c70f:	e9 81 00 00 00       	jmp    c001c795 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c714:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c718:	51                   	push   ecx
c001c719:	51                   	push   ecx
c001c71a:	6a 01                	push   0x1
c001c71c:	53                   	push   ebx
c001c71d:	e8 e8 60 ff ff       	call   c001280a <File::open(FileOpenMode)>
c001c722:	83 c4 10             	add    esp,0x10
c001c725:	85 c0                	test   eax,eax
c001c727:	74 1b                	je     c001c744 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c729:	83 ec 0c             	sub    esp,0xc
c001c72c:	68 44 8b 02 c0       	push   0xc0028b44
c001c731:	e8 a1 c3 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001c736:	e8 f1 f2 ff ff       	call   c001ba2c <unlockScheduler()>
c001c73b:	83 c4 10             	add    esp,0x10
c001c73e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c742:	eb 51                	jmp    c001c795 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c744:	83 ec 0c             	sub    esp,0xc
c001c747:	0f b7 ff             	movzx  edi,di
c001c74a:	6a 07                	push   0x7
c001c74c:	0f b7 f6             	movzx  esi,si
c001c74f:	68 00 01 00 00       	push   0x100
c001c754:	6a 00                	push   0x0
c001c756:	6a 00                	push   0x0
c001c758:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c75e:	e8 01 55 ff ff       	call   c0011c64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c763:	83 c4 18             	add    esp,0x18
c001c766:	57                   	push   edi
c001c767:	56                   	push   esi
c001c768:	e8 e6 fe ff ff       	call   c001c653 <Vm::realToLinear(unsigned short, unsigned short)>
c001c76d:	5a                   	pop    edx
c001c76e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c770:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c774:	51                   	push   ecx
c001c775:	50                   	push   eax
c001c776:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c77a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c77e:	53                   	push   ebx
c001c77f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c782:	83 c4 14             	add    esp,0x14
c001c785:	53                   	push   ebx
c001c786:	e8 dd 60 ff ff       	call   c0012868 <File::close()>
c001c78b:	e8 9c f2 ff ff       	call   c001ba2c <unlockScheduler()>
c001c790:	83 c4 10             	add    esp,0x10
c001c793:	b2 01                	mov    dl,0x1
c001c795:	83 c4 2c             	add    esp,0x2c
c001c798:	88 d0                	mov    al,dl
c001c79a:	5b                   	pop    ebx
c001c79b:	5e                   	pop    esi
c001c79c:	5f                   	pop    edi
c001c79d:	5d                   	pop    ebp
c001c79e:	c3                   	ret    

c001c79f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c79f:	57                   	push   edi
c001c7a0:	56                   	push   esi
c001c7a1:	53                   	push   ebx
c001c7a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7ae:	83 e8 06             	sub    eax,0x6
c001c7b1:	0f b7 c0             	movzx  eax,ax
c001c7b4:	50                   	push   eax
c001c7b5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c7ba:	50                   	push   eax
c001c7bb:	e8 93 fe ff ff       	call   c001c653 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7c0:	5a                   	pop    edx
c001c7c1:	5e                   	pop    esi
c001c7c2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c7c5:	8d 56 fa             	lea    edx,[esi-0x6]
c001c7c8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c7ce:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c7d1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c7d4:	83 c2 02             	add    edx,0x2
c001c7d7:	66 89 10             	mov    WORD PTR [eax],dx
c001c7da:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c7dd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c7e1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c7e4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c7e8:	89 d6                	mov    esi,edx
c001c7ea:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c7f0:	66 81 e6 ff fd       	and    si,0xfdff
c001c7f5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c7f9:	74 07                	je     c001c802 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c7fb:	89 d6                	mov    esi,edx
c001c7fd:	66 81 ce 00 02       	or     si,0x200
c001c802:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c806:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c80b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c80f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c817:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c81a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c822:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c825:	5b                   	pop    ebx
c001c826:	5e                   	pop    esi
c001c827:	5f                   	pop    edi
c001c828:	c3                   	ret    

c001c829 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c829:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c82e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c833:	c1 e0 04             	shl    eax,0x4
c001c836:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c839:	c3                   	ret    

c001c83a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c83a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c83f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c844:	c1 e0 04             	shl    eax,0x4
c001c847:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c84b:	c3                   	ret    

c001c84c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c84c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c851:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c856:	c1 e0 04             	shl    eax,0x4
c001c859:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c85c:	c3                   	ret    

c001c85d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c85d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c862:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c867:	c1 e0 04             	shl    eax,0x4
c001c86a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c86e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c871:	c3                   	ret    

c001c872 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c872:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c877:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c87c:	c1 e0 04             	shl    eax,0x4
c001c87f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c883:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c887:	c3                   	ret    

c001c888 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c888:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c88d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c892:	c1 e0 04             	shl    eax,0x4
c001c895:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c899:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c89c:	c3                   	ret    

c001c89d <Vm::faultHandler(regs*)>:
c001c89d:	55                   	push   ebp
c001c89e:	57                   	push   edi
c001c89f:	56                   	push   esi
c001c8a0:	53                   	push   ebx
c001c8a1:	83 ec 1c             	sub    esp,0x1c
c001c8a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c8a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c8ab:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c8af:	0f b7 f0             	movzx  esi,ax
c001c8b2:	52                   	push   edx
c001c8b3:	0f b7 c0             	movzx  eax,ax
c001c8b6:	50                   	push   eax
c001c8b7:	e8 97 fd ff ff       	call   c001c653 <Vm::realToLinear(unsigned short, unsigned short)>
c001c8bc:	5a                   	pop    edx
c001c8bd:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c8c0:	59                   	pop    ecx
c001c8c1:	89 c7                	mov    edi,eax
c001c8c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c8c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c8cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8d3:	0f b7 c5             	movzx  eax,bp
c001c8d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c8de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8e2:	e8 6c fd ff ff       	call   c001c653 <Vm::realToLinear(unsigned short, unsigned short)>
c001c8e7:	5a                   	pop    edx
c001c8e8:	59                   	pop    ecx
c001c8e9:	b1 06                	mov    cl,0x6
c001c8eb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c8f0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c8f5:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c8f8:	80 fa 9d             	cmp    dl,0x9d
c001c8fb:	0f 84 1d 02 00 00    	je     c001cb1e <Vm::faultHandler(regs*)+0x281>
c001c901:	0f 87 8e 00 00 00    	ja     c001c995 <Vm::faultHandler(regs*)+0xf8>
c001c907:	80 fa 66             	cmp    dl,0x66
c001c90a:	0f 84 89 01 00 00    	je     c001ca99 <Vm::faultHandler(regs*)+0x1fc>
c001c910:	77 44                	ja     c001c956 <Vm::faultHandler(regs*)+0xb9>
c001c912:	80 fa 36             	cmp    dl,0x36
c001c915:	0f 84 74 01 00 00    	je     c001ca8f <Vm::faultHandler(regs*)+0x1f2>
c001c91b:	77 1a                	ja     c001c937 <Vm::faultHandler(regs*)+0x9a>
c001c91d:	80 fa 26             	cmp    dl,0x26
c001c920:	0f 84 4b 01 00 00    	je     c001ca71 <Vm::faultHandler(regs*)+0x1d4>
c001c926:	80 fa 2e             	cmp    dl,0x2e
c001c929:	0f 85 4a 05 00 00    	jne    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001c92f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c932:	31 c9                	xor    ecx,ecx
c001c934:	47                   	inc    edi
c001c935:	eb be                	jmp    c001c8f5 <Vm::faultHandler(regs*)+0x58>
c001c937:	80 fa 64             	cmp    dl,0x64
c001c93a:	0f 84 3b 01 00 00    	je     c001ca7b <Vm::faultHandler(regs*)+0x1de>
c001c940:	0f 87 3f 01 00 00    	ja     c001ca85 <Vm::faultHandler(regs*)+0x1e8>
c001c946:	80 fa 3e             	cmp    dl,0x3e
c001c949:	0f 85 2a 05 00 00    	jne    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001c94f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c952:	b1 01                	mov    cl,0x1
c001c954:	eb de                	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001c956:	80 fa 6d             	cmp    dl,0x6d
c001c959:	0f 84 bf 02 00 00    	je     c001cc1e <Vm::faultHandler(regs*)+0x381>
c001c95f:	77 17                	ja     c001c978 <Vm::faultHandler(regs*)+0xdb>
c001c961:	80 fa 67             	cmp    dl,0x67
c001c964:	0f 84 3c 01 00 00    	je     c001caa6 <Vm::faultHandler(regs*)+0x209>
c001c96a:	80 fa 6c             	cmp    dl,0x6c
c001c96d:	0f 84 5d 02 00 00    	je     c001cbd0 <Vm::faultHandler(regs*)+0x333>
c001c973:	e9 01 05 00 00       	jmp    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001c978:	80 fa 6f             	cmp    dl,0x6f
c001c97b:	0f 84 8b 03 00 00    	je     c001cd0c <Vm::faultHandler(regs*)+0x46f>
c001c981:	0f 82 0f 03 00 00    	jb     c001cc96 <Vm::faultHandler(regs*)+0x3f9>
c001c987:	80 fa 9c             	cmp    dl,0x9c
c001c98a:	0f 84 23 01 00 00    	je     c001cab3 <Vm::faultHandler(regs*)+0x216>
c001c990:	e9 e4 04 00 00       	jmp    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001c995:	80 fa ec             	cmp    dl,0xec
c001c998:	0f 84 7f 04 00 00    	je     c001ce1d <Vm::faultHandler(regs*)+0x580>
c001c99e:	77 7b                	ja     c001ca1b <Vm::faultHandler(regs*)+0x17e>
c001c9a0:	80 fa e4             	cmp    dl,0xe4
c001c9a3:	0f 84 fe 03 00 00    	je     c001cda7 <Vm::faultHandler(regs*)+0x50a>
c001c9a9:	77 53                	ja     c001c9fe <Vm::faultHandler(regs*)+0x161>
c001c9ab:	80 fa cd             	cmp    dl,0xcd
c001c9ae:	0f 84 cd 01 00 00    	je     c001cb81 <Vm::faultHandler(regs*)+0x2e4>
c001c9b4:	80 fa cf             	cmp    dl,0xcf
c001c9b7:	0f 85 bc 04 00 00    	jne    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001c9bd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c9c0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c9c3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c9c7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c9ca:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c9ce:	81 ca 00 02 02 00    	or     edx,0x20200
c001c9d4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c9d7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c9db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c9e1:	66 c1 e8 09          	shr    ax,0x9
c001c9e5:	83 e0 01             	and    eax,0x1
c001c9e8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c9eb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c9ee:	83 c0 06             	add    eax,0x6
c001c9f1:	25 ff ff 00 00       	and    eax,0xffff
c001c9f6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c9f9:	e9 77 04 00 00       	jmp    c001ce75 <Vm::faultHandler(regs*)+0x5d8>
c001c9fe:	80 fa e6             	cmp    dl,0xe6
c001ca01:	0f 84 ea 03 00 00    	je     c001cdf1 <Vm::faultHandler(regs*)+0x554>
c001ca07:	0f 82 b6 03 00 00    	jb     c001cdc3 <Vm::faultHandler(regs*)+0x526>
c001ca0d:	80 fa e7             	cmp    dl,0xe7
c001ca10:	0f 84 f2 03 00 00    	je     c001ce08 <Vm::faultHandler(regs*)+0x56b>
c001ca16:	e9 5e 04 00 00       	jmp    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001ca1b:	80 fa ef             	cmp    dl,0xef
c001ca1e:	0f 84 3c 04 00 00    	je     c001ce60 <Vm::faultHandler(regs*)+0x5c3>
c001ca24:	77 28                	ja     c001ca4e <Vm::faultHandler(regs*)+0x1b1>
c001ca26:	80 fa ed             	cmp    dl,0xed
c001ca29:	0f 84 0a 04 00 00    	je     c001ce39 <Vm::faultHandler(regs*)+0x59c>
c001ca2f:	80 fa ee             	cmp    dl,0xee
c001ca32:	0f 85 41 04 00 00    	jne    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001ca38:	50                   	push   eax
c001ca39:	50                   	push   eax
c001ca3a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ca3e:	50                   	push   eax
c001ca3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ca43:	50                   	push   eax
c001ca44:	e8 00 fc ff ff       	call   c001c649 <Vm::outbv(unsigned short, unsigned char)>
c001ca49:	e9 0a 04 00 00       	jmp    c001ce58 <Vm::faultHandler(regs*)+0x5bb>
c001ca4e:	80 fa fa             	cmp    dl,0xfa
c001ca51:	0f 84 5d 01 00 00    	je     c001cbb4 <Vm::faultHandler(regs*)+0x317>
c001ca57:	80 fa fb             	cmp    dl,0xfb
c001ca5a:	0f 84 62 01 00 00    	je     c001cbc2 <Vm::faultHandler(regs*)+0x325>
c001ca60:	80 fa f3             	cmp    dl,0xf3
c001ca63:	0f 85 10 04 00 00    	jne    c001ce79 <Vm::faultHandler(regs*)+0x5dc>
c001ca69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca6c:	e9 c3 fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001ca71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca74:	b1 02                	mov    cl,0x2
c001ca76:	e9 b9 fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001ca7b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca7e:	b1 03                	mov    cl,0x3
c001ca80:	e9 af fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001ca85:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca88:	b1 04                	mov    cl,0x4
c001ca8a:	e9 a5 fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001ca8f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca92:	b1 05                	mov    cl,0x5
c001ca94:	e9 9b fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001ca99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca9c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001caa1:	e9 8e fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001caa6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001caa9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001caae:	e9 81 fe ff ff       	jmp    c001c934 <Vm::faultHandler(regs*)+0x97>
c001cab3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cab6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001caba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cabf:	74 30                	je     c001caf1 <Vm::faultHandler(regs*)+0x254>
c001cac1:	83 e9 04             	sub    ecx,0x4
c001cac4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001caca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cad0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cad3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cad6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cadc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cae0:	0f 84 8c 03 00 00    	je     c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cae6:	80 ce 02             	or     dh,0x2
c001cae9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001caec:	e9 81 03 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001caf1:	83 e9 02             	sub    ecx,0x2
c001caf4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cafa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cafd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cb01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cb07:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cb0b:	74 05                	je     c001cb12 <Vm::faultHandler(regs*)+0x275>
c001cb0d:	80 ce 02             	or     dh,0x2
c001cb10:	eb 03                	jmp    c001cb15 <Vm::faultHandler(regs*)+0x278>
c001cb12:	80 e6 fd             	and    dh,0xfd
c001cb15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cb19:	e9 54 03 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cb1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb23:	74 2a                	je     c001cb4f <Vm::faultHandler(regs*)+0x2b2>
c001cb25:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb27:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cb2d:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb33:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb36:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb3e:	c1 e8 09             	shr    eax,0x9
c001cb41:	83 e0 01             	and    eax,0x1
c001cb44:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cb4a:	83 c0 04             	add    eax,0x4
c001cb4d:	eb 25                	jmp    c001cb74 <Vm::faultHandler(regs*)+0x2d7>
c001cb4f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cb52:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb58:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb5b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001cb5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb64:	66 c1 e8 09          	shr    ax,0x9
c001cb68:	83 e0 01             	and    eax,0x1
c001cb6b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb6e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cb71:	83 c0 02             	add    eax,0x2
c001cb74:	25 ff ff 00 00       	and    eax,0xffff
c001cb79:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cb7c:	e9 f1 02 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cb81:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cb85:	3c ff                	cmp    al,0xff
c001cb87:	75 10                	jne    c001cb99 <Vm::faultHandler(regs*)+0x2fc>
c001cb89:	83 ec 0c             	sub    esp,0xc
c001cb8c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001cb8f:	e8 8c f9 ff ff       	call   c001c520 <Thr::terminateFromIRQ(int)>
c001cb94:	e9 c2 02 00 00       	jmp    c001ce5b <Vm::faultHandler(regs*)+0x5be>
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba4:	57                   	push   edi
c001cba5:	50                   	push   eax
c001cba6:	53                   	push   ebx
c001cba7:	e8 f3 fb ff ff       	call   c001c79f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cbac:	83 c4 20             	add    esp,0x20
c001cbaf:	e9 c1 02 00 00       	jmp    c001ce75 <Vm::faultHandler(regs*)+0x5d8>
c001cbb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbb9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cbbd:	e9 b0 02 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cbc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbc7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cbcb:	e9 a2 02 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cbd0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbd5:	74 0d                	je     c001cbe4 <Vm::faultHandler(regs*)+0x347>
c001cbd7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cbde:	0f 87 e9 02 00 00    	ja     c001cecd <Vm::faultHandler(regs*)+0x630>
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cbea:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cbee:	50                   	push   eax
c001cbef:	e8 4f fa ff ff       	call   c001c643 <Vm::inbv(unsigned short)>
c001cbf4:	83 c4 0c             	add    esp,0xc
c001cbf7:	0f b6 c0             	movzx  eax,al
c001cbfa:	0f b7 c9             	movzx  ecx,cx
c001cbfd:	50                   	push   eax
c001cbfe:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cc02:	50                   	push   eax
c001cc03:	51                   	push   ecx
c001cc04:	e8 54 fc ff ff       	call   c001c85d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc0f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc13:	74 03                	je     c001cc18 <Vm::faultHandler(regs*)+0x37b>
c001cc15:	48                   	dec    eax
c001cc16:	eb 01                	jmp    c001cc19 <Vm::faultHandler(regs*)+0x37c>
c001cc18:	40                   	inc    eax
c001cc19:	0f b7 c0             	movzx  eax,ax
c001cc1c:	eb 70                	jmp    c001cc8e <Vm::faultHandler(regs*)+0x3f1>
c001cc1e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc21:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cc24:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc29:	74 0c                	je     c001cc37 <Vm::faultHandler(regs*)+0x39a>
c001cc2b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc31:	0f 87 96 02 00 00    	ja     c001cecd <Vm::faultHandler(regs*)+0x630>
c001cc37:	0f b7 c9             	movzx  ecx,cx
c001cc3a:	0f b7 f6             	movzx  esi,si
c001cc3d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cc40:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc45:	74 20                	je     c001cc67 <Vm::faultHandler(regs*)+0x3ca>
c001cc47:	ed                   	in     eax,dx
c001cc48:	55                   	push   ebp
c001cc49:	50                   	push   eax
c001cc4a:	51                   	push   ecx
c001cc4b:	56                   	push   esi
c001cc4c:	e8 37 fc ff ff       	call   c001c888 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cc51:	83 c4 10             	add    esp,0x10
c001cc54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc57:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc5b:	74 05                	je     c001cc62 <Vm::faultHandler(regs*)+0x3c5>
c001cc5d:	83 e8 04             	sub    eax,0x4
c001cc60:	eb 27                	jmp    c001cc89 <Vm::faultHandler(regs*)+0x3ec>
c001cc62:	83 c0 04             	add    eax,0x4
c001cc65:	eb 22                	jmp    c001cc89 <Vm::faultHandler(regs*)+0x3ec>
c001cc67:	66 ed                	in     ax,dx
c001cc69:	0f b7 c0             	movzx  eax,ax
c001cc6c:	57                   	push   edi
c001cc6d:	50                   	push   eax
c001cc6e:	51                   	push   ecx
c001cc6f:	56                   	push   esi
c001cc70:	e8 fd fb ff ff       	call   c001c872 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cc75:	83 c4 10             	add    esp,0x10
c001cc78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc7b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc7f:	74 05                	je     c001cc86 <Vm::faultHandler(regs*)+0x3e9>
c001cc81:	83 e8 02             	sub    eax,0x2
c001cc84:	eb 03                	jmp    c001cc89 <Vm::faultHandler(regs*)+0x3ec>
c001cc86:	83 c0 02             	add    eax,0x2
c001cc89:	25 ff ff 00 00       	and    eax,0xffff
c001cc8e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cc91:	e9 dc 01 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cc96:	49                   	dec    ecx
c001cc97:	80 f9 05             	cmp    cl,0x5
c001cc9a:	77 24                	ja     c001ccc0 <Vm::faultHandler(regs*)+0x423>
c001cc9c:	0f b6 c9             	movzx  ecx,cl
c001cc9f:	ff 24 8d 8c 8b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7474]
c001cca6:	0f b7 f5             	movzx  esi,bp
c001cca9:	eb 15                	jmp    c001ccc0 <Vm::faultHandler(regs*)+0x423>
c001ccab:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001ccaf:	eb 0f                	jmp    c001ccc0 <Vm::faultHandler(regs*)+0x423>
c001ccb1:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001ccb5:	eb 09                	jmp    c001ccc0 <Vm::faultHandler(regs*)+0x423>
c001ccb7:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001ccbb:	eb 03                	jmp    c001ccc0 <Vm::faultHandler(regs*)+0x423>
c001ccbd:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001ccc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ccc3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ccc8:	74 0b                	je     c001ccd5 <Vm::faultHandler(regs*)+0x438>
c001ccca:	3d ff ff 00 00       	cmp    eax,0xffff
c001cccf:	0f 87 f8 01 00 00    	ja     c001cecd <Vm::faultHandler(regs*)+0x630>
c001ccd5:	0f b7 c0             	movzx  eax,ax
c001ccd8:	52                   	push   edx
c001ccd9:	52                   	push   edx
c001ccda:	50                   	push   eax
c001ccdb:	56                   	push   esi
c001ccdc:	e8 48 fb ff ff       	call   c001c829 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cce1:	59                   	pop    ecx
c001cce2:	0f b6 c0             	movzx  eax,al
c001cce5:	5e                   	pop    esi
c001cce6:	50                   	push   eax
c001cce7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cceb:	50                   	push   eax
c001ccec:	e8 58 f9 ff ff       	call   c001c649 <Vm::outbv(unsigned short, unsigned char)>
c001ccf1:	83 c4 10             	add    esp,0x10
c001ccf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ccf7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ccfb:	74 03                	je     c001cd00 <Vm::faultHandler(regs*)+0x463>
c001ccfd:	48                   	dec    eax
c001ccfe:	eb 01                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x464>
c001cd00:	40                   	inc    eax
c001cd01:	0f b7 c0             	movzx  eax,ax
c001cd04:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cd07:	e9 66 01 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cd0c:	49                   	dec    ecx
c001cd0d:	80 f9 05             	cmp    cl,0x5
c001cd10:	77 1f                	ja     c001cd31 <Vm::faultHandler(regs*)+0x494>
c001cd12:	0f b6 c9             	movzx  ecx,cl
c001cd15:	ff 24 8d a4 8b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd745c]
c001cd1c:	89 ee                	mov    esi,ebp
c001cd1e:	eb 11                	jmp    c001cd31 <Vm::faultHandler(regs*)+0x494>
c001cd20:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cd23:	eb 0c                	jmp    c001cd31 <Vm::faultHandler(regs*)+0x494>
c001cd25:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cd28:	eb 07                	jmp    c001cd31 <Vm::faultHandler(regs*)+0x494>
c001cd2a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cd2d:	eb 02                	jmp    c001cd31 <Vm::faultHandler(regs*)+0x494>
c001cd2f:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cd31:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cd34:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cd39:	74 0c                	je     c001cd47 <Vm::faultHandler(regs*)+0x4aa>
c001cd3b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cd41:	0f 87 86 01 00 00    	ja     c001cecd <Vm::faultHandler(regs*)+0x630>
c001cd47:	0f b7 d6             	movzx  edx,si
c001cd4a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cd4d:	0f b7 c1             	movzx  eax,cx
c001cd50:	81 e7 00 04 00 00    	and    edi,0x400
c001cd56:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cd59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd5e:	74 1d                	je     c001cd7d <Vm::faultHandler(regs*)+0x4e0>
c001cd60:	55                   	push   ebp
c001cd61:	55                   	push   ebp
c001cd62:	50                   	push   eax
c001cd63:	52                   	push   edx
c001cd64:	e8 e3 fa ff ff       	call   c001c84c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	89 f2                	mov    edx,esi
c001cd6e:	ef                   	out    dx,eax
c001cd6f:	85 ff                	test   edi,edi
c001cd71:	74 05                	je     c001cd78 <Vm::faultHandler(regs*)+0x4db>
c001cd73:	83 e9 04             	sub    ecx,0x4
c001cd76:	eb 21                	jmp    c001cd99 <Vm::faultHandler(regs*)+0x4fc>
c001cd78:	83 c1 04             	add    ecx,0x4
c001cd7b:	eb 1c                	jmp    c001cd99 <Vm::faultHandler(regs*)+0x4fc>
c001cd7d:	55                   	push   ebp
c001cd7e:	55                   	push   ebp
c001cd7f:	50                   	push   eax
c001cd80:	52                   	push   edx
c001cd81:	e8 b4 fa ff ff       	call   c001c83a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cd86:	83 c4 10             	add    esp,0x10
c001cd89:	89 f2                	mov    edx,esi
c001cd8b:	66 ef                	out    dx,ax
c001cd8d:	85 ff                	test   edi,edi
c001cd8f:	74 05                	je     c001cd96 <Vm::faultHandler(regs*)+0x4f9>
c001cd91:	83 e9 02             	sub    ecx,0x2
c001cd94:	eb 03                	jmp    c001cd99 <Vm::faultHandler(regs*)+0x4fc>
c001cd96:	83 c1 02             	add    ecx,0x2
c001cd99:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cd9f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001cda2:	e9 cb 00 00 00       	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001cda7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cdae:	83 ec 0c             	sub    esp,0xc
c001cdb1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cdb5:	50                   	push   eax
c001cdb6:	e8 88 f8 ff ff       	call   c001c643 <Vm::inbv(unsigned short)>
c001cdbb:	0f b6 c0             	movzx  eax,al
c001cdbe:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cdc1:	eb 3f                	jmp    c001ce02 <Vm::faultHandler(regs*)+0x565>
c001cdc3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cdc8:	74 07                	je     c001cdd1 <Vm::faultHandler(regs*)+0x534>
c001cdca:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cdce:	ed                   	in     eax,dx
c001cdcf:	eb 14                	jmp    c001cde5 <Vm::faultHandler(regs*)+0x548>
c001cdd1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001cdd4:	66 31 c9             	xor    cx,cx
c001cdd7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001cdda:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cdde:	66 ed                	in     ax,dx
c001cde0:	0f b7 c0             	movzx  eax,ax
c001cde3:	09 c8                	or     eax,ecx
c001cde5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cde8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cdec:	e9 84 00 00 00       	jmp    c001ce75 <Vm::faultHandler(regs*)+0x5d8>
c001cdf1:	52                   	push   edx
c001cdf2:	52                   	push   edx
c001cdf3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cdf7:	50                   	push   eax
c001cdf8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cdfc:	50                   	push   eax
c001cdfd:	e8 47 f8 ff ff       	call   c001c649 <Vm::outbv(unsigned short, unsigned char)>
c001ce02:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ce06:	eb 53                	jmp    c001ce5b <Vm::faultHandler(regs*)+0x5be>
c001ce08:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce0b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ce0f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce14:	74 03                	je     c001ce19 <Vm::faultHandler(regs*)+0x57c>
c001ce16:	ef                   	out    dx,eax
c001ce17:	eb cf                	jmp    c001cde8 <Vm::faultHandler(regs*)+0x54b>
c001ce19:	66 ef                	out    dx,ax
c001ce1b:	eb cb                	jmp    c001cde8 <Vm::faultHandler(regs*)+0x54b>
c001ce1d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ce2b:	50                   	push   eax
c001ce2c:	e8 12 f8 ff ff       	call   c001c643 <Vm::inbv(unsigned short)>
c001ce31:	0f b6 c0             	movzx  eax,al
c001ce34:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ce37:	eb 1f                	jmp    c001ce58 <Vm::faultHandler(regs*)+0x5bb>
c001ce39:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce3c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce41:	74 03                	je     c001ce46 <Vm::faultHandler(regs*)+0x5a9>
c001ce43:	ed                   	in     eax,dx
c001ce44:	eb 0d                	jmp    c001ce53 <Vm::faultHandler(regs*)+0x5b6>
c001ce46:	66 ed                	in     ax,dx
c001ce48:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ce4b:	0f b7 c0             	movzx  eax,ax
c001ce4e:	66 31 d2             	xor    dx,dx
c001ce51:	09 d0                	or     eax,edx
c001ce53:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ce56:	eb 1a                	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001ce58:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce5b:	83 c4 10             	add    esp,0x10
c001ce5e:	eb 15                	jmp    c001ce75 <Vm::faultHandler(regs*)+0x5d8>
c001ce60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce6b:	74 03                	je     c001ce70 <Vm::faultHandler(regs*)+0x5d3>
c001ce6d:	ef                   	out    dx,eax
c001ce6e:	eb 02                	jmp    c001ce72 <Vm::faultHandler(regs*)+0x5d5>
c001ce70:	66 ef                	out    dx,ax
c001ce72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce75:	b0 01                	mov    al,0x1
c001ce77:	eb 56                	jmp    c001cecf <Vm::faultHandler(regs*)+0x632>
c001ce79:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001ce7d:	50                   	push   eax
c001ce7e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001ce82:	50                   	push   eax
c001ce83:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001ce87:	50                   	push   eax
c001ce88:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001ce8c:	50                   	push   eax
c001ce8d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ce91:	50                   	push   eax
c001ce92:	52                   	push   edx
c001ce93:	52                   	push   edx
c001ce94:	68 5d 8b 02 c0       	push   0xc0028b5d
c001ce99:	e8 d9 53 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001ce9e:	83 c4 20             	add    esp,0x20
c001cea1:	83 ec 0c             	sub    esp,0xc
c001cea4:	6a 60                	push   0x60
c001cea6:	e8 98 f7 ff ff       	call   c001c643 <Vm::inbv(unsigned short)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	3c 1c                	cmp    al,0x1c
c001ceb0:	74 04                	je     c001ceb6 <Vm::faultHandler(regs*)+0x619>
c001ceb2:	3c 5a                	cmp    al,0x5a
c001ceb4:	75 eb                	jne    c001cea1 <Vm::faultHandler(regs*)+0x604>
c001ceb6:	3c 5a                	cmp    al,0x5a
c001ceb8:	74 04                	je     c001cebe <Vm::faultHandler(regs*)+0x621>
c001ceba:	3c 1c                	cmp    al,0x1c
c001cebc:	75 0f                	jne    c001cecd <Vm::faultHandler(regs*)+0x630>
c001cebe:	83 ec 0c             	sub    esp,0xc
c001cec1:	6a 60                	push   0x60
c001cec3:	e8 7b f7 ff ff       	call   c001c643 <Vm::inbv(unsigned short)>
c001cec8:	83 c4 10             	add    esp,0x10
c001cecb:	eb e9                	jmp    c001ceb6 <Vm::faultHandler(regs*)+0x619>
c001cecd:	31 c0                	xor    eax,eax
c001cecf:	83 c4 1c             	add    esp,0x1c
c001ced2:	5b                   	pop    ebx
c001ced3:	5e                   	pop    esi
c001ced4:	5f                   	pop    edi
c001ced5:	5d                   	pop    ebp
c001ced6:	c3                   	ret    

c001ced7 <Vm::fpuInternalTo32(unsigned long long)>:
c001ced7:	57                   	push   edi
c001ced8:	56                   	push   esi
c001ced9:	53                   	push   ebx
c001ceda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee2:	89 d6                	mov    esi,edx
c001cee4:	89 d7                	mov    edi,edx
c001cee6:	89 c1                	mov    ecx,eax
c001cee8:	c1 ef 14             	shr    edi,0x14
c001ceeb:	89 d3                	mov    ebx,edx
c001ceed:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001cef3:	31 d2                	xor    edx,edx
c001cef5:	89 f8                	mov    eax,edi
c001cef7:	81 e6 00 00 00 80    	and    esi,0x80000000
c001cefd:	bf ff 00 00 00       	mov    edi,0xff
c001cf02:	05 80 fc ff ff       	add    eax,0xfffffc80
c001cf07:	83 d2 ff             	adc    edx,0xffffffff
c001cf0a:	39 c7                	cmp    edi,eax
c001cf0c:	bf 00 00 00 00       	mov    edi,0x0
c001cf11:	19 d7                	sbb    edi,edx
c001cf13:	72 15                	jb     c001cf2a <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001cf15:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001cf19:	c1 e0 17             	shl    eax,0x17
c001cf1c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001cf22:	09 f1                	or     ecx,esi
c001cf24:	09 c1                	or     ecx,eax
c001cf26:	89 cf                	mov    edi,ecx
c001cf28:	eb 02                	jmp    c001cf2c <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001cf2a:	31 ff                	xor    edi,edi
c001cf2c:	89 f8                	mov    eax,edi
c001cf2e:	5b                   	pop    ebx
c001cf2f:	5e                   	pop    esi
c001cf30:	5f                   	pop    edi
c001cf31:	c3                   	ret    

c001cf32 <Vm::fpuInternalTo64(unsigned long long)>:
c001cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf3a:	c3                   	ret    

c001cf3b <Vm::fpu32ToInternal(unsigned int)>:
c001cf3b:	57                   	push   edi
c001cf3c:	31 ff                	xor    edi,edi
c001cf3e:	56                   	push   esi
c001cf3f:	53                   	push   ebx
c001cf40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf44:	89 cb                	mov    ebx,ecx
c001cf46:	89 ce                	mov    esi,ecx
c001cf48:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001cf4e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001cf54:	c1 e9 17             	shr    ecx,0x17
c001cf57:	89 f0                	mov    eax,esi
c001cf59:	0f b6 d1             	movzx  edx,cl
c001cf5c:	81 c2 80 03 00 00    	add    edx,0x380
c001cf62:	89 d1                	mov    ecx,edx
c001cf64:	89 fa                	mov    edx,edi
c001cf66:	c1 e1 14             	shl    ecx,0x14
c001cf69:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001cf6d:	c1 e0 1d             	shl    eax,0x1d
c001cf70:	89 d7                	mov    edi,edx
c001cf72:	89 c6                	mov    esi,eax
c001cf74:	89 ca                	mov    edx,ecx
c001cf76:	89 f0                	mov    eax,esi
c001cf78:	09 fa                	or     edx,edi
c001cf7a:	09 da                	or     edx,ebx
c001cf7c:	5b                   	pop    ebx
c001cf7d:	5e                   	pop    esi
c001cf7e:	5f                   	pop    edi
c001cf7f:	c3                   	ret    

c001cf80 <Vm::fpu64ToInternal(unsigned long long)>:
c001cf80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf88:	c3                   	ret    

c001cf89 <Vm::fpuFloatToLong(unsigned long long)>:
c001cf89:	57                   	push   edi
c001cf8a:	31 c0                	xor    eax,eax
c001cf8c:	56                   	push   esi
c001cf8d:	31 d2                	xor    edx,edx
c001cf8f:	53                   	push   ebx
c001cf90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cf94:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf98:	89 d9                	mov    ecx,ebx
c001cf9a:	c1 e9 14             	shr    ecx,0x14
c001cf9d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cfa3:	89 cf                	mov    edi,ecx
c001cfa5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cfab:	78 33                	js     c001cfe0 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cfad:	89 d9                	mov    ecx,ebx
c001cfaf:	89 f0                	mov    eax,esi
c001cfb1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cfb7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001cfbd:	89 ca                	mov    edx,ecx
c001cfbf:	b9 34 00 00 00       	mov    ecx,0x34
c001cfc4:	29 f9                	sub    ecx,edi
c001cfc6:	0f ad d0             	shrd   eax,edx,cl
c001cfc9:	d3 fa                	sar    edx,cl
c001cfcb:	f6 c1 20             	test   cl,0x20
c001cfce:	74 05                	je     c001cfd5 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cfd0:	89 d0                	mov    eax,edx
c001cfd2:	c1 fa 1f             	sar    edx,0x1f
c001cfd5:	85 db                	test   ebx,ebx
c001cfd7:	79 07                	jns    c001cfe0 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cfd9:	f7 d8                	neg    eax
c001cfdb:	83 d2 00             	adc    edx,0x0
c001cfde:	f7 da                	neg    edx
c001cfe0:	5b                   	pop    ebx
c001cfe1:	5e                   	pop    esi
c001cfe2:	5f                   	pop    edi
c001cfe3:	c3                   	ret    

c001cfe4 <Vm::fpuULongToFloat(unsigned long long)>:
c001cfe4:	57                   	push   edi
c001cfe5:	31 c9                	xor    ecx,ecx
c001cfe7:	56                   	push   esi
c001cfe8:	53                   	push   ebx
c001cfe9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cff1:	0f ba e7 14          	bt     edi,0x14
c001cff5:	72 07                	jb     c001cffe <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cff7:	01 f6                	add    esi,esi
c001cff9:	11 ff                	adc    edi,edi
c001cffb:	41                   	inc    ecx
c001cffc:	eb f3                	jmp    c001cff1 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cffe:	89 fa                	mov    edx,edi
c001d000:	89 f0                	mov    eax,esi
c001d002:	bb 33 04 00 00       	mov    ebx,0x433
c001d007:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d00d:	29 cb                	sub    ebx,ecx
c001d00f:	89 d9                	mov    ecx,ebx
c001d011:	5b                   	pop    ebx
c001d012:	c1 e1 14             	shl    ecx,0x14
c001d015:	5e                   	pop    esi
c001d016:	09 ca                	or     edx,ecx
c001d018:	5f                   	pop    edi
c001d019:	c3                   	ret    

c001d01a <Vm::fpuLongToFloat(long long)>:
c001d01a:	56                   	push   esi
c001d01b:	31 c0                	xor    eax,eax
c001d01d:	53                   	push   ebx
c001d01e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d022:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d026:	39 c8                	cmp    eax,ecx
c001d028:	19 d8                	sbb    eax,ebx
c001d02a:	7d 04                	jge    c001d030 <Vm::fpuLongToFloat(long long)+0x16>
c001d02c:	31 f6                	xor    esi,esi
c001d02e:	eb 0c                	jmp    c001d03c <Vm::fpuLongToFloat(long long)+0x22>
c001d030:	f7 d9                	neg    ecx
c001d032:	be 01 00 00 00       	mov    esi,0x1
c001d037:	83 d3 00             	adc    ebx,0x0
c001d03a:	f7 db                	neg    ebx
c001d03c:	31 c0                	xor    eax,eax
c001d03e:	0f ba e3 14          	bt     ebx,0x14
c001d042:	72 07                	jb     c001d04b <Vm::fpuLongToFloat(long long)+0x31>
c001d044:	01 c9                	add    ecx,ecx
c001d046:	11 db                	adc    ebx,ebx
c001d048:	40                   	inc    eax
c001d049:	eb f3                	jmp    c001d03e <Vm::fpuLongToFloat(long long)+0x24>
c001d04b:	ba 33 04 00 00       	mov    edx,0x433
c001d050:	29 c2                	sub    edx,eax
c001d052:	89 c8                	mov    eax,ecx
c001d054:	c1 e2 14             	shl    edx,0x14
c001d057:	89 d9                	mov    ecx,ebx
c001d059:	89 f3                	mov    ebx,esi
c001d05b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d061:	09 ca                	or     edx,ecx
c001d063:	84 db                	test   bl,bl
c001d065:	74 06                	je     c001d06d <Vm::fpuLongToFloat(long long)+0x53>
c001d067:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d06d:	5b                   	pop    ebx
c001d06e:	5e                   	pop    esi
c001d06f:	c3                   	ret    

c001d070 <Vm::fpuGet0()>:
c001d070:	31 c0                	xor    eax,eax
c001d072:	31 d2                	xor    edx,edx
c001d074:	c3                   	ret    

c001d075 <Vm::fpuGet1()>:
c001d075:	b8 01 00 00 00       	mov    eax,0x1
c001d07a:	31 d2                	xor    edx,edx
c001d07c:	c3                   	ret    

c001d07d <Vm::fpuGetPi()>:
c001d07d:	b8 03 00 00 00       	mov    eax,0x3
c001d082:	31 d2                	xor    edx,edx
c001d084:	c3                   	ret    

c001d085 <Vm::fpuGetLog2E()>:
c001d085:	83 ec 18             	sub    esp,0x18
c001d088:	68 bc 8b 02 c0       	push   0xc0028bbc
c001d08d:	e8 45 ba ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d092:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d097:	31 d2                	xor    edx,edx
c001d099:	83 c4 1c             	add    esp,0x1c
c001d09c:	c3                   	ret    

c001d09d <Vm::fpuGetLogE2()>:
c001d09d:	83 ec 18             	sub    esp,0x18
c001d0a0:	68 c8 8b 02 c0       	push   0xc0028bc8
c001d0a5:	e8 2d ba ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d0aa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0af:	31 d2                	xor    edx,edx
c001d0b1:	83 c4 1c             	add    esp,0x1c
c001d0b4:	c3                   	ret    

c001d0b5 <Vm::fpuGetLog210()>:
c001d0b5:	83 ec 18             	sub    esp,0x18
c001d0b8:	68 d4 8b 02 c0       	push   0xc0028bd4
c001d0bd:	e8 15 ba ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d0c2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0c7:	31 d2                	xor    edx,edx
c001d0c9:	83 c4 1c             	add    esp,0x1c
c001d0cc:	c3                   	ret    

c001d0cd <Vm::fpuGetLog102()>:
c001d0cd:	83 ec 18             	sub    esp,0x18
c001d0d0:	68 e1 8b 02 c0       	push   0xc0028be1
c001d0d5:	e8 fd b9 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d0da:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0df:	31 d2                	xor    edx,edx
c001d0e1:	83 c4 1c             	add    esp,0x1c
c001d0e4:	c3                   	ret    

c001d0e5 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0e9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d0ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0f1:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d0f5:	0f 92 c0             	setb   al
c001d0f8:	c3                   	ret    

c001d0f9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d0f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d101:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d105:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d109:	09 c2                	or     edx,eax
c001d10b:	0f 94 c0             	sete   al
c001d10e:	c3                   	ret    

c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d10f:	57                   	push   edi
c001d110:	56                   	push   esi
c001d111:	53                   	push   ebx
c001d112:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d116:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d11a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d11e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d122:	57                   	push   edi
c001d123:	56                   	push   esi
c001d124:	53                   	push   ebx
c001d125:	51                   	push   ecx
c001d126:	e8 ce ff ff ff       	call   c001d0f9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	88 c2                	mov    dl,al
c001d130:	31 c0                	xor    eax,eax
c001d132:	84 d2                	test   dl,dl
c001d134:	75 0c                	jne    c001d142 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d136:	57                   	push   edi
c001d137:	56                   	push   esi
c001d138:	53                   	push   ebx
c001d139:	51                   	push   ecx
c001d13a:	e8 a6 ff ff ff       	call   c001d0e5 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d13f:	83 c4 10             	add    esp,0x10
c001d142:	83 e0 01             	and    eax,0x1
c001d145:	5b                   	pop    ebx
c001d146:	88 c1                	mov    cl,al
c001d148:	83 e2 01             	and    edx,0x1
c001d14b:	a0 81 ba 02 c0       	mov    al,ds:0xc002ba81
c001d150:	c1 e2 06             	shl    edx,0x6
c001d153:	83 e0 ba             	and    eax,0xffffffba
c001d156:	5e                   	pop    esi
c001d157:	09 c8                	or     eax,ecx
c001d159:	5f                   	pop    edi
c001d15a:	09 d0                	or     eax,edx
c001d15c:	a2 81 ba 02 c0       	mov    ds:0xc002ba81,al
c001d161:	c3                   	ret    

c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d166:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d16a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d16e:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d172:	c3                   	ret    

c001d173 <Vm::fpuAbs(unsigned long long)>:
c001d173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d177:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d17b:	c3                   	ret    

c001d17c <Vm::fpuChs(unsigned long long)>:
c001d17c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d184:	f7 d8                	neg    eax
c001d186:	83 d2 00             	adc    edx,0x0
c001d189:	f7 da                	neg    edx
c001d18b:	c3                   	ret    

c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d18c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d190:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d195:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d199:	eb c7                	jmp    c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d19b:	53                   	push   ebx
c001d19c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1ac:	0f af ca             	imul   ecx,edx
c001d1af:	0f af d8             	imul   ebx,eax
c001d1b2:	f7 e2                	mul    edx
c001d1b4:	01 d9                	add    ecx,ebx
c001d1b6:	5b                   	pop    ebx
c001d1b7:	01 ca                	add    edx,ecx
c001d1b9:	c3                   	ret    

c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1cd:	e8 0a 63 00 00       	call   c00234dc <__udivdi3>
c001d1d2:	83 c4 1c             	add    esp,0x1c
c001d1d5:	c3                   	ret    

c001d1d6 <Vm::fpuSquare(unsigned long long)>:
c001d1d6:	50                   	push   eax
c001d1d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	52                   	push   edx
c001d1e2:	50                   	push   eax
c001d1e3:	e8 b3 ff ff ff       	call   c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d1e8:	83 c4 14             	add    esp,0x14
c001d1eb:	c3                   	ret    

c001d1ec <Vm::fpuGetReg(int)>:
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d1f4:	76 10                	jbe    c001d206 <Vm::fpuGetReg(int)+0x1a>
c001d1f6:	83 ec 0c             	sub    esp,0xc
c001d1f9:	68 ee 8b 02 c0       	push   0xc0028bee
c001d1fe:	e8 d4 b8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	a0 81 ba 02 c0       	mov    al,ds:0xc002ba81
c001d20b:	b9 08 00 00 00       	mov    ecx,0x8
c001d210:	c0 e8 03             	shr    al,0x3
c001d213:	83 e0 07             	and    eax,0x7
c001d216:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d21a:	99                   	cdq    
c001d21b:	f7 f9                	idiv   ecx
c001d21d:	8b 04 d5 84 ba 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd457c]
c001d224:	8b 14 d5 88 ba 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4578]
c001d22b:	83 c4 0c             	add    esp,0xc
c001d22e:	c3                   	ret    

c001d22f <Vm::fpuSetReg(int, unsigned long long)>:
c001d22f:	57                   	push   edi
c001d230:	56                   	push   esi
c001d231:	52                   	push   edx
c001d232:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d236:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d23a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d23f:	76 10                	jbe    c001d251 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d241:	83 ec 0c             	sub    esp,0xc
c001d244:	68 01 8c 02 c0       	push   0xc0028c01
c001d249:	e8 89 b8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001d24e:	83 c4 10             	add    esp,0x10
c001d251:	a0 81 ba 02 c0       	mov    al,ds:0xc002ba81
c001d256:	b9 08 00 00 00       	mov    ecx,0x8
c001d25b:	c0 e8 03             	shr    al,0x3
c001d25e:	83 e0 07             	and    eax,0x7
c001d261:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d265:	99                   	cdq    
c001d266:	f7 f9                	idiv   ecx
c001d268:	89 34 d5 84 ba 02 c0 	mov    DWORD PTR [edx*8-0x3ffd457c],esi
c001d26f:	89 3c d5 88 ba 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4578],edi
c001d276:	58                   	pop    eax
c001d277:	5e                   	pop    esi
c001d278:	5f                   	pop    edi
c001d279:	c3                   	ret    

c001d27a <Vm::fpuPush(unsigned long long)>:
c001d27a:	a0 81 ba 02 c0       	mov    al,ds:0xc002ba81
c001d27f:	c0 e8 03             	shr    al,0x3
c001d282:	83 e0 07             	and    eax,0x7
c001d285:	83 c0 07             	add    eax,0x7
c001d288:	88 c2                	mov    dl,al
c001d28a:	83 e0 07             	and    eax,0x7
c001d28d:	83 e2 07             	and    edx,0x7
c001d290:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d297:	8a 15 81 ba 02 c0    	mov    dl,BYTE PTR ds:0xc002ba81
c001d29d:	83 e2 c7             	and    edx,0xffffffc7
c001d2a0:	09 ca                	or     edx,ecx
c001d2a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d2a6:	88 15 81 ba 02 c0    	mov    BYTE PTR ds:0xc002ba81,dl
c001d2ac:	89 0c c5 88 ba 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4578],ecx
c001d2b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2b7:	89 14 c5 84 ba 02 c0 	mov    DWORD PTR [eax*8-0x3ffd457c],edx
c001d2be:	a1 c4 ba 02 c0       	mov    eax,ds:0xc002bac4
c001d2c3:	83 f8 08             	cmp    eax,0x8
c001d2c6:	75 08                	jne    c001d2d0 <Vm::fpuPush(unsigned long long)+0x56>
c001d2c8:	80 0d 80 ba 02 c0 40 	or     BYTE PTR ds:0xc002ba80,0x40
c001d2cf:	c3                   	ret    
c001d2d0:	40                   	inc    eax
c001d2d1:	a3 c4 ba 02 c0       	mov    ds:0xc002bac4,eax
c001d2d6:	c3                   	ret    

c001d2d7 <Vm::fpuPop()>:
c001d2d7:	8a 0d 81 ba 02 c0    	mov    cl,BYTE PTR ds:0xc002ba81
c001d2dd:	53                   	push   ebx
c001d2de:	c0 e9 03             	shr    cl,0x3
c001d2e1:	8a 1d 81 ba 02 c0    	mov    bl,BYTE PTR ds:0xc002ba81
c001d2e7:	83 e1 07             	and    ecx,0x7
c001d2ea:	83 e3 c7             	and    ebx,0xffffffc7
c001d2ed:	8b 04 cd 84 ba 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd457c]
c001d2f4:	8b 14 cd 88 ba 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4578]
c001d2fb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d302:	83 e1 38             	and    ecx,0x38
c001d305:	09 d9                	or     ecx,ebx
c001d307:	88 0d 81 ba 02 c0    	mov    BYTE PTR ds:0xc002ba81,cl
c001d30d:	8b 0d c4 ba 02 c0    	mov    ecx,DWORD PTR ds:0xc002bac4
c001d313:	85 c9                	test   ecx,ecx
c001d315:	74 09                	je     c001d320 <Vm::fpuPop()+0x49>
c001d317:	49                   	dec    ecx
c001d318:	89 0d c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,ecx
c001d31e:	eb 07                	jmp    c001d327 <Vm::fpuPop()+0x50>
c001d320:	80 0d 80 ba 02 c0 40 	or     BYTE PTR ds:0xc002ba80,0x40
c001d327:	5b                   	pop    ebx
c001d328:	c3                   	ret    

c001d329 <Vm::x87Handler(regs*)>:
c001d329:	55                   	push   ebp
c001d32a:	57                   	push   edi
c001d32b:	56                   	push   esi
c001d32c:	53                   	push   ebx
c001d32d:	83 ec 1c             	sub    esp,0x1c
c001d330:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d334:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d339:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d33c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d344:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d348:	50                   	push   eax
c001d349:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d34d:	50                   	push   eax
c001d34e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d352:	50                   	push   eax
c001d353:	53                   	push   ebx
c001d354:	e8 83 b5 ff ff       	call   c00188dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d359:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d35c:	83 c4 10             	add    esp,0x10
c001d35f:	89 c6                	mov    esi,eax
c001d361:	80 fa d9             	cmp    dl,0xd9
c001d364:	0f 85 52 01 00 00    	jne    c001d4bc <Vm::x87Handler(regs*)+0x193>
c001d36a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d36e:	8d 50 20             	lea    edx,[eax+0x20]
c001d371:	80 fa 0e             	cmp    dl,0xe
c001d374:	0f 87 86 00 00 00    	ja     c001d400 <Vm::x87Handler(regs*)+0xd7>
c001d37a:	0f b6 d2             	movzx  edx,dl
c001d37d:	ff 24 95 14 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd73ec]
c001d384:	e8 e7 fc ff ff       	call   c001d070 <Vm::fpuGet0()>
c001d389:	eb 05                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d38b:	e8 e5 fc ff ff       	call   c001d075 <Vm::fpuGet1()>
c001d390:	57                   	push   edi
c001d391:	57                   	push   edi
c001d392:	52                   	push   edx
c001d393:	50                   	push   eax
c001d394:	e8 e1 fe ff ff       	call   c001d27a <Vm::fpuPush(unsigned long long)>
c001d399:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d39d:	83 c4 10             	add    esp,0x10
c001d3a0:	b0 01                	mov    al,0x1
c001d3a2:	e9 e3 09 00 00       	jmp    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001d3a7:	83 ec 0c             	sub    esp,0xc
c001d3aa:	6a 00                	push   0x0
c001d3ac:	e8 3b fe ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d3b1:	59                   	pop    ecx
c001d3b2:	5e                   	pop    esi
c001d3b3:	52                   	push   edx
c001d3b4:	50                   	push   eax
c001d3b5:	e8 c2 fd ff ff       	call   c001d17c <Vm::fpuChs(unsigned long long)>
c001d3ba:	eb 13                	jmp    c001d3cf <Vm::x87Handler(regs*)+0xa6>
c001d3bc:	83 ec 0c             	sub    esp,0xc
c001d3bf:	6a 00                	push   0x0
c001d3c1:	e8 26 fe ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d3c6:	5f                   	pop    edi
c001d3c7:	5d                   	pop    ebp
c001d3c8:	52                   	push   edx
c001d3c9:	50                   	push   eax
c001d3ca:	e8 a4 fd ff ff       	call   c001d173 <Vm::fpuAbs(unsigned long long)>
c001d3cf:	83 c4 0c             	add    esp,0xc
c001d3d2:	52                   	push   edx
c001d3d3:	50                   	push   eax
c001d3d4:	6a 00                	push   0x0
c001d3d6:	e8 54 fe ff ff       	call   c001d22f <Vm::fpuSetReg(int, unsigned long long)>
c001d3db:	eb bc                	jmp    c001d399 <Vm::x87Handler(regs*)+0x70>
c001d3dd:	e8 d3 fc ff ff       	call   c001d0b5 <Vm::fpuGetLog210()>
c001d3e2:	eb ac                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d3e4:	e8 9c fc ff ff       	call   c001d085 <Vm::fpuGetLog2E()>
c001d3e9:	eb a5                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d3eb:	e8 8d fc ff ff       	call   c001d07d <Vm::fpuGetPi()>
c001d3f0:	eb 9e                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d3f2:	e8 d6 fc ff ff       	call   c001d0cd <Vm::fpuGetLog102()>
c001d3f7:	eb 97                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d3f9:	e8 9f fc ff ff       	call   c001d09d <Vm::fpuGetLogE2()>
c001d3fe:	eb 90                	jmp    c001d390 <Vm::x87Handler(regs*)+0x67>
c001d400:	8d 50 40             	lea    edx,[eax+0x40]
c001d403:	80 fa 07             	cmp    dl,0x7
c001d406:	77 15                	ja     c001d41d <Vm::x87Handler(regs*)+0xf4>
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	2d c0 00 00 00       	sub    eax,0xc0
c001d410:	50                   	push   eax
c001d411:	e8 d6 fd ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d416:	59                   	pop    ecx
c001d417:	5e                   	pop    esi
c001d418:	e9 75 ff ff ff       	jmp    c001d392 <Vm::x87Handler(regs*)+0x69>
c001d41d:	8d 50 38             	lea    edx,[eax+0x38]
c001d420:	80 fa 07             	cmp    dl,0x7
c001d423:	77 3c                	ja     c001d461 <Vm::x87Handler(regs*)+0x138>
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	2d c8 00 00 00       	sub    eax,0xc8
c001d42d:	50                   	push   eax
c001d42e:	e8 b9 fd ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d43a:	89 c6                	mov    esi,eax
c001d43c:	89 d7                	mov    edi,edx
c001d43e:	e8 a9 fd ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d443:	83 c4 0c             	add    esp,0xc
c001d446:	52                   	push   edx
c001d447:	50                   	push   eax
c001d448:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d44c:	2d c8 00 00 00       	sub    eax,0xc8
c001d451:	50                   	push   eax
c001d452:	e8 d8 fd ff ff       	call   c001d22f <Vm::fpuSetReg(int, unsigned long long)>
c001d457:	83 c4 0c             	add    esp,0xc
c001d45a:	57                   	push   edi
c001d45b:	56                   	push   esi
c001d45c:	e9 73 ff ff ff       	jmp    c001d3d4 <Vm::x87Handler(regs*)+0xab>
c001d461:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d465:	84 d2                	test   dl,dl
c001d467:	75 0f                	jne    c001d478 <Vm::x87Handler(regs*)+0x14f>
c001d469:	83 ec 0c             	sub    esp,0xc
c001d46c:	ff 36                	push   DWORD PTR [esi]
c001d46e:	e8 c8 fa ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001d473:	e9 bf 00 00 00       	jmp    c001d537 <Vm::x87Handler(regs*)+0x20e>
c001d478:	80 fa 03             	cmp    dl,0x3
c001d47b:	75 13                	jne    c001d490 <Vm::x87Handler(regs*)+0x167>
c001d47d:	e8 55 fe ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001d482:	55                   	push   ebp
c001d483:	55                   	push   ebp
c001d484:	52                   	push   edx
c001d485:	50                   	push   eax
c001d486:	e8 4c fa ff ff       	call   c001ced7 <Vm::fpuInternalTo32(unsigned long long)>
c001d48b:	e9 88 00 00 00       	jmp    c001d518 <Vm::x87Handler(regs*)+0x1ef>
c001d490:	80 fa 05             	cmp    dl,0x5
c001d493:	75 0e                	jne    c001d4a3 <Vm::x87Handler(regs*)+0x17a>
c001d495:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d498:	66 a3 82 ba 02 c0    	mov    ds:0xc002ba82,ax
c001d49e:	e9 df 00 00 00       	jmp    c001d582 <Vm::x87Handler(regs*)+0x259>
c001d4a3:	31 c0                	xor    eax,eax
c001d4a5:	80 fa 07             	cmp    dl,0x7
c001d4a8:	0f 85 dc 08 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001d4ae:	66 a1 82 ba 02 c0    	mov    ax,ds:0xc002ba82
c001d4b4:	66 89 06             	mov    WORD PTR [esi],ax
c001d4b7:	e9 c6 00 00 00       	jmp    c001d582 <Vm::x87Handler(regs*)+0x259>
c001d4bc:	80 fa d8             	cmp    dl,0xd8
c001d4bf:	0f 84 c9 00 00 00    	je     c001d58e <Vm::x87Handler(regs*)+0x265>
c001d4c5:	80 fa dc             	cmp    dl,0xdc
c001d4c8:	0f 84 0d 02 00 00    	je     c001d6db <Vm::x87Handler(regs*)+0x3b2>
c001d4ce:	80 fa de             	cmp    dl,0xde
c001d4d1:	0f 84 cd 02 00 00    	je     c001d7a4 <Vm::x87Handler(regs*)+0x47b>
c001d4d7:	80 fa dd             	cmp    dl,0xdd
c001d4da:	0f 84 5f 04 00 00    	je     c001d93f <Vm::x87Handler(regs*)+0x616>
c001d4e0:	80 fa da             	cmp    dl,0xda
c001d4e3:	0f 84 24 05 00 00    	je     c001da0d <Vm::x87Handler(regs*)+0x6e4>
c001d4e9:	80 fa df             	cmp    dl,0xdf
c001d4ec:	0f 84 68 05 00 00    	je     c001da5a <Vm::x87Handler(regs*)+0x731>
c001d4f2:	31 c0                	xor    eax,eax
c001d4f4:	80 fa db             	cmp    dl,0xdb
c001d4f7:	0f 85 8d 08 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001d4fd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d501:	80 fa 03             	cmp    dl,0x3
c001d504:	0f 85 70 06 00 00    	jne    c001db7a <Vm::x87Handler(regs*)+0x851>
c001d50a:	e8 c8 fd ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001d50f:	55                   	push   ebp
c001d510:	55                   	push   ebp
c001d511:	52                   	push   edx
c001d512:	50                   	push   eax
c001d513:	e8 71 fa ff ff       	call   c001cf89 <Vm::fpuFloatToLong(unsigned long long)>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	89 06                	mov    DWORD PTR [esi],eax
c001d51d:	eb 63                	jmp    c001d582 <Vm::x87Handler(regs*)+0x259>
c001d51f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d523:	84 d2                	test   dl,dl
c001d525:	0f 85 e6 05 00 00    	jne    c001db11 <Vm::x87Handler(regs*)+0x7e8>
c001d52b:	57                   	push   edi
c001d52c:	57                   	push   edi
c001d52d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d530:	ff 36                	push   DWORD PTR [esi]
c001d532:	e8 49 fa ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001d537:	5e                   	pop    esi
c001d538:	5f                   	pop    edi
c001d539:	52                   	push   edx
c001d53a:	50                   	push   eax
c001d53b:	e8 3a fd ff ff       	call   c001d27a <Vm::fpuPush(unsigned long long)>
c001d540:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d544:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d547:	e9 51 fe ff ff       	jmp    c001d39d <Vm::x87Handler(regs*)+0x74>
c001d54c:	80 fa 03             	cmp    dl,0x3
c001d54f:	0f 85 d7 06 00 00    	jne    c001dc2c <Vm::x87Handler(regs*)+0x903>
c001d555:	57                   	push   edi
c001d556:	57                   	push   edi
c001d557:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d55a:	ff 36                	push   DWORD PTR [esi]
c001d55c:	e8 1f fa ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001d561:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d568:	89 c6                	mov    esi,eax
c001d56a:	89 d7                	mov    edi,edx
c001d56c:	e8 7b fc ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d571:	57                   	push   edi
c001d572:	56                   	push   esi
c001d573:	52                   	push   edx
c001d574:	50                   	push   eax
c001d575:	e8 95 fb ff ff       	call   c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d57a:	83 c4 20             	add    esp,0x20
c001d57d:	e8 55 fd ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001d582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d586:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d589:	e9 12 fe ff ff       	jmp    c001d3a0 <Vm::x87Handler(regs*)+0x77>
c001d58e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d592:	8d 50 40             	lea    edx,[eax+0x40]
c001d595:	80 fa 07             	cmp    dl,0x7
c001d598:	77 29                	ja     c001d5c3 <Vm::x87Handler(regs*)+0x29a>
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	2d c0 00 00 00       	sub    eax,0xc0
c001d5a2:	50                   	push   eax
c001d5a3:	e8 44 fc ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d5a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5af:	89 c6                	mov    esi,eax
c001d5b1:	89 d7                	mov    edi,edx
c001d5b3:	e8 34 fc ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d5b8:	57                   	push   edi
c001d5b9:	56                   	push   esi
c001d5ba:	52                   	push   edx
c001d5bb:	50                   	push   eax
c001d5bc:	e8 a1 fb ff ff       	call   c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d5c1:	eb 2f                	jmp    c001d5f2 <Vm::x87Handler(regs*)+0x2c9>
c001d5c3:	8d 50 38             	lea    edx,[eax+0x38]
c001d5c6:	80 fa 07             	cmp    dl,0x7
c001d5c9:	77 2f                	ja     c001d5fa <Vm::x87Handler(regs*)+0x2d1>
c001d5cb:	83 ec 0c             	sub    esp,0xc
c001d5ce:	2d c8 00 00 00       	sub    eax,0xc8
c001d5d3:	50                   	push   eax
c001d5d4:	e8 13 fc ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d5d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5e0:	89 c6                	mov    esi,eax
c001d5e2:	89 d7                	mov    edi,edx
c001d5e4:	e8 03 fc ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d5e9:	57                   	push   edi
c001d5ea:	56                   	push   esi
c001d5eb:	52                   	push   edx
c001d5ec:	50                   	push   eax
c001d5ed:	e8 a9 fb ff ff       	call   c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d5f2:	83 c4 1c             	add    esp,0x1c
c001d5f5:	e9 d8 fd ff ff       	jmp    c001d3d2 <Vm::x87Handler(regs*)+0xa9>
c001d5fa:	8d 50 30             	lea    edx,[eax+0x30]
c001d5fd:	80 fa 07             	cmp    dl,0x7
c001d600:	77 0d                	ja     c001d60f <Vm::x87Handler(regs*)+0x2e6>
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	2d d0 00 00 00       	sub    eax,0xd0
c001d60a:	e9 99 03 00 00       	jmp    c001d9a8 <Vm::x87Handler(regs*)+0x67f>
c001d60f:	8d 50 28             	lea    edx,[eax+0x28]
c001d612:	80 fa 07             	cmp    dl,0x7
c001d615:	77 0d                	ja     c001d624 <Vm::x87Handler(regs*)+0x2fb>
c001d617:	83 ec 0c             	sub    esp,0xc
c001d61a:	2d d8 00 00 00       	sub    eax,0xd8
c001d61f:	e9 c0 03 00 00       	jmp    c001d9e4 <Vm::x87Handler(regs*)+0x6bb>
c001d624:	8d 50 20             	lea    edx,[eax+0x20]
c001d627:	80 fa 07             	cmp    dl,0x7
c001d62a:	77 1b                	ja     c001d647 <Vm::x87Handler(regs*)+0x31e>
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	2d e0 00 00 00       	sub    eax,0xe0
c001d634:	50                   	push   eax
c001d635:	e8 b2 fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d63a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d641:	89 c6                	mov    esi,eax
c001d643:	89 d7                	mov    edi,edx
c001d645:	eb 22                	jmp    c001d669 <Vm::x87Handler(regs*)+0x340>
c001d647:	8d 50 18             	lea    edx,[eax+0x18]
c001d64a:	80 fa 07             	cmp    dl,0x7
c001d64d:	77 2d                	ja     c001d67c <Vm::x87Handler(regs*)+0x353>
c001d64f:	83 ec 0c             	sub    esp,0xc
c001d652:	6a 00                	push   0x0
c001d654:	e8 93 fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d659:	89 c6                	mov    esi,eax
c001d65b:	89 d7                	mov    edi,edx
c001d65d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d661:	2d e8 00 00 00       	sub    eax,0xe8
c001d666:	89 04 24             	mov    DWORD PTR [esp],eax
c001d669:	e8 7e fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d66e:	57                   	push   edi
c001d66f:	56                   	push   esi
c001d670:	52                   	push   edx
c001d671:	50                   	push   eax
c001d672:	e8 15 fb ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d677:	e9 76 ff ff ff       	jmp    c001d5f2 <Vm::x87Handler(regs*)+0x2c9>
c001d67c:	8d 50 10             	lea    edx,[eax+0x10]
c001d67f:	80 fa 07             	cmp    dl,0x7
c001d682:	77 1b                	ja     c001d69f <Vm::x87Handler(regs*)+0x376>
c001d684:	83 ec 0c             	sub    esp,0xc
c001d687:	2d f0 00 00 00       	sub    eax,0xf0
c001d68c:	50                   	push   eax
c001d68d:	e8 5a fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d692:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d699:	89 c6                	mov    esi,eax
c001d69b:	89 d7                	mov    edi,edx
c001d69d:	eb 22                	jmp    c001d6c1 <Vm::x87Handler(regs*)+0x398>
c001d69f:	3c f7                	cmp    al,0xf7
c001d6a1:	0f 86 d1 03 00 00    	jbe    c001da78 <Vm::x87Handler(regs*)+0x74f>
c001d6a7:	83 ec 0c             	sub    esp,0xc
c001d6aa:	6a 00                	push   0x0
c001d6ac:	e8 3b fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d6b1:	89 c6                	mov    esi,eax
c001d6b3:	89 d7                	mov    edi,edx
c001d6b5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6b9:	2d f8 00 00 00       	sub    eax,0xf8
c001d6be:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6c1:	e8 26 fb ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d6c6:	57                   	push   edi
c001d6c7:	56                   	push   esi
c001d6c8:	52                   	push   edx
c001d6c9:	50                   	push   eax
c001d6ca:	e8 eb fa ff ff       	call   c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d6cf:	83 c4 1c             	add    esp,0x1c
c001d6d2:	52                   	push   edx
c001d6d3:	50                   	push   eax
c001d6d4:	6a 00                	push   0x0
c001d6d6:	e9 51 02 00 00       	jmp    c001d92c <Vm::x87Handler(regs*)+0x603>
c001d6db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6df:	8d 50 40             	lea    edx,[eax+0x40]
c001d6e2:	80 fa 07             	cmp    dl,0x7
c001d6e5:	77 37                	ja     c001d71e <Vm::x87Handler(regs*)+0x3f5>
c001d6e7:	83 ec 0c             	sub    esp,0xc
c001d6ea:	2d c0 00 00 00       	sub    eax,0xc0
c001d6ef:	50                   	push   eax
c001d6f0:	e8 f7 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d6f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6fc:	89 c6                	mov    esi,eax
c001d6fe:	89 d7                	mov    edi,edx
c001d700:	e8 e7 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d705:	57                   	push   edi
c001d706:	56                   	push   esi
c001d707:	52                   	push   edx
c001d708:	50                   	push   eax
c001d709:	e8 54 fa ff ff       	call   c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d70e:	83 c4 1c             	add    esp,0x1c
c001d711:	52                   	push   edx
c001d712:	50                   	push   eax
c001d713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d717:	2d c0 00 00 00       	sub    eax,0xc0
c001d71c:	eb 3d                	jmp    c001d75b <Vm::x87Handler(regs*)+0x432>
c001d71e:	8d 50 38             	lea    edx,[eax+0x38]
c001d721:	80 fa 07             	cmp    dl,0x7
c001d724:	77 3b                	ja     c001d761 <Vm::x87Handler(regs*)+0x438>
c001d726:	83 ec 0c             	sub    esp,0xc
c001d729:	2d c8 00 00 00       	sub    eax,0xc8
c001d72e:	50                   	push   eax
c001d72f:	e8 b8 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d734:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d73b:	89 c6                	mov    esi,eax
c001d73d:	89 d7                	mov    edi,edx
c001d73f:	e8 a8 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d744:	57                   	push   edi
c001d745:	56                   	push   esi
c001d746:	52                   	push   edx
c001d747:	50                   	push   eax
c001d748:	e8 4e fa ff ff       	call   c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d74d:	83 c4 1c             	add    esp,0x1c
c001d750:	52                   	push   edx
c001d751:	50                   	push   eax
c001d752:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d756:	2d c8 00 00 00       	sub    eax,0xc8
c001d75b:	50                   	push   eax
c001d75c:	e9 75 fc ff ff       	jmp    c001d3d6 <Vm::x87Handler(regs*)+0xad>
c001d761:	83 c0 18             	add    eax,0x18
c001d764:	3c 07                	cmp    al,0x7
c001d766:	0f 87 3b 04 00 00    	ja     c001dba7 <Vm::x87Handler(regs*)+0x87e>
c001d76c:	83 ec 0c             	sub    esp,0xc
c001d76f:	6a 00                	push   0x0
c001d771:	e8 76 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d776:	89 c6                	mov    esi,eax
c001d778:	89 d7                	mov    edi,edx
c001d77a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d77e:	2d e8 00 00 00       	sub    eax,0xe8
c001d783:	89 04 24             	mov    DWORD PTR [esp],eax
c001d786:	e8 61 fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d78b:	57                   	push   edi
c001d78c:	56                   	push   esi
c001d78d:	52                   	push   edx
c001d78e:	50                   	push   eax
c001d78f:	e8 f8 f9 ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d794:	83 c4 1c             	add    esp,0x1c
c001d797:	52                   	push   edx
c001d798:	50                   	push   eax
c001d799:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d79d:	2d e8 00 00 00       	sub    eax,0xe8
c001d7a2:	eb b7                	jmp    c001d75b <Vm::x87Handler(regs*)+0x432>
c001d7a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7a8:	8d 50 40             	lea    edx,[eax+0x40]
c001d7ab:	80 fa 07             	cmp    dl,0x7
c001d7ae:	77 3a                	ja     c001d7ea <Vm::x87Handler(regs*)+0x4c1>
c001d7b0:	83 ec 0c             	sub    esp,0xc
c001d7b3:	2d c0 00 00 00       	sub    eax,0xc0
c001d7b8:	50                   	push   eax
c001d7b9:	e8 2e fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d7be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7c5:	89 c6                	mov    esi,eax
c001d7c7:	89 d7                	mov    edi,edx
c001d7c9:	e8 1e fa ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d7ce:	57                   	push   edi
c001d7cf:	56                   	push   esi
c001d7d0:	52                   	push   edx
c001d7d1:	50                   	push   eax
c001d7d2:	e8 8b f9 ff ff       	call   c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d7d7:	83 c4 1c             	add    esp,0x1c
c001d7da:	52                   	push   edx
c001d7db:	50                   	push   eax
c001d7dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7e0:	2d c0 00 00 00       	sub    eax,0xc0
c001d7e5:	e9 9e 01 00 00       	jmp    c001d988 <Vm::x87Handler(regs*)+0x65f>
c001d7ea:	8d 50 20             	lea    edx,[eax+0x20]
c001d7ed:	80 fa 07             	cmp    dl,0x7
c001d7f0:	77 3a                	ja     c001d82c <Vm::x87Handler(regs*)+0x503>
c001d7f2:	83 ec 0c             	sub    esp,0xc
c001d7f5:	2d e0 00 00 00       	sub    eax,0xe0
c001d7fa:	50                   	push   eax
c001d7fb:	e8 ec f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d800:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d807:	89 c6                	mov    esi,eax
c001d809:	89 d7                	mov    edi,edx
c001d80b:	e8 dc f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d810:	57                   	push   edi
c001d811:	56                   	push   esi
c001d812:	52                   	push   edx
c001d813:	50                   	push   eax
c001d814:	e8 73 f9 ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d819:	83 c4 1c             	add    esp,0x1c
c001d81c:	52                   	push   edx
c001d81d:	50                   	push   eax
c001d81e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d822:	2d e0 00 00 00       	sub    eax,0xe0
c001d827:	e9 5c 01 00 00       	jmp    c001d988 <Vm::x87Handler(regs*)+0x65f>
c001d82c:	8d 50 18             	lea    edx,[eax+0x18]
c001d82f:	80 fa 07             	cmp    dl,0x7
c001d832:	77 3b                	ja     c001d86f <Vm::x87Handler(regs*)+0x546>
c001d834:	83 ec 0c             	sub    esp,0xc
c001d837:	6a 00                	push   0x0
c001d839:	e8 ae f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d83e:	89 c6                	mov    esi,eax
c001d840:	89 d7                	mov    edi,edx
c001d842:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d846:	2d e8 00 00 00       	sub    eax,0xe8
c001d84b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d84e:	e8 99 f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d853:	57                   	push   edi
c001d854:	56                   	push   esi
c001d855:	52                   	push   edx
c001d856:	50                   	push   eax
c001d857:	e8 30 f9 ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d85c:	83 c4 1c             	add    esp,0x1c
c001d85f:	52                   	push   edx
c001d860:	50                   	push   eax
c001d861:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d865:	2d e8 00 00 00       	sub    eax,0xe8
c001d86a:	e9 19 01 00 00       	jmp    c001d988 <Vm::x87Handler(regs*)+0x65f>
c001d86f:	8d 50 38             	lea    edx,[eax+0x38]
c001d872:	80 fa 07             	cmp    dl,0x7
c001d875:	77 37                	ja     c001d8ae <Vm::x87Handler(regs*)+0x585>
c001d877:	83 ec 0c             	sub    esp,0xc
c001d87a:	2d c8 00 00 00       	sub    eax,0xc8
c001d87f:	50                   	push   eax
c001d880:	e8 67 f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d885:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d88c:	89 c6                	mov    esi,eax
c001d88e:	89 d7                	mov    edi,edx
c001d890:	e8 57 f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d895:	57                   	push   edi
c001d896:	56                   	push   esi
c001d897:	52                   	push   edx
c001d898:	50                   	push   eax
c001d899:	e8 fd f8 ff ff       	call   c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d89e:	83 c4 1c             	add    esp,0x1c
c001d8a1:	52                   	push   edx
c001d8a2:	50                   	push   eax
c001d8a3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8a7:	2d c8 00 00 00       	sub    eax,0xc8
c001d8ac:	eb 7d                	jmp    c001d92b <Vm::x87Handler(regs*)+0x602>
c001d8ae:	3c f7                	cmp    al,0xf7
c001d8b0:	76 38                	jbe    c001d8ea <Vm::x87Handler(regs*)+0x5c1>
c001d8b2:	83 ec 0c             	sub    esp,0xc
c001d8b5:	6a 00                	push   0x0
c001d8b7:	e8 30 f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d8bc:	89 c6                	mov    esi,eax
c001d8be:	89 d7                	mov    edi,edx
c001d8c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8c4:	2d f8 00 00 00       	sub    eax,0xf8
c001d8c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8cc:	e8 1b f9 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d8d1:	57                   	push   edi
c001d8d2:	56                   	push   esi
c001d8d3:	52                   	push   edx
c001d8d4:	50                   	push   eax
c001d8d5:	e8 e0 f8 ff ff       	call   c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d8da:	83 c4 1c             	add    esp,0x1c
c001d8dd:	52                   	push   edx
c001d8de:	50                   	push   eax
c001d8df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8e3:	2d f8 00 00 00       	sub    eax,0xf8
c001d8e8:	eb 41                	jmp    c001d92b <Vm::x87Handler(regs*)+0x602>
c001d8ea:	8d 50 10             	lea    edx,[eax+0x10]
c001d8ed:	80 fa 07             	cmp    dl,0x7
c001d8f0:	0f 87 5a 01 00 00    	ja     c001da50 <Vm::x87Handler(regs*)+0x727>
c001d8f6:	83 ec 0c             	sub    esp,0xc
c001d8f9:	2d f0 00 00 00       	sub    eax,0xf0
c001d8fe:	50                   	push   eax
c001d8ff:	e8 e8 f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d904:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d90b:	89 c6                	mov    esi,eax
c001d90d:	89 d7                	mov    edi,edx
c001d90f:	e8 d8 f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d914:	57                   	push   edi
c001d915:	56                   	push   esi
c001d916:	52                   	push   edx
c001d917:	50                   	push   eax
c001d918:	e8 9d f8 ff ff       	call   c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d91d:	83 c4 1c             	add    esp,0x1c
c001d920:	52                   	push   edx
c001d921:	50                   	push   eax
c001d922:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d926:	2d f0 00 00 00       	sub    eax,0xf0
c001d92b:	50                   	push   eax
c001d92c:	e8 fe f8 ff ff       	call   c001d22f <Vm::fpuSetReg(int, unsigned long long)>
c001d931:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d935:	e8 9d f9 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001d93a:	e9 5e fa ff ff       	jmp    c001d39d <Vm::x87Handler(regs*)+0x74>
c001d93f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d943:	8d 50 30             	lea    edx,[eax+0x30]
c001d946:	80 fa 07             	cmp    dl,0x7
c001d949:	77 1d                	ja     c001d968 <Vm::x87Handler(regs*)+0x63f>
c001d94b:	83 ec 0c             	sub    esp,0xc
c001d94e:	6a 00                	push   0x0
c001d950:	e8 97 f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d955:	83 c4 0c             	add    esp,0xc
c001d958:	52                   	push   edx
c001d959:	50                   	push   eax
c001d95a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d95e:	2d d0 00 00 00       	sub    eax,0xd0
c001d963:	e9 f3 fd ff ff       	jmp    c001d75b <Vm::x87Handler(regs*)+0x432>
c001d968:	8d 50 28             	lea    edx,[eax+0x28]
c001d96b:	80 fa 07             	cmp    dl,0x7
c001d96e:	77 28                	ja     c001d998 <Vm::x87Handler(regs*)+0x66f>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	6a 00                	push   0x0
c001d975:	e8 72 f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d97a:	83 c4 0c             	add    esp,0xc
c001d97d:	52                   	push   edx
c001d97e:	50                   	push   eax
c001d97f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d983:	2d d8 00 00 00       	sub    eax,0xd8
c001d988:	50                   	push   eax
c001d989:	e8 a1 f8 ff ff       	call   c001d22f <Vm::fpuSetReg(int, unsigned long long)>
c001d98e:	e8 44 f9 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001d993:	e9 01 fa ff ff       	jmp    c001d399 <Vm::x87Handler(regs*)+0x70>
c001d998:	8d 50 20             	lea    edx,[eax+0x20]
c001d99b:	80 fa 07             	cmp    dl,0x7
c001d99e:	77 30                	ja     c001d9d0 <Vm::x87Handler(regs*)+0x6a7>
c001d9a0:	83 ec 0c             	sub    esp,0xc
c001d9a3:	2d e0 00 00 00       	sub    eax,0xe0
c001d9a8:	50                   	push   eax
c001d9a9:	e8 3e f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d9ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9b5:	89 c6                	mov    esi,eax
c001d9b7:	89 d7                	mov    edi,edx
c001d9b9:	e8 2e f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d9be:	57                   	push   edi
c001d9bf:	56                   	push   esi
c001d9c0:	52                   	push   edx
c001d9c1:	50                   	push   eax
c001d9c2:	e8 48 f7 ff ff       	call   c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d9c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d9cb:	e9 54 02 00 00       	jmp    c001dc24 <Vm::x87Handler(regs*)+0x8fb>
c001d9d0:	8d 50 18             	lea    edx,[eax+0x18]
c001d9d3:	80 fa 07             	cmp    dl,0x7
c001d9d6:	0f 87 43 fb ff ff    	ja     c001d51f <Vm::x87Handler(regs*)+0x1f6>
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	2d e8 00 00 00       	sub    eax,0xe8
c001d9e4:	50                   	push   eax
c001d9e5:	e8 02 f8 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d9ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9f1:	89 c6                	mov    esi,eax
c001d9f3:	89 d7                	mov    edi,edx
c001d9f5:	e8 f2 f7 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001d9fa:	57                   	push   edi
c001d9fb:	56                   	push   esi
c001d9fc:	52                   	push   edx
c001d9fd:	50                   	push   eax
c001d9fe:	e8 0c f7 ff ff       	call   c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da03:	83 c4 20             	add    esp,0x20
c001da06:	e8 cc f8 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001da0b:	eb 62                	jmp    c001da6f <Vm::x87Handler(regs*)+0x746>
c001da0d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001da11:	0f 85 0f 01 00 00    	jne    c001db26 <Vm::x87Handler(regs*)+0x7fd>
c001da17:	83 ec 0c             	sub    esp,0xc
c001da1a:	6a 01                	push   0x1
c001da1c:	e8 cb f7 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001da21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001da28:	89 c6                	mov    esi,eax
c001da2a:	89 d7                	mov    edi,edx
c001da2c:	e8 bb f7 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001da31:	57                   	push   edi
c001da32:	56                   	push   esi
c001da33:	52                   	push   edx
c001da34:	50                   	push   eax
c001da35:	e8 d5 f6 ff ff       	call   c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da3a:	83 c4 20             	add    esp,0x20
c001da3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da41:	e8 91 f8 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001da46:	e8 8c f8 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001da4b:	e9 50 f9 ff ff       	jmp    c001d3a0 <Vm::x87Handler(regs*)+0x77>
c001da50:	3c d9                	cmp    al,0xd9
c001da52:	0f 85 b5 02 00 00    	jne    c001dd0d <Vm::x87Handler(regs*)+0x9e4>
c001da58:	eb bd                	jmp    c001da17 <Vm::x87Handler(regs*)+0x6ee>
c001da5a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001da5e:	0f 85 ea 02 00 00    	jne    c001dd4e <Vm::x87Handler(regs*)+0xa25>
c001da64:	0f b7 05 80 ba 02 c0 	movzx  eax,WORD PTR ds:0xc002ba80
c001da6b:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001da6f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da73:	e9 28 f9 ff ff       	jmp    c001d3a0 <Vm::x87Handler(regs*)+0x77>
c001da78:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da7c:	84 d2                	test   dl,dl
c001da7e:	75 0f                	jne    c001da8f <Vm::x87Handler(regs*)+0x766>
c001da80:	83 ec 0c             	sub    esp,0xc
c001da83:	ff 36                	push   DWORD PTR [esi]
c001da85:	e8 b1 f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001da8a:	e9 2c 01 00 00       	jmp    c001dbbb <Vm::x87Handler(regs*)+0x892>
c001da8f:	80 fa 01             	cmp    dl,0x1
c001da92:	75 0f                	jne    c001daa3 <Vm::x87Handler(regs*)+0x77a>
c001da94:	83 ec 0c             	sub    esp,0xc
c001da97:	ff 36                	push   DWORD PTR [esi]
c001da99:	e8 9d f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001da9e:	e9 81 02 00 00       	jmp    c001dd24 <Vm::x87Handler(regs*)+0x9fb>
c001daa3:	80 fa 04             	cmp    dl,0x4
c001daa6:	75 0f                	jne    c001dab7 <Vm::x87Handler(regs*)+0x78e>
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	ff 36                	push   DWORD PTR [esi]
c001daad:	e8 89 f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001dab2:	e9 86 01 00 00       	jmp    c001dc3d <Vm::x87Handler(regs*)+0x914>
c001dab7:	80 fa 05             	cmp    dl,0x5
c001daba:	75 1b                	jne    c001dad7 <Vm::x87Handler(regs*)+0x7ae>
c001dabc:	83 ec 0c             	sub    esp,0xc
c001dabf:	6a 00                	push   0x0
c001dac1:	e8 26 f7 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dac6:	89 c7                	mov    edi,eax
c001dac8:	89 d5                	mov    ebp,edx
c001daca:	58                   	pop    eax
c001dacb:	ff 36                	push   DWORD PTR [esi]
c001dacd:	e8 69 f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001dad2:	e9 a3 01 00 00       	jmp    c001dc7a <Vm::x87Handler(regs*)+0x951>
c001dad7:	80 fa 06             	cmp    dl,0x6
c001dada:	75 0f                	jne    c001daeb <Vm::x87Handler(regs*)+0x7c2>
c001dadc:	83 ec 0c             	sub    esp,0xc
c001dadf:	ff 36                	push   DWORD PTR [esi]
c001dae1:	e8 55 f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001dae6:	e9 ae 01 00 00       	jmp    c001dc99 <Vm::x87Handler(regs*)+0x970>
c001daeb:	31 c0                	xor    eax,eax
c001daed:	80 fa 07             	cmp    dl,0x7
c001daf0:	0f 85 94 02 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	6a 00                	push   0x0
c001dafb:	e8 ec f6 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001db00:	89 c7                	mov    edi,eax
c001db02:	89 d5                	mov    ebp,edx
c001db04:	58                   	pop    eax
c001db05:	ff 36                	push   DWORD PTR [esi]
c001db07:	e8 2f f4 ff ff       	call   c001cf3b <Vm::fpu32ToInternal(unsigned int)>
c001db0c:	e9 cb 01 00 00       	jmp    c001dcdc <Vm::x87Handler(regs*)+0x9b3>
c001db11:	80 fa 03             	cmp    dl,0x3
c001db14:	0f 85 d3 01 00 00    	jne    c001dced <Vm::x87Handler(regs*)+0x9c4>
c001db1a:	e8 b8 f7 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001db1f:	51                   	push   ecx
c001db20:	51                   	push   ecx
c001db21:	e9 de 01 00 00       	jmp    c001dd04 <Vm::x87Handler(regs*)+0x9db>
c001db26:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001db2a:	80 fa 01             	cmp    dl,0x1
c001db2d:	75 09                	jne    c001db38 <Vm::x87Handler(regs*)+0x80f>
c001db2f:	57                   	push   edi
c001db30:	57                   	push   edi
c001db31:	8b 06                	mov    eax,DWORD PTR [esi]
c001db33:	e9 e3 01 00 00       	jmp    c001dd1b <Vm::x87Handler(regs*)+0x9f2>
c001db38:	80 fa 04             	cmp    dl,0x4
c001db3b:	75 12                	jne    c001db4f <Vm::x87Handler(regs*)+0x826>
c001db3d:	31 d2                	xor    edx,edx
c001db3f:	51                   	push   ecx
c001db40:	51                   	push   ecx
c001db41:	8b 06                	mov    eax,DWORD PTR [esi]
c001db43:	52                   	push   edx
c001db44:	50                   	push   eax
c001db45:	e8 d0 f4 ff ff       	call   c001d01a <Vm::fpuLongToFloat(long long)>
c001db4a:	e9 ee 00 00 00       	jmp    c001dc3d <Vm::x87Handler(regs*)+0x914>
c001db4f:	31 c0                	xor    eax,eax
c001db51:	80 fa 07             	cmp    dl,0x7
c001db54:	0f 85 30 02 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001db5a:	83 ec 0c             	sub    esp,0xc
c001db5d:	6a 00                	push   0x0
c001db5f:	e8 88 f6 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001db64:	89 c7                	mov    edi,eax
c001db66:	89 d5                	mov    ebp,edx
c001db68:	58                   	pop    eax
c001db69:	8b 06                	mov    eax,DWORD PTR [esi]
c001db6b:	5a                   	pop    edx
c001db6c:	31 d2                	xor    edx,edx
c001db6e:	52                   	push   edx
c001db6f:	50                   	push   eax
c001db70:	e8 a5 f4 ff ff       	call   c001d01a <Vm::fpuLongToFloat(long long)>
c001db75:	e9 62 01 00 00       	jmp    c001dcdc <Vm::x87Handler(regs*)+0x9b3>
c001db7a:	84 d2                	test   dl,dl
c001db7c:	75 0d                	jne    c001db8b <Vm::x87Handler(regs*)+0x862>
c001db7e:	31 d2                	xor    edx,edx
c001db80:	55                   	push   ebp
c001db81:	55                   	push   ebp
c001db82:	8b 06                	mov    eax,DWORD PTR [esi]
c001db84:	52                   	push   edx
c001db85:	50                   	push   eax
c001db86:	e9 d3 01 00 00       	jmp    c001dd5e <Vm::x87Handler(regs*)+0xa35>
c001db8b:	31 c0                	xor    eax,eax
c001db8d:	80 fa 02             	cmp    dl,0x2
c001db90:	0f 85 f4 01 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001db96:	83 ec 0c             	sub    esp,0xc
c001db99:	6a 00                	push   0x0
c001db9b:	e8 4c f6 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dba0:	59                   	pop    ecx
c001dba1:	5f                   	pop    edi
c001dba2:	e9 6a f9 ff ff       	jmp    c001d511 <Vm::x87Handler(regs*)+0x1e8>
c001dba7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dbab:	84 d2                	test   dl,dl
c001dbad:	75 2a                	jne    c001dbd9 <Vm::x87Handler(regs*)+0x8b0>
c001dbaf:	50                   	push   eax
c001dbb0:	50                   	push   eax
c001dbb1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbb4:	ff 36                	push   DWORD PTR [esi]
c001dbb6:	e8 c5 f3 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dbbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbc2:	89 c6                	mov    esi,eax
c001dbc4:	89 d7                	mov    edi,edx
c001dbc6:	e8 21 f6 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dbcb:	57                   	push   edi
c001dbcc:	56                   	push   esi
c001dbcd:	52                   	push   edx
c001dbce:	50                   	push   eax
c001dbcf:	e8 8e f5 ff ff       	call   c001d162 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dbd4:	e9 64 01 00 00       	jmp    c001dd3d <Vm::x87Handler(regs*)+0xa14>
c001dbd9:	80 fa 01             	cmp    dl,0x1
c001dbdc:	75 11                	jne    c001dbef <Vm::x87Handler(regs*)+0x8c6>
c001dbde:	50                   	push   eax
c001dbdf:	50                   	push   eax
c001dbe0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbe3:	ff 36                	push   DWORD PTR [esi]
c001dbe5:	e8 96 f3 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dbea:	e9 35 01 00 00       	jmp    c001dd24 <Vm::x87Handler(regs*)+0x9fb>
c001dbef:	80 fa 02             	cmp    dl,0x2
c001dbf2:	0f 85 54 f9 ff ff    	jne    c001d54c <Vm::x87Handler(regs*)+0x223>
c001dbf8:	55                   	push   ebp
c001dbf9:	55                   	push   ebp
c001dbfa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbfd:	ff 36                	push   DWORD PTR [esi]
c001dbff:	e8 7c f3 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dc04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc0b:	89 c6                	mov    esi,eax
c001dc0d:	89 d7                	mov    edi,edx
c001dc0f:	e8 d8 f5 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dc14:	57                   	push   edi
c001dc15:	56                   	push   esi
c001dc16:	52                   	push   edx
c001dc17:	50                   	push   eax
c001dc18:	e8 f2 f4 ff ff       	call   c001d10f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dc1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc21:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dc24:	83 c4 20             	add    esp,0x20
c001dc27:	e9 74 f7 ff ff       	jmp    c001d3a0 <Vm::x87Handler(regs*)+0x77>
c001dc2c:	80 fa 04             	cmp    dl,0x4
c001dc2f:	75 2a                	jne    c001dc5b <Vm::x87Handler(regs*)+0x932>
c001dc31:	51                   	push   ecx
c001dc32:	51                   	push   ecx
c001dc33:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc36:	ff 36                	push   DWORD PTR [esi]
c001dc38:	e8 43 f3 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dc3d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc44:	89 c6                	mov    esi,eax
c001dc46:	89 d7                	mov    edi,edx
c001dc48:	e8 9f f5 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dc4d:	57                   	push   edi
c001dc4e:	56                   	push   esi
c001dc4f:	52                   	push   edx
c001dc50:	50                   	push   eax
c001dc51:	e8 36 f5 ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc56:	e9 e2 00 00 00       	jmp    c001dd3d <Vm::x87Handler(regs*)+0xa14>
c001dc5b:	80 fa 05             	cmp    dl,0x5
c001dc5e:	75 28                	jne    c001dc88 <Vm::x87Handler(regs*)+0x95f>
c001dc60:	83 ec 0c             	sub    esp,0xc
c001dc63:	6a 00                	push   0x0
c001dc65:	e8 82 f5 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dc6a:	89 c7                	mov    edi,eax
c001dc6c:	89 d5                	mov    ebp,edx
c001dc6e:	58                   	pop    eax
c001dc6f:	5a                   	pop    edx
c001dc70:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc73:	ff 36                	push   DWORD PTR [esi]
c001dc75:	e8 06 f3 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	55                   	push   ebp
c001dc7e:	57                   	push   edi
c001dc7f:	52                   	push   edx
c001dc80:	50                   	push   eax
c001dc81:	e8 06 f5 ff ff       	call   c001d18c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc86:	eb 60                	jmp    c001dce8 <Vm::x87Handler(regs*)+0x9bf>
c001dc88:	80 fa 06             	cmp    dl,0x6
c001dc8b:	75 2a                	jne    c001dcb7 <Vm::x87Handler(regs*)+0x98e>
c001dc8d:	51                   	push   ecx
c001dc8e:	51                   	push   ecx
c001dc8f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc92:	ff 36                	push   DWORD PTR [esi]
c001dc94:	e8 e7 f2 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dc99:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dca0:	89 c6                	mov    esi,eax
c001dca2:	89 d7                	mov    edi,edx
c001dca4:	e8 43 f5 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dca9:	57                   	push   edi
c001dcaa:	56                   	push   esi
c001dcab:	52                   	push   edx
c001dcac:	50                   	push   eax
c001dcad:	e8 08 f5 ff ff       	call   c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dcb2:	e9 86 00 00 00       	jmp    c001dd3d <Vm::x87Handler(regs*)+0xa14>
c001dcb7:	31 c0                	xor    eax,eax
c001dcb9:	80 fa 07             	cmp    dl,0x7
c001dcbc:	0f 85 c8 00 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001dcc2:	83 ec 0c             	sub    esp,0xc
c001dcc5:	6a 00                	push   0x0
c001dcc7:	e8 20 f5 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dccc:	89 c7                	mov    edi,eax
c001dcce:	89 d5                	mov    ebp,edx
c001dcd0:	58                   	pop    eax
c001dcd1:	5a                   	pop    edx
c001dcd2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dcd5:	ff 36                	push   DWORD PTR [esi]
c001dcd7:	e8 a4 f2 ff ff       	call   c001cf80 <Vm::fpu64ToInternal(unsigned long long)>
c001dcdc:	83 c4 10             	add    esp,0x10
c001dcdf:	55                   	push   ebp
c001dce0:	57                   	push   edi
c001dce1:	52                   	push   edx
c001dce2:	50                   	push   eax
c001dce3:	e8 d2 f4 ff ff       	call   c001d1ba <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dce8:	83 c4 0c             	add    esp,0xc
c001dceb:	eb 53                	jmp    c001dd40 <Vm::x87Handler(regs*)+0xa17>
c001dced:	31 c0                	xor    eax,eax
c001dcef:	80 fa 02             	cmp    dl,0x2
c001dcf2:	0f 85 92 00 00 00    	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001dcf8:	83 ec 0c             	sub    esp,0xc
c001dcfb:	6a 00                	push   0x0
c001dcfd:	e8 ea f4 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dd02:	59                   	pop    ecx
c001dd03:	5f                   	pop    edi
c001dd04:	52                   	push   edx
c001dd05:	50                   	push   eax
c001dd06:	e8 27 f2 ff ff       	call   c001cf32 <Vm::fpuInternalTo64(unsigned long long)>
c001dd0b:	eb 70                	jmp    c001dd7d <Vm::x87Handler(regs*)+0xa54>
c001dd0d:	31 c0                	xor    eax,eax
c001dd0f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dd14:	75 74                	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001dd16:	50                   	push   eax
c001dd17:	50                   	push   eax
c001dd18:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dd1b:	31 d2                	xor    edx,edx
c001dd1d:	52                   	push   edx
c001dd1e:	50                   	push   eax
c001dd1f:	e8 f6 f2 ff ff       	call   c001d01a <Vm::fpuLongToFloat(long long)>
c001dd24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dd2b:	89 c6                	mov    esi,eax
c001dd2d:	89 d7                	mov    edi,edx
c001dd2f:	e8 b8 f4 ff ff       	call   c001d1ec <Vm::fpuGetReg(int)>
c001dd34:	57                   	push   edi
c001dd35:	56                   	push   esi
c001dd36:	52                   	push   edx
c001dd37:	50                   	push   eax
c001dd38:	e8 5e f4 ff ff       	call   c001d19b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd3d:	83 c4 1c             	add    esp,0x1c
c001dd40:	52                   	push   edx
c001dd41:	50                   	push   eax
c001dd42:	6a 00                	push   0x0
c001dd44:	e8 e6 f4 ff ff       	call   c001d22f <Vm::fpuSetReg(int, unsigned long long)>
c001dd49:	e9 f2 f7 ff ff       	jmp    c001d540 <Vm::x87Handler(regs*)+0x217>
c001dd4e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dd52:	80 fa 05             	cmp    dl,0x5
c001dd55:	75 11                	jne    c001dd68 <Vm::x87Handler(regs*)+0xa3f>
c001dd57:	55                   	push   ebp
c001dd58:	55                   	push   ebp
c001dd59:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dd5c:	ff 36                	push   DWORD PTR [esi]
c001dd5e:	e8 81 f2 ff ff       	call   c001cfe4 <Vm::fpuULongToFloat(unsigned long long)>
c001dd63:	e9 cf f7 ff ff       	jmp    c001d537 <Vm::x87Handler(regs*)+0x20e>
c001dd68:	31 c0                	xor    eax,eax
c001dd6a:	80 fa 07             	cmp    dl,0x7
c001dd6d:	75 1b                	jne    c001dd8a <Vm::x87Handler(regs*)+0xa61>
c001dd6f:	e8 63 f5 ff ff       	call   c001d2d7 <Vm::fpuPop()>
c001dd74:	51                   	push   ecx
c001dd75:	51                   	push   ecx
c001dd76:	52                   	push   edx
c001dd77:	50                   	push   eax
c001dd78:	e8 0c f2 ff ff       	call   c001cf89 <Vm::fpuFloatToLong(unsigned long long)>
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	89 06                	mov    DWORD PTR [esi],eax
c001dd82:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dd85:	e9 f8 f7 ff ff       	jmp    c001d582 <Vm::x87Handler(regs*)+0x259>
c001dd8a:	83 c4 1c             	add    esp,0x1c
c001dd8d:	5b                   	pop    ebx
c001dd8e:	5e                   	pop    esi
c001dd8f:	5f                   	pop    edi
c001dd90:	5d                   	pop    ebp
c001dd91:	c3                   	ret    

c001dd92 <__static_initialization_and_destruction_0(int, int)>:
c001dd92:	83 ec 0c             	sub    esp,0xc
c001dd95:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dd9a:	75 1a                	jne    c001ddb6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dd9c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dda4:	75 10                	jne    c001ddb6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dda6:	83 ec 0c             	sub    esp,0xc
c001dda9:	68 80 ba 02 c0       	push   0xc002ba80
c001ddae:	e8 55 7b 00 00       	call   c0025908 <Vm::_FPUState::_FPUState()>
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	90                   	nop
c001ddb7:	83 c4 0c             	add    esp,0xc
c001ddba:	c3                   	ret    

c001ddbb <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ddbb:	83 ec 0c             	sub    esp,0xc
c001ddbe:	83 ec 08             	sub    esp,0x8
c001ddc1:	68 ff ff 00 00       	push   0xffff
c001ddc6:	6a 01                	push   0x1
c001ddc8:	e8 c5 ff ff ff       	call   c001dd92 <__static_initialization_and_destruction_0(int, int)>
c001ddcd:	83 c4 10             	add    esp,0x10
c001ddd0:	83 c4 0c             	add    esp,0xc
c001ddd3:	c3                   	ret    

c001ddd4 <FAT::getName()>:
c001ddd4:	b8 50 8c 02 c0       	mov    eax,0xc0028c50
c001ddd9:	c3                   	ret    

c001ddda <FAT::tell(void*, unsigned long long*)>:
c001ddda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dddf:	75 06                	jne    c001dde7 <FAT::tell(void*, unsigned long long*)+0xd>
c001dde1:	b8 04 00 00 00       	mov    eax,0x4
c001dde6:	c3                   	ret    
c001dde7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ddec:	75 06                	jne    c001ddf4 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ddee:	b8 04 00 00 00       	mov    eax,0x4
c001ddf3:	c3                   	ret    
c001ddf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ddf8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ddfb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ddfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de02:	89 01                	mov    DWORD PTR [ecx],eax
c001de04:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001de07:	b8 00 00 00 00       	mov    eax,0x0
c001de0c:	c3                   	ret    
c001de0d:	90                   	nop

c001de0e <FAT::stat(void*, unsigned long long*)>:
c001de0e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001de13:	75 06                	jne    c001de1b <FAT::stat(void*, unsigned long long*)+0xd>
c001de15:	b8 04 00 00 00       	mov    eax,0x4
c001de1a:	c3                   	ret    
c001de1b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de20:	75 06                	jne    c001de28 <FAT::stat(void*, unsigned long long*)+0x1a>
c001de22:	b8 04 00 00 00       	mov    eax,0x4
c001de27:	c3                   	ret    
c001de28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001de2c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001de2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001de32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de36:	89 01                	mov    DWORD PTR [ecx],eax
c001de38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001de3b:	b8 00 00 00 00       	mov    eax,0x0
c001de40:	c3                   	ret    
c001de41:	90                   	nop

c001de42 <FAT::~FAT()>:
c001de42:	83 ec 0c             	sub    esp,0xc
c001de45:	ba d4 8c 02 c0       	mov    edx,0xc0028cd4
c001de4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4e:	89 10                	mov    DWORD PTR [eax],edx
c001de50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de54:	83 ec 0c             	sub    esp,0xc
c001de57:	50                   	push   eax
c001de58:	e8 43 47 ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c001de5d:	83 c4 10             	add    esp,0x10
c001de60:	90                   	nop
c001de61:	83 c4 0c             	add    esp,0xc
c001de64:	c3                   	ret    
c001de65:	90                   	nop

c001de66 <FAT::~FAT()>:
c001de66:	83 ec 0c             	sub    esp,0xc
c001de69:	83 ec 0c             	sub    esp,0xc
c001de6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de70:	e8 cd ff ff ff       	call   c001de42 <FAT::~FAT()>
c001de75:	83 c4 10             	add    esp,0x10
c001de78:	83 ec 08             	sub    esp,0x8
c001de7b:	6a 08                	push   0x8
c001de7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de81:	e8 11 43 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	83 c4 0c             	add    esp,0xc
c001de8c:	c3                   	ret    
c001de8d:	90                   	nop

c001de8e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001de8e:	83 ec 1c             	sub    esp,0x1c
c001de91:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001de98:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001de9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dea1:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001dea8:	83 f8 ff             	cmp    eax,0xffffffff
c001deab:	75 34                	jne    c001dee1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dead:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001deb1:	88 c2                	mov    dl,al
c001deb3:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001deb8:	01 d0                	add    eax,edx
c001deba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001debe:	8b 15 e0 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bae0
c001dec4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dec8:	89 14 85 00 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4500],edx
c001decf:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001ded4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ded8:	89 14 85 80 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4480],edx
c001dedf:	eb 17                	jmp    c001def8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001dee1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dee5:	88 c2                	mov    dl,al
c001dee7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001deeb:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001def2:	01 d0                	add    eax,edx
c001def4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001def8:	83 ec 04             	sub    esp,0x4
c001defb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001deff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001df03:	8d 44 24 15          	lea    eax,[esp+0x15]
c001df07:	50                   	push   eax
c001df08:	e8 15 8c fe ff       	call   c0006b22 <f_getlabel>
c001df0d:	83 c4 10             	add    esp,0x10
c001df10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001df19:	75 07                	jne    c001df22 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001df1b:	b8 00 00 00 00       	mov    eax,0x0
c001df20:	eb 05                	jmp    c001df27 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001df22:	b8 01 00 00 00       	mov    eax,0x1
c001df27:	83 c4 1c             	add    esp,0x1c
c001df2a:	c3                   	ret    
c001df2b:	90                   	nop

c001df2c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001df2c:	57                   	push   edi
c001df2d:	83 ec 58             	sub    esp,0x58
c001df30:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001df38:	8d 54 24 10          	lea    edx,[esp+0x10]
c001df3c:	b9 0f 00 00 00       	mov    ecx,0xf
c001df41:	b8 00 00 00 00       	mov    eax,0x0
c001df46:	fc                   	cld    
c001df47:	89 d7                	mov    edi,edx
c001df49:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df4b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df4f:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001df56:	83 f8 ff             	cmp    eax,0xffffffff
c001df59:	75 34                	jne    c001df8f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001df5b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001df5f:	88 c2                	mov    dl,al
c001df61:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001df66:	01 d0                	add    eax,edx
c001df68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df6c:	8b 15 e0 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bae0
c001df72:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df76:	89 14 85 00 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4500],edx
c001df7d:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001df82:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001df86:	89 14 85 80 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4480],edx
c001df8d:	eb 17                	jmp    c001dfa6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001df8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001df93:	88 c2                	mov    dl,al
c001df95:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df99:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001dfa0:	01 d0                	add    eax,edx
c001dfa2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dfa6:	83 ec 08             	sub    esp,0x8
c001dfa9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dfad:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dfb1:	50                   	push   eax
c001dfb2:	e8 64 28 fe ff       	call   c000081b <strcat>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dfc1:	50                   	push   eax
c001dfc2:	e8 49 8d fe ff       	call   c0006d10 <f_setlabel>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dfce:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001dfd3:	75 07                	jne    c001dfdc <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001dfd5:	b8 00 00 00 00       	mov    eax,0x0
c001dfda:	eb 05                	jmp    c001dfe1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001dfdc:	b8 01 00 00 00       	mov    eax,0x1
c001dfe1:	83 c4 58             	add    esp,0x58
c001dfe4:	5f                   	pop    edi
c001dfe5:	c3                   	ret    

c001dfe6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001dfe6:	83 ec 2c             	sub    esp,0x2c
c001dfe9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dff1:	83 ec 08             	sub    esp,0x8
c001dff4:	68 74 8c 02 c0       	push   0xc0028c74
c001dff9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dffd:	e8 b3 27 fe ff       	call   c00007b5 <strcmp>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	85 c0                	test   eax,eax
c001e007:	0f 94 c0             	sete   al
c001e00a:	84 c0                	test   al,al
c001e00c:	74 0d                	je     c001e01b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e00e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e016:	e9 a6 00 00 00       	jmp    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e01b:	83 ec 08             	sub    esp,0x8
c001e01e:	68 66 8c 02 c0       	push   0xc0028c66
c001e023:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e027:	e8 89 27 fe ff       	call   c00007b5 <strcmp>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	85 c0                	test   eax,eax
c001e031:	0f 94 c0             	sete   al
c001e034:	84 c0                	test   al,al
c001e036:	74 0a                	je     c001e042 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e038:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e040:	eb 7f                	jmp    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e042:	83 ec 08             	sub    esp,0x8
c001e045:	68 6c 8c 02 c0       	push   0xc0028c6c
c001e04a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e04e:	e8 62 27 fe ff       	call   c00007b5 <strcmp>
c001e053:	83 c4 10             	add    esp,0x10
c001e056:	85 c0                	test   eax,eax
c001e058:	0f 94 c0             	sete   al
c001e05b:	84 c0                	test   al,al
c001e05d:	74 0a                	je     c001e069 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e05f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e067:	eb 58                	jmp    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e069:	83 ec 08             	sub    esp,0x8
c001e06c:	68 8c 5f 02 c0       	push   0xc0025f8c
c001e071:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e075:	e8 3b 27 fe ff       	call   c00007b5 <strcmp>
c001e07a:	83 c4 10             	add    esp,0x10
c001e07d:	85 c0                	test   eax,eax
c001e07f:	0f 94 c0             	sete   al
c001e082:	84 c0                	test   al,al
c001e084:	74 0a                	je     c001e090 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e086:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e08e:	eb 31                	jmp    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e090:	83 ec 08             	sub    esp,0x8
c001e093:	68 72 8c 02 c0       	push   0xc0028c72
c001e098:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e09c:	e8 14 27 fe ff       	call   c00007b5 <strcmp>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	85 c0                	test   eax,eax
c001e0a6:	0f 94 c0             	sete   al
c001e0a9:	84 c0                	test   al,al
c001e0ab:	74 0a                	je     c001e0b7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e0ad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e0b5:	eb 0a                	jmp    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e0b7:	b8 08 00 00 00       	mov    eax,0x8
c001e0bc:	e9 04 01 00 00       	jmp    c001e1c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0c1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e0c8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e0cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0d1:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001e0d8:	83 f8 ff             	cmp    eax,0xffffffff
c001e0db:	75 34                	jne    c001e111 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e0dd:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e0e1:	88 c2                	mov    dl,al
c001e0e3:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e0e8:	01 d0                	add    eax,edx
c001e0ea:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e0ee:	8b 15 e0 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bae0
c001e0f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0f8:	89 14 85 00 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4500],edx
c001e0ff:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e104:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e108:	89 14 85 80 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4480],edx
c001e10f:	eb 17                	jmp    c001e128 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e111:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e115:	88 c2                	mov    dl,al
c001e117:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e11b:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001e122:	01 d0                	add    eax,edx
c001e124:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e128:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e12c:	88 04 24             	mov    BYTE PTR [esp],al
c001e12f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e137:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e13f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e144:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	68 00 20 00 00       	push   0x2000
c001e154:	e8 15 10 ff ff       	call   c000f16e <malloc>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e160:	68 00 20 00 00       	push   0x2000
c001e165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e169:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e16d:	50                   	push   eax
c001e16e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e172:	50                   	push   eax
c001e173:	e8 e3 8f fe ff       	call   c000715b <f_mkfs>
c001e178:	83 c4 10             	add    esp,0x10
c001e17b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e17f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e184:	75 07                	jne    c001e18d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e186:	b8 00 00 00 00       	mov    eax,0x0
c001e18b:	eb 38                	jmp    c001e1c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e18d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e192:	75 17                	jne    c001e1ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e194:	83 ec 0c             	sub    esp,0xc
c001e197:	68 a4 8c 02 c0       	push   0xc0028ca4
c001e19c:	e8 d6 40 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001e1a1:	83 c4 10             	add    esp,0x10
c001e1a4:	b8 09 00 00 00       	mov    eax,0x9
c001e1a9:	eb 1a                	jmp    c001e1c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1af:	83 ec 08             	sub    esp,0x8
c001e1b2:	50                   	push   eax
c001e1b3:	68 78 8c 02 c0       	push   0xc0028c78
c001e1b8:	e8 ba 40 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001e1bd:	83 c4 10             	add    esp,0x10
c001e1c0:	b8 01 00 00 00       	mov    eax,0x1
c001e1c5:	83 c4 2c             	add    esp,0x2c
c001e1c8:	c3                   	ret    
c001e1c9:	90                   	nop

c001e1ca <FAT::tryMount(LogicalDisk*, int)>:
c001e1ca:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e1d0:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e1d5:	83 f8 14             	cmp    eax,0x14
c001e1d8:	75 17                	jne    c001e1f1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e1da:	83 ec 0c             	sub    esp,0xc
c001e1dd:	68 8a 8c 02 c0       	push   0xc0028c8a
c001e1e2:	e8 f0 a8 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001e1e7:	83 c4 10             	add    esp,0x10
c001e1ea:	b0 00                	mov    al,0x0
c001e1ec:	e9 d7 01 00 00       	jmp    c001e3c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1f1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e1f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e1fe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e204:	3d 00 02 00 00       	cmp    eax,0x200
c001e209:	74 07                	je     c001e212 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e20b:	b0 00                	mov    al,0x0
c001e20d:	e9 b6 01 00 00       	jmp    c001e3c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e212:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e21a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e221:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001e228:	83 f8 ff             	cmp    eax,0xffffffff
c001e22b:	74 07                	je     c001e234 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e22d:	b0 01                	mov    al,0x1
c001e22f:	e9 94 01 00 00       	jmp    c001e3c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e234:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e23e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e246:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e24d:	88 c2                	mov    dl,al
c001e24f:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e254:	01 d0                	add    eax,edx
c001e256:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e25d:	8b 15 e0 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bae0
c001e263:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e26a:	89 14 85 00 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4500],edx
c001e271:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e276:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e27d:	89 14 85 80 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4480],edx
c001e284:	83 ec 0c             	sub    esp,0xc
c001e287:	68 54 02 00 00       	push   0x254
c001e28c:	e8 dd 0e ff ff       	call   c000f16e <malloc>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e29b:	83 ec 04             	sub    esp,0x4
c001e29e:	6a 00                	push   0x0
c001e2a0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2a7:	50                   	push   eax
c001e2a8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2af:	e8 65 6a fe ff       	call   c0004d19 <f_mount>
c001e2b4:	83 c4 10             	add    esp,0x10
c001e2b7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e2be:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e2c6:	74 19                	je     c001e2e1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2d2:	e8 b7 0e ff ff       	call   c000f18e <rfree>
c001e2d7:	83 c4 10             	add    esp,0x10
c001e2da:	b0 00                	mov    al,0x0
c001e2dc:	e9 e7 00 00 00       	jmp    c001e3c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2e1:	83 ec 04             	sub    esp,0x4
c001e2e4:	68 00 01 00 00       	push   0x100
c001e2e9:	6a 00                	push   0x0
c001e2eb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e2f2:	50                   	push   eax
c001e2f3:	e8 cd 23 fe ff       	call   c00006c5 <memset>
c001e2f8:	83 c4 10             	add    esp,0x10
c001e2fb:	83 ec 08             	sub    esp,0x8
c001e2fe:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e305:	50                   	push   eax
c001e306:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e30d:	50                   	push   eax
c001e30e:	e8 08 25 fe ff       	call   c000081b <strcat>
c001e313:	83 c4 10             	add    esp,0x10
c001e316:	83 ec 08             	sub    esp,0x8
c001e319:	68 98 8c 02 c0       	push   0xc0028c98
c001e31e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e325:	50                   	push   eax
c001e326:	e8 f0 24 fe ff       	call   c000081b <strcat>
c001e32b:	83 c4 10             	add    esp,0x10
c001e32e:	83 ec 04             	sub    esp,0x4
c001e331:	6a 01                	push   0x1
c001e333:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e33a:	50                   	push   eax
c001e33b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e33f:	50                   	push   eax
c001e340:	e8 36 6a fe ff       	call   c0004d7b <f_open>
c001e345:	83 c4 10             	add    esp,0x10
c001e348:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e34f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e356:	85 c0                	test   eax,eax
c001e358:	74 0a                	je     c001e364 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e35a:	78 2d                	js     c001e389 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e35c:	83 e8 04             	sub    eax,0x4
c001e35f:	83 f8 01             	cmp    eax,0x1
c001e362:	77 25                	ja     c001e389 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e364:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e373:	50                   	push   eax
c001e374:	e8 54 75 fe ff       	call   c00058cd <f_close>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	90                   	nop
c001e37d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e385:	74 3a                	je     c001e3c1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e387:	eb 2d                	jmp    c001e3b6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e393:	e8 f6 0d ff ff       	call   c000f18e <rfree>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	83 ec 04             	sub    esp,0x4
c001e39e:	6a 00                	push   0x0
c001e3a0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e3a7:	50                   	push   eax
c001e3a8:	6a 00                	push   0x0
c001e3aa:	e8 6a 69 fe ff       	call   c0004d19 <f_mount>
c001e3af:	83 c4 10             	add    esp,0x10
c001e3b2:	b0 00                	mov    al,0x0
c001e3b4:	eb 12                	jmp    c001e3c8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e3b6:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001e3bb:	40                   	inc    eax
c001e3bc:	a3 e0 ba 02 c0       	mov    ds:0xc002bae0,eax
c001e3c1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e3c8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e3ce:	c3                   	ret    
c001e3cf:	90                   	nop

c001e3d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e3d0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e3d6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e3de:	74 0a                	je     c001e3ea <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e3e0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e3e8:	75 0a                	jne    c001e3f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e3ea:	b8 04 00 00 00       	mov    eax,0x4
c001e3ef:	e9 db 00 00 00       	jmp    c001e4cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3f4:	83 ec 08             	sub    esp,0x8
c001e3f7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e3fe:	50                   	push   eax
c001e3ff:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e406:	e8 cc 7a fe ff       	call   c0005ed7 <f_readdir>
c001e40b:	83 c4 10             	add    esp,0x10
c001e40e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e415:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e41b:	83 ec 0c             	sub    esp,0xc
c001e41e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e425:	83 c0 1a             	add    eax,0x1a
c001e428:	50                   	push   eax
c001e429:	e8 b4 22 fe ff       	call   c00006e2 <strlen>
c001e42e:	83 c4 10             	add    esp,0x10
c001e431:	ba 00 00 00 00       	mov    edx,0x0
c001e436:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e43a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e43e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e445:	0f b6 c0             	movzx  eax,al
c001e448:	83 e0 10             	and    eax,0x10
c001e44b:	74 07                	je     c001e454 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e44d:	b8 02 00 00 00       	mov    eax,0x2
c001e452:	eb 05                	jmp    c001e459 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e454:	b8 01 00 00 00       	mov    eax,0x1
c001e459:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e45d:	83 ec 08             	sub    esp,0x8
c001e460:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e467:	83 c0 1a             	add    eax,0x1a
c001e46a:	50                   	push   eax
c001e46b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e46f:	83 c0 10             	add    eax,0x10
c001e472:	50                   	push   eax
c001e473:	e8 ec 22 fe ff       	call   c0000764 <strcpy>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	83 ec 04             	sub    esp,0x4
c001e47e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e485:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e489:	50                   	push   eax
c001e48a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e491:	e8 f9 21 fe ff       	call   c000068f <memcpy>
c001e496:	83 c4 10             	add    esp,0x10
c001e499:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e4a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e4a6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e4ad:	84 c0                	test   al,al
c001e4af:	75 07                	jne    c001e4b8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e4b1:	b8 07 00 00 00       	mov    eax,0x7
c001e4b6:	eb 17                	jmp    c001e4cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e4b8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e4bf:	85 c0                	test   eax,eax
c001e4c1:	75 07                	jne    c001e4ca <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e4c3:	b8 00 00 00 00       	mov    eax,0x0
c001e4c8:	eb 05                	jmp    c001e4cf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e4ca:	b8 01 00 00 00       	mov    eax,0x1
c001e4cf:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e4d5:	c3                   	ret    

c001e4d6 <FAT::read(void*, unsigned long, void*, int*)>:
c001e4d6:	83 ec 1c             	sub    esp,0x1c
c001e4d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4de:	74 07                	je     c001e4e7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e4e0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e4e5:	75 07                	jne    c001e4ee <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e4e7:	b8 04 00 00 00       	mov    eax,0x4
c001e4ec:	eb 3d                	jmp    c001e52b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e4ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e4f2:	50                   	push   eax
c001e4f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e4f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e4fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4ff:	e8 b3 6c fe ff       	call   c00051b7 <f_read>
c001e504:	83 c4 10             	add    esp,0x10
c001e507:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e50b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e50f:	89 c2                	mov    edx,eax
c001e511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e515:	89 10                	mov    DWORD PTR [eax],edx
c001e517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e51b:	85 c0                	test   eax,eax
c001e51d:	75 07                	jne    c001e526 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e51f:	b8 00 00 00 00       	mov    eax,0x0
c001e524:	eb 05                	jmp    c001e52b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e526:	b8 01 00 00 00       	mov    eax,0x1
c001e52b:	83 c4 1c             	add    esp,0x1c
c001e52e:	c3                   	ret    
c001e52f:	90                   	nop

c001e530 <FAT::write(void*, unsigned long, void*, int*)>:
c001e530:	83 ec 1c             	sub    esp,0x1c
c001e533:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e538:	74 07                	je     c001e541 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e53a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e53f:	75 07                	jne    c001e548 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e541:	b8 04 00 00 00       	mov    eax,0x4
c001e546:	eb 3d                	jmp    c001e585 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e548:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e54c:	50                   	push   eax
c001e54d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e551:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e555:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e559:	e8 d9 6e fe ff       	call   c0005437 <f_write>
c001e55e:	83 c4 10             	add    esp,0x10
c001e561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e569:	89 c2                	mov    edx,eax
c001e56b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e56f:	89 10                	mov    DWORD PTR [eax],edx
c001e571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e575:	85 c0                	test   eax,eax
c001e577:	75 07                	jne    c001e580 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e579:	b8 00 00 00 00       	mov    eax,0x0
c001e57e:	eb 05                	jmp    c001e585 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e580:	b8 01 00 00 00       	mov    eax,0x1
c001e585:	83 c4 1c             	add    esp,0x1c
c001e588:	c3                   	ret    
c001e589:	90                   	nop

c001e58a <FAT::close(void*)>:
c001e58a:	83 ec 1c             	sub    esp,0x1c
c001e58d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e592:	75 07                	jne    c001e59b <FAT::close(void*)+0x11>
c001e594:	b8 04 00 00 00       	mov    eax,0x4
c001e599:	eb 36                	jmp    c001e5d1 <FAT::close(void*)+0x47>
c001e59b:	83 ec 0c             	sub    esp,0xc
c001e59e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5a2:	e8 26 73 fe ff       	call   c00058cd <f_close>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ae:	83 ec 0c             	sub    esp,0xc
c001e5b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5b5:	e8 c4 0b ff ff       	call   c000f17e <free>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5c1:	85 c0                	test   eax,eax
c001e5c3:	75 07                	jne    c001e5cc <FAT::close(void*)+0x42>
c001e5c5:	b8 00 00 00 00       	mov    eax,0x0
c001e5ca:	eb 05                	jmp    c001e5d1 <FAT::close(void*)+0x47>
c001e5cc:	b8 01 00 00 00       	mov    eax,0x1
c001e5d1:	83 c4 1c             	add    esp,0x1c
c001e5d4:	c3                   	ret    
c001e5d5:	90                   	nop

c001e5d6 <FAT::closeDir(void*)>:
c001e5d6:	83 ec 1c             	sub    esp,0x1c
c001e5d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e5de:	75 07                	jne    c001e5e7 <FAT::closeDir(void*)+0x11>
c001e5e0:	b8 04 00 00 00       	mov    eax,0x4
c001e5e5:	eb 36                	jmp    c001e61d <FAT::closeDir(void*)+0x47>
c001e5e7:	83 ec 0c             	sub    esp,0xc
c001e5ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5ee:	e8 c2 78 fe ff       	call   c0005eb5 <f_closedir>
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e601:	e8 78 0b ff ff       	call   c000f17e <free>
c001e606:	83 c4 10             	add    esp,0x10
c001e609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e60d:	85 c0                	test   eax,eax
c001e60f:	75 07                	jne    c001e618 <FAT::closeDir(void*)+0x42>
c001e611:	b8 00 00 00 00       	mov    eax,0x0
c001e616:	eb 05                	jmp    c001e61d <FAT::closeDir(void*)+0x47>
c001e618:	b8 01 00 00 00       	mov    eax,0x1
c001e61d:	83 c4 1c             	add    esp,0x1c
c001e620:	c3                   	ret    
c001e621:	90                   	nop

c001e622 <FAT::seek(void*, unsigned long long)>:
c001e622:	83 ec 2c             	sub    esp,0x2c
c001e625:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e62d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e635:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e63a:	75 07                	jne    c001e643 <FAT::seek(void*, unsigned long long)+0x21>
c001e63c:	b8 04 00 00 00       	mov    eax,0x4
c001e641:	eb 2f                	jmp    c001e672 <FAT::seek(void*, unsigned long long)+0x50>
c001e643:	83 ec 04             	sub    esp,0x4
c001e646:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e64a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e64e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e652:	e8 a5 72 fe ff       	call   c00058fc <f_lseek>
c001e657:	83 c4 10             	add    esp,0x10
c001e65a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e662:	85 c0                	test   eax,eax
c001e664:	75 07                	jne    c001e66d <FAT::seek(void*, unsigned long long)+0x4b>
c001e666:	b8 00 00 00 00       	mov    eax,0x0
c001e66b:	eb 05                	jmp    c001e672 <FAT::seek(void*, unsigned long long)+0x50>
c001e66d:	b8 01 00 00 00       	mov    eax,0x1
c001e672:	83 c4 2c             	add    esp,0x2c
c001e675:	c3                   	ret    

c001e676 <fatWrapperReadDisk>:
c001e676:	83 ec 1c             	sub    esp,0x1c
c001e679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e67d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e681:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e685:	89 04 24             	mov    DWORD PTR [esp],eax
c001e688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e68c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e690:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e695:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c001e69c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6a7:	52                   	push   edx
c001e6a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6b0:	50                   	push   eax
c001e6b1:	e8 ec 71 ff ff       	call   c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001e6b6:	83 c4 20             	add    esp,0x20
c001e6b9:	83 c4 1c             	add    esp,0x1c
c001e6bc:	c3                   	ret    

c001e6bd <fatWrapperWriteDisk>:
c001e6bd:	83 ec 1c             	sub    esp,0x1c
c001e6c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e6c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6d7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e6dc:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c001e6e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6e7:	83 ec 0c             	sub    esp,0xc
c001e6ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6ee:	52                   	push   edx
c001e6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6f7:	50                   	push   eax
c001e6f8:	e8 11 72 ff ff       	call   c001590e <LogicalDisk::write(unsigned long long, int, void*)>
c001e6fd:	83 c4 20             	add    esp,0x20
c001e700:	83 c4 1c             	add    esp,0x1c
c001e703:	c3                   	ret    

c001e704 <fatWrapperIoctl>:
c001e704:	53                   	push   ebx
c001e705:	83 ec 28             	sub    esp,0x28
c001e708:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e70c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e710:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e714:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e718:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e71d:	75 31                	jne    c001e750 <fatWrapperIoctl+0x4c>
c001e71f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e723:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e727:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e72c:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c001e733:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e739:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e73f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e743:	66 89 02             	mov    WORD PTR [edx],ax
c001e746:	b8 00 00 00 00       	mov    eax,0x0
c001e74b:	e9 b2 00 00 00       	jmp    c001e802 <fatWrapperIoctl+0xfe>
c001e750:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e755:	75 6a                	jne    c001e7c1 <fatWrapperIoctl+0xbd>
c001e757:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e75b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e75f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e764:	8b 04 85 c0 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5440]
c001e76b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e771:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e777:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e77d:	89 c8                	mov    eax,ecx
c001e77f:	89 da                	mov    edx,ebx
c001e781:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e785:	c1 e0 0a             	shl    eax,0xa
c001e788:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e78d:	8b 0c 8d c0 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5440]
c001e794:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e79a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e7a0:	89 cb                	mov    ebx,ecx
c001e7a2:	c1 fb 1f             	sar    ebx,0x1f
c001e7a5:	53                   	push   ebx
c001e7a6:	51                   	push   ecx
c001e7a7:	52                   	push   edx
c001e7a8:	50                   	push   eax
c001e7a9:	e8 2e 4d 00 00       	call   c00234dc <__udivdi3>
c001e7ae:	83 c4 10             	add    esp,0x10
c001e7b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e7b5:	89 01                	mov    DWORD PTR [ecx],eax
c001e7b7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e7ba:	b8 00 00 00 00       	mov    eax,0x0
c001e7bf:	eb 41                	jmp    c001e802 <fatWrapperIoctl+0xfe>
c001e7c1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e7c6:	75 07                	jne    c001e7cf <fatWrapperIoctl+0xcb>
c001e7c8:	b8 00 00 00 00       	mov    eax,0x0
c001e7cd:	eb 33                	jmp    c001e802 <fatWrapperIoctl+0xfe>
c001e7cf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e7d4:	75 19                	jne    c001e7ef <fatWrapperIoctl+0xeb>
c001e7d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e7da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e7de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7e2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e7e8:	b8 00 00 00 00       	mov    eax,0x0
c001e7ed:	eb 13                	jmp    c001e802 <fatWrapperIoctl+0xfe>
c001e7ef:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e7f4:	75 07                	jne    c001e7fd <fatWrapperIoctl+0xf9>
c001e7f6:	b8 00 00 00 00       	mov    eax,0x0
c001e7fb:	eb 05                	jmp    c001e802 <fatWrapperIoctl+0xfe>
c001e7fd:	b8 04 00 00 00       	mov    eax,0x4
c001e802:	83 c4 28             	add    esp,0x28
c001e805:	5b                   	pop    ebx
c001e806:	c3                   	ret    
c001e807:	90                   	nop

c001e808 <FAT::FAT()>:
c001e808:	83 ec 1c             	sub    esp,0x1c
c001e80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e80f:	83 ec 0c             	sub    esp,0xc
c001e812:	50                   	push   eax
c001e813:	e8 64 3d ff ff       	call   c001257c <Filesystem::Filesystem()>
c001e818:	83 c4 10             	add    esp,0x10
c001e81b:	ba d4 8c 02 c0       	mov    edx,0xc0028cd4
c001e820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e824:	89 10                	mov    DWORD PTR [eax],edx
c001e826:	c7 05 e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bae0,0x0
c001e830:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e838:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e83d:	7f 15                	jg     c001e854 <FAT::FAT()+0x4c>
c001e83f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e843:	c7 04 85 00 bb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4500],0xffffffff
c001e84e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e852:	eb e4                	jmp    c001e838 <FAT::FAT()+0x30>
c001e854:	90                   	nop
c001e855:	83 c4 1c             	add    esp,0x1c
c001e858:	c3                   	ret    
c001e859:	90                   	nop

c001e85a <FAT::fixFilepath(char*)>:
c001e85a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e85e:	8a 00                	mov    al,BYTE PTR [eax]
c001e860:	3c 40                	cmp    al,0x40
c001e862:	7e 2c                	jle    c001e890 <FAT::fixFilepath(char*)+0x36>
c001e864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e868:	8a 00                	mov    al,BYTE PTR [eax]
c001e86a:	83 e8 41             	sub    eax,0x41
c001e86d:	88 c2                	mov    dl,al
c001e86f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e873:	88 10                	mov    BYTE PTR [eax],dl
c001e875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e879:	8a 00                	mov    al,BYTE PTR [eax]
c001e87b:	0f be c0             	movsx  eax,al
c001e87e:	8b 04 85 00 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4500]
c001e885:	83 c0 30             	add    eax,0x30
c001e888:	88 c2                	mov    dl,al
c001e88a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e88e:	88 10                	mov    BYTE PTR [eax],dl
c001e890:	90                   	nop
c001e891:	c3                   	ret    

c001e892 <FAT::open(char const*, void**, FileOpenMode)>:
c001e892:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e898:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8a0:	74 0a                	je     c001e8ac <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e8a2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8aa:	75 0a                	jne    c001e8b6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e8ac:	b8 04 00 00 00       	mov    eax,0x4
c001e8b1:	e9 fd 00 00 00       	jmp    c001e9b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8b6:	83 ec 08             	sub    esp,0x8
c001e8b9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e8c4:	50                   	push   eax
c001e8c5:	e8 9a 1e fe ff       	call   c0000764 <strcpy>
c001e8ca:	83 c4 10             	add    esp,0x10
c001e8cd:	83 ec 08             	sub    esp,0x8
c001e8d0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e8d4:	50                   	push   eax
c001e8d5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8dc:	e8 79 ff ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001e8e1:	83 c4 10             	add    esp,0x10
c001e8e4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e8ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e8f3:	83 e0 01             	and    eax,0x1
c001e8f6:	74 08                	je     c001e900 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e8f8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e900:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e907:	83 e0 04             	and    eax,0x4
c001e90a:	74 10                	je     c001e91c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e90c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e914:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e91c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e923:	83 e0 02             	and    eax,0x2
c001e926:	74 08                	je     c001e930 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e928:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e937:	83 e0 08             	and    eax,0x8
c001e93a:	74 08                	je     c001e944 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e93c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e944:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e94b:	83 e0 10             	and    eax,0x10
c001e94e:	74 08                	je     c001e958 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e950:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	68 50 02 00 00       	push   0x250
c001e960:	e8 09 08 ff ff       	call   c000f16e <malloc>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	89 c2                	mov    edx,eax
c001e96a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e971:	89 10                	mov    DWORD PTR [eax],edx
c001e973:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e97b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e982:	8b 00                	mov    eax,DWORD PTR [eax]
c001e984:	83 ec 04             	sub    esp,0x4
c001e987:	52                   	push   edx
c001e988:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e98c:	52                   	push   edx
c001e98d:	50                   	push   eax
c001e98e:	e8 e8 63 fe ff       	call   c0004d7b <f_open>
c001e993:	83 c4 10             	add    esp,0x10
c001e996:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e99d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e9a5:	74 07                	je     c001e9ae <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e9a7:	b8 01 00 00 00       	mov    eax,0x1
c001e9ac:	eb 05                	jmp    c001e9b3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e9ae:	b8 00 00 00 00       	mov    eax,0x0
c001e9b3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e9b9:	c3                   	ret    

c001e9ba <FAT::openDir(char const*, void**)>:
c001e9ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e9c0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e9c8:	74 0a                	je     c001e9d4 <FAT::openDir(char const*, void**)+0x1a>
c001e9ca:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e9d2:	75 07                	jne    c001e9db <FAT::openDir(char const*, void**)+0x21>
c001e9d4:	b8 04 00 00 00       	mov    eax,0x4
c001e9d9:	eb 7d                	jmp    c001ea58 <FAT::openDir(char const*, void**)+0x9e>
c001e9db:	83 ec 08             	sub    esp,0x8
c001e9de:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e9e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e9e9:	50                   	push   eax
c001e9ea:	e8 75 1d fe ff       	call   c0000764 <strcpy>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 ec 08             	sub    esp,0x8
c001e9f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9f9:	50                   	push   eax
c001e9fa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea01:	e8 54 fe ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ea06:	83 c4 10             	add    esp,0x10
c001ea09:	83 ec 0c             	sub    esp,0xc
c001ea0c:	6a 4c                	push   0x4c
c001ea0e:	e8 5b 07 ff ff       	call   c000f16e <malloc>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	89 c2                	mov    edx,eax
c001ea18:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ea1f:	89 10                	mov    DWORD PTR [eax],edx
c001ea21:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ea28:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2a:	83 ec 08             	sub    esp,0x8
c001ea2d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ea31:	52                   	push   edx
c001ea32:	50                   	push   eax
c001ea33:	e8 7b 73 fe ff       	call   c0005db3 <f_opendir>
c001ea38:	83 c4 10             	add    esp,0x10
c001ea3b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ea42:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ea4a:	74 07                	je     c001ea53 <FAT::openDir(char const*, void**)+0x99>
c001ea4c:	b8 01 00 00 00       	mov    eax,0x1
c001ea51:	eb 05                	jmp    c001ea58 <FAT::openDir(char const*, void**)+0x9e>
c001ea53:	b8 00 00 00 00       	mov    eax,0x0
c001ea58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ea5e:	c3                   	ret    
c001ea5f:	90                   	nop

c001ea60 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ea60:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ea66:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ea6e:	75 0a                	jne    c001ea7a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001ea70:	b8 04 00 00 00       	mov    eax,0x4
c001ea75:	e9 c9 00 00 00       	jmp    c001eb43 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea7a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ea82:	75 0a                	jne    c001ea8e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001ea84:	b8 04 00 00 00       	mov    eax,0x4
c001ea89:	e9 b5 00 00 00       	jmp    c001eb43 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea8e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ea96:	75 0a                	jne    c001eaa2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ea98:	b8 04 00 00 00       	mov    eax,0x4
c001ea9d:	e9 a1 00 00 00       	jmp    c001eb43 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eaa2:	83 ec 08             	sub    esp,0x8
c001eaa5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eaac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eab3:	50                   	push   eax
c001eab4:	e8 ab 1c fe ff       	call   c0000764 <strcpy>
c001eab9:	83 c4 10             	add    esp,0x10
c001eabc:	83 ec 08             	sub    esp,0x8
c001eabf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001eac6:	50                   	push   eax
c001eac7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001eace:	e8 87 fd ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ead3:	83 c4 10             	add    esp,0x10
c001ead6:	83 ec 08             	sub    esp,0x8
c001ead9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eadd:	50                   	push   eax
c001eade:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eae5:	50                   	push   eax
c001eae6:	e8 87 74 fe ff       	call   c0005f72 <f_stat>
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eaf5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eafc:	85 c0                	test   eax,eax
c001eafe:	74 07                	je     c001eb07 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001eb00:	83 f8 04             	cmp    eax,0x4
c001eb03:	74 32                	je     c001eb37 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001eb05:	eb 37                	jmp    c001eb3e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001eb07:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eb0b:	0f b6 c0             	movzx  eax,al
c001eb0e:	83 e0 10             	and    eax,0x10
c001eb11:	0f 95 c2             	setne  dl
c001eb14:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001eb1b:	88 10                	mov    BYTE PTR [eax],dl
c001eb1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eb20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb24:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001eb2b:	89 01                	mov    DWORD PTR [ecx],eax
c001eb2d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001eb30:	b8 00 00 00 00       	mov    eax,0x0
c001eb35:	eb 0c                	jmp    c001eb43 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb37:	b8 02 00 00 00       	mov    eax,0x2
c001eb3c:	eb 05                	jmp    c001eb43 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb3e:	b8 01 00 00 00       	mov    eax,0x1
c001eb43:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eb49:	c3                   	ret    

c001eb4a <FAT::unlink(char const*)>:
c001eb4a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eb50:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eb58:	75 07                	jne    c001eb61 <FAT::unlink(char const*)+0x17>
c001eb5a:	b8 04 00 00 00       	mov    eax,0x4
c001eb5f:	eb 5c                	jmp    c001ebbd <FAT::unlink(char const*)+0x73>
c001eb61:	83 ec 08             	sub    esp,0x8
c001eb64:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb6f:	50                   	push   eax
c001eb70:	e8 ef 1b fe ff       	call   c0000764 <strcpy>
c001eb75:	83 c4 10             	add    esp,0x10
c001eb78:	83 ec 08             	sub    esp,0x8
c001eb7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eb7f:	50                   	push   eax
c001eb80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb87:	e8 ce fc ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	83 ec 0c             	sub    esp,0xc
c001eb92:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb96:	50                   	push   eax
c001eb97:	e8 28 77 fe ff       	call   c00062c4 <f_unlink>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eba6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ebad:	85 c0                	test   eax,eax
c001ebaf:	75 07                	jne    c001ebb8 <FAT::unlink(char const*)+0x6e>
c001ebb1:	b8 00 00 00 00       	mov    eax,0x0
c001ebb6:	eb 05                	jmp    c001ebbd <FAT::unlink(char const*)+0x73>
c001ebb8:	b8 01 00 00 00       	mov    eax,0x1
c001ebbd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ebc3:	c3                   	ret    

c001ebc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ebc4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ebca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ebd1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ebd8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ebdc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ebe0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ebe8:	75 0a                	jne    c001ebf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ebea:	b8 04 00 00 00       	mov    eax,0x4
c001ebef:	e9 1c 01 00 00       	jmp    c001ed10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ebf4:	83 ec 08             	sub    esp,0x8
c001ebf7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ebfe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ec02:	50                   	push   eax
c001ec03:	e8 5c 1b fe ff       	call   c0000764 <strcpy>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	83 ec 08             	sub    esp,0x8
c001ec0e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ec12:	50                   	push   eax
c001ec13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ec1a:	e8 3b fc ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ec1f:	83 c4 10             	add    esp,0x10
c001ec22:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ec2a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ec32:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec37:	83 e0 01             	and    eax,0x1
c001ec3a:	74 08                	je     c001ec44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ec3c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ec44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec49:	83 e0 02             	and    eax,0x2
c001ec4c:	74 08                	je     c001ec56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ec4e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ec56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec5b:	83 e0 04             	and    eax,0x4
c001ec5e:	74 08                	je     c001ec68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ec60:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ec68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec6d:	83 e0 08             	and    eax,0x8
c001ec70:	74 08                	je     c001ec7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001ec72:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ec7a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec7f:	83 e0 01             	and    eax,0x1
c001ec82:	74 08                	je     c001ec8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ec84:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ec8c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec91:	83 e0 02             	and    eax,0x2
c001ec94:	74 08                	je     c001ec9e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ec96:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ec9e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eca3:	83 e0 04             	and    eax,0x4
c001eca6:	74 08                	je     c001ecb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001eca8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ecb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ecb5:	83 e0 08             	and    eax,0x8
c001ecb8:	74 08                	je     c001ecc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ecba:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ecc2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ecc9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ecd0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ecd8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ece0:	83 ec 04             	sub    esp,0x4
c001ece3:	52                   	push   edx
c001ece4:	50                   	push   eax
c001ece5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ece9:	50                   	push   eax
c001ecea:	e8 77 7c fe ff       	call   c0006966 <f_chmod>
c001ecef:	83 c4 10             	add    esp,0x10
c001ecf2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ecf9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ed00:	85 c0                	test   eax,eax
c001ed02:	75 07                	jne    c001ed0b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ed04:	b8 00 00 00 00       	mov    eax,0x0
c001ed09:	eb 05                	jmp    c001ed10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ed0b:	b8 01 00 00 00       	mov    eax,0x1
c001ed10:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ed16:	c3                   	ret    
c001ed17:	90                   	nop

c001ed18 <FAT::rename(char const*, char const*)>:
c001ed18:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ed1e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ed26:	74 0a                	je     c001ed32 <FAT::rename(char const*, char const*)+0x1a>
c001ed28:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ed30:	75 0a                	jne    c001ed3c <FAT::rename(char const*, char const*)+0x24>
c001ed32:	b8 04 00 00 00       	mov    eax,0x4
c001ed37:	e9 98 00 00 00       	jmp    c001edd4 <FAT::rename(char const*, char const*)+0xbc>
c001ed3c:	83 ec 08             	sub    esp,0x8
c001ed3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ed4d:	50                   	push   eax
c001ed4e:	e8 11 1a fe ff       	call   c0000764 <strcpy>
c001ed53:	83 c4 10             	add    esp,0x10
c001ed56:	83 ec 08             	sub    esp,0x8
c001ed59:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ed60:	50                   	push   eax
c001ed61:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed68:	e8 ed fa ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	83 ec 08             	sub    esp,0x8
c001ed73:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ed7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed7e:	50                   	push   eax
c001ed7f:	e8 e0 19 fe ff       	call   c0000764 <strcpy>
c001ed84:	83 c4 10             	add    esp,0x10
c001ed87:	83 ec 08             	sub    esp,0x8
c001ed8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed8e:	50                   	push   eax
c001ed8f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed96:	e8 bf fa ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ed9b:	83 c4 10             	add    esp,0x10
c001ed9e:	83 ec 08             	sub    esp,0x8
c001eda1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eda5:	50                   	push   eax
c001eda6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001edad:	50                   	push   eax
c001edae:	e8 c0 78 fe ff       	call   c0006673 <f_rename>
c001edb3:	83 c4 10             	add    esp,0x10
c001edb6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001edbd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001edc4:	85 c0                	test   eax,eax
c001edc6:	75 07                	jne    c001edcf <FAT::rename(char const*, char const*)+0xb7>
c001edc8:	b8 00 00 00 00       	mov    eax,0x0
c001edcd:	eb 05                	jmp    c001edd4 <FAT::rename(char const*, char const*)+0xbc>
c001edcf:	b8 01 00 00 00       	mov    eax,0x1
c001edd4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001edda:	c3                   	ret    
c001eddb:	90                   	nop

c001eddc <FAT::mkdir(char const*)>:
c001eddc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ede2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001edea:	75 07                	jne    c001edf3 <FAT::mkdir(char const*)+0x17>
c001edec:	b8 04 00 00 00       	mov    eax,0x4
c001edf1:	eb 5c                	jmp    c001ee4f <FAT::mkdir(char const*)+0x73>
c001edf3:	83 ec 08             	sub    esp,0x8
c001edf6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001edfd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ee01:	50                   	push   eax
c001ee02:	e8 5d 19 fe ff       	call   c0000764 <strcpy>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	83 ec 08             	sub    esp,0x8
c001ee0d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ee11:	50                   	push   eax
c001ee12:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ee19:	e8 3c fa ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ee1e:	83 c4 10             	add    esp,0x10
c001ee21:	83 ec 0c             	sub    esp,0xc
c001ee24:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ee28:	50                   	push   eax
c001ee29:	e8 19 76 fe ff       	call   c0006447 <f_mkdir>
c001ee2e:	83 c4 10             	add    esp,0x10
c001ee31:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ee38:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ee3f:	85 c0                	test   eax,eax
c001ee41:	75 07                	jne    c001ee4a <FAT::mkdir(char const*)+0x6e>
c001ee43:	b8 00 00 00 00       	mov    eax,0x0
c001ee48:	eb 05                	jmp    c001ee4f <FAT::mkdir(char const*)+0x73>
c001ee4a:	b8 01 00 00 00       	mov    eax,0x1
c001ee4f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ee55:	c3                   	ret    

c001ee56 <FAT::exists(char const*)>:
c001ee56:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ee5c:	83 ec 08             	sub    esp,0x8
c001ee5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ee66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee6a:	50                   	push   eax
c001ee6b:	e8 f4 18 fe ff       	call   c0000764 <strcpy>
c001ee70:	83 c4 10             	add    esp,0x10
c001ee73:	83 ec 08             	sub    esp,0x8
c001ee76:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ee7a:	50                   	push   eax
c001ee7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ee82:	e8 d3 f9 ff ff       	call   c001e85a <FAT::fixFilepath(char*)>
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	83 ec 08             	sub    esp,0x8
c001ee8d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ee94:	50                   	push   eax
c001ee95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee99:	50                   	push   eax
c001ee9a:	e8 d3 70 fe ff       	call   c0005f72 <f_stat>
c001ee9f:	83 c4 10             	add    esp,0x10
c001eea2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eea9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eeb0:	85 c0                	test   eax,eax
c001eeb2:	75 04                	jne    c001eeb8 <FAT::exists(char const*)+0x62>
c001eeb4:	b0 01                	mov    al,0x1
c001eeb6:	eb 02                	jmp    c001eeba <FAT::exists(char const*)+0x64>
c001eeb8:	b0 00                	mov    al,0x0
c001eeba:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eec0:	c3                   	ret    
c001eec1:	90                   	nop

c001eec2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001eec2:	b8 08 00 00 00       	mov    eax,0x8
c001eec7:	c3                   	ret    

c001eec8 <ISO9660::seek(void*, unsigned long long)>:
c001eec8:	53                   	push   ebx
c001eec9:	b8 04 00 00 00       	mov    eax,0x4
c001eece:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eed2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eed6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eeda:	85 d2                	test   edx,edx
c001eedc:	74 17                	je     c001eef5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001eede:	89 c8                	mov    eax,ecx
c001eee0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001eee3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001eee6:	b8 01 00 00 00       	mov    eax,0x1
c001eeeb:	73 08                	jae    c001eef5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001eeed:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001eef0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001eef3:	31 c0                	xor    eax,eax
c001eef5:	5b                   	pop    ebx
c001eef6:	c3                   	ret    
c001eef7:	90                   	nop

c001eef8 <ISO9660::tell(void*, unsigned long long*)>:
c001eef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eefc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef00:	85 d2                	test   edx,edx
c001ef02:	74 12                	je     c001ef16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ef04:	85 c0                	test   eax,eax
c001ef06:	74 0e                	je     c001ef16 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ef08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ef0b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ef0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ef11:	89 10                	mov    DWORD PTR [eax],edx
c001ef13:	31 c0                	xor    eax,eax
c001ef15:	c3                   	ret    
c001ef16:	b8 04 00 00 00       	mov    eax,0x4
c001ef1b:	c3                   	ret    

c001ef1c <ISO9660::getName()>:
c001ef1c:	b8 30 8d 02 c0       	mov    eax,0xc0028d30
c001ef21:	c3                   	ret    

c001ef22 <ISO9660::stat(void*, unsigned long long*)>:
c001ef22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef2a:	85 d2                	test   edx,edx
c001ef2c:	74 12                	je     c001ef40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ef2e:	85 c0                	test   eax,eax
c001ef30:	74 0e                	je     c001ef40 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ef32:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ef35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ef38:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ef3b:	89 10                	mov    DWORD PTR [eax],edx
c001ef3d:	31 c0                	xor    eax,eax
c001ef3f:	c3                   	ret    
c001ef40:	b8 04 00 00 00       	mov    eax,0x4
c001ef45:	c3                   	ret    

c001ef46 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ef46:	b8 01 00 00 00       	mov    eax,0x1
c001ef4b:	c3                   	ret    

c001ef4c <ISO9660::unlink(char const*)>:
c001ef4c:	b8 01 00 00 00       	mov    eax,0x1
c001ef51:	c3                   	ret    

c001ef52 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ef52:	b8 01 00 00 00       	mov    eax,0x1
c001ef57:	c3                   	ret    

c001ef58 <ISO9660::rename(char const*, char const*)>:
c001ef58:	b8 01 00 00 00       	mov    eax,0x1
c001ef5d:	c3                   	ret    

c001ef5e <ISO9660::mkdir(char const*)>:
c001ef5e:	b8 01 00 00 00       	mov    eax,0x1
c001ef63:	c3                   	ret    

c001ef64 <ISO9660::close(void*)>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	b8 04 00 00 00       	mov    eax,0x4
c001ef6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef70:	85 d2                	test   edx,edx
c001ef72:	74 0e                	je     c001ef82 <ISO9660::close(void*)+0x1e>
c001ef74:	83 ec 0c             	sub    esp,0xc
c001ef77:	52                   	push   edx
c001ef78:	e8 01 02 ff ff       	call   c000f17e <free>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	31 c0                	xor    eax,eax
c001ef82:	83 c4 0c             	add    esp,0xc
c001ef85:	c3                   	ret    

c001ef86 <ISO9660::closeDir(void*)>:
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	b8 04 00 00 00       	mov    eax,0x4
c001ef8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef92:	85 d2                	test   edx,edx
c001ef94:	74 0e                	je     c001efa4 <ISO9660::closeDir(void*)+0x1e>
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	52                   	push   edx
c001ef9a:	e8 df 01 ff ff       	call   c000f17e <free>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	31 c0                	xor    eax,eax
c001efa4:	83 c4 0c             	add    esp,0xc
c001efa7:	c3                   	ret    

c001efa8 <ISO9660::~ISO9660()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	ba 84 8d 02 c0       	mov    edx,0xc0028d84
c001efb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb4:	89 10                	mov    DWORD PTR [eax],edx
c001efb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efba:	83 ec 0c             	sub    esp,0xc
c001efbd:	50                   	push   eax
c001efbe:	e8 dd 35 ff ff       	call   c00125a0 <Filesystem::~Filesystem()>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	90                   	nop
c001efc7:	83 c4 0c             	add    esp,0xc
c001efca:	c3                   	ret    
c001efcb:	90                   	nop

c001efcc <ISO9660::~ISO9660()>:
c001efcc:	83 ec 0c             	sub    esp,0xc
c001efcf:	83 ec 0c             	sub    esp,0xc
c001efd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd6:	e8 cd ff ff ff       	call   c001efa8 <ISO9660::~ISO9660()>
c001efdb:	83 c4 10             	add    esp,0x10
c001efde:	83 ec 08             	sub    esp,0x8
c001efe1:	6a 08                	push   0x8
c001efe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe7:	e8 ab 31 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001efec:	83 c4 10             	add    esp,0x10
c001efef:	83 c4 0c             	add    esp,0xc
c001eff2:	c3                   	ret    

c001eff3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001eff3:	55                   	push   ebp
c001eff4:	31 c9                	xor    ecx,ecx
c001eff6:	57                   	push   edi
c001eff7:	56                   	push   esi
c001eff8:	53                   	push   ebx
c001eff9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001effd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f001:	89 eb                	mov    ebx,ebp
c001f003:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f007:	39 ce                	cmp    esi,ecx
c001f009:	7e 17                	jle    c001f022 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f00b:	31 d2                	xor    edx,edx
c001f00d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f011:	7d 13                	jge    c001f026 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f013:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f017:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f01a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f01d:	75 0d                	jne    c001f02c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f01f:	42                   	inc    edx
c001f020:	eb eb                	jmp    c001f00d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f022:	31 c0                	xor    eax,eax
c001f024:	eb 0a                	jmp    c001f030 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f026:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f02a:	eb 04                	jmp    c001f030 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f02c:	41                   	inc    ecx
c001f02d:	43                   	inc    ebx
c001f02e:	eb d7                	jmp    c001f007 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f030:	5b                   	pop    ebx
c001f031:	5e                   	pop    esi
c001f032:	5f                   	pop    edi
c001f033:	5d                   	pop    ebp
c001f034:	c3                   	ret    

c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f035:	56                   	push   esi
c001f036:	53                   	push   ebx
c001f037:	52                   	push   edx
c001f038:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f03c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f040:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f044:	39 0d e0 bb 02 c0    	cmp    DWORD PTR ds:0xc002bbe0,ecx
c001f04a:	75 08                	jne    c001f054 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f04c:	38 05 68 9b 02 c0    	cmp    BYTE PTR ds:0xc0029b68,al
c001f052:	74 2b                	je     c001f07f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f054:	83 ec 0c             	sub    esp,0xc
c001f057:	a2 68 9b 02 c0       	mov    ds:0xc0029b68,al
c001f05c:	68 00 bc 02 c0       	push   0xc002bc00
c001f061:	0f be c0             	movsx  eax,al
c001f064:	6a 01                	push   0x1
c001f066:	89 0d e0 bb 02 c0    	mov    DWORD PTR ds:0xc002bbe0,ecx
c001f06c:	31 db                	xor    ebx,ebx
c001f06e:	53                   	push   ebx
c001f06f:	51                   	push   ecx
c001f070:	ff 34 85 bc aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5544]
c001f077:	e8 26 68 ff ff       	call   c00158a2 <LogicalDisk::read(unsigned long long, int, void*)>
c001f07c:	83 c4 20             	add    esp,0x20
c001f07f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f087:	c7 44 24 14 00 bc 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bc00
c001f08f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f093:	58                   	pop    eax
c001f094:	5b                   	pop    ebx
c001f095:	5e                   	pop    esi
c001f096:	e9 f4 15 fe ff       	jmp    c000068f <memcpy>
c001f09b:	90                   	nop

c001f09c <ISO9660::tryMount(LogicalDisk*, int)>:
c001f09c:	81 ec 10 08 00 00    	sub    esp,0x810
c001f0a2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f0a9:	83 c0 41             	add    eax,0x41
c001f0ac:	0f be c0             	movsx  eax,al
c001f0af:	50                   	push   eax
c001f0b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f0b4:	50                   	push   eax
c001f0b5:	6a 10                	push   0x10
c001f0b7:	e8 79 ff ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0bc:	83 c4 10             	add    esp,0x10
c001f0bf:	31 c0                	xor    eax,eax
c001f0c1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f0c6:	75 1d                	jne    c001f0e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0c8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f0cd:	75 16                	jne    c001f0e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0cf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f0d4:	75 0f                	jne    c001f0e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0d6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f0db:	75 08                	jne    c001f0e5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0dd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f0e2:	0f 94 c0             	sete   al
c001f0e5:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f0eb:	c3                   	ret    

c001f0ec <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f0ec:	55                   	push   ebp
c001f0ed:	57                   	push   edi
c001f0ee:	56                   	push   esi
c001f0ef:	53                   	push   ebx
c001f0f0:	81 ec 34 08 00 00    	sub    esp,0x834
c001f0f6:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f0fd:	55                   	push   ebp
c001f0fe:	68 4b 8d 02 c0       	push   0xc0028d4b
c001f103:	e8 6f 31 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001f108:	83 c4 10             	add    esp,0x10
c001f10b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f113:	0f 84 06 02 00 00    	je     c001f31f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f119:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f121:	0f 84 f8 01 00 00    	je     c001f31f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f127:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f12e:	b8 01 00 00 00       	mov    eax,0x1
c001f133:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f137:	0f 85 e7 01 00 00    	jne    c001f324 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f13d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f140:	31 d2                	xor    edx,edx
c001f142:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f145:	89 e9                	mov    ecx,ebp
c001f147:	89 d3                	mov    ebx,edx
c001f149:	01 f1                	add    ecx,esi
c001f14b:	11 fb                	adc    ebx,edi
c001f14d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f151:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f155:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f15c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f15f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f162:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f166:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f16a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f16e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f172:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f176:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f17a:	72 19                	jb     c001f195 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f17c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f184:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f188:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f18f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f193:	eb 13                	jmp    c001f1a8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f19d:	29 f0                	sub    eax,esi
c001f19f:	19 fa                	sbb    edx,edi
c001f1a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f1a8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f1af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f1b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b4:	53                   	push   ebx
c001f1b5:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f1b9:	c1 e0 0b             	shl    eax,0xb
c001f1bc:	01 c6                	add    esi,eax
c001f1be:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1c5:	11 d7                	adc    edi,edx
c001f1c7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1cb:	89 fa                	mov    edx,edi
c001f1cd:	50                   	push   eax
c001f1ce:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1d2:	50                   	push   eax
c001f1d3:	89 f0                	mov    eax,esi
c001f1d5:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1d9:	50                   	push   eax
c001f1da:	e8 56 fe ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1df:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f1e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1ea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f1ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f1f1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f1f7:	83 c4 10             	add    esp,0x10
c001f1fa:	b8 00 08 00 00       	mov    eax,0x800
c001f1ff:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f203:	29 d0                	sub    eax,edx
c001f205:	39 c1                	cmp    ecx,eax
c001f207:	83 db 00             	sbb    ebx,0x0
c001f20a:	7d 19                	jge    c001f225 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f20c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f211:	75 16                	jne    c001f229 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f213:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f21a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f220:	e9 f6 00 00 00       	jmp    c001f31b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f225:	89 c5                	mov    ebp,eax
c001f227:	eb 03                	jmp    c001f22c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f229:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f22c:	51                   	push   ecx
c001f22d:	55                   	push   ebp
c001f22e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f232:	50                   	push   eax
c001f233:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f23a:	e8 50 14 fe ff       	call   c000068f <memcpy>
c001f23f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f243:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f247:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f24e:	01 e8                	add    eax,ebp
c001f250:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f254:	89 e8                	mov    eax,ebp
c001f256:	99                   	cdq    
c001f257:	01 ee                	add    esi,ebp
c001f259:	11 d7                	adc    edi,edx
c001f25b:	29 e9                	sub    ecx,ebp
c001f25d:	19 d3                	sbb    ebx,edx
c001f25f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f263:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f26f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f272:	b8 00 00 00 00       	mov    eax,0x0
c001f277:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f27b:	7d 3f                	jge    c001f2bc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f27d:	52                   	push   edx
c001f27e:	89 fa                	mov    edx,edi
c001f280:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f287:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f28b:	50                   	push   eax
c001f28c:	89 f0                	mov    eax,esi
c001f28e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f292:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f296:	50                   	push   eax
c001f297:	e8 99 fd ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f29c:	81 c6 00 08 00 00    	add    esi,0x800
c001f2a2:	83 d7 00             	adc    edi,0x0
c001f2a5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f2ad:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f2b5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f2ba:	eb ab                	jmp    c001f267 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f2c3:	74 34                	je     c001f2f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f2c5:	89 fa                	mov    edx,edi
c001f2c7:	50                   	push   eax
c001f2c8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f2cf:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f2d3:	50                   	push   eax
c001f2d4:	89 f0                	mov    eax,esi
c001f2d6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f2da:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f2de:	55                   	push   ebp
c001f2df:	50                   	push   eax
c001f2e0:	e8 50 fd ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2e5:	83 c4 0c             	add    esp,0xc
c001f2e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f2ec:	55                   	push   ebp
c001f2ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f1:	e8 99 13 fe ff       	call   c000068f <memcpy>
c001f2f6:	83 c4 10             	add    esp,0x10
c001f2f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f300:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f304:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f308:	89 38                	mov    DWORD PTR [eax],edi
c001f30a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f311:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f315:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f318:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f31b:	31 c0                	xor    eax,eax
c001f31d:	eb 05                	jmp    c001f324 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f31f:	b8 04 00 00 00       	mov    eax,0x4
c001f324:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f32a:	5b                   	pop    ebx
c001f32b:	5e                   	pop    esi
c001f32c:	5f                   	pop    edi
c001f32d:	5d                   	pop    ebp
c001f32e:	c3                   	ret    
c001f32f:	90                   	nop

c001f330 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f330:	55                   	push   ebp
c001f331:	57                   	push   edi
c001f332:	56                   	push   esi
c001f333:	53                   	push   ebx
c001f334:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f33a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f341:	85 f6                	test   esi,esi
c001f343:	0f 84 64 02 00 00    	je     c001f5ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f349:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f351:	0f 84 56 02 00 00    	je     c001f5ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f357:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f35a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f35d:	75 0a                	jne    c001f369 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f35f:	b8 07 00 00 00       	mov    eax,0x7
c001f364:	e9 49 02 00 00       	jmp    c001f5b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f369:	50                   	push   eax
c001f36a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f36e:	50                   	push   eax
c001f36f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f376:	53                   	push   ebx
c001f377:	8b 06                	mov    eax,DWORD PTR [esi]
c001f379:	c1 e0 0b             	shl    eax,0xb
c001f37c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f37f:	c1 e8 0b             	shr    eax,0xb
c001f382:	50                   	push   eax
c001f383:	e8 ad fc ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f388:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f38b:	83 c4 10             	add    esp,0x10
c001f38e:	89 c1                	mov    ecx,eax
c001f390:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f393:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f399:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f39c:	84 db                	test   bl,bl
c001f39e:	0f 85 90 00 00 00    	jne    c001f434 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f3a4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f3aa:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f3b0:	29 c7                	sub    edi,eax
c001f3b2:	89 fb                	mov    ebx,edi
c001f3b4:	c1 fb 1f             	sar    ebx,0x1f
c001f3b7:	01 f8                	add    eax,edi
c001f3b9:	11 da                	adc    edx,ebx
c001f3bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f3c3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f3c6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f3c9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f3cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f3d6:	89 d8                	mov    eax,ebx
c001f3d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f3db:	ba 00 00 00 00       	mov    edx,0x0
c001f3e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f3e4:	b8 00 00 00 00       	mov    eax,0x0
c001f3e9:	73 0b                	jae    c001f3f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f3eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f3ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3f2:	29 f8                	sub    eax,edi
c001f3f4:	19 da                	sbb    edx,ebx
c001f3f6:	89 d3                	mov    ebx,edx
c001f3f8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f3fb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f3fe:	09 c3                	or     ebx,eax
c001f400:	0f 84 59 ff ff ff    	je     c001f35f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f406:	55                   	push   ebp
c001f407:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f40b:	50                   	push   eax
c001f40c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f413:	53                   	push   ebx
c001f414:	8b 06                	mov    eax,DWORD PTR [esi]
c001f416:	c1 e0 0b             	shl    eax,0xb
c001f419:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f41d:	c1 e8 0b             	shr    eax,0xb
c001f420:	50                   	push   eax
c001f421:	e8 0f fc ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f426:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f429:	83 c4 10             	add    esp,0x10
c001f42c:	25 ff 07 00 00       	and    eax,0x7ff
c001f431:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f434:	57                   	push   edi
c001f435:	6a 28                	push   0x28
c001f437:	6a 00                	push   0x0
c001f439:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f43d:	50                   	push   eax
c001f43e:	e8 82 12 fe ff       	call   c00006c5 <memset>
c001f443:	31 d2                	xor    edx,edx
c001f445:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f448:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f44e:	89 f8                	mov    eax,edi
c001f450:	83 c0 21             	add    eax,0x21
c001f453:	83 d2 00             	adc    edx,0x0
c001f456:	89 c7                	mov    edi,eax
c001f458:	89 d5                	mov    ebp,edx
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	31 c9                	xor    ecx,ecx
c001f45f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f466:	83 f9 28             	cmp    ecx,0x28
c001f469:	88 04 24             	mov    BYTE PTR [esp],al
c001f46c:	0f 94 c2             	sete   dl
c001f46f:	88 d0                	mov    al,dl
c001f471:	ba ff 07 00 00       	mov    edx,0x7ff
c001f476:	39 fa                	cmp    edx,edi
c001f478:	ba 00 00 00 00       	mov    edx,0x0
c001f47d:	19 ea                	sbb    edx,ebp
c001f47f:	0f 92 c2             	setb   dl
c001f482:	09 c2                	or     edx,eax
c001f484:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f488:	0f 94 c0             	sete   al
c001f48b:	08 d0                	or     al,dl
c001f48d:	75 16                	jne    c001f4a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f48f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f493:	74 10                	je     c001f4a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f495:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f498:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f49c:	41                   	inc    ecx
c001f49d:	83 c7 01             	add    edi,0x1
c001f4a0:	83 d5 00             	adc    ebp,0x0
c001f4a3:	eb ba                	jmp    c001f45f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f4a5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f4ac:	83 ec 0c             	sub    esp,0xc
c001f4af:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f4b3:	57                   	push   edi
c001f4b4:	e8 29 12 fe ff       	call   c00006e2 <strlen>
c001f4b9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f4c1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f4c5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f4cc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f4cf:	5a                   	pop    edx
c001f4d0:	25 ff 07 00 00       	and    eax,0x7ff
c001f4d5:	01 c8                	add    eax,ecx
c001f4d7:	59                   	pop    ecx
c001f4d8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f4de:	83 e0 02             	and    eax,0x2
c001f4e1:	3c 01                	cmp    al,0x1
c001f4e3:	19 c0                	sbb    eax,eax
c001f4e5:	83 c0 02             	add    eax,0x2
c001f4e8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f4ec:	57                   	push   edi
c001f4ed:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f4f1:	50                   	push   eax
c001f4f2:	e8 6d 12 fe ff       	call   c0000764 <strcpy>
c001f4f7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f4fb:	83 c4 10             	add    esp,0x10
c001f4fe:	84 c0                	test   al,al
c001f500:	75 21                	jne    c001f523 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f502:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f50a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f512:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f51a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f521:	eb 28                	jmp    c001f54b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f523:	fe c8                	dec    al
c001f525:	75 24                	jne    c001f54b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f527:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f52f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f537:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f53f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f546:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f54b:	0f b6 fb             	movzx  edi,bl
c001f54e:	31 db                	xor    ebx,ebx
c001f550:	50                   	push   eax
c001f551:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f558:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f55c:	50                   	push   eax
c001f55d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f564:	e8 26 11 fe ff       	call   c000068f <memcpy>
c001f569:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f570:	89 f9                	mov    ecx,edi
c001f572:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f578:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f57b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f57e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f581:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f584:	83 c4 10             	add    esp,0x10
c001f587:	39 c7                	cmp    edi,eax
c001f589:	89 df                	mov    edi,ebx
c001f58b:	19 d7                	sbb    edi,edx
c001f58d:	72 10                	jb     c001f59f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f58f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f596:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f59d:	eb 0a                	jmp    c001f5a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f59f:	29 c8                	sub    eax,ecx
c001f5a1:	19 da                	sbb    edx,ebx
c001f5a3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f5a6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f5a9:	31 c0                	xor    eax,eax
c001f5ab:	eb 05                	jmp    c001f5b2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f5ad:	b8 04 00 00 00       	mov    eax,0x4
c001f5b2:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f5b8:	5b                   	pop    ebx
c001f5b9:	5e                   	pop    esi
c001f5ba:	5f                   	pop    edi
c001f5bb:	5d                   	pop    ebp
c001f5bc:	c3                   	ret    

c001f5bd <readRoot(unsigned int*, unsigned int*, char)>:
c001f5bd:	81 ec 40 08 00 00    	sub    esp,0x840
c001f5c3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f5cb:	50                   	push   eax
c001f5cc:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f5d0:	50                   	push   eax
c001f5d1:	6a 10                	push   0x10
c001f5d3:	e8 5d fa ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5d8:	83 c4 0c             	add    esp,0xc
c001f5db:	6a 22                	push   0x22
c001f5dd:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f5e4:	50                   	push   eax
c001f5e5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f5e9:	50                   	push   eax
c001f5ea:	e8 a0 10 fe ff       	call   c000068f <memcpy>
c001f5ef:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f5f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f5fa:	89 10                	mov    DWORD PTR [eax],edx
c001f5fc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f603:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f607:	89 10                	mov    DWORD PTR [eax],edx
c001f609:	b0 01                	mov    al,0x1
c001f60b:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f611:	c3                   	ret    

c001f612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f612:	55                   	push   ebp
c001f613:	57                   	push   edi
c001f614:	56                   	push   esi
c001f615:	53                   	push   ebx
c001f616:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f61c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f623:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f62a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f62e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f632:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f636:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f63a:	75 03                	jne    c001f63f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f63c:	83 c3 02             	add    ebx,0x2
c001f63f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f642:	75 03                	jne    c001f647 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f644:	43                   	inc    ebx
c001f645:	eb f8                	jmp    c001f63f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f647:	51                   	push   ecx
c001f648:	68 00 01 00 00       	push   0x100
c001f64d:	6a 00                	push   0x0
c001f64f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f653:	50                   	push   eax
c001f654:	e8 6c 10 fe ff       	call   c00006c5 <memset>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	31 d2                	xor    edx,edx
c001f65e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f661:	84 c0                	test   al,al
c001f663:	74 21                	je     c001f686 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f665:	3c 2f                	cmp    al,0x2f
c001f667:	75 0b                	jne    c001f674 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f669:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f66d:	bd 01 00 00 00       	mov    ebp,0x1
c001f672:	eb 14                	jmp    c001f688 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f674:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f677:	80 f9 19             	cmp    cl,0x19
c001f67a:	77 03                	ja     c001f67f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f67c:	83 e8 20             	sub    eax,0x20
c001f67f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f683:	42                   	inc    edx
c001f684:	eb d8                	jmp    c001f65e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f686:	31 ed                	xor    ebp,ebp
c001f688:	83 ec 0c             	sub    esp,0xc
c001f68b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f692:	e8 d7 fa fe ff       	call   c000f16e <malloc>
c001f697:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f69e:	89 c6                	mov    esi,eax
c001f6a0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f6a6:	c1 ef 0b             	shr    edi,0xb
c001f6a9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f6b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f6b4:	83 c4 10             	add    esp,0x10
c001f6b7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f6bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6c0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f6c7:	74 28                	je     c001f6f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f6c9:	52                   	push   edx
c001f6ca:	57                   	push   edi
c001f6cb:	50                   	push   eax
c001f6cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f6d7:	e8 59 f9 ff ff       	call   c001f035 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6e0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f6e7:	05 00 08 00 00       	add    eax,0x800
c001f6ec:	83 c4 10             	add    esp,0x10
c001f6ef:	eb cb                	jmp    c001f6bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f6f1:	83 ec 0c             	sub    esp,0xc
c001f6f4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f6f8:	57                   	push   edi
c001f6f9:	e8 e4 0f fe ff       	call   c00006e2 <strlen>
c001f6fe:	50                   	push   eax
c001f6ff:	57                   	push   edi
c001f700:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f707:	56                   	push   esi
c001f708:	e8 e6 f8 ff ff       	call   c001eff3 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f70d:	83 c4 20             	add    esp,0x20
c001f710:	85 c0                	test   eax,eax
c001f712:	75 13                	jne    c001f727 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	56                   	push   esi
c001f718:	e8 61 fa fe ff       	call   c000f17e <free>
c001f71d:	83 c4 10             	add    esp,0x10
c001f720:	31 c0                	xor    eax,eax
c001f722:	e9 b3 00 00 00       	jmp    c001f7da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f727:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f72b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f72f:	c1 e7 08             	shl    edi,0x8
c001f732:	c1 e2 10             	shl    edx,0x10
c001f735:	09 d7                	or     edi,edx
c001f737:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f73b:	09 d7                	or     edi,edx
c001f73d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f741:	c1 e2 18             	shl    edx,0x18
c001f744:	09 d7                	or     edi,edx
c001f746:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f74a:	89 d1                	mov    ecx,edx
c001f74c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f750:	c1 e1 08             	shl    ecx,0x8
c001f753:	c1 e2 10             	shl    edx,0x10
c001f756:	09 ca                	or     edx,ecx
c001f758:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f75c:	09 ca                	or     edx,ecx
c001f75e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f762:	c1 e1 18             	shl    ecx,0x18
c001f765:	09 ca                	or     edx,ecx
c001f767:	89 e9                	mov    ecx,ebp
c001f769:	84 c9                	test   cl,cl
c001f76b:	74 3c                	je     c001f7a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f76d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	56                   	push   esi
c001f775:	e8 04 fa fe ff       	call   c000f17e <free>
c001f77a:	83 c4 0c             	add    esp,0xc
c001f77d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f784:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f789:	50                   	push   eax
c001f78a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f791:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f79c:	52                   	push   edx
c001f79d:	57                   	push   edi
c001f79e:	53                   	push   ebx
c001f79f:	e8 6e fe ff ff       	call   c001f612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f7a4:	83 c4 20             	add    esp,0x20
c001f7a7:	eb 31                	jmp    c001f7da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f7a9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f7ac:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f7b3:	d0 e8                	shr    al,1
c001f7b5:	89 3b                	mov    DWORD PTR [ebx],edi
c001f7b7:	83 e0 01             	and    eax,0x1
c001f7ba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f7c1:	83 ec 0c             	sub    esp,0xc
c001f7c4:	89 13                	mov    DWORD PTR [ebx],edx
c001f7c6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f7cd:	89 03                	mov    DWORD PTR [ebx],eax
c001f7cf:	56                   	push   esi
c001f7d0:	e8 a9 f9 fe ff       	call   c000f17e <free>
c001f7d5:	83 c4 10             	add    esp,0x10
c001f7d8:	b0 01                	mov    al,0x1
c001f7da:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f7e0:	5b                   	pop    ebx
c001f7e1:	5e                   	pop    esi
c001f7e2:	5f                   	pop    edi
c001f7e3:	5d                   	pop    ebp
c001f7e4:	c3                   	ret    

c001f7e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f7e5:	55                   	push   ebp
c001f7e6:	57                   	push   edi
c001f7e7:	56                   	push   esi
c001f7e8:	53                   	push   ebx
c001f7e9:	83 ec 20             	sub    esp,0x20
c001f7ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f7f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f7f4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f7f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f800:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f808:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f80d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f813:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f819:	57                   	push   edi
c001f81a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f81e:	50                   	push   eax
c001f81f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f823:	50                   	push   eax
c001f824:	e8 94 fd ff ff       	call   c001f5bd <readRoot(unsigned int*, unsigned int*, char)>
c001f829:	5a                   	pop    edx
c001f82a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f82e:	e8 af 0e fe ff       	call   c00006e2 <strlen>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	83 f8 03             	cmp    eax,0x3
c001f839:	77 17                	ja     c001f852 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f83b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f83f:	89 03                	mov    DWORD PTR [ebx],eax
c001f841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f845:	89 06                	mov    DWORD PTR [esi],eax
c001f847:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f84e:	b0 01                	mov    al,0x1
c001f850:	eb 19                	jmp    c001f86b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f852:	50                   	push   eax
c001f853:	55                   	push   ebp
c001f854:	57                   	push   edi
c001f855:	56                   	push   esi
c001f856:	53                   	push   ebx
c001f857:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f85b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f85f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f863:	e8 aa fd ff ff       	call   c001f612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f868:	83 c4 20             	add    esp,0x20
c001f86b:	83 c4 1c             	add    esp,0x1c
c001f86e:	5b                   	pop    ebx
c001f86f:	5e                   	pop    esi
c001f870:	5f                   	pop    edi
c001f871:	5d                   	pop    ebp
c001f872:	c3                   	ret    
c001f873:	90                   	nop

c001f874 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f874:	57                   	push   edi
c001f875:	56                   	push   esi
c001f876:	53                   	push   ebx
c001f877:	83 ec 10             	sub    esp,0x10
c001f87a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f87e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f882:	85 ff                	test   edi,edi
c001f884:	74 7b                	je     c001f901 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f886:	85 f6                	test   esi,esi
c001f888:	74 77                	je     c001f901 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f88a:	83 ec 0c             	sub    esp,0xc
c001f88d:	6a 1c                	push   0x1c
c001f88f:	e8 da f8 fe ff       	call   c000f16e <malloc>
c001f894:	89 07                	mov    DWORD PTR [edi],eax
c001f896:	89 c3                	mov    ebx,eax
c001f898:	58                   	pop    eax
c001f899:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f89d:	50                   	push   eax
c001f89e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f8a1:	50                   	push   eax
c001f8a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8a6:	50                   	push   eax
c001f8a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8ab:	50                   	push   eax
c001f8ac:	56                   	push   esi
c001f8ad:	e8 33 ff ff ff       	call   c001f7e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f8b2:	83 c4 20             	add    esp,0x20
c001f8b5:	84 c0                	test   al,al
c001f8b7:	74 07                	je     c001f8c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f8b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8be:	74 0b                	je     c001f8cb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f8c0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f8c4:	b8 01 00 00 00       	mov    eax,0x1
c001f8c9:	eb 3b                	jmp    c001f906 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f8cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8cf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f8d3:	89 03                	mov    DWORD PTR [ebx],eax
c001f8d5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f8dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f8e7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f8f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f8f8:	8a 06                	mov    al,BYTE PTR [esi]
c001f8fa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f8fd:	31 c0                	xor    eax,eax
c001f8ff:	eb 05                	jmp    c001f906 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f901:	b8 04 00 00 00       	mov    eax,0x4
c001f906:	83 c4 10             	add    esp,0x10
c001f909:	5b                   	pop    ebx
c001f90a:	5e                   	pop    esi
c001f90b:	5f                   	pop    edi
c001f90c:	c3                   	ret    
c001f90d:	90                   	nop

c001f90e <ISO9660::exists(char const*)>:
c001f90e:	83 ec 28             	sub    esp,0x28
c001f911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f915:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f919:	52                   	push   edx
c001f91a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f91d:	52                   	push   edx
c001f91e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f922:	52                   	push   edx
c001f923:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f927:	52                   	push   edx
c001f928:	50                   	push   eax
c001f929:	e8 b7 fe ff ff       	call   c001f7e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f92e:	83 c4 3c             	add    esp,0x3c
c001f931:	c3                   	ret    

c001f932 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f932:	56                   	push   esi
c001f933:	53                   	push   ebx
c001f934:	83 ec 14             	sub    esp,0x14
c001f937:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f93b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f93f:	85 db                	test   ebx,ebx
c001f941:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f945:	0f 94 c2             	sete   dl
c001f948:	85 f6                	test   esi,esi
c001f94a:	0f 94 c0             	sete   al
c001f94d:	08 c2                	or     dl,al
c001f94f:	75 68                	jne    c001f9b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f951:	85 c9                	test   ecx,ecx
c001f953:	74 64                	je     c001f9b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f955:	83 ec 0c             	sub    esp,0xc
c001f958:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f95b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f95f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f965:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f96c:	50                   	push   eax
c001f96d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f970:	50                   	push   eax
c001f971:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f975:	50                   	push   eax
c001f976:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f97a:	50                   	push   eax
c001f97b:	51                   	push   ecx
c001f97c:	e8 64 fe ff ff       	call   c001f7e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f981:	83 c4 20             	add    esp,0x20
c001f984:	ba 01 00 00 00       	mov    edx,0x1
c001f989:	84 c0                	test   al,al
c001f98b:	74 31                	je     c001f9be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f98d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f991:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f998:	89 03                	mov    DWORD PTR [ebx],eax
c001f99a:	ba 00 00 00 00       	mov    edx,0x0
c001f99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9a3:	85 c0                	test   eax,eax
c001f9a5:	0f 95 06             	setne  BYTE PTR [esi]
c001f9a8:	74 14                	je     c001f9be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f9aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f9b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f9b7:	eb 05                	jmp    c001f9be <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f9b9:	ba 04 00 00 00       	mov    edx,0x4
c001f9be:	83 c4 14             	add    esp,0x14
c001f9c1:	89 d0                	mov    eax,edx
c001f9c3:	5b                   	pop    ebx
c001f9c4:	5e                   	pop    esi
c001f9c5:	c3                   	ret    

c001f9c6 <ISO9660::openDir(char const*, void**)>:
c001f9c6:	57                   	push   edi
c001f9c7:	56                   	push   esi
c001f9c8:	53                   	push   ebx
c001f9c9:	83 ec 10             	sub    esp,0x10
c001f9cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f9d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f9d4:	85 ff                	test   edi,edi
c001f9d6:	0f 84 95 00 00 00    	je     c001fa71 <ISO9660::openDir(char const*, void**)+0xab>
c001f9dc:	85 f6                	test   esi,esi
c001f9de:	0f 84 8d 00 00 00    	je     c001fa71 <ISO9660::openDir(char const*, void**)+0xab>
c001f9e4:	83 ec 0c             	sub    esp,0xc
c001f9e7:	6a 1c                	push   0x1c
c001f9e9:	e8 80 f7 fe ff       	call   c000f16e <malloc>
c001f9ee:	89 07                	mov    DWORD PTR [edi],eax
c001f9f0:	89 c3                	mov    ebx,eax
c001f9f2:	59                   	pop    ecx
c001f9f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f9f7:	50                   	push   eax
c001f9f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f9fb:	50                   	push   eax
c001f9fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa00:	50                   	push   eax
c001fa01:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa05:	50                   	push   eax
c001fa06:	56                   	push   esi
c001fa07:	e8 d9 fd ff ff       	call   c001f7e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001fa0c:	83 c4 20             	add    esp,0x20
c001fa0f:	84 c0                	test   al,al
c001fa11:	74 07                	je     c001fa1a <ISO9660::openDir(char const*, void**)+0x54>
c001fa13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fa18:	75 21                	jne    c001fa3b <ISO9660::openDir(char const*, void**)+0x75>
c001fa1a:	0f b6 c0             	movzx  eax,al
c001fa1d:	52                   	push   edx
c001fa1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fa22:	50                   	push   eax
c001fa23:	68 5e 8d 02 c0       	push   0xc0028d5e
c001fa28:	e8 4a 28 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c001fa2d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fa31:	83 c4 10             	add    esp,0x10
c001fa34:	b8 01 00 00 00       	mov    eax,0x1
c001fa39:	eb 3b                	jmp    c001fa76 <ISO9660::openDir(char const*, void**)+0xb0>
c001fa3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fa43:	89 03                	mov    DWORD PTR [ebx],eax
c001fa45:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fa4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fa57:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa61:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa68:	8a 06                	mov    al,BYTE PTR [esi]
c001fa6a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fa6d:	31 c0                	xor    eax,eax
c001fa6f:	eb 05                	jmp    c001fa76 <ISO9660::openDir(char const*, void**)+0xb0>
c001fa71:	b8 04 00 00 00       	mov    eax,0x4
c001fa76:	83 c4 10             	add    esp,0x10
c001fa79:	5b                   	pop    ebx
c001fa7a:	5e                   	pop    esi
c001fa7b:	5f                   	pop    edi
c001fa7c:	c3                   	ret    
c001fa7d:	90                   	nop

c001fa7e <ISO9660::ISO9660()>:
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa85:	83 ec 0c             	sub    esp,0xc
c001fa88:	50                   	push   eax
c001fa89:	e8 ee 2a ff ff       	call   c001257c <Filesystem::Filesystem()>
c001fa8e:	83 c4 10             	add    esp,0x10
c001fa91:	ba 84 8d 02 c0       	mov    edx,0xc0028d84
c001fa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9a:	89 10                	mov    DWORD PTR [eax],edx
c001fa9c:	90                   	nop
c001fa9d:	83 c4 0c             	add    esp,0xc
c001faa0:	c3                   	ret    
c001faa1:	90                   	nop

c001faa2 <SoundChannel::~SoundChannel()>:
c001faa2:	83 ec 0c             	sub    esp,0xc
c001faa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001faac:	83 ec 0c             	sub    esp,0xc
c001faaf:	50                   	push   eax
c001fab0:	e8 c9 f6 fe ff       	call   c000f17e <free>
c001fab5:	83 c4 10             	add    esp,0x10
c001fab8:	90                   	nop
c001fab9:	83 c4 0c             	add    esp,0xc
c001fabc:	c3                   	ret    
c001fabd:	90                   	nop

c001fabe <SoundChannel::setSpeed(float)>:
c001fabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fac6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fac9:	c3                   	ret    

c001faca <SoundChannel::getSpeed()>:
c001faca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001face:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001fad1:	c3                   	ret    

c001fad2 <SoundChannel::setVolume(int)>:
c001fad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fad6:	83 f8 64             	cmp    eax,0x64
c001fad9:	7e 05                	jle    c001fae0 <SoundChannel::setVolume(int)+0xe>
c001fadb:	b8 64 00 00 00       	mov    eax,0x64
c001fae0:	85 c0                	test   eax,eax
c001fae2:	79 02                	jns    c001fae6 <SoundChannel::setVolume(int)+0x14>
c001fae4:	31 c0                	xor    eax,eax
c001fae6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faea:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001faed:	c3                   	ret    

c001faee <SoundChannel::getVolume()>:
c001faee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001faf5:	c3                   	ret    

c001faf6 <SoundChannel::pause()>:
c001faf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fafa:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fafe:	c3                   	ret    
c001faff:	90                   	nop

c001fb00 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fb00:	83 ec 1c             	sub    esp,0x1c
c001fb03:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb07:	e8 ea ff ff ff       	call   c001faf6 <SoundChannel::pause()>
c001fb0c:	83 c4 04             	add    esp,0x4
c001fb0f:	6a 50                	push   0x50
c001fb11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fb15:	e8 b8 ff ff ff       	call   c001fad2 <SoundChannel::setVolume(int)>
c001fb1a:	83 c4 08             	add    esp,0x8
c001fb1d:	a1 fc 8d 02 c0       	mov    eax,ds:0xc0028dfc
c001fb22:	50                   	push   eax
c001fb23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fb27:	e8 92 ff ff ff       	call   c001fabe <SoundChannel::setSpeed(float)>
c001fb2c:	83 c4 08             	add    esp,0x8
c001fb2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb37:	89 10                	mov    DWORD PTR [eax],edx
c001fb39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fb41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fb4c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb4f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fb54:	75 23                	jne    c001fb79 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fb56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb5a:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb63:	0f af c2             	imul   eax,edx
c001fb66:	85 c0                	test   eax,eax
c001fb68:	79 03                	jns    c001fb6d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fb6a:	83 c0 03             	add    eax,0x3
c001fb6d:	c1 f8 02             	sar    eax,0x2
c001fb70:	05 a0 0f 00 00       	add    eax,0xfa0
c001fb75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fb79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fb81:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb88:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fb8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb93:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fba1:	c1 e0 02             	shl    eax,0x2
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	50                   	push   eax
c001fba8:	e8 c1 f5 fe ff       	call   c000f16e <malloc>
c001fbad:	83 c4 10             	add    esp,0x10
c001fbb0:	89 c2                	mov    edx,eax
c001fbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbb6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fbb9:	83 ec 04             	sub    esp,0x4
c001fbbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbc0:	50                   	push   eax
c001fbc1:	6a 01                	push   0x1
c001fbc3:	6a 04                	push   0x4
c001fbc5:	e8 9d 8d fe ff       	call   c0008967 <src_new>
c001fbca:	83 c4 10             	add    esp,0x10
c001fbcd:	89 c2                	mov    edx,eax
c001fbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fbd3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fbd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbda:	85 c0                	test   eax,eax
c001fbdc:	74 10                	je     c001fbee <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fbde:	83 ec 0c             	sub    esp,0xc
c001fbe1:	68 e0 8d 02 c0       	push   0xc0028de0
c001fbe6:	e8 ec 8e ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	a0 00 c8 02 c0       	mov    al,ds:0xc002c800
c001fbf3:	83 f0 01             	xor    eax,0x1
c001fbf6:	84 c0                	test   al,al
c001fbf8:	74 57                	je     c001fc51 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fbfa:	a1 00 8e 02 c0       	mov    eax,ds:0xc0028e00
c001fbff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fc0b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fc13:	7f 35                	jg     c001fc4a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fc15:	83 ec 0c             	sub    esp,0xc
c001fc18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc1c:	e8 e6 41 00 00       	call   c0023e07 <__floatsisf>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	8b 15 00 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e00
c001fc2a:	83 ec 08             	sub    esp,0x8
c001fc2d:	52                   	push   edx
c001fc2e:	50                   	push   eax
c001fc2f:	e8 e5 3d 00 00       	call   c0023a19 <__mulsf3>
c001fc34:	83 c4 10             	add    esp,0x10
c001fc37:	89 c2                	mov    edx,eax
c001fc39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc3d:	89 14 85 00 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3c00],edx
c001fc44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fc48:	eb c1                	jmp    c001fc0b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fc4a:	c6 05 00 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c800,0x1
c001fc51:	90                   	nop
c001fc52:	83 c4 1c             	add    esp,0x1c
c001fc55:	c3                   	ret    

c001fc56 <SoundChannel::play()>:
c001fc56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc5a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fc5e:	c3                   	ret    
c001fc5f:	90                   	nop

c001fc60 <SoundChannel::paused()>:
c001fc60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc64:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fc67:	c3                   	ret    

c001fc68 <SoundChannel::getSampleRate()>:
c001fc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc6e:	c3                   	ret    
c001fc6f:	90                   	nop

c001fc70 <SoundChannel::getBits()>:
c001fc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc77:	c3                   	ret    

c001fc78 <SoundChannel::getBufferUsed()>:
c001fc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc7c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fc7f:	c3                   	ret    

c001fc80 <SoundChannel::getBufferSize()>:
c001fc80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc84:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fc87:	c3                   	ret    

c001fc88 <SoundChannel::unbuffer(float*, int, int)>:
c001fc88:	56                   	push   esi
c001fc89:	53                   	push   ebx
c001fc8a:	83 ec 40             	sub    esp,0x40
c001fc8d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fc91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fc94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc98:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fc9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fc9f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fca3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fca7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fcab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fcaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fcb3:	e8 4f 41 00 00       	call   c0023e07 <__floatsisf>
c001fcb8:	5a                   	pop    edx
c001fcb9:	89 c6                	mov    esi,eax
c001fcbb:	ff 33                	push   DWORD PTR [ebx]
c001fcbd:	e8 45 41 00 00       	call   c0023e07 <__floatsisf>
c001fcc2:	59                   	pop    ecx
c001fcc3:	5a                   	pop    edx
c001fcc4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fcc7:	50                   	push   eax
c001fcc8:	e8 4c 3d 00 00       	call   c0023a19 <__mulsf3>
c001fccd:	59                   	pop    ecx
c001fcce:	5a                   	pop    edx
c001fccf:	50                   	push   eax
c001fcd0:	56                   	push   esi
c001fcd1:	e8 06 3f 00 00       	call   c0023bdc <__divsf3>
c001fcd6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd9:	e8 f9 53 00 00       	call   c00250d7 <__extendsfdf2>
c001fcde:	59                   	pop    ecx
c001fcdf:	5e                   	pop    esi
c001fce0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fce4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fce8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fcf0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fcf4:	50                   	push   eax
c001fcf5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fcf8:	e8 e4 88 fe ff       	call   c00085e1 <src_process>
c001fcfd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fd01:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fd04:	83 c4 0c             	add    esp,0xc
c001fd07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fd0a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fd0d:	29 d0                	sub    eax,edx
c001fd0f:	c1 e0 02             	shl    eax,0x2
c001fd12:	50                   	push   eax
c001fd13:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fd16:	50                   	push   eax
c001fd17:	51                   	push   ecx
c001fd18:	e8 3a 09 fe ff       	call   c0000657 <memmove>
c001fd1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fd21:	83 c4 44             	add    esp,0x44
c001fd24:	5b                   	pop    ebx
c001fd25:	5e                   	pop    esi
c001fd26:	c3                   	ret    
c001fd27:	90                   	nop

c001fd28 <SoundChannel::buffer8(unsigned char*, int)>:
c001fd28:	55                   	push   ebp
c001fd29:	57                   	push   edi
c001fd2a:	56                   	push   esi
c001fd2b:	53                   	push   ebx
c001fd2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd30:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fd34:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd3b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd3e:	74 7a                	je     c001fdba <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd40:	85 ff                	test   edi,edi
c001fd42:	7e 76                	jle    c001fdba <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd44:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fd48:	8d 70 01             	lea    esi,[eax+0x1]
c001fd4b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd4e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd51:	8b 1c 9d 00 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3c00]
c001fd58:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fd5b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd5e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd61:	74 5e                	je     c001fdc1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fd63:	83 ff 01             	cmp    edi,0x1
c001fd66:	74 4b                	je     c001fdb3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fd68:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fd6c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd6f:	8d 70 01             	lea    esi,[eax+0x1]
c001fd72:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd75:	8b 1c 9d 00 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3c00]
c001fd7c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fd7f:	b8 02 00 00 00       	mov    eax,0x2
c001fd84:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fd87:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fd8a:	75 23                	jne    c001fdaf <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fd8c:	eb 27                	jmp    c001fdb5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fd8e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fd93:	8d 71 01             	lea    esi,[ecx+0x1]
c001fd96:	40                   	inc    eax
c001fd97:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd9a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fd9d:	8b 1c 9d 00 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3c00]
c001fda4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fda7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fdaa:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fdad:	74 06                	je     c001fdb5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fdaf:	39 c7                	cmp    edi,eax
c001fdb1:	75 db                	jne    c001fd8e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fdb3:	89 f8                	mov    eax,edi
c001fdb5:	5b                   	pop    ebx
c001fdb6:	5e                   	pop    esi
c001fdb7:	5f                   	pop    edi
c001fdb8:	5d                   	pop    ebp
c001fdb9:	c3                   	ret    
c001fdba:	5b                   	pop    ebx
c001fdbb:	31 c0                	xor    eax,eax
c001fdbd:	5e                   	pop    esi
c001fdbe:	5f                   	pop    edi
c001fdbf:	5d                   	pop    ebp
c001fdc0:	c3                   	ret    
c001fdc1:	b8 01 00 00 00       	mov    eax,0x1
c001fdc6:	eb ed                	jmp    c001fdb5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fdc8 <SoundDevice::SoundDevice(char const*)>:
c001fdc8:	83 ec 1c             	sub    esp,0x1c
c001fdcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdcf:	83 ec 08             	sub    esp,0x8
c001fdd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fdd6:	50                   	push   eax
c001fdd7:	e8 96 3a ff ff       	call   c0013872 <Device::Device(char const*)>
c001fddc:	83 c4 10             	add    esp,0x10
c001fddf:	ba 0c 8e 02 c0       	mov    edx,0xc0028e0c
c001fde4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fde8:	89 10                	mov    DWORD PTR [eax],edx
c001fdea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdee:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fdf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdfc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fe06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe0e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fe13:	7f 19                	jg     c001fe2e <SoundDevice::SoundDevice(char const*)+0x66>
c001fe15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe1d:	83 c2 54             	add    edx,0x54
c001fe20:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fe28:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fe2c:	eb e0                	jmp    c001fe0e <SoundDevice::SoundDevice(char const*)+0x46>
c001fe2e:	90                   	nop
c001fe2f:	83 c4 1c             	add    esp,0x1c
c001fe32:	c3                   	ret    
c001fe33:	90                   	nop

c001fe34 <SoundDevice::~SoundDevice()>:
c001fe34:	53                   	push   ebx
c001fe35:	83 ec 18             	sub    esp,0x18
c001fe38:	ba 0c 8e 02 c0       	mov    edx,0xc0028e0c
c001fe3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe41:	89 10                	mov    DWORD PTR [eax],edx
c001fe43:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe4b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fe50:	7f 46                	jg     c001fe98 <SoundDevice::~SoundDevice()+0x64>
c001fe52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe5a:	83 c2 54             	add    edx,0x54
c001fe5d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fe61:	85 c0                	test   eax,eax
c001fe63:	74 2d                	je     c001fe92 <SoundDevice::~SoundDevice()+0x5e>
c001fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe6d:	83 c2 54             	add    edx,0x54
c001fe70:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fe74:	85 db                	test   ebx,ebx
c001fe76:	74 1a                	je     c001fe92 <SoundDevice::~SoundDevice()+0x5e>
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	53                   	push   ebx
c001fe7c:	e8 21 fc ff ff       	call   c001faa2 <SoundChannel::~SoundChannel()>
c001fe81:	83 c4 10             	add    esp,0x10
c001fe84:	83 ec 08             	sub    esp,0x8
c001fe87:	6a 2c                	push   0x2c
c001fe89:	53                   	push   ebx
c001fe8a:	e8 08 23 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001fe8f:	83 c4 10             	add    esp,0x10
c001fe92:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fe96:	eb b3                	jmp    c001fe4b <SoundDevice::~SoundDevice()+0x17>
c001fe98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	50                   	push   eax
c001fea0:	e8 7f 36 ff ff       	call   c0013524 <Device::~Device()>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	90                   	nop
c001fea9:	83 c4 18             	add    esp,0x18
c001feac:	5b                   	pop    ebx
c001fead:	c3                   	ret    

c001feae <SoundDevice::~SoundDevice()>:
c001feae:	83 ec 0c             	sub    esp,0xc
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb8:	e8 77 ff ff ff       	call   c001fe34 <SoundDevice::~SoundDevice()>
c001febd:	83 c4 10             	add    esp,0x10
c001fec0:	83 ec 08             	sub    esp,0x8
c001fec3:	68 e4 01 00 00       	push   0x1e4
c001fec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fecc:	e8 c6 22 ff ff       	call   c0012197 <operator delete(void*, unsigned long)>
c001fed1:	83 c4 10             	add    esp,0x10
c001fed4:	83 c4 0c             	add    esp,0xc
c001fed7:	c3                   	ret    

c001fed8 <SoundDevice::getFreeChannelNum()>:
c001fed8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fedc:	31 c0                	xor    eax,eax
c001fede:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fee6:	74 09                	je     c001fef1 <SoundDevice::getFreeChannelNum()+0x19>
c001fee8:	40                   	inc    eax
c001fee9:	83 f8 20             	cmp    eax,0x20
c001feec:	75 f0                	jne    c001fede <SoundDevice::getFreeChannelNum()+0x6>
c001feee:	83 c8 ff             	or     eax,0xffffffff
c001fef1:	c3                   	ret    

c001fef2 <SoundDevice::addChannel(SoundChannel*)>:
c001fef2:	56                   	push   esi
c001fef3:	53                   	push   ebx
c001fef4:	51                   	push   ecx
c001fef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fef9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fefd:	53                   	push   ebx
c001fefe:	e8 d5 ff ff ff       	call   c001fed8 <SoundDevice::getFreeChannelNum()>
c001ff03:	5a                   	pop    edx
c001ff04:	83 f8 ff             	cmp    eax,0xffffffff
c001ff07:	74 51                	je     c001ff5a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ff09:	85 f6                	test   esi,esi
c001ff0b:	74 4d                	je     c001ff5a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ff0d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ff14:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ff1b:	75 30                	jne    c001ff4d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ff1d:	83 ec 0c             	sub    esp,0xc
c001ff20:	56                   	push   esi
c001ff21:	e8 42 fd ff ff       	call   c001fc68 <SoundChannel::getSampleRate()>
c001ff26:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ff2c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff2f:	e8 3c fd ff ff       	call   c001fc70 <SoundChannel::getBits()>
c001ff34:	83 c4 0c             	add    esp,0xc
c001ff37:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ff3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ff3f:	50                   	push   eax
c001ff40:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ff46:	53                   	push   ebx
c001ff47:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ff4a:	83 c4 10             	add    esp,0x10
c001ff4d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ff53:	b8 01 00 00 00       	mov    eax,0x1
c001ff58:	eb 03                	jmp    c001ff5d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ff5a:	83 c8 ff             	or     eax,0xffffffff
c001ff5d:	5a                   	pop    edx
c001ff5e:	5b                   	pop    ebx
c001ff5f:	5e                   	pop    esi
c001ff60:	c3                   	ret    
c001ff61:	90                   	nop

c001ff62 <SoundDevice::removeChannel(int)>:
c001ff62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff6a:	83 fa 1f             	cmp    edx,0x1f
c001ff6d:	77 23                	ja     c001ff92 <SoundDevice::removeChannel(int)+0x30>
c001ff6f:	8d 14 90             	lea    edx,[eax+edx*4]
c001ff72:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ff79:	74 17                	je     c001ff92 <SoundDevice::removeChannel(int)+0x30>
c001ff7b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ff85:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ff8b:	75 05                	jne    c001ff92 <SoundDevice::removeChannel(int)+0x30>
c001ff8d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff8f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ff92:	c3                   	ret    
c001ff93:	90                   	nop

c001ff94 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ff94:	57                   	push   edi
c001ff95:	56                   	push   esi
c001ff96:	53                   	push   ebx
c001ff97:	31 db                	xor    ebx,ebx
c001ff99:	83 ec 10             	sub    esp,0x10
c001ff9c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ffa0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ffa4:	0f 8d cb 00 00 00    	jge    c0020075 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001ffaa:	83 ec 0c             	sub    esp,0xc
c001ffad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ffb1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001ffb4:	e8 1e 51 00 00       	call   c00250d7 <__extendsfdf2>
c001ffb9:	83 c4 10             	add    esp,0x10
c001ffbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ffc4:	68 00 00 f0 3f       	push   0x3ff00000
c001ffc9:	6a 00                	push   0x0
c001ffcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffd3:	e8 8b 40 00 00       	call   c0024063 <__adddf3>
c001ffd8:	83 c4 10             	add    esp,0x10
c001ffdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ffe3:	68 00 00 e0 3f       	push   0x3fe00000
c001ffe8:	6a 00                	push   0x0
c001ffea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fff2:	e8 e9 46 00 00       	call   c00246e0 <__muldf3>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fffe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020002:	68 00 00 60 40       	push   0x40600000
c0020007:	6a 00                	push   0x0
c0020009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002000d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020011:	e8 ca 46 00 00       	call   c00246e0 <__muldf3>
c0020016:	59                   	pop    ecx
c0020017:	5f                   	pop    edi
c0020018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002001c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020024:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020028:	e8 86 4f 00 00       	call   c0024fb3 <__truncdfsf2>
c002002d:	5a                   	pop    edx
c002002e:	89 c7                	mov    edi,eax
c0020030:	59                   	pop    ecx
c0020031:	68 00 00 fe 42       	push   0x42fe0000
c0020036:	50                   	push   eax
c0020037:	e8 21 40 00 00       	call   c002405d <__gesf2>
c002003c:	83 c4 10             	add    esp,0x10
c002003f:	85 c0                	test   eax,eax
c0020041:	78 06                	js     c0020049 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020043:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020047:	eb 26                	jmp    c002006f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020049:	50                   	push   eax
c002004a:	50                   	push   eax
c002004b:	6a 00                	push   0x0
c002004d:	57                   	push   edi
c002004e:	e8 0e 40 00 00       	call   c0024061 <__lesf2>
c0020053:	83 c4 10             	add    esp,0x10
c0020056:	85 c0                	test   eax,eax
c0020058:	7f 06                	jg     c0020060 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002005a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002005e:	eb 0f                	jmp    c002006f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020060:	83 ec 0c             	sub    esp,0xc
c0020063:	57                   	push   edi
c0020064:	e8 03 51 00 00       	call   c002516c <lrintf>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002006f:	43                   	inc    ebx
c0020070:	e9 2b ff ff ff       	jmp    c001ffa0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020075:	83 c4 10             	add    esp,0x10
c0020078:	5b                   	pop    ebx
c0020079:	5e                   	pop    esi
c002007a:	5f                   	pop    edi
c002007b:	c3                   	ret    

c002007c <SoundDevice::getAudio(int, float*, float*)>:
c002007c:	55                   	push   ebp
c002007d:	57                   	push   edi
c002007e:	56                   	push   esi
c002007f:	53                   	push   ebx
c0020080:	31 db                	xor    ebx,ebx
c0020082:	83 ec 20             	sub    esp,0x20
c0020085:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020089:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002008d:	c1 e0 02             	shl    eax,0x2
c0020090:	50                   	push   eax
c0020091:	6a 00                	push   0x0
c0020093:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020097:	e8 29 06 fe ff       	call   c00006c5 <memset>
c002009c:	83 c4 10             	add    esp,0x10
c002009f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00200a3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00200aa:	85 c0                	test   eax,eax
c00200ac:	0f 84 d7 00 00 00    	je     c0020189 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	50                   	push   eax
c00200b6:	e8 a5 fb ff ff       	call   c001fc60 <SoundChannel::paused()>
c00200bb:	83 c4 10             	add    esp,0x10
c00200be:	84 c0                	test   al,al
c00200c0:	0f 85 c3 00 00 00    	jne    c0020189 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200c6:	83 ec 0c             	sub    esp,0xc
c00200c9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00200d0:	e8 19 fa ff ff       	call   c001faee <SoundChannel::getVolume()>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	85 c0                	test   eax,eax
c00200da:	0f 84 a9 00 00 00    	je     c0020189 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200e0:	83 ec 0c             	sub    esp,0xc
c00200e3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00200ea:	e8 ff f9 ff ff       	call   c001faee <SoundChannel::getVolume()>
c00200ef:	83 ec 0c             	sub    esp,0xc
c00200f2:	50                   	push   eax
c00200f3:	e8 0f 3d 00 00       	call   c0023e07 <__floatsisf>
c00200f8:	59                   	pop    ecx
c00200f9:	5d                   	pop    ebp
c00200fa:	31 ed                	xor    ebp,ebp
c00200fc:	68 00 00 c8 42       	push   0x42c80000
c0020101:	50                   	push   eax
c0020102:	e8 d5 3a 00 00       	call   c0023bdc <__divsf3>
c0020107:	83 c4 10             	add    esp,0x10
c002010a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002010e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020112:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020118:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002011c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020123:	e8 60 fb ff ff       	call   c001fc88 <SoundChannel::unbuffer(float*, int, int)>
c0020128:	83 c4 20             	add    esp,0x20
c002012b:	89 c1                	mov    ecx,eax
c002012d:	39 cd                	cmp    ebp,ecx
c002012f:	7d 52                	jge    c0020183 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020131:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020135:	50                   	push   eax
c0020136:	50                   	push   eax
c0020137:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002013b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002013e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020142:	e8 d2 38 00 00       	call   c0023a19 <__mulsf3>
c0020147:	5a                   	pop    edx
c0020148:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002014c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020152:	e8 b0 3c 00 00       	call   c0023e07 <__floatsisf>
c0020157:	59                   	pop    ecx
c0020158:	5a                   	pop    edx
c0020159:	50                   	push   eax
c002015a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002015e:	e8 79 3a 00 00       	call   c0023bdc <__divsf3>
c0020163:	59                   	pop    ecx
c0020164:	5a                   	pop    edx
c0020165:	50                   	push   eax
c0020166:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002016a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002016d:	e8 84 35 00 00       	call   c00236f6 <__addsf3>
c0020172:	83 c4 10             	add    esp,0x10
c0020175:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020179:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002017d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020180:	45                   	inc    ebp
c0020181:	eb aa                	jmp    c002012d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020183:	39 cf                	cmp    edi,ecx
c0020185:	7e 02                	jle    c0020189 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020187:	89 cf                	mov    edi,ecx
c0020189:	43                   	inc    ebx
c002018a:	83 fb 20             	cmp    ebx,0x20
c002018d:	0f 85 10 ff ff ff    	jne    c00200a3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020193:	83 c4 1c             	add    esp,0x1c
c0020196:	89 f8                	mov    eax,edi
c0020198:	5b                   	pop    ebx
c0020199:	5e                   	pop    esi
c002019a:	5f                   	pop    edi
c002019b:	5d                   	pop    ebp
c002019c:	c3                   	ret    
c002019d:	90                   	nop

c002019e <PCI::open(int, int, void*)>:
c002019e:	83 ec 18             	sub    esp,0x18
c00201a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00201a7:	50                   	push   eax
c00201a8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00201ab:	31 c0                	xor    eax,eax
c00201ad:	83 c4 1c             	add    esp,0x1c
c00201b0:	c3                   	ret    
c00201b1:	90                   	nop

c00201b2 <PCI::close(int, int, void*)>:
c00201b2:	31 c0                	xor    eax,eax
c00201b4:	c3                   	ret    
c00201b5:	90                   	nop

c00201b6 <PCI::PCI()>:
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201bd:	83 ec 08             	sub    esp,0x8
c00201c0:	68 3c 8e 02 c0       	push   0xc0028e3c
c00201c5:	50                   	push   eax
c00201c6:	e8 33 2d ff ff       	call   c0012efe <Bus::Bus(char const*)>
c00201cb:	83 c4 10             	add    esp,0x10
c00201ce:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c00201d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d7:	89 10                	mov    DWORD PTR [eax],edx
c00201d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201e3:	0f b6 d0             	movzx  edx,al
c00201e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ea:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00201f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201fb:	0f b6 d0             	movzx  edx,al
c00201fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020202:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020211:	8d 50 01             	lea    edx,[eax+0x1]
c0020214:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020218:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002021e:	0f b6 d0             	movzx  edx,al
c0020221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020225:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020229:	83 c9 c0             	or     ecx,0xffffffc0
c002022c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020230:	90                   	nop
c0020231:	83 c4 0c             	add    esp,0xc
c0020234:	c3                   	ret    
c0020235:	90                   	nop

c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020236:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002023a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002023f:	89 ca                	mov    edx,ecx
c0020241:	c1 e0 10             	shl    eax,0x10
c0020244:	81 e2 fc 00 00 00    	and    edx,0xfc
c002024a:	09 d0                	or     eax,edx
c002024c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020251:	c1 e2 08             	shl    edx,0x8
c0020254:	09 d0                	or     eax,edx
c0020256:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002025b:	c1 e2 0b             	shl    edx,0xb
c002025e:	09 d0                	or     eax,edx
c0020260:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020265:	0d 00 00 00 80       	or     eax,0x80000000
c002026a:	ef                   	out    dx,eax
c002026b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020270:	ed                   	in     eax,dx
c0020271:	83 e1 02             	and    ecx,0x2
c0020274:	0f b6 c9             	movzx  ecx,cl
c0020277:	c1 e1 03             	shl    ecx,0x3
c002027a:	d3 e8                	shr    eax,cl
c002027c:	c3                   	ret    
c002027d:	90                   	nop

c002027e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002027e:	6a 00                	push   0x0
c0020280:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020285:	50                   	push   eax
c0020286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002028b:	50                   	push   eax
c002028c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020291:	50                   	push   eax
c0020292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020296:	e8 9b ff ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002029b:	83 c4 14             	add    esp,0x14
c002029e:	c3                   	ret    
c002029f:	90                   	nop

c00202a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00202a0:	6a 0e                	push   0xe
c00202a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202a7:	50                   	push   eax
c00202a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202ad:	50                   	push   eax
c00202ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202b3:	50                   	push   eax
c00202b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202b8:	e8 79 ff ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202bd:	83 c4 14             	add    esp,0x14
c00202c0:	0f b6 c0             	movzx  eax,al
c00202c3:	c3                   	ret    

c00202c4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00202c4:	55                   	push   ebp
c00202c5:	57                   	push   edi
c00202c6:	56                   	push   esi
c00202c7:	53                   	push   ebx
c00202c8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00202cd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00202d2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00202d7:	6a 0a                	push   0xa
c00202d9:	56                   	push   esi
c00202da:	55                   	push   ebp
c00202db:	57                   	push   edi
c00202dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00202e0:	e8 51 ff ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202e5:	6a 0a                	push   0xa
c00202e7:	89 c3                	mov    ebx,eax
c00202e9:	56                   	push   esi
c00202ea:	0f b6 db             	movzx  ebx,bl
c00202ed:	55                   	push   ebp
c00202ee:	57                   	push   edi
c00202ef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00202f3:	e8 3e ff ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202f8:	83 c4 28             	add    esp,0x28
c00202fb:	25 00 ff 00 00       	and    eax,0xff00
c0020300:	09 d8                	or     eax,ebx
c0020302:	5b                   	pop    ebx
c0020303:	5e                   	pop    esi
c0020304:	5f                   	pop    edi
c0020305:	5d                   	pop    ebp
c0020306:	c3                   	ret    
c0020307:	90                   	nop

c0020308 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020308:	6a 08                	push   0x8
c002030a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002030f:	50                   	push   eax
c0020310:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020315:	50                   	push   eax
c0020316:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002031b:	50                   	push   eax
c002031c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020320:	e8 11 ff ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020325:	83 c4 14             	add    esp,0x14
c0020328:	0f b6 c4             	movzx  eax,ah
c002032b:	c3                   	ret    

c002032c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002032c:	6a 08                	push   0x8
c002032e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020333:	50                   	push   eax
c0020334:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020339:	50                   	push   eax
c002033a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002033f:	50                   	push   eax
c0020340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020344:	e8 ed fe ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020349:	83 c4 14             	add    esp,0x14
c002034c:	c3                   	ret    
c002034d:	90                   	nop

c002034e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002034e:	6a 3c                	push   0x3c
c0020350:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020355:	50                   	push   eax
c0020356:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002035b:	50                   	push   eax
c002035c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020361:	50                   	push   eax
c0020362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020366:	e8 cb fe ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002036b:	83 c4 14             	add    esp,0x14
c002036e:	c3                   	ret    
c002036f:	90                   	nop

c0020370 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020370:	6a 18                	push   0x18
c0020372:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020377:	50                   	push   eax
c0020378:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002037d:	50                   	push   eax
c002037e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020383:	50                   	push   eax
c0020384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020388:	e8 a9 fe ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002038d:	83 c4 14             	add    esp,0x14
c0020390:	0f b6 c4             	movzx  eax,ah
c0020393:	c3                   	ret    

c0020394 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020394:	55                   	push   ebp
c0020395:	57                   	push   edi
c0020396:	56                   	push   esi
c0020397:	53                   	push   ebx
c0020398:	50                   	push   eax
c0020399:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002039d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00203a2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00203a7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00203ac:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00203b3:	8d 43 12             	lea    eax,[ebx+0x12]
c00203b6:	83 c3 10             	add    ebx,0x10
c00203b9:	0f b6 c0             	movzx  eax,al
c00203bc:	0f b6 db             	movzx  ebx,bl
c00203bf:	50                   	push   eax
c00203c0:	51                   	push   ecx
c00203c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00203c5:	57                   	push   edi
c00203c6:	55                   	push   ebp
c00203c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00203cb:	e8 66 fe ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00203d0:	53                   	push   ebx
c00203d1:	89 c6                	mov    esi,eax
c00203d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00203d7:	c1 e6 10             	shl    esi,0x10
c00203da:	51                   	push   ecx
c00203db:	57                   	push   edi
c00203dc:	55                   	push   ebp
c00203dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00203e1:	e8 50 fe ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00203e6:	83 c4 2c             	add    esp,0x2c
c00203e9:	0f b7 c0             	movzx  eax,ax
c00203ec:	5b                   	pop    ebx
c00203ed:	09 f0                	or     eax,esi
c00203ef:	5e                   	pop    esi
c00203f0:	5f                   	pop    edi
c00203f1:	5d                   	pop    ebp
c00203f2:	c3                   	ret    
c00203f3:	90                   	nop

c00203f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00203f4:	53                   	push   ebx
c00203f5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00203fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00203ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020403:	c1 e1 10             	shl    ecx,0x10
c0020406:	25 fc 00 00 00       	and    eax,0xfc
c002040b:	09 c1                	or     ecx,eax
c002040d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020412:	c1 e0 08             	shl    eax,0x8
c0020415:	09 c1                	or     ecx,eax
c0020417:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002041c:	c1 e0 0b             	shl    eax,0xb
c002041f:	09 c1                	or     ecx,eax
c0020421:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020427:	89 c8                	mov    eax,ecx
c0020429:	ef                   	out    dx,eax
c002042a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002042f:	ed                   	in     eax,dx
c0020430:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020435:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002043a:	74 0a                	je     c0020446 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002043c:	0f b7 d8             	movzx  ebx,ax
c002043f:	89 d0                	mov    eax,edx
c0020441:	c1 e0 10             	shl    eax,0x10
c0020444:	eb 05                	jmp    c002044b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020446:	66 31 c0             	xor    ax,ax
c0020449:	89 d3                	mov    ebx,edx
c002044b:	09 c3                	or     ebx,eax
c002044d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020452:	89 c8                	mov    eax,ecx
c0020454:	ef                   	out    dx,eax
c0020455:	ba fc 0c 00 00       	mov    edx,0xcfc
c002045a:	89 d8                	mov    eax,ebx
c002045c:	ef                   	out    dx,eax
c002045d:	5b                   	pop    ebx
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <PCI::checkBus(unsigned char)>:
c0020460:	56                   	push   esi
c0020461:	53                   	push   ebx
c0020462:	31 db                	xor    ebx,ebx
c0020464:	51                   	push   ecx
c0020465:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002046a:	52                   	push   edx
c002046b:	53                   	push   ebx
c002046c:	43                   	inc    ebx
c002046d:	56                   	push   esi
c002046e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020472:	e8 29 03 00 00       	call   c00207a0 <PCI::checkDevice(unsigned char, unsigned char)>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	83 fb 20             	cmp    ebx,0x20
c002047d:	75 eb                	jne    c002046a <PCI::checkBus(unsigned char)+0xa>
c002047f:	58                   	pop    eax
c0020480:	5b                   	pop    ebx
c0020481:	5e                   	pop    esi
c0020482:	c3                   	ret    
c0020483:	90                   	nop

c0020484 <PCI::foundDevice(PCIDeviceInfo)>:
c0020484:	55                   	push   ebp
c0020485:	57                   	push   edi
c0020486:	56                   	push   esi
c0020487:	53                   	push   ebx
c0020488:	83 ec 1c             	sub    esp,0x1c
c002048b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002048f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020495:	0f 84 51 01 00 00    	je     c00205ec <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002049b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002049f:	66 81 f9 06 04       	cmp    cx,0x406
c00204a4:	75 2c                	jne    c00204d2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00204a6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00204ab:	50                   	push   eax
c00204ac:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00204b1:	50                   	push   eax
c00204b2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00204b7:	50                   	push   eax
c00204b8:	56                   	push   esi
c00204b9:	e8 b2 fe ff ff       	call   c0020370 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00204be:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00204c2:	0f b6 c0             	movzx  eax,al
c00204c5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00204c9:	83 c4 2c             	add    esp,0x2c
c00204cc:	5b                   	pop    ebx
c00204cd:	5e                   	pop    esi
c00204ce:	5f                   	pop    edi
c00204cf:	5d                   	pop    ebp
c00204d0:	eb 8e                	jmp    c0020460 <PCI::checkBus(unsigned char)>
c00204d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00204d6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00204dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00204e4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00204e8:	88 d3                	mov    bl,dl
c00204ea:	85 c0                	test   eax,eax
c00204ec:	74 33                	je     c0020521 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00204ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00204f1:	85 d2                	test   edx,edx
c00204f3:	74 28                	je     c002051d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00204f5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00204fb:	31 ef                	xor    edi,ebp
c00204fd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020503:	75 18                	jne    c002051d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020505:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020509:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002050f:	75 0c                	jne    c002051d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020511:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020517:	0f 84 cf 00 00 00    	je     c00205ec <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002051d:	8b 00                	mov    eax,DWORD PTR [eax]
c002051f:	eb c9                	jmp    c00204ea <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020521:	66 81 f9 01 06       	cmp    cx,0x601
c0020526:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002052a:	75 18                	jne    c0020544 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c002052c:	83 ec 0c             	sub    esp,0xc
c002052f:	68 58 01 00 00       	push   0x158
c0020534:	e8 4f 1c ff ff       	call   c0012188 <operator new(unsigned long)>
c0020539:	59                   	pop    ecx
c002053a:	89 c5                	mov    ebp,eax
c002053c:	5f                   	pop    edi
c002053d:	68 44 8e 02 c0       	push   0xc0028e44
c0020542:	eb 7d                	jmp    c00205c1 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020544:	66 81 f9 01 01       	cmp    cx,0x101
c0020549:	75 60                	jne    c00205ab <PCI::foundDevice(PCIDeviceInfo)+0x127>
c002054b:	83 ec 0c             	sub    esp,0xc
c002054e:	68 70 02 00 00       	push   0x270
c0020553:	e8 30 1c ff ff       	call   c0012188 <operator new(unsigned long)>
c0020558:	89 04 24             	mov    DWORD PTR [esp],eax
c002055b:	89 c5                	mov    ebp,eax
c002055d:	e8 02 03 00 00       	call   c0020864 <IDE::IDE()>
c0020562:	58                   	pop    eax
c0020563:	5a                   	pop    edx
c0020564:	55                   	push   ebp
c0020565:	56                   	push   esi
c0020566:	e8 17 31 ff ff       	call   c0013682 <Device::addChild(Device*)>
c002056b:	83 ec 1c             	sub    esp,0x1c
c002056e:	b9 09 00 00 00       	mov    ecx,0x9
c0020573:	fc                   	cld    
c0020574:	89 e7                	mov    edi,esp
c0020576:	89 de                	mov    esi,ebx
c0020578:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002057a:	55                   	push   ebp
c002057b:	e8 dc 2f ff ff       	call   c001355c <Device::preOpenPCI(PCIDeviceInfo)>
c0020580:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020583:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020587:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002058f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020597:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002059f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205a2:	83 c4 4c             	add    esp,0x4c
c00205a5:	5b                   	pop    ebx
c00205a6:	5e                   	pop    esi
c00205a7:	5f                   	pop    edi
c00205a8:	5d                   	pop    ebp
c00205a9:	ff e0                	jmp    eax
c00205ab:	83 ec 0c             	sub    esp,0xc
c00205ae:	68 58 01 00 00       	push   0x158
c00205b3:	e8 d0 1b ff ff       	call   c0012188 <operator new(unsigned long)>
c00205b8:	59                   	pop    ecx
c00205b9:	89 c5                	mov    ebp,eax
c00205bb:	5f                   	pop    edi
c00205bc:	68 63 8e 02 c0       	push   0xc0028e63
c00205c1:	55                   	push   ebp
c00205c2:	e8 a7 33 ff ff       	call   c001396e <DriverlessDevice::DriverlessDevice(char const*)>
c00205c7:	58                   	pop    eax
c00205c8:	5a                   	pop    edx
c00205c9:	55                   	push   ebp
c00205ca:	56                   	push   esi
c00205cb:	e8 b2 30 ff ff       	call   c0013682 <Device::addChild(Device*)>
c00205d0:	b9 09 00 00 00       	mov    ecx,0x9
c00205d5:	fc                   	cld    
c00205d6:	89 df                	mov    edi,ebx
c00205d8:	89 de                	mov    esi,ebx
c00205da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00205dc:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00205e0:	83 c4 2c             	add    esp,0x2c
c00205e3:	5b                   	pop    ebx
c00205e4:	5e                   	pop    esi
c00205e5:	5f                   	pop    edi
c00205e6:	5d                   	pop    ebp
c00205e7:	e9 70 2f ff ff       	jmp    c001355c <Device::preOpenPCI(PCIDeviceInfo)>
c00205ec:	83 c4 1c             	add    esp,0x1c
c00205ef:	5b                   	pop    ebx
c00205f0:	5e                   	pop    esi
c00205f1:	5f                   	pop    edi
c00205f2:	5d                   	pop    ebp
c00205f3:	c3                   	ret    

c00205f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00205f4:	55                   	push   ebp
c00205f5:	57                   	push   edi
c00205f6:	56                   	push   esi
c00205f7:	53                   	push   ebx
c00205f8:	83 ec 5c             	sub    esp,0x5c
c00205fb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00205ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020603:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020607:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002060c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020610:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020614:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020619:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002061d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020622:	6a 0c                	push   0xc
c0020624:	55                   	push   ebp
c0020625:	53                   	push   ebx
c0020626:	57                   	push   edi
c0020627:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002062e:	e8 03 fc ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020633:	55                   	push   ebp
c0020634:	53                   	push   ebx
c0020635:	57                   	push   edi
c0020636:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002063d:	e8 82 fc ff ff       	call   c00202c4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020642:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020647:	83 c4 24             	add    esp,0x24
c002064a:	55                   	push   ebp
c002064b:	53                   	push   ebx
c002064c:	57                   	push   edi
c002064d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020651:	e8 f8 fc ff ff       	call   c002034e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020656:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002065a:	6a 3c                	push   0x3c
c002065c:	55                   	push   ebp
c002065d:	53                   	push   ebx
c002065e:	57                   	push   edi
c002065f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020666:	e8 cb fb ff ff       	call   c0020236 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002066b:	0f b6 c4             	movzx  eax,ah
c002066e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020672:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020676:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002067a:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c002067f:	83 c4 24             	add    esp,0x24
c0020682:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020688:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c002068f:	74 6c                	je     c00206fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020691:	31 f6                	xor    esi,esi
c0020693:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c0020699:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002069f:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00206a5:	7e 56                	jle    c00206fd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00206a7:	8d 14 f2             	lea    edx,[edx+esi*8]
c00206aa:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00206b1:	39 cb                	cmp    ebx,ecx
c00206b3:	75 45                	jne    c00206fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00206b5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00206bc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00206c0:	75 38                	jne    c00206fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00206c2:	83 ec 0c             	sub    esp,0xc
c00206c5:	68 7d 8e 02 c0       	push   0xc0028e7d
c00206ca:	e8 a8 1b ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00206cf:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c00206d5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00206db:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00206e3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00206e7:	52                   	push   edx
c00206e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00206ec:	53                   	push   ebx
c00206ed:	68 a2 8e 02 c0       	push   0xc0028ea2
c00206f2:	e8 80 1b ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00206f7:	83 c4 20             	add    esp,0x20
c00206fa:	46                   	inc    esi
c00206fb:	eb 96                	jmp    c0020693 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00206fd:	31 d2                	xor    edx,edx
c00206ff:	83 ec 0c             	sub    esp,0xc
c0020702:	55                   	push   ebp
c0020703:	53                   	push   ebx
c0020704:	57                   	push   edi
c0020705:	52                   	push   edx
c0020706:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002070a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020711:	e8 7e fc ff ff       	call   c0020394 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020716:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002071a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002071e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020722:	42                   	inc    edx
c0020723:	83 c4 20             	add    esp,0x20
c0020726:	83 fa 06             	cmp    edx,0x6
c0020729:	75 d4                	jne    c00206ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002072b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002072f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020733:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020737:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002073b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002073f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020743:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020748:	86 e0                	xchg   al,ah
c002074a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002074f:	55                   	push   ebp
c0020750:	53                   	push   ebx
c0020751:	57                   	push   edi
c0020752:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020756:	e8 ad fb ff ff       	call   c0020308 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002075b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002075f:	55                   	push   ebp
c0020760:	53                   	push   ebx
c0020761:	57                   	push   edi
c0020762:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020769:	e8 10 fb ff ff       	call   c002027e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020776:	b9 09 00 00 00       	mov    ecx,0x9
c002077b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002077f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020783:	fc                   	cld    
c0020784:	89 e7                	mov    edi,esp
c0020786:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020788:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002078f:	e8 f0 fc ff ff       	call   c0020484 <PCI::foundDevice(PCIDeviceInfo)>
c0020794:	81 c4 8c 00 00 00    	add    esp,0x8c
c002079a:	5b                   	pop    ebx
c002079b:	5e                   	pop    esi
c002079c:	5f                   	pop    edi
c002079d:	5d                   	pop    ebp
c002079e:	c3                   	ret    
c002079f:	90                   	nop

c00207a0 <PCI::checkDevice(unsigned char, unsigned char)>:
c00207a0:	55                   	push   ebp
c00207a1:	57                   	push   edi
c00207a2:	56                   	push   esi
c00207a3:	53                   	push   ebx
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00207ab:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00207b0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00207b5:	6a 00                	push   0x0
c00207b7:	56                   	push   esi
c00207b8:	57                   	push   edi
c00207b9:	55                   	push   ebp
c00207ba:	e8 bf fa ff ff       	call   c002027e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00207bf:	6a 00                	push   0x0
c00207c1:	56                   	push   esi
c00207c2:	57                   	push   edi
c00207c3:	55                   	push   ebp
c00207c4:	e8 2b fe ff ff       	call   c00205f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00207c9:	83 c4 20             	add    esp,0x20
c00207cc:	6a 00                	push   0x0
c00207ce:	56                   	push   esi
c00207cf:	57                   	push   edi
c00207d0:	55                   	push   ebp
c00207d1:	e8 ca fa ff ff       	call   c00202a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00207d6:	83 c4 10             	add    esp,0x10
c00207d9:	84 c0                	test   al,al
c00207db:	79 27                	jns    c0020804 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00207dd:	bb 01 00 00 00       	mov    ebx,0x1
c00207e2:	53                   	push   ebx
c00207e3:	56                   	push   esi
c00207e4:	57                   	push   edi
c00207e5:	55                   	push   ebp
c00207e6:	e8 93 fa ff ff       	call   c002027e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00207eb:	83 c4 10             	add    esp,0x10
c00207ee:	66 40                	inc    ax
c00207f0:	74 0c                	je     c00207fe <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00207f2:	53                   	push   ebx
c00207f3:	56                   	push   esi
c00207f4:	57                   	push   edi
c00207f5:	55                   	push   ebp
c00207f6:	e8 f9 fd ff ff       	call   c00205f4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00207fb:	83 c4 10             	add    esp,0x10
c00207fe:	43                   	inc    ebx
c00207ff:	83 fb 08             	cmp    ebx,0x8
c0020802:	75 de                	jne    c00207e2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020804:	83 c4 0c             	add    esp,0xc
c0020807:	5b                   	pop    ebx
c0020808:	5e                   	pop    esi
c0020809:	5f                   	pop    edi
c002080a:	5d                   	pop    ebp
c002080b:	c3                   	ret    

c002080c <PCI::detect()>:
c002080c:	56                   	push   esi
c002080d:	53                   	push   ebx
c002080e:	53                   	push   ebx
c002080f:	31 db                	xor    ebx,ebx
c0020811:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020815:	6a 00                	push   0x0
c0020817:	6a 00                	push   0x0
c0020819:	6a 00                	push   0x0
c002081b:	56                   	push   esi
c002081c:	e8 7f fa ff ff       	call   c00202a0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020821:	83 c4 10             	add    esp,0x10
c0020824:	a8 80                	test   al,0x80
c0020826:	75 21                	jne    c0020849 <PCI::detect()+0x3d>
c0020828:	51                   	push   ecx
c0020829:	51                   	push   ecx
c002082a:	6a 00                	push   0x0
c002082c:	56                   	push   esi
c002082d:	e8 2e fc ff ff       	call   c0020460 <PCI::checkBus(unsigned char)>
c0020832:	83 c4 10             	add    esp,0x10
c0020835:	eb 24                	jmp    c002085b <PCI::detect()+0x4f>
c0020837:	52                   	push   edx
c0020838:	52                   	push   edx
c0020839:	53                   	push   ebx
c002083a:	43                   	inc    ebx
c002083b:	56                   	push   esi
c002083c:	e8 1f fc ff ff       	call   c0020460 <PCI::checkBus(unsigned char)>
c0020841:	83 c4 10             	add    esp,0x10
c0020844:	83 fb 08             	cmp    ebx,0x8
c0020847:	74 12                	je     c002085b <PCI::detect()+0x4f>
c0020849:	53                   	push   ebx
c002084a:	6a 00                	push   0x0
c002084c:	6a 00                	push   0x0
c002084e:	56                   	push   esi
c002084f:	e8 2a fa ff ff       	call   c002027e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020854:	83 c4 10             	add    esp,0x10
c0020857:	66 40                	inc    ax
c0020859:	74 dc                	je     c0020837 <PCI::detect()+0x2b>
c002085b:	58                   	pop    eax
c002085c:	5b                   	pop    ebx
c002085d:	5e                   	pop    esi
c002085e:	c3                   	ret    
c002085f:	90                   	nop

c0020860 <IDE::close(int, int, void*)>:
c0020860:	83 c8 ff             	or     eax,0xffffffff
c0020863:	c3                   	ret    

c0020864 <IDE::IDE()>:
c0020864:	83 ec 0c             	sub    esp,0xc
c0020867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002086b:	83 ec 08             	sub    esp,0x8
c002086e:	68 ec 8e 02 c0       	push   0xc0028eec
c0020873:	50                   	push   eax
c0020874:	e8 8b 31 ff ff       	call   c0013a04 <HardDiskController::HardDiskController(char const*)>
c0020879:	83 c4 10             	add    esp,0x10
c002087c:	ba 2c 91 02 c0       	mov    edx,0xc002912c
c0020881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020885:	89 10                	mov    DWORD PTR [eax],edx
c0020887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002088b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020892:	90                   	nop
c0020893:	83 c4 0c             	add    esp,0xc
c0020896:	c3                   	ret    
c0020897:	90                   	nop

c0020898 <IDE::prepareInterrupt(unsigned char)>:
c0020898:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002089d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00208a1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00208a9:	c3                   	ret    

c00208aa <selectDrive(unsigned char, unsigned char)>:
c00208aa:	c3                   	ret    
c00208ab:	90                   	nop

c00208ac <IDE::getBase(unsigned char)>:
c00208ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00208b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208b5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00208bd:	c3                   	ret    

c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00208be:	55                   	push   ebp
c00208bf:	57                   	push   edi
c00208c0:	56                   	push   esi
c00208c1:	53                   	push   ebx
c00208c2:	83 ec 1c             	sub    esp,0x1c
c00208c5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00208c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208cd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00208d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208d8:	80 f9 03             	cmp    cl,0x3
c00208db:	77 51                	ja     c002092e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00208dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208e1:	0f b6 f2             	movzx  esi,dl
c00208e4:	0f b6 db             	movzx  ebx,bl
c00208e7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208ea:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00208ee:	83 ca 80             	or     edx,0xffffff80
c00208f1:	0f b6 d2             	movzx  edx,dl
c00208f4:	52                   	push   edx
c00208f5:	6a 0c                	push   0xc
c00208f7:	56                   	push   esi
c00208f8:	57                   	push   edi
c00208f9:	e8 c0 ff ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208fe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020903:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020907:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002090b:	ee                   	out    dx,al
c002090c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020911:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020915:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0020919:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002091d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020925:	83 c4 2c             	add    esp,0x2c
c0020928:	5b                   	pop    ebx
c0020929:	5e                   	pop    esi
c002092a:	5f                   	pop    edi
c002092b:	5d                   	pop    ebp
c002092c:	eb 90                	jmp    c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002092e:	80 fb 07             	cmp    bl,0x7
c0020931:	77 12                	ja     c0020945 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020933:	0f b6 d2             	movzx  edx,dl
c0020936:	0f b6 db             	movzx  ebx,bl
c0020939:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020941:	89 da                	mov    edx,ebx
c0020943:	eb 2f                	jmp    c0020974 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020945:	80 fb 0d             	cmp    bl,0xd
c0020948:	77 13                	ja     c002095d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002094a:	0f b6 d2             	movzx  edx,dl
c002094d:	0f b6 db             	movzx  ebx,bl
c0020950:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020957:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002095b:	eb 17                	jmp    c0020974 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002095d:	80 fb 15             	cmp    bl,0x15
c0020960:	77 13                	ja     c0020975 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020962:	0f b6 d2             	movzx  edx,dl
c0020965:	0f b6 db             	movzx  ebx,bl
c0020968:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020970:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020974:	ee                   	out    dx,al
c0020975:	83 c4 1c             	add    esp,0x1c
c0020978:	5b                   	pop    ebx
c0020979:	5e                   	pop    esi
c002097a:	5f                   	pop    edi
c002097b:	5d                   	pop    ebp
c002097c:	c3                   	ret    
c002097d:	90                   	nop

c002097e <IDE::read(unsigned char, unsigned char)>:
c002097e:	55                   	push   ebp
c002097f:	57                   	push   edi
c0020980:	56                   	push   esi
c0020981:	53                   	push   ebx
c0020982:	83 ec 1c             	sub    esp,0x1c
c0020985:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020989:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002098d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020990:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020994:	3c 03                	cmp    al,0x3
c0020996:	77 43                	ja     c00209db <IDE::read(unsigned char, unsigned char)+0x5d>
c0020998:	0f b6 f2             	movzx  esi,dl
c002099b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002099e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00209a2:	83 c8 80             	or     eax,0xffffff80
c00209a5:	0f b6 c0             	movzx  eax,al
c00209a8:	50                   	push   eax
c00209a9:	6a 0c                	push   0xc
c00209ab:	56                   	push   esi
c00209ac:	57                   	push   edi
c00209ad:	e8 0c ff ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209b2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00209b7:	0f b6 c3             	movzx  eax,bl
c00209ba:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00209be:	ec                   	in     al,dx
c00209bf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00209c3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00209c8:	52                   	push   edx
c00209c9:	6a 0c                	push   0xc
c00209cb:	56                   	push   esi
c00209cc:	57                   	push   edi
c00209cd:	e8 ec fe ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209d2:	83 c4 20             	add    esp,0x20
c00209d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00209d9:	eb 49                	jmp    c0020a24 <IDE::read(unsigned char, unsigned char)+0xa6>
c00209db:	80 fb 07             	cmp    bl,0x7
c00209de:	77 12                	ja     c00209f2 <IDE::read(unsigned char, unsigned char)+0x74>
c00209e0:	0f b6 d2             	movzx  edx,dl
c00209e3:	0f b6 c3             	movzx  eax,bl
c00209e6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00209ee:	89 c2                	mov    edx,eax
c00209f0:	eb 31                	jmp    c0020a23 <IDE::read(unsigned char, unsigned char)+0xa5>
c00209f2:	80 fb 0d             	cmp    bl,0xd
c00209f5:	77 13                	ja     c0020a0a <IDE::read(unsigned char, unsigned char)+0x8c>
c00209f7:	0f b6 d2             	movzx  edx,dl
c00209fa:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020a01:	0f b6 d3             	movzx  edx,bl
c0020a04:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0020a08:	eb 19                	jmp    c0020a23 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020a0a:	31 c0                	xor    eax,eax
c0020a0c:	80 fb 15             	cmp    bl,0x15
c0020a0f:	77 13                	ja     c0020a24 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020a11:	0f b6 d2             	movzx  edx,dl
c0020a14:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020a1c:	0f b6 d3             	movzx  edx,bl
c0020a1f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020a23:	ec                   	in     al,dx
c0020a24:	83 c4 1c             	add    esp,0x1c
c0020a27:	5b                   	pop    ebx
c0020a28:	5e                   	pop    esi
c0020a29:	5f                   	pop    edi
c0020a2a:	5d                   	pop    ebp
c0020a2b:	c3                   	ret    

c0020a2c <IDE::waitInterrupt(unsigned char)>:
c0020a2c:	55                   	push   ebp
c0020a2d:	57                   	push   edi
c0020a2e:	56                   	push   esi
c0020a2f:	53                   	push   ebx
c0020a30:	31 db                	xor    ebx,ebx
c0020a32:	83 ec 0c             	sub    esp,0xc
c0020a35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020a39:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020a3e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020a46:	89 e8                	mov    eax,ebp
c0020a48:	84 c0                	test   al,al
c0020a4a:	75 34                	jne    c0020a80 <IDE::waitInterrupt(unsigned char)+0x54>
c0020a4c:	52                   	push   edx
c0020a4d:	6a 0c                	push   0xc
c0020a4f:	56                   	push   esi
c0020a50:	57                   	push   edi
c0020a51:	e8 28 ff ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020a56:	83 c4 10             	add    esp,0x10
c0020a59:	a8 01                	test   al,0x1
c0020a5b:	75 2b                	jne    c0020a88 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020a5d:	f6 c3 04             	test   bl,0x4
c0020a60:	75 16                	jne    c0020a78 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a62:	83 fb 32             	cmp    ebx,0x32
c0020a65:	7e 11                	jle    c0020a78 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a67:	50                   	push   eax
c0020a68:	50                   	push   eax
c0020a69:	6a 00                	push   0x0
c0020a6b:	68 80 96 98 00       	push   0x989680
c0020a70:	e8 fd b4 ff ff       	call   c001bf72 <nanoSleep(unsigned long long)>
c0020a75:	83 c4 10             	add    esp,0x10
c0020a78:	83 fb 3c             	cmp    ebx,0x3c
c0020a7b:	74 0b                	je     c0020a88 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020a7d:	43                   	inc    ebx
c0020a7e:	eb be                	jmp    c0020a3e <IDE::waitInterrupt(unsigned char)+0x12>
c0020a80:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020a88:	83 c4 0c             	add    esp,0xc
c0020a8b:	89 e8                	mov    eax,ebp
c0020a8d:	5b                   	pop    ebx
c0020a8e:	5e                   	pop    esi
c0020a8f:	5f                   	pop    edi
c0020a90:	5d                   	pop    ebp
c0020a91:	c3                   	ret    

c0020a92 <ideChannel0IRQHandler(regs*, void*)>:
c0020a92:	83 ec 10             	sub    esp,0x10
c0020a95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a99:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020aa0:	6a 07                	push   0x7
c0020aa2:	6a 00                	push   0x0
c0020aa4:	50                   	push   eax
c0020aa5:	e8 d4 fe ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020aaa:	83 c4 1c             	add    esp,0x1c
c0020aad:	c3                   	ret    

c0020aae <ideChannel1IRQHandler(regs*, void*)>:
c0020aae:	83 ec 10             	sub    esp,0x10
c0020ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ab5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020abc:	6a 07                	push   0x7
c0020abe:	6a 01                	push   0x1
c0020ac0:	50                   	push   eax
c0020ac1:	e8 b8 fe ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020ac6:	83 c4 1c             	add    esp,0x1c
c0020ac9:	c3                   	ret    

c0020aca <IDE::enableIRQs(unsigned char, bool)>:
c0020aca:	57                   	push   edi
c0020acb:	56                   	push   esi
c0020acc:	be 04 00 00 00       	mov    esi,0x4
c0020ad1:	53                   	push   ebx
c0020ad2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020adb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020ae0:	0f 94 c0             	sete   al
c0020ae3:	d1 e0                	shl    eax,1
c0020ae5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020aec:	0f b6 c0             	movzx  eax,al
c0020aef:	50                   	push   eax
c0020af0:	6a 0c                	push   0xc
c0020af2:	57                   	push   edi
c0020af3:	53                   	push   ebx
c0020af4:	e8 c5 fd ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020af9:	83 c4 10             	add    esp,0x10
c0020afc:	50                   	push   eax
c0020afd:	6a 0c                	push   0xc
c0020aff:	57                   	push   edi
c0020b00:	53                   	push   ebx
c0020b01:	e8 78 fe ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020b06:	83 c4 10             	add    esp,0x10
c0020b09:	4e                   	dec    esi
c0020b0a:	75 f0                	jne    c0020afc <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020b0c:	5b                   	pop    ebx
c0020b0d:	5e                   	pop    esi
c0020b0e:	5f                   	pop    edi
c0020b0f:	c3                   	ret    

c0020b10 <IDE::open(int, int, void*)>:
c0020b10:	55                   	push   ebp
c0020b11:	57                   	push   edi
c0020b12:	56                   	push   esi
c0020b13:	53                   	push   ebx
c0020b14:	83 ec 1c             	sub    esp,0x1c
c0020b17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020b1b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020b24:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020b2d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020b34:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020b3b:	0f 85 b0 02 00 00    	jne    c0020df1 <IDE::open(int, int, void*)+0x2e1>
c0020b41:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020b47:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020b4b:	83 e0 7f             	and    eax,0x7f
c0020b4e:	3c 05                	cmp    al,0x5
c0020b50:	74 04                	je     c0020b56 <IDE::open(int, int, void*)+0x46>
c0020b52:	3c 0f                	cmp    al,0xf
c0020b54:	75 32                	jne    c0020b88 <IDE::open(int, int, void*)+0x78>
c0020b56:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020b5c:	83 e0 fc             	and    eax,0xfffffffc
c0020b5f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020b66:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020b6c:	83 e0 fc             	and    eax,0xfffffffc
c0020b6f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020b76:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020b7c:	83 e0 fc             	and    eax,0xfffffffc
c0020b7f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020b86:	eb 14                	jmp    c0020b9c <IDE::open(int, int, void*)+0x8c>
c0020b88:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020b92:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020b9c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020ba3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020baa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bae:	89 c6                	mov    esi,eax
c0020bb0:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020bb5:	c1 e6 10             	shl    esi,0x10
c0020bb8:	89 e8                	mov    eax,ebp
c0020bba:	89 fa                	mov    edx,edi
c0020bbc:	c1 e0 0b             	shl    eax,0xb
c0020bbf:	09 f0                	or     eax,esi
c0020bc1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020bc8:	c1 e6 08             	shl    esi,0x8
c0020bcb:	09 c6                	or     esi,eax
c0020bcd:	89 f0                	mov    eax,esi
c0020bcf:	0d 08 00 00 80       	or     eax,0x80000008
c0020bd4:	ef                   	out    dx,eax
c0020bd5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020bda:	89 ca                	mov    edx,ecx
c0020bdc:	ed                   	in     eax,dx
c0020bdd:	c1 e8 10             	shr    eax,0x10
c0020be0:	3d ff ff 00 00       	cmp    eax,0xffff
c0020be5:	0f 84 f5 00 00 00    	je     c0020ce0 <IDE::open(int, int, void*)+0x1d0>
c0020beb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020bf1:	89 fa                	mov    edx,edi
c0020bf3:	89 f0                	mov    eax,esi
c0020bf5:	ef                   	out    dx,eax
c0020bf6:	b0 fe                	mov    al,0xfe
c0020bf8:	89 ca                	mov    edx,ecx
c0020bfa:	ee                   	out    dx,al
c0020bfb:	89 f0                	mov    eax,esi
c0020bfd:	89 fa                	mov    edx,edi
c0020bff:	ef                   	out    dx,eax
c0020c00:	89 ca                	mov    edx,ecx
c0020c02:	ed                   	in     eax,dx
c0020c03:	3c fe                	cmp    al,0xfe
c0020c05:	0f 85 a9 00 00 00    	jne    c0020cb4 <IDE::open(int, int, void*)+0x1a4>
c0020c0b:	8b 15 c8 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a5c8
c0020c11:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020c18:	74 33                	je     c0020c4d <IDE::open(int, int, void*)+0x13d>
c0020c1a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020c20:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020c24:	40                   	inc    eax
c0020c25:	83 ec 0c             	sub    esp,0xc
c0020c28:	0f b6 c0             	movzx  eax,al
c0020c2b:	50                   	push   eax
c0020c2c:	55                   	push   ebp
c0020c2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c31:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020c37:	51                   	push   ecx
c0020c38:	e8 f9 62 ff ff       	call   c0016f36 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020c3d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020c42:	83 c4 1c             	add    esp,0x1c
c0020c45:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020c4b:	eb 0a                	jmp    c0020c57 <IDE::open(int, int, void*)+0x147>
c0020c4d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020c57:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020c5e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020c65:	c1 e1 10             	shl    ecx,0x10
c0020c68:	c1 e0 08             	shl    eax,0x8
c0020c6b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020c70:	09 c1                	or     ecx,eax
c0020c72:	89 fa                	mov    edx,edi
c0020c74:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020c7b:	c1 e0 0b             	shl    eax,0xb
c0020c7e:	09 c1                	or     ecx,eax
c0020c80:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020c86:	89 c8                	mov    eax,ecx
c0020c88:	ef                   	out    dx,eax
c0020c89:	be fc 0c 00 00       	mov    esi,0xcfc
c0020c8e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020c94:	89 f2                	mov    edx,esi
c0020c96:	ee                   	out    dx,al
c0020c97:	89 c8                	mov    eax,ecx
c0020c99:	89 fa                	mov    edx,edi
c0020c9b:	ef                   	out    dx,eax
c0020c9c:	89 f2                	mov    edx,esi
c0020c9e:	ed                   	in     eax,dx
c0020c9f:	0f b6 c0             	movzx  eax,al
c0020ca2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020ca8:	74 46                	je     c0020cf0 <IDE::open(int, int, void*)+0x1e0>
c0020caa:	83 ec 0c             	sub    esp,0xc
c0020cad:	68 04 8f 02 c0       	push   0xc0028f04
c0020cb2:	eb 34                	jmp    c0020ce8 <IDE::open(int, int, void*)+0x1d8>
c0020cb4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020cbd:	75 17                	jne    c0020cd6 <IDE::open(int, int, void*)+0x1c6>
c0020cbf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020cc4:	74 07                	je     c0020ccd <IDE::open(int, int, void*)+0x1bd>
c0020cc6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020ccb:	75 09                	jne    c0020cd6 <IDE::open(int, int, void*)+0x1c6>
c0020ccd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020cd4:	eb 1a                	jmp    c0020cf0 <IDE::open(int, int, void*)+0x1e0>
c0020cd6:	83 ec 0c             	sub    esp,0xc
c0020cd9:	68 0c 8f 02 c0       	push   0xc0028f0c
c0020cde:	eb 08                	jmp    c0020ce8 <IDE::open(int, int, void*)+0x1d8>
c0020ce0:	83 ec 0c             	sub    esp,0xc
c0020ce3:	68 3d 8f 02 c0       	push   0xc0028f3d
c0020ce8:	e8 ea 7d ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0020ced:	83 c4 10             	add    esp,0x10
c0020cf0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020cf7:	79 1a                	jns    c0020d13 <IDE::open(int, int, void*)+0x203>
c0020cf9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020cff:	83 e0 fc             	and    eax,0xfffffffc
c0020d02:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020d09:	83 c0 08             	add    eax,0x8
c0020d0c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020d13:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020d19:	89 c2                	mov    edx,eax
c0020d1b:	83 e2 0f             	and    edx,0xf
c0020d1e:	66 83 fa 08          	cmp    dx,0x8
c0020d22:	75 0a                	jne    c0020d2e <IDE::open(int, int, void*)+0x21e>
c0020d24:	83 e8 02             	sub    eax,0x2
c0020d27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020d2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020d34:	89 c2                	mov    edx,eax
c0020d36:	83 e2 0f             	and    edx,0xf
c0020d39:	66 83 fa 08          	cmp    dx,0x8
c0020d3d:	75 0a                	jne    c0020d49 <IDE::open(int, int, void*)+0x239>
c0020d3f:	83 e8 02             	sub    eax,0x2
c0020d42:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020d49:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020d50:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020d57:	89 d0                	mov    eax,edx
c0020d59:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d5c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d60:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020d64:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020d67:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d6c:	0f b6 c9             	movzx  ecx,cl
c0020d6f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020d76:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020d79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020d7d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020d81:	8d 50 02             	lea    edx,[eax+0x2]
c0020d84:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020d89:	0f b6 d2             	movzx  edx,dl
c0020d8c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020d92:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d95:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d99:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020d9d:	8d 48 03             	lea    ecx,[eax+0x3]
c0020da0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020da5:	0f b6 c9             	movzx  ecx,cl
c0020da8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020dae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020db1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020db5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020db9:	8d 50 04             	lea    edx,[eax+0x4]
c0020dbc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020dc2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020dc7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020dce:	66 85 f6             	test   si,si
c0020dd1:	74 3e                	je     c0020e11 <IDE::open(int, int, void*)+0x301>
c0020dd3:	0f b6 d2             	movzx  edx,dl
c0020dd6:	83 c0 05             	add    eax,0x5
c0020dd9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020ddc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020de0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020de4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020dea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020def:	eb 20                	jmp    c0020e11 <IDE::open(int, int, void*)+0x301>
c0020df1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020dfb:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020e05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020e0c:	e9 02 ff ff ff       	jmp    c0020d13 <IDE::open(int, int, void*)+0x203>
c0020e11:	52                   	push   edx
c0020e12:	52                   	push   edx
c0020e13:	6a 00                	push   0x0
c0020e15:	53                   	push   ebx
c0020e16:	e8 7d fa ff ff       	call   c0020898 <IDE::prepareInterrupt(unsigned char)>
c0020e1b:	59                   	pop    ecx
c0020e1c:	5e                   	pop    esi
c0020e1d:	6a 01                	push   0x1
c0020e1f:	53                   	push   ebx
c0020e20:	e8 73 fa ff ff       	call   c0020898 <IDE::prepareInterrupt(unsigned char)>
c0020e25:	83 c4 0c             	add    esp,0xc
c0020e28:	6a 00                	push   0x0
c0020e2a:	6a 00                	push   0x0
c0020e2c:	53                   	push   ebx
c0020e2d:	e8 98 fc ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c0020e32:	83 c4 0c             	add    esp,0xc
c0020e35:	6a 00                	push   0x0
c0020e37:	6a 01                	push   0x1
c0020e39:	53                   	push   ebx
c0020e3a:	e8 8b fc ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c0020e3f:	83 c4 10             	add    esp,0x10
c0020e42:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020e49:	74 40                	je     c0020e8b <IDE::open(int, int, void*)+0x37b>
c0020e4b:	83 ec 0c             	sub    esp,0xc
c0020e4e:	68 67 8f 02 c0       	push   0xc0028f67
c0020e53:	e8 1f 14 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0020e58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e5b:	6a 01                	push   0x1
c0020e5d:	68 92 0a 02 c0       	push   0xc0020a92
c0020e62:	6a 0e                	push   0xe
c0020e64:	53                   	push   ebx
c0020e65:	e8 6c 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e6a:	83 c4 14             	add    esp,0x14
c0020e6d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020e73:	53                   	push   ebx
c0020e74:	6a 01                	push   0x1
c0020e76:	68 ae 0a 02 c0       	push   0xc0020aae
c0020e7b:	6a 0f                	push   0xf
c0020e7d:	53                   	push   ebx
c0020e7e:	e8 53 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e83:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020e89:	eb 4a                	jmp    c0020ed5 <IDE::open(int, int, void*)+0x3c5>
c0020e8b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020e95:	50                   	push   eax
c0020e96:	6a 0f                	push   0xf
c0020e98:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020e9e:	68 83 8f 02 c0       	push   0xc0028f83
c0020ea3:	e8 cf 13 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0020ea8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020eab:	6a 00                	push   0x0
c0020ead:	68 92 0a 02 c0       	push   0xc0020a92
c0020eb2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020eb8:	53                   	push   ebx
c0020eb9:	e8 18 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ebe:	83 c4 14             	add    esp,0x14
c0020ec1:	53                   	push   ebx
c0020ec2:	6a 00                	push   0x0
c0020ec4:	68 ae 0a 02 c0       	push   0xc0020aae
c0020ec9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020ecf:	53                   	push   ebx
c0020ed0:	e8 01 27 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ed7:	83 c4 20             	add    esp,0x20
c0020eda:	83 ec 0c             	sub    esp,0xc
c0020edd:	53                   	push   ebx
c0020ede:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020ee1:	83 c4 0c             	add    esp,0xc
c0020ee4:	6a 07                	push   0x7
c0020ee6:	6a 00                	push   0x0
c0020ee8:	53                   	push   ebx
c0020ee9:	e8 90 fa ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020eee:	83 c4 0c             	add    esp,0xc
c0020ef1:	6a 07                	push   0x7
c0020ef3:	6a 01                	push   0x1
c0020ef5:	53                   	push   ebx
c0020ef6:	e8 83 fa ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0020efb:	83 c4 0c             	add    esp,0xc
c0020efe:	6a 01                	push   0x1
c0020f00:	6a 00                	push   0x0
c0020f02:	53                   	push   ebx
c0020f03:	e8 c2 fb ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c0020f08:	83 c4 0c             	add    esp,0xc
c0020f0b:	6a 01                	push   0x1
c0020f0d:	6a 01                	push   0x1
c0020f0f:	53                   	push   ebx
c0020f10:	e8 b5 fb ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c0020f15:	83 c4 2c             	add    esp,0x2c
c0020f18:	31 c0                	xor    eax,eax
c0020f1a:	5b                   	pop    ebx
c0020f1b:	5e                   	pop    esi
c0020f1c:	5f                   	pop    edi
c0020f1d:	5d                   	pop    ebp
c0020f1e:	c3                   	ret    
c0020f1f:	90                   	nop

c0020f20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020f20:	55                   	push   ebp
c0020f21:	57                   	push   edi
c0020f22:	56                   	push   esi
c0020f23:	53                   	push   ebx
c0020f24:	83 ec 1c             	sub    esp,0x1c
c0020f27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020f2f:	8d 50 f8             	lea    edx,[eax-0x8]
c0020f32:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020f36:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020f3a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020f3e:	80 fa 03             	cmp    dl,0x3
c0020f41:	77 5d                	ja     c0020fa0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020f43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020f47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f4b:	0f b6 db             	movzx  ebx,bl
c0020f4e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020f51:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020f55:	83 ca 80             	or     edx,0xffffff80
c0020f58:	0f b6 d2             	movzx  edx,dl
c0020f5b:	52                   	push   edx
c0020f5c:	6a 0c                	push   0xc
c0020f5e:	53                   	push   ebx
c0020f5f:	56                   	push   esi
c0020f60:	e8 59 f9 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f65:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020f6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020f72:	0f b6 c0             	movzx  eax,al
c0020f75:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020f79:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020f7b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020f80:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020f84:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020f88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f8c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020f94:	83 c4 2c             	add    esp,0x2c
c0020f97:	5b                   	pop    ebx
c0020f98:	5e                   	pop    esi
c0020f99:	5f                   	pop    edi
c0020f9a:	5d                   	pop    ebp
c0020f9b:	e9 1e f9 ff ff       	jmp    c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fa0:	3c 07                	cmp    al,0x7
c0020fa2:	77 10                	ja     c0020fb4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020fa4:	0f b6 db             	movzx  ebx,bl
c0020fa7:	0f b6 d0             	movzx  edx,al
c0020faa:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020fb2:	eb 2d                	jmp    c0020fe1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020fb4:	3c 0d                	cmp    al,0xd
c0020fb6:	77 13                	ja     c0020fcb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020fb8:	0f b6 db             	movzx  ebx,bl
c0020fbb:	0f b6 c0             	movzx  eax,al
c0020fbe:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020fc5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020fc9:	eb 16                	jmp    c0020fe1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020fcb:	3c 15                	cmp    al,0x15
c0020fcd:	77 14                	ja     c0020fe3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020fcf:	0f b6 db             	movzx  ebx,bl
c0020fd2:	0f b6 c0             	movzx  eax,al
c0020fd5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020fdd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020fe1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020fe3:	83 c4 1c             	add    esp,0x1c
c0020fe6:	5b                   	pop    ebx
c0020fe7:	5e                   	pop    esi
c0020fe8:	5f                   	pop    edi
c0020fe9:	5d                   	pop    ebp
c0020fea:	c3                   	ret    
c0020feb:	90                   	nop

c0020fec <IDE::detect()>:
c0020fec:	55                   	push   ebp
c0020fed:	57                   	push   edi
c0020fee:	56                   	push   esi
c0020fef:	53                   	push   ebx
c0020ff0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ff6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020ffd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021004:	0f 85 be 02 00 00    	jne    c00212c8 <IDE::detect()+0x2dc>
c002100a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021011:	31 f6                	xor    esi,esi
c0021013:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002101b:	31 ed                	xor    ebp,ebp
c002101d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021021:	c1 e0 06             	shl    eax,0x6
c0021024:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002102c:	89 e8                	mov    eax,ebp
c002102e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021032:	c1 e0 04             	shl    eax,0x4
c0021035:	83 c8 a0             	or     eax,0xffffffa0
c0021038:	0f b6 c0             	movzx  eax,al
c002103b:	50                   	push   eax
c002103c:	6a 06                	push   0x6
c002103e:	56                   	push   esi
c002103f:	53                   	push   ebx
c0021040:	e8 79 f8 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021045:	83 c4 0c             	add    esp,0xc
c0021048:	6a 0c                	push   0xc
c002104a:	56                   	push   esi
c002104b:	53                   	push   ebx
c002104c:	e8 2d f9 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021051:	83 c4 0c             	add    esp,0xc
c0021054:	6a 0c                	push   0xc
c0021056:	56                   	push   esi
c0021057:	53                   	push   ebx
c0021058:	e8 21 f9 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002105d:	83 c4 0c             	add    esp,0xc
c0021060:	6a 0c                	push   0xc
c0021062:	56                   	push   esi
c0021063:	53                   	push   ebx
c0021064:	e8 15 f9 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021069:	83 c4 0c             	add    esp,0xc
c002106c:	6a 0c                	push   0xc
c002106e:	56                   	push   esi
c002106f:	53                   	push   ebx
c0021070:	e8 09 f9 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021075:	68 ec 00 00 00       	push   0xec
c002107a:	6a 07                	push   0x7
c002107c:	56                   	push   esi
c002107d:	53                   	push   ebx
c002107e:	e8 3b f8 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021083:	83 c4 1c             	add    esp,0x1c
c0021086:	6a 0c                	push   0xc
c0021088:	56                   	push   esi
c0021089:	53                   	push   ebx
c002108a:	e8 ef f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002108f:	83 c4 0c             	add    esp,0xc
c0021092:	6a 0c                	push   0xc
c0021094:	56                   	push   esi
c0021095:	53                   	push   ebx
c0021096:	e8 e3 f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002109b:	83 c4 0c             	add    esp,0xc
c002109e:	6a 0c                	push   0xc
c00210a0:	56                   	push   esi
c00210a1:	53                   	push   ebx
c00210a2:	e8 d7 f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c00210a7:	83 c4 0c             	add    esp,0xc
c00210aa:	6a 0c                	push   0xc
c00210ac:	56                   	push   esi
c00210ad:	53                   	push   ebx
c00210ae:	e8 cb f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c00210b3:	83 c4 0c             	add    esp,0xc
c00210b6:	6a 0c                	push   0xc
c00210b8:	56                   	push   esi
c00210b9:	53                   	push   ebx
c00210ba:	e8 bf f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c00210bf:	83 c4 10             	add    esp,0x10
c00210c2:	84 c0                	test   al,al
c00210c4:	0f 84 8b 01 00 00    	je     c0021255 <IDE::detect()+0x269>
c00210ca:	31 ff                	xor    edi,edi
c00210cc:	50                   	push   eax
c00210cd:	6a 0c                	push   0xc
c00210cf:	56                   	push   esi
c00210d0:	53                   	push   ebx
c00210d1:	e8 a8 f8 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c00210d6:	83 c4 10             	add    esp,0x10
c00210d9:	a8 01                	test   al,0x1
c00210db:	0f 85 8e 01 00 00    	jne    c002126f <IDE::detect()+0x283>
c00210e1:	84 c0                	test   al,al
c00210e3:	78 04                	js     c00210e9 <IDE::detect()+0xfd>
c00210e5:	a8 08                	test   al,0x8
c00210e7:	75 27                	jne    c0021110 <IDE::detect()+0x124>
c00210e9:	47                   	inc    edi
c00210ea:	81 ff 17 01 00 00    	cmp    edi,0x117
c00210f0:	7e da                	jle    c00210cc <IDE::detect()+0xe0>
c00210f2:	50                   	push   eax
c00210f3:	50                   	push   eax
c00210f4:	6a 00                	push   0x0
c00210f6:	68 40 4b 4c 00       	push   0x4c4b40
c00210fb:	e8 72 ae ff ff       	call   c001bf72 <nanoSleep(unsigned long long)>
c0021100:	83 c4 10             	add    esp,0x10
c0021103:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021109:	75 c1                	jne    c00210cc <IDE::detect()+0xe0>
c002110b:	e9 5f 01 00 00       	jmp    c002126f <IDE::detect()+0x283>
c0021110:	31 c9                	xor    ecx,ecx
c0021112:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021116:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002111a:	83 ec 0c             	sub    esp,0xc
c002111d:	68 80 00 00 00       	push   0x80
c0021122:	57                   	push   edi
c0021123:	6a 00                	push   0x0
c0021125:	56                   	push   esi
c0021126:	53                   	push   ebx
c0021127:	e8 f4 fd ff ff       	call   c0020f20 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002112c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021131:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021135:	89 d1                	mov    ecx,edx
c0021137:	c1 e0 06             	shl    eax,0x6
c002113a:	01 d8                	add    eax,ebx
c002113c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021143:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002114a:	89 f2                	mov    edx,esi
c002114c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021152:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021156:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002115c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021160:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021167:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002116f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021176:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002117e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021184:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002118b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021191:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021195:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021199:	83 c4 20             	add    esp,0x20
c002119c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002119f:	83 c0 02             	add    eax,0x2
c00211a2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00211a8:	83 c7 02             	add    edi,0x2
c00211ab:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00211ae:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00211b4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00211b8:	75 e2                	jne    c002119c <IDE::detect()+0x1b0>
c00211ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211be:	c1 e0 06             	shl    eax,0x6
c00211c1:	01 d8                	add    eax,ebx
c00211c3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00211c9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00211d0:	66 c1 ea 09          	shr    dx,0x9
c00211d4:	83 e2 01             	and    edx,0x1
c00211d7:	84 c9                	test   cl,cl
c00211d9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00211df:	75 2f                	jne    c0021210 <IDE::detect()+0x224>
c00211e1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00211e7:	85 c0                	test   eax,eax
c00211e9:	74 66                	je     c0021251 <IDE::detect()+0x265>
c00211eb:	50                   	push   eax
c00211ec:	55                   	push   ebp
c00211ed:	56                   	push   esi
c00211ee:	68 9f 8f 02 c0       	push   0xc0028f9f
c00211f3:	e8 7f 10 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00211f8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00211ff:	e8 84 0f ff ff       	call   c0012188 <operator new(unsigned long)>
c0021204:	89 c7                	mov    edi,eax
c0021206:	89 04 24             	mov    DWORD PTR [esp],eax
c0021209:	e8 e8 02 00 00       	call   c00214f6 <ATA::ATA()>
c002120e:	eb 28                	jmp    c0021238 <IDE::detect()+0x24c>
c0021210:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021216:	55                   	push   ebp
c0021217:	56                   	push   esi
c0021218:	68 ce 8f 02 c0       	push   0xc0028fce
c002121d:	e8 55 10 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021222:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021229:	e8 5a 0f ff ff       	call   c0012188 <operator new(unsigned long)>
c002122e:	89 c7                	mov    edi,eax
c0021230:	89 04 24             	mov    DWORD PTR [esp],eax
c0021233:	e8 ee 08 00 00       	call   c0021b26 <ATAPI::ATAPI()>
c0021238:	5a                   	pop    edx
c0021239:	59                   	pop    ecx
c002123a:	57                   	push   edi
c002123b:	53                   	push   ebx
c002123c:	e8 41 24 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0021241:	8b 07                	mov    eax,DWORD PTR [edi]
c0021243:	53                   	push   ebx
c0021244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021248:	6a 00                	push   0x0
c002124a:	57                   	push   edi
c002124b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002124e:	83 c4 20             	add    esp,0x20
c0021251:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021255:	4d                   	dec    ebp
c0021256:	74 0a                	je     c0021262 <IDE::detect()+0x276>
c0021258:	bd 01 00 00 00       	mov    ebp,0x1
c002125d:	e9 bb fd ff ff       	jmp    c002101d <IDE::detect()+0x31>
c0021262:	4e                   	dec    esi
c0021263:	74 63                	je     c00212c8 <IDE::detect()+0x2dc>
c0021265:	be 01 00 00 00       	mov    esi,0x1
c002126a:	e9 ac fd ff ff       	jmp    c002101b <IDE::detect()+0x2f>
c002126f:	50                   	push   eax
c0021270:	6a 04                	push   0x4
c0021272:	56                   	push   esi
c0021273:	53                   	push   ebx
c0021274:	e8 05 f7 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021279:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002127d:	83 c4 0c             	add    esp,0xc
c0021280:	6a 05                	push   0x5
c0021282:	56                   	push   esi
c0021283:	53                   	push   ebx
c0021284:	e8 f5 f6 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021289:	83 c4 10             	add    esp,0x10
c002128c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021290:	80 fa 14             	cmp    dl,0x14
c0021293:	75 04                	jne    c0021299 <IDE::detect()+0x2ad>
c0021295:	3c eb                	cmp    al,0xeb
c0021297:	eb 07                	jmp    c00212a0 <IDE::detect()+0x2b4>
c0021299:	3c 96                	cmp    al,0x96
c002129b:	75 b8                	jne    c0021255 <IDE::detect()+0x269>
c002129d:	80 fa 69             	cmp    dl,0x69
c00212a0:	75 b3                	jne    c0021255 <IDE::detect()+0x269>
c00212a2:	68 a1 00 00 00       	push   0xa1
c00212a7:	6a 07                	push   0x7
c00212a9:	56                   	push   esi
c00212aa:	53                   	push   ebx
c00212ab:	e8 0e f6 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00212b0:	5f                   	pop    edi
c00212b1:	58                   	pop    eax
c00212b2:	6a 00                	push   0x0
c00212b4:	68 40 42 0f 00       	push   0xf4240
c00212b9:	e8 b4 ac ff ff       	call   c001bf72 <nanoSleep(unsigned long long)>
c00212be:	83 c4 10             	add    esp,0x10
c00212c1:	b1 01                	mov    cl,0x1
c00212c3:	e9 4a fe ff ff       	jmp    c0021112 <IDE::detect()+0x126>
c00212c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00212ce:	5b                   	pop    ebx
c00212cf:	5e                   	pop    esi
c00212d0:	5f                   	pop    edi
c00212d1:	5d                   	pop    ebp
c00212d2:	c3                   	ret    
c00212d3:	90                   	nop

c00212d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00212d4:	55                   	push   ebp
c00212d5:	57                   	push   edi
c00212d6:	56                   	push   esi
c00212d7:	53                   	push   ebx
c00212d8:	83 ec 1c             	sub    esp,0x1c
c00212db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00212df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00212e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00212e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00212eb:	88 c3                	mov    bl,al
c00212ed:	84 c0                	test   al,al
c00212ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212f3:	0f 84 67 01 00 00    	je     c0021460 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00212f9:	83 ec 0c             	sub    esp,0xc
c00212fc:	68 ff 8f 02 c0       	push   0xc0028fff
c0021301:	e8 71 0f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021306:	83 c4 10             	add    esp,0x10
c0021309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002130d:	3c 01                	cmp    al,0x1
c002130f:	75 17                	jne    c0021328 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021311:	83 ec 0c             	sub    esp,0xc
c0021314:	b3 13                	mov    bl,0x13
c0021316:	68 0b 90 02 c0       	push   0xc002900b
c002131b:	e8 57 0f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021320:	83 c4 10             	add    esp,0x10
c0021323:	e9 25 01 00 00       	jmp    c002144d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021328:	3c 02                	cmp    al,0x2
c002132a:	0f 85 ef 00 00 00    	jne    c002141f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021330:	d1 e6                	shl    esi,1
c0021332:	09 ee                	or     esi,ebp
c0021334:	52                   	push   edx
c0021335:	89 f0                	mov    eax,esi
c0021337:	6a 01                	push   0x1
c0021339:	0f b6 f0             	movzx  esi,al
c002133c:	c1 e6 06             	shl    esi,0x6
c002133f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021347:	50                   	push   eax
c0021348:	57                   	push   edi
c0021349:	e8 30 f6 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002134e:	83 c4 10             	add    esp,0x10
c0021351:	89 c6                	mov    esi,eax
c0021353:	a8 01                	test   al,0x1
c0021355:	74 12                	je     c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021357:	83 ec 0c             	sub    esp,0xc
c002135a:	b3 07                	mov    bl,0x7
c002135c:	68 20 90 02 c0       	push   0xc0029020
c0021361:	e8 11 0f ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021366:	83 c4 10             	add    esp,0x10
c0021369:	f7 c6 02 00 00 00    	test   esi,0x2
c002136f:	74 12                	je     c0021383 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021371:	83 ec 0c             	sub    esp,0xc
c0021374:	b3 03                	mov    bl,0x3
c0021376:	68 3e 90 02 c0       	push   0xc002903e
c002137b:	e8 f7 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021380:	83 c4 10             	add    esp,0x10
c0021383:	f7 c6 04 00 00 00    	test   esi,0x4
c0021389:	74 12                	je     c002139d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002138b:	83 ec 0c             	sub    esp,0xc
c002138e:	b3 14                	mov    bl,0x14
c0021390:	68 5e 90 02 c0       	push   0xc002905e
c0021395:	e8 dd 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002139a:	83 c4 10             	add    esp,0x10
c002139d:	f7 c6 08 00 00 00    	test   esi,0x8
c00213a3:	74 12                	je     c00213b7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00213a5:	83 ec 0c             	sub    esp,0xc
c00213a8:	b3 03                	mov    bl,0x3
c00213aa:	68 3e 90 02 c0       	push   0xc002903e
c00213af:	e8 c3 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213b4:	83 c4 10             	add    esp,0x10
c00213b7:	f7 c6 10 00 00 00    	test   esi,0x10
c00213bd:	74 12                	je     c00213d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00213bf:	83 ec 0c             	sub    esp,0xc
c00213c2:	b3 15                	mov    bl,0x15
c00213c4:	68 76 90 02 c0       	push   0xc0029076
c00213c9:	e8 a9 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213ce:	83 c4 10             	add    esp,0x10
c00213d1:	f7 c6 20 00 00 00    	test   esi,0x20
c00213d7:	74 12                	je     c00213eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00213d9:	83 ec 0c             	sub    esp,0xc
c00213dc:	b3 03                	mov    bl,0x3
c00213de:	68 3e 90 02 c0       	push   0xc002903e
c00213e3:	e8 8f 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00213e8:	83 c4 10             	add    esp,0x10
c00213eb:	f7 c6 40 00 00 00    	test   esi,0x40
c00213f1:	74 12                	je     c0021405 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00213f3:	83 ec 0c             	sub    esp,0xc
c00213f6:	b3 16                	mov    bl,0x16
c00213f8:	68 90 90 02 c0       	push   0xc0029090
c00213fd:	e8 75 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021402:	83 c4 10             	add    esp,0x10
c0021405:	89 f0                	mov    eax,esi
c0021407:	84 c0                	test   al,al
c0021409:	79 42                	jns    c002144d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002140b:	83 ec 0c             	sub    esp,0xc
c002140e:	b3 0d                	mov    bl,0xd
c0021410:	68 b1 90 02 c0       	push   0xc00290b1
c0021415:	e8 5d 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002141a:	83 c4 10             	add    esp,0x10
c002141d:	eb 2e                	jmp    c002144d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002141f:	3c 03                	cmp    al,0x3
c0021421:	75 14                	jne    c0021437 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021423:	83 ec 0c             	sub    esp,0xc
c0021426:	b3 17                	mov    bl,0x17
c0021428:	68 c5 90 02 c0       	push   0xc00290c5
c002142d:	e8 45 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021432:	83 c4 10             	add    esp,0x10
c0021435:	eb 16                	jmp    c002144d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021437:	3c 04                	cmp    al,0x4
c0021439:	75 12                	jne    c002144d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002143b:	83 ec 0c             	sub    esp,0xc
c002143e:	b3 08                	mov    bl,0x8
c0021440:	68 db 90 02 c0       	push   0xc00290db
c0021445:	e8 2d 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002144a:	83 c4 10             	add    esp,0x10
c002144d:	50                   	push   eax
c002144e:	50                   	push   eax
c002144f:	0f b6 c3             	movzx  eax,bl
c0021452:	50                   	push   eax
c0021453:	68 f3 90 02 c0       	push   0xc00290f3
c0021458:	e8 1a 0e ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c002145d:	83 c4 10             	add    esp,0x10
c0021460:	83 c4 1c             	add    esp,0x1c
c0021463:	88 d8                	mov    al,bl
c0021465:	5b                   	pop    ebx
c0021466:	5e                   	pop    esi
c0021467:	5f                   	pop    edi
c0021468:	5d                   	pop    ebp
c0021469:	c3                   	ret    

c002146a <IDE::polling(unsigned char, unsigned int)>:
c002146a:	57                   	push   edi
c002146b:	56                   	push   esi
c002146c:	53                   	push   ebx
c002146d:	bb 04 00 00 00       	mov    ebx,0x4
c0021472:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021476:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002147b:	52                   	push   edx
c002147c:	6a 0c                	push   0xc
c002147e:	56                   	push   esi
c002147f:	57                   	push   edi
c0021480:	e8 f9 f4 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	4b                   	dec    ebx
c0021489:	75 f0                	jne    c002147b <IDE::polling(unsigned char, unsigned int)+0x11>
c002148b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021490:	50                   	push   eax
c0021491:	6a 0c                	push   0xc
c0021493:	56                   	push   esi
c0021494:	57                   	push   edi
c0021495:	e8 e4 f4 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002149a:	83 c4 10             	add    esp,0x10
c002149d:	a8 01                	test   al,0x1
c002149f:	74 12                	je     c00214b3 <IDE::polling(unsigned char, unsigned int)+0x49>
c00214a1:	83 ec 0c             	sub    esp,0xc
c00214a4:	68 0d 91 02 c0       	push   0xc002910d
c00214a9:	e8 c9 0d ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00214ae:	83 c4 10             	add    esp,0x10
c00214b1:	eb 17                	jmp    c00214ca <IDE::polling(unsigned char, unsigned int)+0x60>
c00214b3:	a8 20                	test   al,0x20
c00214b5:	75 0f                	jne    c00214c6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00214b7:	4b                   	dec    ebx
c00214b8:	74 10                	je     c00214ca <IDE::polling(unsigned char, unsigned int)+0x60>
c00214ba:	84 c0                	test   al,al
c00214bc:	78 d2                	js     c0021490 <IDE::polling(unsigned char, unsigned int)+0x26>
c00214be:	a8 08                	test   al,0x8
c00214c0:	74 ce                	je     c0021490 <IDE::polling(unsigned char, unsigned int)+0x26>
c00214c2:	31 c0                	xor    eax,eax
c00214c4:	eb 06                	jmp    c00214cc <IDE::polling(unsigned char, unsigned int)+0x62>
c00214c6:	b0 01                	mov    al,0x1
c00214c8:	eb 02                	jmp    c00214cc <IDE::polling(unsigned char, unsigned int)+0x62>
c00214ca:	b0 02                	mov    al,0x2
c00214cc:	5b                   	pop    ebx
c00214cd:	5e                   	pop    esi
c00214ce:	5f                   	pop    edi
c00214cf:	c3                   	ret    

c00214d0 <ATA::close(int, int, void*)>:
c00214d0:	83 ec 0c             	sub    esp,0xc
c00214d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214dd:	85 c0                	test   eax,eax
c00214df:	74 0c                	je     c00214ed <ATA::close(int, int, void*)+0x1d>
c00214e1:	83 ec 0c             	sub    esp,0xc
c00214e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00214e6:	50                   	push   eax
c00214e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00214ea:	83 c4 10             	add    esp,0x10
c00214ed:	31 c0                	xor    eax,eax
c00214ef:	83 c4 0c             	add    esp,0xc
c00214f2:	c3                   	ret    
c00214f3:	90                   	nop

c00214f4 <ATA::powerSaving(PowerSavingLevel)>:
c00214f4:	c3                   	ret    
c00214f5:	90                   	nop

c00214f6 <ATA::ATA()>:
c00214f6:	83 ec 0c             	sub    esp,0xc
c00214f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214fd:	83 ec 04             	sub    esp,0x4
c0021500:	68 00 02 00 00       	push   0x200
c0021505:	68 50 91 02 c0       	push   0xc0029150
c002150a:	50                   	push   eax
c002150b:	e8 78 25 ff ff       	call   c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021510:	83 c4 10             	add    esp,0x10
c0021513:	ba 7c 91 02 c0       	mov    edx,0xc002917c
c0021518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151c:	89 10                	mov    DWORD PTR [eax],edx
c002151e:	90                   	nop
c002151f:	83 c4 0c             	add    esp,0xc
c0021522:	c3                   	ret    
c0021523:	90                   	nop

c0021524 <ATA::flush(bool)>:
c0021524:	53                   	push   ebx
c0021525:	83 ec 08             	sub    esp,0x8
c0021528:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002152d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021531:	19 c0                	sbb    eax,eax
c0021533:	83 e0 fd             	and    eax,0xfffffffd
c0021536:	05 ea 00 00 00       	add    eax,0xea
c002153b:	50                   	push   eax
c002153c:	6a 07                	push   0x7
c002153e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021545:	50                   	push   eax
c0021546:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002154c:	e8 6d f3 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021551:	83 c4 0c             	add    esp,0xc
c0021554:	6a 00                	push   0x0
c0021556:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002155d:	50                   	push   eax
c002155e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021564:	e8 01 ff ff ff       	call   c002146a <IDE::polling(unsigned char, unsigned int)>
c0021569:	83 c4 18             	add    esp,0x18
c002156c:	5b                   	pop    ebx
c002156d:	c3                   	ret    

c002156e <ATA::readyForCommand()>:
c002156e:	56                   	push   esi
c002156f:	53                   	push   ebx
c0021570:	31 db                	xor    ebx,ebx
c0021572:	50                   	push   eax
c0021573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021577:	50                   	push   eax
c0021578:	6a 0c                	push   0xc
c002157a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021581:	50                   	push   eax
c0021582:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021588:	e8 f1 f3 ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	a8 88                	test   al,0x88
c0021592:	74 23                	je     c00215b7 <ATA::readyForCommand()+0x49>
c0021594:	43                   	inc    ebx
c0021595:	83 fb 63             	cmp    ebx,0x63
c0021598:	7e dd                	jle    c0021577 <ATA::readyForCommand()+0x9>
c002159a:	51                   	push   ecx
c002159b:	51                   	push   ecx
c002159c:	6a 00                	push   0x0
c002159e:	68 40 42 0f 00       	push   0xf4240
c00215a3:	e8 ca a9 ff ff       	call   c001bf72 <nanoSleep(unsigned long long)>
c00215a8:	83 c4 10             	add    esp,0x10
c00215ab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00215b1:	75 c4                	jne    c0021577 <ATA::readyForCommand()+0x9>
c00215b3:	31 c0                	xor    eax,eax
c00215b5:	eb 02                	jmp    c00215b9 <ATA::readyForCommand()+0x4b>
c00215b7:	b0 01                	mov    al,0x1
c00215b9:	5a                   	pop    edx
c00215ba:	5b                   	pop    ebx
c00215bb:	5e                   	pop    esi
c00215bc:	c3                   	ret    
c00215bd:	90                   	nop

c00215be <ATA::access(unsigned long long, int, void*, bool)>:
c00215be:	55                   	push   ebp
c00215bf:	57                   	push   edi
c00215c0:	56                   	push   esi
c00215c1:	53                   	push   ebx
c00215c2:	83 ec 2c             	sub    esp,0x2c
c00215c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00215c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00215cd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00215d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215d5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00215d9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00215dd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00215e1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00215e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215eb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00215f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215f5:	c1 e0 06             	shl    eax,0x6
c00215f8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021600:	74 5d                	je     c002165f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021602:	89 fa                	mov    edx,edi
c0021604:	89 f0                	mov    eax,esi
c0021606:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002160a:	c1 ea 1c             	shr    edx,0x1c
c002160d:	89 d1                	mov    ecx,edx
c002160f:	09 c1                	or     ecx,eax
c0021611:	74 25                	je     c0021638 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021613:	31 ed                	xor    ebp,ebp
c0021615:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002161c:	89 fa                	mov    edx,edi
c002161e:	89 f0                	mov    eax,esi
c0021620:	0f ad d0             	shrd   eax,edx,cl
c0021623:	d3 ea                	shr    edx,cl
c0021625:	f6 c1 20             	test   cl,0x20
c0021628:	74 02                	je     c002162c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002162a:	89 d0                	mov    eax,edx
c002162c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021630:	45                   	inc    ebp
c0021631:	83 fd 06             	cmp    ebp,0x6
c0021634:	75 df                	jne    c0021615 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021636:	eb 76                	jmp    c00216ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021638:	89 f0                	mov    eax,esi
c002163a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002163f:	89 fa                	mov    edx,edi
c0021641:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021648:	0f ac d0 10          	shrd   eax,edx,0x10
c002164c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021651:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021655:	c1 ee 18             	shr    esi,0x18
c0021658:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002165d:	eb 56                	jmp    c00216b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002165f:	6a 00                	push   0x0
c0021661:	6a 3f                	push   0x3f
c0021663:	57                   	push   edi
c0021664:	56                   	push   esi
c0021665:	e8 72 1f 00 00       	call   c00235dc <__umoddi3>
c002166a:	83 c4 10             	add    esp,0x10
c002166d:	40                   	inc    eax
c002166e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021672:	6a 00                	push   0x0
c0021674:	68 f0 03 00 00       	push   0x3f0
c0021679:	57                   	push   edi
c002167a:	56                   	push   esi
c002167b:	e8 5c 1e 00 00       	call   c00234dc <__udivdi3>
c0021680:	83 c4 10             	add    esp,0x10
c0021683:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021688:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002168f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021694:	6a 00                	push   0x0
c0021696:	6a 3f                	push   0x3f
c0021698:	57                   	push   edi
c0021699:	56                   	push   esi
c002169a:	e8 3d 1e 00 00       	call   c00234dc <__udivdi3>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	89 c6                	mov    esi,eax
c00216a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00216a9:	83 e6 0f             	and    esi,0xf
c00216ac:	eb 07                	jmp    c00216b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00216ae:	31 f6                	xor    esi,esi
c00216b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00216b5:	bf 01 00 00 00       	mov    edi,0x1
c00216ba:	50                   	push   eax
c00216bb:	6a 00                	push   0x0
c00216bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216c4:	50                   	push   eax
c00216c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c9:	e8 fc f3 ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c00216ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216d1:	e8 98 fe ff ff       	call   c002156e <ATA::readyForCommand()>
c00216d6:	83 c4 10             	add    esp,0x10
c00216d9:	84 c0                	test   al,al
c00216db:	0f 84 50 02 00 00    	je     c0021931 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00216e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00216e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00216ed:	c1 e0 04             	shl    eax,0x4
c00216f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00216f7:	09 c6                	or     esi,eax
c00216f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00216fe:	75 05                	jne    c0021705 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021700:	83 ce a0             	or     esi,0xffffffa0
c0021703:	eb 03                	jmp    c0021708 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021705:	83 ce e0             	or     esi,0xffffffe0
c0021708:	89 f0                	mov    eax,esi
c002170a:	0f b6 f0             	movzx  esi,al
c002170d:	56                   	push   esi
c002170e:	6a 06                	push   0x6
c0021710:	51                   	push   ecx
c0021711:	52                   	push   edx
c0021712:	e8 a7 f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021717:	83 c4 10             	add    esp,0x10
c002171a:	6a 00                	push   0x0
c002171c:	6a 01                	push   0x1
c002171e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021725:	50                   	push   eax
c0021726:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002172c:	e8 8d f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021731:	83 c4 10             	add    esp,0x10
c0021734:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021739:	75 6e                	jne    c00217a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002173b:	6a 00                	push   0x0
c002173d:	6a 08                	push   0x8
c002173f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021746:	50                   	push   eax
c0021747:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002174d:	e8 6c f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021752:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021757:	50                   	push   eax
c0021758:	6a 09                	push   0x9
c002175a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021761:	50                   	push   eax
c0021762:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021768:	e8 51 f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002176d:	83 c4 20             	add    esp,0x20
c0021770:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021775:	50                   	push   eax
c0021776:	6a 0a                	push   0xa
c0021778:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002177f:	50                   	push   eax
c0021780:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021786:	e8 33 f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c002178b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021790:	50                   	push   eax
c0021791:	6a 0b                	push   0xb
c0021793:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002179a:	50                   	push   eax
c002179b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217a1:	e8 18 f1 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217a6:	83 c4 20             	add    esp,0x20
c00217a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00217ae:	50                   	push   eax
c00217af:	6a 02                	push   0x2
c00217b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217b8:	50                   	push   eax
c00217b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217bf:	e8 fa f0 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00217c9:	50                   	push   eax
c00217ca:	6a 03                	push   0x3
c00217cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217d3:	50                   	push   eax
c00217d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217da:	e8 df f0 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217df:	83 c4 20             	add    esp,0x20
c00217e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00217e7:	50                   	push   eax
c00217e8:	6a 04                	push   0x4
c00217ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217f1:	50                   	push   eax
c00217f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217f8:	e8 c1 f0 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021802:	50                   	push   eax
c0021803:	6a 05                	push   0x5
c0021805:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002180c:	50                   	push   eax
c002180d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021813:	e8 a6 f0 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021818:	83 c4 20             	add    esp,0x20
c002181b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021820:	0f 94 c0             	sete   al
c0021823:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021828:	74 09                	je     c0021833 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002182a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021831:	eb 07                	jmp    c002183a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021833:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002183a:	0f b6 c0             	movzx  eax,al
c002183d:	50                   	push   eax
c002183e:	6a 07                	push   0x7
c0021840:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021847:	50                   	push   eax
c0021848:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002184e:	e8 6b f0 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021853:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021857:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002185b:	83 c4 10             	add    esp,0x10
c002185e:	85 f6                	test   esi,esi
c0021860:	0f 84 ac 00 00 00    	je     c0021912 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021866:	50                   	push   eax
c0021867:	6a 01                	push   0x1
c0021869:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021870:	50                   	push   eax
c0021871:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021877:	e8 ee fb ff ff       	call   c002146a <IDE::polling(unsigned char, unsigned int)>
c002187c:	83 c4 10             	add    esp,0x10
c002187f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021885:	84 c0                	test   al,al
c0021887:	74 20                	je     c00218a9 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021889:	0f b6 f8             	movzx  edi,al
c002188c:	0f b6 d2             	movzx  edx,dl
c002188f:	57                   	push   edi
c0021890:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021897:	50                   	push   eax
c0021898:	52                   	push   edx
c0021899:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002189f:	e8 30 fa ff ff       	call   c00212d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00218a4:	e9 85 00 00 00       	jmp    c002192e <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00218a9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00218ae:	74 41                	je     c00218f1 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00218b0:	31 c9                	xor    ecx,ecx
c00218b2:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00218b6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218ba:	50                   	push   eax
c00218bb:	50                   	push   eax
c00218bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00218c3:	50                   	push   eax
c00218c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218ca:	e8 dd ef ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c00218cf:	89 c2                	mov    edx,eax
c00218d1:	89 e8                	mov    eax,ebp
c00218d3:	66 ef                	out    dx,ax
c00218d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00218d9:	83 c4 10             	add    esp,0x10
c00218dc:	41                   	inc    ecx
c00218dd:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00218e3:	75 cd                	jne    c00218b2 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00218e5:	4e                   	dec    esi
c00218e6:	81 c7 00 02 00 00    	add    edi,0x200
c00218ec:	e9 6d ff ff ff       	jmp    c002185e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00218f1:	0f b6 d2             	movzx  edx,dl
c00218f4:	51                   	push   ecx
c00218f5:	51                   	push   ecx
c00218f6:	52                   	push   edx
c00218f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218fd:	e8 aa ef ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c0021902:	b9 00 01 00 00       	mov    ecx,0x100
c0021907:	89 c2                	mov    edx,eax
c0021909:	fc                   	cld    
c002190a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	eb d3                	jmp    c00218e5 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021912:	31 ff                	xor    edi,edi
c0021914:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0021919:	74 16                	je     c0021931 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002191b:	50                   	push   eax
c002191c:	50                   	push   eax
c002191d:	31 c0                	xor    eax,eax
c002191f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021924:	0f 94 c0             	sete   al
c0021927:	50                   	push   eax
c0021928:	53                   	push   ebx
c0021929:	e8 f6 fb ff ff       	call   c0021524 <ATA::flush(bool)>
c002192e:	83 c4 10             	add    esp,0x10
c0021931:	83 c4 2c             	add    esp,0x2c
c0021934:	89 f8                	mov    eax,edi
c0021936:	5b                   	pop    ebx
c0021937:	5e                   	pop    esi
c0021938:	5f                   	pop    edi
c0021939:	5d                   	pop    ebp
c002193a:	c3                   	ret    
c002193b:	90                   	nop

c002193c <ATA::read(unsigned long long, int, void*)>:
c002193c:	57                   	push   edi
c002193d:	b8 04 00 00 00       	mov    eax,0x4
c0021942:	56                   	push   esi
c0021943:	53                   	push   ebx
c0021944:	83 ec 10             	sub    esp,0x10
c0021947:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002194b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002194f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021952:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021956:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002195a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021960:	77 3b                	ja     c002199d <ATA::read(unsigned long long, int, void*)+0x61>
c0021962:	b8 06 00 00 00       	mov    eax,0x6
c0021967:	85 d2                	test   edx,edx
c0021969:	74 32                	je     c002199d <ATA::read(unsigned long long, int, void*)+0x61>
c002196b:	50                   	push   eax
c002196c:	50                   	push   eax
c002196d:	6a 00                	push   0x0
c002196f:	52                   	push   edx
c0021970:	53                   	push   ebx
c0021971:	57                   	push   edi
c0021972:	56                   	push   esi
c0021973:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021977:	e8 42 fc ff ff       	call   c00215be <ATA::access(unsigned long long, int, void*, bool)>
c002197c:	83 c4 20             	add    esp,0x20
c002197f:	85 c0                	test   eax,eax
c0021981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021985:	75 11                	jne    c0021998 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021987:	01 1d 08 c8 02 c0    	add    DWORD PTR ds:0xc002c808,ebx
c002198d:	e8 b8 e7 fe ff       	call   c001014a <VgaText::updateDiskUsage()>
c0021992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021996:	eb 05                	jmp    c002199d <ATA::read(unsigned long long, int, void*)+0x61>
c0021998:	b8 01 00 00 00       	mov    eax,0x1
c002199d:	83 c4 10             	add    esp,0x10
c00219a0:	5b                   	pop    ebx
c00219a1:	5e                   	pop    esi
c00219a2:	5f                   	pop    edi
c00219a3:	c3                   	ret    

c00219a4 <ATA::write(unsigned long long, int, void*)>:
c00219a4:	57                   	push   edi
c00219a5:	b8 04 00 00 00       	mov    eax,0x4
c00219aa:	56                   	push   esi
c00219ab:	53                   	push   ebx
c00219ac:	83 ec 10             	sub    esp,0x10
c00219af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00219b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00219ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00219c8:	77 3b                	ja     c0021a05 <ATA::write(unsigned long long, int, void*)+0x61>
c00219ca:	b8 06 00 00 00       	mov    eax,0x6
c00219cf:	85 d2                	test   edx,edx
c00219d1:	74 32                	je     c0021a05 <ATA::write(unsigned long long, int, void*)+0x61>
c00219d3:	50                   	push   eax
c00219d4:	50                   	push   eax
c00219d5:	6a 01                	push   0x1
c00219d7:	52                   	push   edx
c00219d8:	53                   	push   ebx
c00219d9:	57                   	push   edi
c00219da:	56                   	push   esi
c00219db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219df:	e8 da fb ff ff       	call   c00215be <ATA::access(unsigned long long, int, void*, bool)>
c00219e4:	83 c4 20             	add    esp,0x20
c00219e7:	85 c0                	test   eax,eax
c00219e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00219ed:	75 11                	jne    c0021a00 <ATA::write(unsigned long long, int, void*)+0x5c>
c00219ef:	01 1d 04 c8 02 c0    	add    DWORD PTR ds:0xc002c804,ebx
c00219f5:	e8 50 e7 fe ff       	call   c001014a <VgaText::updateDiskUsage()>
c00219fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219fe:	eb 05                	jmp    c0021a05 <ATA::write(unsigned long long, int, void*)+0x61>
c0021a00:	b8 01 00 00 00       	mov    eax,0x1
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	5b                   	pop    ebx
c0021a09:	5e                   	pop    esi
c0021a0a:	5f                   	pop    edi
c0021a0b:	c3                   	ret    

c0021a0c <ATA::detectCHS()>:
c0021a0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a10:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021a16:	c1 e0 06             	shl    eax,0x6
c0021a19:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021a1f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0021a29:	c7 44 24 04 5f 91 02 c0 	mov    DWORD PTR [esp+0x4],0xc002915f
c0021a31:	e9 a1 70 ff ff       	jmp    c0018ad7 <Krnl::panic(char const*)>

c0021a36 <ATA::open(int, int, void*)>:
c0021a36:	53                   	push   ebx
c0021a37:	83 ec 08             	sub    esp,0x8
c0021a3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021a42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a46:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021a4c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021a52:	c1 e0 06             	shl    eax,0x6
c0021a55:	01 d0                	add    eax,edx
c0021a57:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021a5e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021a64:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021a6b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021a75:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021a7b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021a82:	75 0c                	jne    c0021a90 <ATA::open(int, int, void*)+0x5a>
c0021a84:	83 ec 0c             	sub    esp,0xc
c0021a87:	53                   	push   ebx
c0021a88:	e8 7f ff ff ff       	call   c0021a0c <ATA::detectCHS()>
c0021a8d:	83 c4 10             	add    esp,0x10
c0021a90:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021a96:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021a9c:	c1 e0 06             	shl    eax,0x6
c0021a9f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021aa6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021ab0:	d1 e8                	shr    eax,1
c0021ab2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021ab8:	6a 04                	push   0x4
c0021aba:	6a 0c                	push   0xc
c0021abc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ac3:	50                   	push   eax
c0021ac4:	52                   	push   edx
c0021ac5:	e8 f4 ed ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021aca:	90                   	nop
c0021acb:	90                   	nop
c0021acc:	6a 00                	push   0x0
c0021ace:	6a 0c                	push   0xc
c0021ad0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021ad7:	50                   	push   eax
c0021ad8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021ade:	e8 db ed ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ae3:	83 c4 14             	add    esp,0x14
c0021ae6:	53                   	push   ebx
c0021ae7:	e8 04 20 ff ff       	call   c0013af0 <PhysicalDisk::startCache()>
c0021aec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021aef:	e8 b2 3f ff ff       	call   c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>
c0021af4:	31 c0                	xor    eax,eax
c0021af6:	83 c4 18             	add    esp,0x18
c0021af9:	5b                   	pop    ebx
c0021afa:	c3                   	ret    
c0021afb:	90                   	nop

c0021afc <ATAPI::write(unsigned long long, int, void*)>:
c0021afc:	b8 03 00 00 00       	mov    eax,0x3
c0021b01:	c3                   	ret    

c0021b02 <ATAPI::close(int, int, void*)>:
c0021b02:	83 ec 0c             	sub    esp,0xc
c0021b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021b0f:	85 c0                	test   eax,eax
c0021b11:	74 0c                	je     c0021b1f <ATAPI::close(int, int, void*)+0x1d>
c0021b13:	83 ec 0c             	sub    esp,0xc
c0021b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b18:	50                   	push   eax
c0021b19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	31 c0                	xor    eax,eax
c0021b21:	83 c4 0c             	add    esp,0xc
c0021b24:	c3                   	ret    
c0021b25:	90                   	nop

c0021b26 <ATAPI::ATAPI()>:
c0021b26:	83 ec 0c             	sub    esp,0xc
c0021b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2d:	83 ec 04             	sub    esp,0x4
c0021b30:	68 00 08 00 00       	push   0x800
c0021b35:	68 a8 91 02 c0       	push   0xc00291a8
c0021b3a:	50                   	push   eax
c0021b3b:	e8 48 1f ff ff       	call   c0013a88 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021b40:	83 c4 10             	add    esp,0x10
c0021b43:	ba e8 91 02 c0       	mov    edx,0xc00291e8
c0021b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b4c:	89 10                	mov    DWORD PTR [eax],edx
c0021b4e:	90                   	nop
c0021b4f:	83 c4 0c             	add    esp,0xc
c0021b52:	c3                   	ret    
c0021b53:	90                   	nop

c0021b54 <ATAPI::readyForCommand()>:
c0021b54:	56                   	push   esi
c0021b55:	53                   	push   ebx
c0021b56:	31 db                	xor    ebx,ebx
c0021b58:	50                   	push   eax
c0021b59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021b5d:	50                   	push   eax
c0021b5e:	6a 0c                	push   0xc
c0021b60:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021b67:	50                   	push   eax
c0021b68:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021b6e:	e8 0b ee ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	a8 88                	test   al,0x88
c0021b78:	74 23                	je     c0021b9d <ATAPI::readyForCommand()+0x49>
c0021b7a:	43                   	inc    ebx
c0021b7b:	83 fb 63             	cmp    ebx,0x63
c0021b7e:	7e dd                	jle    c0021b5d <ATAPI::readyForCommand()+0x9>
c0021b80:	51                   	push   ecx
c0021b81:	51                   	push   ecx
c0021b82:	6a 00                	push   0x0
c0021b84:	68 40 42 0f 00       	push   0xf4240
c0021b89:	e8 e4 a3 ff ff       	call   c001bf72 <nanoSleep(unsigned long long)>
c0021b8e:	83 c4 10             	add    esp,0x10
c0021b91:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021b97:	75 c4                	jne    c0021b5d <ATAPI::readyForCommand()+0x9>
c0021b99:	31 c0                	xor    eax,eax
c0021b9b:	eb 02                	jmp    c0021b9f <ATAPI::readyForCommand()+0x4b>
c0021b9d:	b0 01                	mov    al,0x1
c0021b9f:	5a                   	pop    edx
c0021ba0:	5b                   	pop    ebx
c0021ba1:	5e                   	pop    esi
c0021ba2:	c3                   	ret    
c0021ba3:	90                   	nop

c0021ba4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021ba4:	55                   	push   ebp
c0021ba5:	57                   	push   edi
c0021ba6:	56                   	push   esi
c0021ba7:	53                   	push   ebx
c0021ba8:	83 ec 20             	sub    esp,0x20
c0021bab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021baf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021bb3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021bb7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021bbb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021bbf:	6a 01                	push   0x1
c0021bc1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bc8:	50                   	push   eax
c0021bc9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bcf:	e8 f6 ee ff ff       	call   c0020aca <IDE::enableIRQs(unsigned char, bool)>
c0021bd4:	5e                   	pop    esi
c0021bd5:	58                   	pop    eax
c0021bd6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bdd:	50                   	push   eax
c0021bde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021be4:	e8 af ec ff ff       	call   c0020898 <IDE::prepareInterrupt(unsigned char)>
c0021be9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021bec:	e8 63 ff ff ff       	call   c0021b54 <ATAPI::readyForCommand()>
c0021bf1:	83 c4 10             	add    esp,0x10
c0021bf4:	84 c0                	test   al,al
c0021bf6:	75 0a                	jne    c0021c02 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021bf8:	bb 01 00 00 00       	mov    ebx,0x1
c0021bfd:	e9 57 02 00 00       	jmp    c0021e59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021c02:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021c08:	c1 e0 04             	shl    eax,0x4
c0021c0b:	0f b6 c0             	movzx  eax,al
c0021c0e:	50                   	push   eax
c0021c0f:	6a 06                	push   0x6
c0021c11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c18:	50                   	push   eax
c0021c19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c1f:	e8 9a ec ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c24:	6a 00                	push   0x0
c0021c26:	6a 01                	push   0x1
c0021c28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c2f:	50                   	push   eax
c0021c30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c36:	e8 83 ec ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c3b:	83 c4 20             	add    esp,0x20
c0021c3e:	0f b6 c3             	movzx  eax,bl
c0021c41:	0f b6 df             	movzx  ebx,bh
c0021c44:	50                   	push   eax
c0021c45:	6a 04                	push   0x4
c0021c47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c4e:	50                   	push   eax
c0021c4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c55:	e8 64 ec ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c5a:	53                   	push   ebx
c0021c5b:	6a 05                	push   0x5
c0021c5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c64:	50                   	push   eax
c0021c65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c6b:	e8 4e ec ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c70:	83 c4 20             	add    esp,0x20
c0021c73:	68 a0 00 00 00       	push   0xa0
c0021c78:	6a 07                	push   0x7
c0021c7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c81:	50                   	push   eax
c0021c82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c88:	e8 31 ec ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c8d:	83 c4 0c             	add    esp,0xc
c0021c90:	6a 01                	push   0x1
c0021c92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c99:	50                   	push   eax
c0021c9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ca0:	e8 c5 f7 ff ff       	call   c002146a <IDE::polling(unsigned char, unsigned int)>
c0021ca5:	83 c4 10             	add    esp,0x10
c0021ca8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021cae:	84 c0                	test   al,al
c0021cb0:	74 23                	je     c0021cd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021cb2:	0f b6 d8             	movzx  ebx,al
c0021cb5:	0f b6 d2             	movzx  edx,dl
c0021cb8:	53                   	push   ebx
c0021cb9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021cc0:	50                   	push   eax
c0021cc1:	52                   	push   edx
c0021cc2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021cc8:	e8 07 f6 ff ff       	call   c00212d4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021ccd:	83 c4 10             	add    esp,0x10
c0021cd0:	e9 84 01 00 00       	jmp    c0021e59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021cd5:	0f b6 d2             	movzx  edx,dl
c0021cd8:	53                   	push   ebx
c0021cd9:	53                   	push   ebx
c0021cda:	52                   	push   edx
c0021cdb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ce1:	e8 c6 eb ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c0021ce6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021cea:	b9 06 00 00 00       	mov    ecx,0x6
c0021cef:	89 c2                	mov    edx,eax
c0021cf1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021cf4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021cf8:	83 c4 10             	add    esp,0x10
c0021cfb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021d01:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021d08:	85 db                	test   ebx,ebx
c0021d0a:	0f 84 ec 00 00 00    	je     c0021dfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021d10:	51                   	push   ecx
c0021d11:	51                   	push   ecx
c0021d12:	52                   	push   edx
c0021d13:	50                   	push   eax
c0021d14:	e8 13 ed ff ff       	call   c0020a2c <IDE::waitInterrupt(unsigned char)>
c0021d19:	83 c4 10             	add    esp,0x10
c0021d1c:	84 c0                	test   al,al
c0021d1e:	0f 84 d4 fe ff ff    	je     c0021bf8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d24:	56                   	push   esi
c0021d25:	56                   	push   esi
c0021d26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d2d:	50                   	push   eax
c0021d2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d34:	e8 5f eb ff ff       	call   c0020898 <IDE::prepareInterrupt(unsigned char)>
c0021d39:	83 c4 0c             	add    esp,0xc
c0021d3c:	6a 04                	push   0x4
c0021d3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d45:	50                   	push   eax
c0021d46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d4c:	e8 2d ec ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021d51:	83 c4 0c             	add    esp,0xc
c0021d54:	89 c6                	mov    esi,eax
c0021d56:	6a 05                	push   0x5
c0021d58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d5f:	50                   	push   eax
c0021d60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d66:	e8 13 ec ff ff       	call   c002097e <IDE::read(unsigned char, unsigned char)>
c0021d6b:	89 f1                	mov    ecx,esi
c0021d6d:	0f b6 c0             	movzx  eax,al
c0021d70:	0f b6 f1             	movzx  esi,cl
c0021d73:	c1 e0 08             	shl    eax,0x8
c0021d76:	09 c6                	or     esi,eax
c0021d78:	d1 fe                	sar    esi,1
c0021d7a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021d7e:	83 c4 10             	add    esp,0x10
c0021d81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021d86:	74 41                	je     c0021dc9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021d88:	31 c9                	xor    ecx,ecx
c0021d8a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021d90:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021d97:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021d9b:	75 0a                	jne    c0021da7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021d9d:	01 c9                	add    ecx,ecx
c0021d9f:	01 cd                	add    ebp,ecx
c0021da1:	4b                   	dec    ebx
c0021da2:	e9 54 ff ff ff       	jmp    c0021cfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021da7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021dac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021db0:	51                   	push   ecx
c0021db1:	51                   	push   ecx
c0021db2:	52                   	push   edx
c0021db3:	50                   	push   eax
c0021db4:	e8 f3 ea ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c0021db9:	89 c2                	mov    edx,eax
c0021dbb:	89 f0                	mov    eax,esi
c0021dbd:	66 ef                	out    dx,ax
c0021dbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021dc3:	83 c4 10             	add    esp,0x10
c0021dc6:	41                   	inc    ecx
c0021dc7:	eb c1                	jmp    c0021d8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021dc9:	31 f6                	xor    esi,esi
c0021dcb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021dd1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021dd8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021ddc:	75 06                	jne    c0021de4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021dde:	01 f6                	add    esi,esi
c0021de0:	01 f5                	add    ebp,esi
c0021de2:	eb bd                	jmp    c0021da1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021de4:	51                   	push   ecx
c0021de5:	51                   	push   ecx
c0021de6:	52                   	push   edx
c0021de7:	50                   	push   eax
c0021de8:	e8 bf ea ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c0021ded:	89 c2                	mov    edx,eax
c0021def:	66 ed                	in     ax,dx
c0021df1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021df6:	83 c4 10             	add    esp,0x10
c0021df9:	46                   	inc    esi
c0021dfa:	eb cf                	jmp    c0021dcb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021dfc:	51                   	push   ecx
c0021dfd:	51                   	push   ecx
c0021dfe:	52                   	push   edx
c0021dff:	50                   	push   eax
c0021e00:	e8 27 ec ff ff       	call   c0020a2c <IDE::waitInterrupt(unsigned char)>
c0021e05:	83 c4 10             	add    esp,0x10
c0021e08:	84 c0                	test   al,al
c0021e0a:	0f 84 e8 fd ff ff    	je     c0021bf8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021e10:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021e15:	52                   	push   edx
c0021e16:	52                   	push   edx
c0021e17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021e1e:	50                   	push   eax
c0021e1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021e25:	e8 6e ea ff ff       	call   c0020898 <IDE::prepareInterrupt(unsigned char)>
c0021e2a:	83 c4 10             	add    esp,0x10
c0021e2d:	50                   	push   eax
c0021e2e:	50                   	push   eax
c0021e2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021e36:	50                   	push   eax
c0021e37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021e3d:	e8 6a ea ff ff       	call   c00208ac <IDE::getBase(unsigned char)>
c0021e42:	8d 50 07             	lea    edx,[eax+0x7]
c0021e45:	ec                   	in     al,dx
c0021e46:	83 c4 10             	add    esp,0x10
c0021e49:	a8 88                	test   al,0x88
c0021e4b:	74 0a                	je     c0021e57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021e4d:	4b                   	dec    ebx
c0021e4e:	75 dd                	jne    c0021e2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021e50:	bb 02 00 00 00       	mov    ebx,0x2
c0021e55:	eb 02                	jmp    c0021e59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021e57:	31 db                	xor    ebx,ebx
c0021e59:	83 c4 1c             	add    esp,0x1c
c0021e5c:	89 d8                	mov    eax,ebx
c0021e5e:	5b                   	pop    ebx
c0021e5f:	5e                   	pop    esi
c0021e60:	5f                   	pop    edi
c0021e61:	5d                   	pop    ebp
c0021e62:	c3                   	ret    
c0021e63:	90                   	nop

c0021e64 <ATAPI::diskRemoved()>:
c0021e64:	83 ec 18             	sub    esp,0x18
c0021e67:	68 b3 91 02 c0       	push   0xc00291b3
c0021e6c:	e8 06 04 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e75:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021e7c:	83 c4 1c             	add    esp,0x1c
c0021e7f:	c3                   	ret    

c0021e80 <ATAPI::eject()>:
c0021e80:	57                   	push   edi
c0021e81:	b9 03 00 00 00       	mov    ecx,0x3
c0021e86:	53                   	push   ebx
c0021e87:	83 ec 14             	sub    esp,0x14
c0021e8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021e8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021e92:	fc                   	cld    
c0021e93:	31 c0                	xor    eax,eax
c0021e95:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021e97:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021e9c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021ea1:	50                   	push   eax
c0021ea2:	50                   	push   eax
c0021ea3:	6a 00                	push   0x0
c0021ea5:	6a 00                	push   0x0
c0021ea7:	6a 00                	push   0x0
c0021ea9:	6a 02                	push   0x2
c0021eab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021eaf:	50                   	push   eax
c0021eb0:	53                   	push   ebx
c0021eb1:	e8 ee fc ff ff       	call   c0021ba4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021eb6:	83 c4 14             	add    esp,0x14
c0021eb9:	53                   	push   ebx
c0021eba:	e8 a5 ff ff ff       	call   c0021e64 <ATAPI::diskRemoved()>
c0021ebf:	83 c4 24             	add    esp,0x24
c0021ec2:	5b                   	pop    ebx
c0021ec3:	5f                   	pop    edi
c0021ec4:	c3                   	ret    
c0021ec5:	90                   	nop

c0021ec6 <ATAPI::diskInserted()>:
c0021ec6:	53                   	push   ebx
c0021ec7:	83 ec 14             	sub    esp,0x14
c0021eca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021ece:	68 c9 91 02 c0       	push   0xc00291c9
c0021ed3:	e8 9f 03 ff ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0021ed8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021edf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021ee2:	e8 09 1c ff ff       	call   c0013af0 <PhysicalDisk::startCache()>
c0021ee7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021eeb:	83 c4 18             	add    esp,0x18
c0021eee:	5b                   	pop    ebx
c0021eef:	e9 b2 3b ff ff       	jmp    c0015aa6 <createPartitionsForDisk(PhysicalDisk*)>

c0021ef4 <ATAPI::detectMedia()>:
c0021ef4:	56                   	push   esi
c0021ef5:	53                   	push   ebx
c0021ef6:	83 ec 28             	sub    esp,0x28
c0021ef9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021efd:	6a 0c                	push   0xc
c0021eff:	6a 00                	push   0x0
c0021f01:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021f05:	56                   	push   esi
c0021f06:	e8 ba e7 fd ff       	call   c00006c5 <memset>
c0021f0b:	58                   	pop    eax
c0021f0c:	5a                   	pop    edx
c0021f0d:	6a 00                	push   0x0
c0021f0f:	6a 00                	push   0x0
c0021f11:	6a 00                	push   0x0
c0021f13:	6a 00                	push   0x0
c0021f15:	56                   	push   esi
c0021f16:	53                   	push   ebx
c0021f17:	e8 88 fc ff ff       	call   c0021ba4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f1c:	83 c4 1c             	add    esp,0x1c
c0021f1f:	6a 0c                	push   0xc
c0021f21:	6a 00                	push   0x0
c0021f23:	56                   	push   esi
c0021f24:	e8 9c e7 fd ff       	call   c00006c5 <memset>
c0021f29:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021f2e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021f33:	59                   	pop    ecx
c0021f34:	58                   	pop    eax
c0021f35:	6a 01                	push   0x1
c0021f37:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021f3b:	50                   	push   eax
c0021f3c:	6a 00                	push   0x0
c0021f3e:	6a 12                	push   0x12
c0021f40:	56                   	push   esi
c0021f41:	53                   	push   ebx
c0021f42:	e8 5d fc ff ff       	call   c0021ba4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f47:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021f4b:	83 c4 20             	add    esp,0x20
c0021f4e:	83 e0 7f             	and    eax,0x7f
c0021f51:	3c 70                	cmp    al,0x70
c0021f53:	74 15                	je     c0021f6a <ATAPI::detectMedia()+0x76>
c0021f55:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f5c:	75 0c                	jne    c0021f6a <ATAPI::detectMedia()+0x76>
c0021f5e:	83 ec 0c             	sub    esp,0xc
c0021f61:	53                   	push   ebx
c0021f62:	e8 5f ff ff ff       	call   c0021ec6 <ATAPI::diskInserted()>
c0021f67:	83 c4 10             	add    esp,0x10
c0021f6a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021f6e:	83 e0 0f             	and    eax,0xf
c0021f71:	3c 02                	cmp    al,0x2
c0021f73:	75 1b                	jne    c0021f90 <ATAPI::detectMedia()+0x9c>
c0021f75:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021f7a:	75 2d                	jne    c0021fa9 <ATAPI::detectMedia()+0xb5>
c0021f7c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f83:	74 24                	je     c0021fa9 <ATAPI::detectMedia()+0xb5>
c0021f85:	83 ec 0c             	sub    esp,0xc
c0021f88:	53                   	push   ebx
c0021f89:	e8 d6 fe ff ff       	call   c0021e64 <ATAPI::diskRemoved()>
c0021f8e:	eb 16                	jmp    c0021fa6 <ATAPI::detectMedia()+0xb2>
c0021f90:	84 c0                	test   al,al
c0021f92:	75 15                	jne    c0021fa9 <ATAPI::detectMedia()+0xb5>
c0021f94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f9b:	75 0c                	jne    c0021fa9 <ATAPI::detectMedia()+0xb5>
c0021f9d:	83 ec 0c             	sub    esp,0xc
c0021fa0:	53                   	push   ebx
c0021fa1:	e8 20 ff ff ff       	call   c0021ec6 <ATAPI::diskInserted()>
c0021fa6:	83 c4 10             	add    esp,0x10
c0021fa9:	83 c4 24             	add    esp,0x24
c0021fac:	5b                   	pop    ebx
c0021fad:	5e                   	pop    esi
c0021fae:	c3                   	ret    
c0021faf:	90                   	nop

c0021fb0 <ATAPI::open(int, int, void*)>:
c0021fb0:	53                   	push   ebx
c0021fb1:	83 ec 08             	sub    esp,0x8
c0021fb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021fbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021fc0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021fc6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021fcc:	c1 e0 06             	shl    eax,0x6
c0021fcf:	01 d0                	add    eax,edx
c0021fd1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021fd8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021fde:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021fe5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021fef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021ff5:	6a 04                	push   0x4
c0021ff7:	6a 0c                	push   0xc
c0021ff9:	51                   	push   ecx
c0021ffa:	52                   	push   edx
c0021ffb:	e8 be e8 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022000:	90                   	nop
c0022001:	90                   	nop
c0022002:	6a 00                	push   0x0
c0022004:	6a 0c                	push   0xc
c0022006:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002200d:	50                   	push   eax
c002200e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022014:	e8 a5 e8 ff ff       	call   c00208be <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022019:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022020:	83 c4 14             	add    esp,0x14
c0022023:	53                   	push   ebx
c0022024:	e8 cb fe ff ff       	call   c0021ef4 <ATAPI::detectMedia()>
c0022029:	31 c0                	xor    eax,eax
c002202b:	83 c4 18             	add    esp,0x18
c002202e:	5b                   	pop    ebx
c002202f:	c3                   	ret    

c0022030 <ATAPI::read(unsigned long long, int, void*)>:
c0022030:	55                   	push   ebp
c0022031:	57                   	push   edi
c0022032:	56                   	push   esi
c0022033:	53                   	push   ebx
c0022034:	83 ec 1c             	sub    esp,0x1c
c0022037:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002203b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002203f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022043:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002204a:	74 41                	je     c002208d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002204c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022050:	b9 03 00 00 00       	mov    ecx,0x3
c0022055:	fc                   	cld    
c0022056:	31 c0                	xor    eax,eax
c0022058:	86 fb                	xchg   bl,bh
c002205a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002205c:	c1 c3 10             	rol    ebx,0x10
c002205f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022064:	89 e8                	mov    eax,ebp
c0022066:	86 fb                	xchg   bl,bh
c0022068:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002206c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022070:	50                   	push   eax
c0022071:	50                   	push   eax
c0022072:	55                   	push   ebp
c0022073:	c1 e5 0b             	shl    ebp,0xb
c0022076:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002207a:	6a 00                	push   0x0
c002207c:	55                   	push   ebp
c002207d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022081:	50                   	push   eax
c0022082:	56                   	push   esi
c0022083:	e8 1c fb ff ff       	call   c0021ba4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022088:	83 c4 20             	add    esp,0x20
c002208b:	eb 1a                	jmp    c00220a7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002208d:	83 ec 0c             	sub    esp,0xc
c0022090:	56                   	push   esi
c0022091:	e8 5e fe ff ff       	call   c0021ef4 <ATAPI::detectMedia()>
c0022096:	83 c4 10             	add    esp,0x10
c0022099:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00220a0:	75 aa                	jne    c002204c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00220a2:	b8 02 00 00 00       	mov    eax,0x2
c00220a7:	83 c4 1c             	add    esp,0x1c
c00220aa:	5b                   	pop    ebx
c00220ab:	5e                   	pop    esi
c00220ac:	5f                   	pop    edi
c00220ad:	5d                   	pop    ebp
c00220ae:	c3                   	ret    
c00220af:	90                   	nop

c00220b0 <AVX::open(int, int, void*)>:
c00220b0:	83 ec 0c             	sub    esp,0xc
c00220b3:	e8 a0 10 00 00       	call   c0023158 <avxInit>
c00220b8:	b8 00 00 00 00       	mov    eax,0x0
c00220bd:	83 c4 0c             	add    esp,0xc
c00220c0:	c3                   	ret    
c00220c1:	90                   	nop

c00220c2 <AVX::close(int, int, void*)>:
c00220c2:	83 ec 0c             	sub    esp,0xc
c00220c5:	e8 8f 10 00 00       	call   c0023159 <avxClose>
c00220ca:	b8 00 00 00 00       	mov    eax,0x0
c00220cf:	83 c4 0c             	add    esp,0xc
c00220d2:	c3                   	ret    
c00220d3:	90                   	nop

c00220d4 <AVX::available()>:
c00220d4:	83 ec 0c             	sub    esp,0xc
c00220d7:	e8 74 10 00 00       	call   c0023150 <avxDetect>
c00220dc:	85 c0                	test   eax,eax
c00220de:	0f 95 c0             	setne  al
c00220e1:	83 c4 0c             	add    esp,0xc
c00220e4:	c3                   	ret    
c00220e5:	90                   	nop

c00220e6 <AVX::save(void*)>:
c00220e6:	83 ec 0c             	sub    esp,0xc
c00220e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220ed:	83 ec 0c             	sub    esp,0xc
c00220f0:	50                   	push   eax
c00220f1:	e8 60 10 00 00       	call   c0023156 <avxSave>
c00220f6:	83 c4 10             	add    esp,0x10
c00220f9:	90                   	nop
c00220fa:	83 c4 0c             	add    esp,0xc
c00220fd:	c3                   	ret    

c00220fe <AVX::load(void*)>:
c00220fe:	83 ec 0c             	sub    esp,0xc
c0022101:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022105:	83 ec 0c             	sub    esp,0xc
c0022108:	50                   	push   eax
c0022109:	e8 49 10 00 00       	call   c0023157 <avxLoad>
c002210e:	83 c4 10             	add    esp,0x10
c0022111:	90                   	nop
c0022112:	83 c4 0c             	add    esp,0xc
c0022115:	c3                   	ret    

c0022116 <AVX::AVX()>:
c0022116:	83 ec 0c             	sub    esp,0xc
c0022119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211d:	83 ec 08             	sub    esp,0x8
c0022120:	68 14 92 02 c0       	push   0xc0029214
c0022125:	50                   	push   eax
c0022126:	e8 3b 1a ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c002212b:	83 c4 10             	add    esp,0x10
c002212e:	ba 24 92 02 c0       	mov    edx,0xc0029224
c0022133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022137:	89 10                	mov    DWORD PTR [eax],edx
c0022139:	90                   	nop
c002213a:	83 c4 0c             	add    esp,0xc
c002213d:	c3                   	ret    

c002213e <MMX::available()>:
c002213e:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0022143:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022149:	83 e0 20             	and    eax,0x20
c002214c:	84 c0                	test   al,al
c002214e:	0f 95 c0             	setne  al
c0022151:	c3                   	ret    

c0022152 <MMX::open(int, int, void*)>:
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	e8 72 10 00 00       	call   c00231cc <x87Init>
c002215a:	b8 00 00 00 00       	mov    eax,0x0
c002215f:	83 c4 0c             	add    esp,0xc
c0022162:	c3                   	ret    
c0022163:	90                   	nop

c0022164 <MMX::close(int, int, void*)>:
c0022164:	83 ec 0c             	sub    esp,0xc
c0022167:	e8 7a 10 00 00       	call   c00231e6 <x87Close>
c002216c:	b8 00 00 00 00       	mov    eax,0x0
c0022171:	83 c4 0c             	add    esp,0xc
c0022174:	c3                   	ret    
c0022175:	90                   	nop

c0022176 <MMX::save(void*)>:
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	50                   	push   eax
c0022181:	e8 3b 10 00 00       	call   c00231c1 <x87Save>
c0022186:	83 c4 10             	add    esp,0x10
c0022189:	90                   	nop
c002218a:	83 c4 0c             	add    esp,0xc
c002218d:	c3                   	ret    

c002218e <MMX::load(void*)>:
c002218e:	83 ec 0c             	sub    esp,0xc
c0022191:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022195:	83 ec 0c             	sub    esp,0xc
c0022198:	50                   	push   eax
c0022199:	e8 29 10 00 00       	call   c00231c7 <x87Load>
c002219e:	83 c4 10             	add    esp,0x10
c00221a1:	90                   	nop
c00221a2:	83 c4 0c             	add    esp,0xc
c00221a5:	c3                   	ret    

c00221a6 <MMX::MMX()>:
c00221a6:	83 ec 0c             	sub    esp,0xc
c00221a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ad:	83 ec 08             	sub    esp,0x8
c00221b0:	68 54 92 02 c0       	push   0xc0029254
c00221b5:	50                   	push   eax
c00221b6:	e8 ab 19 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c00221bb:	83 c4 10             	add    esp,0x10
c00221be:	ba 64 92 02 c0       	mov    edx,0xc0029264
c00221c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c7:	89 10                	mov    DWORD PTR [eax],edx
c00221c9:	90                   	nop
c00221ca:	83 c4 0c             	add    esp,0xc
c00221cd:	c3                   	ret    

c00221ce <SSE::open(int, int, void*)>:
c00221ce:	83 ec 0c             	sub    esp,0xc
c00221d1:	e8 b1 0f 00 00       	call   c0023187 <sseInit>
c00221d6:	b8 00 00 00 00       	mov    eax,0x0
c00221db:	83 c4 0c             	add    esp,0xc
c00221de:	c3                   	ret    
c00221df:	90                   	nop

c00221e0 <SSE::close(int, int, void*)>:
c00221e0:	83 ec 0c             	sub    esp,0xc
c00221e3:	e8 af 0f 00 00       	call   c0023197 <sseClose>
c00221e8:	b8 00 00 00 00       	mov    eax,0x0
c00221ed:	83 c4 0c             	add    esp,0xc
c00221f0:	c3                   	ret    
c00221f1:	90                   	nop

c00221f2 <SSE::available()>:
c00221f2:	83 ec 1c             	sub    esp,0x1c
c00221f5:	e8 66 0f 00 00       	call   c0023160 <sseDetect>
c00221fa:	85 c0                	test   eax,eax
c00221fc:	0f 95 c0             	setne  al
c00221ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022203:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022207:	83 c4 1c             	add    esp,0x1c
c002220a:	c3                   	ret    
c002220b:	90                   	nop

c002220c <SSE::save(void*)>:
c002220c:	83 ec 0c             	sub    esp,0xc
c002220f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022213:	83 ec 0c             	sub    esp,0xc
c0022216:	50                   	push   eax
c0022217:	e8 5f 0f 00 00       	call   c002317b <sseSave>
c002221c:	83 c4 10             	add    esp,0x10
c002221f:	90                   	nop
c0022220:	83 c4 0c             	add    esp,0xc
c0022223:	c3                   	ret    

c0022224 <SSE::load(void*)>:
c0022224:	83 ec 0c             	sub    esp,0xc
c0022227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002222b:	83 ec 0c             	sub    esp,0xc
c002222e:	50                   	push   eax
c002222f:	e8 4d 0f 00 00       	call   c0023181 <sseLoad>
c0022234:	83 c4 10             	add    esp,0x10
c0022237:	90                   	nop
c0022238:	83 c4 0c             	add    esp,0xc
c002223b:	c3                   	ret    

c002223c <SSE::SSE()>:
c002223c:	83 ec 0c             	sub    esp,0xc
c002223f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022243:	83 ec 08             	sub    esp,0x8
c0022246:	68 94 92 02 c0       	push   0xc0029294
c002224b:	50                   	push   eax
c002224c:	e8 15 19 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c0022251:	83 c4 10             	add    esp,0x10
c0022254:	ba a4 92 02 c0       	mov    edx,0xc00292a4
c0022259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225d:	89 10                	mov    DWORD PTR [eax],edx
c002225f:	90                   	nop
c0022260:	83 c4 0c             	add    esp,0xc
c0022263:	c3                   	ret    

c0022264 <x87::open(int, int, void*)>:
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	e8 60 0f 00 00       	call   c00231cc <x87Init>
c002226c:	b8 00 00 00 00       	mov    eax,0x0
c0022271:	83 c4 0c             	add    esp,0xc
c0022274:	c3                   	ret    
c0022275:	90                   	nop

c0022276 <x87::close(int, int, void*)>:
c0022276:	83 ec 0c             	sub    esp,0xc
c0022279:	e8 68 0f 00 00       	call   c00231e6 <x87Close>
c002227e:	b8 00 00 00 00       	mov    eax,0x0
c0022283:	83 c4 0c             	add    esp,0xc
c0022286:	c3                   	ret    
c0022287:	90                   	nop

c0022288 <x87::available()>:
c0022288:	83 ec 0c             	sub    esp,0xc
c002228b:	e8 16 0f 00 00       	call   c00231a6 <x87Detect>
c0022290:	85 c0                	test   eax,eax
c0022292:	0f 95 c0             	setne  al
c0022295:	83 c4 0c             	add    esp,0xc
c0022298:	c3                   	ret    
c0022299:	90                   	nop

c002229a <x87::save(void*)>:
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222a1:	83 ec 0c             	sub    esp,0xc
c00222a4:	50                   	push   eax
c00222a5:	e8 17 0f 00 00       	call   c00231c1 <x87Save>
c00222aa:	83 c4 10             	add    esp,0x10
c00222ad:	90                   	nop
c00222ae:	83 c4 0c             	add    esp,0xc
c00222b1:	c3                   	ret    

c00222b2 <x87::load(void*)>:
c00222b2:	83 ec 0c             	sub    esp,0xc
c00222b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222b9:	83 ec 0c             	sub    esp,0xc
c00222bc:	50                   	push   eax
c00222bd:	e8 05 0f 00 00       	call   c00231c7 <x87Load>
c00222c2:	83 c4 10             	add    esp,0x10
c00222c5:	90                   	nop
c00222c6:	83 c4 0c             	add    esp,0xc
c00222c9:	c3                   	ret    

c00222ca <x87::x87()>:
c00222ca:	83 ec 0c             	sub    esp,0xc
c00222cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d1:	83 ec 08             	sub    esp,0x8
c00222d4:	68 d4 92 02 c0       	push   0xc00292d4
c00222d9:	50                   	push   eax
c00222da:	e8 87 18 ff ff       	call   c0013b66 <FPU::FPU(char const*)>
c00222df:	83 c4 10             	add    esp,0x10
c00222e2:	ba e4 92 02 c0       	mov    edx,0xc00292e4
c00222e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222eb:	89 10                	mov    DWORD PTR [eax],edx
c00222ed:	90                   	nop
c00222ee:	83 c4 0c             	add    esp,0xc
c00222f1:	c3                   	ret    

c00222f2 <APIC::disable()>:
c00222f2:	90                   	nop
c00222f3:	c3                   	ret    

c00222f4 <APIC::close(int, int, void*)>:
c00222f4:	55                   	push   ebp
c00222f5:	89 e5                	mov    ebp,esp
c00222f7:	83 ec 08             	sub    esp,0x8
c00222fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ff:	83 c0 3c             	add    eax,0x3c
c0022302:	8b 00                	mov    eax,DWORD PTR [eax]
c0022304:	83 ec 0c             	sub    esp,0xc
c0022307:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002230a:	ff d0                	call   eax
c002230c:	83 c4 10             	add    esp,0x10
c002230f:	b8 00 00 00 00       	mov    eax,0x0
c0022314:	c9                   	leave  
c0022315:	c3                   	ret    

c0022316 <IOAPIC::close(int, int, void*)>:
c0022316:	b8 00 00 00 00       	mov    eax,0x0
c002231b:	c3                   	ret    

c002231c <APIC::io_wait()>:
c002231c:	eb 00                	jmp    c002231e <APIC::io_wait()+0x2>
c002231e:	eb 00                	jmp    c0022320 <APIC::io_wait()+0x4>
c0022320:	90                   	nop
c0022321:	c3                   	ret    

c0022322 <APIC::getBase()>:
c0022322:	55                   	push   ebp
c0022323:	89 e5                	mov    ebp,esp
c0022325:	83 ec 18             	sub    esp,0x18
c0022328:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c002232d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022333:	83 e0 08             	and    eax,0x8
c0022336:	84 c0                	test   al,al
c0022338:	75 07                	jne    c0022341 <APIC::getBase()+0x1f>
c002233a:	b8 00 00 00 00       	mov    eax,0x0
c002233f:	eb 21                	jmp    c0022362 <APIC::getBase()+0x40>
c0022341:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0022346:	83 ec 08             	sub    esp,0x8
c0022349:	6a 1b                	push   0x1b
c002234b:	50                   	push   eax
c002234c:	e8 bd c3 fe ff       	call   c000e70e <Computer::rdmsr(unsigned int)>
c0022351:	83 c4 10             	add    esp,0x10
c0022354:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022357:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002235a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002235d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022362:	c9                   	leave  
c0022363:	c3                   	ret    

c0022364 <APIC::eoi(unsigned char)>:
c0022364:	55                   	push   ebp
c0022365:	89 e5                	mov    ebp,esp
c0022367:	83 ec 28             	sub    esp,0x28
c002236a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002236d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022370:	83 ec 0c             	sub    esp,0xc
c0022373:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022376:	e8 a7 ff ff ff       	call   c0022322 <APIC::getBase()>
c002237b:	83 c4 10             	add    esp,0x10
c002237e:	05 b0 00 00 00       	add    eax,0xb0
c0022383:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022389:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002238f:	90                   	nop
c0022390:	c9                   	leave  
c0022391:	c3                   	ret    

c0022392 <APIC::open(int, int, void*)>:
c0022392:	55                   	push   ebp
c0022393:	89 e5                	mov    ebp,esp
c0022395:	57                   	push   edi
c0022396:	56                   	push   esi
c0022397:	53                   	push   ebx
c0022398:	83 ec 1c             	sub    esp,0x1c
c002239b:	83 ec 0c             	sub    esp,0xc
c002239e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223a1:	e8 7c ff ff ff       	call   c0022322 <APIC::getBase()>
c00223a6:	83 c4 10             	add    esp,0x10
c00223a9:	89 c2                	mov    edx,eax
c00223ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223ae:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223b4:	0f b6 f8             	movzx  edi,al
c00223b7:	89 d0                	mov    eax,edx
c00223b9:	ba 00 00 00 00       	mov    edx,0x0
c00223be:	89 c1                	mov    ecx,eax
c00223c0:	80 e5 ff             	and    ch,0xff
c00223c3:	89 cb                	mov    ebx,ecx
c00223c5:	0f b6 f2             	movzx  esi,dl
c00223c8:	89 d8                	mov    eax,ebx
c00223ca:	89 f2                	mov    edx,esi
c00223cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00223cf:	8d 5f 08             	lea    ebx,[edi+0x8]
c00223d2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00223d6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00223da:	83 e0 00             	and    eax,0x0
c00223dd:	09 d0                	or     eax,edx
c00223df:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00223e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223e6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223ec:	8d 50 01             	lea    edx,[eax+0x1]
c00223ef:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00223f2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00223f8:	0f b6 d0             	movzx  edx,al
c00223fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223fe:	83 c2 08             	add    edx,0x8
c0022401:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022405:	0f b6 c9             	movzx  ecx,cl
c0022408:	81 c9 00 00 01 00    	or     ecx,0x10000
c002240e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022412:	83 ec 0c             	sub    esp,0xc
c0022415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022418:	e8 05 ff ff ff       	call   c0022322 <APIC::getBase()>
c002241d:	83 c4 10             	add    esp,0x10
c0022420:	05 f0 00 00 00       	add    eax,0xf0
c0022425:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0022428:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002242b:	8b 00                	mov    eax,DWORD PTR [eax]
c002242d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022430:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c0022437:	81 4d e0 ff 00 00 00 	or     DWORD PTR [ebp-0x20],0xff
c002243e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022441:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022444:	89 10                	mov    DWORD PTR [eax],edx
c0022446:	b8 00 00 00 00       	mov    eax,0x0
c002244b:	8d 65 f4             	lea    esp,[ebp-0xc]
c002244e:	5b                   	pop    ebx
c002244f:	5e                   	pop    esi
c0022450:	5f                   	pop    edi
c0022451:	5d                   	pop    ebp
c0022452:	c3                   	ret    
c0022453:	90                   	nop

c0022454 <IOAPIC::IOAPIC()>:
c0022454:	83 ec 0c             	sub    esp,0xc
c0022457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245b:	83 ec 08             	sub    esp,0x8
c002245e:	68 14 93 02 c0       	push   0xc0029314
c0022463:	50                   	push   eax
c0022464:	e8 09 14 ff ff       	call   c0013872 <Device::Device(char const*)>
c0022469:	83 c4 10             	add    esp,0x10
c002246c:	ba 3c 94 02 c0       	mov    edx,0xc002943c
c0022471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022475:	89 10                	mov    DWORD PTR [eax],edx
c0022477:	90                   	nop
c0022478:	83 c4 0c             	add    esp,0xc
c002247b:	c3                   	ret    

c002247c <APIC::APIC()>:
c002247c:	53                   	push   ebx
c002247d:	83 ec 18             	sub    esp,0x18
c0022480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022484:	83 ec 08             	sub    esp,0x8
c0022487:	68 1c 93 02 c0       	push   0xc002931c
c002248c:	50                   	push   eax
c002248d:	e8 38 1b ff ff       	call   c0013fca <InterruptController::InterruptController(char const*)>
c0022492:	83 c4 10             	add    esp,0x10
c0022495:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c002249a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002249e:	89 10                	mov    DWORD PTR [eax],edx
c00224a0:	a0 60 c8 02 c0       	mov    al,ds:0xc002c860
c00224a5:	83 f0 01             	xor    eax,0x1
c00224a8:	84 c0                	test   al,al
c00224aa:	0f 84 96 00 00 00    	je     c0022546 <APIC::APIC()+0xca>
c00224b0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00224b5:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c00224ba:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00224be:	73 7f                	jae    c002253f <APIC::APIC()+0xc3>
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	68 68 01 00 00       	push   0x168
c00224c8:	e8 bb fc fe ff       	call   c0012188 <operator new(unsigned long)>
c00224cd:	83 c4 10             	add    esp,0x10
c00224d0:	89 c3                	mov    ebx,eax
c00224d2:	83 ec 0c             	sub    esp,0xc
c00224d5:	53                   	push   ebx
c00224d6:	e8 79 ff ff ff       	call   c0022454 <IOAPIC::IOAPIC()>
c00224db:	83 c4 10             	add    esp,0x10
c00224de:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00224e2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00224e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224eb:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00224f2:	a1 20 c8 02 c0       	mov    eax,ds:0xc002c820
c00224f7:	40                   	inc    eax
c00224f8:	a3 20 c8 02 c0       	mov    ds:0xc002c820,eax
c00224fd:	a1 c8 a5 02 c0       	mov    eax,ds:0xc002a5c8
c0022502:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022508:	83 ec 08             	sub    esp,0x8
c002250b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002250f:	50                   	push   eax
c0022510:	e8 6d 11 ff ff       	call   c0013682 <Device::addChild(Device*)>
c0022515:	83 c4 10             	add    esp,0x10
c0022518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002251c:	8b 00                	mov    eax,DWORD PTR [eax]
c002251e:	83 c0 08             	add    eax,0x8
c0022521:	8b 00                	mov    eax,DWORD PTR [eax]
c0022523:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022528:	6a 00                	push   0x0
c002252a:	6a 00                	push   0x0
c002252c:	52                   	push   edx
c002252d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022531:	ff d0                	call   eax
c0022533:	83 c4 10             	add    esp,0x10
c0022536:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002253a:	e9 76 ff ff ff       	jmp    c00224b5 <APIC::APIC()+0x39>
c002253f:	c6 05 60 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c860,0x1
c0022546:	90                   	nop
c0022547:	83 c4 18             	add    esp,0x18
c002254a:	5b                   	pop    ebx
c002254b:	c3                   	ret    

c002254c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002254c:	55                   	push   ebp
c002254d:	89 e5                	mov    ebp,esp
c002254f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022552:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022558:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002255b:	72 1d                	jb     c002257a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002255d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022560:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022569:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002256f:	01 d0                	add    eax,edx
c0022571:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022574:	73 04                	jae    c002257a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022576:	b0 01                	mov    al,0x1
c0022578:	eb 02                	jmp    c002257c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002257a:	b0 00                	mov    al,0x0
c002257c:	5d                   	pop    ebp
c002257d:	c3                   	ret    

c002257e <IOAPIC::read(int)>:
c002257e:	55                   	push   ebp
c002257f:	89 e5                	mov    ebp,esp
c0022581:	83 ec 10             	sub    esp,0x10
c0022584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022587:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002258d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022590:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022593:	0f b6 d0             	movzx  edx,al
c0022596:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022599:	89 10                	mov    DWORD PTR [eax],edx
c002259b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002259e:	83 c0 10             	add    eax,0x10
c00225a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00225a3:	c9                   	leave  
c00225a4:	c3                   	ret    
c00225a5:	90                   	nop

c00225a6 <IOAPIC::open(int, int, void*)>:
c00225a6:	55                   	push   ebp
c00225a7:	89 e5                	mov    ebp,esp
c00225a9:	57                   	push   edi
c00225aa:	56                   	push   esi
c00225ab:	53                   	push   ebx
c00225ac:	83 ec 0c             	sub    esp,0xc
c00225af:	83 ec 0c             	sub    esp,0xc
c00225b2:	68 47 93 02 c0       	push   0xc0029347
c00225b7:	e8 bb fc fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00225bc:	83 c4 10             	add    esp,0x10
c00225bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00225c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00225cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00225d4:	8b 14 85 e0 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5120]
c00225db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00225e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00225ed:	8b 14 85 60 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd50a0]
c00225f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225f7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00225fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022600:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022609:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002260f:	0f b6 f8             	movzx  edi,al
c0022612:	89 d0                	mov    eax,edx
c0022614:	ba 00 00 00 00       	mov    edx,0x0
c0022619:	89 c1                	mov    ecx,eax
c002261b:	80 e5 ff             	and    ch,0xff
c002261e:	89 cb                	mov    ebx,ecx
c0022620:	0f b6 f2             	movzx  esi,dl
c0022623:	89 d8                	mov    eax,ebx
c0022625:	89 f2                	mov    edx,esi
c0022627:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002262a:	8d 5f 08             	lea    ebx,[edi+0x8]
c002262d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022631:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022635:	83 e0 00             	and    eax,0x0
c0022638:	09 d0                	or     eax,edx
c002263a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002263e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022641:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022647:	8d 50 01             	lea    edx,[eax+0x1]
c002264a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002264d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022653:	0f b6 d0             	movzx  edx,al
c0022656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022659:	83 c2 08             	add    edx,0x8
c002265c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022660:	0f b6 c9             	movzx  ecx,cl
c0022663:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022669:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002266d:	83 ec 08             	sub    esp,0x8
c0022670:	6a 01                	push   0x1
c0022672:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022675:	e8 04 ff ff ff       	call   c002257e <IOAPIC::read(int)>
c002267a:	83 c4 10             	add    esp,0x10
c002267d:	c1 f8 10             	sar    eax,0x10
c0022680:	0f b6 c0             	movzx  eax,al
c0022683:	8d 50 01             	lea    edx,[eax+0x1]
c0022686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022689:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002268f:	b8 00 00 00 00       	mov    eax,0x0
c0022694:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022697:	5b                   	pop    ebx
c0022698:	5e                   	pop    esi
c0022699:	5f                   	pop    edi
c002269a:	5d                   	pop    ebp
c002269b:	c3                   	ret    

c002269c <IOAPIC::write(int, int)>:
c002269c:	55                   	push   ebp
c002269d:	89 e5                	mov    ebp,esp
c002269f:	83 ec 10             	sub    esp,0x10
c00226a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00226ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00226ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226b1:	0f b6 d0             	movzx  edx,al
c00226b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00226b7:	89 10                	mov    DWORD PTR [eax],edx
c00226b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00226bc:	8d 50 10             	lea    edx,[eax+0x10]
c00226bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00226c2:	89 02                	mov    DWORD PTR [edx],eax
c00226c4:	90                   	nop
c00226c5:	c9                   	leave  
c00226c6:	c3                   	ret    
c00226c7:	90                   	nop

c00226c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00226c8:	55                   	push   ebp
c00226c9:	89 e5                	mov    ebp,esp
c00226cb:	53                   	push   ebx
c00226cc:	83 ec 2c             	sub    esp,0x2c
c00226cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226d2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00226d5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00226d8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00226db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00226de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00226e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00226e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00226e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00226ea:	88 d8                	mov    al,bl
c00226ec:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00226ef:	88 c8                	mov    al,cl
c00226f1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00226f4:	88 d0                	mov    al,dl
c00226f6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00226f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00226fd:	83 c0 08             	add    eax,0x8
c0022700:	01 c0                	add    eax,eax
c0022702:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022705:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022709:	83 c0 08             	add    eax,0x8
c002270c:	01 c0                	add    eax,eax
c002270e:	40                   	inc    eax
c002270f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022712:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022715:	50                   	push   eax
c0022716:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022719:	e8 60 fe ff ff       	call   c002257e <IOAPIC::read(int)>
c002271e:	83 c4 08             	add    esp,0x8
c0022721:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022724:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002272b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002272e:	c1 e0 18             	shl    eax,0x18
c0022731:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022734:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022737:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002273a:	52                   	push   edx
c002273b:	50                   	push   eax
c002273c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002273f:	e8 58 ff ff ff       	call   c002269c <IOAPIC::write(int, int)>
c0022744:	83 c4 0c             	add    esp,0xc
c0022747:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002274a:	50                   	push   eax
c002274b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002274e:	e8 2b fe ff ff       	call   c002257e <IOAPIC::read(int)>
c0022753:	83 c4 08             	add    esp,0x8
c0022756:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022759:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0022760:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0022767:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002276e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022772:	74 09                	je     c002277d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0022774:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002277b:	eb 07                	jmp    c0022784 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002277d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0022784:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0022788:	74 09                	je     c0022793 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002278a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0022791:	eb 07                	jmp    c002279a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0022793:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002279a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00227a1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00227a5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00227a8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00227ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00227ae:	52                   	push   edx
c00227af:	50                   	push   eax
c00227b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227b3:	e8 e4 fe ff ff       	call   c002269c <IOAPIC::write(int, int)>
c00227b8:	83 c4 0c             	add    esp,0xc
c00227bb:	90                   	nop
c00227bc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00227bf:	c9                   	leave  
c00227c0:	c3                   	ret    
c00227c1:	90                   	nop

c00227c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00227c2:	55                   	push   ebp
c00227c3:	89 e5                	mov    ebp,esp
c00227c5:	57                   	push   edi
c00227c6:	56                   	push   esi
c00227c7:	53                   	push   ebx
c00227c8:	83 ec 2c             	sub    esp,0x2c
c00227cb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00227ce:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00227d1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00227d5:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00227d9:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00227dd:	74 5a                	je     c0022839 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00227df:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00227e3:	7f 44                	jg     c0022829 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00227e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227e8:	05 a0 98 02 c0       	add    eax,0xc00298a0
c00227ed:	8a 00                	mov    al,BYTE PTR [eax]
c00227ef:	0f b6 c0             	movzx  eax,al
c00227f2:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00227f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227f8:	66 8b 84 00 80 ae 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5180]
c0022800:	0f b7 c0             	movzx  eax,ax
c0022803:	83 e0 02             	and    eax,0x2
c0022806:	85 c0                	test   eax,eax
c0022808:	74 04                	je     c002280e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002280a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002280e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022811:	66 8b 84 00 80 ae 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd5180]
c0022819:	0f b7 c0             	movzx  eax,ax
c002281c:	83 e0 08             	and    eax,0x8
c002281f:	85 c0                	test   eax,eax
c0022821:	74 16                	je     c0022839 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022823:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022827:	eb 10                	jmp    c0022839 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022829:	83 ec 0c             	sub    esp,0xc
c002282c:	68 58 93 02 c0       	push   0xc0029358
c0022831:	e8 a1 62 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0022836:	83 c4 10             	add    esp,0x10
c0022839:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002283d:	a1 20 c8 02 c0       	mov    eax,ds:0xc002c820
c0022842:	83 ec 08             	sub    esp,0x8
c0022845:	50                   	push   eax
c0022846:	68 90 93 02 c0       	push   0xc0029390
c002284b:	e8 27 fa fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0022850:	83 c4 10             	add    esp,0x10
c0022853:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002285a:	a1 20 c8 02 c0       	mov    eax,ds:0xc002c820
c002285f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0022862:	7d 67                	jge    c00228cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022864:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022867:	8b 04 85 40 c8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd37c0]
c002286e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022871:	83 ec 08             	sub    esp,0x8
c0022874:	52                   	push   edx
c0022875:	50                   	push   eax
c0022876:	e8 d1 fc ff ff       	call   c002254c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	84 c0                	test   al,al
c0022880:	74 44                	je     c00228c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0022882:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022885:	8b 1c 85 40 c8 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd37c0]
c002288c:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0022890:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022893:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0022897:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002289a:	83 c0 20             	add    eax,0x20
c002289d:	0f b6 f0             	movzx  esi,al
c00228a0:	e8 ab 50 ff ff       	call   c0017950 <CPU::getNumber()>
c00228a5:	99                   	cdq    
c00228a6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00228a9:	0f b6 c9             	movzx  ecx,cl
c00228ac:	83 ec 04             	sub    esp,0x4
c00228af:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00228b2:	57                   	push   edi
c00228b3:	56                   	push   esi
c00228b4:	52                   	push   edx
c00228b5:	50                   	push   eax
c00228b6:	51                   	push   ecx
c00228b7:	53                   	push   ebx
c00228b8:	e8 0b fe ff ff       	call   c00226c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00228bd:	83 c4 20             	add    esp,0x20
c00228c0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00228c4:	eb 05                	jmp    c00228cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00228c6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00228c9:	eb 8f                	jmp    c002285a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00228cb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00228ce:	83 f0 01             	xor    eax,0x1
c00228d1:	84 c0                	test   al,al
c00228d3:	74 10                	je     c00228e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00228d5:	83 ec 0c             	sub    esp,0xc
c00228d8:	68 a7 93 02 c0       	push   0xc00293a7
c00228dd:	e8 f5 61 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c00228e2:	83 c4 10             	add    esp,0x10
c00228e5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00228e9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00228f0:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00228f4:	7f 65                	jg     c002295b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00228f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00228f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00228fc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022903:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022906:	01 ca                	add    edx,ecx
c0022908:	83 c2 54             	add    edx,0x54
c002290b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002290f:	85 c0                	test   eax,eax
c0022911:	75 43                	jne    c0022956 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0022913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022916:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022919:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022920:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022923:	01 ca                	add    edx,ecx
c0022925:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022928:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002292b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002292f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022932:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022935:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002293c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002293f:	01 ca                	add    edx,ecx
c0022941:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022947:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002294a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002294e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022951:	83 e8 20             	sub    eax,0x20
c0022954:	eb 1a                	jmp    c0022970 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0022956:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0022959:	eb 95                	jmp    c00228f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002295b:	83 ec 0c             	sub    esp,0xc
c002295e:	68 b4 93 02 c0       	push   0xc00293b4
c0022963:	e8 6f 61 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0022968:	83 c4 10             	add    esp,0x10
c002296b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022970:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022973:	5b                   	pop    ebx
c0022974:	5e                   	pop    esi
c0022975:	5f                   	pop    edi
c0022976:	5d                   	pop    ebp
c0022977:	c3                   	ret    

c0022978 <PIC::disable()>:
c0022978:	55                   	push   ebp
c0022979:	89 e5                	mov    ebp,esp
c002297b:	83 ec 10             	sub    esp,0x10
c002297e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022984:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022988:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002298b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002298f:	ee                   	out    dx,al
c0022990:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022996:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002299a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002299d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00229a1:	ee                   	out    dx,al
c00229a2:	90                   	nop
c00229a3:	c9                   	leave  
c00229a4:	c3                   	ret    
c00229a5:	90                   	nop

c00229a6 <PIC::close(int, int, void*)>:
c00229a6:	55                   	push   ebp
c00229a7:	89 e5                	mov    ebp,esp
c00229a9:	83 ec 08             	sub    esp,0x8
c00229ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229af:	8b 00                	mov    eax,DWORD PTR [eax]
c00229b1:	83 c0 3c             	add    eax,0x3c
c00229b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00229b6:	83 ec 0c             	sub    esp,0xc
c00229b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229bc:	ff d0                	call   eax
c00229be:	83 c4 10             	add    esp,0x10
c00229c1:	b8 00 00 00 00       	mov    eax,0x0
c00229c6:	c9                   	leave  
c00229c7:	c3                   	ret    

c00229c8 <PIC::PIC()>:
c00229c8:	83 ec 0c             	sub    esp,0xc
c00229cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cf:	83 ec 08             	sub    esp,0x8
c00229d2:	68 60 94 02 c0       	push   0xc0029460
c00229d7:	50                   	push   eax
c00229d8:	e8 ed 15 ff ff       	call   c0013fca <InterruptController::InterruptController(char const*)>
c00229dd:	83 c4 10             	add    esp,0x10
c00229e0:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c00229e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e9:	89 10                	mov    DWORD PTR [eax],edx
c00229eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f5:	0f b6 d0             	movzx  edx,al
c00229f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229fc:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a0d:	0f b6 d0             	movzx  edx,al
c0022a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a14:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a23:	8d 50 01             	lea    edx,[eax+0x1]
c0022a26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a2a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a30:	0f b6 d0             	movzx  edx,al
c0022a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a37:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a3b:	83 e1 3f             	and    ecx,0x3f
c0022a3e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a46:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a4c:	0f b6 d0             	movzx  edx,al
c0022a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a53:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0022a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a64:	0f b6 d0             	movzx  edx,al
c0022a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a7a:	8d 50 01             	lea    edx,[eax+0x1]
c0022a7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a81:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a87:	0f b6 d0             	movzx  edx,al
c0022a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a8e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a92:	83 e1 3f             	and    ecx,0x3f
c0022a95:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a99:	90                   	nop
c0022a9a:	83 c4 0c             	add    esp,0xc
c0022a9d:	c3                   	ret    

c0022a9e <PIC::ioWait()>:
c0022a9e:	eb 00                	jmp    c0022aa0 <PIC::ioWait()+0x2>
c0022aa0:	eb 00                	jmp    c0022aa2 <PIC::ioWait()+0x4>
c0022aa2:	90                   	nop
c0022aa3:	c3                   	ret    

c0022aa4 <PIC::getIRQReg(int)>:
c0022aa4:	55                   	push   ebp
c0022aa5:	89 e5                	mov    ebp,esp
c0022aa7:	83 ec 10             	sub    esp,0x10
c0022aaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022aad:	0f b6 c0             	movzx  eax,al
c0022ab0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022ab6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022ab9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022abc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022ac0:	ee                   	out    dx,al
c0022ac1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022ac4:	0f b6 c0             	movzx  eax,al
c0022ac7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022acd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022ad0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022ad3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022ad7:	ee                   	out    dx,al
c0022ad8:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022ade:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022ae2:	89 c2                	mov    edx,eax
c0022ae4:	ec                   	in     al,dx
c0022ae5:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022ae8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022aeb:	0f b6 c0             	movzx  eax,al
c0022aee:	c1 e0 08             	shl    eax,0x8
c0022af1:	89 c1                	mov    ecx,eax
c0022af3:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022af9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022afd:	89 c2                	mov    edx,eax
c0022aff:	ec                   	in     al,dx
c0022b00:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022b03:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022b06:	0f b6 c0             	movzx  eax,al
c0022b09:	09 c8                	or     eax,ecx
c0022b0b:	c9                   	leave  
c0022b0c:	c3                   	ret    
c0022b0d:	90                   	nop

c0022b0e <PIC::eoi(unsigned char)>:
c0022b0e:	55                   	push   ebp
c0022b0f:	89 e5                	mov    ebp,esp
c0022b11:	83 ec 14             	sub    esp,0x14
c0022b14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b17:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022b1a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022b1e:	75 1e                	jne    c0022b3e <PIC::eoi(unsigned char)+0x30>
c0022b20:	6a 0b                	push   0xb
c0022b22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b25:	e8 7a ff ff ff       	call   c0022aa4 <PIC::getIRQReg(int)>
c0022b2a:	83 c4 08             	add    esp,0x8
c0022b2d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022b31:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022b35:	25 80 00 00 00       	and    eax,0x80
c0022b3a:	85 c0                	test   eax,eax
c0022b3c:	74 5f                	je     c0022b9d <PIC::eoi(unsigned char)+0x8f>
c0022b3e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022b42:	75 2d                	jne    c0022b71 <PIC::eoi(unsigned char)+0x63>
c0022b44:	6a 0b                	push   0xb
c0022b46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b49:	e8 56 ff ff ff       	call   c0022aa4 <PIC::getIRQReg(int)>
c0022b4e:	83 c4 08             	add    esp,0x8
c0022b51:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022b55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022b58:	66 85 c0             	test   ax,ax
c0022b5b:	78 14                	js     c0022b71 <PIC::eoi(unsigned char)+0x63>
c0022b5d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022b63:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022b67:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022b6a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022b6e:	ee                   	out    dx,al
c0022b6f:	eb 2d                	jmp    c0022b9e <PIC::eoi(unsigned char)+0x90>
c0022b71:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022b75:	76 12                	jbe    c0022b89 <PIC::eoi(unsigned char)+0x7b>
c0022b77:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022b7d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022b81:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022b84:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022b88:	ee                   	out    dx,al
c0022b89:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022b8f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022b93:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b96:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b9a:	ee                   	out    dx,al
c0022b9b:	eb 01                	jmp    c0022b9e <PIC::eoi(unsigned char)+0x90>
c0022b9d:	90                   	nop
c0022b9e:	c9                   	leave  
c0022b9f:	c3                   	ret    

c0022ba0 <PIC::remap()>:
c0022ba0:	55                   	push   ebp
c0022ba1:	89 e5                	mov    ebp,esp
c0022ba3:	83 ec 48             	sub    esp,0x48
c0022ba6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022bad:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022bb4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022bba:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022bbd:	89 c2                	mov    edx,eax
c0022bbf:	ec                   	in     al,dx
c0022bc0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022bc3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022bc6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022bc9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022bcf:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022bd2:	89 c2                	mov    edx,eax
c0022bd4:	ec                   	in     al,dx
c0022bd5:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022bd8:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022bdb:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022bde:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022be4:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022be8:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022beb:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022bee:	ee                   	out    dx,al
c0022bef:	83 ec 0c             	sub    esp,0xc
c0022bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bf5:	e8 a4 fe ff ff       	call   c0022a9e <PIC::ioWait()>
c0022bfa:	83 c4 10             	add    esp,0x10
c0022bfd:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022c03:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022c07:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022c0a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022c0d:	ee                   	out    dx,al
c0022c0e:	83 ec 0c             	sub    esp,0xc
c0022c11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c14:	e8 85 fe ff ff       	call   c0022a9e <PIC::ioWait()>
c0022c19:	83 c4 10             	add    esp,0x10
c0022c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022c1f:	0f b6 c0             	movzx  eax,al
c0022c22:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022c28:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022c2b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022c2e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022c31:	ee                   	out    dx,al
c0022c32:	83 ec 0c             	sub    esp,0xc
c0022c35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c38:	e8 61 fe ff ff       	call   c0022a9e <PIC::ioWait()>
c0022c3d:	83 c4 10             	add    esp,0x10
c0022c40:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022c43:	0f b6 c0             	movzx  eax,al
c0022c46:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022c4c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022c4f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022c52:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022c55:	ee                   	out    dx,al
c0022c56:	83 ec 0c             	sub    esp,0xc
c0022c59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c5c:	e8 3d fe ff ff       	call   c0022a9e <PIC::ioWait()>
c0022c61:	83 c4 10             	add    esp,0x10
c0022c64:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022c6a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022c6e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022c71:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022c74:	ee                   	out    dx,al
c0022c75:	83 ec 0c             	sub    esp,0xc
c0022c78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c7b:	e8 1e fe ff ff       	call   c0022a9e <PIC::ioWait()>
c0022c80:	83 c4 10             	add    esp,0x10
c0022c83:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022c89:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022c8d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022c90:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022c93:	ee                   	out    dx,al
c0022c94:	83 ec 0c             	sub    esp,0xc
c0022c97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c9a:	e8 ff fd ff ff       	call   c0022a9e <PIC::ioWait()>
c0022c9f:	83 c4 10             	add    esp,0x10
c0022ca2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022ca8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022cac:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022caf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022cb2:	ee                   	out    dx,al
c0022cb3:	83 ec 0c             	sub    esp,0xc
c0022cb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cb9:	e8 e0 fd ff ff       	call   c0022a9e <PIC::ioWait()>
c0022cbe:	83 c4 10             	add    esp,0x10
c0022cc1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022cc7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022ccb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022cce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022cd1:	ee                   	out    dx,al
c0022cd2:	83 ec 0c             	sub    esp,0xc
c0022cd5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cd8:	e8 c1 fd ff ff       	call   c0022a9e <PIC::ioWait()>
c0022cdd:	83 c4 10             	add    esp,0x10
c0022ce0:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022ce4:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022cea:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022ced:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022cf0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022cf3:	ee                   	out    dx,al
c0022cf4:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022cf8:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022cfe:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022d01:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022d04:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022d07:	ee                   	out    dx,al
c0022d08:	90                   	nop
c0022d09:	c9                   	leave  
c0022d0a:	c3                   	ret    
c0022d0b:	90                   	nop

c0022d0c <PIC::open(int, int, void*)>:
c0022d0c:	55                   	push   ebp
c0022d0d:	89 e5                	mov    ebp,esp
c0022d0f:	83 ec 18             	sub    esp,0x18
c0022d12:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022d18:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022d1c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022d1f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022d23:	ee                   	out    dx,al
c0022d24:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022d2a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022d2e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022d31:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022d35:	ee                   	out    dx,al
c0022d36:	83 ec 0c             	sub    esp,0xc
c0022d39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d3c:	e8 5f fe ff ff       	call   c0022ba0 <PIC::remap()>
c0022d41:	83 c4 10             	add    esp,0x10
c0022d44:	b8 00 00 00 00       	mov    eax,0x0
c0022d49:	c9                   	leave  
c0022d4a:	c3                   	ret    
c0022d4b:	90                   	nop

c0022d4c <APICTimer::close(int, int, void*)>:
c0022d4c:	b8 00 00 00 00       	mov    eax,0x0
c0022d51:	c3                   	ret    

c0022d52 <apicTimerHandler(regs*, void*)>:
c0022d52:	83 ec 0c             	sub    esp,0xc
c0022d55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d5b:	99                   	cdq    
c0022d5c:	52                   	push   edx
c0022d5d:	50                   	push   eax
c0022d5e:	6a 00                	push   0x0
c0022d60:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022d65:	e8 72 07 00 00       	call   c00234dc <__udivdi3>
c0022d6a:	83 c4 10             	add    esp,0x10
c0022d6d:	83 ec 08             	sub    esp,0x8
c0022d70:	52                   	push   edx
c0022d71:	50                   	push   eax
c0022d72:	e8 50 30 ff ff       	call   c0015dc7 <timerHandler(unsigned long long)>
c0022d77:	83 c4 10             	add    esp,0x10
c0022d7a:	90                   	nop
c0022d7b:	83 c4 0c             	add    esp,0xc
c0022d7e:	c3                   	ret    
c0022d7f:	90                   	nop

c0022d80 <APICTimer::write(int)>:
c0022d80:	53                   	push   ebx
c0022d81:	83 ec 28             	sub    esp,0x28
c0022d84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022d88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d8c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d92:	e8 bd 4b ff ff       	call   c0017954 <CPU::current()>
c0022d97:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d9d:	83 ec 0c             	sub    esp,0xc
c0022da0:	50                   	push   eax
c0022da1:	e8 7c f5 ff ff       	call   c0022322 <APIC::getBase()>
c0022da6:	83 c4 10             	add    esp,0x10
c0022da9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dad:	a1 30 ac 02 c0       	mov    eax,ds:0xc002ac30
c0022db2:	8b 15 34 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac34
c0022db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022dbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dc4:	05 e0 03 00 00       	add    eax,0x3e0
c0022dc9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022dcf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dd3:	05 80 03 00 00       	add    eax,0x380
c0022dd8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022dde:	fb                   	sti    
c0022ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022de7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022dec:	83 d2 00             	adc    edx,0x0
c0022def:	89 c1                	mov    ecx,eax
c0022df1:	89 d3                	mov    ebx,edx
c0022df3:	a1 30 ac 02 c0       	mov    eax,ds:0xc002ac30
c0022df8:	8b 15 34 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac34
c0022dfe:	39 c8                	cmp    eax,ecx
c0022e00:	89 d0                	mov    eax,edx
c0022e02:	19 d8                	sbb    eax,ebx
c0022e04:	73 02                	jae    c0022e08 <APICTimer::write(int)+0x88>
c0022e06:	eb d7                	jmp    c0022ddf <APICTimer::write(int)+0x5f>
c0022e08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e0c:	05 20 03 00 00       	add    eax,0x320
c0022e11:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e1b:	05 90 03 00 00       	add    eax,0x390
c0022e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e22:	f7 d0                	not    eax
c0022e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e28:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e30:	ba 00 00 00 00       	mov    edx,0x0
c0022e35:	f7 f3                	div    ebx
c0022e37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022e45:	0d 00 00 02 00       	or     eax,0x20000
c0022e4a:	89 c2                	mov    edx,eax
c0022e4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e50:	05 20 03 00 00       	add    eax,0x320
c0022e55:	89 10                	mov    DWORD PTR [eax],edx
c0022e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e5b:	05 e0 03 00 00       	add    eax,0x3e0
c0022e60:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022e66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e6a:	05 80 03 00 00       	add    eax,0x380
c0022e6f:	89 c2                	mov    edx,eax
c0022e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e75:	89 02                	mov    DWORD PTR [edx],eax
c0022e77:	90                   	nop
c0022e78:	83 c4 28             	add    esp,0x28
c0022e7b:	5b                   	pop    ebx
c0022e7c:	c3                   	ret    
c0022e7d:	90                   	nop

c0022e7e <APICTimer::open(int, int, void*)>:
c0022e7e:	57                   	push   edi
c0022e7f:	56                   	push   esi
c0022e80:	53                   	push   ebx
c0022e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e85:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e87:	83 c0 24             	add    eax,0x24
c0022e8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e8c:	83 ec 08             	sub    esp,0x8
c0022e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e97:	ff d0                	call   eax
c0022e99:	83 c4 10             	add    esp,0x10
c0022e9c:	e8 b3 4a ff ff       	call   c0017954 <CPU::current()>
c0022ea1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022ea7:	83 ec 0c             	sub    esp,0xc
c0022eaa:	50                   	push   eax
c0022eab:	e8 72 f4 ff ff       	call   c0022322 <APIC::getBase()>
c0022eb0:	83 c4 10             	add    esp,0x10
c0022eb3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022ec3:	0f b6 f8             	movzx  edi,al
c0022ec6:	89 d0                	mov    eax,edx
c0022ec8:	ba 00 00 00 00       	mov    edx,0x0
c0022ecd:	89 c1                	mov    ecx,eax
c0022ecf:	80 e5 ff             	and    ch,0xff
c0022ed2:	89 cb                	mov    ebx,ecx
c0022ed4:	0f b6 f2             	movzx  esi,dl
c0022ed7:	89 d8                	mov    eax,ebx
c0022ed9:	89 f2                	mov    edx,esi
c0022edb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022edf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022ee2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022ee6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022eea:	83 e0 00             	and    eax,0x0
c0022eed:	09 d0                	or     eax,edx
c0022eef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022efd:	8d 50 01             	lea    edx,[eax+0x1]
c0022f00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f04:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022f0a:	0f b6 d0             	movzx  edx,al
c0022f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f11:	83 c2 08             	add    edx,0x8
c0022f14:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022f18:	0f b6 c9             	movzx  ecx,cl
c0022f1b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022f21:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f2d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022f3b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022f41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022f45:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022f4b:	83 ec 0c             	sub    esp,0xc
c0022f4e:	51                   	push   ecx
c0022f4f:	6a 01                	push   0x1
c0022f51:	68 52 2d 02 c0       	push   0xc0022d52
c0022f56:	52                   	push   edx
c0022f57:	50                   	push   eax
c0022f58:	e8 79 06 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022f5d:	83 c4 20             	add    esp,0x20
c0022f60:	89 c2                	mov    edx,eax
c0022f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f66:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f6c:	b8 00 00 00 00       	mov    eax,0x0
c0022f71:	5b                   	pop    ebx
c0022f72:	5e                   	pop    esi
c0022f73:	5f                   	pop    edi
c0022f74:	c3                   	ret    
c0022f75:	90                   	nop

c0022f76 <APICTimer::APICTimer()>:
c0022f76:	83 ec 0c             	sub    esp,0xc
c0022f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7d:	83 ec 08             	sub    esp,0x8
c0022f80:	68 cc 94 02 c0       	push   0xc00294cc
c0022f85:	50                   	push   eax
c0022f86:	e8 ad 2d ff ff       	call   c0015d38 <Timer::Timer(char const*)>
c0022f8b:	83 c4 10             	add    esp,0x10
c0022f8e:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c0022f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f97:	89 10                	mov    DWORD PTR [eax],edx
c0022f99:	90                   	nop
c0022f9a:	83 c4 0c             	add    esp,0xc
c0022f9d:	c3                   	ret    

c0022f9e <PIT::write(int)>:
c0022f9e:	83 ec 10             	sub    esp,0x10
c0022fa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022fa5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022fa9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022faf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022fb3:	a3 64 c8 02 c0       	mov    ds:0xc002c864,eax
c0022fb8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022fbd:	99                   	cdq    
c0022fbe:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022fc6:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022fcd:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022fd2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022fd6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022fdb:	ee                   	out    dx,al
c0022fdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022fe0:	0f b6 c0             	movzx  eax,al
c0022fe3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022fea:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022fee:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022ff2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022ff7:	ee                   	out    dx,al
c0022ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ffc:	c1 f8 08             	sar    eax,0x8
c0022fff:	0f b6 c0             	movzx  eax,al
c0023002:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023009:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002300d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0023011:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0023016:	ee                   	out    dx,al
c0023017:	90                   	nop
c0023018:	83 c4 10             	add    esp,0x10
c002301b:	c3                   	ret    

c002301c <pitHandler(regs*, void*)>:
c002301c:	83 ec 0c             	sub    esp,0xc
c002301f:	a1 64 c8 02 c0       	mov    eax,ds:0xc002c864
c0023024:	99                   	cdq    
c0023025:	52                   	push   edx
c0023026:	50                   	push   eax
c0023027:	6a 00                	push   0x0
c0023029:	68 00 ca 9a 3b       	push   0x3b9aca00
c002302e:	e8 a9 04 00 00       	call   c00234dc <__udivdi3>
c0023033:	83 c4 10             	add    esp,0x10
c0023036:	83 ec 08             	sub    esp,0x8
c0023039:	52                   	push   edx
c002303a:	50                   	push   eax
c002303b:	e8 87 2d ff ff       	call   c0015dc7 <timerHandler(unsigned long long)>
c0023040:	83 c4 10             	add    esp,0x10
c0023043:	90                   	nop
c0023044:	83 c4 0c             	add    esp,0xc
c0023047:	c3                   	ret    

c0023048 <PIT::open(int, int, void*)>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304f:	8b 00                	mov    eax,DWORD PTR [eax]
c0023051:	83 c0 24             	add    eax,0x24
c0023054:	8b 00                	mov    eax,DWORD PTR [eax]
c0023056:	83 ec 08             	sub    esp,0x8
c0023059:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002305d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023061:	ff d0                	call   eax
c0023063:	83 c4 10             	add    esp,0x10
c0023066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306a:	83 ec 0c             	sub    esp,0xc
c002306d:	6a 00                	push   0x0
c002306f:	6a 01                	push   0x1
c0023071:	68 1c 30 02 c0       	push   0xc002301c
c0023076:	6a 00                	push   0x0
c0023078:	50                   	push   eax
c0023079:	e8 58 05 ff ff       	call   c00135d6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002307e:	83 c4 20             	add    esp,0x20
c0023081:	89 c2                	mov    edx,eax
c0023083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023087:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002308d:	b8 00 00 00 00       	mov    eax,0x0
c0023092:	83 c4 0c             	add    esp,0xc
c0023095:	c3                   	ret    

c0023096 <PIT::close(int, int, void*)>:
c0023096:	83 ec 0c             	sub    esp,0xc
c0023099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00230a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ab:	6a 01                	push   0x1
c00230ad:	68 1c 30 02 c0       	push   0xc002301c
c00230b2:	6a 00                	push   0x0
c00230b4:	50                   	push   eax
c00230b5:	e8 7a 05 ff ff       	call   c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00230ba:	83 c4 10             	add    esp,0x10
c00230bd:	b8 00 00 00 00       	mov    eax,0x0
c00230c2:	83 c4 0c             	add    esp,0xc
c00230c5:	c3                   	ret    

c00230c6 <PIT::PIT()>:
c00230c6:	83 ec 0c             	sub    esp,0xc
c00230c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230cd:	83 ec 08             	sub    esp,0x8
c00230d0:	68 08 95 02 c0       	push   0xc0029508
c00230d5:	50                   	push   eax
c00230d6:	e8 5d 2c ff ff       	call   c0015d38 <Timer::Timer(char const*)>
c00230db:	83 c4 10             	add    esp,0x10
c00230de:	ba 30 95 02 c0       	mov    edx,0xc0029530
c00230e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e7:	89 10                	mov    DWORD PTR [eax],edx
c00230e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00230f3:	0f b6 d0             	movzx  edx,al
c00230f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230fa:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0023101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023105:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002310b:	0f b6 d0             	movzx  edx,al
c002310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023112:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023121:	8d 50 01             	lea    edx,[eax+0x1]
c0023124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023128:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002312e:	0f b6 d0             	movzx  edx,al
c0023131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023135:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023139:	83 e1 3f             	and    ecx,0x3f
c002313c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023140:	90                   	nop
c0023141:	83 c4 0c             	add    esp,0xc
c0023144:	c3                   	ret    
c0023145:	66 90                	xchg   ax,ax
c0023147:	66 90                	xchg   ax,ax
c0023149:	66 90                	xchg   ax,ax
c002314b:	66 90                	xchg   ax,ax
c002314d:	66 90                	xchg   ax,ax
c002314f:	90                   	nop

c0023150 <avxDetect>:
c0023150:	b8 00 00 00 00       	mov    eax,0x0
c0023155:	c3                   	ret    

c0023156 <avxSave>:
c0023156:	c3                   	ret    

c0023157 <avxLoad>:
c0023157:	c3                   	ret    

c0023158 <avxInit>:
c0023158:	c3                   	ret    

c0023159 <avxClose>:
c0023159:	c3                   	ret    
c002315a:	66 90                	xchg   ax,ax
c002315c:	66 90                	xchg   ax,ax
c002315e:	66 90                	xchg   ax,ax

c0023160 <sseDetect>:
c0023160:	b8 01 00 00 00       	mov    eax,0x1
c0023165:	0f a2                	cpuid  
c0023167:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002316d:	74 06                	je     c0023175 <sseDetect.noSSE>
c002316f:	b8 01 00 00 00       	mov    eax,0x1
c0023174:	c3                   	ret    

c0023175 <sseDetect.noSSE>:
c0023175:	b8 00 00 00 00       	mov    eax,0x0
c002317a:	c3                   	ret    

c002317b <sseSave>:
c002317b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023180:	c3                   	ret    

c0023181 <sseLoad>:
c0023181:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023186:	c3                   	ret    

c0023187 <sseInit>:
c0023187:	e8 40 00 00 00       	call   c00231cc <x87Init>
c002318c:	0f 20 e0             	mov    eax,cr4
c002318f:	66 0d 00 06          	or     ax,0x600
c0023193:	0f 22 e0             	mov    cr4,eax
c0023196:	c3                   	ret    

c0023197 <sseClose>:
c0023197:	c3                   	ret    
c0023198:	66 90                	xchg   ax,ax
c002319a:	66 90                	xchg   ax,ax
c002319c:	66 90                	xchg   ax,ax
c002319e:	66 90                	xchg   ax,ax

c00231a0 <value_37F>:
c00231a0:	7f 03                	jg     c00231a5 <value_37A+0x1>

c00231a2 <value_37E>:
c00231a2:	7e 03                	jle    c00231a7 <x87Detect+0x1>

c00231a4 <value_37A>:
c00231a4:	7a 03                	jp     c00231a9 <x87Detect+0x3>

c00231a6 <x87Detect>:
c00231a6:	b8 01 00 00 00       	mov    eax,0x1
c00231ab:	0f a2                	cpuid  
c00231ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00231b3:	74 06                	je     c00231bb <x87Detect.nox87>
c00231b5:	b8 01 00 00 00       	mov    eax,0x1
c00231ba:	c3                   	ret    

c00231bb <x87Detect.nox87>:
c00231bb:	b8 00 00 00 00       	mov    eax,0x0
c00231c0:	c3                   	ret    

c00231c1 <x87Save>:
c00231c1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00231c6:	c3                   	ret    

c00231c7 <x87Load>:
c00231c7:	dd 64 24 08          	frstor [esp+0x8]
c00231cb:	c3                   	ret    

c00231cc <x87Init>:
c00231cc:	9b db e3             	finit  
c00231cf:	0f 20 c0             	mov    eax,cr0
c00231d2:	66 25 fb ff          	and    ax,0xfffb
c00231d6:	66 0d 22 00          	or     ax,0x22
c00231da:	0f 22 c0             	mov    cr0,eax
c00231dd:	0f 06                	clts   
c00231df:	d9 2d a4 31 02 c0    	fldcw  WORD PTR ds:0xc00231a4
c00231e5:	c3                   	ret    

c00231e6 <x87Close>:
c00231e6:	c3                   	ret    
c00231e7:	90                   	nop

c00231e8 <__do_global_ctors_aux>:
c00231e8:	a1 18 5d 02 c0       	mov    eax,ds:0xc0025d18
c00231ed:	83 f8 ff             	cmp    eax,0xffffffff
c00231f0:	74 1a                	je     c002320c <__do_global_ctors_aux+0x24>
c00231f2:	55                   	push   ebp
c00231f3:	89 e5                	mov    ebp,esp
c00231f5:	53                   	push   ebx
c00231f6:	52                   	push   edx
c00231f7:	bb 18 5d 02 c0       	mov    ebx,0xc0025d18
c00231fc:	ff d0                	call   eax
c00231fe:	83 eb 04             	sub    ebx,0x4
c0023201:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023203:	83 f8 ff             	cmp    eax,0xffffffff
c0023206:	75 f4                	jne    c00231fc <__do_global_ctors_aux+0x14>
c0023208:	58                   	pop    eax
c0023209:	5b                   	pop    ebx
c002320a:	5d                   	pop    ebp
c002320b:	c3                   	ret    
c002320c:	c3                   	ret    
c002320d:	66 90                	xchg   ax,ax
c002320f:	90                   	nop

c0023210 <__divdi3>:
c0023210:	55                   	push   ebp
c0023211:	57                   	push   edi
c0023212:	56                   	push   esi
c0023213:	53                   	push   ebx
c0023214:	83 ec 1c             	sub    esp,0x1c
c0023217:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002321b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002321f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023222:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023226:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002322a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002322e:	85 db                	test   ebx,ebx
c0023230:	0f 88 8e 00 00 00    	js     c00232c4 <__divdi3+0xb4>
c0023236:	89 dd                	mov    ebp,ebx
c0023238:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023240:	89 d3                	mov    ebx,edx
c0023242:	85 d2                	test   edx,edx
c0023244:	79 0d                	jns    c0023253 <__divdi3+0x43>
c0023246:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002324a:	f7 d8                	neg    eax
c002324c:	83 d2 00             	adc    edx,0x0
c002324f:	f7 da                	neg    edx
c0023251:	89 d3                	mov    ebx,edx
c0023253:	89 c7                	mov    edi,eax
c0023255:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023258:	85 db                	test   ebx,ebx
c002325a:	75 48                	jne    c00232a4 <__divdi3+0x94>
c002325c:	39 ef                	cmp    edi,ebp
c002325e:	76 24                	jbe    c0023284 <__divdi3+0x74>
c0023260:	89 ea                	mov    edx,ebp
c0023262:	f7 f7                	div    edi
c0023264:	89 c1                	mov    ecx,eax
c0023266:	31 f6                	xor    esi,esi
c0023268:	89 c8                	mov    eax,ecx
c002326a:	89 f2                	mov    edx,esi
c002326c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023270:	85 c9                	test   ecx,ecx
c0023272:	74 07                	je     c002327b <__divdi3+0x6b>
c0023274:	f7 d8                	neg    eax
c0023276:	83 d2 00             	adc    edx,0x0
c0023279:	f7 da                	neg    edx
c002327b:	83 c4 1c             	add    esp,0x1c
c002327e:	5b                   	pop    ebx
c002327f:	5e                   	pop    esi
c0023280:	5f                   	pop    edi
c0023281:	5d                   	pop    ebp
c0023282:	c3                   	ret    
c0023283:	90                   	nop
c0023284:	85 ff                	test   edi,edi
c0023286:	75 0b                	jne    c0023293 <__divdi3+0x83>
c0023288:	b8 01 00 00 00       	mov    eax,0x1
c002328d:	31 d2                	xor    edx,edx
c002328f:	f7 f3                	div    ebx
c0023291:	89 c7                	mov    edi,eax
c0023293:	31 d2                	xor    edx,edx
c0023295:	89 e8                	mov    eax,ebp
c0023297:	f7 f7                	div    edi
c0023299:	89 c6                	mov    esi,eax
c002329b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002329e:	f7 f7                	div    edi
c00232a0:	89 c1                	mov    ecx,eax
c00232a2:	eb c4                	jmp    c0023268 <__divdi3+0x58>
c00232a4:	39 eb                	cmp    ebx,ebp
c00232a6:	77 3c                	ja     c00232e4 <__divdi3+0xd4>
c00232a8:	0f bd f3             	bsr    esi,ebx
c00232ab:	83 f6 1f             	xor    esi,0x1f
c00232ae:	75 40                	jne    c00232f0 <__divdi3+0xe0>
c00232b0:	39 eb                	cmp    ebx,ebp
c00232b2:	72 09                	jb     c00232bd <__divdi3+0xad>
c00232b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00232b7:	0f 87 97 00 00 00    	ja     c0023354 <__divdi3+0x144>
c00232bd:	b9 01 00 00 00       	mov    ecx,0x1
c00232c2:	eb a4                	jmp    c0023268 <__divdi3+0x58>
c00232c4:	f7 d9                	neg    ecx
c00232c6:	83 d3 00             	adc    ebx,0x0
c00232c9:	f7 db                	neg    ebx
c00232cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00232ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00232d2:	89 dd                	mov    ebp,ebx
c00232d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00232dc:	e9 5f ff ff ff       	jmp    c0023240 <__divdi3+0x30>
c00232e1:	8d 76 00             	lea    esi,[esi+0x0]
c00232e4:	31 f6                	xor    esi,esi
c00232e6:	31 c9                	xor    ecx,ecx
c00232e8:	e9 7b ff ff ff       	jmp    c0023268 <__divdi3+0x58>
c00232ed:	8d 76 00             	lea    esi,[esi+0x0]
c00232f0:	b8 20 00 00 00       	mov    eax,0x20
c00232f5:	29 f0                	sub    eax,esi
c00232f7:	89 f1                	mov    ecx,esi
c00232f9:	d3 e3                	shl    ebx,cl
c00232fb:	89 fa                	mov    edx,edi
c00232fd:	88 c1                	mov    cl,al
c00232ff:	d3 ea                	shr    edx,cl
c0023301:	09 da                	or     edx,ebx
c0023303:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023307:	89 f1                	mov    ecx,esi
c0023309:	d3 e7                	shl    edi,cl
c002330b:	89 eb                	mov    ebx,ebp
c002330d:	88 c1                	mov    cl,al
c002330f:	d3 eb                	shr    ebx,cl
c0023311:	89 f1                	mov    ecx,esi
c0023313:	d3 e5                	shl    ebp,cl
c0023315:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023318:	88 c1                	mov    cl,al
c002331a:	d3 ea                	shr    edx,cl
c002331c:	09 d5                	or     ebp,edx
c002331e:	89 e8                	mov    eax,ebp
c0023320:	89 da                	mov    edx,ebx
c0023322:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0023326:	89 d3                	mov    ebx,edx
c0023328:	89 c5                	mov    ebp,eax
c002332a:	f7 e7                	mul    edi
c002332c:	39 d3                	cmp    ebx,edx
c002332e:	72 18                	jb     c0023348 <__divdi3+0x138>
c0023330:	74 0a                	je     c002333c <__divdi3+0x12c>
c0023332:	89 e9                	mov    ecx,ebp
c0023334:	31 f6                	xor    esi,esi
c0023336:	e9 2d ff ff ff       	jmp    c0023268 <__divdi3+0x58>
c002333b:	90                   	nop
c002333c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002333f:	89 f1                	mov    ecx,esi
c0023341:	d3 e7                	shl    edi,cl
c0023343:	39 c7                	cmp    edi,eax
c0023345:	73 eb                	jae    c0023332 <__divdi3+0x122>
c0023347:	90                   	nop
c0023348:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002334b:	31 f6                	xor    esi,esi
c002334d:	e9 16 ff ff ff       	jmp    c0023268 <__divdi3+0x58>
c0023352:	66 90                	xchg   ax,ax
c0023354:	31 c9                	xor    ecx,ecx
c0023356:	e9 0d ff ff ff       	jmp    c0023268 <__divdi3+0x58>
c002335b:	90                   	nop

c002335c <__moddi3>:
c002335c:	55                   	push   ebp
c002335d:	57                   	push   edi
c002335e:	56                   	push   esi
c002335f:	53                   	push   ebx
c0023360:	83 ec 2c             	sub    esp,0x2c
c0023363:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023367:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002336b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002336f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023373:	85 db                	test   ebx,ebx
c0023375:	0f 88 85 00 00 00    	js     c0023400 <__moddi3+0xa4>
c002337b:	89 de                	mov    esi,ebx
c002337d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023385:	89 d7                	mov    edi,edx
c0023387:	85 d2                	test   edx,edx
c0023389:	79 09                	jns    c0023394 <__moddi3+0x38>
c002338b:	f7 d8                	neg    eax
c002338d:	83 d2 00             	adc    edx,0x0
c0023390:	f7 da                	neg    edx
c0023392:	89 d7                	mov    edi,edx
c0023394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023398:	89 cd                	mov    ebp,ecx
c002339a:	85 ff                	test   edi,edi
c002339c:	75 52                	jne    c00233f0 <__moddi3+0x94>
c002339e:	89 c3                	mov    ebx,eax
c00233a0:	39 f0                	cmp    eax,esi
c00233a2:	76 24                	jbe    c00233c8 <__moddi3+0x6c>
c00233a4:	89 c8                	mov    eax,ecx
c00233a6:	89 f2                	mov    edx,esi
c00233a8:	f7 f3                	div    ebx
c00233aa:	89 d6                	mov    esi,edx
c00233ac:	89 f0                	mov    eax,esi
c00233ae:	31 d2                	xor    edx,edx
c00233b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00233b4:	85 c9                	test   ecx,ecx
c00233b6:	74 07                	je     c00233bf <__moddi3+0x63>
c00233b8:	f7 d8                	neg    eax
c00233ba:	83 d2 00             	adc    edx,0x0
c00233bd:	f7 da                	neg    edx
c00233bf:	83 c4 2c             	add    esp,0x2c
c00233c2:	5b                   	pop    ebx
c00233c3:	5e                   	pop    esi
c00233c4:	5f                   	pop    edi
c00233c5:	5d                   	pop    ebp
c00233c6:	c3                   	ret    
c00233c7:	90                   	nop
c00233c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00233cc:	85 db                	test   ebx,ebx
c00233ce:	75 0d                	jne    c00233dd <__moddi3+0x81>
c00233d0:	b8 01 00 00 00       	mov    eax,0x1
c00233d5:	31 d2                	xor    edx,edx
c00233d7:	f7 f7                	div    edi
c00233d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233dd:	89 f0                	mov    eax,esi
c00233df:	31 d2                	xor    edx,edx
c00233e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00233e5:	f7 f7                	div    edi
c00233e7:	89 e8                	mov    eax,ebp
c00233e9:	f7 f7                	div    edi
c00233eb:	89 d6                	mov    esi,edx
c00233ed:	eb bd                	jmp    c00233ac <__moddi3+0x50>
c00233ef:	90                   	nop
c00233f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00233f4:	39 f7                	cmp    edi,esi
c00233f6:	76 20                	jbe    c0023418 <__moddi3+0xbc>
c00233f8:	89 c8                	mov    eax,ecx
c00233fa:	89 f2                	mov    edx,esi
c00233fc:	eb b2                	jmp    c00233b0 <__moddi3+0x54>
c00233fe:	66 90                	xchg   ax,ax
c0023400:	f7 d9                	neg    ecx
c0023402:	83 d3 00             	adc    ebx,0x0
c0023405:	f7 db                	neg    ebx
c0023407:	89 de                	mov    esi,ebx
c0023409:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023411:	e9 6f ff ff ff       	jmp    c0023385 <__moddi3+0x29>
c0023416:	66 90                	xchg   ax,ax
c0023418:	0f bd c7             	bsr    eax,edi
c002341b:	83 f0 1f             	xor    eax,0x1f
c002341e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023422:	75 24                	jne    c0023448 <__moddi3+0xec>
c0023424:	39 f7                	cmp    edi,esi
c0023426:	72 06                	jb     c002342e <__moddi3+0xd2>
c0023428:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002342c:	77 0c                	ja     c002343a <__moddi3+0xde>
c002342e:	89 e9                	mov    ecx,ebp
c0023430:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0023434:	19 fe                	sbb    esi,edi
c0023436:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002343a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002343e:	89 f2                	mov    edx,esi
c0023440:	e9 6b ff ff ff       	jmp    c00233b0 <__moddi3+0x54>
c0023445:	8d 76 00             	lea    esi,[esi+0x0]
c0023448:	b8 20 00 00 00       	mov    eax,0x20
c002344d:	89 c2                	mov    edx,eax
c002344f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023453:	29 da                	sub    edx,ebx
c0023455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023459:	88 d9                	mov    cl,bl
c002345b:	d3 e7                	shl    edi,cl
c002345d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023461:	88 d1                	mov    cl,dl
c0023463:	d3 e8                	shr    eax,cl
c0023465:	09 c7                	or     edi,eax
c0023467:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002346b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002346f:	89 d8                	mov    eax,ebx
c0023471:	88 d9                	mov    cl,bl
c0023473:	d3 e7                	shl    edi,cl
c0023475:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023479:	89 f3                	mov    ebx,esi
c002347b:	88 d1                	mov    cl,dl
c002347d:	d3 eb                	shr    ebx,cl
c002347f:	89 c7                	mov    edi,eax
c0023481:	88 c1                	mov    cl,al
c0023483:	d3 e6                	shl    esi,cl
c0023485:	89 e8                	mov    eax,ebp
c0023487:	88 d1                	mov    cl,dl
c0023489:	d3 e8                	shr    eax,cl
c002348b:	09 f0                	or     eax,esi
c002348d:	89 f9                	mov    ecx,edi
c002348f:	d3 e5                	shl    ebp,cl
c0023491:	89 da                	mov    edx,ebx
c0023493:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023497:	89 d3                	mov    ebx,edx
c0023499:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002349d:	89 c6                	mov    esi,eax
c002349f:	89 d1                	mov    ecx,edx
c00234a1:	39 d3                	cmp    ebx,edx
c00234a3:	72 27                	jb     c00234cc <__moddi3+0x170>
c00234a5:	74 21                	je     c00234c8 <__moddi3+0x16c>
c00234a7:	29 f5                	sub    ebp,esi
c00234a9:	19 cb                	sbb    ebx,ecx
c00234ab:	89 de                	mov    esi,ebx
c00234ad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00234b1:	d3 e6                	shl    esi,cl
c00234b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00234b7:	89 f9                	mov    ecx,edi
c00234b9:	d3 ed                	shr    ebp,cl
c00234bb:	09 ee                	or     esi,ebp
c00234bd:	89 f0                	mov    eax,esi
c00234bf:	d3 eb                	shr    ebx,cl
c00234c1:	89 da                	mov    edx,ebx
c00234c3:	e9 e8 fe ff ff       	jmp    c00233b0 <__moddi3+0x54>
c00234c8:	39 c5                	cmp    ebp,eax
c00234ca:	73 db                	jae    c00234a7 <__moddi3+0x14b>
c00234cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00234d0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00234d4:	89 d1                	mov    ecx,edx
c00234d6:	89 c6                	mov    esi,eax
c00234d8:	eb cd                	jmp    c00234a7 <__moddi3+0x14b>
c00234da:	66 90                	xchg   ax,ax

c00234dc <__udivdi3>:
c00234dc:	55                   	push   ebp
c00234dd:	57                   	push   edi
c00234de:	56                   	push   esi
c00234df:	53                   	push   ebx
c00234e0:	83 ec 1c             	sub    esp,0x1c
c00234e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00234e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00234eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00234ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00234f3:	85 d2                	test   edx,edx
c00234f5:	75 41                	jne    c0023538 <__udivdi3+0x5c>
c00234f7:	39 f7                	cmp    edi,esi
c00234f9:	76 15                	jbe    c0023510 <__udivdi3+0x34>
c00234fb:	89 e8                	mov    eax,ebp
c00234fd:	89 f2                	mov    edx,esi
c00234ff:	f7 f7                	div    edi
c0023501:	31 db                	xor    ebx,ebx
c0023503:	89 da                	mov    edx,ebx
c0023505:	83 c4 1c             	add    esp,0x1c
c0023508:	5b                   	pop    ebx
c0023509:	5e                   	pop    esi
c002350a:	5f                   	pop    edi
c002350b:	5d                   	pop    ebp
c002350c:	c3                   	ret    
c002350d:	8d 76 00             	lea    esi,[esi+0x0]
c0023510:	89 f9                	mov    ecx,edi
c0023512:	85 ff                	test   edi,edi
c0023514:	75 0b                	jne    c0023521 <__udivdi3+0x45>
c0023516:	b8 01 00 00 00       	mov    eax,0x1
c002351b:	31 d2                	xor    edx,edx
c002351d:	f7 f7                	div    edi
c002351f:	89 c1                	mov    ecx,eax
c0023521:	31 d2                	xor    edx,edx
c0023523:	89 f0                	mov    eax,esi
c0023525:	f7 f1                	div    ecx
c0023527:	89 c3                	mov    ebx,eax
c0023529:	89 e8                	mov    eax,ebp
c002352b:	f7 f1                	div    ecx
c002352d:	89 da                	mov    edx,ebx
c002352f:	83 c4 1c             	add    esp,0x1c
c0023532:	5b                   	pop    ebx
c0023533:	5e                   	pop    esi
c0023534:	5f                   	pop    edi
c0023535:	5d                   	pop    ebp
c0023536:	c3                   	ret    
c0023537:	90                   	nop
c0023538:	39 f2                	cmp    edx,esi
c002353a:	77 1c                	ja     c0023558 <__udivdi3+0x7c>
c002353c:	0f bd da             	bsr    ebx,edx
c002353f:	83 f3 1f             	xor    ebx,0x1f
c0023542:	75 24                	jne    c0023568 <__udivdi3+0x8c>
c0023544:	39 f2                	cmp    edx,esi
c0023546:	72 08                	jb     c0023550 <__udivdi3+0x74>
c0023548:	39 ef                	cmp    edi,ebp
c002354a:	0f 87 84 00 00 00    	ja     c00235d4 <__udivdi3+0xf8>
c0023550:	b8 01 00 00 00       	mov    eax,0x1
c0023555:	eb ac                	jmp    c0023503 <__udivdi3+0x27>
c0023557:	90                   	nop
c0023558:	31 db                	xor    ebx,ebx
c002355a:	31 c0                	xor    eax,eax
c002355c:	89 da                	mov    edx,ebx
c002355e:	83 c4 1c             	add    esp,0x1c
c0023561:	5b                   	pop    ebx
c0023562:	5e                   	pop    esi
c0023563:	5f                   	pop    edi
c0023564:	5d                   	pop    ebp
c0023565:	c3                   	ret    
c0023566:	66 90                	xchg   ax,ax
c0023568:	b8 20 00 00 00       	mov    eax,0x20
c002356d:	29 d8                	sub    eax,ebx
c002356f:	88 d9                	mov    cl,bl
c0023571:	d3 e2                	shl    edx,cl
c0023573:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023577:	89 fa                	mov    edx,edi
c0023579:	88 c1                	mov    cl,al
c002357b:	d3 ea                	shr    edx,cl
c002357d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023581:	09 d1                	or     ecx,edx
c0023583:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023587:	88 d9                	mov    cl,bl
c0023589:	d3 e7                	shl    edi,cl
c002358b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002358f:	89 f7                	mov    edi,esi
c0023591:	88 c1                	mov    cl,al
c0023593:	d3 ef                	shr    edi,cl
c0023595:	88 d9                	mov    cl,bl
c0023597:	d3 e6                	shl    esi,cl
c0023599:	89 ea                	mov    edx,ebp
c002359b:	88 c1                	mov    cl,al
c002359d:	d3 ea                	shr    edx,cl
c002359f:	09 d6                	or     esi,edx
c00235a1:	89 f0                	mov    eax,esi
c00235a3:	89 fa                	mov    edx,edi
c00235a5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00235a9:	89 d7                	mov    edi,edx
c00235ab:	89 c6                	mov    esi,eax
c00235ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00235b1:	39 d7                	cmp    edi,edx
c00235b3:	72 13                	jb     c00235c8 <__udivdi3+0xec>
c00235b5:	74 09                	je     c00235c0 <__udivdi3+0xe4>
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	31 db                	xor    ebx,ebx
c00235bb:	e9 43 ff ff ff       	jmp    c0023503 <__udivdi3+0x27>
c00235c0:	88 d9                	mov    cl,bl
c00235c2:	d3 e5                	shl    ebp,cl
c00235c4:	39 c5                	cmp    ebp,eax
c00235c6:	73 ef                	jae    c00235b7 <__udivdi3+0xdb>
c00235c8:	8d 46 ff             	lea    eax,[esi-0x1]
c00235cb:	31 db                	xor    ebx,ebx
c00235cd:	e9 31 ff ff ff       	jmp    c0023503 <__udivdi3+0x27>
c00235d2:	66 90                	xchg   ax,ax
c00235d4:	31 c0                	xor    eax,eax
c00235d6:	e9 28 ff ff ff       	jmp    c0023503 <__udivdi3+0x27>
c00235db:	90                   	nop

c00235dc <__umoddi3>:
c00235dc:	55                   	push   ebp
c00235dd:	57                   	push   edi
c00235de:	56                   	push   esi
c00235df:	53                   	push   ebx
c00235e0:	83 ec 1c             	sub    esp,0x1c
c00235e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00235e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00235eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00235ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00235f3:	89 da                	mov    edx,ebx
c00235f5:	85 c0                	test   eax,eax
c00235f7:	75 37                	jne    c0023630 <__umoddi3+0x54>
c00235f9:	39 df                	cmp    edi,ebx
c00235fb:	76 13                	jbe    c0023610 <__umoddi3+0x34>
c00235fd:	89 f0                	mov    eax,esi
c00235ff:	f7 f7                	div    edi
c0023601:	89 d0                	mov    eax,edx
c0023603:	31 d2                	xor    edx,edx
c0023605:	83 c4 1c             	add    esp,0x1c
c0023608:	5b                   	pop    ebx
c0023609:	5e                   	pop    esi
c002360a:	5f                   	pop    edi
c002360b:	5d                   	pop    ebp
c002360c:	c3                   	ret    
c002360d:	8d 76 00             	lea    esi,[esi+0x0]
c0023610:	89 fd                	mov    ebp,edi
c0023612:	85 ff                	test   edi,edi
c0023614:	75 0b                	jne    c0023621 <__umoddi3+0x45>
c0023616:	b8 01 00 00 00       	mov    eax,0x1
c002361b:	31 d2                	xor    edx,edx
c002361d:	f7 f7                	div    edi
c002361f:	89 c5                	mov    ebp,eax
c0023621:	89 d8                	mov    eax,ebx
c0023623:	31 d2                	xor    edx,edx
c0023625:	f7 f5                	div    ebp
c0023627:	89 f0                	mov    eax,esi
c0023629:	f7 f5                	div    ebp
c002362b:	89 d0                	mov    eax,edx
c002362d:	eb d4                	jmp    c0023603 <__umoddi3+0x27>
c002362f:	90                   	nop
c0023630:	89 f1                	mov    ecx,esi
c0023632:	39 d8                	cmp    eax,ebx
c0023634:	76 0a                	jbe    c0023640 <__umoddi3+0x64>
c0023636:	89 f0                	mov    eax,esi
c0023638:	83 c4 1c             	add    esp,0x1c
c002363b:	5b                   	pop    ebx
c002363c:	5e                   	pop    esi
c002363d:	5f                   	pop    edi
c002363e:	5d                   	pop    ebp
c002363f:	c3                   	ret    
c0023640:	0f bd e8             	bsr    ebp,eax
c0023643:	83 f5 1f             	xor    ebp,0x1f
c0023646:	75 1c                	jne    c0023664 <__umoddi3+0x88>
c0023648:	39 d8                	cmp    eax,ebx
c002364a:	72 04                	jb     c0023650 <__umoddi3+0x74>
c002364c:	39 f7                	cmp    edi,esi
c002364e:	77 08                	ja     c0023658 <__umoddi3+0x7c>
c0023650:	89 da                	mov    edx,ebx
c0023652:	29 fe                	sub    esi,edi
c0023654:	19 c2                	sbb    edx,eax
c0023656:	89 f1                	mov    ecx,esi
c0023658:	89 c8                	mov    eax,ecx
c002365a:	83 c4 1c             	add    esp,0x1c
c002365d:	5b                   	pop    ebx
c002365e:	5e                   	pop    esi
c002365f:	5f                   	pop    edi
c0023660:	5d                   	pop    ebp
c0023661:	c3                   	ret    
c0023662:	66 90                	xchg   ax,ax
c0023664:	ba 20 00 00 00       	mov    edx,0x20
c0023669:	29 ea                	sub    edx,ebp
c002366b:	89 e9                	mov    ecx,ebp
c002366d:	d3 e0                	shl    eax,cl
c002366f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023673:	89 f8                	mov    eax,edi
c0023675:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023679:	88 d1                	mov    cl,dl
c002367b:	d3 e8                	shr    eax,cl
c002367d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023681:	09 c1                	or     ecx,eax
c0023683:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023687:	89 e9                	mov    ecx,ebp
c0023689:	d3 e7                	shl    edi,cl
c002368b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002368f:	89 d8                	mov    eax,ebx
c0023691:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023695:	88 d1                	mov    cl,dl
c0023697:	d3 e8                	shr    eax,cl
c0023699:	89 c7                	mov    edi,eax
c002369b:	89 e9                	mov    ecx,ebp
c002369d:	d3 e3                	shl    ebx,cl
c002369f:	89 f0                	mov    eax,esi
c00236a1:	88 d1                	mov    cl,dl
c00236a3:	d3 e8                	shr    eax,cl
c00236a5:	09 d8                	or     eax,ebx
c00236a7:	89 e9                	mov    ecx,ebp
c00236a9:	d3 e6                	shl    esi,cl
c00236ab:	89 f3                	mov    ebx,esi
c00236ad:	89 fa                	mov    edx,edi
c00236af:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00236b3:	89 d1                	mov    ecx,edx
c00236b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00236b9:	89 c6                	mov    esi,eax
c00236bb:	89 d7                	mov    edi,edx
c00236bd:	39 d1                	cmp    ecx,edx
c00236bf:	72 27                	jb     c00236e8 <__umoddi3+0x10c>
c00236c1:	74 21                	je     c00236e4 <__umoddi3+0x108>
c00236c3:	89 ca                	mov    edx,ecx
c00236c5:	29 f3                	sub    ebx,esi
c00236c7:	19 fa                	sbb    edx,edi
c00236c9:	89 d0                	mov    eax,edx
c00236cb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00236cf:	d3 e0                	shl    eax,cl
c00236d1:	89 e9                	mov    ecx,ebp
c00236d3:	d3 eb                	shr    ebx,cl
c00236d5:	09 d8                	or     eax,ebx
c00236d7:	d3 ea                	shr    edx,cl
c00236d9:	83 c4 1c             	add    esp,0x1c
c00236dc:	5b                   	pop    ebx
c00236dd:	5e                   	pop    esi
c00236de:	5f                   	pop    edi
c00236df:	5d                   	pop    ebp
c00236e0:	c3                   	ret    
c00236e1:	8d 76 00             	lea    esi,[esi+0x0]
c00236e4:	39 c3                	cmp    ebx,eax
c00236e6:	73 db                	jae    c00236c3 <__umoddi3+0xe7>
c00236e8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00236ec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00236f0:	89 d7                	mov    edi,edx
c00236f2:	89 c6                	mov    esi,eax
c00236f4:	eb cd                	jmp    c00236c3 <__umoddi3+0xe7>

c00236f6 <__addsf3>:
c00236f6:	55                   	push   ebp
c00236f7:	89 e5                	mov    ebp,esp
c00236f9:	57                   	push   edi
c00236fa:	56                   	push   esi
c00236fb:	53                   	push   ebx
c00236fc:	83 ec 08             	sub    esp,0x8
c00236ff:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023702:	89 fa                	mov    edx,edi
c0023704:	89 f8                	mov    eax,edi
c0023706:	c1 f8 17             	sar    eax,0x17
c0023709:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002370c:	c1 e2 08             	shl    edx,0x8
c002370f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023715:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023718:	89 de                	mov    esi,ebx
c002371a:	c1 fe 17             	sar    esi,0x17
c002371d:	c1 e3 08             	shl    ebx,0x8
c0023720:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023726:	31 f0                	xor    eax,esi
c0023728:	0f 88 3b 01 00 00    	js     c0023869 <__addsf3+0x173>
c002372e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023731:	29 f1                	sub    ecx,esi
c0023733:	85 c9                	test   ecx,ecx
c0023735:	7e 54                	jle    c002378b <__addsf3+0x95>
c0023737:	89 f0                	mov    eax,esi
c0023739:	84 c0                	test   al,al
c002373b:	75 10                	jne    c002374d <__addsf3+0x57>
c002373d:	85 db                	test   ebx,ebx
c002373f:	0f 84 aa 02 00 00    	je     c00239ef <__addsf3+0x2f9>
c0023745:	49                   	dec    ecx
c0023746:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023749:	74 38                	je     c0023783 <__addsf3+0x8d>
c002374b:	eb 13                	jmp    c0023760 <__addsf3+0x6a>
c002374d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023750:	f7 d0                	not    eax
c0023752:	84 c0                	test   al,al
c0023754:	0f 84 95 02 00 00    	je     c00239ef <__addsf3+0x2f9>
c002375a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023760:	83 f9 1f             	cmp    ecx,0x1f
c0023763:	0f 8f 86 02 00 00    	jg     c00239ef <__addsf3+0x2f9>
c0023769:	89 de                	mov    esi,ebx
c002376b:	d3 ee                	shr    esi,cl
c002376d:	b8 20 00 00 00       	mov    eax,0x20
c0023772:	29 c8                	sub    eax,ecx
c0023774:	89 c1                	mov    ecx,eax
c0023776:	d3 e3                	shl    ebx,cl
c0023778:	31 c0                	xor    eax,eax
c002377a:	85 db                	test   ebx,ebx
c002377c:	0f 95 c0             	setne  al
c002377f:	09 f0                	or     eax,esi
c0023781:	01 d0                	add    eax,edx
c0023783:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023786:	e9 b6 00 00 00       	jmp    c0023841 <__addsf3+0x14b>
c002378b:	74 5c                	je     c00237e9 <__addsf3+0xf3>
c002378d:	89 f1                	mov    ecx,esi
c002378f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023792:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023795:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023799:	75 14                	jne    c00237af <__addsf3+0xb9>
c002379b:	85 d2                	test   edx,edx
c002379d:	0f 84 4c 02 00 00    	je     c00239ef <__addsf3+0x2f9>
c00237a3:	49                   	dec    ecx
c00237a4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00237a7:	0f 84 94 00 00 00    	je     c0023841 <__addsf3+0x14b>
c00237ad:	eb 12                	jmp    c00237c1 <__addsf3+0xcb>
c00237af:	89 f0                	mov    eax,esi
c00237b1:	f7 d0                	not    eax
c00237b3:	84 c0                	test   al,al
c00237b5:	0f 84 34 02 00 00    	je     c00239ef <__addsf3+0x2f9>
c00237bb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00237c1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237c4:	83 f9 1f             	cmp    ecx,0x1f
c00237c7:	0f 8f 22 02 00 00    	jg     c00239ef <__addsf3+0x2f9>
c00237cd:	89 d7                	mov    edi,edx
c00237cf:	d3 ef                	shr    edi,cl
c00237d1:	b8 20 00 00 00       	mov    eax,0x20
c00237d6:	29 c8                	sub    eax,ecx
c00237d8:	89 c1                	mov    ecx,eax
c00237da:	d3 e2                	shl    edx,cl
c00237dc:	31 c0                	xor    eax,eax
c00237de:	85 d2                	test   edx,edx
c00237e0:	0f 95 c0             	setne  al
c00237e3:	09 f8                	or     eax,edi
c00237e5:	01 d8                	add    eax,ebx
c00237e7:	eb 58                	jmp    c0023841 <__addsf3+0x14b>
c00237e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237ec:	8d 70 01             	lea    esi,[eax+0x1]
c00237ef:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00237f5:	75 32                	jne    c0023829 <__addsf3+0x133>
c00237f7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00237fb:	75 1f                	jne    c002381c <__addsf3+0x126>
c00237fd:	85 d2                	test   edx,edx
c00237ff:	0f 84 e0 01 00 00    	je     c00239e5 <__addsf3+0x2ef>
c0023805:	85 db                	test   ebx,ebx
c0023807:	0f 84 e2 01 00 00    	je     c00239ef <__addsf3+0x2f9>
c002380d:	89 d0                	mov    eax,edx
c002380f:	01 d8                	add    eax,ebx
c0023811:	0f 89 a9 01 00 00    	jns    c00239c0 <__addsf3+0x2ca>
c0023817:	e9 9d 01 00 00       	jmp    c00239b9 <__addsf3+0x2c3>
c002381c:	85 d2                	test   edx,edx
c002381e:	0f 85 cb 01 00 00    	jne    c00239ef <__addsf3+0x2f9>
c0023824:	e9 bc 01 00 00       	jmp    c00239e5 <__addsf3+0x2ef>
c0023829:	31 c0                	xor    eax,eax
c002382b:	89 f1                	mov    ecx,esi
c002382d:	f7 d1                	not    ecx
c002382f:	84 c9                	test   cl,cl
c0023831:	0f 84 90 01 00 00    	je     c00239c7 <__addsf3+0x2d1>
c0023837:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002383a:	d1 e8                	shr    eax,1
c002383c:	e9 86 01 00 00       	jmp    c00239c7 <__addsf3+0x2d1>
c0023841:	85 c0                	test   eax,eax
c0023843:	0f 89 7e 01 00 00    	jns    c00239c7 <__addsf3+0x2d1>
c0023849:	46                   	inc    esi
c002384a:	89 f2                	mov    edx,esi
c002384c:	f7 d2                	not    edx
c002384e:	84 d2                	test   dl,dl
c0023850:	0f 84 6f 01 00 00    	je     c00239c5 <__addsf3+0x2cf>
c0023856:	89 c2                	mov    edx,eax
c0023858:	83 e2 01             	and    edx,0x1
c002385b:	d1 e8                	shr    eax,1
c002385d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023862:	09 d0                	or     eax,edx
c0023864:	e9 5e 01 00 00       	jmp    c00239c7 <__addsf3+0x2d1>
c0023869:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002386d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023870:	89 f0                	mov    eax,esi
c0023872:	0f b6 c0             	movzx  eax,al
c0023875:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023878:	29 c1                	sub    ecx,eax
c002387a:	85 c9                	test   ecx,ecx
c002387c:	7e 55                	jle    c00238d3 <__addsf3+0x1dd>
c002387e:	85 c0                	test   eax,eax
c0023880:	75 11                	jne    c0023893 <__addsf3+0x19d>
c0023882:	85 db                	test   ebx,ebx
c0023884:	0f 84 65 01 00 00    	je     c00239ef <__addsf3+0x2f9>
c002388a:	49                   	dec    ecx
c002388b:	75 19                	jne    c00238a6 <__addsf3+0x1b0>
c002388d:	89 d0                	mov    eax,edx
c002388f:	29 d8                	sub    eax,ebx
c0023891:	eb 38                	jmp    c00238cb <__addsf3+0x1d5>
c0023893:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023896:	f7 d0                	not    eax
c0023898:	84 c0                	test   al,al
c002389a:	0f 84 4f 01 00 00    	je     c00239ef <__addsf3+0x2f9>
c00238a0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00238a6:	83 f9 1f             	cmp    ecx,0x1f
c00238a9:	0f 8f 40 01 00 00    	jg     c00239ef <__addsf3+0x2f9>
c00238af:	89 de                	mov    esi,ebx
c00238b1:	d3 ee                	shr    esi,cl
c00238b3:	b8 20 00 00 00       	mov    eax,0x20
c00238b8:	29 c8                	sub    eax,ecx
c00238ba:	89 c1                	mov    ecx,eax
c00238bc:	d3 e3                	shl    ebx,cl
c00238be:	31 c0                	xor    eax,eax
c00238c0:	85 db                	test   ebx,ebx
c00238c2:	0f 95 c0             	setne  al
c00238c5:	09 f0                	or     eax,esi
c00238c7:	29 c2                	sub    edx,eax
c00238c9:	89 d0                	mov    eax,edx
c00238cb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00238ce:	e9 af 00 00 00       	jmp    c0023982 <__addsf3+0x28c>
c00238d3:	74 5c                	je     c0023931 <__addsf3+0x23b>
c00238d5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00238d8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00238db:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00238df:	75 14                	jne    c00238f5 <__addsf3+0x1ff>
c00238e1:	85 d2                	test   edx,edx
c00238e3:	0f 84 06 01 00 00    	je     c00239ef <__addsf3+0x2f9>
c00238e9:	48                   	dec    eax
c00238ea:	75 1b                	jne    c0023907 <__addsf3+0x211>
c00238ec:	89 d8                	mov    eax,ebx
c00238ee:	29 d0                	sub    eax,edx
c00238f0:	e9 8d 00 00 00       	jmp    c0023982 <__addsf3+0x28c>
c00238f5:	89 f1                	mov    ecx,esi
c00238f7:	f7 d1                	not    ecx
c00238f9:	84 c9                	test   cl,cl
c00238fb:	0f 84 ee 00 00 00    	je     c00239ef <__addsf3+0x2f9>
c0023901:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023907:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002390a:	83 f8 1f             	cmp    eax,0x1f
c002390d:	0f 8f dc 00 00 00    	jg     c00239ef <__addsf3+0x2f9>
c0023913:	89 d7                	mov    edi,edx
c0023915:	88 c1                	mov    cl,al
c0023917:	d3 ef                	shr    edi,cl
c0023919:	b9 20 00 00 00       	mov    ecx,0x20
c002391e:	29 c1                	sub    ecx,eax
c0023920:	d3 e2                	shl    edx,cl
c0023922:	31 c0                	xor    eax,eax
c0023924:	85 d2                	test   edx,edx
c0023926:	0f 95 c0             	setne  al
c0023929:	09 f8                	or     eax,edi
c002392b:	29 c3                	sub    ebx,eax
c002392d:	89 d8                	mov    eax,ebx
c002392f:	eb 51                	jmp    c0023982 <__addsf3+0x28c>
c0023931:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023934:	40                   	inc    eax
c0023935:	a8 fe                	test   al,0xfe
c0023937:	75 3d                	jne    c0023976 <__addsf3+0x280>
c0023939:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002393d:	0f 85 a7 00 00 00    	jne    c00239ea <__addsf3+0x2f4>
c0023943:	85 d2                	test   edx,edx
c0023945:	75 12                	jne    c0023959 <__addsf3+0x263>
c0023947:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002394a:	85 db                	test   ebx,ebx
c002394c:	0f 85 9d 00 00 00    	jne    c00239ef <__addsf3+0x2f9>
c0023952:	31 ff                	xor    edi,edi
c0023954:	e9 96 00 00 00       	jmp    c00239ef <__addsf3+0x2f9>
c0023959:	85 db                	test   ebx,ebx
c002395b:	0f 84 8e 00 00 00    	je     c00239ef <__addsf3+0x2f9>
c0023961:	89 d0                	mov    eax,edx
c0023963:	29 d8                	sub    eax,ebx
c0023965:	79 06                	jns    c002396d <__addsf3+0x277>
c0023967:	89 d8                	mov    eax,ebx
c0023969:	29 d0                	sub    eax,edx
c002396b:	eb 5a                	jmp    c00239c7 <__addsf3+0x2d1>
c002396d:	bf 00 00 00 00       	mov    edi,0x0
c0023972:	74 7b                	je     c00239ef <__addsf3+0x2f9>
c0023974:	eb 4a                	jmp    c00239c0 <__addsf3+0x2ca>
c0023976:	89 d0                	mov    eax,edx
c0023978:	29 d8                	sub    eax,ebx
c002397a:	79 12                	jns    c002398e <__addsf3+0x298>
c002397c:	89 d8                	mov    eax,ebx
c002397e:	29 d0                	sub    eax,edx
c0023980:	eb 09                	jmp    c002398b <__addsf3+0x295>
c0023982:	85 c0                	test   eax,eax
c0023984:	79 41                	jns    c00239c7 <__addsf3+0x2d1>
c0023986:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002398b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002398e:	31 f6                	xor    esi,esi
c0023990:	85 c0                	test   eax,eax
c0023992:	74 33                	je     c00239c7 <__addsf3+0x2d1>
c0023994:	0f bd c8             	bsr    ecx,eax
c0023997:	83 f1 1f             	xor    ecx,0x1f
c002399a:	d3 e0                	shl    eax,cl
c002399c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00239a0:	39 ca                	cmp    edx,ecx
c00239a2:	7f 10                	jg     c00239b4 <__addsf3+0x2be>
c00239a4:	29 d1                	sub    ecx,edx
c00239a6:	41                   	inc    ecx
c00239a7:	d3 e8                	shr    eax,cl
c00239a9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00239ac:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00239b2:	eb 13                	jmp    c00239c7 <__addsf3+0x2d1>
c00239b4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00239b7:	29 ce                	sub    esi,ecx
c00239b9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00239be:	eb 07                	jmp    c00239c7 <__addsf3+0x2d1>
c00239c0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00239c3:	eb 02                	jmp    c00239c7 <__addsf3+0x2d1>
c00239c5:	31 c0                	xor    eax,eax
c00239c7:	89 c2                	mov    edx,eax
c00239c9:	c1 ea 08             	shr    edx,0x8
c00239cc:	a8 7f                	test   al,0x7f
c00239ce:	0f 95 c1             	setne  cl
c00239d1:	09 d1                	or     ecx,edx
c00239d3:	83 e1 01             	and    ecx,0x1
c00239d6:	c1 e8 07             	shr    eax,0x7
c00239d9:	21 c8                	and    eax,ecx
c00239db:	c1 e6 17             	shl    esi,0x17
c00239de:	09 d6                	or     esi,edx
c00239e0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00239e3:	eb 0a                	jmp    c00239ef <__addsf3+0x2f9>
c00239e5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00239e8:	eb 05                	jmp    c00239ef <__addsf3+0x2f9>
c00239ea:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00239ef:	89 f8                	mov    eax,edi
c00239f1:	5a                   	pop    edx
c00239f2:	59                   	pop    ecx
c00239f3:	5b                   	pop    ebx
c00239f4:	5e                   	pop    esi
c00239f5:	5f                   	pop    edi
c00239f6:	5d                   	pop    ebp
c00239f7:	c3                   	ret    

c00239f8 <__subsf3>:
c00239f8:	55                   	push   ebp
c00239f9:	89 e5                	mov    ebp,esp
c00239fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00239fe:	05 00 00 00 80       	add    eax,0x80000000
c0023a03:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023a06:	5d                   	pop    ebp
c0023a07:	e9 ea fc ff ff       	jmp    c00236f6 <__addsf3>

c0023a0c <__negsf2>:
c0023a0c:	55                   	push   ebp
c0023a0d:	89 e5                	mov    ebp,esp
c0023a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023a12:	05 00 00 00 80       	add    eax,0x80000000
c0023a17:	5d                   	pop    ebp
c0023a18:	c3                   	ret    

c0023a19 <__mulsf3>:
c0023a19:	55                   	push   ebp
c0023a1a:	89 e5                	mov    ebp,esp
c0023a1c:	57                   	push   edi
c0023a1d:	56                   	push   esi
c0023a1e:	53                   	push   ebx
c0023a1f:	83 ec 1c             	sub    esp,0x1c
c0023a22:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023a25:	89 f0                	mov    eax,esi
c0023a27:	89 f1                	mov    ecx,esi
c0023a29:	c1 f9 17             	sar    ecx,0x17
c0023a2c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a2f:	c1 e0 08             	shl    eax,0x8
c0023a32:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a37:	89 c1                	mov    ecx,eax
c0023a39:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a3c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a3f:	89 c7                	mov    edi,eax
c0023a41:	c1 ff 17             	sar    edi,0x17
c0023a44:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a48:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a4b:	89 f8                	mov    eax,edi
c0023a4d:	0f b6 c0             	movzx  eax,al
c0023a50:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023a53:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0023a57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a5a:	42                   	inc    edx
c0023a5b:	80 e2 fe             	and    dl,0xfe
c0023a5e:	75 7b                	jne    c0023adb <__mulsf3+0xc2>
c0023a60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023a64:	74 54                	je     c0023aba <__mulsf3+0xa1>
c0023a66:	85 c9                	test   ecx,ecx
c0023a68:	0f 85 64 01 00 00    	jne    c0023bd2 <__mulsf3+0x1b9>
c0023a6e:	8d 57 01             	lea    edx,[edi+0x1]
c0023a71:	80 e2 fe             	and    dl,0xfe
c0023a74:	75 1f                	jne    c0023a95 <__mulsf3+0x7c>
c0023a76:	85 c0                	test   eax,eax
c0023a78:	b8 00 00 00 00       	mov    eax,0x0
c0023a7d:	74 29                	je     c0023aa8 <__mulsf3+0x8f>
c0023a7f:	53                   	push   ebx
c0023a80:	53                   	push   ebx
c0023a81:	50                   	push   eax
c0023a82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023a85:	e8 96 05 00 00       	call   c0024020 <__nesf2>
c0023a8a:	83 c4 10             	add    esp,0x10
c0023a8d:	85 c0                	test   eax,eax
c0023a8f:	0f 85 3a 01 00 00    	jne    c0023bcf <__mulsf3+0x1b6>
c0023a95:	85 ff                	test   edi,edi
c0023a97:	0f 89 35 01 00 00    	jns    c0023bd2 <__mulsf3+0x1b9>
c0023a9d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023aa3:	e9 2a 01 00 00       	jmp    c0023bd2 <__mulsf3+0x1b9>
c0023aa8:	51                   	push   ecx
c0023aa9:	51                   	push   ecx
c0023aaa:	50                   	push   eax
c0023aab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023aae:	e8 6d 05 00 00       	call   c0024020 <__nesf2>
c0023ab3:	83 c4 10             	add    esp,0x10
c0023ab6:	85 c0                	test   eax,eax
c0023ab8:	eb 15                	jmp    c0023acf <__mulsf3+0xb6>
c0023aba:	85 c9                	test   ecx,ecx
c0023abc:	74 0b                	je     c0023ac9 <__mulsf3+0xb0>
c0023abe:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023ac1:	01 c9                	add    ecx,ecx
c0023ac3:	78 16                	js     c0023adb <__mulsf3+0xc2>
c0023ac5:	89 d3                	mov    ebx,edx
c0023ac7:	eb f5                	jmp    c0023abe <__mulsf3+0xa5>
c0023ac9:	89 f8                	mov    eax,edi
c0023acb:	f7 d0                	not    eax
c0023acd:	84 c0                	test   al,al
c0023acf:	75 c4                	jne    c0023a95 <__mulsf3+0x7c>
c0023ad1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023ad6:	e9 f7 00 00 00       	jmp    c0023bd2 <__mulsf3+0x1b9>
c0023adb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023ade:	c1 e6 08             	shl    esi,0x8
c0023ae1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023ae7:	8d 57 01             	lea    edx,[edi+0x1]
c0023aea:	80 e2 fe             	and    dl,0xfe
c0023aed:	75 63                	jne    c0023b52 <__mulsf3+0x139>
c0023aef:	85 c0                	test   eax,eax
c0023af1:	74 2f                	je     c0023b22 <__mulsf3+0x109>
c0023af3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023af7:	0f 89 d2 00 00 00    	jns    c0023bcf <__mulsf3+0x1b6>
c0023afd:	52                   	push   edx
c0023afe:	52                   	push   edx
c0023aff:	6a 00                	push   0x0
c0023b01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b04:	e8 dc 04 00 00       	call   c0023fe5 <__eqsf2>
c0023b09:	83 c4 10             	add    esp,0x10
c0023b0c:	85 c0                	test   eax,eax
c0023b0e:	0f 85 bb 00 00 00    	jne    c0023bcf <__mulsf3+0x1b6>
c0023b14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b17:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023b1d:	e9 b0 00 00 00       	jmp    c0023bd2 <__mulsf3+0x1b9>
c0023b22:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b25:	50                   	push   eax
c0023b26:	50                   	push   eax
c0023b27:	6a 00                	push   0x0
c0023b29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b2c:	e8 b4 04 00 00       	call   c0023fe5 <__eqsf2>
c0023b31:	83 c4 10             	add    esp,0x10
c0023b34:	85 c0                	test   eax,eax
c0023b36:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023b39:	75 0c                	jne    c0023b47 <__mulsf3+0x12e>
c0023b3b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023b3f:	0f 89 8a 00 00 00    	jns    c0023bcf <__mulsf3+0x1b6>
c0023b45:	eb cd                	jmp    c0023b14 <__mulsf3+0xfb>
c0023b47:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023b4a:	01 f6                	add    esi,esi
c0023b4c:	78 04                	js     c0023b52 <__mulsf3+0x139>
c0023b4e:	89 c3                	mov    ebx,eax
c0023b50:	eb f5                	jmp    c0023b47 <__mulsf3+0x12e>
c0023b52:	89 c8                	mov    eax,ecx
c0023b54:	0d 00 00 00 80       	or     eax,0x80000000
c0023b59:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023b5f:	f7 e6                	mul    esi
c0023b61:	85 c0                	test   eax,eax
c0023b63:	0f 95 c0             	setne  al
c0023b66:	0f b6 c0             	movzx  eax,al
c0023b69:	09 c2                	or     edx,eax
c0023b6b:	78 03                	js     c0023b70 <__mulsf3+0x157>
c0023b6d:	01 d2                	add    edx,edx
c0023b6f:	4b                   	dec    ebx
c0023b70:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023b76:	7f 22                	jg     c0023b9a <__mulsf3+0x181>
c0023b78:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023b7e:	85 db                	test   ebx,ebx
c0023b80:	7f 23                	jg     c0023ba5 <__mulsf3+0x18c>
c0023b82:	83 fb e9             	cmp    ebx,0xffffffe9
c0023b85:	7c 1a                	jl     c0023ba1 <__mulsf3+0x188>
c0023b87:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023b8d:	b9 01 00 00 00       	mov    ecx,0x1
c0023b92:	29 d9                	sub    ecx,ebx
c0023b94:	d3 ea                	shr    edx,cl
c0023b96:	31 db                	xor    ebx,ebx
c0023b98:	eb 0b                	jmp    c0023ba5 <__mulsf3+0x18c>
c0023b9a:	bb ff 00 00 00       	mov    ebx,0xff
c0023b9f:	eb 02                	jmp    c0023ba3 <__mulsf3+0x18a>
c0023ba1:	31 db                	xor    ebx,ebx
c0023ba3:	31 d2                	xor    edx,edx
c0023ba5:	89 d0                	mov    eax,edx
c0023ba7:	c1 e8 08             	shr    eax,0x8
c0023baa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023bad:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023bb3:	09 fb                	or     ebx,edi
c0023bb5:	c1 e3 17             	shl    ebx,0x17
c0023bb8:	09 c3                	or     ebx,eax
c0023bba:	f6 c2 7f             	test   dl,0x7f
c0023bbd:	0f 95 c1             	setne  cl
c0023bc0:	09 c8                	or     eax,ecx
c0023bc2:	83 e0 01             	and    eax,0x1
c0023bc5:	c1 ea 07             	shr    edx,0x7
c0023bc8:	21 c2                	and    edx,eax
c0023bca:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023bcd:	eb 03                	jmp    c0023bd2 <__mulsf3+0x1b9>
c0023bcf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023bd2:	89 f0                	mov    eax,esi
c0023bd4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023bd7:	5b                   	pop    ebx
c0023bd8:	5e                   	pop    esi
c0023bd9:	5f                   	pop    edi
c0023bda:	5d                   	pop    ebp
c0023bdb:	c3                   	ret    

c0023bdc <__divsf3>:
c0023bdc:	55                   	push   ebp
c0023bdd:	89 e5                	mov    ebp,esp
c0023bdf:	57                   	push   edi
c0023be0:	56                   	push   esi
c0023be1:	53                   	push   ebx
c0023be2:	83 ec 1c             	sub    esp,0x1c
c0023be5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023be8:	89 d8                	mov    eax,ebx
c0023bea:	89 d9                	mov    ecx,ebx
c0023bec:	c1 f9 17             	sar    ecx,0x17
c0023bef:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023bf2:	c1 e0 08             	shl    eax,0x8
c0023bf5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023bfa:	89 c1                	mov    ecx,eax
c0023bfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023bff:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023c02:	89 c7                	mov    edi,eax
c0023c04:	c1 ff 17             	sar    edi,0x17
c0023c07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023c0b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023c0e:	89 f8                	mov    eax,edi
c0023c10:	0f b6 c0             	movzx  eax,al
c0023c13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023c16:	29 c6                	sub    esi,eax
c0023c18:	83 c6 7f             	add    esi,0x7f
c0023c1b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023c1e:	42                   	inc    edx
c0023c1f:	80 e2 fe             	and    dl,0xfe
c0023c22:	0f 85 9c 00 00 00    	jne    c0023cc4 <__divsf3+0xe8>
c0023c28:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023c2c:	74 33                	je     c0023c61 <__divsf3+0x85>
c0023c2e:	85 c9                	test   ecx,ecx
c0023c30:	0f 85 c7 01 00 00    	jne    c0023dfd <__divsf3+0x221>
c0023c36:	8d 57 01             	lea    edx,[edi+0x1]
c0023c39:	80 e2 fe             	and    dl,0xfe
c0023c3c:	75 2f                	jne    c0023c6d <__divsf3+0x91>
c0023c3e:	85 c0                	test   eax,eax
c0023c40:	74 2b                	je     c0023c6d <__divsf3+0x91>
c0023c42:	51                   	push   ecx
c0023c43:	51                   	push   ecx
c0023c44:	6a 00                	push   0x0
c0023c46:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c49:	e8 d2 03 00 00       	call   c0024020 <__nesf2>
c0023c4e:	83 c4 10             	add    esp,0x10
c0023c51:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c54:	85 c0                	test   eax,eax
c0023c56:	0f 85 a1 01 00 00    	jne    c0023dfd <__divsf3+0x221>
c0023c5c:	e9 92 01 00 00       	jmp    c0023df3 <__divsf3+0x217>
c0023c61:	85 c9                	test   ecx,ecx
c0023c63:	75 1b                	jne    c0023c80 <__divsf3+0xa4>
c0023c65:	8d 57 01             	lea    edx,[edi+0x1]
c0023c68:	80 e2 fe             	and    dl,0xfe
c0023c6b:	74 1e                	je     c0023c8b <__divsf3+0xaf>
c0023c6d:	85 ff                	test   edi,edi
c0023c6f:	0f 89 88 01 00 00    	jns    c0023dfd <__divsf3+0x221>
c0023c75:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023c7b:	e9 7d 01 00 00       	jmp    c0023dfd <__divsf3+0x221>
c0023c80:	8d 56 ff             	lea    edx,[esi-0x1]
c0023c83:	01 c9                	add    ecx,ecx
c0023c85:	78 3d                	js     c0023cc4 <__divsf3+0xe8>
c0023c87:	89 d6                	mov    esi,edx
c0023c89:	eb f5                	jmp    c0023c80 <__divsf3+0xa4>
c0023c8b:	85 c0                	test   eax,eax
c0023c8d:	b8 00 00 00 00       	mov    eax,0x0
c0023c92:	74 18                	je     c0023cac <__divsf3+0xd0>
c0023c94:	52                   	push   edx
c0023c95:	52                   	push   edx
c0023c96:	50                   	push   eax
c0023c97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023c9a:	e8 81 03 00 00       	call   c0024020 <__nesf2>
c0023c9f:	83 c4 10             	add    esp,0x10
c0023ca2:	85 c0                	test   eax,eax
c0023ca4:	0f 85 50 01 00 00    	jne    c0023dfa <__divsf3+0x21e>
c0023caa:	eb c1                	jmp    c0023c6d <__divsf3+0x91>
c0023cac:	56                   	push   esi
c0023cad:	56                   	push   esi
c0023cae:	50                   	push   eax
c0023caf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023cb2:	e8 69 03 00 00       	call   c0024020 <__nesf2>
c0023cb7:	83 c4 10             	add    esp,0x10
c0023cba:	85 c0                	test   eax,eax
c0023cbc:	0f 84 31 01 00 00    	je     c0023df3 <__divsf3+0x217>
c0023cc2:	eb a9                	jmp    c0023c6d <__divsf3+0x91>
c0023cc4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023cc7:	c1 e3 08             	shl    ebx,0x8
c0023cca:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023cd0:	8d 57 01             	lea    edx,[edi+0x1]
c0023cd3:	80 e2 fe             	and    dl,0xfe
c0023cd6:	75 71                	jne    c0023d49 <__divsf3+0x16d>
c0023cd8:	85 c0                	test   eax,eax
c0023cda:	ba 00 00 00 00       	mov    edx,0x0
c0023cdf:	74 2f                	je     c0023d10 <__divsf3+0x134>
c0023ce1:	51                   	push   ecx
c0023ce2:	51                   	push   ecx
c0023ce3:	52                   	push   edx
c0023ce4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ce7:	e8 f9 02 00 00       	call   c0023fe5 <__eqsf2>
c0023cec:	83 c4 10             	add    esp,0x10
c0023cef:	85 c0                	test   eax,eax
c0023cf1:	0f 85 03 01 00 00    	jne    c0023dfa <__divsf3+0x21e>
c0023cf7:	31 d2                	xor    edx,edx
c0023cf9:	89 d3                	mov    ebx,edx
c0023cfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023cfe:	31 f8                	xor    eax,edi
c0023d00:	0f 89 f7 00 00 00    	jns    c0023dfd <__divsf3+0x221>
c0023d06:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023d0b:	e9 ed 00 00 00       	jmp    c0023dfd <__divsf3+0x221>
c0023d10:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023d13:	50                   	push   eax
c0023d14:	50                   	push   eax
c0023d15:	52                   	push   edx
c0023d16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d19:	e8 c7 02 00 00       	call   c0023fe5 <__eqsf2>
c0023d1e:	83 c4 10             	add    esp,0x10
c0023d21:	85 c0                	test   eax,eax
c0023d23:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023d26:	75 16                	jne    c0023d3e <__divsf3+0x162>
c0023d28:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023d2b:	31 fb                	xor    ebx,edi
c0023d2d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023d33:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023d39:	e9 bf 00 00 00       	jmp    c0023dfd <__divsf3+0x221>
c0023d3e:	8d 46 01             	lea    eax,[esi+0x1]
c0023d41:	01 db                	add    ebx,ebx
c0023d43:	78 04                	js     c0023d49 <__divsf3+0x16d>
c0023d45:	89 c6                	mov    esi,eax
c0023d47:	eb f5                	jmp    c0023d3e <__divsf3+0x162>
c0023d49:	89 c8                	mov    eax,ecx
c0023d4b:	0d 00 00 00 80       	or     eax,0x80000000
c0023d50:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023d56:	31 d2                	xor    edx,edx
c0023d58:	39 d8                	cmp    eax,ebx
c0023d5a:	72 07                	jb     c0023d63 <__divsf3+0x187>
c0023d5c:	29 d8                	sub    eax,ebx
c0023d5e:	ba 01 00 00 00       	mov    edx,0x1
c0023d63:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023d6a:	01 d2                	add    edx,edx
c0023d6c:	89 c1                	mov    ecx,eax
c0023d6e:	01 c0                	add    eax,eax
c0023d70:	85 c9                	test   ecx,ecx
c0023d72:	78 04                	js     c0023d78 <__divsf3+0x19c>
c0023d74:	39 c3                	cmp    ebx,eax
c0023d76:	77 05                	ja     c0023d7d <__divsf3+0x1a1>
c0023d78:	29 d8                	sub    eax,ebx
c0023d7a:	83 ca 01             	or     edx,0x1
c0023d7d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023d80:	75 e8                	jne    c0023d6a <__divsf3+0x18e>
c0023d82:	85 c0                	test   eax,eax
c0023d84:	0f 95 c0             	setne  al
c0023d87:	0f b6 c0             	movzx  eax,al
c0023d8a:	c1 e2 06             	shl    edx,0x6
c0023d8d:	09 c2                	or     edx,eax
c0023d8f:	78 03                	js     c0023d94 <__divsf3+0x1b8>
c0023d91:	01 d2                	add    edx,edx
c0023d93:	4e                   	dec    esi
c0023d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023d9a:	7f 22                	jg     c0023dbe <__divsf3+0x1e2>
c0023d9c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023da2:	85 f6                	test   esi,esi
c0023da4:	7f 23                	jg     c0023dc9 <__divsf3+0x1ed>
c0023da6:	83 fe e9             	cmp    esi,0xffffffe9
c0023da9:	7c 1a                	jl     c0023dc5 <__divsf3+0x1e9>
c0023dab:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023db1:	b9 01 00 00 00       	mov    ecx,0x1
c0023db6:	29 f1                	sub    ecx,esi
c0023db8:	d3 ea                	shr    edx,cl
c0023dba:	31 f6                	xor    esi,esi
c0023dbc:	eb 0b                	jmp    c0023dc9 <__divsf3+0x1ed>
c0023dbe:	be ff 00 00 00       	mov    esi,0xff
c0023dc3:	eb 02                	jmp    c0023dc7 <__divsf3+0x1eb>
c0023dc5:	31 f6                	xor    esi,esi
c0023dc7:	31 d2                	xor    edx,edx
c0023dc9:	89 d0                	mov    eax,edx
c0023dcb:	c1 e8 08             	shr    eax,0x8
c0023dce:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023dd1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023dd7:	09 fe                	or     esi,edi
c0023dd9:	c1 e6 17             	shl    esi,0x17
c0023ddc:	09 c6                	or     esi,eax
c0023dde:	f6 c2 7f             	test   dl,0x7f
c0023de1:	0f 95 c1             	setne  cl
c0023de4:	09 c8                	or     eax,ecx
c0023de6:	83 e0 01             	and    eax,0x1
c0023de9:	c1 ea 07             	shr    edx,0x7
c0023dec:	21 c2                	and    edx,eax
c0023dee:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023df1:	eb 0a                	jmp    c0023dfd <__divsf3+0x221>
c0023df3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023df8:	eb 03                	jmp    c0023dfd <__divsf3+0x221>
c0023dfa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023dfd:	89 d8                	mov    eax,ebx
c0023dff:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e02:	5b                   	pop    ebx
c0023e03:	5e                   	pop    esi
c0023e04:	5f                   	pop    edi
c0023e05:	5d                   	pop    ebp
c0023e06:	c3                   	ret    

c0023e07 <__floatsisf>:
c0023e07:	55                   	push   ebp
c0023e08:	89 e5                	mov    ebp,esp
c0023e0a:	53                   	push   ebx
c0023e0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e0e:	85 d2                	test   edx,edx
c0023e10:	7e 2b                	jle    c0023e3d <__floatsisf+0x36>
c0023e12:	0f bd ca             	bsr    ecx,edx
c0023e15:	83 f1 1f             	xor    ecx,0x1f
c0023e18:	d3 e2                	shl    edx,cl
c0023e1a:	89 d0                	mov    eax,edx
c0023e1c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e21:	89 c3                	mov    ebx,eax
c0023e23:	c1 eb 08             	shr    ebx,0x8
c0023e26:	80 e2 7f             	and    dl,0x7f
c0023e29:	0f 95 c2             	setne  dl
c0023e2c:	09 da                	or     edx,ebx
c0023e2e:	83 e2 01             	and    edx,0x1
c0023e31:	c1 e8 07             	shr    eax,0x7
c0023e34:	21 c2                	and    edx,eax
c0023e36:	b8 9e 00 00 00       	mov    eax,0x9e
c0023e3b:	eb 32                	jmp    c0023e6f <__floatsisf+0x68>
c0023e3d:	b8 00 00 00 00       	mov    eax,0x0
c0023e42:	74 34                	je     c0023e78 <__floatsisf+0x71>
c0023e44:	f7 da                	neg    edx
c0023e46:	0f bd ca             	bsr    ecx,edx
c0023e49:	83 f1 1f             	xor    ecx,0x1f
c0023e4c:	d3 e2                	shl    edx,cl
c0023e4e:	89 d0                	mov    eax,edx
c0023e50:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e55:	89 c3                	mov    ebx,eax
c0023e57:	c1 eb 08             	shr    ebx,0x8
c0023e5a:	80 e2 7f             	and    dl,0x7f
c0023e5d:	0f 95 c2             	setne  dl
c0023e60:	09 da                	or     edx,ebx
c0023e62:	83 e2 01             	and    edx,0x1
c0023e65:	c1 e8 07             	shr    eax,0x7
c0023e68:	21 c2                	and    edx,eax
c0023e6a:	b8 9e 01 00 00       	mov    eax,0x19e
c0023e6f:	29 c8                	sub    eax,ecx
c0023e71:	c1 e0 17             	shl    eax,0x17
c0023e74:	09 d8                	or     eax,ebx
c0023e76:	01 d0                	add    eax,edx
c0023e78:	5b                   	pop    ebx
c0023e79:	5d                   	pop    ebp
c0023e7a:	c3                   	ret    

c0023e7b <__floatunsisf>:
c0023e7b:	55                   	push   ebp
c0023e7c:	89 e5                	mov    ebp,esp
c0023e7e:	53                   	push   ebx
c0023e7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e82:	31 c0                	xor    eax,eax
c0023e84:	85 d2                	test   edx,edx
c0023e86:	74 32                	je     c0023eba <__floatunsisf+0x3f>
c0023e88:	0f bd ca             	bsr    ecx,edx
c0023e8b:	83 f1 1f             	xor    ecx,0x1f
c0023e8e:	d3 e2                	shl    edx,cl
c0023e90:	89 d0                	mov    eax,edx
c0023e92:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e97:	89 c3                	mov    ebx,eax
c0023e99:	c1 eb 08             	shr    ebx,0x8
c0023e9c:	80 e2 7f             	and    dl,0x7f
c0023e9f:	0f 95 c2             	setne  dl
c0023ea2:	09 da                	or     edx,ebx
c0023ea4:	83 e2 01             	and    edx,0x1
c0023ea7:	c1 e8 07             	shr    eax,0x7
c0023eaa:	21 c2                	and    edx,eax
c0023eac:	b8 9e 00 00 00       	mov    eax,0x9e
c0023eb1:	29 c8                	sub    eax,ecx
c0023eb3:	c1 e0 17             	shl    eax,0x17
c0023eb6:	09 d8                	or     eax,ebx
c0023eb8:	01 d0                	add    eax,edx
c0023eba:	5b                   	pop    ebx
c0023ebb:	5d                   	pop    ebp
c0023ebc:	c3                   	ret    

c0023ebd <__fixsfsi>:
c0023ebd:	55                   	push   ebp
c0023ebe:	89 e5                	mov    ebp,esp
c0023ec0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023ec3:	89 d1                	mov    ecx,edx
c0023ec5:	c1 e1 08             	shl    ecx,0x8
c0023ec8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023ece:	c1 fa 17             	sar    edx,0x17
c0023ed1:	78 1c                	js     c0023eef <__fixsfsi+0x32>
c0023ed3:	83 ea 7f             	sub    edx,0x7f
c0023ed6:	31 c0                	xor    eax,eax
c0023ed8:	83 fa 1e             	cmp    edx,0x1e
c0023edb:	77 40                	ja     c0023f1d <__fixsfsi+0x60>
c0023edd:	89 c8                	mov    eax,ecx
c0023edf:	0d 00 00 00 80       	or     eax,0x80000000
c0023ee4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023ee9:	29 d1                	sub    ecx,edx
c0023eeb:	d3 e8                	shr    eax,cl
c0023eed:	eb 2e                	jmp    c0023f1d <__fixsfsi+0x60>
c0023eef:	31 c0                	xor    eax,eax
c0023ef1:	81 c2 81 00 00 00    	add    edx,0x81
c0023ef7:	78 24                	js     c0023f1d <__fixsfsi+0x60>
c0023ef9:	83 fa 1e             	cmp    edx,0x1e
c0023efc:	7e 09                	jle    c0023f07 <__fixsfsi+0x4a>
c0023efe:	83 fa 1f             	cmp    edx,0x1f
c0023f01:	75 18                	jne    c0023f1b <__fixsfsi+0x5e>
c0023f03:	85 c9                	test   ecx,ecx
c0023f05:	75 14                	jne    c0023f1b <__fixsfsi+0x5e>
c0023f07:	89 c8                	mov    eax,ecx
c0023f09:	0d 00 00 00 80       	or     eax,0x80000000
c0023f0e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023f13:	29 d1                	sub    ecx,edx
c0023f15:	d3 e8                	shr    eax,cl
c0023f17:	f7 d8                	neg    eax
c0023f19:	eb 02                	jmp    c0023f1d <__fixsfsi+0x60>
c0023f1b:	31 c0                	xor    eax,eax
c0023f1d:	5d                   	pop    ebp
c0023f1e:	c3                   	ret    

c0023f1f <__fixunssfsi>:
c0023f1f:	55                   	push   ebp
c0023f20:	89 e5                	mov    ebp,esp
c0023f22:	53                   	push   ebx
c0023f23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023f26:	89 d3                	mov    ebx,edx
c0023f28:	c1 fb 17             	sar    ebx,0x17
c0023f2b:	83 eb 7f             	sub    ebx,0x7f
c0023f2e:	31 c0                	xor    eax,eax
c0023f30:	83 fb 1f             	cmp    ebx,0x1f
c0023f33:	77 18                	ja     c0023f4d <__fixunssfsi+0x2e>
c0023f35:	89 d0                	mov    eax,edx
c0023f37:	c1 e0 08             	shl    eax,0x8
c0023f3a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023f3f:	0d 00 00 00 80       	or     eax,0x80000000
c0023f44:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023f49:	29 d9                	sub    ecx,ebx
c0023f4b:	d3 e8                	shr    eax,cl
c0023f4d:	5b                   	pop    ebx
c0023f4e:	5d                   	pop    ebp
c0023f4f:	c3                   	ret    

c0023f50 <__cmpsf2>:
c0023f50:	55                   	push   ebp
c0023f51:	89 e5                	mov    ebp,esp
c0023f53:	57                   	push   edi
c0023f54:	56                   	push   esi
c0023f55:	53                   	push   ebx
c0023f56:	83 ec 24             	sub    esp,0x24
c0023f59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f5f:	e8 4f 10 00 00       	call   c0024fb3 <__truncdfsf2>
c0023f64:	5a                   	pop    edx
c0023f65:	59                   	pop    ecx
c0023f66:	89 c3                	mov    ebx,eax
c0023f68:	c1 e8 17             	shr    eax,0x17
c0023f6b:	0f b6 f0             	movzx  esi,al
c0023f6e:	89 d8                	mov    eax,ebx
c0023f70:	c1 e8 1f             	shr    eax,0x1f
c0023f73:	31 c6                	xor    esi,eax
c0023f75:	c1 e3 08             	shl    ebx,0x8
c0023f78:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023f7b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023f7e:	e8 30 10 00 00       	call   c0024fb3 <__truncdfsf2>
c0023f83:	83 c4 10             	add    esp,0x10
c0023f86:	89 c1                	mov    ecx,eax
c0023f88:	c1 e9 17             	shr    ecx,0x17
c0023f8b:	0f b6 c9             	movzx  ecx,cl
c0023f8e:	89 c7                	mov    edi,eax
c0023f90:	c1 ef 1f             	shr    edi,0x1f
c0023f93:	89 ca                	mov    edx,ecx
c0023f95:	31 fa                	xor    edx,edi
c0023f97:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023f9a:	c1 e0 08             	shl    eax,0x8
c0023f9d:	89 c2                	mov    edx,eax
c0023f9f:	89 d8                	mov    eax,ebx
c0023fa1:	09 d0                	or     eax,edx
c0023fa3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023fa8:	09 f0                	or     eax,esi
c0023faa:	75 08                	jne    c0023fb4 <__cmpsf2+0x64>
c0023fac:	31 c0                	xor    eax,eax
c0023fae:	39 f9                	cmp    ecx,edi
c0023fb0:	75 0c                	jne    c0023fbe <__cmpsf2+0x6e>
c0023fb2:	eb 29                	jmp    c0023fdd <__cmpsf2+0x8d>
c0023fb4:	b8 01 00 00 00       	mov    eax,0x1
c0023fb9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023fbc:	7f 1f                	jg     c0023fdd <__cmpsf2+0x8d>
c0023fbe:	83 c8 ff             	or     eax,0xffffffff
c0023fc1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023fc4:	7c 17                	jl     c0023fdd <__cmpsf2+0x8d>
c0023fc6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023fcc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023fd2:	b8 01 00 00 00       	mov    eax,0x1
c0023fd7:	39 d3                	cmp    ebx,edx
c0023fd9:	77 02                	ja     c0023fdd <__cmpsf2+0x8d>
c0023fdb:	19 c0                	sbb    eax,eax
c0023fdd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023fe0:	5b                   	pop    ebx
c0023fe1:	5e                   	pop    esi
c0023fe2:	5f                   	pop    edi
c0023fe3:	5d                   	pop    ebp
c0023fe4:	c3                   	ret    

c0023fe5 <__eqsf2>:
c0023fe5:	55                   	push   ebp
c0023fe6:	89 e5                	mov    ebp,esp
c0023fe8:	83 ec 24             	sub    esp,0x24
c0023feb:	6a 01                	push   0x1
c0023fed:	83 ec 0c             	sub    esp,0xc
c0023ff0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ff3:	e8 df 10 00 00       	call   c00250d7 <__extendsfdf2>
c0023ff8:	83 c4 10             	add    esp,0x10
c0023ffb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ffe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024001:	52                   	push   edx
c0024002:	50                   	push   eax
c0024003:	50                   	push   eax
c0024004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024007:	e8 cb 10 00 00       	call   c00250d7 <__extendsfdf2>
c002400c:	59                   	pop    ecx
c002400d:	59                   	pop    ecx
c002400e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024011:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024014:	52                   	push   edx
c0024015:	50                   	push   eax
c0024016:	e8 35 ff ff ff       	call   c0023f50 <__cmpsf2>
c002401b:	83 c4 20             	add    esp,0x20
c002401e:	c9                   	leave  
c002401f:	c3                   	ret    

c0024020 <__nesf2>:
c0024020:	eb c3                	jmp    c0023fe5 <__eqsf2>

c0024022 <__gtsf2>:
c0024022:	55                   	push   ebp
c0024023:	89 e5                	mov    ebp,esp
c0024025:	83 ec 24             	sub    esp,0x24
c0024028:	6a ff                	push   0xffffffff
c002402a:	83 ec 0c             	sub    esp,0xc
c002402d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024030:	e8 a2 10 00 00       	call   c00250d7 <__extendsfdf2>
c0024035:	83 c4 10             	add    esp,0x10
c0024038:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002403b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002403e:	52                   	push   edx
c002403f:	50                   	push   eax
c0024040:	50                   	push   eax
c0024041:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024044:	e8 8e 10 00 00       	call   c00250d7 <__extendsfdf2>
c0024049:	59                   	pop    ecx
c002404a:	59                   	pop    ecx
c002404b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002404e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024051:	52                   	push   edx
c0024052:	50                   	push   eax
c0024053:	e8 f8 fe ff ff       	call   c0023f50 <__cmpsf2>
c0024058:	83 c4 20             	add    esp,0x20
c002405b:	c9                   	leave  
c002405c:	c3                   	ret    

c002405d <__gesf2>:
c002405d:	eb c3                	jmp    c0024022 <__gtsf2>

c002405f <__ltsf2>:
c002405f:	eb 84                	jmp    c0023fe5 <__eqsf2>

c0024061 <__lesf2>:
c0024061:	eb 82                	jmp    c0023fe5 <__eqsf2>

c0024063 <__adddf3>:
c0024063:	55                   	push   ebp
c0024064:	89 e5                	mov    ebp,esp
c0024066:	57                   	push   edi
c0024067:	56                   	push   esi
c0024068:	53                   	push   ebx
c0024069:	83 ec 24             	sub    esp,0x24
c002406c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002406f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024072:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024075:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024078:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002407b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002407e:	89 c8                	mov    eax,ecx
c0024080:	89 ce                	mov    esi,ecx
c0024082:	c1 fe 14             	sar    esi,0x14
c0024085:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0024088:	89 fb                	mov    ebx,edi
c002408a:	89 fa                	mov    edx,edi
c002408c:	c1 e2 0b             	shl    edx,0xb
c002408f:	c1 e0 0b             	shl    eax,0xb
c0024092:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024097:	c1 eb 15             	shr    ebx,0x15
c002409a:	09 d8                	or     eax,ebx
c002409c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002409f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00240a2:	c1 fe 14             	sar    esi,0x14
c00240a5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00240a8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00240ab:	89 f3                	mov    ebx,esi
c00240ad:	c1 e3 0b             	shl    ebx,0xb
c00240b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00240b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00240b6:	c1 e3 0b             	shl    ebx,0xb
c00240b9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00240bf:	c1 ee 15             	shr    esi,0x15
c00240c2:	09 f3                	or     ebx,esi
c00240c4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00240c7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00240ca:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00240cd:	0f 88 5f 02 00 00    	js     c0024332 <__adddf3+0x2cf>
c00240d3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00240d6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00240d9:	85 db                	test   ebx,ebx
c00240db:	0f 8e c7 00 00 00    	jle    c00241a8 <__adddf3+0x145>
c00240e1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00240e8:	75 1a                	jne    c0024104 <__adddf3+0xa1>
c00240ea:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00240ed:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00240f0:	0f 84 b2 05 00 00    	je     c00246a8 <__adddf3+0x645>
c00240f6:	4b                   	dec    ebx
c00240f7:	75 23                	jne    c002411c <__adddf3+0xb9>
c00240f9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00240fc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00240ff:	e9 99 00 00 00       	jmp    c002419d <__adddf3+0x13a>
c0024104:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024107:	f7 d6                	not    esi
c0024109:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002410f:	0f 84 93 05 00 00    	je     c00246a8 <__adddf3+0x645>
c0024115:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002411c:	83 fb 1f             	cmp    ebx,0x1f
c002411f:	7e 42                	jle    c0024163 <__adddf3+0x100>
c0024121:	83 fb 3f             	cmp    ebx,0x3f
c0024124:	0f 8f 7e 05 00 00    	jg     c00246a8 <__adddf3+0x645>
c002412a:	83 e3 1f             	and    ebx,0x1f
c002412d:	89 d9                	mov    ecx,ebx
c002412f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024132:	d3 ef                	shr    edi,cl
c0024134:	31 db                	xor    ebx,ebx
c0024136:	85 c9                	test   ecx,ecx
c0024138:	74 15                	je     c002414f <__adddf3+0xec>
c002413a:	be 20 00 00 00       	mov    esi,0x20
c002413f:	29 ce                	sub    esi,ecx
c0024141:	89 f1                	mov    ecx,esi
c0024143:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024146:	d3 e6                	shl    esi,cl
c0024148:	31 db                	xor    ebx,ebx
c002414a:	85 f6                	test   esi,esi
c002414c:	0f 95 c3             	setne  bl
c002414f:	31 c9                	xor    ecx,ecx
c0024151:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024155:	0f 95 c1             	setne  cl
c0024158:	09 cf                	or     edi,ecx
c002415a:	09 fb                	or     ebx,edi
c002415c:	01 da                	add    edx,ebx
c002415e:	83 d0 00             	adc    eax,0x0
c0024161:	eb 3a                	jmp    c002419d <__adddf3+0x13a>
c0024163:	bf 20 00 00 00       	mov    edi,0x20
c0024168:	29 df                	sub    edi,ebx
c002416a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002416d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024170:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024173:	d3 e6                	shl    esi,cl
c0024175:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024178:	88 d9                	mov    cl,bl
c002417a:	d3 ef                	shr    edi,cl
c002417c:	09 fe                	or     esi,edi
c002417e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024181:	88 d9                	mov    cl,bl
c0024183:	d3 ef                	shr    edi,cl
c0024185:	89 fb                	mov    ebx,edi
c0024187:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002418a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002418d:	d3 e7                	shl    edi,cl
c002418f:	85 ff                	test   edi,edi
c0024191:	0f 95 c1             	setne  cl
c0024194:	0f b6 c9             	movzx  ecx,cl
c0024197:	09 ce                	or     esi,ecx
c0024199:	01 f2                	add    edx,esi
c002419b:	11 d8                	adc    eax,ebx
c002419d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00241a0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00241a3:	e9 52 01 00 00       	jmp    c00242fa <__adddf3+0x297>
c00241a8:	0f 84 d5 00 00 00    	je     c0024283 <__adddf3+0x220>
c00241ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241b1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00241b4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00241b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00241ba:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00241c1:	75 20                	jne    c00241e3 <__adddf3+0x180>
c00241c3:	89 d6                	mov    esi,edx
c00241c5:	09 c6                	or     esi,eax
c00241c7:	0f 84 db 04 00 00    	je     c00246a8 <__adddf3+0x645>
c00241cd:	4b                   	dec    ebx
c00241ce:	75 29                	jne    c00241f9 <__adddf3+0x196>
c00241d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00241d6:	01 d1                	add    ecx,edx
c00241d8:	11 c6                	adc    esi,eax
c00241da:	89 f0                	mov    eax,esi
c00241dc:	89 ca                	mov    edx,ecx
c00241de:	e9 17 01 00 00       	jmp    c00242fa <__adddf3+0x297>
c00241e3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00241e6:	f7 d6                	not    esi
c00241e8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241ee:	0f 84 b4 04 00 00    	je     c00246a8 <__adddf3+0x645>
c00241f4:	0d 00 00 00 80       	or     eax,0x80000000
c00241f9:	83 fb 1f             	cmp    ebx,0x1f
c00241fc:	7e 48                	jle    c0024246 <__adddf3+0x1e3>
c00241fe:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024201:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024204:	83 fb 3f             	cmp    ebx,0x3f
c0024207:	0f 8f 9b 04 00 00    	jg     c00246a8 <__adddf3+0x645>
c002420d:	83 e3 1f             	and    ebx,0x1f
c0024210:	89 d9                	mov    ecx,ebx
c0024212:	89 c7                	mov    edi,eax
c0024214:	d3 ef                	shr    edi,cl
c0024216:	31 db                	xor    ebx,ebx
c0024218:	85 c9                	test   ecx,ecx
c002421a:	74 12                	je     c002422e <__adddf3+0x1cb>
c002421c:	be 20 00 00 00       	mov    esi,0x20
c0024221:	29 ce                	sub    esi,ecx
c0024223:	89 f1                	mov    ecx,esi
c0024225:	d3 e0                	shl    eax,cl
c0024227:	31 db                	xor    ebx,ebx
c0024229:	85 c0                	test   eax,eax
c002422b:	0f 95 c3             	setne  bl
c002422e:	31 c0                	xor    eax,eax
c0024230:	85 d2                	test   edx,edx
c0024232:	0f 95 c0             	setne  al
c0024235:	09 c7                	or     edi,eax
c0024237:	09 fb                	or     ebx,edi
c0024239:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002423c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002423f:	01 da                	add    edx,ebx
c0024241:	83 d6 00             	adc    esi,0x0
c0024244:	eb 39                	jmp    c002427f <__adddf3+0x21c>
c0024246:	be 20 00 00 00       	mov    esi,0x20
c002424b:	29 de                	sub    esi,ebx
c002424d:	89 c7                	mov    edi,eax
c002424f:	89 f1                	mov    ecx,esi
c0024251:	d3 e7                	shl    edi,cl
c0024253:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024256:	89 d7                	mov    edi,edx
c0024258:	88 d9                	mov    cl,bl
c002425a:	d3 ef                	shr    edi,cl
c002425c:	89 f9                	mov    ecx,edi
c002425e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024261:	09 cf                	or     edi,ecx
c0024263:	88 d9                	mov    cl,bl
c0024265:	d3 e8                	shr    eax,cl
c0024267:	89 f1                	mov    ecx,esi
c0024269:	d3 e2                	shl    edx,cl
c002426b:	85 d2                	test   edx,edx
c002426d:	0f 95 c2             	setne  dl
c0024270:	0f b6 d2             	movzx  edx,dl
c0024273:	09 d7                	or     edi,edx
c0024275:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024278:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002427b:	01 fa                	add    edx,edi
c002427d:	11 c6                	adc    esi,eax
c002427f:	89 f0                	mov    eax,esi
c0024281:	eb 77                	jmp    c00242fa <__adddf3+0x297>
c0024283:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024286:	46                   	inc    esi
c0024287:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002428a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024290:	75 41                	jne    c00242d3 <__adddf3+0x270>
c0024292:	89 d3                	mov    ebx,edx
c0024294:	09 c3                	or     ebx,eax
c0024296:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002429d:	75 27                	jne    c00242c6 <__adddf3+0x263>
c002429f:	85 db                	test   ebx,ebx
c00242a1:	0f 84 fb 03 00 00    	je     c00246a2 <__adddf3+0x63f>
c00242a7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00242aa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00242ad:	0f 84 f5 03 00 00    	je     c00246a8 <__adddf3+0x645>
c00242b3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00242b6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00242b9:	85 c0                	test   eax,eax
c00242bb:	0f 89 91 03 00 00    	jns    c0024652 <__adddf3+0x5ef>
c00242c1:	e9 85 03 00 00       	jmp    c002464b <__adddf3+0x5e8>
c00242c6:	85 db                	test   ebx,ebx
c00242c8:	0f 85 da 03 00 00    	jne    c00246a8 <__adddf3+0x645>
c00242ce:	e9 cf 03 00 00       	jmp    c00246a2 <__adddf3+0x63f>
c00242d3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00242d6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00242d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00242dc:	f7 d1                	not    ecx
c00242de:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00242e4:	0f 84 70 03 00 00    	je     c002465a <__adddf3+0x5f7>
c00242ea:	d1 ea                	shr    edx,1
c00242ec:	89 c1                	mov    ecx,eax
c00242ee:	c1 e1 1f             	shl    ecx,0x1f
c00242f1:	09 ca                	or     edx,ecx
c00242f3:	d1 e8                	shr    eax,1
c00242f5:	e9 6f 03 00 00       	jmp    c0024669 <__adddf3+0x606>
c00242fa:	85 c0                	test   eax,eax
c00242fc:	0f 89 67 03 00 00    	jns    c0024669 <__adddf3+0x606>
c0024302:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024305:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024308:	f7 d1                	not    ecx
c002430a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024310:	0f 84 44 03 00 00    	je     c002465a <__adddf3+0x5f7>
c0024316:	89 d1                	mov    ecx,edx
c0024318:	d1 e9                	shr    ecx,1
c002431a:	83 e2 01             	and    edx,0x1
c002431d:	09 ca                	or     edx,ecx
c002431f:	89 c1                	mov    ecx,eax
c0024321:	c1 e1 1f             	shl    ecx,0x1f
c0024324:	09 ca                	or     edx,ecx
c0024326:	d1 e8                	shr    eax,1
c0024328:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002432d:	e9 37 03 00 00       	jmp    c0024669 <__adddf3+0x606>
c0024332:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024335:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002433b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002433e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024341:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024347:	29 de                	sub    esi,ebx
c0024349:	85 f6                	test   esi,esi
c002434b:	0f 8e bd 00 00 00    	jle    c002440e <__adddf3+0x3ab>
c0024351:	85 db                	test   ebx,ebx
c0024353:	75 17                	jne    c002436c <__adddf3+0x309>
c0024355:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024358:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002435b:	0f 84 47 03 00 00    	je     c00246a8 <__adddf3+0x645>
c0024361:	4e                   	dec    esi
c0024362:	75 20                	jne    c0024384 <__adddf3+0x321>
c0024364:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024367:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002436a:	eb 5b                	jmp    c00243c7 <__adddf3+0x364>
c002436c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002436f:	f7 d3                	not    ebx
c0024371:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024377:	0f 84 2b 03 00 00    	je     c00246a8 <__adddf3+0x645>
c002437d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024384:	83 fe 1f             	cmp    esi,0x1f
c0024387:	7e 49                	jle    c00243d2 <__adddf3+0x36f>
c0024389:	83 fe 3f             	cmp    esi,0x3f
c002438c:	0f 8f 16 03 00 00    	jg     c00246a8 <__adddf3+0x645>
c0024392:	83 e6 1f             	and    esi,0x1f
c0024395:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024398:	89 f1                	mov    ecx,esi
c002439a:	d3 ef                	shr    edi,cl
c002439c:	31 db                	xor    ebx,ebx
c002439e:	85 f6                	test   esi,esi
c00243a0:	74 13                	je     c00243b5 <__adddf3+0x352>
c00243a2:	b9 20 00 00 00       	mov    ecx,0x20
c00243a7:	29 f1                	sub    ecx,esi
c00243a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00243ac:	d3 e6                	shl    esi,cl
c00243ae:	31 db                	xor    ebx,ebx
c00243b0:	85 f6                	test   esi,esi
c00243b2:	0f 95 c3             	setne  bl
c00243b5:	31 c9                	xor    ecx,ecx
c00243b7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00243bb:	0f 95 c1             	setne  cl
c00243be:	09 cf                	or     edi,ecx
c00243c0:	09 fb                	or     ebx,edi
c00243c2:	29 da                	sub    edx,ebx
c00243c4:	83 d8 00             	sbb    eax,0x0
c00243c7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00243ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00243cd:	e9 aa 01 00 00       	jmp    c002457c <__adddf3+0x519>
c00243d2:	bf 20 00 00 00       	mov    edi,0x20
c00243d7:	29 f7                	sub    edi,esi
c00243d9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00243dc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00243df:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00243e2:	d3 e3                	shl    ebx,cl
c00243e4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00243e7:	89 f1                	mov    ecx,esi
c00243e9:	d3 ef                	shr    edi,cl
c00243eb:	09 fb                	or     ebx,edi
c00243ed:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00243f0:	89 f1                	mov    ecx,esi
c00243f2:	d3 ef                	shr    edi,cl
c00243f4:	89 fe                	mov    esi,edi
c00243f6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00243f9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00243fc:	d3 e7                	shl    edi,cl
c00243fe:	85 ff                	test   edi,edi
c0024400:	0f 95 c1             	setne  cl
c0024403:	0f b6 c9             	movzx  ecx,cl
c0024406:	09 cb                	or     ebx,ecx
c0024408:	29 da                	sub    edx,ebx
c002440a:	19 f0                	sbb    eax,esi
c002440c:	eb b9                	jmp    c00243c7 <__adddf3+0x364>
c002440e:	0f 84 cd 00 00 00    	je     c00244e1 <__adddf3+0x47e>
c0024414:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024417:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002441a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002441d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024421:	75 1b                	jne    c002443e <__adddf3+0x3db>
c0024423:	89 d6                	mov    esi,edx
c0024425:	09 c6                	or     esi,eax
c0024427:	0f 84 7b 02 00 00    	je     c00246a8 <__adddf3+0x645>
c002442d:	4b                   	dec    ebx
c002442e:	75 24                	jne    c0024454 <__adddf3+0x3f1>
c0024430:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024433:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024436:	29 d1                	sub    ecx,edx
c0024438:	19 c6                	sbb    esi,eax
c002443a:	89 ca                	mov    edx,ecx
c002443c:	eb 61                	jmp    c002449f <__adddf3+0x43c>
c002443e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024441:	f7 d6                	not    esi
c0024443:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024449:	0f 84 59 02 00 00    	je     c00246a8 <__adddf3+0x645>
c002444f:	0d 00 00 00 80       	or     eax,0x80000000
c0024454:	83 fb 1f             	cmp    ebx,0x1f
c0024457:	7e 4d                	jle    c00244a6 <__adddf3+0x443>
c0024459:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002445c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002445f:	83 fb 3f             	cmp    ebx,0x3f
c0024462:	0f 8f 40 02 00 00    	jg     c00246a8 <__adddf3+0x645>
c0024468:	83 e3 1f             	and    ebx,0x1f
c002446b:	89 d9                	mov    ecx,ebx
c002446d:	89 c7                	mov    edi,eax
c002446f:	d3 ef                	shr    edi,cl
c0024471:	31 db                	xor    ebx,ebx
c0024473:	85 c9                	test   ecx,ecx
c0024475:	74 12                	je     c0024489 <__adddf3+0x426>
c0024477:	be 20 00 00 00       	mov    esi,0x20
c002447c:	29 ce                	sub    esi,ecx
c002447e:	89 f1                	mov    ecx,esi
c0024480:	d3 e0                	shl    eax,cl
c0024482:	31 db                	xor    ebx,ebx
c0024484:	85 c0                	test   eax,eax
c0024486:	0f 95 c3             	setne  bl
c0024489:	31 c0                	xor    eax,eax
c002448b:	85 d2                	test   edx,edx
c002448d:	0f 95 c0             	setne  al
c0024490:	09 c7                	or     edi,eax
c0024492:	09 fb                	or     ebx,edi
c0024494:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024497:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002449a:	29 da                	sub    edx,ebx
c002449c:	83 de 00             	sbb    esi,0x0
c002449f:	89 f0                	mov    eax,esi
c00244a1:	e9 d6 00 00 00       	jmp    c002457c <__adddf3+0x519>
c00244a6:	be 20 00 00 00       	mov    esi,0x20
c00244ab:	29 de                	sub    esi,ebx
c00244ad:	89 c7                	mov    edi,eax
c00244af:	89 f1                	mov    ecx,esi
c00244b1:	d3 e7                	shl    edi,cl
c00244b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00244b6:	89 d7                	mov    edi,edx
c00244b8:	88 d9                	mov    cl,bl
c00244ba:	d3 ef                	shr    edi,cl
c00244bc:	89 f9                	mov    ecx,edi
c00244be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244c1:	09 cf                	or     edi,ecx
c00244c3:	88 d9                	mov    cl,bl
c00244c5:	d3 e8                	shr    eax,cl
c00244c7:	89 f1                	mov    ecx,esi
c00244c9:	d3 e2                	shl    edx,cl
c00244cb:	85 d2                	test   edx,edx
c00244cd:	0f 95 c2             	setne  dl
c00244d0:	0f b6 d2             	movzx  edx,dl
c00244d3:	09 d7                	or     edi,edx
c00244d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00244d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00244db:	29 fa                	sub    edx,edi
c00244dd:	19 c6                	sbb    esi,eax
c00244df:	eb be                	jmp    c002449f <__adddf3+0x43c>
c00244e1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00244e4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00244e7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00244ed:	75 6a                	jne    c0024559 <__adddf3+0x4f6>
c00244ef:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00244f3:	75 58                	jne    c002454d <__adddf3+0x4ea>
c00244f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00244f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00244fb:	89 d6                	mov    esi,edx
c00244fd:	09 c6                	or     esi,eax
c00244ff:	75 17                	jne    c0024518 <__adddf3+0x4b5>
c0024501:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024504:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024507:	85 db                	test   ebx,ebx
c0024509:	0f 85 99 01 00 00    	jne    c00246a8 <__adddf3+0x645>
c002450f:	31 ff                	xor    edi,edi
c0024511:	31 c9                	xor    ecx,ecx
c0024513:	e9 90 01 00 00       	jmp    c00246a8 <__adddf3+0x645>
c0024518:	85 db                	test   ebx,ebx
c002451a:	0f 84 88 01 00 00    	je     c00246a8 <__adddf3+0x645>
c0024520:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024523:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024526:	85 c0                	test   eax,eax
c0024528:	79 10                	jns    c002453a <__adddf3+0x4d7>
c002452a:	31 c9                	xor    ecx,ecx
c002452c:	f7 da                	neg    edx
c002452e:	0f 95 c1             	setne  cl
c0024531:	01 c8                	add    eax,ecx
c0024533:	f7 d8                	neg    eax
c0024535:	e9 2f 01 00 00       	jmp    c0024669 <__adddf3+0x606>
c002453a:	31 ff                	xor    edi,edi
c002453c:	31 c9                	xor    ecx,ecx
c002453e:	89 c3                	mov    ebx,eax
c0024540:	09 d3                	or     ebx,edx
c0024542:	0f 84 60 01 00 00    	je     c00246a8 <__adddf3+0x645>
c0024548:	e9 05 01 00 00       	jmp    c0024652 <__adddf3+0x5ef>
c002454d:	31 ff                	xor    edi,edi
c002454f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024554:	e9 4f 01 00 00       	jmp    c00246a8 <__adddf3+0x645>
c0024559:	89 c1                	mov    ecx,eax
c002455b:	89 d0                	mov    eax,edx
c002455d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024560:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024563:	89 ca                	mov    edx,ecx
c0024565:	85 c9                	test   ecx,ecx
c0024567:	79 2c                	jns    c0024595 <__adddf3+0x532>
c0024569:	31 c9                	xor    ecx,ecx
c002456b:	f7 d8                	neg    eax
c002456d:	0f 95 c1             	setne  cl
c0024570:	01 ca                	add    edx,ecx
c0024572:	f7 da                	neg    edx
c0024574:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024577:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002457a:	eb 19                	jmp    c0024595 <__adddf3+0x532>
c002457c:	85 c0                	test   eax,eax
c002457e:	0f 89 e5 00 00 00    	jns    c0024669 <__adddf3+0x606>
c0024584:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024589:	89 c1                	mov    ecx,eax
c002458b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002458e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024591:	89 d0                	mov    eax,edx
c0024593:	89 ca                	mov    edx,ecx
c0024595:	85 d2                	test   edx,edx
c0024597:	74 59                	je     c00245f2 <__adddf3+0x58f>
c0024599:	0f bd da             	bsr    ebx,edx
c002459c:	83 f3 1f             	xor    ebx,0x1f
c002459f:	88 d9                	mov    cl,bl
c00245a1:	d3 e2                	shl    edx,cl
c00245a3:	bf 20 00 00 00       	mov    edi,0x20
c00245a8:	89 f9                	mov    ecx,edi
c00245aa:	29 d9                	sub    ecx,ebx
c00245ac:	89 c6                	mov    esi,eax
c00245ae:	d3 ee                	shr    esi,cl
c00245b0:	09 d6                	or     esi,edx
c00245b2:	88 d9                	mov    cl,bl
c00245b4:	d3 e0                	shl    eax,cl
c00245b6:	89 c2                	mov    edx,eax
c00245b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245bb:	25 ff 07 00 00       	and    eax,0x7ff
c00245c0:	39 d8                	cmp    eax,ebx
c00245c2:	7f 22                	jg     c00245e6 <__adddf3+0x583>
c00245c4:	29 c3                	sub    ebx,eax
c00245c6:	43                   	inc    ebx
c00245c7:	88 d9                	mov    cl,bl
c00245c9:	d3 ea                	shr    edx,cl
c00245cb:	29 df                	sub    edi,ebx
c00245cd:	89 f9                	mov    ecx,edi
c00245cf:	89 f0                	mov    eax,esi
c00245d1:	d3 e0                	shl    eax,cl
c00245d3:	09 c2                	or     edx,eax
c00245d5:	89 f0                	mov    eax,esi
c00245d7:	88 d9                	mov    cl,bl
c00245d9:	d3 e8                	shr    eax,cl
c00245db:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00245de:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00245e4:	eb 6f                	jmp    c0024655 <__adddf3+0x5f2>
c00245e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245e9:	29 d8                	sub    eax,ebx
c00245eb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245ee:	89 f0                	mov    eax,esi
c00245f0:	eb 59                	jmp    c002464b <__adddf3+0x5e8>
c00245f2:	85 c0                	test   eax,eax
c00245f4:	74 6a                	je     c0024660 <__adddf3+0x5fd>
c00245f6:	0f bd c8             	bsr    ecx,eax
c00245f9:	83 f1 1f             	xor    ecx,0x1f
c00245fc:	d3 e0                	shl    eax,cl
c00245fe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024601:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024607:	83 c1 20             	add    ecx,0x20
c002460a:	39 cb                	cmp    ebx,ecx
c002460c:	7f 35                	jg     c0024643 <__adddf3+0x5e0>
c002460e:	29 d9                	sub    ecx,ebx
c0024610:	8d 71 01             	lea    esi,[ecx+0x1]
c0024613:	83 fe 1f             	cmp    esi,0x1f
c0024616:	7e 09                	jle    c0024621 <__adddf3+0x5be>
c0024618:	83 e9 1f             	sub    ecx,0x1f
c002461b:	d3 e8                	shr    eax,cl
c002461d:	89 c3                	mov    ebx,eax
c002461f:	eb 11                	jmp    c0024632 <__adddf3+0x5cf>
c0024621:	b9 20 00 00 00       	mov    ecx,0x20
c0024626:	29 f1                	sub    ecx,esi
c0024628:	89 c3                	mov    ebx,eax
c002462a:	d3 e3                	shl    ebx,cl
c002462c:	89 f1                	mov    ecx,esi
c002462e:	d3 e8                	shr    eax,cl
c0024630:	89 c2                	mov    edx,eax
c0024632:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024635:	25 00 f8 ff ff       	and    eax,0xfffff800
c002463a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002463d:	89 d0                	mov    eax,edx
c002463f:	89 da                	mov    edx,ebx
c0024641:	eb 26                	jmp    c0024669 <__adddf3+0x606>
c0024643:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024646:	29 cf                	sub    edi,ecx
c0024648:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002464b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024650:	eb 17                	jmp    c0024669 <__adddf3+0x606>
c0024652:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024655:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024658:	eb 0f                	jmp    c0024669 <__adddf3+0x606>
c002465a:	31 d2                	xor    edx,edx
c002465c:	31 c0                	xor    eax,eax
c002465e:	eb 09                	jmp    c0024669 <__adddf3+0x606>
c0024660:	89 c2                	mov    edx,eax
c0024662:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024669:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002466c:	c1 e1 14             	shl    ecx,0x14
c002466f:	89 c3                	mov    ebx,eax
c0024671:	c1 eb 0b             	shr    ebx,0xb
c0024674:	09 d9                	or     ecx,ebx
c0024676:	89 d3                	mov    ebx,edx
c0024678:	c1 eb 0b             	shr    ebx,0xb
c002467b:	c1 e0 15             	shl    eax,0x15
c002467e:	09 d8                	or     eax,ebx
c0024680:	89 c7                	mov    edi,eax
c0024682:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024688:	0f 95 c0             	setne  al
c002468b:	89 c6                	mov    esi,eax
c002468d:	09 f3                	or     ebx,esi
c002468f:	83 e3 01             	and    ebx,0x1
c0024692:	c1 ea 0a             	shr    edx,0xa
c0024695:	21 da                	and    edx,ebx
c0024697:	89 f8                	mov    eax,edi
c0024699:	01 d0                	add    eax,edx
c002469b:	83 d1 00             	adc    ecx,0x0
c002469e:	89 c7                	mov    edi,eax
c00246a0:	eb 06                	jmp    c00246a8 <__adddf3+0x645>
c00246a2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00246a5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00246a8:	89 f8                	mov    eax,edi
c00246aa:	89 ca                	mov    edx,ecx
c00246ac:	83 c4 24             	add    esp,0x24
c00246af:	5b                   	pop    ebx
c00246b0:	5e                   	pop    esi
c00246b1:	5f                   	pop    edi
c00246b2:	5d                   	pop    ebp
c00246b3:	c3                   	ret    

c00246b4 <__subdf3>:
c00246b4:	55                   	push   ebp
c00246b5:	89 e5                	mov    ebp,esp
c00246b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00246ba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00246bd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00246c3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00246c6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00246c9:	5d                   	pop    ebp
c00246ca:	e9 94 f9 ff ff       	jmp    c0024063 <__adddf3>

c00246cf <__negdf2>:
c00246cf:	55                   	push   ebp
c00246d0:	89 e5                	mov    ebp,esp
c00246d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246d5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00246d8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00246de:	5d                   	pop    ebp
c00246df:	c3                   	ret    

c00246e0 <__muldf3>:
c00246e0:	55                   	push   ebp
c00246e1:	89 e5                	mov    ebp,esp
c00246e3:	57                   	push   edi
c00246e4:	56                   	push   esi
c00246e5:	53                   	push   ebx
c00246e6:	83 ec 24             	sub    esp,0x24
c00246e9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00246ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00246f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00246f8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00246fb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00246fe:	89 c8                	mov    eax,ecx
c0024700:	c1 f8 14             	sar    eax,0x14
c0024703:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024706:	89 f8                	mov    eax,edi
c0024708:	89 fb                	mov    ebx,edi
c002470a:	c1 e3 0b             	shl    ebx,0xb
c002470d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024710:	c1 e1 0b             	shl    ecx,0xb
c0024713:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024719:	c1 e8 15             	shr    eax,0x15
c002471c:	09 c1                	or     ecx,eax
c002471e:	89 d6                	mov    esi,edx
c0024720:	89 d0                	mov    eax,edx
c0024722:	c1 f8 14             	sar    eax,0x14
c0024725:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024728:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002472b:	89 c3                	mov    ebx,eax
c002472d:	c1 e3 0b             	shl    ebx,0xb
c0024730:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024733:	c1 e6 0b             	shl    esi,0xb
c0024736:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002473c:	c1 e8 15             	shr    eax,0x15
c002473f:	09 c6                	or     esi,eax
c0024741:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024744:	25 ff 07 00 00       	and    eax,0x7ff
c0024749:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002474c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002474f:	25 ff 07 00 00       	and    eax,0x7ff
c0024754:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024757:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002475a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002475d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024764:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024767:	40                   	inc    eax
c0024768:	a9 fe 07 00 00       	test   eax,0x7fe
c002476d:	0f 85 8d 00 00 00    	jne    c0024800 <__muldf3+0x120>
c0024773:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024776:	09 c8                	or     eax,ecx
c0024778:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002477c:	74 44                	je     c00247c2 <__muldf3+0xe2>
c002477e:	85 c0                	test   eax,eax
c0024780:	0f 85 31 02 00 00    	jne    c00249b7 <__muldf3+0x2d7>
c0024786:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024789:	40                   	inc    eax
c002478a:	a9 fe 07 00 00       	test   eax,0x7fe
c002478f:	75 13                	jne    c00247a4 <__muldf3+0xc4>
c0024791:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024794:	09 f1                	or     ecx,esi
c0024796:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002479a:	74 22                	je     c00247be <__muldf3+0xde>
c002479c:	85 c9                	test   ecx,ecx
c002479e:	0f 85 0d 02 00 00    	jne    c00249b1 <__muldf3+0x2d1>
c00247a4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00247a8:	0f 89 09 02 00 00    	jns    c00249b7 <__muldf3+0x2d7>
c00247ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247b1:	05 00 00 00 80       	add    eax,0x80000000
c00247b6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247b9:	e9 f9 01 00 00       	jmp    c00249b7 <__muldf3+0x2d7>
c00247be:	85 c9                	test   ecx,ecx
c00247c0:	eb 2e                	jmp    c00247f0 <__muldf3+0x110>
c00247c2:	85 c0                	test   eax,eax
c00247c4:	74 20                	je     c00247e6 <__muldf3+0x106>
c00247c6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00247c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247cc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00247cf:	c1 ef 1f             	shr    edi,0x1f
c00247d2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00247d5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00247d8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00247db:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00247de:	09 f9                	or     ecx,edi
c00247e0:	78 1e                	js     c0024800 <__muldf3+0x120>
c00247e2:	89 c3                	mov    ebx,eax
c00247e4:	eb e0                	jmp    c00247c6 <__muldf3+0xe6>
c00247e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00247e9:	f7 d0                	not    eax
c00247eb:	a9 ff 07 00 00       	test   eax,0x7ff
c00247f0:	75 b2                	jne    c00247a4 <__muldf3+0xc4>
c00247f2:	31 ff                	xor    edi,edi
c00247f4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00247fb:	e9 b7 01 00 00       	jmp    c00249b7 <__muldf3+0x2d7>
c0024800:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024803:	40                   	inc    eax
c0024804:	a9 fe 07 00 00       	test   eax,0x7fe
c0024809:	75 57                	jne    c0024862 <__muldf3+0x182>
c002480b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002480e:	09 f0                	or     eax,esi
c0024810:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024814:	74 23                	je     c0024839 <__muldf3+0x159>
c0024816:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002481a:	0f 89 91 01 00 00    	jns    c00249b1 <__muldf3+0x2d1>
c0024820:	85 c0                	test   eax,eax
c0024822:	0f 85 89 01 00 00    	jne    c00249b1 <__muldf3+0x2d1>
c0024828:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002482b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024831:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024834:	e9 7e 01 00 00       	jmp    c00249b7 <__muldf3+0x2d7>
c0024839:	85 c0                	test   eax,eax
c002483b:	75 0c                	jne    c0024849 <__muldf3+0x169>
c002483d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0024841:	0f 89 6a 01 00 00    	jns    c00249b1 <__muldf3+0x2d1>
c0024847:	eb df                	jmp    c0024828 <__muldf3+0x148>
c0024849:	01 f6                	add    esi,esi
c002484b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002484e:	c1 ea 1f             	shr    edx,0x1f
c0024851:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024854:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0024857:	8d 43 ff             	lea    eax,[ebx-0x1]
c002485a:	09 d6                	or     esi,edx
c002485c:	78 04                	js     c0024862 <__muldf3+0x182>
c002485e:	89 c3                	mov    ebx,eax
c0024860:	eb e7                	jmp    c0024849 <__muldf3+0x169>
c0024862:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024868:	81 ce 00 00 00 80    	or     esi,0x80000000
c002486e:	89 c8                	mov    eax,ecx
c0024870:	f7 e6                	mul    esi
c0024872:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024875:	89 c7                	mov    edi,eax
c0024877:	89 c8                	mov    eax,ecx
c0024879:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002487c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002487f:	89 c1                	mov    ecx,eax
c0024881:	89 f0                	mov    eax,esi
c0024883:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024886:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024889:	89 c6                	mov    esi,eax
c002488b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002488e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024891:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024894:	31 c0                	xor    eax,eax
c0024896:	01 f1                	add    ecx,esi
c0024898:	0f 92 c0             	setb   al
c002489b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002489e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00248a1:	83 d6 00             	adc    esi,0x0
c00248a4:	01 c7                	add    edi,eax
c00248a6:	83 d6 00             	adc    esi,0x0
c00248a9:	01 ca                	add    edx,ecx
c00248ab:	0f 92 c1             	setb   cl
c00248ae:	0f b6 c9             	movzx  ecx,cl
c00248b1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00248b4:	83 d6 00             	adc    esi,0x0
c00248b7:	01 cf                	add    edi,ecx
c00248b9:	83 d6 00             	adc    esi,0x0
c00248bc:	31 c9                	xor    ecx,ecx
c00248be:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00248c1:	0f 95 c1             	setne  cl
c00248c4:	09 cf                	or     edi,ecx
c00248c6:	85 f6                	test   esi,esi
c00248c8:	78 0c                	js     c00248d6 <__muldf3+0x1f6>
c00248ca:	01 f6                	add    esi,esi
c00248cc:	89 f8                	mov    eax,edi
c00248ce:	c1 e8 1f             	shr    eax,0x1f
c00248d1:	09 c6                	or     esi,eax
c00248d3:	01 ff                	add    edi,edi
c00248d5:	4b                   	dec    ebx
c00248d6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00248dc:	0f 8f 85 00 00 00    	jg     c0024967 <__muldf3+0x287>
c00248e2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00248e8:	85 db                	test   ebx,ebx
c00248ea:	0f 8f 84 00 00 00    	jg     c0024974 <__muldf3+0x294>
c00248f0:	83 fb cc             	cmp    ebx,0xffffffcc
c00248f3:	7c 79                	jl     c002496e <__muldf3+0x28e>
c00248f5:	ba 01 00 00 00       	mov    edx,0x1
c00248fa:	29 da                	sub    edx,ebx
c00248fc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024902:	83 fa 1f             	cmp    edx,0x1f
c0024905:	7e 30                	jle    c0024937 <__muldf3+0x257>
c0024907:	83 fa 20             	cmp    edx,0x20
c002490a:	75 0b                	jne    c0024917 <__muldf3+0x237>
c002490c:	31 c0                	xor    eax,eax
c002490e:	85 ff                	test   edi,edi
c0024910:	0f 95 c0             	setne  al
c0024913:	89 c7                	mov    edi,eax
c0024915:	eb 1a                	jmp    c0024931 <__muldf3+0x251>
c0024917:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002491a:	89 f0                	mov    eax,esi
c002491c:	d3 e0                	shl    eax,cl
c002491e:	09 f8                	or     eax,edi
c0024920:	0f 95 c0             	setne  al
c0024923:	0f b6 c0             	movzx  eax,al
c0024926:	89 c7                	mov    edi,eax
c0024928:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002492d:	29 d9                	sub    ecx,ebx
c002492f:	d3 ee                	shr    esi,cl
c0024931:	09 f7                	or     edi,esi
c0024933:	31 db                	xor    ebx,ebx
c0024935:	eb 3b                	jmp    c0024972 <__muldf3+0x292>
c0024937:	83 c3 1f             	add    ebx,0x1f
c002493a:	89 f0                	mov    eax,esi
c002493c:	88 d9                	mov    cl,bl
c002493e:	d3 e0                	shl    eax,cl
c0024940:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024943:	89 f8                	mov    eax,edi
c0024945:	88 d1                	mov    cl,dl
c0024947:	d3 e8                	shr    eax,cl
c0024949:	89 c1                	mov    ecx,eax
c002494b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002494e:	09 c8                	or     eax,ecx
c0024950:	88 d9                	mov    cl,bl
c0024952:	d3 e7                	shl    edi,cl
c0024954:	31 db                	xor    ebx,ebx
c0024956:	85 ff                	test   edi,edi
c0024958:	0f 95 c3             	setne  bl
c002495b:	89 df                	mov    edi,ebx
c002495d:	09 c7                	or     edi,eax
c002495f:	88 d1                	mov    cl,dl
c0024961:	d3 ee                	shr    esi,cl
c0024963:	31 db                	xor    ebx,ebx
c0024965:	eb 0d                	jmp    c0024974 <__muldf3+0x294>
c0024967:	bb ff 07 00 00       	mov    ebx,0x7ff
c002496c:	eb 02                	jmp    c0024970 <__muldf3+0x290>
c002496e:	31 db                	xor    ebx,ebx
c0024970:	31 ff                	xor    edi,edi
c0024972:	31 f6                	xor    esi,esi
c0024974:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024977:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002497a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002497f:	09 c3                	or     ebx,eax
c0024981:	c1 e3 14             	shl    ebx,0x14
c0024984:	89 f0                	mov    eax,esi
c0024986:	c1 e8 0b             	shr    eax,0xb
c0024989:	09 c3                	or     ebx,eax
c002498b:	89 f8                	mov    eax,edi
c002498d:	c1 e8 0b             	shr    eax,0xb
c0024990:	c1 e6 15             	shl    esi,0x15
c0024993:	09 c6                	or     esi,eax
c0024995:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002499b:	0f 95 c1             	setne  cl
c002499e:	09 c8                	or     eax,ecx
c00249a0:	83 e0 01             	and    eax,0x1
c00249a3:	c1 ef 0a             	shr    edi,0xa
c00249a6:	21 c7                	and    edi,eax
c00249a8:	01 f7                	add    edi,esi
c00249aa:	83 d3 00             	adc    ebx,0x0
c00249ad:	89 da                	mov    edx,ebx
c00249af:	eb 03                	jmp    c00249b4 <__muldf3+0x2d4>
c00249b1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00249b4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00249b7:	89 f8                	mov    eax,edi
c00249b9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00249bc:	83 c4 24             	add    esp,0x24
c00249bf:	5b                   	pop    ebx
c00249c0:	5e                   	pop    esi
c00249c1:	5f                   	pop    edi
c00249c2:	5d                   	pop    ebp
c00249c3:	c3                   	ret    

c00249c4 <__divdf3>:
c00249c4:	55                   	push   ebp
c00249c5:	89 e5                	mov    ebp,esp
c00249c7:	57                   	push   edi
c00249c8:	56                   	push   esi
c00249c9:	53                   	push   ebx
c00249ca:	83 ec 2c             	sub    esp,0x2c
c00249cd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00249d0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00249d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00249d6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00249d9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00249dc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00249df:	89 ce                	mov    esi,ecx
c00249e1:	89 c8                	mov    eax,ecx
c00249e3:	c1 f8 14             	sar    eax,0x14
c00249e6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00249e9:	89 f8                	mov    eax,edi
c00249eb:	89 fb                	mov    ebx,edi
c00249ed:	c1 e3 0b             	shl    ebx,0xb
c00249f0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00249f3:	c1 e6 0b             	shl    esi,0xb
c00249f6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00249fc:	c1 e8 15             	shr    eax,0x15
c00249ff:	09 c6                	or     esi,eax
c0024a01:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024a04:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024a07:	89 c2                	mov    edx,eax
c0024a09:	c1 fa 14             	sar    edx,0x14
c0024a0c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024a0f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024a12:	89 de                	mov    esi,ebx
c0024a14:	c1 e6 0b             	shl    esi,0xb
c0024a17:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024a1a:	c1 e0 0b             	shl    eax,0xb
c0024a1d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024a22:	c1 eb 15             	shr    ebx,0x15
c0024a25:	09 d8                	or     eax,ebx
c0024a27:	89 c2                	mov    edx,eax
c0024a29:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024a2c:	25 ff 07 00 00       	and    eax,0x7ff
c0024a31:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024a34:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024a37:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024a3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024a40:	29 d8                	sub    eax,ebx
c0024a42:	05 ff 03 00 00       	add    eax,0x3ff
c0024a47:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024a4a:	46                   	inc    esi
c0024a4b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024a51:	0f 85 a5 00 00 00    	jne    c0024afc <__divdf3+0x138>
c0024a57:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024a5a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024a5d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024a61:	74 2a                	je     c0024a8d <__divdf3+0xc9>
c0024a63:	85 f6                	test   esi,esi
c0024a65:	0f 85 cc 02 00 00    	jne    c0024d37 <__divdf3+0x373>
c0024a6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a6e:	40                   	inc    eax
c0024a6f:	a9 fe 07 00 00       	test   eax,0x7fe
c0024a74:	75 26                	jne    c0024a9c <__divdf3+0xd8>
c0024a76:	85 db                	test   ebx,ebx
c0024a78:	74 22                	je     c0024a9c <__divdf3+0xd8>
c0024a7a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024a7d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024a80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024a83:	09 d0                	or     eax,edx
c0024a85:	0f 85 ac 02 00 00    	jne    c0024d37 <__divdf3+0x373>
c0024a8b:	eb 63                	jmp    c0024af0 <__divdf3+0x12c>
c0024a8d:	85 f6                	test   esi,esi
c0024a8f:	75 22                	jne    c0024ab3 <__divdf3+0xef>
c0024a91:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024a94:	40                   	inc    eax
c0024a95:	a9 fe 07 00 00       	test   eax,0x7fe
c0024a9a:	74 36                	je     c0024ad2 <__divdf3+0x10e>
c0024a9c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024aa0:	0f 89 91 02 00 00    	jns    c0024d37 <__divdf3+0x373>
c0024aa6:	89 f8                	mov    eax,edi
c0024aa8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024aae:	e9 80 02 00 00       	jmp    c0024d33 <__divdf3+0x36f>
c0024ab3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024ab6:	01 f6                	add    esi,esi
c0024ab8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024abb:	c1 ef 1f             	shr    edi,0x1f
c0024abe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ac1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024ac4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024ac7:	09 f7                	or     edi,esi
c0024ac9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024acc:	78 2e                	js     c0024afc <__divdf3+0x138>
c0024ace:	89 c8                	mov    eax,ecx
c0024ad0:	eb e1                	jmp    c0024ab3 <__divdf3+0xef>
c0024ad2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024ad5:	09 d0                	or     eax,edx
c0024ad7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024adb:	74 0f                	je     c0024aec <__divdf3+0x128>
c0024add:	85 c0                	test   eax,eax
c0024adf:	74 bb                	je     c0024a9c <__divdf3+0xd8>
c0024ae1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024ae4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024ae7:	e9 4b 02 00 00       	jmp    c0024d37 <__divdf3+0x373>
c0024aec:	85 c0                	test   eax,eax
c0024aee:	75 ac                	jne    c0024a9c <__divdf3+0xd8>
c0024af0:	31 ff                	xor    edi,edi
c0024af2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024af7:	e9 3b 02 00 00       	jmp    c0024d37 <__divdf3+0x373>
c0024afc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024aff:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024b02:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024b08:	75 6b                	jne    c0024b75 <__divdf3+0x1b1>
c0024b0a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024b0d:	09 d6                	or     esi,edx
c0024b0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024b13:	74 28                	je     c0024b3d <__divdf3+0x179>
c0024b15:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024b18:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024b1b:	85 f6                	test   esi,esi
c0024b1d:	0f 85 14 02 00 00    	jne    c0024d37 <__divdf3+0x373>
c0024b23:	31 ff                	xor    edi,edi
c0024b25:	31 c9                	xor    ecx,ecx
c0024b27:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024b2a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024b2d:	0f 89 04 02 00 00    	jns    c0024d37 <__divdf3+0x373>
c0024b33:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024b38:	e9 fa 01 00 00       	jmp    c0024d37 <__divdf3+0x373>
c0024b3d:	85 f6                	test   esi,esi
c0024b3f:	75 1b                	jne    c0024b5c <__divdf3+0x198>
c0024b41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024b44:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024b47:	25 00 00 00 80       	and    eax,0x80000000
c0024b4c:	31 c9                	xor    ecx,ecx
c0024b4e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024b53:	89 cf                	mov    edi,ecx
c0024b55:	89 c1                	mov    ecx,eax
c0024b57:	e9 db 01 00 00       	jmp    c0024d37 <__divdf3+0x373>
c0024b5c:	01 d2                	add    edx,edx
c0024b5e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024b61:	c1 eb 1f             	shr    ebx,0x1f
c0024b64:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024b67:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024b6a:	8d 48 01             	lea    ecx,[eax+0x1]
c0024b6d:	09 da                	or     edx,ebx
c0024b6f:	78 04                	js     c0024b75 <__divdf3+0x1b1>
c0024b71:	89 c8                	mov    eax,ecx
c0024b73:	eb e7                	jmp    c0024b5c <__divdf3+0x198>
c0024b75:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024b78:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024b7e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b84:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024b87:	39 d6                	cmp    esi,edx
c0024b89:	77 0d                	ja     c0024b98 <__divdf3+0x1d4>
c0024b8b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b8e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024b91:	72 1b                	jb     c0024bae <__divdf3+0x1ea>
c0024b93:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024b96:	75 16                	jne    c0024bae <__divdf3+0x1ea>
c0024b98:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024b9b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024b9e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024ba1:	83 de 00             	sbb    esi,0x0
c0024ba4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024ba7:	ba 01 00 00 00       	mov    edx,0x1
c0024bac:	eb 02                	jmp    c0024bb0 <__divdf3+0x1ec>
c0024bae:	31 d2                	xor    edx,edx
c0024bb0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024bb7:	31 ff                	xor    edi,edi
c0024bb9:	01 ff                	add    edi,edi
c0024bbb:	89 d1                	mov    ecx,edx
c0024bbd:	c1 e9 1f             	shr    ecx,0x1f
c0024bc0:	09 cf                	or     edi,ecx
c0024bc2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024bc5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024bc8:	89 da                	mov    edx,ebx
c0024bca:	89 f3                	mov    ebx,esi
c0024bcc:	8d 34 36             	lea    esi,[esi+esi*1]
c0024bcf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024bd2:	c1 e9 1f             	shr    ecx,0x1f
c0024bd5:	09 ce                	or     esi,ecx
c0024bd7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024bda:	01 c9                	add    ecx,ecx
c0024bdc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024bdf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024be2:	85 db                	test   ebx,ebx
c0024be4:	78 29                	js     c0024c0f <__divdf3+0x24b>
c0024be6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024be9:	72 07                	jb     c0024bf2 <__divdf3+0x22e>
c0024beb:	75 3c                	jne    c0024c29 <__divdf3+0x265>
c0024bed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024bf0:	77 37                	ja     c0024c29 <__divdf3+0x265>
c0024bf2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024bf5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024bf8:	31 d2                	xor    edx,edx
c0024bfa:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024bfd:	0f 97 c2             	seta   dl
c0024c00:	29 d6                	sub    esi,edx
c0024c02:	89 d9                	mov    ecx,ebx
c0024c04:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024c07:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024c0a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024c0d:	eb 17                	jmp    c0024c26 <__divdf3+0x262>
c0024c0f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024c12:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024c18:	0f 97 c1             	seta   cl
c0024c1b:	0f b6 c9             	movzx  ecx,cl
c0024c1e:	29 ce                	sub    esi,ecx
c0024c20:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024c23:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024c26:	83 ca 01             	or     edx,0x1
c0024c29:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024c2c:	75 8b                	jne    c0024bb9 <__divdf3+0x1f5>
c0024c2e:	c1 e7 09             	shl    edi,0x9
c0024c31:	89 d1                	mov    ecx,edx
c0024c33:	c1 e9 17             	shr    ecx,0x17
c0024c36:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024c39:	09 f3                	or     ebx,esi
c0024c3b:	0f 95 c3             	setne  bl
c0024c3e:	0f b6 db             	movzx  ebx,bl
c0024c41:	c1 e2 09             	shl    edx,0x9
c0024c44:	09 d3                	or     ebx,edx
c0024c46:	89 ca                	mov    edx,ecx
c0024c48:	09 fa                	or     edx,edi
c0024c4a:	78 0c                	js     c0024c58 <__divdf3+0x294>
c0024c4c:	01 d2                	add    edx,edx
c0024c4e:	89 d9                	mov    ecx,ebx
c0024c50:	c1 e9 1f             	shr    ecx,0x1f
c0024c53:	09 ca                	or     edx,ecx
c0024c55:	01 db                	add    ebx,ebx
c0024c57:	48                   	dec    eax
c0024c58:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024c5d:	0f 8f 83 00 00 00    	jg     c0024ce6 <__divdf3+0x322>
c0024c63:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024c69:	85 c0                	test   eax,eax
c0024c6b:	0f 8f 82 00 00 00    	jg     c0024cf3 <__divdf3+0x32f>
c0024c71:	83 f8 cc             	cmp    eax,0xffffffcc
c0024c74:	7c 77                	jl     c0024ced <__divdf3+0x329>
c0024c76:	be 01 00 00 00       	mov    esi,0x1
c0024c7b:	29 c6                	sub    esi,eax
c0024c7d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024c83:	83 fe 1f             	cmp    esi,0x1f
c0024c86:	7e 2f                	jle    c0024cb7 <__divdf3+0x2f3>
c0024c88:	83 fe 20             	cmp    esi,0x20
c0024c8b:	75 0a                	jne    c0024c97 <__divdf3+0x2d3>
c0024c8d:	85 db                	test   ebx,ebx
c0024c8f:	0f 95 c3             	setne  bl
c0024c92:	0f b6 db             	movzx  ebx,bl
c0024c95:	eb 1a                	jmp    c0024cb1 <__divdf3+0x2ed>
c0024c97:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024c9a:	89 d7                	mov    edi,edx
c0024c9c:	d3 e7                	shl    edi,cl
c0024c9e:	89 f9                	mov    ecx,edi
c0024ca0:	09 d9                	or     ecx,ebx
c0024ca2:	0f 95 c3             	setne  bl
c0024ca5:	0f b6 db             	movzx  ebx,bl
c0024ca8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024cad:	29 c1                	sub    ecx,eax
c0024caf:	d3 ea                	shr    edx,cl
c0024cb1:	09 d3                	or     ebx,edx
c0024cb3:	31 c0                	xor    eax,eax
c0024cb5:	eb 3a                	jmp    c0024cf1 <__divdf3+0x32d>
c0024cb7:	83 c0 1f             	add    eax,0x1f
c0024cba:	89 d7                	mov    edi,edx
c0024cbc:	88 c1                	mov    cl,al
c0024cbe:	d3 e7                	shl    edi,cl
c0024cc0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024cc3:	89 df                	mov    edi,ebx
c0024cc5:	89 f1                	mov    ecx,esi
c0024cc7:	d3 ef                	shr    edi,cl
c0024cc9:	89 f9                	mov    ecx,edi
c0024ccb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024cce:	09 cf                	or     edi,ecx
c0024cd0:	88 c1                	mov    cl,al
c0024cd2:	d3 e3                	shl    ebx,cl
c0024cd4:	85 db                	test   ebx,ebx
c0024cd6:	0f 95 c3             	setne  bl
c0024cd9:	0f b6 db             	movzx  ebx,bl
c0024cdc:	09 fb                	or     ebx,edi
c0024cde:	89 f1                	mov    ecx,esi
c0024ce0:	d3 ea                	shr    edx,cl
c0024ce2:	31 c0                	xor    eax,eax
c0024ce4:	eb 0d                	jmp    c0024cf3 <__divdf3+0x32f>
c0024ce6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024ceb:	eb 02                	jmp    c0024cef <__divdf3+0x32b>
c0024ced:	31 c0                	xor    eax,eax
c0024cef:	31 db                	xor    ebx,ebx
c0024cf1:	31 d2                	xor    edx,edx
c0024cf3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024cf6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024cf9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024cff:	09 c8                	or     eax,ecx
c0024d01:	c1 e0 14             	shl    eax,0x14
c0024d04:	89 d1                	mov    ecx,edx
c0024d06:	c1 e9 0b             	shr    ecx,0xb
c0024d09:	09 c8                	or     eax,ecx
c0024d0b:	89 c6                	mov    esi,eax
c0024d0d:	89 d9                	mov    ecx,ebx
c0024d0f:	c1 e9 0b             	shr    ecx,0xb
c0024d12:	c1 e2 15             	shl    edx,0x15
c0024d15:	09 ca                	or     edx,ecx
c0024d17:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024d1d:	0f 95 c0             	setne  al
c0024d20:	09 c1                	or     ecx,eax
c0024d22:	83 e1 01             	and    ecx,0x1
c0024d25:	c1 eb 0a             	shr    ebx,0xa
c0024d28:	21 cb                	and    ebx,ecx
c0024d2a:	01 d3                	add    ebx,edx
c0024d2c:	89 d8                	mov    eax,ebx
c0024d2e:	83 d6 00             	adc    esi,0x0
c0024d31:	89 f2                	mov    edx,esi
c0024d33:	89 c7                	mov    edi,eax
c0024d35:	89 d1                	mov    ecx,edx
c0024d37:	89 f8                	mov    eax,edi
c0024d39:	89 ca                	mov    edx,ecx
c0024d3b:	83 c4 2c             	add    esp,0x2c
c0024d3e:	5b                   	pop    ebx
c0024d3f:	5e                   	pop    esi
c0024d40:	5f                   	pop    edi
c0024d41:	5d                   	pop    ebp
c0024d42:	c3                   	ret    

c0024d43 <__floatsidf>:
c0024d43:	55                   	push   ebp
c0024d44:	89 e5                	mov    ebp,esp
c0024d46:	56                   	push   esi
c0024d47:	53                   	push   ebx
c0024d48:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d4b:	85 db                	test   ebx,ebx
c0024d4d:	7e 15                	jle    c0024d64 <__floatsidf+0x21>
c0024d4f:	0f bd cb             	bsr    ecx,ebx
c0024d52:	83 f1 1f             	xor    ecx,0x1f
c0024d55:	d3 e3                	shl    ebx,cl
c0024d57:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d5d:	b8 1e 04 00 00       	mov    eax,0x41e
c0024d62:	eb 21                	jmp    c0024d85 <__floatsidf+0x42>
c0024d64:	b8 00 00 00 00       	mov    eax,0x0
c0024d69:	ba 00 00 00 00       	mov    edx,0x0
c0024d6e:	74 2a                	je     c0024d9a <__floatsidf+0x57>
c0024d70:	f7 db                	neg    ebx
c0024d72:	0f bd cb             	bsr    ecx,ebx
c0024d75:	83 f1 1f             	xor    ecx,0x1f
c0024d78:	d3 e3                	shl    ebx,cl
c0024d7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024d80:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024d85:	29 c8                	sub    eax,ecx
c0024d87:	c1 e0 14             	shl    eax,0x14
c0024d8a:	89 c1                	mov    ecx,eax
c0024d8c:	89 de                	mov    esi,ebx
c0024d8e:	c1 ee 0b             	shr    esi,0xb
c0024d91:	09 f1                	or     ecx,esi
c0024d93:	89 ca                	mov    edx,ecx
c0024d95:	c1 e3 15             	shl    ebx,0x15
c0024d98:	89 d8                	mov    eax,ebx
c0024d9a:	5b                   	pop    ebx
c0024d9b:	5e                   	pop    esi
c0024d9c:	5d                   	pop    ebp
c0024d9d:	c3                   	ret    

c0024d9e <__floatunsidf>:
c0024d9e:	55                   	push   ebp
c0024d9f:	89 e5                	mov    ebp,esp
c0024da1:	56                   	push   esi
c0024da2:	53                   	push   ebx
c0024da3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024da6:	85 db                	test   ebx,ebx
c0024da8:	74 2a                	je     c0024dd4 <__floatunsidf+0x36>
c0024daa:	0f bd cb             	bsr    ecx,ebx
c0024dad:	83 f1 1f             	xor    ecx,0x1f
c0024db0:	d3 e3                	shl    ebx,cl
c0024db2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024db8:	b8 1e 04 00 00       	mov    eax,0x41e
c0024dbd:	29 c8                	sub    eax,ecx
c0024dbf:	c1 e0 14             	shl    eax,0x14
c0024dc2:	89 c1                	mov    ecx,eax
c0024dc4:	89 de                	mov    esi,ebx
c0024dc6:	c1 ee 0b             	shr    esi,0xb
c0024dc9:	09 f1                	or     ecx,esi
c0024dcb:	89 ca                	mov    edx,ecx
c0024dcd:	c1 e3 15             	shl    ebx,0x15
c0024dd0:	89 d8                	mov    eax,ebx
c0024dd2:	eb 04                	jmp    c0024dd8 <__floatunsidf+0x3a>
c0024dd4:	31 c0                	xor    eax,eax
c0024dd6:	31 d2                	xor    edx,edx
c0024dd8:	5b                   	pop    ebx
c0024dd9:	5e                   	pop    esi
c0024dda:	5d                   	pop    ebp
c0024ddb:	c3                   	ret    

c0024ddc <__fixdfsi>:
c0024ddc:	55                   	push   ebp
c0024ddd:	89 e5                	mov    ebp,esp
c0024ddf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024de2:	89 d1                	mov    ecx,edx
c0024de4:	c1 e1 0b             	shl    ecx,0xb
c0024de7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024df0:	c1 e8 15             	shr    eax,0x15
c0024df3:	09 c1                	or     ecx,eax
c0024df5:	c1 fa 14             	sar    edx,0x14
c0024df8:	78 1f                	js     c0024e19 <__fixdfsi+0x3d>
c0024dfa:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024e00:	31 c0                	xor    eax,eax
c0024e02:	83 fa 1e             	cmp    edx,0x1e
c0024e05:	77 40                	ja     c0024e47 <__fixdfsi+0x6b>
c0024e07:	89 c8                	mov    eax,ecx
c0024e09:	0d 00 00 00 80       	or     eax,0x80000000
c0024e0e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e13:	29 d1                	sub    ecx,edx
c0024e15:	d3 e8                	shr    eax,cl
c0024e17:	eb 2e                	jmp    c0024e47 <__fixdfsi+0x6b>
c0024e19:	31 c0                	xor    eax,eax
c0024e1b:	81 c2 01 04 00 00    	add    edx,0x401
c0024e21:	78 24                	js     c0024e47 <__fixdfsi+0x6b>
c0024e23:	83 fa 1e             	cmp    edx,0x1e
c0024e26:	7e 09                	jle    c0024e31 <__fixdfsi+0x55>
c0024e28:	83 fa 1f             	cmp    edx,0x1f
c0024e2b:	75 18                	jne    c0024e45 <__fixdfsi+0x69>
c0024e2d:	85 c9                	test   ecx,ecx
c0024e2f:	75 14                	jne    c0024e45 <__fixdfsi+0x69>
c0024e31:	89 c8                	mov    eax,ecx
c0024e33:	0d 00 00 00 80       	or     eax,0x80000000
c0024e38:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e3d:	29 d1                	sub    ecx,edx
c0024e3f:	d3 e8                	shr    eax,cl
c0024e41:	f7 d8                	neg    eax
c0024e43:	eb 02                	jmp    c0024e47 <__fixdfsi+0x6b>
c0024e45:	31 c0                	xor    eax,eax
c0024e47:	5d                   	pop    ebp
c0024e48:	c3                   	ret    

c0024e49 <__fixunsdfsi>:
c0024e49:	55                   	push   ebp
c0024e4a:	89 e5                	mov    ebp,esp
c0024e4c:	53                   	push   ebx
c0024e4d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024e50:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e53:	89 d3                	mov    ebx,edx
c0024e55:	c1 fb 14             	sar    ebx,0x14
c0024e58:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024e5e:	31 c0                	xor    eax,eax
c0024e60:	83 fb 1f             	cmp    ebx,0x1f
c0024e63:	77 1d                	ja     c0024e82 <__fixunsdfsi+0x39>
c0024e65:	89 d0                	mov    eax,edx
c0024e67:	c1 e0 0b             	shl    eax,0xb
c0024e6a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e6f:	c1 e9 15             	shr    ecx,0x15
c0024e72:	09 c8                	or     eax,ecx
c0024e74:	0d 00 00 00 80       	or     eax,0x80000000
c0024e79:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e7e:	29 d9                	sub    ecx,ebx
c0024e80:	d3 e8                	shr    eax,cl
c0024e82:	5b                   	pop    ebx
c0024e83:	5d                   	pop    ebp
c0024e84:	c3                   	ret    

c0024e85 <__cmpdf2>:
c0024e85:	55                   	push   ebp
c0024e86:	89 e5                	mov    ebp,esp
c0024e88:	57                   	push   edi
c0024e89:	56                   	push   esi
c0024e8a:	53                   	push   ebx
c0024e8b:	83 ec 0c             	sub    esp,0xc
c0024e8e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024e91:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024e94:	89 ca                	mov    edx,ecx
c0024e96:	c1 ea 14             	shr    edx,0x14
c0024e99:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024e9f:	89 cb                	mov    ebx,ecx
c0024ea1:	c1 fb 1f             	sar    ebx,0x1f
c0024ea4:	31 da                	xor    edx,ebx
c0024ea6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024ea9:	89 df                	mov    edi,ebx
c0024eab:	c1 e7 0b             	shl    edi,0xb
c0024eae:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024eb1:	c1 e1 0b             	shl    ecx,0xb
c0024eb4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024eba:	c1 eb 15             	shr    ebx,0x15
c0024ebd:	09 d9                	or     ecx,ebx
c0024ebf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024ec2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024ec5:	89 ce                	mov    esi,ecx
c0024ec7:	c1 ee 14             	shr    esi,0x14
c0024eca:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024ed0:	89 cb                	mov    ebx,ecx
c0024ed2:	c1 fb 1f             	sar    ebx,0x1f
c0024ed5:	31 de                	xor    esi,ebx
c0024ed7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024eda:	89 df                	mov    edi,ebx
c0024edc:	c1 e7 0b             	shl    edi,0xb
c0024edf:	c1 e1 0b             	shl    ecx,0xb
c0024ee2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024ee8:	c1 eb 15             	shr    ebx,0x15
c0024eeb:	09 d9                	or     ecx,ebx
c0024eed:	89 d3                	mov    ebx,edx
c0024eef:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024ef5:	43                   	inc    ebx
c0024ef6:	83 fb 01             	cmp    ebx,0x1
c0024ef9:	77 08                	ja     c0024f03 <__cmpdf2+0x7e>
c0024efb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024efe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024f01:	75 68                	jne    c0024f6b <__cmpdf2+0xe6>
c0024f03:	89 f3                	mov    ebx,esi
c0024f05:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024f0b:	43                   	inc    ebx
c0024f0c:	83 fb 01             	cmp    ebx,0x1
c0024f0f:	77 06                	ja     c0024f17 <__cmpdf2+0x92>
c0024f11:	89 fb                	mov    ebx,edi
c0024f13:	09 cb                	or     ebx,ecx
c0024f15:	75 54                	jne    c0024f6b <__cmpdf2+0xe6>
c0024f17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024f1a:	09 f8                	or     eax,edi
c0024f1c:	09 c8                	or     eax,ecx
c0024f1e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024f21:	75 12                	jne    c0024f35 <__cmpdf2+0xb0>
c0024f23:	8d 42 01             	lea    eax,[edx+0x1]
c0024f26:	83 f8 01             	cmp    eax,0x1
c0024f29:	77 0a                	ja     c0024f35 <__cmpdf2+0xb0>
c0024f2b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024f2e:	31 c0                	xor    eax,eax
c0024f30:	83 fb 01             	cmp    ebx,0x1
c0024f33:	76 36                	jbe    c0024f6b <__cmpdf2+0xe6>
c0024f35:	b8 01 00 00 00       	mov    eax,0x1
c0024f3a:	39 f2                	cmp    edx,esi
c0024f3c:	7f 2d                	jg     c0024f6b <__cmpdf2+0xe6>
c0024f3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024f43:	7c 26                	jl     c0024f6b <__cmpdf2+0xe6>
c0024f45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024f48:	77 07                	ja     c0024f51 <__cmpdf2+0xcc>
c0024f4a:	72 16                	jb     c0024f62 <__cmpdf2+0xdd>
c0024f4c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024f4f:	76 0a                	jbe    c0024f5b <__cmpdf2+0xd6>
c0024f51:	89 d0                	mov    eax,edx
c0024f53:	c1 f8 1f             	sar    eax,0x1f
c0024f56:	83 c8 01             	or     eax,0x1
c0024f59:	eb 10                	jmp    c0024f6b <__cmpdf2+0xe6>
c0024f5b:	b8 00 00 00 00       	mov    eax,0x0
c0024f60:	73 09                	jae    c0024f6b <__cmpdf2+0xe6>
c0024f62:	89 d0                	mov    eax,edx
c0024f64:	c1 f8 1f             	sar    eax,0x1f
c0024f67:	83 e0 02             	and    eax,0x2
c0024f6a:	48                   	dec    eax
c0024f6b:	83 c4 0c             	add    esp,0xc
c0024f6e:	5b                   	pop    ebx
c0024f6f:	5e                   	pop    esi
c0024f70:	5f                   	pop    edi
c0024f71:	5d                   	pop    ebp
c0024f72:	c3                   	ret    

c0024f73 <__eqdf2>:
c0024f73:	55                   	push   ebp
c0024f74:	89 e5                	mov    ebp,esp
c0024f76:	50                   	push   eax
c0024f77:	6a 01                	push   0x1
c0024f79:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024f7c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024f7f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f85:	e8 fb fe ff ff       	call   c0024e85 <__cmpdf2>
c0024f8a:	83 c4 18             	add    esp,0x18
c0024f8d:	c9                   	leave  
c0024f8e:	c3                   	ret    

c0024f8f <__nedf2>:
c0024f8f:	eb e2                	jmp    c0024f73 <__eqdf2>

c0024f91 <__gtdf2>:
c0024f91:	55                   	push   ebp
c0024f92:	89 e5                	mov    ebp,esp
c0024f94:	50                   	push   eax
c0024f95:	6a ff                	push   0xffffffff
c0024f97:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024f9a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024f9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024fa0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fa3:	e8 dd fe ff ff       	call   c0024e85 <__cmpdf2>
c0024fa8:	83 c4 18             	add    esp,0x18
c0024fab:	c9                   	leave  
c0024fac:	c3                   	ret    

c0024fad <__gedf2>:
c0024fad:	eb e2                	jmp    c0024f91 <__gtdf2>

c0024faf <__ltdf2>:
c0024faf:	eb c2                	jmp    c0024f73 <__eqdf2>

c0024fb1 <__ledf2>:
c0024fb1:	eb c0                	jmp    c0024f73 <__eqdf2>

c0024fb3 <__truncdfsf2>:
c0024fb3:	55                   	push   ebp
c0024fb4:	89 e5                	mov    ebp,esp
c0024fb6:	57                   	push   edi
c0024fb7:	56                   	push   esi
c0024fb8:	53                   	push   ebx
c0024fb9:	83 ec 0c             	sub    esp,0xc
c0024fbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024fbf:	89 d1                	mov    ecx,edx
c0024fc1:	c1 f9 14             	sar    ecx,0x14
c0024fc4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024fc7:	89 df                	mov    edi,ebx
c0024fc9:	c1 e7 0b             	shl    edi,0xb
c0024fcc:	89 d0                	mov    eax,edx
c0024fce:	c1 e0 0b             	shl    eax,0xb
c0024fd1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024fd6:	c1 eb 15             	shr    ebx,0x15
c0024fd9:	09 d8                	or     eax,ebx
c0024fdb:	89 cb                	mov    ebx,ecx
c0024fdd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024fe3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024fe9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024fef:	0f 86 9e 00 00 00    	jbe    c0025093 <__truncdfsf2+0xe0>
c0024ff5:	85 db                	test   ebx,ebx
c0024ff7:	75 0a                	jne    c0025003 <__truncdfsf2+0x50>
c0024ff9:	c1 fa 17             	sar    edx,0x17
c0024ffc:	30 d2                	xor    dl,dl
c0024ffe:	e9 84 00 00 00       	jmp    c0025087 <__truncdfsf2+0xd4>
c0025003:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0025009:	83 fe 83             	cmp    esi,0xffffff83
c002500c:	7d 4b                	jge    c0025059 <__truncdfsf2+0xa6>
c002500e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0025013:	29 f1                	sub    ecx,esi
c0025015:	83 f9 1f             	cmp    ecx,0x1f
c0025018:	7f 6b                	jg     c0025085 <__truncdfsf2+0xd2>
c002501a:	0d 00 00 00 80       	or     eax,0x80000000
c002501f:	89 c3                	mov    ebx,eax
c0025021:	d3 eb                	shr    ebx,cl
c0025023:	be 01 00 00 00       	mov    esi,0x1
c0025028:	d3 e6                	shl    esi,cl
c002502a:	4e                   	dec    esi
c002502b:	21 f0                	and    eax,esi
c002502d:	09 f8                	or     eax,edi
c002502f:	0f 95 c0             	setne  al
c0025032:	0f b6 c0             	movzx  eax,al
c0025035:	09 c3                	or     ebx,eax
c0025037:	89 d9                	mov    ecx,ebx
c0025039:	c1 e9 08             	shr    ecx,0x8
c002503c:	f6 c3 7f             	test   bl,0x7f
c002503f:	0f 95 c0             	setne  al
c0025042:	09 c8                	or     eax,ecx
c0025044:	83 e0 01             	and    eax,0x1
c0025047:	c1 eb 07             	shr    ebx,0x7
c002504a:	21 c3                	and    ebx,eax
c002504c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0025052:	09 d1                	or     ecx,edx
c0025054:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0025057:	eb 76                	jmp    c00250cf <__truncdfsf2+0x11c>
c0025059:	83 c6 80             	add    esi,0xffffff80
c002505c:	7e 1d                	jle    c002507b <__truncdfsf2+0xc8>
c002505e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0025064:	75 0b                	jne    c0025071 <__truncdfsf2+0xbe>
c0025066:	09 f8                	or     eax,edi
c0025068:	74 09                	je     c0025073 <__truncdfsf2+0xc0>
c002506a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002506f:	eb 02                	jmp    c0025073 <__truncdfsf2+0xc0>
c0025071:	31 c0                	xor    eax,eax
c0025073:	c1 fa 17             	sar    edx,0x17
c0025076:	80 ca ff             	or     dl,0xff
c0025079:	eb 0e                	jmp    c0025089 <__truncdfsf2+0xd6>
c002507b:	c1 fa 1f             	sar    edx,0x1f
c002507e:	c1 e2 08             	shl    edx,0x8
c0025081:	09 ca                	or     edx,ecx
c0025083:	eb 04                	jmp    c0025089 <__truncdfsf2+0xd6>
c0025085:	31 d2                	xor    edx,edx
c0025087:	31 c0                	xor    eax,eax
c0025089:	c1 e2 17             	shl    edx,0x17
c002508c:	c1 e8 08             	shr    eax,0x8
c002508f:	09 d0                	or     eax,edx
c0025091:	eb 3c                	jmp    c00250cf <__truncdfsf2+0x11c>
c0025093:	81 e9 80 03 00 00    	sub    ecx,0x380
c0025099:	89 ca                	mov    edx,ecx
c002509b:	c1 fa 0b             	sar    edx,0xb
c002509e:	c1 e2 08             	shl    edx,0x8
c00250a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00250a4:	31 db                	xor    ebx,ebx
c00250a6:	85 ff                	test   edi,edi
c00250a8:	0f 95 c3             	setne  bl
c00250ab:	09 d8                	or     eax,ebx
c00250ad:	89 c3                	mov    ebx,eax
c00250af:	c1 eb 08             	shr    ebx,0x8
c00250b2:	a8 7f                	test   al,0x7f
c00250b4:	0f 95 c2             	setne  dl
c00250b7:	89 d6                	mov    esi,edx
c00250b9:	09 de                	or     esi,ebx
c00250bb:	83 e6 01             	and    esi,0x1
c00250be:	c1 e8 07             	shr    eax,0x7
c00250c1:	21 f0                	and    eax,esi
c00250c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00250c6:	09 ca                	or     edx,ecx
c00250c8:	c1 e2 17             	shl    edx,0x17
c00250cb:	09 da                	or     edx,ebx
c00250cd:	01 d0                	add    eax,edx
c00250cf:	83 c4 0c             	add    esp,0xc
c00250d2:	5b                   	pop    ebx
c00250d3:	5e                   	pop    esi
c00250d4:	5f                   	pop    edi
c00250d5:	5d                   	pop    ebp
c00250d6:	c3                   	ret    

c00250d7 <__extendsfdf2>:
c00250d7:	55                   	push   ebp
c00250d8:	89 e5                	mov    ebp,esp
c00250da:	57                   	push   edi
c00250db:	56                   	push   esi
c00250dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00250df:	89 d1                	mov    ecx,edx
c00250e1:	c1 f9 17             	sar    ecx,0x17
c00250e4:	c1 e2 08             	shl    edx,0x8
c00250e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00250ed:	89 c8                	mov    eax,ecx
c00250ef:	80 e4 f8             	and    ah,0xf8
c00250f2:	8d 71 01             	lea    esi,[ecx+0x1]
c00250f5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00250fb:	75 27                	jne    c0025124 <__extendsfdf2+0x4d>
c00250fd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025103:	75 18                	jne    c002511d <__extendsfdf2+0x46>
c0025105:	85 d2                	test   edx,edx
c0025107:	74 20                	je     c0025129 <__extendsfdf2+0x52>
c0025109:	41                   	inc    ecx
c002510a:	01 d2                	add    edx,edx
c002510c:	79 fb                	jns    c0025109 <__extendsfdf2+0x32>
c002510e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025114:	29 c8                	sub    eax,ecx
c0025116:	05 81 03 00 00       	add    eax,0x381
c002511b:	eb 0c                	jmp    c0025129 <__extendsfdf2+0x52>
c002511d:	05 00 07 00 00       	add    eax,0x700
c0025122:	eb 05                	jmp    c0025129 <__extendsfdf2+0x52>
c0025124:	05 80 03 00 00       	add    eax,0x380
c0025129:	c1 e0 14             	shl    eax,0x14
c002512c:	89 c1                	mov    ecx,eax
c002512e:	89 d0                	mov    eax,edx
c0025130:	c1 e8 0b             	shr    eax,0xb
c0025133:	09 c1                	or     ecx,eax
c0025135:	c1 e2 15             	shl    edx,0x15
c0025138:	89 d0                	mov    eax,edx
c002513a:	89 ca                	mov    edx,ecx
c002513c:	5e                   	pop    esi
c002513d:	5f                   	pop    edi
c002513e:	5d                   	pop    ebp
c002513f:	c3                   	ret    

c0025140 <fabs>:
c0025140:	83 ec 0c             	sub    esp,0xc
c0025143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025147:	89 04 24             	mov    DWORD PTR [esp],eax
c002514a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002514e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025153:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025157:	dd 04 24             	fld    QWORD PTR [esp]
c002515a:	83 c4 0c             	add    esp,0xc
c002515d:	c3                   	ret    
c002515e:	66 90                	xchg   ax,ax

c0025160 <lrint>:
c0025160:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025164:	83 ec 04             	sub    esp,0x4
c0025167:	db 1c 24             	fistp  DWORD PTR [esp]
c002516a:	58                   	pop    eax
c002516b:	c3                   	ret    

c002516c <lrintf>:
c002516c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025170:	83 ec 04             	sub    esp,0x4
c0025173:	db 1c 24             	fistp  DWORD PTR [esp]
c0025176:	58                   	pop    eax
c0025177:	c3                   	ret    

Disassembly of section .init:

c0025178 <_init>:
c0025178:	55                   	push   ebp
c0025179:	89 e5                	mov    ebp,esp
c002517b:	e8 98 af fd ff       	call   c0000118 <frame_dummy>
c0025180:	e8 63 e0 ff ff       	call   c00231e8 <__do_global_ctors_aux>
c0025185:	5d                   	pop    ebp
c0025186:	c3                   	ret    

Disassembly of section .fini:

c0025187 <_fini>:
c0025187:	55                   	push   ebp
c0025188:	89 e5                	mov    ebp,esp
c002518a:	e8 19 af fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002518f:	5d                   	pop    ebp
c0025190:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025192 <Computer::~Computer()>:
c0025192:	83 ec 0c             	sub    esp,0xc
c0025195:	ba 70 6c 02 c0       	mov    edx,0xc0026c70
c002519a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519e:	89 10                	mov    DWORD PTR [eax],edx
c00251a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a4:	83 ec 0c             	sub    esp,0xc
c00251a7:	50                   	push   eax
c00251a8:	e8 77 e3 fe ff       	call   c0013524 <Device::~Device()>
c00251ad:	83 c4 10             	add    esp,0x10
c00251b0:	90                   	nop
c00251b1:	83 c4 0c             	add    esp,0xc
c00251b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00251b6 <Computer::~Computer()>:
c00251b6:	83 ec 0c             	sub    esp,0xc
c00251b9:	83 ec 0c             	sub    esp,0xc
c00251bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00251c0:	e8 cd ff ff ff       	call   c0025192 <Computer::~Computer()>
c00251c5:	83 c4 10             	add    esp,0x10
c00251c8:	83 ec 08             	sub    esp,0x8
c00251cb:	68 ec 01 00 00       	push   0x1ec
c00251d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00251d4:	e8 be cf fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00251d9:	83 c4 10             	add    esp,0x10
c00251dc:	83 c4 0c             	add    esp,0xc
c00251df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00251e0 <idleCommon()>:
c00251e0:	83 ec 0c             	sub    esp,0xc
c00251e3:	e8 42 68 ff ff       	call   c001ba2a <lockScheduler()>
c00251e8:	e8 71 6b ff ff       	call   c001bd5e <schedule()>
c00251ed:	83 c4 0c             	add    esp,0xc
c00251f0:	e9 37 68 ff ff       	jmp    c001ba2c <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c00251f5 <CPU::readCR3()>:
c00251f5:	83 ec 10             	sub    esp,0x10
c00251f8:	0f 20 d8             	mov    eax,cr3
c00251fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025203:	83 c4 10             	add    esp,0x10
c0025206:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025207 <CPU::writeCR3(unsigned long)>:
c0025207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002520b:	0f 22 d8             	mov    cr3,eax
c002520e:	90                   	nop
c002520f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025210 <LinkedList<UnixFile>::~LinkedList()>:
c0025210:	90                   	nop
c0025211:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025212 <LinkedList<UnixFile>::LinkedList()>:
c0025212:	83 ec 0c             	sub    esp,0xc
c0025215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002521f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025223:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002522a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002523f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025243:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002524a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025255:	83 ec 0c             	sub    esp,0xc
c0025258:	68 e6 6e 02 c0       	push   0xc0026ee6
c002525d:	e8 15 d0 fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0025262:	83 c4 10             	add    esp,0x10
c0025265:	90                   	nop
c0025266:	83 c4 0c             	add    esp,0xc
c0025269:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002526a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002526a:	83 ec 0c             	sub    esp,0xc
c002526d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025272:	75 10                	jne    c0025284 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025274:	83 ec 0c             	sub    esp,0xc
c0025277:	68 00 6f 02 c0       	push   0xc0026f00
c002527c:	e8 56 38 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025281:	83 c4 10             	add    esp,0x10
c0025284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025288:	8b 00                	mov    eax,DWORD PTR [eax]
c002528a:	85 c0                	test   eax,eax
c002528c:	74 34                	je     c00252c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002528e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025295:	85 c0                	test   eax,eax
c0025297:	74 29                	je     c00252c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025299:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00252a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00252c0:	eb 65                	jmp    c0025327 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00252c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00252c8:	85 c0                	test   eax,eax
c00252ca:	75 4b                	jne    c0025317 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00252cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252d3:	85 c0                	test   eax,eax
c00252d5:	75 40                	jne    c0025317 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00252d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252df:	89 10                	mov    DWORD PTR [eax],edx
c00252e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00252fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025301:	85 c0                	test   eax,eax
c0025303:	74 22                	je     c0025327 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025305:	83 ec 0c             	sub    esp,0xc
c0025308:	68 22 6f 02 c0       	push   0xc0026f22
c002530d:	e8 c5 37 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025312:	83 c4 10             	add    esp,0x10
c0025315:	eb 10                	jmp    c0025327 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025317:	83 ec 0c             	sub    esp,0xc
c002531a:	68 2c 6f 02 c0       	push   0xc0026f2c
c002531f:	e8 b3 37 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025324:	83 c4 10             	add    esp,0x10
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002532e:	8d 50 01             	lea    edx,[eax+0x1]
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025338:	90                   	nop
c0025339:	83 c4 0c             	add    esp,0xc
c002533c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002533e <LinkedList<UnixFile>::getFirstElement()>:
c002533e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025342:	8b 00                	mov    eax,DWORD PTR [eax]
c0025344:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025346 <LinkedList<UnixFile>::removeFirst()>:
c0025346:	83 ec 0c             	sub    esp,0xc
c0025349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534d:	8b 00                	mov    eax,DWORD PTR [eax]
c002534f:	85 c0                	test   eax,eax
c0025351:	75 12                	jne    c0025365 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025353:	83 ec 0c             	sub    esp,0xc
c0025356:	68 38 6f 02 c0       	push   0xc0026f38
c002535b:	e8 77 37 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025360:	83 c4 10             	add    esp,0x10
c0025363:	eb 7e                	jmp    c00253e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025369:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002536c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002536f:	85 c0                	test   eax,eax
c0025371:	74 10                	je     c0025383 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025373:	83 ec 0c             	sub    esp,0xc
c0025376:	68 83 6f 02 c0       	push   0xc0026f83
c002537b:	e8 57 37 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025380:	83 c4 10             	add    esp,0x10
c0025383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025387:	8b 00                	mov    eax,DWORD PTR [eax]
c0025389:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002538c:	85 c0                	test   eax,eax
c002538e:	75 33                	jne    c00253c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002539a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253ac:	83 f8 01             	cmp    eax,0x1
c00253af:	74 21                	je     c00253d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00253b1:	83 ec 0c             	sub    esp,0xc
c00253b4:	68 5c 6f 02 c0       	push   0xc0026f5c
c00253b9:	e8 19 37 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c00253be:	83 c4 10             	add    esp,0x10
c00253c1:	eb 0f                	jmp    c00253d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00253c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00253c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00253cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d0:	89 10                	mov    DWORD PTR [eax],edx
c00253d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253d9:	8d 50 ff             	lea    edx,[eax-0x1]
c00253dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00253e3:	83 c4 0c             	add    esp,0xc
c00253e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00253e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00253e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00253ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00253f0 <DriverlessDevice::~DriverlessDevice()>:
c00253f0:	ba 04 76 02 c0       	mov    edx,0xc0027604
c00253f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253f9:	89 10                	mov    DWORD PTR [eax],edx
c00253fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253ff:	50                   	push   eax
c0025400:	e8 1f e1 fe ff       	call   c0013524 <Device::~Device()>
c0025405:	83 c4 04             	add    esp,0x4
c0025408:	90                   	nop
c0025409:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002540a <DriverlessDevice::~DriverlessDevice()>:
c002540a:	83 ec 0c             	sub    esp,0xc
c002540d:	83 ec 0c             	sub    esp,0xc
c0025410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025414:	e8 d7 ff ff ff       	call   c00253f0 <DriverlessDevice::~DriverlessDevice()>
c0025419:	83 c4 10             	add    esp,0x10
c002541c:	83 ec 08             	sub    esp,0x8
c002541f:	68 58 01 00 00       	push   0x158
c0025424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025428:	e8 6a cd fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c002542d:	83 c4 10             	add    esp,0x10
c0025430:	83 c4 0c             	add    esp,0xc
c0025433:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0025434 <LinkedList<Device>::addElement(Device*)>:
c0025434:	83 ec 0c             	sub    esp,0xc
c0025437:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002543c:	75 10                	jne    c002544e <LinkedList<Device>::addElement(Device*)+0x1a>
c002543e:	83 ec 0c             	sub    esp,0xc
c0025441:	68 00 6f 02 c0       	push   0xc0026f00
c0025446:	e8 8c 36 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c002544b:	83 c4 10             	add    esp,0x10
c002544e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025452:	8b 00                	mov    eax,DWORD PTR [eax]
c0025454:	85 c0                	test   eax,eax
c0025456:	74 3a                	je     c0025492 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002545f:	85 c0                	test   eax,eax
c0025461:	74 2f                	je     c0025492 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025467:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002546a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002546e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025478:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002547c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002547f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025486:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025490:	eb 68                	jmp    c00254fa <LinkedList<Device>::addElement(Device*)+0xc6>
c0025492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025496:	8b 00                	mov    eax,DWORD PTR [eax]
c0025498:	85 c0                	test   eax,eax
c002549a:	75 4e                	jne    c00254ea <LinkedList<Device>::addElement(Device*)+0xb6>
c002549c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254a3:	85 c0                	test   eax,eax
c00254a5:	75 43                	jne    c00254ea <LinkedList<Device>::addElement(Device*)+0xb6>
c00254a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254af:	89 10                	mov    DWORD PTR [eax],edx
c00254b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00254bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254c3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00254cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00254d4:	85 c0                	test   eax,eax
c00254d6:	74 22                	je     c00254fa <LinkedList<Device>::addElement(Device*)+0xc6>
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	68 22 6f 02 c0       	push   0xc0026f22
c00254e0:	e8 f2 35 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c00254e5:	83 c4 10             	add    esp,0x10
c00254e8:	eb 10                	jmp    c00254fa <LinkedList<Device>::addElement(Device*)+0xc6>
c00254ea:	83 ec 0c             	sub    esp,0xc
c00254ed:	68 2c 6f 02 c0       	push   0xc0026f2c
c00254f2:	e8 e0 35 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c00254f7:	83 c4 10             	add    esp,0x10
c00254fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025501:	8d 50 01             	lea    edx,[eax+0x1]
c0025504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025508:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002550b:	90                   	nop
c002550c:	83 c4 0c             	add    esp,0xc
c002550f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025510 <LinkedList<Device>::LinkedList()>:
c0025510:	83 ec 0c             	sub    esp,0xc
c0025513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025517:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002551d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025521:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025537:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002553d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025541:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025553:	83 ec 0c             	sub    esp,0xc
c0025556:	68 e6 6e 02 c0       	push   0xc0026ee6
c002555b:	e8 17 cd fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c0025560:	83 c4 10             	add    esp,0x10
c0025563:	90                   	nop
c0025564:	83 c4 0c             	add    esp,0xc
c0025567:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c0025568 <CPU::readCR0()>:
c0025568:	83 ec 10             	sub    esp,0x10
c002556b:	0f 20 c0             	mov    eax,cr0
c002556e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025576:	83 c4 10             	add    esp,0x10
c0025579:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c002557a <CPU::writeCR0(unsigned long)>:
c002557a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002557e:	0f 22 c0             	mov    cr0,eax
c0025581:	90                   	nop
c0025582:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025583 <CPU::readDR0()>:
c0025583:	83 ec 10             	sub    esp,0x10
c0025586:	0f 21 c0             	mov    eax,db0
c0025589:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002558d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025591:	83 c4 10             	add    esp,0x10
c0025594:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025595 <CPU::readDR1()>:
c0025595:	83 ec 10             	sub    esp,0x10
c0025598:	0f 21 c8             	mov    eax,db1
c002559b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002559f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255a3:	83 c4 10             	add    esp,0x10
c00255a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c00255a7 <CPU::readDR2()>:
c00255a7:	83 ec 10             	sub    esp,0x10
c00255aa:	0f 21 d0             	mov    eax,db2
c00255ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255b5:	83 c4 10             	add    esp,0x10
c00255b8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c00255b9 <CPU::readDR3()>:
c00255b9:	83 ec 10             	sub    esp,0x10
c00255bc:	0f 21 d8             	mov    eax,db3
c00255bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255c7:	83 c4 10             	add    esp,0x10
c00255ca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c00255cb <CPU::readDR6()>:
c00255cb:	83 ec 10             	sub    esp,0x10
c00255ce:	0f 21 f0             	mov    eax,db6
c00255d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255d9:	83 c4 10             	add    esp,0x10
c00255dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c00255dd <CPU::readDR7()>:
c00255dd:	83 ec 10             	sub    esp,0x10
c00255e0:	0f 21 f8             	mov    eax,db7
c00255e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255eb:	83 c4 10             	add    esp,0x10
c00255ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00255f0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00255f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00255f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00255f6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00255f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00255f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00255fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00255fe:	85 c0                	test   eax,eax
c0025600:	75 0e                	jne    c0025610 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025609:	85 c0                	test   eax,eax
c002560b:	75 03                	jne    c0025610 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002560d:	b0 01                	mov    al,0x1
c002560f:	c3                   	ret    
c0025610:	b0 00                	mov    al,0x0
c0025612:	90                   	nop
c0025613:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025614 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025614:	83 ec 0c             	sub    esp,0xc
c0025617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002561b:	8b 00                	mov    eax,DWORD PTR [eax]
c002561d:	85 c0                	test   eax,eax
c002561f:	75 15                	jne    c0025636 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025621:	83 ec 0c             	sub    esp,0xc
c0025624:	68 38 6f 02 c0       	push   0xc0026f38
c0025629:	e8 a9 34 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c002562e:	83 c4 10             	add    esp,0x10
c0025631:	e9 88 00 00 00       	jmp    c00256be <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0025636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002563a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002563d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025640:	85 c0                	test   eax,eax
c0025642:	0f 95 c0             	setne  al
c0025645:	84 c0                	test   al,al
c0025647:	74 10                	je     c0025659 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0025649:	83 ec 0c             	sub    esp,0xc
c002564c:	68 83 6f 02 c0       	push   0xc0026f83
c0025651:	e8 81 34 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025656:	83 c4 10             	add    esp,0x10
c0025659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565d:	8b 00                	mov    eax,DWORD PTR [eax]
c002565f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025662:	85 c0                	test   eax,eax
c0025664:	0f 94 c0             	sete   al
c0025667:	84 c0                	test   al,al
c0025669:	74 33                	je     c002569e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002566b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002566f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025679:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025687:	83 f8 01             	cmp    eax,0x1
c002568a:	74 21                	je     c00256ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002568c:	83 ec 0c             	sub    esp,0xc
c002568f:	68 5c 6f 02 c0       	push   0xc0026f5c
c0025694:	e8 3e 34 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c0025699:	83 c4 10             	add    esp,0x10
c002569c:	eb 0f                	jmp    c00256ad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002569e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00256a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00256a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ab:	89 10                	mov    DWORD PTR [eax],edx
c00256ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00256b4:	8d 50 ff             	lea    edx,[eax-0x1]
c00256b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00256be:	83 c4 0c             	add    esp,0xc
c00256c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00256c2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00256ca:	75 10                	jne    c00256dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00256cc:	83 ec 0c             	sub    esp,0xc
c00256cf:	68 00 6f 02 c0       	push   0xc0026f00
c00256d4:	e8 fe 33 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c00256d9:	83 c4 10             	add    esp,0x10
c00256dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e2:	85 c0                	test   eax,eax
c00256e4:	74 34                	je     c002571a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00256e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00256ed:	85 c0                	test   eax,eax
c00256ef:	74 29                	je     c002571a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00256f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00256f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00256fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00256ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025703:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025707:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002570a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002570e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025711:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025718:	eb 65                	jmp    c002577f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002571a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025720:	85 c0                	test   eax,eax
c0025722:	75 4b                	jne    c002576f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025728:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002572b:	85 c0                	test   eax,eax
c002572d:	75 40                	jne    c002576f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002572f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025733:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025737:	89 10                	mov    DWORD PTR [eax],edx
c0025739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002573d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025741:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002574b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025756:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025759:	85 c0                	test   eax,eax
c002575b:	74 22                	je     c002577f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002575d:	83 ec 0c             	sub    esp,0xc
c0025760:	68 22 6f 02 c0       	push   0xc0026f22
c0025765:	e8 6d 33 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c002576a:	83 c4 10             	add    esp,0x10
c002576d:	eb 10                	jmp    c002577f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002576f:	83 ec 0c             	sub    esp,0xc
c0025772:	68 2c 6f 02 c0       	push   0xc0026f2c
c0025777:	e8 5b 33 ff ff       	call   c0018ad7 <Krnl::panic(char const*)>
c002577c:	83 c4 10             	add    esp,0x10
c002577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025786:	8d 50 01             	lea    edx,[eax+0x1]
c0025789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002578d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025790:	90                   	nop
c0025791:	83 c4 0c             	add    esp,0xc
c0025794:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025796 <ACPI::~ACPI()>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ba d0 7d 02 c0       	mov    edx,0xc0027dd0
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	89 10                	mov    DWORD PTR [eax],edx
c00257a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	50                   	push   eax
c00257ac:	e8 73 dd fe ff       	call   c0013524 <Device::~Device()>
c00257b1:	83 c4 10             	add    esp,0x10
c00257b4:	90                   	nop
c00257b5:	83 c4 0c             	add    esp,0xc
c00257b8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00257ba <ACPI::~ACPI()>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	83 ec 0c             	sub    esp,0xc
c00257c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257c4:	e8 cd ff ff ff       	call   c0025796 <ACPI::~ACPI()>
c00257c9:	83 c4 10             	add    esp,0x10
c00257cc:	83 ec 08             	sub    esp,0x8
c00257cf:	68 68 22 00 00       	push   0x2268
c00257d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257d8:	e8 ba c9 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00257dd:	83 c4 10             	add    esp,0x10
c00257e0:	83 c4 0c             	add    esp,0xc
c00257e3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00257e4 <CPU::~CPU()>:
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ba c0 81 02 c0       	mov    edx,0xc00281c0
c00257ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f0:	89 10                	mov    DWORD PTR [eax],edx
c00257f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	50                   	push   eax
c00257fa:	e8 25 dd fe ff       	call   c0013524 <Device::~Device()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025808 <CPU::~CPU()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025812:	e8 cd ff ff ff       	call   c00257e4 <CPU::~CPU()>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	68 98 11 00 00       	push   0x1198
c0025822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025826:	e8 6c c9 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c002582b:	83 c4 10             	add    esp,0x10
c002582e:	83 c4 0c             	add    esp,0xc
c0025831:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c0025832 <CPU::readCR4()>:
c0025832:	83 ec 10             	sub    esp,0x10
c0025835:	0f 20 e0             	mov    eax,cr4
c0025838:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002583c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025840:	83 c4 10             	add    esp,0x10
c0025843:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c0025844 <CPU::writeDR7(unsigned long)>:
c0025844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025848:	0f 23 f8             	mov    db7,eax
c002584b:	90                   	nop
c002584c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c002584d <CPU::writeCR4(unsigned long)>:
c002584d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025851:	0f 22 e0             	mov    cr4,eax
c0025854:	90                   	nop
c0025855:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c0025856 <CPU::readCR2()>:
c0025856:	83 ec 10             	sub    esp,0x10
c0025859:	0f 20 d0             	mov    eax,cr2
c002585c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025860:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025864:	83 c4 10             	add    esp,0x10
c0025867:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025868 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025868:	90                   	nop
c0025869:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002586a <ThreadControlBlock::ThreadControlBlock()>:
c002586a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002586e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025879:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025884:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002588b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002588f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002589a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002589e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258a2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00258a6:	90                   	nop
c00258a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00258a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00258a8:	83 ec 0c             	sub    esp,0xc
c00258ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00258b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00258c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00258cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00258d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00258e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00258eb:	83 ec 0c             	sub    esp,0xc
c00258ee:	68 e6 6e 02 c0       	push   0xc0026ee6
c00258f3:	e8 7f c9 fe ff       	call   c0012277 <Dbg::kprintf(char const*, ...)>
c00258f8:	83 c4 10             	add    esp,0x10
c00258fb:	90                   	nop
c00258fc:	83 c4 0c             	add    esp,0xc
c00258ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025900 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025907:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025908 <Vm::_FPUState::_FPUState()>:
c0025908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002590c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025913:	90                   	nop
c0025914:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025916 <PCI::~PCI()>:
c0025916:	83 ec 0c             	sub    esp,0xc
c0025919:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c002591e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025922:	89 10                	mov    DWORD PTR [eax],edx
c0025924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025928:	83 ec 0c             	sub    esp,0xc
c002592b:	50                   	push   eax
c002592c:	e8 03 d6 fe ff       	call   c0012f34 <Bus::~Bus()>
c0025931:	83 c4 10             	add    esp,0x10
c0025934:	90                   	nop
c0025935:	83 c4 0c             	add    esp,0xc
c0025938:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002593a <PCI::~PCI()>:
c002593a:	83 ec 0c             	sub    esp,0xc
c002593d:	83 ec 0c             	sub    esp,0xc
c0025940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025944:	e8 cd ff ff ff       	call   c0025916 <PCI::~PCI()>
c0025949:	83 c4 10             	add    esp,0x10
c002594c:	83 ec 08             	sub    esp,0x8
c002594f:	68 58 01 00 00       	push   0x158
c0025954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025958:	e8 3a c8 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c002595d:	83 c4 10             	add    esp,0x10
c0025960:	83 c4 0c             	add    esp,0xc
c0025963:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025964 <IDE::~IDE()>:
c0025964:	83 ec 0c             	sub    esp,0xc
c0025967:	ba 2c 91 02 c0       	mov    edx,0xc002912c
c002596c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025970:	89 10                	mov    DWORD PTR [eax],edx
c0025972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025976:	83 ec 0c             	sub    esp,0xc
c0025979:	50                   	push   eax
c002597a:	e8 bb e0 fe ff       	call   c0013a3a <HardDiskController::~HardDiskController()>
c002597f:	83 c4 10             	add    esp,0x10
c0025982:	90                   	nop
c0025983:	83 c4 0c             	add    esp,0xc
c0025986:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025988 <IDE::~IDE()>:
c0025988:	83 ec 0c             	sub    esp,0xc
c002598b:	83 ec 0c             	sub    esp,0xc
c002598e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025992:	e8 cd ff ff ff       	call   c0025964 <IDE::~IDE()>
c0025997:	83 c4 10             	add    esp,0x10
c002599a:	83 ec 08             	sub    esp,0x8
c002599d:	68 70 02 00 00       	push   0x270
c00259a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259a6:	e8 ec c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00259ab:	83 c4 10             	add    esp,0x10
c00259ae:	83 c4 0c             	add    esp,0xc
c00259b1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00259b2 <ATA::~ATA()>:
c00259b2:	83 ec 0c             	sub    esp,0xc
c00259b5:	ba 7c 91 02 c0       	mov    edx,0xc002917c
c00259ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259be:	89 10                	mov    DWORD PTR [eax],edx
c00259c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	50                   	push   eax
c00259c8:	e8 4b e1 fe ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c00259cd:	83 c4 10             	add    esp,0x10
c00259d0:	90                   	nop
c00259d1:	83 c4 0c             	add    esp,0xc
c00259d4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00259d6 <ATA::~ATA()>:
c00259d6:	83 ec 0c             	sub    esp,0xc
c00259d9:	83 ec 0c             	sub    esp,0xc
c00259dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e0:	e8 cd ff ff ff       	call   c00259b2 <ATA::~ATA()>
c00259e5:	83 c4 10             	add    esp,0x10
c00259e8:	83 ec 08             	sub    esp,0x8
c00259eb:	68 7c 01 00 00       	push   0x17c
c00259f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259f4:	e8 9e c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c00259f9:	83 c4 10             	add    esp,0x10
c00259fc:	83 c4 0c             	add    esp,0xc
c00259ff:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025a00 <ATAPI::~ATAPI()>:
c0025a00:	83 ec 0c             	sub    esp,0xc
c0025a03:	ba e8 91 02 c0       	mov    edx,0xc00291e8
c0025a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0c:	89 10                	mov    DWORD PTR [eax],edx
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	83 ec 0c             	sub    esp,0xc
c0025a15:	50                   	push   eax
c0025a16:	e8 fd e0 fe ff       	call   c0013b18 <PhysicalDisk::~PhysicalDisk()>
c0025a1b:	83 c4 10             	add    esp,0x10
c0025a1e:	90                   	nop
c0025a1f:	83 c4 0c             	add    esp,0xc
c0025a22:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025a24 <ATAPI::~ATAPI()>:
c0025a24:	83 ec 0c             	sub    esp,0xc
c0025a27:	83 ec 0c             	sub    esp,0xc
c0025a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a2e:	e8 cd ff ff ff       	call   c0025a00 <ATAPI::~ATAPI()>
c0025a33:	83 c4 10             	add    esp,0x10
c0025a36:	83 ec 08             	sub    esp,0x8
c0025a39:	68 80 01 00 00       	push   0x180
c0025a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a42:	e8 50 c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025a47:	83 c4 10             	add    esp,0x10
c0025a4a:	83 c4 0c             	add    esp,0xc
c0025a4d:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025a4e <AVX::~AVX()>:
c0025a4e:	83 ec 0c             	sub    esp,0xc
c0025a51:	ba 24 92 02 c0       	mov    edx,0xc0029224
c0025a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5a:	89 10                	mov    DWORD PTR [eax],edx
c0025a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a60:	83 ec 0c             	sub    esp,0xc
c0025a63:	50                   	push   eax
c0025a64:	e8 33 e1 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025a69:	83 c4 10             	add    esp,0x10
c0025a6c:	90                   	nop
c0025a6d:	83 c4 0c             	add    esp,0xc
c0025a70:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025a72 <AVX::~AVX()>:
c0025a72:	83 ec 0c             	sub    esp,0xc
c0025a75:	83 ec 0c             	sub    esp,0xc
c0025a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a7c:	e8 cd ff ff ff       	call   c0025a4e <AVX::~AVX()>
c0025a81:	83 c4 10             	add    esp,0x10
c0025a84:	83 ec 08             	sub    esp,0x8
c0025a87:	68 58 01 00 00       	push   0x158
c0025a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a90:	e8 02 c7 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025a95:	83 c4 10             	add    esp,0x10
c0025a98:	83 c4 0c             	add    esp,0xc
c0025a9b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025a9c <MMX::~MMX()>:
c0025a9c:	83 ec 0c             	sub    esp,0xc
c0025a9f:	ba 64 92 02 c0       	mov    edx,0xc0029264
c0025aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa8:	89 10                	mov    DWORD PTR [eax],edx
c0025aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aae:	83 ec 0c             	sub    esp,0xc
c0025ab1:	50                   	push   eax
c0025ab2:	e8 e5 e0 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025ab7:	83 c4 10             	add    esp,0x10
c0025aba:	90                   	nop
c0025abb:	83 c4 0c             	add    esp,0xc
c0025abe:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025ac0 <MMX::~MMX()>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	83 ec 0c             	sub    esp,0xc
c0025ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aca:	e8 cd ff ff ff       	call   c0025a9c <MMX::~MMX()>
c0025acf:	83 c4 10             	add    esp,0x10
c0025ad2:	83 ec 08             	sub    esp,0x8
c0025ad5:	68 58 01 00 00       	push   0x158
c0025ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ade:	e8 b4 c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025ae3:	83 c4 10             	add    esp,0x10
c0025ae6:	83 c4 0c             	add    esp,0xc
c0025ae9:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025aea <SSE::~SSE()>:
c0025aea:	83 ec 0c             	sub    esp,0xc
c0025aed:	ba a4 92 02 c0       	mov    edx,0xc00292a4
c0025af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af6:	89 10                	mov    DWORD PTR [eax],edx
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	83 ec 0c             	sub    esp,0xc
c0025aff:	50                   	push   eax
c0025b00:	e8 97 e0 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025b05:	83 c4 10             	add    esp,0x10
c0025b08:	90                   	nop
c0025b09:	83 c4 0c             	add    esp,0xc
c0025b0c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0025b0e <SSE::~SSE()>:
c0025b0e:	83 ec 0c             	sub    esp,0xc
c0025b11:	83 ec 0c             	sub    esp,0xc
c0025b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b18:	e8 cd ff ff ff       	call   c0025aea <SSE::~SSE()>
c0025b1d:	83 c4 10             	add    esp,0x10
c0025b20:	83 ec 08             	sub    esp,0x8
c0025b23:	68 58 01 00 00       	push   0x158
c0025b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b2c:	e8 66 c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025b31:	83 c4 10             	add    esp,0x10
c0025b34:	83 c4 0c             	add    esp,0xc
c0025b37:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025b38 <x87::~x87()>:
c0025b38:	83 ec 0c             	sub    esp,0xc
c0025b3b:	ba e4 92 02 c0       	mov    edx,0xc00292e4
c0025b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b44:	89 10                	mov    DWORD PTR [eax],edx
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	83 ec 0c             	sub    esp,0xc
c0025b4d:	50                   	push   eax
c0025b4e:	e8 49 e0 fe ff       	call   c0013b9c <FPU::~FPU()>
c0025b53:	83 c4 10             	add    esp,0x10
c0025b56:	90                   	nop
c0025b57:	83 c4 0c             	add    esp,0xc
c0025b5a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025b5c <x87::~x87()>:
c0025b5c:	83 ec 0c             	sub    esp,0xc
c0025b5f:	83 ec 0c             	sub    esp,0xc
c0025b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b66:	e8 cd ff ff ff       	call   c0025b38 <x87::~x87()>
c0025b6b:	83 c4 10             	add    esp,0x10
c0025b6e:	83 ec 08             	sub    esp,0x8
c0025b71:	68 58 01 00 00       	push   0x158
c0025b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b7a:	e8 18 c6 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	83 c4 0c             	add    esp,0xc
c0025b85:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025b86 <IOAPIC::~IOAPIC()>:
c0025b86:	83 ec 0c             	sub    esp,0xc
c0025b89:	ba 3c 94 02 c0       	mov    edx,0xc002943c
c0025b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b92:	89 10                	mov    DWORD PTR [eax],edx
c0025b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b98:	83 ec 0c             	sub    esp,0xc
c0025b9b:	50                   	push   eax
c0025b9c:	e8 83 d9 fe ff       	call   c0013524 <Device::~Device()>
c0025ba1:	83 c4 10             	add    esp,0x10
c0025ba4:	90                   	nop
c0025ba5:	83 c4 0c             	add    esp,0xc
c0025ba8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025baa <IOAPIC::~IOAPIC()>:
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	83 ec 0c             	sub    esp,0xc
c0025bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bb4:	e8 cd ff ff ff       	call   c0025b86 <IOAPIC::~IOAPIC()>
c0025bb9:	83 c4 10             	add    esp,0x10
c0025bbc:	83 ec 08             	sub    esp,0x8
c0025bbf:	68 68 01 00 00       	push   0x168
c0025bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bc8:	e8 ca c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025bcd:	83 c4 10             	add    esp,0x10
c0025bd0:	83 c4 0c             	add    esp,0xc
c0025bd3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025bd4 <APIC::~APIC()>:
c0025bd4:	83 ec 0c             	sub    esp,0xc
c0025bd7:	ba f4 93 02 c0       	mov    edx,0xc00293f4
c0025bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be0:	89 10                	mov    DWORD PTR [eax],edx
c0025be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be6:	83 ec 0c             	sub    esp,0xc
c0025be9:	50                   	push   eax
c0025bea:	e8 81 e4 fe ff       	call   c0014070 <InterruptController::~InterruptController()>
c0025bef:	83 c4 10             	add    esp,0x10
c0025bf2:	90                   	nop
c0025bf3:	83 c4 0c             	add    esp,0xc
c0025bf6:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025bf8 <APIC::~APIC()>:
c0025bf8:	83 ec 0c             	sub    esp,0xc
c0025bfb:	83 ec 0c             	sub    esp,0xc
c0025bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c02:	e8 cd ff ff ff       	call   c0025bd4 <APIC::~APIC()>
c0025c07:	83 c4 10             	add    esp,0x10
c0025c0a:	83 ec 08             	sub    esp,0x8
c0025c0d:	68 58 21 00 00       	push   0x2158
c0025c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c16:	e8 7c c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025c1b:	83 c4 10             	add    esp,0x10
c0025c1e:	83 c4 0c             	add    esp,0xc
c0025c21:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025c22 <PIC::~PIC()>:
c0025c22:	83 ec 0c             	sub    esp,0xc
c0025c25:	ba 8c 94 02 c0       	mov    edx,0xc002948c
c0025c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2e:	89 10                	mov    DWORD PTR [eax],edx
c0025c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c34:	83 ec 0c             	sub    esp,0xc
c0025c37:	50                   	push   eax
c0025c38:	e8 33 e4 fe ff       	call   c0014070 <InterruptController::~InterruptController()>
c0025c3d:	83 c4 10             	add    esp,0x10
c0025c40:	90                   	nop
c0025c41:	83 c4 0c             	add    esp,0xc
c0025c44:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025c46 <PIC::~PIC()>:
c0025c46:	83 ec 0c             	sub    esp,0xc
c0025c49:	83 ec 0c             	sub    esp,0xc
c0025c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c50:	e8 cd ff ff ff       	call   c0025c22 <PIC::~PIC()>
c0025c55:	83 c4 10             	add    esp,0x10
c0025c58:	83 ec 08             	sub    esp,0x8
c0025c5b:	68 58 21 00 00       	push   0x2158
c0025c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c64:	e8 2e c5 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025c69:	83 c4 10             	add    esp,0x10
c0025c6c:	83 c4 0c             	add    esp,0xc
c0025c6f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025c70 <APICTimer::~APICTimer()>:
c0025c70:	83 ec 0c             	sub    esp,0xc
c0025c73:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c0025c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7c:	89 10                	mov    DWORD PTR [eax],edx
c0025c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c82:	83 ec 0c             	sub    esp,0xc
c0025c85:	50                   	push   eax
c0025c86:	e8 e3 00 ff ff       	call   c0015d6e <Timer::~Timer()>
c0025c8b:	83 c4 10             	add    esp,0x10
c0025c8e:	90                   	nop
c0025c8f:	83 c4 0c             	add    esp,0xc
c0025c92:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025c94 <APICTimer::~APICTimer()>:
c0025c94:	83 ec 0c             	sub    esp,0xc
c0025c97:	83 ec 0c             	sub    esp,0xc
c0025c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c9e:	e8 cd ff ff ff       	call   c0025c70 <APICTimer::~APICTimer()>
c0025ca3:	83 c4 10             	add    esp,0x10
c0025ca6:	83 ec 08             	sub    esp,0x8
c0025ca9:	68 60 01 00 00       	push   0x160
c0025cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cb2:	e8 e0 c4 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025cb7:	83 c4 10             	add    esp,0x10
c0025cba:	83 c4 0c             	add    esp,0xc
c0025cbd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025cbe <PIT::~PIT()>:
c0025cbe:	83 ec 0c             	sub    esp,0xc
c0025cc1:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0025cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cca:	89 10                	mov    DWORD PTR [eax],edx
c0025ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd0:	83 ec 0c             	sub    esp,0xc
c0025cd3:	50                   	push   eax
c0025cd4:	e8 95 00 ff ff       	call   c0015d6e <Timer::~Timer()>
c0025cd9:	83 c4 10             	add    esp,0x10
c0025cdc:	90                   	nop
c0025cdd:	83 c4 0c             	add    esp,0xc
c0025ce0:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025ce2 <PIT::~PIT()>:
c0025ce2:	83 ec 0c             	sub    esp,0xc
c0025ce5:	83 ec 0c             	sub    esp,0xc
c0025ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cec:	e8 cd ff ff ff       	call   c0025cbe <PIT::~PIT()>
c0025cf1:	83 c4 10             	add    esp,0x10
c0025cf4:	83 ec 08             	sub    esp,0x8
c0025cf7:	68 5c 01 00 00       	push   0x15c
c0025cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d00:	e8 92 c4 fe ff       	call   c0012197 <operator delete(void*, unsigned long)>
c0025d05:	83 c4 10             	add    esp,0x10
c0025d08:	83 c4 0c             	add    esp,0xc
c0025d0b:	c3                   	ret    
