
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 78 00 00       	call   c0007823 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 14 fd 01 c0       	mov    eax,0xc001fd14
c0000025:	3d 14 fd 01 c0       	cmp    eax,0xc001fd14
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 14 fd 01 c0       	push   0xc001fd14
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 14 fd 01 c0       	mov    eax,0xc001fd14
c0000051:	2d 14 fd 01 c0       	sub    eax,0xc001fd14
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 14 fd 01 c0       	push   0xc001fd14
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 40 ff 01 c0 00 	cmp    BYTE PTR ds:0xc001ff40,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d8 ce 01 c0       	mov    ebx,0xc001ced8
c0000097:	81 eb d4 ce 01 c0    	sub    ebx,0xc001ced4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d4 ce 01 c0       	mov    esi,0xc001ced4
c00000a6:	a1 44 ff 01 c0       	mov    eax,ds:0xc001ff44
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 44 ff 01 c0       	mov    ds:0xc001ff44,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 44 ff 01 c0       	mov    eax,ds:0xc001ff44
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 14 fd 01 c0       	push   0xc001fd14
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 40 ff 01 c0 01 	mov    BYTE PTR ds:0xc001ff40,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 48 ff 01 c0       	push   0xc001ff48
c0000108:	68 14 fd 01 c0       	push   0xc001fd14
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 7c 2d 01 00       	call   c001302c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 20 a0 00 00       	call   c000a2e8 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 5a 2d 01 00       	call   c001302c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 ab 33 01 00       	call   c001369c <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 fa 39 01 00       	call   c0013cf4 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 40 0d 02 c0 	lgdtd  ds:0xc0020d40
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 bc fd 00 00       	jmp    c001013e <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 60 ff 01 c0       	mov    ds:0xc001ff60,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 60 ff 01 c0    	mov    DWORD PTR ds:0xc001ff60,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 60 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff60
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3120],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3120],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3120],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 80 ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ff80
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 80 ff 01 c0    	mov    DWORD PTR ds:0xc001ff80,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 84 ff 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe007c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 84 ff 01 c0 	mov    DWORD PTR [eax*4-0x3ffe007c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 80 ff 01 c0    	mov    DWORD PTR ds:0xc001ff80,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 ac ff 01 c0    	cmp    DWORD PTR ds:0xc001ffac,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d bc ff 01 c0    	mov    ecx,DWORD PTR ds:0xc001ffbc
c0000d3d:	c7 42 0c b4 ff 01 c0 	mov    DWORD PTR [edx+0xc],0xc001ffb4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 bc ff 01 c0    	mov    DWORD PTR ds:0xc001ffbc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 ac ff 01 c0    	mov    DWORD PTR ds:0xc001ffac,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 80 ff 01 c0 02 	test   BYTE PTR ds:0xc001ff80,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 80 ff 01 c0    	mov    edi,DWORD PTR ds:0xc001ff80
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 84 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe007c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 84 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe007c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 b4 ff 01 c0 	lea    edx,[eax*8-0x3ffe004c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d c0 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ffc0
c00010bf:	81 fb b4 ff 01 c0    	cmp    ebx,0xc001ffb4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d b4 ff 01 c0       	cmp    eax,0xc001ffb4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d b0 ff 01 c0    	cmp    DWORD PTR ds:0xc001ffb0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 bc ff 01 c0       	mov    ds:0xc001ffbc,eax
c00010fb:	a3 c0 ff 01 c0       	mov    ds:0xc001ffc0,eax
c0001100:	a3 b0 ff 01 c0       	mov    ds:0xc001ffb0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 b4 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ffb4
c000110e:	c7 40 0c b4 ff 01 c0 	mov    DWORD PTR [eax+0xc],0xc001ffb4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 c0 ff 01 c0       	mov    ds:0xc001ffc0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 b4 ff 01 c0 	mov    DWORD PTR [eax+0x8],0xc001ffb4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 78 ff 01 c0 	lea    ebp,[edx*4-0x3ffe0088]
c000115f:	8b 14 95 80 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0080]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 80 ff 01 c0 	lea    ecx,[edx*4-0x3ffe0080]
c000117a:	8b 14 95 80 ff 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0080]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd b4 02 02 c0 	or     DWORD PTR [edi*4-0x3ffdfd4c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 b4 ff 01 c0 	lea    eax,[eax*8-0x3ffe004c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d bc ff 01 c0    	mov    DWORD PTR ds:0xc001ffbc,ecx
c0001234:	89 0d c0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc0,ecx
c000123a:	c7 41 08 b4 ff 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001ffb4
c0001241:	c7 41 0c b4 ff 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001ffb4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd ac ff 01 c0 	lea    edx,[ecx*8-0x3ffe0054]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d b4 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd4c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d b4 02 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdfd4c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 ac ff 01 c0 	lea    edx,[eax*4-0x3ffe0054]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d b4 02 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfd4c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d bc ff 01 c0    	mov    DWORD PTR ds:0xc001ffbc,edi
c0001307:	89 3d c0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffc0,edi
c000130d:	c7 47 08 b4 ff 01 c0 	mov    DWORD PTR [edi+0x8],0xc001ffb4
c0001314:	c7 47 0c b4 ff 01 c0 	mov    DWORD PTR [edi+0xc],0xc001ffb4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d b0 ff 01 c0    	mov    DWORD PTR ds:0xc001ffb0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 ac ff 01 c0       	mov    eax,ds:0xc001ffac
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d ac ff 01 c0    	mov    DWORD PTR ds:0xc001ffac,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 80 ff 01 c0       	mov    edx,0xc001ff80
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 80 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff80,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d d4 02 02 c0    	mov    ebx,DWORD PTR ds:0xc00202d4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 d4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202d4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d d4 02 02 c0    	mov    DWORD PTR ds:0xc00202d4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 ac ff 01 c0    	cmp    DWORD PTR ds:0xc001ffac,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d ac ff 01 c0    	mov    DWORD PTR ds:0xc001ffac,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 80 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff80,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 dc 02 02 c0    	push   DWORD PTR ds:0xc00202dc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 80 ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ff80,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 dc 02 02 c0       	mov    eax,ds:0xc00202dc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d ac ff 01 c0 00 	cmp    DWORD PTR ds:0xc001ffac,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 ac ff 01 c0       	mov    eax,ds:0xc001ffac
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 84 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe007c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 b4 ff 01 c0       	mov    eax,0xc001ffb4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d ac 02 02 c0       	cmp    eax,0xc00202ac
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 e8 02 02 c0       	mov    eax,ds:0xc00202e8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 d0 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202d0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 e4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202e4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 f4 02 02 c0    	mov    esi,DWORD PTR ds:0xc00202f4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe301c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 80 ff 01 c0       	mov    eax,ds:0xc001ff80
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 80 ff 01 c0       	mov    ds:0xc001ff80,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d c4 02 02 c0    	mov    DWORD PTR ds:0xc00202c4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d c8 02 02 c0    	mov    DWORD PTR ds:0xc00202c8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d cc 02 02 c0    	mov    DWORD PTR ds:0xc00202cc,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 d4 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202d4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 9a 53 01 00       	jmp    c0017084 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 c8 53 01 00       	jmp    c00170c8 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 40 41 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbec0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 ed 53 01 00       	jmp    c001710c <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ec0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ec0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 28 f2 01 c0       	mov    edx,0xc001f228
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc cf 01 c0       	mov    edx,0xc001cffc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 20 03 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfce0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 00 03 02 c0    	mov    ax,ds:0xc0020300
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 00 03 02 c0    	mov    ds:0xc0020300,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 d0 01 c0       	mov    eax,0xc001d002
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f40]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b d0 01 c0       	mov    eax,0xc001d00b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ec0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 20 03 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfce0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 20 03 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfce0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 d0 01 c0       	mov    eax,0xc001d090
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 20 03 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfce0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 d0 01 c0       	mov    ebx,0xc001d080
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 d0 01 c0       	mov    edx,0xc001d060
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 d0 01 c0       	mov    edx,0xc001d070
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 d0 01 c0       	mov    edx,0xc001d012
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e d0 01 c0       	mov    edx,0xc001d01e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 46 1d 00 00       	call   c00077d9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d460
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d460
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d2 01 c0       	mov    eax,0xc001d260
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ea0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 a0 fe 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0160]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 00 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0100]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 50 04 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfbb0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 e0 fe 01 c0 	movsx  eax,BYTE PTR ds:0xc001fee0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 e1 19 01 00       	call   c0017960 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 00 ff 01 c0       	mov    eax,0xc001ff00
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 a0 fe 01 c0       	mov    eax,0xc001fea0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 34 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d34,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 00 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0100]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 34 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d34
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 d5 01 c0       	push   0xc001d560
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 00 0d 02 c0       	mov    ecx,0xc0020d00
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf c0 03 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdfc40],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 c0 03 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdfc40],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 c4 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc3c],esi
c000634e:	89 87 c0 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc40],eax
c0006354:	c7 87 c8 03 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfc38],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 50 04 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfbb0],0x0
c0006370:	89 87 cc 03 02 c0    	mov    DWORD PTR [edi-0x3ffdfc34],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 c0 03 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfc40],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd c0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc40],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 50 04 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfbb0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 c8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc38]
c00063e9:	8b 8d cc 03 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfc34]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 c0 03 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfc40]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 a0 fe 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0160]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 c8 03 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfc38]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d c8 03 02 c0    	add    DWORD PTR [ebp-0x3ffdfc38],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d c0 03 02 c0    	lea    ecx,[ebp-0x3ffdfc40]
c00064e1:	83 bd c0 03 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfc40],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 cc 03 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfc34]
c000651f:	05 c0 03 02 c0       	add    eax,0xc00203c0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 c8 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc38]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb c0 03 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfc40],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 50 04 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfbb0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 c8 03 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfc38]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba c0 03 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfc40],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 50 04 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfbb0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 cc 03 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfc34]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 c0 03 02 c0    	lea    esi,[eax-0x3ffdfc40]
c00065e4:	83 b8 c0 03 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfc40],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 00 ff 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0100]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 c8 03 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfc38]
c0006653:	81 c2 c0 03 02 c0    	add    edx,0xc00203c0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 00 ff 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0100]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 d8 03 02 c0    	lea    ebp,[eax-0x3ffdfc28]
c00066b9:	83 3d 34 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d34,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 d8 03 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfc28],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 d5 01 c0       	push   0xc001d560
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 d3 03 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfc2d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 d0 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc30],eax
c000678f:	89 91 d4 03 02 c0    	mov    DWORD PTR [ecx-0x3ffdfc2c],edx
c0006795:	81 c1 c0 03 02 c0    	add    ecx,0xc00203c0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 d0 03 02 c0       	add    eax,0xc00203d0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 e0 fe 01 c0       	mov    ds:0xc001fee0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 34 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d34,0x0
c00067df:	a1 2c 0d 02 c0       	mov    eax,ds:0xc0020d2c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 00 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0100]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 d5 01 c0       	push   0xc001d563
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 00 ff 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0100]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 34 0d 02 c0       	mov    ds:0xc0020d34,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 34 0d 02 c0 00 	cmp    DWORD PTR ds:0xc0020d34,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 2c 0d 02 c0       	mov    eax,ds:0xc0020d2c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 00 ff 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0100]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a d5 01 c0       	push   0xc001d56a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 00 ff 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0100]
c000687d:	bf 00 0d 02 c0       	mov    edi,0xc0020d00
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 02 0d 02 c0       	mov    eax,0xc0020d02
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 28 0d 02 c0       	mov    ds:0xc0020d28,eax
c00068a0:	b8 0a 0d 02 c0       	mov    eax,0xc0020d0a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 24 0d 02 c0       	mov    ds:0xc0020d24,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 c0 03 02 c0       	push   0xc00203c0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 c0 03 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc00203c0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 30 0d 02 c0       	mov    ds:0xc0020d30,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 a0 03 02 c0       	mov    ds:0xc00203a0,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 00 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0100],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d a0 fe 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0160],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 00 ff 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0100]
c000695a:	e8 7a 0e 00 00       	call   c00077d9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d a0 fe 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0160]
c0006967:	43                   	inc    ebx
c0006968:	e8 6c 0e 00 00       	call   c00077d9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 30 0d 02 c0       	mov    eax,ds:0xc0020d30
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 52 0e 00 00       	call   c00077d9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 a0 03 02 c0       	mov    eax,ds:0xc00203a0
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 3d 0e 00 00       	call   c00077d9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 a0 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00203a0,0x0
c00069a9:	c7 05 30 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d30,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 6e 50 00 00       	call   c000ba46 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 d5 01 c0       	push   0xc001d571
c0006a09:	e8 cd 90 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 e8 07 00 00 	mov    DWORD PTR [esp],0x7e8
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0006a28:	50                   	push   eax
c0006a29:	68 8a d5 01 c0       	push   0xc001d58a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 ee c9 00 00       	call   c0013424 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 a1 cc 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 10 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024010
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 40 41 01 c0       	push   0xc0014140
c0006a5a:	52                   	push   edx
c0006a5b:	e8 8c cc 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 c8 3f 02 c0       	mov    ds:0xc0023fc8,eax
c0006a68:	68 88 d6 01 c0       	push   0xc001d688
c0006a6d:	c6 05 3d 0d 02 c0 01 	mov    BYTE PTR ds:0xc0020d3d,0x1
c0006a74:	e8 62 90 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006a79:	e8 a1 da 00 00       	call   c001451f <Vm::initialise8086()>
c0006a7e:	e8 07 3e 00 00       	call   c000a88a <Fs::initVFS()>
c0006a83:	c7 04 24 97 d5 01 c0 	mov    DWORD PTR [esp],0xc001d597
c0006a8a:	e8 4c 90 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006a8f:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d6 01 c0       	push   0xc001d688
c0006aae:	e8 28 90 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006ab3:	e8 fe 94 00 00       	call   c000ffb6 <Krnl::loadSystemEnv()>
c0006ab8:	e8 5b 97 00 00       	call   c0010218 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006ac7:	68 ba d5 01 c0       	push   0xc001d5ba
c0006acc:	e8 41 ae 00 00       	call   c0011912 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 bf 48 00 00       	call   c000b398 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ac
c0006ae0:	e8 f6 8f 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 4d 4f 00 00       	call   c000ba44 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5c2
c0006afe:	e8 d8 8f 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 d5 01 c0       	push   0xc001d5d3
c0006b12:	e8 82 c2 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 aa c4 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 db cf 00 00       	call   c0013b08 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef d5 01 c0       	push   0xc001d5ef
c0006b41:	50                   	push   eax
c0006b42:	e8 79 4f 00 00       	call   c000bac0 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 51 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d51,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 a5 52 01 00       	call   c001bed6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 9c 83 00 00       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 75 83 00 00       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 53 83 00 00       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 31 83 00 00       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 50 0d 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020d50,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 3f 82 00 00       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 1a 82 00 00       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 0f 51 01 00       	call   c001be90 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 6c 4e 01 00       	call   c001bc10 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 36 82 00 00       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 d5 01 c0       	push   0xc001d5f8
c0006e14:	e8 3a 93 00 00       	call   c0010153 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe d5 01 c0       	push   0xc001d5fe
c0006e4c:	e8 02 93 00 00       	call   c0010153 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 e7 7b 00 00       	jmp    c000ea80 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 50 0d 02 c0 04 	test   BYTE PTR ds:0xc0020d50,0x4
c0006ee8:	68 04 d6 01 c0       	push   0xc001d604
c0006eed:	0f 94 05 80 f9 01 c0 	sete   BYTE PTR ds:0xc001f980
c0006ef4:	e8 e2 8b 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 09 77 00 00       	call   c000e618 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 0a 4a 00 00       	call   c000b928 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d6 01 c0 	mov    DWORD PTR [esp],0xc001d61c
c0006f37:	e8 9f 8b 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 6e 81 00 00       	call   c000f0c0 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 c7 49 00 00       	call   c000b928 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d6 01 c0       	push   0xc001d6cc
c0006f7e:	e8 58 8b 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006f83:	e8 ce e6 00 00       	call   c0015656 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d6 01 c0 	mov    DWORD PTR [esp],0xc001d636
c0006f8f:	e8 47 8b 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 64 c8 00 00       	call   c0013804 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d6 01 c0       	push   0xc001d651
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 f7 34 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d6 01 c0       	push   0xc001d662
c000700e:	e8 40 91 00 00       	call   c0010153 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d6 01 c0       	push   0xc001d66f
c0007023:	e8 2b 91 00 00       	call   c0010153 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d679
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 14 91 00 00       	jmp    c0010153 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 42 0d 02 c0       	mov    ds:0xc0020d42,eax
c00070cf:	66 89 15 40 0d 02 c0 	mov    WORD PTR ds:0xc0020d40,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0007217:	48                   	dec    eax
c0007218:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 0b e1 00 00       	call   c0015330 <HalSystemIdle()>
c0007225:	e8 68 52 01 00       	call   c001c492 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 48 0d 02 c0 ff 07 	mov    WORD PTR ds:0xc0020d48,0x7ff
c000731d:	a3 4a 0d 02 c0       	mov    ds:0xc0020d4a,eax
c0007322:	0f 01 1d 48 0d 02 c0 	lidtd  ds:0xc0020d48
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 a0 bc 01 c0       	push   0xc001bca0
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 b0 bc 01 c0       	push   0xc001bcb0
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 ba bc 01 c0       	push   0xc001bcba
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 c4 bc 01 c0       	push   0xc001bcc4
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 ce bc 01 c0       	push   0xc001bcce
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 d8 bc 01 c0       	push   0xc001bcd8
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 e2 bc 01 c0       	push   0xc001bce2
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 ec bc 01 c0       	push   0xc001bcec
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 f6 bc 01 c0       	push   0xc001bcf6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 fe bc 01 c0       	push   0xc001bcfe
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 08 bd 01 c0       	push   0xc001bd08
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 10 bd 01 c0       	push   0xc001bd10
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 18 bd 01 c0       	push   0xc001bd18
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 20 bd 01 c0       	push   0xc001bd20
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 28 bd 01 c0       	push   0xc001bd28
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 30 bd 01 c0       	push   0xc001bd30
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 3a bd 01 c0       	push   0xc001bd3a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 44 bd 01 c0       	push   0xc001bd44
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 4e bd 01 c0       	push   0xc001bd4e
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 e8 bd 01 c0       	push   0xc001bde8
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 ef bd 01 c0       	push   0xc001bdef
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 da bd 01 c0       	push   0xc001bdda
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 e1 bd 01 c0       	push   0xc001bde1
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 58 bd 01 c0       	push   0xc001bd58
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 62 bd 01 c0       	push   0xc001bd62
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 6c bd 01 c0       	push   0xc001bd6c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 76 bd 01 c0       	push   0xc001bd76
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 80 bd 01 c0       	push   0xc001bd80
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 8a bd 01 c0       	push   0xc001bd8a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 94 bd 01 c0       	push   0xc001bd94
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 9e bd 01 c0       	push   0xc001bd9e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 a8 bd 01 c0       	push   0xc001bda8
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 b2 bd 01 c0       	push   0xc001bdb2
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 bc bd 01 c0       	push   0xc001bdbc
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 c6 bd 01 c0       	push   0xc001bdc6
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 d0 bd 01 c0       	push   0xc001bdd0
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 26 be 01 c0       	push   0xc001be26
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 30 be 01 c0       	push   0xc001be30
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 3a be 01 c0       	push   0xc001be3a
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 44 be 01 c0       	push   0xc001be44
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 4e be 01 c0       	push   0xc001be4e
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 58 be 01 c0       	push   0xc001be58
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 62 be 01 c0       	push   0xc001be62
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 6c be 01 c0       	push   0xc001be6c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c0007614:	e8 15 24 00 00       	call   c0009a2e <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 a1 15 00 00       	call   c0008bd8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 f6 bc 01 c0       	push   0xc001bcf6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 d6 15 00 00       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 78 f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f978
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 30 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e30
c00076c2:	8b 3d 78 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f978
c00076c8:	e8 d8 03 00 00       	call   c0007aa5 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 50 22 00 00       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 78 f9 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f978,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 78 f9 01 c0       	mov    eax,ds:0xc001f978
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d7 01 c0       	push   0xc001d71c
c000770e:	e8 d5 2d 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d7 01 c0       	push   0xc001d74c
c000772d:	e8 21 8a 00 00       	call   c0010153 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d7 01 c0       	push   0xc001d751
c0007743:	e8 0b 8a 00 00       	call   c0010153 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0007763:	48                   	dec    eax
c0007764:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c0007781:	e8 a8 22 00 00       	call   c0009a2e <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c0007797:	e8 4e 1f 00 00       	call   c00096ea <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	53                   	push   ebx
c00077ba:	83 ec 10             	sub    esp,0x10
c00077bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00077c1:	53                   	push   ebx
c00077c2:	68 58 d7 01 c0       	push   0xc001d758
c00077c7:	e8 1c 2d 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00077cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00077cf:	e8 20 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077d4:	83 c4 18             	add    esp,0x18
c00077d7:	5b                   	pop    ebx
c00077d8:	c3                   	ret    

c00077d9 <free>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <rfree>:
c00077e9:	83 ec 18             	sub    esp,0x18
c00077ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f0:	e8 a4 94 ff ff       	call   c0000c99 <dlfree>
c00077f5:	83 c4 1c             	add    esp,0x1c
c00077f8:	c3                   	ret    

c00077f9 <calloc>:
c00077f9:	56                   	push   esi
c00077fa:	53                   	push   ebx
c00077fb:	83 ec 10             	sub    esp,0x10
c00077fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007802:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007807:	53                   	push   ebx
c0007808:	e8 ac ff ff ff       	call   c00077b9 <malloc>
c000780d:	89 c6                	mov    esi,eax
c000780f:	83 c4 0c             	add    esp,0xc
c0007812:	53                   	push   ebx
c0007813:	6a 00                	push   0x0
c0007815:	50                   	push   eax
c0007816:	e8 b5 8c ff ff       	call   c00004d0 <memset>
c000781b:	89 f0                	mov    eax,esi
c000781d:	83 c4 14             	add    esp,0x14
c0007820:	5b                   	pop    ebx
c0007821:	5e                   	pop    esi
c0007822:	c3                   	ret    

c0007823 <KeEntryPoint>:
c0007823:	57                   	push   edi
c0007824:	bf f9 03 00 00       	mov    edi,0x3f9
c0007829:	56                   	push   esi
c000782a:	89 fa                	mov    edx,edi
c000782c:	53                   	push   ebx
c000782d:	31 f6                	xor    esi,esi
c000782f:	83 ec 2c             	sub    esp,0x2c
c0007832:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007837:	a3 50 0d 02 c0       	mov    ds:0xc0020d50,eax
c000783c:	89 f0                	mov    eax,esi
c000783e:	ee                   	out    dx,al
c000783f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007844:	b0 80                	mov    al,0x80
c0007846:	89 da                	mov    edx,ebx
c0007848:	ee                   	out    dx,al
c0007849:	b1 03                	mov    cl,0x3
c000784b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007850:	88 c8                	mov    al,cl
c0007852:	ee                   	out    dx,al
c0007853:	89 f0                	mov    eax,esi
c0007855:	89 fa                	mov    edx,edi
c0007857:	ee                   	out    dx,al
c0007858:	88 c8                	mov    al,cl
c000785a:	89 da                	mov    edx,ebx
c000785c:	ee                   	out    dx,al
c000785d:	b0 c7                	mov    al,0xc7
c000785f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007864:	ee                   	out    dx,al
c0007865:	b0 0b                	mov    al,0xb
c0007867:	ba fc 03 00 00       	mov    edx,0x3fc
c000786c:	ee                   	out    dx,al
c000786d:	68 65 d7 01 c0       	push   0xc001d765
c0007872:	e8 71 2c 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007877:	e8 f1 81 00 00       	call   c000fa6d <KeDisplaySplashScreen()>
c000787c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007881:	05 ff 0f 00 00       	add    eax,0xfff
c0007886:	25 00 f0 ff ff       	and    eax,0xfffff000
c000788b:	89 04 24             	mov    DWORD PTR [esp],eax
c000788e:	e8 64 03 00 00       	call   c0007bf7 <Phys::physicalMemorySetup(unsigned int)>
c0007893:	e8 bc 1b 00 00       	call   c0009454 <Virt::virtualMemorySetup()>
c0007898:	58                   	pop    eax
c0007899:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000789d:	53                   	push   ebx
c000789e:	e8 6d 1c 00 00       	call   c0009510 <VAS::VAS()>
c00078a3:	89 1d 30 0e 02 c0    	mov    DWORD PTR ds:0xc0020e30,ebx
c00078a9:	e8 7c 4b 01 00       	call   c001c42a <_init>
c00078ae:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078b5:	e8 ff fe ff ff       	call   c00077b9 <malloc>
c00078ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00078bd:	89 c6                	mov    esi,eax
c00078bf:	e8 6e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078c4:	6a 00                	push   0x0
c00078c6:	89 35 38 0d 02 c0    	mov    DWORD PTR ds:0xc0020d38,esi
c00078cc:	6a 00                	push   0x0
c00078ce:	6a 00                	push   0x0
c00078d0:	56                   	push   esi
c00078d1:	e8 02 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078d6:	83 c4 14             	add    esp,0x14
c00078d9:	53                   	push   ebx
c00078da:	e8 e7 1e 00 00       	call   c00097c6 <VAS::~VAS()>
c00078df:	83 c4 30             	add    esp,0x30
c00078e2:	5b                   	pop    ebx
c00078e3:	5e                   	pop    esi
c00078e4:	5f                   	pop    edi
c00078e5:	c3                   	ret    

c00078e6 <Phys::allocateDMA(unsigned long)>:
c00078e6:	55                   	push   ebp
c00078e7:	31 ed                	xor    ebp,ebp
c00078e9:	57                   	push   edi
c00078ea:	56                   	push   esi
c00078eb:	53                   	push   ebx
c00078ec:	31 db                	xor    ebx,ebx
c00078ee:	83 ec 1c             	sub    esp,0x1c
c00078f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078fd:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007903:	31 c0                	xor    eax,eax
c0007905:	c1 ef 0c             	shr    edi,0xc
c0007908:	eb 19                	jmp    c0007923 <Phys::allocateDMA(unsigned long)+0x3d>
c000790a:	85 c0                	test   eax,eax
c000790c:	75 06                	jne    c0007914 <Phys::allocateDMA(unsigned long)+0x2e>
c000790e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007912:	89 dd                	mov    ebp,ebx
c0007914:	8d 70 01             	lea    esi,[eax+0x1]
c0007917:	39 f7                	cmp    edi,esi
c0007919:	74 33                	je     c000794e <Phys::allocateDMA(unsigned long)+0x68>
c000791b:	89 f0                	mov    eax,esi
c000791d:	43                   	inc    ebx
c000791e:	83 fb 0f             	cmp    ebx,0xf
c0007921:	7f 11                	jg     c0007934 <Phys::allocateDMA(unsigned long)+0x4e>
c0007923:	80 bb 6c 0d 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf294],0x0
c000792a:	74 de                	je     c000790a <Phys::allocateDMA(unsigned long)+0x24>
c000792c:	31 c0                	xor    eax,eax
c000792e:	43                   	inc    ebx
c000792f:	83 fb 0f             	cmp    ebx,0xf
c0007932:	7e ef                	jle    c0007923 <Phys::allocateDMA(unsigned long)+0x3d>
c0007934:	83 ec 0c             	sub    esp,0xc
c0007937:	68 7c d7 01 c0       	push   0xc001d77c
c000793c:	e8 12 88 00 00       	call   c0010153 <KePanic(char const*)>
c0007941:	83 c4 10             	add    esp,0x10
c0007944:	31 c0                	xor    eax,eax
c0007946:	83 c4 1c             	add    esp,0x1c
c0007949:	5b                   	pop    ebx
c000794a:	5e                   	pop    esi
c000794b:	5f                   	pop    edi
c000794c:	5d                   	pop    ebp
c000794d:	c3                   	ret    
c000794e:	89 e9                	mov    ecx,ebp
c0007950:	c1 f9 04             	sar    ecx,0x4
c0007953:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007957:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000795b:	89 ca                	mov    edx,ecx
c000795d:	4a                   	dec    edx
c000795e:	79 03                	jns    c0007963 <Phys::allocateDMA(unsigned long)+0x7d>
c0007960:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007963:	c1 fa 04             	sar    edx,0x4
c0007966:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000796a:	74 08                	je     c0007974 <Phys::allocateDMA(unsigned long)+0x8e>
c000796c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007970:	31 c0                	xor    eax,eax
c0007972:	eb ba                	jmp    c000792e <Phys::allocateDMA(unsigned long)+0x48>
c0007974:	85 f6                	test   esi,esi
c0007976:	74 15                	je     c000798d <Phys::allocateDMA(unsigned long)+0xa7>
c0007978:	8d 95 6c 0d 02 c0    	lea    edx,[ebp-0x3ffdf294]
c000797e:	8d 84 05 6d 0d 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf293]
c0007985:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007988:	42                   	inc    edx
c0007989:	39 d0                	cmp    eax,edx
c000798b:	75 f8                	jne    c0007985 <Phys::allocateDMA(unsigned long)+0x9f>
c000798d:	01 3d 64 0d 02 c0    	add    DWORD PTR ds:0xc0020d64,edi
c0007993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007997:	85 c0                	test   eax,eax
c0007999:	74 17                	je     c00079b2 <Phys::allocateDMA(unsigned long)+0xcc>
c000799b:	83 ec 0c             	sub    esp,0xc
c000799e:	68 7c d7 01 c0       	push   0xc001d77c
c00079a3:	e8 ab 87 00 00       	call   c0010153 <KePanic(char const*)>
c00079a8:	83 c4 10             	add    esp,0x10
c00079ab:	89 f0                	mov    eax,esi
c00079ad:	e9 6b ff ff ff       	jmp    c000791d <Phys::allocateDMA(unsigned long)+0x37>
c00079b2:	c1 e5 0c             	shl    ebp,0xc
c00079b5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079bb:	eb 89                	jmp    c0007946 <Phys::allocateDMA(unsigned long)+0x60>

c00079bd <Phys::freeDMA(unsigned long, unsigned long)>:
c00079bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079c1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079cb:	c1 ea 0c             	shr    edx,0xc
c00079ce:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079d3:	29 15 64 0d 02 c0    	sub    DWORD PTR ds:0xc0020d64,edx
c00079d9:	c1 e8 0c             	shr    eax,0xc
c00079dc:	85 d2                	test   edx,edx
c00079de:	74 0f                	je     c00079ef <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079e0:	05 6c 0d 02 c0       	add    eax,0xc0020d6c
c00079e5:	01 c2                	add    edx,eax
c00079e7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079ea:	40                   	inc    eax
c00079eb:	39 d0                	cmp    eax,edx
c00079ed:	75 f8                	jne    c00079e7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079ef:	c3                   	ret    

c00079f0 <Phys::setPageState(unsigned long, bool)>:
c00079f0:	56                   	push   esi
c00079f1:	ba 01 00 00 00       	mov    edx,0x1
c00079f6:	53                   	push   ebx
c00079f7:	8b 35 7c f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f97c
c00079fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a05:	89 c8                	mov    eax,ecx
c0007a07:	83 e1 07             	and    ecx,0x7
c0007a0a:	c1 e8 03             	shr    eax,0x3
c0007a0d:	d3 e3                	shl    ebx,cl
c0007a0f:	01 c6                	add    esi,eax
c0007a11:	d3 e2                	shl    edx,cl
c0007a13:	f7 d2                	not    edx
c0007a15:	20 16                	and    BYTE PTR [esi],dl
c0007a17:	03 05 7c f9 01 c0    	add    eax,DWORD PTR ds:0xc001f97c
c0007a1d:	08 18                	or     BYTE PTR [eax],bl
c0007a1f:	5b                   	pop    ebx
c0007a20:	5e                   	pop    esi
c0007a21:	c3                   	ret    

c0007a22 <Phys::getPageState(unsigned long)>:
c0007a22:	53                   	push   ebx
c0007a23:	8b 15 7c f9 01 c0    	mov    edx,DWORD PTR ds:0xc001f97c
c0007a29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a2d:	31 db                	xor    ebx,ebx
c0007a2f:	89 c8                	mov    eax,ecx
c0007a31:	83 e1 07             	and    ecx,0x7
c0007a34:	c1 e8 03             	shr    eax,0x3
c0007a37:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a3a:	89 d8                	mov    eax,ebx
c0007a3c:	5b                   	pop    ebx
c0007a3d:	d3 f8                	sar    eax,cl
c0007a3f:	83 e0 01             	and    eax,0x1
c0007a42:	c3                   	ret    

c0007a43 <Phys::freePage(unsigned long)>:
c0007a43:	53                   	push   ebx
c0007a44:	83 ec 08             	sub    esp,0x8
c0007a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a4b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a51:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a57:	76 3a                	jbe    c0007a93 <Phys::freePage(unsigned long)+0x50>
c0007a59:	c1 e8 0c             	shr    eax,0xc
c0007a5c:	50                   	push   eax
c0007a5d:	89 c3                	mov    ebx,eax
c0007a5f:	e8 be ff ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007a64:	5a                   	pop    edx
c0007a65:	84 c0                	test   al,al
c0007a67:	74 19                	je     c0007a82 <Phys::freePage(unsigned long)+0x3f>
c0007a69:	83 ec 08             	sub    esp,0x8
c0007a6c:	ff 0d 64 0d 02 c0    	dec    DWORD PTR ds:0xc0020d64
c0007a72:	6a 00                	push   0x0
c0007a74:	53                   	push   ebx
c0007a75:	e8 76 ff ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	83 c4 08             	add    esp,0x8
c0007a80:	5b                   	pop    ebx
c0007a81:	c3                   	ret    
c0007a82:	c7 44 24 10 21 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d821
c0007a8a:	83 c4 08             	add    esp,0x8
c0007a8d:	5b                   	pop    ebx
c0007a8e:	e9 c0 86 00 00       	jmp    c0010153 <KePanic(char const*)>
c0007a93:	68 00 10 00 00       	push   0x1000
c0007a98:	50                   	push   eax
c0007a99:	e8 1f ff ff ff       	call   c00079bd <Phys::freeDMA(unsigned long, unsigned long)>
c0007a9e:	59                   	pop    ecx
c0007a9f:	5b                   	pop    ebx
c0007aa0:	83 c4 08             	add    esp,0x8
c0007aa3:	5b                   	pop    ebx
c0007aa4:	c3                   	ret    

c0007aa5 <Phys::allocatePage()>:
c0007aa5:	56                   	push   esi
c0007aa6:	53                   	push   ebx
c0007aa7:	83 ec 14             	sub    esp,0x14
c0007aaa:	8b 35 58 0d 02 c0    	mov    esi,DWORD PTR ds:0xc0020d58
c0007ab0:	89 f3                	mov    ebx,esi
c0007ab2:	eb 0a                	jmp    c0007abe <Phys::allocatePage()+0x19>
c0007ab4:	89 1d 58 0d 02 c0    	mov    DWORD PTR ds:0xc0020d58,ebx
c0007aba:	39 de                	cmp    esi,ebx
c0007abc:	74 24                	je     c0007ae2 <Phys::allocatePage()+0x3d>
c0007abe:	53                   	push   ebx
c0007abf:	e8 5e ff ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007ac4:	5a                   	pop    edx
c0007ac5:	84 c0                	test   al,al
c0007ac7:	74 5f                	je     c0007b28 <Phys::allocatePage()+0x83>
c0007ac9:	43                   	inc    ebx
c0007aca:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ad0:	75 e2                	jne    c0007ab4 <Phys::allocatePage()+0xf>
c0007ad2:	31 db                	xor    ebx,ebx
c0007ad4:	c7 05 58 0d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020d58,0x0
c0007ade:	39 de                	cmp    esi,ebx
c0007ae0:	75 dc                	jne    c0007abe <Phys::allocatePage()+0x19>
c0007ae2:	83 ec 0c             	sub    esp,0xc
c0007ae5:	80 35 7c 0d 02 c0 01 	xor    BYTE PTR ds:0xc0020d7c,0x1
c0007aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007af1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007af4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007afa:	50                   	push   eax
c0007afb:	e8 08 27 00 00       	call   c000a208 <VAS::scanForEviction()>
c0007b00:	83 c4 10             	add    esp,0x10
c0007b03:	85 c0                	test   eax,eax
c0007b05:	75 3f                	jne    c0007b46 <Phys::allocatePage()+0xa1>
c0007b07:	83 ec 0c             	sub    esp,0xc
c0007b0a:	68 a4 d7 01 c0       	push   0xc001d7a4
c0007b0f:	e8 3f 86 00 00       	call   c0010153 <KePanic(char const*)>
c0007b14:	83 c4 10             	add    esp,0x10
c0007b17:	8b 1d 58 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d58
c0007b1d:	53                   	push   ebx
c0007b1e:	e8 ff fe ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007b23:	5a                   	pop    edx
c0007b24:	84 c0                	test   al,al
c0007b26:	75 a1                	jne    c0007ac9 <Phys::allocatePage()+0x24>
c0007b28:	6a 01                	push   0x1
c0007b2a:	53                   	push   ebx
c0007b2b:	e8 c0 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007b30:	a1 58 0d 02 c0       	mov    eax,ds:0xc0020d58
c0007b35:	5a                   	pop    edx
c0007b36:	ff 05 64 0d 02 c0    	inc    DWORD PTR ds:0xc0020d64
c0007b3c:	c1 e0 0c             	shl    eax,0xc
c0007b3f:	59                   	pop    ecx
c0007b40:	83 c4 14             	add    esp,0x14
c0007b43:	5b                   	pop    ebx
c0007b44:	5e                   	pop    esi
c0007b45:	c3                   	ret    
c0007b46:	83 ec 08             	sub    esp,0x8
c0007b49:	89 c2                	mov    edx,eax
c0007b4b:	6a 01                	push   0x1
c0007b4d:	c1 ea 0c             	shr    edx,0xc
c0007b50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b54:	52                   	push   edx
c0007b55:	e8 96 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b61:	eb dd                	jmp    c0007b40 <Phys::allocatePage()+0x9b>

c0007b63 <Phys::allocateContiguousPages(int)>:
c0007b63:	57                   	push   edi
c0007b64:	56                   	push   esi
c0007b65:	53                   	push   ebx
c0007b66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b6a:	fa                   	cli    
c0007b6b:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0007b71:	31 db                	xor    ebx,ebx
c0007b73:	85 db                	test   ebx,ebx
c0007b75:	75 11                	jne    c0007b88 <Phys::allocateContiguousPages(int)+0x25>
c0007b77:	e8 29 ff ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0007b7c:	83 fe 01             	cmp    esi,0x1
c0007b7f:	89 c7                	mov    edi,eax
c0007b81:	74 21                	je     c0007ba4 <Phys::allocateContiguousPages(int)+0x41>
c0007b83:	bb 01 00 00 00       	mov    ebx,0x1
c0007b88:	e8 18 ff ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0007b8d:	89 da                	mov    edx,ebx
c0007b8f:	c1 e2 0c             	shl    edx,0xc
c0007b92:	01 fa                	add    edx,edi
c0007b94:	39 c2                	cmp    edx,eax
c0007b96:	74 20                	je     c0007bb8 <Phys::allocateContiguousPages(int)+0x55>
c0007b98:	bb 01 00 00 00       	mov    ebx,0x1
c0007b9d:	89 c7                	mov    edi,eax
c0007b9f:	83 fe 01             	cmp    esi,0x1
c0007ba2:	75 e4                	jne    c0007b88 <Phys::allocateContiguousPages(int)+0x25>
c0007ba4:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0007ba9:	48                   	dec    eax
c0007baa:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0007baf:	75 01                	jne    c0007bb2 <Phys::allocateContiguousPages(int)+0x4f>
c0007bb1:	fb                   	sti    
c0007bb2:	89 f8                	mov    eax,edi
c0007bb4:	5b                   	pop    ebx
c0007bb5:	5e                   	pop    esi
c0007bb6:	5f                   	pop    edi
c0007bb7:	c3                   	ret    
c0007bb8:	43                   	inc    ebx
c0007bb9:	39 f3                	cmp    ebx,esi
c0007bbb:	75 b6                	jne    c0007b73 <Phys::allocateContiguousPages(int)+0x10>
c0007bbd:	eb e5                	jmp    c0007ba4 <Phys::allocateContiguousPages(int)+0x41>

c0007bbf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007bbf:	56                   	push   esi
c0007bc0:	53                   	push   ebx
c0007bc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bc5:	39 1d 5c 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d5c,ebx
c0007bcb:	73 06                	jae    c0007bd3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bcd:	89 1d 5c 0d 02 c0    	mov    DWORD PTR ds:0xc0020d5c,ebx
c0007bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bd7:	c1 eb 0c             	shr    ebx,0xc
c0007bda:	c1 e8 0c             	shr    eax,0xc
c0007bdd:	39 d8                	cmp    eax,ebx
c0007bdf:	73 13                	jae    c0007bf4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007be1:	6a 00                	push   0x0
c0007be3:	8d 70 01             	lea    esi,[eax+0x1]
c0007be6:	50                   	push   eax
c0007be7:	e8 04 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007bec:	5a                   	pop    edx
c0007bed:	89 f0                	mov    eax,esi
c0007bef:	59                   	pop    ecx
c0007bf0:	39 f3                	cmp    ebx,esi
c0007bf2:	75 ed                	jne    c0007be1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007bf4:	5b                   	pop    ebx
c0007bf5:	5e                   	pop    esi
c0007bf6:	c3                   	ret    

c0007bf7 <Phys::physicalMemorySetup(unsigned int)>:
c0007bf7:	55                   	push   ebp
c0007bf8:	57                   	push   edi
c0007bf9:	56                   	push   esi
c0007bfa:	53                   	push   ebx
c0007bfb:	31 db                	xor    ebx,ebx
c0007bfd:	83 ec 40             	sub    esp,0x40
c0007c00:	6a 10                	push   0x10
c0007c02:	6a 00                	push   0x0
c0007c04:	68 6c 0d 02 c0       	push   0xc0020d6c
c0007c09:	e8 c2 88 ff ff       	call   c00004d0 <memset>
c0007c0e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c12:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c17:	05 00 10 00 00       	add    eax,0x1000
c0007c1c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c20:	5a                   	pop    edx
c0007c21:	59                   	pop    ecx
c0007c22:	50                   	push   eax
c0007c23:	68 37 d8 01 c0       	push   0xc001d837
c0007c28:	e8 bb 28 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007c2d:	83 c4 10             	add    esp,0x10
c0007c30:	83 ec 08             	sub    esp,0x8
c0007c33:	6a 01                	push   0x1
c0007c35:	53                   	push   ebx
c0007c36:	43                   	inc    ebx
c0007c37:	e8 b4 fd ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007c3c:	83 c4 10             	add    esp,0x10
c0007c3f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c45:	75 e9                	jne    c0007c30 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c47:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c4d:	66 85 c0             	test   ax,ax
c0007c50:	0f 84 97 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c56:	89 c7                	mov    edi,eax
c0007c58:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c60:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c66:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c6b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c6f:	eb 15                	jmp    c0007c86 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c71:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c75:	83 c3 18             	add    ebx,0x18
c0007c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c7c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c80:	0f 84 77 01 00 00    	je     c0007dfd <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c86:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c8c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c97:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c99:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c9c:	01 f0                	add    eax,esi
c0007c9e:	55                   	push   ebp
c0007c9f:	11 fa                	adc    edx,edi
c0007ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ca5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007cad:	50                   	push   eax
c0007cae:	56                   	push   esi
c0007caf:	68 d4 d7 01 c0       	push   0xc001d7d4
c0007cb4:	e8 2f 28 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	09 f8                	or     eax,edi
c0007cc2:	0f 85 35 01 00 00    	jne    c0007dfd <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cc8:	4d                   	dec    ebp
c0007cc9:	75 a6                	jne    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ccb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007ccf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cd4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cd8:	39 f2                	cmp    edx,esi
c0007cda:	89 c1                	mov    ecx,eax
c0007cdc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007ce4:	19 f9                	sbb    ecx,edi
c0007ce6:	0f 82 a7 00 00 00    	jb     c0007d93 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007cf0:	89 c1                	mov    ecx,eax
c0007cf2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007cf6:	0f 83 97 00 00 00    	jae    c0007d93 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cfc:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d01:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d05:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d09:	39 fa                	cmp    edx,edi
c0007d0b:	19 e8                	sbb    eax,ebp
c0007d0d:	0f 82 9a 01 00 00    	jb     c0007ead <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d13:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d17:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d1b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d21:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d26:	83 d5 ff             	adc    ebp,0xffffffff
c0007d29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d2d:	31 c0                	xor    eax,eax
c0007d2f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d33:	39 fa                	cmp    edx,edi
c0007d35:	89 c1                	mov    ecx,eax
c0007d37:	19 e9                	sbb    ecx,ebp
c0007d39:	0f 83 32 ff ff ff    	jae    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d3f:	be 00 00 08 00       	mov    esi,0x80000
c0007d44:	51                   	push   ecx
c0007d45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d49:	57                   	push   edi
c0007d4a:	56                   	push   esi
c0007d4b:	68 f8 d7 01 c0       	push   0xc001d7f8
c0007d50:	e8 93 27 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007d55:	5d                   	pop    ebp
c0007d56:	58                   	pop    eax
c0007d57:	57                   	push   edi
c0007d58:	56                   	push   esi
c0007d59:	e8 61 fe ff ff       	call   c0007bbf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d66:	83 c4 0c             	add    esp,0xc
c0007d69:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d6d:	03 05 68 0d 02 c0    	add    eax,DWORD PTR ds:0xc0020d68
c0007d73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d7a:	a3 68 0d 02 c0       	mov    ds:0xc0020d68,eax
c0007d7f:	52                   	push   edx
c0007d80:	50                   	push   eax
c0007d81:	68 5d d8 01 c0       	push   0xc001d85d
c0007d86:	e8 5d 27 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007d8b:	83 c4 10             	add    esp,0x10
c0007d8e:	e9 de fe ff ff       	jmp    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d93:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d9f:	39 ea                	cmp    edx,ebp
c0007da1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007da5:	0f 82 c6 fe ff ff    	jb     c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dab:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007db0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007db4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007db8:	0f 83 b3 fe ff ff    	jae    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dbe:	39 ee                	cmp    esi,ebp
c0007dc0:	89 f8                	mov    eax,edi
c0007dc2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007dc6:	0f 83 78 ff ff ff    	jae    c0007d44 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dd4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dd8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007ddc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007de0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007de4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007de8:	e9 57 ff ff ff       	jmp    c0007d44 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ded:	83 ec 0c             	sub    esp,0xc
c0007df0:	68 4f d8 01 c0       	push   0xc001d84f
c0007df5:	e8 59 83 00 00       	call   c0010153 <KePanic(char const*)>
c0007dfa:	83 c4 10             	add    esp,0x10
c0007dfd:	83 ec 08             	sub    esp,0x8
c0007e00:	bb 60 00 00 00       	mov    ebx,0x60
c0007e05:	6a 00                	push   0x0
c0007e07:	6a 06                	push   0x6
c0007e09:	e8 e2 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e0e:	58                   	pop    eax
c0007e0f:	5a                   	pop    edx
c0007e10:	6a 00                	push   0x0
c0007e12:	6a 07                	push   0x7
c0007e14:	e8 d7 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e19:	83 05 68 0d 02 c0 02 	add    DWORD PTR ds:0xc0020d68,0x2
c0007e20:	83 c4 10             	add    esp,0x10
c0007e23:	83 ec 08             	sub    esp,0x8
c0007e26:	6a 00                	push   0x0
c0007e28:	53                   	push   ebx
c0007e29:	43                   	inc    ebx
c0007e2a:	e8 c1 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e2f:	83 c4 10             	add    esp,0x10
c0007e32:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e38:	75 e9                	jne    c0007e23 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e3a:	a1 68 0d 02 c0       	mov    eax,ds:0xc0020d68
c0007e3f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e44:	83 c0 20             	add    eax,0x20
c0007e47:	a3 68 0d 02 c0       	mov    ds:0xc0020d68,eax
c0007e4c:	eb 22                	jmp    c0007e70 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e4e:	83 ec 08             	sub    esp,0x8
c0007e51:	6a 00                	push   0x0
c0007e53:	53                   	push   ebx
c0007e54:	43                   	inc    ebx
c0007e55:	e8 96 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e5a:	a1 68 0d 02 c0       	mov    eax,ds:0xc0020d68
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	40                   	inc    eax
c0007e63:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e69:	a3 68 0d 02 c0       	mov    ds:0xc0020d68,eax
c0007e6e:	74 07                	je     c0007e77 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e70:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e75:	7e d7                	jle    c0007e4e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e77:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e7c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e81:	7f 22                	jg     c0007ea5 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e83:	83 ec 08             	sub    esp,0x8
c0007e86:	6a 00                	push   0x0
c0007e88:	53                   	push   ebx
c0007e89:	43                   	inc    ebx
c0007e8a:	e8 61 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e8f:	a1 68 0d 02 c0       	mov    eax,ds:0xc0020d68
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	40                   	inc    eax
c0007e98:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e9e:	a3 68 0d 02 c0       	mov    ds:0xc0020d68,eax
c0007ea3:	75 d7                	jne    c0007e7c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007ea5:	83 c4 3c             	add    esp,0x3c
c0007ea8:	5b                   	pop    ebx
c0007ea9:	5e                   	pop    esi
c0007eaa:	5f                   	pop    edi
c0007eab:	5d                   	pop    ebp
c0007eac:	c3                   	ret    
c0007ead:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007eb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ebd:	e9 51 fe ff ff       	jmp    c0007d13 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007ec2 <Pipe::isAtty()>:
c0007ec2:	31 c0                	xor    eax,eax
c0007ec4:	c3                   	ret    
c0007ec5:	90                   	nop

c0007ec6 <Pipe::~Pipe()>:
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	ba bc d8 01 c0       	mov    edx,0xc001d8bc
c0007ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed2:	89 10                	mov    DWORD PTR [eax],edx
c0007ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	50                   	push   eax
c0007edc:	e8 53 11 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	90                   	nop
c0007ee5:	83 c4 0c             	add    esp,0xc
c0007ee8:	c3                   	ret    
c0007ee9:	90                   	nop

c0007eea <Pipe::~Pipe()>:
c0007eea:	83 ec 0c             	sub    esp,0xc
c0007eed:	83 ec 0c             	sub    esp,0xc
c0007ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef4:	e8 cd ff ff ff       	call   c0007ec6 <Pipe::~Pipe()>
c0007ef9:	83 c4 10             	add    esp,0x10
c0007efc:	83 ec 08             	sub    esp,0x8
c0007eff:	6a 20                	push   0x20
c0007f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f05:	e8 e8 24 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0007f0a:	83 c4 10             	add    esp,0x10
c0007f0d:	83 c4 0c             	add    esp,0xc
c0007f10:	c3                   	ret    
c0007f11:	90                   	nop

c0007f12 <Pipe::write(unsigned long long, void*, int*)>:
c0007f12:	55                   	push   ebp
c0007f13:	57                   	push   edi
c0007f14:	56                   	push   esi
c0007f15:	53                   	push   ebx
c0007f16:	83 ec 1c             	sub    esp,0x1c
c0007f19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f21:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f24:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f2f:	89 d8                	mov    eax,ebx
c0007f31:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f34:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f38:	89 d6                	mov    esi,edx
c0007f3a:	89 d7                	mov    edi,edx
c0007f3c:	c1 ff 1f             	sar    edi,0x1f
c0007f3f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f42:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f46:	c1 f8 1f             	sar    eax,0x1f
c0007f49:	39 f3                	cmp    ebx,esi
c0007f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f53:	19 f8                	sbb    eax,edi
c0007f55:	b8 01 00 00 00       	mov    eax,0x1
c0007f5a:	72 6e                	jb     c0007fca <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f5f:	01 d0                	add    eax,edx
c0007f61:	99                   	cdq    
c0007f62:	f7 fb                	idiv   ebx
c0007f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f68:	29 d3                	sub    ebx,edx
c0007f6a:	89 d7                	mov    edi,edx
c0007f6c:	89 de                	mov    esi,ebx
c0007f6e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f71:	c1 fb 1f             	sar    ebx,0x1f
c0007f74:	39 f2                	cmp    edx,esi
c0007f76:	19 d8                	sbb    eax,ebx
c0007f78:	b8 00 00 00 00       	mov    eax,0x0
c0007f7d:	72 04                	jb     c0007f83 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f7f:	89 d0                	mov    eax,edx
c0007f81:	29 f0                	sub    eax,esi
c0007f83:	89 d3                	mov    ebx,edx
c0007f85:	29 c3                	sub    ebx,eax
c0007f87:	74 0b                	je     c0007f94 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f89:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f8c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f90:	89 d9                	mov    ecx,ebx
c0007f92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f94:	85 c0                	test   eax,eax
c0007f96:	74 0d                	je     c0007fa5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f98:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f9c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f9f:	89 de                	mov    esi,ebx
c0007fa1:	89 c1                	mov    ecx,eax
c0007fa3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fa5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007fa8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007fad:	75 10                	jne    c0007fbf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	68 79 d8 01 c0       	push   0xc001d879
c0007fb7:	e8 97 81 00 00       	call   c0010153 <KePanic(char const*)>
c0007fbc:	83 c4 10             	add    esp,0x10
c0007fbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fc3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fc6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fc8:	31 c0                	xor    eax,eax
c0007fca:	83 c4 1c             	add    esp,0x1c
c0007fcd:	5b                   	pop    ebx
c0007fce:	5e                   	pop    esi
c0007fcf:	5f                   	pop    edi
c0007fd0:	5d                   	pop    ebp
c0007fd1:	c3                   	ret    

c0007fd2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fd2:	55                   	push   ebp
c0007fd3:	57                   	push   edi
c0007fd4:	56                   	push   esi
c0007fd5:	53                   	push   ebx
c0007fd6:	83 ec 1c             	sub    esp,0x1c
c0007fd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fdd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fe1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fe5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fe8:	89 c8                	mov    eax,ecx
c0007fea:	99                   	cdq    
c0007feb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fef:	74 24                	je     c0008015 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007ff1:	39 f9                	cmp    ecx,edi
c0007ff3:	89 d1                	mov    ecx,edx
c0007ff5:	19 f1                	sbb    ecx,esi
c0007ff7:	73 1c                	jae    c0008015 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007ff9:	fa                   	cli    
c0007ffa:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0008000:	e8 07 b9 00 00       	call   c001390c <schedule()>
c0008005:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000800a:	48                   	dec    eax
c000800b:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0008010:	75 d3                	jne    c0007fe5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008012:	fb                   	sti    
c0008013:	eb d0                	jmp    c0007fe5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008015:	39 f8                	cmp    eax,edi
c0008017:	89 d1                	mov    ecx,edx
c0008019:	89 3c 24             	mov    DWORD PTR [esp],edi
c000801c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008020:	19 f1                	sbb    ecx,esi
c0008022:	73 07                	jae    c000802b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008024:	89 04 24             	mov    DWORD PTR [esp],eax
c0008027:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000802b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000802e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008031:	29 f7                	sub    edi,esi
c0008033:	89 f8                	mov    eax,edi
c0008035:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008039:	99                   	cdq    
c000803a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000803d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008041:	19 d0                	sbb    eax,edx
c0008043:	73 07                	jae    c000804c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008045:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000804c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000804f:	89 ea                	mov    edx,ebp
c0008051:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008055:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000805a:	74 0d                	je     c0008069 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000805c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000805f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008063:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008069:	85 d2                	test   edx,edx
c000806b:	74 11                	je     c000807e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000806d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008071:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008074:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008078:	89 d1                	mov    ecx,edx
c000807a:	89 c7                	mov    edi,eax
c000807c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000807e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008081:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008084:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008087:	99                   	cdq    
c0008088:	89 f7                	mov    edi,esi
c000808a:	03 04 24             	add    eax,DWORD PTR [esp]
c000808d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008091:	c1 ff 1f             	sar    edi,0x1f
c0008094:	57                   	push   edi
c0008095:	56                   	push   esi
c0008096:	52                   	push   edx
c0008097:	50                   	push   eax
c0008098:	e8 73 42 01 00       	call   c001c310 <__umoddi3>
c000809d:	83 c4 10             	add    esp,0x10
c00080a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080a3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080a8:	75 10                	jne    c00080ba <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00080aa:	83 ec 0c             	sub    esp,0xc
c00080ad:	68 96 d8 01 c0       	push   0xc001d896
c00080b2:	e8 9c 80 00 00       	call   c0010153 <KePanic(char const*)>
c00080b7:	83 c4 10             	add    esp,0x10
c00080ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080c1:	89 10                	mov    DWORD PTR [eax],edx
c00080c3:	83 c4 1c             	add    esp,0x1c
c00080c6:	31 c0                	xor    eax,eax
c00080c8:	5b                   	pop    ebx
c00080c9:	5e                   	pop    esi
c00080ca:	5f                   	pop    edi
c00080cb:	5d                   	pop    ebp
c00080cc:	c3                   	ret    
c00080cd:	90                   	nop

c00080ce <Pipe::Pipe(int)>:
c00080ce:	83 ec 0c             	sub    esp,0xc
c00080d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080d5:	83 ec 08             	sub    esp,0x8
c00080d8:	6a 00                	push   0x0
c00080da:	50                   	push   eax
c00080db:	e8 72 0d 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c00080e0:	83 c4 10             	add    esp,0x10
c00080e3:	ba bc d8 01 c0       	mov    edx,0xc001d8bc
c00080e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ec:	89 10                	mov    DWORD PTR [eax],edx
c00080ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080fd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008108:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000810f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	50                   	push   eax
c0008117:	e8 9d f6 ff ff       	call   c00077b9 <malloc>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	89 c2                	mov    edx,eax
c0008121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008125:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000812c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008130:	90                   	nop
c0008131:	83 c4 0c             	add    esp,0xc
c0008134:	c3                   	ret    
c0008135:	90                   	nop

c0008136 <VgaText::isAtty()>:
c0008136:	b0 01                	mov    al,0x1
c0008138:	c3                   	ret    
c0008139:	90                   	nop

c000813a <VgaText::~VgaText()>:
c000813a:	83 ec 0c             	sub    esp,0xc
c000813d:	ba 50 d9 01 c0       	mov    edx,0xc001d950
c0008142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008146:	89 10                	mov    DWORD PTR [eax],edx
c0008148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	50                   	push   eax
c0008150:	e8 df 0e 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	90                   	nop
c0008159:	83 c4 0c             	add    esp,0xc
c000815c:	c3                   	ret    
c000815d:	90                   	nop

c000815e <VgaText::~VgaText()>:
c000815e:	83 ec 0c             	sub    esp,0xc
c0008161:	83 ec 0c             	sub    esp,0xc
c0008164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008168:	e8 cd ff ff ff       	call   c000813a <VgaText::~VgaText()>
c000816d:	83 c4 10             	add    esp,0x10
c0008170:	83 ec 08             	sub    esp,0x8
c0008173:	68 34 01 00 00       	push   0x134
c0008178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000817c:	e8 71 22 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0008181:	83 c4 10             	add    esp,0x10
c0008184:	83 c4 0c             	add    esp,0xc
c0008187:	c3                   	ret    

c0008188 <VgaText::read(unsigned long long, void*, int*)>:
c0008188:	83 ec 10             	sub    esp,0x10
c000818b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000818f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	e8 ac 45 00 00       	call   c000c748 <readKeyboard(VgaText*, char*, unsigned long)>
c000819c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081a0:	89 02                	mov    DWORD PTR [edx],eax
c00081a2:	31 c0                	xor    eax,eax
c00081a4:	83 c4 1c             	add    esp,0x1c
c00081a7:	c3                   	ret    

c00081a8 <setTerminalScrollLock(bool)>:
c00081a8:	c3                   	ret    

c00081a9 <doTerminalCycle()>:
c00081a9:	c3                   	ret    

c00081aa <addToTerminalCycle(VgaText*)>:
c00081aa:	c3                   	ret    

c00081ab <scrollTerminalScrollLock(int)>:
c00081ab:	c3                   	ret    

c00081ac <VgaText::updateTitle()>:
c00081ac:	c3                   	ret    
c00081ad:	90                   	nop

c00081ae <VgaText::load()>:
c00081ae:	c3                   	ret    
c00081af:	90                   	nop

c00081b0 <VgaText::updateCursor()>:
c00081b0:	83 ec 14             	sub    esp,0x14
c00081b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081b7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081ba:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081bd:	e8 26 e3 00 00       	call   c00164e8 <HalConsoleCursorUpdate(int, int)>
c00081c2:	83 c4 1c             	add    esp,0x1c
c00081c5:	c3                   	ret    

c00081c6 <VgaText::doANSI_SGR(int)>:
c00081c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081ce:	85 d2                	test   edx,edx
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x17>
c00081d2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081d5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081db:	eb 59                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 07             	cmp    edx,0x7
c00081e0:	75 0b                	jne    c00081ed <VgaText::doANSI_SGR(int)+0x27>
c00081e2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081e5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081e8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081eb:	eb 49                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c00081ed:	83 fa 1b             	cmp    edx,0x1b
c00081f0:	74 e0                	je     c00081d2 <VgaText::doANSI_SGR(int)+0xc>
c00081f2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081f5:	83 f9 07             	cmp    ecx,0x7
c00081f8:	77 09                	ja     c0008203 <VgaText::doANSI_SGR(int)+0x3d>
c00081fa:	8b 14 8d a0 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0660]
c0008201:	eb 20                	jmp    c0008223 <VgaText::doANSI_SGR(int)+0x5d>
c0008203:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008206:	83 f9 07             	cmp    ecx,0x7
c0008209:	77 09                	ja     c0008214 <VgaText::doANSI_SGR(int)+0x4e>
c000820b:	8b 14 8d a0 f9 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0660]
c0008212:	eb 22                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c0008214:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008217:	83 f9 07             	cmp    ecx,0x7
c000821a:	77 0b                	ja     c0008227 <VgaText::doANSI_SGR(int)+0x61>
c000821c:	8b 14 95 58 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07a8]
c0008223:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008226:	c3                   	ret    
c0008227:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000822a:	83 f9 07             	cmp    ecx,0x7
c000822d:	77 0a                	ja     c0008239 <VgaText::doANSI_SGR(int)+0x73>
c000822f:	8b 14 95 30 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe07d0]
c0008236:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008239:	c3                   	ret    

c000823a <VgaText::setDefaultBgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008245:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultFgColour(VgaColour)>:
c000824a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000824e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008252:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008255:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000825a:	53                   	push   ebx
c000825b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000825f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008263:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008267:	51                   	push   ecx
c0008268:	e8 cd ff ff ff       	call   c000823a <VgaText::setDefaultBgColour(VgaColour)>
c000826d:	58                   	pop    eax
c000826e:	5a                   	pop    edx
c000826f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008277:	5b                   	pop    ebx
c0008278:	eb d0                	jmp    c000824a <VgaText::setDefaultFgColour(VgaColour)>

c000827a <VgaText::setTitleTextColour(VgaColour)>:
c000827a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008282:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008285:	c3                   	ret    

c0008286 <VgaText::setTitleColour(VgaColour)>:
c0008286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000828a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000828e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008291:	c3                   	ret    

c0008292 <VgaText::setTitle(char*)>:
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008294:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008298:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000829d:	83 e0 0f             	and    eax,0xf
c00082a0:	c1 e2 04             	shl    edx,0x4
c00082a3:	09 d0                	or     eax,edx
c00082a5:	c3                   	ret    

c00082a6 <VgaText::scrollScreen()>:
c00082a6:	55                   	push   ebp
c00082a7:	b9 01 00 00 00       	mov    ecx,0x1
c00082ac:	57                   	push   edi
c00082ad:	56                   	push   esi
c00082ae:	53                   	push   ebx
c00082af:	83 ec 0c             	sub    esp,0xc
c00082b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082bc:	31 ff                	xor    edi,edi
c00082be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082c1:	83 f9 18             	cmp    ecx,0x18
c00082c4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082c7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082ce:	75 27                	jne    c00082f7 <VgaText::scrollScreen()+0x51>
c00082d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082d3:	01 f5                	add    ebp,esi
c00082d5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082db:	74 16                	je     c00082f3 <VgaText::scrollScreen()+0x4d>
c00082dd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082e1:	50                   	push   eax
c00082e2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082e6:	50                   	push   eax
c00082e7:	e8 a8 ff ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c00082ec:	5a                   	pop    edx
c00082ed:	5a                   	pop    edx
c00082ee:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082f1:	eb 04                	jmp    c00082f7 <VgaText::scrollScreen()+0x51>
c00082f3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082f7:	47                   	inc    edi
c00082f8:	46                   	inc    esi
c00082f9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ff:	75 bd                	jne    c00082be <VgaText::scrollScreen()+0x18>
c0008301:	41                   	inc    ecx
c0008302:	83 f9 19             	cmp    ecx,0x19
c0008305:	75 af                	jne    c00082b6 <VgaText::scrollScreen()+0x10>
c0008307:	39 1d 84 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d84,ebx
c000830d:	75 1f                	jne    c000832e <VgaText::scrollScreen()+0x88>
c000830f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008313:	74 05                	je     c000831a <VgaText::scrollScreen()+0x74>
c0008315:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008318:	eb 14                	jmp    c000832e <VgaText::scrollScreen()+0x88>
c000831a:	50                   	push   eax
c000831b:	50                   	push   eax
c000831c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008320:	50                   	push   eax
c0008321:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008325:	50                   	push   eax
c0008326:	e8 49 e0 00 00       	call   c0016374 <HalConsoleScroll(int, int)>
c000832b:	83 c4 10             	add    esp,0x10
c000832e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008332:	83 c4 0c             	add    esp,0xc
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	5f                   	pop    edi
c0008338:	5d                   	pop    ebp
c0008339:	e9 72 fe ff ff       	jmp    c00081b0 <VgaText::updateCursor()>

c000833e <VgaText::combineCharAndColour(char, unsigned char)>:
c000833e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008343:	c1 e0 08             	shl    eax,0x8
c0008346:	89 c2                	mov    edx,eax
c0008348:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000834d:	09 d0                	or     eax,edx
c000834f:	c3                   	ret    

c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008350:	55                   	push   ebp
c0008351:	57                   	push   edi
c0008352:	56                   	push   esi
c0008353:	53                   	push   ebx
c0008354:	83 ec 1c             	sub    esp,0x1c
c0008357:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000835b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000835f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008367:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000836b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000836f:	0f b6 c3             	movzx  eax,bl
c0008372:	50                   	push   eax
c0008373:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008378:	50                   	push   eax
c0008379:	e8 16 ff ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c000837e:	5a                   	pop    edx
c000837f:	0f b6 c0             	movzx  eax,al
c0008382:	59                   	pop    ecx
c0008383:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008388:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000838c:	50                   	push   eax
c000838d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008391:	e8 a8 ff ff ff       	call   c000833e <VgaText::combineCharAndColour(char, unsigned char)>
c0008396:	5a                   	pop    edx
c0008397:	66 6b d7 50          	imul   dx,di,0x50
c000839b:	59                   	pop    ecx
c000839c:	01 f2                	add    edx,esi
c000839e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083a1:	0f b7 d2             	movzx  edx,dx
c00083a4:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00083a8:	39 2d 84 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d84,ebp
c00083ae:	75 28                	jne    c00083d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083b8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083bc:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083c0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083cc:	83 c4 1c             	add    esp,0x1c
c00083cf:	5b                   	pop    ebx
c00083d0:	5e                   	pop    esi
c00083d1:	5f                   	pop    edi
c00083d2:	5d                   	pop    ebp
c00083d3:	e9 a4 e0 00 00       	jmp    c001647c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083d8:	83 c4 1c             	add    esp,0x1c
c00083db:	5b                   	pop    ebx
c00083dc:	5e                   	pop    esi
c00083dd:	5f                   	pop    edi
c00083de:	5d                   	pop    ebp
c00083df:	c3                   	ret    

c00083e0 <VgaText::getCursorX()>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083e7:	c3                   	ret    

c00083e8 <VgaText::getCursorY()>:
c00083e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083ef:	c3                   	ret    

c00083f0 <VgaText::setCursor(int, int)>:
c00083f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083f8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008402:	e9 a9 fd ff ff       	jmp    c00081b0 <VgaText::updateCursor()>

c0008407 <setActiveTerminal(VgaText*)>:
c0008407:	53                   	push   ebx
c0008408:	83 ec 08             	sub    esp,0x8
c000840b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000840f:	85 db                	test   ebx,ebx
c0008411:	75 11                	jne    c0008424 <setActiveTerminal(VgaText*)+0x1d>
c0008413:	c7 44 24 10 d0 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8d0
c000841b:	83 c4 08             	add    esp,0x8
c000841e:	5b                   	pop    ebx
c000841f:	e9 2f 7d 00 00       	jmp    c0010153 <KePanic(char const*)>
c0008424:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c0008429:	85 c0                	test   eax,eax
c000842b:	74 0c                	je     c0008439 <setActiveTerminal(VgaText*)+0x32>
c000842d:	83 ec 0c             	sub    esp,0xc
c0008430:	50                   	push   eax
c0008431:	e8 7a fd ff ff       	call   c00081b0 <VgaText::updateCursor()>
c0008436:	83 c4 10             	add    esp,0x10
c0008439:	89 1d 84 0d 02 c0    	mov    DWORD PTR ds:0xc0020d84,ebx
c000843f:	50                   	push   eax
c0008440:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008443:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008446:	53                   	push   ebx
c0008447:	e8 a4 ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c000844c:	83 c4 18             	add    esp,0x18
c000844f:	5b                   	pop    ebx
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <VgaText::clearScreen()>:
c0008452:	57                   	push   edi
c0008453:	56                   	push   esi
c0008454:	31 f6                	xor    esi,esi
c0008456:	53                   	push   ebx
c0008457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000845b:	52                   	push   edx
c000845c:	6a 00                	push   0x0
c000845e:	6a 00                	push   0x0
c0008460:	53                   	push   ebx
c0008461:	e8 8a ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c0008466:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008473:	7e 20                	jle    c0008495 <VgaText::clearScreen()+0x43>
c0008475:	31 ff                	xor    edi,edi
c0008477:	50                   	push   eax
c0008478:	50                   	push   eax
c0008479:	56                   	push   esi
c000847a:	57                   	push   edi
c000847b:	47                   	inc    edi
c000847c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000847f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008482:	6a 20                	push   0x20
c0008484:	53                   	push   ebx
c0008485:	e8 c6 fe ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000848a:	83 c4 20             	add    esp,0x20
c000848d:	83 ff 50             	cmp    edi,0x50
c0008490:	75 e5                	jne    c0008477 <VgaText::clearScreen()+0x25>
c0008492:	46                   	inc    esi
c0008493:	eb db                	jmp    c0008470 <VgaText::clearScreen()+0x1e>
c0008495:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000849c:	5b                   	pop    ebx
c000849d:	5e                   	pop    esi
c000849e:	5f                   	pop    edi
c000849f:	c3                   	ret    

c00084a0 <VgaText::setCursorX(int)>:
c00084a0:	83 ec 10             	sub    esp,0x10
c00084a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ae:	50                   	push   eax
c00084af:	e8 3c ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00084b4:	83 c4 1c             	add    esp,0x1c
c00084b7:	c3                   	ret    

c00084b8 <VgaText::setCursorY(int)>:
c00084b8:	83 ec 10             	sub    esp,0x10
c00084bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084c3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084c6:	50                   	push   eax
c00084c7:	e8 24 ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00084cc:	83 c4 1c             	add    esp,0x1c
c00084cf:	c3                   	ret    

c00084d0 <VgaText::incrementCursor(bool)>:
c00084d0:	56                   	push   esi
c00084d1:	53                   	push   ebx
c00084d2:	51                   	push   ecx
c00084d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084de:	40                   	inc    eax
c00084df:	83 f8 50             	cmp    eax,0x50
c00084e2:	74 05                	je     c00084e9 <VgaText::incrementCursor(bool)+0x19>
c00084e4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084e7:	eb 24                	jmp    c000850d <VgaText::incrementCursor(bool)+0x3d>
c00084e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084f3:	8d 50 01             	lea    edx,[eax+0x1]
c00084f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084f9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084fc:	75 0f                	jne    c000850d <VgaText::incrementCursor(bool)+0x3d>
c00084fe:	83 ec 0c             	sub    esp,0xc
c0008501:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008504:	53                   	push   ebx
c0008505:	e8 9c fd ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c000850a:	83 c4 10             	add    esp,0x10
c000850d:	89 f0                	mov    eax,esi
c000850f:	84 c0                	test   al,al
c0008511:	74 0c                	je     c000851f <VgaText::incrementCursor(bool)+0x4f>
c0008513:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008517:	5a                   	pop    edx
c0008518:	5b                   	pop    ebx
c0008519:	5e                   	pop    esi
c000851a:	e9 91 fc ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c000851f:	58                   	pop    eax
c0008520:	5b                   	pop    ebx
c0008521:	5e                   	pop    esi
c0008522:	c3                   	ret    
c0008523:	90                   	nop

c0008524 <VgaText::decrementCursor(bool)>:
c0008524:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008528:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000852c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000852f:	85 c0                	test   eax,eax
c0008531:	74 04                	je     c0008537 <VgaText::decrementCursor(bool)+0x13>
c0008533:	48                   	dec    eax
c0008534:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008537:	84 c9                	test   cl,cl
c0008539:	74 09                	je     c0008544 <VgaText::decrementCursor(bool)+0x20>
c000853b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000853f:	e9 6c fc ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c0008544:	c3                   	ret    
c0008545:	90                   	nop

c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008546:	53                   	push   ebx
c0008547:	83 ec 08             	sub    esp,0x8
c000854a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000854e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000855a:	3c 07                	cmp    al,0x7
c000855c:	75 21                	jne    c000857f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000855e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008566:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000856e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008576:	83 c4 08             	add    esp,0x8
c0008579:	5b                   	pop    ebx
c000857a:	e9 c0 2d 00 00       	jmp    c000b33f <Krnl::beep(int, int, bool)>
c000857f:	3c 0d                	cmp    al,0xd
c0008581:	75 09                	jne    c000858c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	eb 2c                	jmp    c00085b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000858c:	3c 0a                	cmp    al,0xa
c000858e:	75 31                	jne    c00085c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008590:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000859a:	8d 50 01             	lea    edx,[eax+0x1]
c000859d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085a0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a3:	75 0f                	jne    c00085b4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085a5:	83 ec 0c             	sub    esp,0xc
c00085a8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085ab:	53                   	push   ebx
c00085ac:	e8 f5 fc ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c00085b1:	83 c4 10             	add    esp,0x10
c00085b4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085b8:	83 c4 08             	add    esp,0x8
c00085bb:	5b                   	pop    ebx
c00085bc:	e9 ef fb ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c00085c1:	3c 08                	cmp    al,0x8
c00085c3:	75 25                	jne    c00085ea <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085c5:	50                   	push   eax
c00085c6:	50                   	push   eax
c00085c7:	6a 01                	push   0x1
c00085c9:	53                   	push   ebx
c00085ca:	e8 55 ff ff ff       	call   c0008524 <VgaText::decrementCursor(bool)>
c00085cf:	5a                   	pop    edx
c00085d0:	59                   	pop    ecx
c00085d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085dd:	6a 20                	push   0x20
c00085df:	53                   	push   ebx
c00085e0:	e8 6b fd ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085e5:	83 c4 28             	add    esp,0x28
c00085e8:	5b                   	pop    ebx
c00085e9:	c3                   	ret    
c00085ea:	83 ec 08             	sub    esp,0x8
c00085ed:	0f be c0             	movsx  eax,al
c00085f0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085f3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085f6:	51                   	push   ecx
c00085f7:	52                   	push   edx
c00085f8:	50                   	push   eax
c00085f9:	53                   	push   ebx
c00085fa:	e8 51 fd ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ff:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008603:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000860b:	83 c4 28             	add    esp,0x28
c000860e:	5b                   	pop    ebx
c000860f:	e9 bc fe ff ff       	jmp    c00084d0 <VgaText::incrementCursor(bool)>

c0008614 <VgaText::putchar(char)>:
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 14             	sub    esp,0x14
c0008619:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000861d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008621:	3c 5b                	cmp    al,0x5b
c0008623:	75 18                	jne    c000863d <VgaText::putchar(char)+0x29>
c0008625:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008629:	74 1f                	je     c000864a <VgaText::putchar(char)+0x36>
c000862b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008631:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008638:	e9 bd 00 00 00       	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c000863d:	3c 1b                	cmp    al,0x1b
c000863f:	75 09                	jne    c000864a <VgaText::putchar(char)+0x36>
c0008641:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008645:	e9 b0 00 00 00       	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c000864a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000864d:	84 c9                	test   cl,cl
c000864f:	0f 84 92 00 00 00    	je     c00086e7 <VgaText::putchar(char)+0xd3>
c0008655:	8d 50 c0             	lea    edx,[eax-0x40]
c0008658:	80 fa 3e             	cmp    dl,0x3e
c000865b:	77 76                	ja     c00086d3 <VgaText::putchar(char)+0xbf>
c000865d:	3c 6d                	cmp    al,0x6d
c000865f:	75 47                	jne    c00086a8 <VgaText::putchar(char)+0x94>
c0008661:	31 f6                	xor    esi,esi
c0008663:	31 d2                	xor    edx,edx
c0008665:	31 c0                	xor    eax,eax
c0008667:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000866a:	7e 2d                	jle    c0008699 <VgaText::putchar(char)+0x85>
c000866c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008671:	80 fa 3b             	cmp    dl,0x3b
c0008674:	75 17                	jne    c000868d <VgaText::putchar(char)+0x79>
c0008676:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000867a:	50                   	push   eax
c000867b:	53                   	push   ebx
c000867c:	e8 45 fb ff ff       	call   c00081c6 <VgaText::doANSI_SGR(int)>
c0008681:	59                   	pop    ecx
c0008682:	31 d2                	xor    edx,edx
c0008684:	58                   	pop    eax
c0008685:	31 c0                	xor    eax,eax
c0008687:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000868b:	eb 09                	jmp    c0008696 <VgaText::putchar(char)+0x82>
c000868d:	6b c0 0a             	imul   eax,eax,0xa
c0008690:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008694:	88 ca                	mov    dl,cl
c0008696:	46                   	inc    esi
c0008697:	eb ce                	jmp    c0008667 <VgaText::putchar(char)+0x53>
c0008699:	84 d2                	test   dl,dl
c000869b:	74 2e                	je     c00086cb <VgaText::putchar(char)+0xb7>
c000869d:	50                   	push   eax
c000869e:	53                   	push   ebx
c000869f:	e8 22 fb ff ff       	call   c00081c6 <VgaText::doANSI_SGR(int)>
c00086a4:	58                   	pop    eax
c00086a5:	5a                   	pop    edx
c00086a6:	eb 23                	jmp    c00086cb <VgaText::putchar(char)+0xb7>
c00086a8:	3c 4a                	cmp    al,0x4a
c00086aa:	75 1f                	jne    c00086cb <VgaText::putchar(char)+0xb7>
c00086ac:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086b0:	75 19                	jne    c00086cb <VgaText::putchar(char)+0xb7>
c00086b2:	83 ec 0c             	sub    esp,0xc
c00086b5:	53                   	push   ebx
c00086b6:	e8 97 fd ff ff       	call   c0008452 <VgaText::clearScreen()>
c00086bb:	83 c4 0c             	add    esp,0xc
c00086be:	6a 00                	push   0x0
c00086c0:	6a 00                	push   0x0
c00086c2:	53                   	push   ebx
c00086c3:	e8 28 fd ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00086c8:	83 c4 10             	add    esp,0x10
c00086cb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086d1:	eb 27                	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c00086d3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086d6:	83 fa 0e             	cmp    edx,0xe
c00086d9:	7f 1f                	jg     c00086fa <VgaText::putchar(char)+0xe6>
c00086db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086de:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086e1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086e5:	eb 13                	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c00086e7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086ea:	0f be c0             	movsx  eax,al
c00086ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086f0:	50                   	push   eax
c00086f1:	53                   	push   ebx
c00086f2:	e8 4f fe ff ff       	call   c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086f7:	83 c4 10             	add    esp,0x10
c00086fa:	83 c4 14             	add    esp,0x14
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	c3                   	ret    

c0008700 <VgaText::putx(unsigned int)>:
c0008700:	57                   	push   edi
c0008701:	b9 11 00 00 00       	mov    ecx,0x11
c0008706:	56                   	push   esi
c0008707:	be de d8 01 c0       	mov    esi,0xc001d8de
c000870c:	53                   	push   ebx
c000870d:	83 ec 20             	sub    esp,0x20
c0008710:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008714:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008718:	fc                   	cld    
c0008719:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871b:	be 08 00 00 00       	mov    esi,0x8
c0008720:	50                   	push   eax
c0008721:	50                   	push   eax
c0008722:	89 d8                	mov    eax,ebx
c0008724:	c1 e3 04             	shl    ebx,0x4
c0008727:	c1 e8 1c             	shr    eax,0x1c
c000872a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000872f:	50                   	push   eax
c0008730:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008734:	e8 db fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008739:	83 c4 10             	add    esp,0x10
c000873c:	4e                   	dec    esi
c000873d:	75 e1                	jne    c0008720 <VgaText::putx(unsigned int)+0x20>
c000873f:	83 c4 20             	add    esp,0x20
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	c3                   	ret    

c0008746 <VgaText::puts(char const*)>:
c0008746:	53                   	push   ebx
c0008747:	83 ec 08             	sub    esp,0x8
c000874a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000874e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008751:	84 c0                	test   al,al
c0008753:	74 12                	je     c0008767 <VgaText::puts(char const*)+0x21>
c0008755:	43                   	inc    ebx
c0008756:	51                   	push   ecx
c0008757:	51                   	push   ecx
c0008758:	50                   	push   eax
c0008759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000875d:	e8 b2 fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008762:	83 c4 10             	add    esp,0x10
c0008765:	eb e7                	jmp    c000874e <VgaText::puts(char const*)+0x8>
c0008767:	83 c4 08             	add    esp,0x8
c000876a:	5b                   	pop    ebx
c000876b:	c3                   	ret    

c000876c <VgaText::write(unsigned long long, void*, int*)>:
c000876c:	55                   	push   ebp
c000876d:	57                   	push   edi
c000876e:	56                   	push   esi
c000876f:	53                   	push   ebx
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008777:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000877b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000877f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008786:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008789:	39 eb                	cmp    ebx,ebp
c000878b:	74 13                	je     c00087a0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000878d:	43                   	inc    ebx
c000878e:	50                   	push   eax
c000878f:	50                   	push   eax
c0008790:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008794:	50                   	push   eax
c0008795:	56                   	push   esi
c0008796:	e8 79 fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c000879b:	83 c4 10             	add    esp,0x10
c000879e:	eb e9                	jmp    c0008789 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087a0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00087ab:	89 38                	mov    DWORD PTR [eax],edi
c00087ad:	83 c4 0c             	add    esp,0xc
c00087b0:	31 c0                	xor    eax,eax
c00087b2:	5b                   	pop    ebx
c00087b3:	5e                   	pop    esi
c00087b4:	5f                   	pop    edi
c00087b5:	5d                   	pop    ebp
c00087b6:	c3                   	ret    
c00087b7:	90                   	nop

c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087b8:	55                   	push   ebp
c00087b9:	57                   	push   edi
c00087ba:	56                   	push   esi
c00087bb:	53                   	push   ebx
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087cf:	50                   	push   eax
c00087d0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087d5:	50                   	push   eax
c00087d6:	e8 b9 fa ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c00087db:	5a                   	pop    edx
c00087dc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087e1:	59                   	pop    ecx
c00087e2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087e5:	89 c5                	mov    ebp,eax
c00087e7:	0f b7 f6             	movzx  esi,si
c00087ea:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087ee:	01 f6                	add    esi,esi
c00087f0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087f3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087f6:	84 c0                	test   al,al
c00087f8:	0f 84 f4 00 00 00    	je     c00088f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087fe:	3c 0d                	cmp    al,0xd
c0008800:	75 0c                	jne    c000880e <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008802:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008809:	e9 de 00 00 00       	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000880e:	3c 0a                	cmp    al,0xa
c0008810:	75 45                	jne    c0008857 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008812:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008815:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000881c:	8d 48 01             	lea    ecx,[eax+0x1]
c000881f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008822:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008825:	75 0f                	jne    c0008836 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008827:	83 ec 0c             	sub    esp,0xc
c000882a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000882d:	53                   	push   ebx
c000882e:	e8 73 fa ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c0008833:	83 c4 10             	add    esp,0x10
c0008836:	83 ec 0c             	sub    esp,0xc
c0008839:	53                   	push   ebx
c000883a:	e8 71 f9 ff ff       	call   c00081b0 <VgaText::updateCursor()>
c000883f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008844:	83 c4 10             	add    esp,0x10
c0008847:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000884a:	0f b7 f6             	movzx  esi,si
c000884d:	01 f6                	add    esi,esi
c000884f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008852:	e9 95 00 00 00       	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008857:	3c 08                	cmp    al,0x8
c0008859:	75 35                	jne    c0008890 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000885b:	51                   	push   ecx
c000885c:	51                   	push   ecx
c000885d:	6a 01                	push   0x1
c000885f:	53                   	push   ebx
c0008860:	e8 bf fc ff ff       	call   c0008524 <VgaText::decrementCursor(bool)>
c0008865:	5e                   	pop    esi
c0008866:	58                   	pop    eax
c0008867:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000886a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000886d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008870:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008873:	6a 20                	push   0x20
c0008875:	53                   	push   ebx
c0008876:	e8 d5 fa ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000887b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008880:	83 c4 20             	add    esp,0x20
c0008883:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008886:	0f b7 f6             	movzx  esi,si
c0008889:	01 f6                	add    esi,esi
c000888b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000888e:	eb 5c                	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008890:	52                   	push   edx
c0008891:	52                   	push   edx
c0008892:	89 ea                	mov    edx,ebp
c0008894:	0f b6 ca             	movzx  ecx,dl
c0008897:	51                   	push   ecx
c0008898:	50                   	push   eax
c0008899:	e8 a0 fa ff ff       	call   c000833e <VgaText::combineCharAndColour(char, unsigned char)>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	66 89 06             	mov    WORD PTR [esi],ax
c00088a4:	39 1d 84 0d 02 c0    	cmp    DWORD PTR ds:0xc0020d84,ebx
c00088aa:	75 1d                	jne    c00088c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c00088ac:	83 ec 0c             	sub    esp,0xc
c00088af:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088b2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088b5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088b9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088bd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088c0:	50                   	push   eax
c00088c1:	e8 b6 db 00 00       	call   c001647c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088c6:	83 c4 20             	add    esp,0x20
c00088c9:	83 c6 02             	add    esi,0x2
c00088cc:	50                   	push   eax
c00088cd:	50                   	push   eax
c00088ce:	6a 00                	push   0x0
c00088d0:	53                   	push   ebx
c00088d1:	e8 fa fb ff ff       	call   c00084d0 <VgaText::incrementCursor(bool)>
c00088d6:	83 c4 10             	add    esp,0x10
c00088d9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088dd:	75 0d                	jne    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088df:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088e4:	0f b7 f6             	movzx  esi,si
c00088e7:	01 f6                	add    esi,esi
c00088e9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088ec:	47                   	inc    edi
c00088ed:	e9 01 ff ff ff       	jmp    c00087f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	53                   	push   ebx
c00088f6:	e8 b5 f8 ff ff       	call   c00081b0 <VgaText::updateCursor()>
c00088fb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008902:	83 c4 1c             	add    esp,0x1c
c0008905:	5b                   	pop    ebx
c0008906:	5e                   	pop    esi
c0008907:	5f                   	pop    edi
c0008908:	5d                   	pop    ebp
c0008909:	c3                   	ret    

c000890a <VgaText::VgaText(char const*)>:
c000890a:	56                   	push   esi
c000890b:	53                   	push   ebx
c000890c:	83 ec 04             	sub    esp,0x4
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	6a 00                	push   0x0
c0008918:	50                   	push   eax
c0008919:	e8 34 05 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c000891e:	83 c4 10             	add    esp,0x10
c0008921:	ba 50 d9 01 c0       	mov    edx,0xc001d950
c0008926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892a:	89 10                	mov    DWORD PTR [eax],edx
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008961:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008977:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008982:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008989:	83 ec 0c             	sub    esp,0xc
c000898c:	6a 01                	push   0x1
c000898e:	e8 02 09 00 00       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	89 c2                	mov    edx,eax
c0008998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000899c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000899f:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ac:	89 c6                	mov    esi,eax
c00089ae:	e8 f2 f0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c00089b3:	68 05 0c 00 00       	push   0xc05
c00089b8:	56                   	push   esi
c00089b9:	50                   	push   eax
c00089ba:	53                   	push   ebx
c00089bb:	e8 6a 0f 00 00       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ca:	83 ec 04             	sub    esp,0x4
c00089cd:	68 a0 0f 00 00       	push   0xfa0
c00089d2:	6a 00                	push   0x0
c00089d4:	50                   	push   eax
c00089d5:	e8 f6 7a ff ff       	call   c00004d0 <memset>
c00089da:	83 c4 10             	add    esp,0x10
c00089dd:	83 ec 04             	sub    esp,0x4
c00089e0:	6a 00                	push   0x0
c00089e2:	6a 07                	push   0x7
c00089e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e8:	e8 6d f8 ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	83 ec 04             	sub    esp,0x4
c00089f3:	6a 00                	push   0x0
c00089f5:	6a 00                	push   0x0
c00089f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fb:	e8 f0 f9 ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c0008a00:	83 c4 10             	add    esp,0x10
c0008a03:	83 ec 0c             	sub    esp,0xc
c0008a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a0a:	e8 43 fa ff ff       	call   c0008452 <VgaText::clearScreen()>
c0008a0f:	83 c4 10             	add    esp,0x10
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1e:	05 82 00 00 00       	add    eax,0x82
c0008a23:	83 ec 04             	sub    esp,0x4
c0008a26:	6a 30                	push   0x30
c0008a28:	6a 00                	push   0x0
c0008a2a:	50                   	push   eax
c0008a2b:	e8 a0 7a ff ff       	call   c00004d0 <memset>
c0008a30:	83 c4 10             	add    esp,0x10
c0008a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a37:	05 b2 00 00 00       	add    eax,0xb2
c0008a3c:	83 ec 04             	sub    esp,0x4
c0008a3f:	68 80 00 00 00       	push   0x80
c0008a44:	6a 00                	push   0x0
c0008a46:	50                   	push   eax
c0008a47:	e8 84 7a ff ff       	call   c00004d0 <memset>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	90                   	nop
c0008a50:	83 c4 04             	add    esp,0x4
c0008a53:	5b                   	pop    ebx
c0008a54:	5e                   	pop    esi
c0008a55:	c3                   	ret    

c0008a56 <VgaText::receiveKey(unsigned char)>:
c0008a56:	57                   	push   edi
c0008a57:	56                   	push   esi
c0008a58:	53                   	push   ebx
c0008a59:	83 ec 10             	sub    esp,0x10
c0008a5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a64:	89 f0                	mov    eax,esi
c0008a66:	84 c0                	test   al,al
c0008a68:	0f 84 3b 01 00 00    	je     c0008ba9 <VgaText::receiveKey(unsigned char)+0x153>
c0008a6e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a74:	3c 08                	cmp    al,0x8
c0008a76:	75 68                	jne    c0008ae0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a78:	83 ec 0c             	sub    esp,0xc
c0008a7b:	57                   	push   edi
c0008a7c:	e8 bf 7a ff ff       	call   c0000540 <strlen>
c0008a81:	83 c4 10             	add    esp,0x10
c0008a84:	85 c0                	test   eax,eax
c0008a86:	0f 84 be 00 00 00    	je     c0008b4a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a8c:	50                   	push   eax
c0008a8d:	50                   	push   eax
c0008a8e:	6a 08                	push   0x8
c0008a90:	53                   	push   ebx
c0008a91:	e8 7e fb ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008a96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a99:	e8 a2 7a ff ff       	call   c0000540 <strlen>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008aa8:	3c 0d                	cmp    al,0xd
c0008aaa:	0f 95 c1             	setne  cl
c0008aad:	3c 18                	cmp    al,0x18
c0008aaf:	0f 9e c2             	setle  dl
c0008ab2:	84 d1                	test   cl,dl
c0008ab4:	74 17                	je     c0008acd <VgaText::receiveKey(unsigned char)+0x77>
c0008ab6:	83 e8 08             	sub    eax,0x8
c0008ab9:	3c 02                	cmp    al,0x2
c0008abb:	76 10                	jbe    c0008acd <VgaText::receiveKey(unsigned char)+0x77>
c0008abd:	50                   	push   eax
c0008abe:	50                   	push   eax
c0008abf:	68 ef d8 01 c0       	push   0xc001d8ef
c0008ac4:	53                   	push   ebx
c0008ac5:	e8 7c fc ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0008aca:	83 c4 10             	add    esp,0x10
c0008acd:	83 ec 0c             	sub    esp,0xc
c0008ad0:	57                   	push   edi
c0008ad1:	e8 6a 7a ff ff       	call   c0000540 <strlen>
c0008ad6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ade:	eb 67                	jmp    c0008b47 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ae0:	3c 18                	cmp    al,0x18
c0008ae2:	0f 96 c2             	setbe  dl
c0008ae5:	3c 0d                	cmp    al,0xd
c0008ae7:	0f 95 c0             	setne  al
c0008aea:	84 c2                	test   dl,al
c0008aec:	74 30                	je     c0008b1e <VgaText::receiveKey(unsigned char)+0xc8>
c0008aee:	8d 46 f7             	lea    eax,[esi-0x9]
c0008af1:	3c 01                	cmp    al,0x1
c0008af3:	76 29                	jbe    c0008b1e <VgaText::receiveKey(unsigned char)+0xc8>
c0008af5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008afb:	68 f5 d8 01 c0       	push   0xc001d8f5
c0008b00:	53                   	push   ebx
c0008b01:	e8 b2 fc ff ff       	call   c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b09:	8d 46 40             	lea    eax,[esi+0x40]
c0008b0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b0f:	0f b6 c0             	movzx  eax,al
c0008b12:	50                   	push   eax
c0008b13:	53                   	push   ebx
c0008b14:	e8 2d fa ff ff       	call   c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b19:	83 c4 20             	add    esp,0x20
c0008b1c:	eb 11                	jmp    c0008b2f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b1e:	89 f0                	mov    eax,esi
c0008b20:	51                   	push   ecx
c0008b21:	0f be c0             	movsx  eax,al
c0008b24:	51                   	push   ecx
c0008b25:	50                   	push   eax
c0008b26:	53                   	push   ebx
c0008b27:	e8 e8 fa ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b34:	89 f0                	mov    eax,esi
c0008b36:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b3a:	52                   	push   edx
c0008b3b:	52                   	push   edx
c0008b3c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b40:	50                   	push   eax
c0008b41:	57                   	push   edi
c0008b42:	e8 79 7c ff ff       	call   c00007c0 <strcat>
c0008b47:	83 c4 10             	add    esp,0x10
c0008b4a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b51:	75 06                	jne    c0008b59 <VgaText::receiveKey(unsigned char)+0x103>
c0008b53:	89 f0                	mov    eax,esi
c0008b55:	3c 0a                	cmp    al,0xa
c0008b57:	75 50                	jne    c0008ba9 <VgaText::receiveKey(unsigned char)+0x153>
c0008b59:	83 ec 0c             	sub    esp,0xc
c0008b5c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b62:	53                   	push   ebx
c0008b63:	e8 d8 79 ff ff       	call   c0000540 <strlen>
c0008b68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b6b:	89 c6                	mov    esi,eax
c0008b6d:	e8 ce 79 ff ff       	call   c0000540 <strlen>
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b79:	3d 80 00 00 00       	cmp    eax,0x80
c0008b7e:	76 10                	jbe    c0008b90 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b80:	83 ec 0c             	sub    esp,0xc
c0008b83:	68 fb d8 01 c0       	push   0xc001d8fb
c0008b88:	e8 c6 75 00 00       	call   c0010153 <KePanic(char const*)>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	50                   	push   eax
c0008b91:	50                   	push   eax
c0008b92:	57                   	push   edi
c0008b93:	53                   	push   ebx
c0008b94:	e8 27 7c ff ff       	call   c00007c0 <strcat>
c0008b99:	83 c4 0c             	add    esp,0xc
c0008b9c:	6a 30                	push   0x30
c0008b9e:	6a 00                	push   0x0
c0008ba0:	57                   	push   edi
c0008ba1:	e8 2a 79 ff ff       	call   c00004d0 <memset>
c0008ba6:	83 c4 10             	add    esp,0x10
c0008ba9:	83 c4 10             	add    esp,0x10
c0008bac:	5b                   	pop    ebx
c0008bad:	5e                   	pop    esi
c0008bae:	5f                   	pop    edi
c0008baf:	c3                   	ret    

c0008bb0 <VgaText::doUpdate()>:
c0008bb0:	c3                   	ret    

c0008bb1 <newTerminal(char*)>:
c0008bb1:	83 ec 28             	sub    esp,0x28
c0008bb4:	68 34 01 00 00       	push   0x134
c0008bb9:	e8 fb eb ff ff       	call   c00077b9 <malloc>
c0008bbe:	5a                   	pop    edx
c0008bbf:	59                   	pop    ecx
c0008bc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bc4:	50                   	push   eax
c0008bc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bc9:	e8 3c fd ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c0008bce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd2:	83 c4 2c             	add    esp,0x2c
c0008bd5:	c3                   	ret    
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::TSS()>:
c0008bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008be3:	90                   	nop
c0008be4:	c3                   	ret    
c0008be5:	90                   	nop
c0008be6:	66 90                	xchg   ax,ax

c0008be8 <TSS::setESP(unsigned long)>:
c0008be8:	55                   	push   ebp
c0008be9:	89 e5                	mov    ebp,esp
c0008beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bf7:	90                   	nop
c0008bf8:	5d                   	pop    ebp
c0008bf9:	c3                   	ret    
c0008bfa:	66 90                	xchg   ax,ax

c0008bfc <TSS::flush()>:
c0008bfc:	55                   	push   ebp
c0008bfd:	89 e5                	mov    ebp,esp
c0008bff:	83 ec 10             	sub    esp,0x10
c0008c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c07:	83 c8 03             	or     eax,0x3
c0008c0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c12:	66 89 d0             	mov    ax,dx
c0008c15:	0f 00 d8             	ltr    ax
c0008c18:	90                   	nop
c0008c19:	c9                   	leave  
c0008c1a:	c3                   	ret    
c0008c1b:	90                   	nop

c0008c1c <TSS::setup(unsigned long, unsigned long)>:
c0008c1c:	55                   	push   ebp
c0008c1d:	89 e5                	mov    ebp,esp
c0008c1f:	83 ec 18             	sub    esp,0x18
c0008c22:	83 ec 0c             	sub    esp,0xc
c0008c25:	6a 68                	push   0x68
c0008c27:	e8 8d eb ff ff       	call   c00077b9 <malloc>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c2                	mov    edx,eax
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3d:	83 ec 04             	sub    esp,0x4
c0008c40:	6a 68                	push   0x68
c0008c42:	6a 00                	push   0x0
c0008c44:	50                   	push   eax
c0008c45:	e8 86 78 ff ff       	call   c00004d0 <memset>
c0008c4a:	83 c4 10             	add    esp,0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c83:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cc2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce4:	0f 20 da             	mov    edx,cr3
c0008ce7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ced:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	50                   	push   eax
c0008cfa:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	83 ec 08             	sub    esp,0x8
c0008d09:	6a 68                	push   0x68
c0008d0b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d0e:	50                   	push   eax
c0008d0f:	e8 48 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d1b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1e:	83 e0 0f             	and    eax,0xf
c0008d21:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d24:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d27:	83 c8 40             	or     eax,0x40
c0008d2a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d2d:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0008d32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d38:	05 78 01 00 00       	add    eax,0x178
c0008d3d:	83 ec 04             	sub    esp,0x4
c0008d40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d46:	50                   	push   eax
c0008d47:	e8 44 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	89 c2                	mov    edx,eax
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	89 10                	mov    DWORD PTR [eax],edx
c0008d56:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0008d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d61:	05 78 01 00 00       	add    eax,0x178
c0008d66:	83 ec 0c             	sub    esp,0xc
c0008d69:	50                   	push   eax
c0008d6a:	e8 4b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d77:	c9                   	leave  
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d8a:	75 08                	jne    c0008d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d92:	eb 38                	jmp    c0008dcc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d99:	75 17                	jne    c0008db2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008da0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008daf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008db2:	89 c1                	mov    ecx,eax
c0008db4:	83 e1 fd             	and    ecx,0xfffffffd
c0008db7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dbd:	74 cd                	je     c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dc4:	83 e0 ef             	and    eax,0xffffffef
c0008dc7:	83 f8 08             	cmp    eax,0x8
c0008dca:	76 c0                	jbe    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dcc:	31 c0                	xor    eax,eax
c0008dce:	c3                   	ret    
c0008dcf:	90                   	nop

c0008dd0 <ReservedFilename::isAtty()>:
c0008dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dd7:	31 c0                	xor    eax,eax
c0008dd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008ddf:	74 09                	je     c0008dea <ReservedFilename::isAtty()+0x1a>
c0008de1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008de7:	0f 94 c0             	sete   al
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008df0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008df4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008dfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e00:	75 08                	jne    c0008e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e08:	eb 3d                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e0f:	75 17                	jne    c0008e28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e2d:	75 04                	jne    c0008e33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e31:	eb 14                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e38:	74 c8                	je     c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e3f:	83 e0 ef             	and    eax,0xffffffef
c0008e42:	83 f8 08             	cmp    eax,0x8
c0008e45:	76 bb                	jbe    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e47:	31 c0                	xor    eax,eax
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::getFileDescriptor()>:
c0008e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e51:	c3                   	ret    

c0008e52 <UnixFile::UnixFile(int)>:
c0008e52:	53                   	push   ebx
c0008e53:	83 ec 28             	sub    esp,0x28
c0008e56:	ba 18 da 01 c0       	mov    edx,0xc001da18
c0008e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e5f:	89 10                	mov    DWORD PTR [eax],edx
c0008e61:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e69:	0f 8f 8c 01 00 00    	jg     c0008ffb <UnixFile::UnixFile(int)+0x1a9>
c0008e6f:	a1 e0 f9 01 c0       	mov    eax,ds:0xc001f9e0
c0008e74:	8d 50 01             	lea    edx,[eax+0x1]
c0008e77:	89 15 e0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e0,edx
c0008e7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e84:	83 ec 08             	sub    esp,0x8
c0008e87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e8b:	68 18 0e 02 c0       	push   0xc0020e18
c0008e90:	e8 63 36 01 00       	call   c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e95:	83 c4 10             	add    esp,0x10
c0008e98:	a0 14 0e 02 c0       	mov    al,ds:0xc0020e14
c0008e9d:	83 f0 01             	xor    eax,0x1
c0008ea0:	84 c0                	test   al,al
c0008ea2:	0f 84 54 01 00 00    	je     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008ea8:	c6 05 14 0e 02 c0 01 	mov    BYTE PTR ds:0xc0020e14,0x1
c0008eaf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ebe:	e8 f6 e8 ff ff       	call   c00077b9 <malloc>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	89 c3                	mov    ebx,eax
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 03 ff ff 0f       	push   0xfffff03
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 2c 01 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	89 1d 0c 0e 02 c0    	mov    DWORD PTR ds:0xc0020e0c,ebx
c0008edf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ee7:	83 ec 0c             	sub    esp,0xc
c0008eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eee:	e8 c6 e8 ff ff       	call   c00077b9 <malloc>
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 c3                	mov    ebx,eax
c0008ef8:	83 ec 08             	sub    esp,0x8
c0008efb:	68 01 ff ff 0f       	push   0xfffff01
c0008f00:	53                   	push   ebx
c0008f01:	e8 fc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 1d 10 0e 02 c0    	mov    DWORD PTR ds:0xc0020e10,ebx
c0008f0f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f17:	83 ec 0c             	sub    esp,0xc
c0008f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f1e:	e8 96 e8 ff ff       	call   c00077b9 <malloc>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	89 c3                	mov    ebx,eax
c0008f28:	83 ec 08             	sub    esp,0x8
c0008f2b:	68 00 ff ff 0f       	push   0xfffff00
c0008f30:	53                   	push   ebx
c0008f31:	e8 cc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	89 1d 04 0e 02 c0    	mov    DWORD PTR ds:0xc0020e04,ebx
c0008f3f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f47:	83 ec 0c             	sub    esp,0xc
c0008f4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f4e:	e8 66 e8 ff ff       	call   c00077b9 <malloc>
c0008f53:	83 c4 10             	add    esp,0x10
c0008f56:	89 c3                	mov    ebx,eax
c0008f58:	83 ec 08             	sub    esp,0x8
c0008f5b:	68 02 ff ff 0f       	push   0xfffff02
c0008f60:	53                   	push   ebx
c0008f61:	e8 9c 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	89 1d 08 0e 02 c0    	mov    DWORD PTR ds:0xc0020e08,ebx
c0008f6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f77:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f7c:	7f 7e                	jg     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008f7e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f8d:	e8 27 e8 ff ff       	call   c00077b9 <malloc>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 c3                	mov    ebx,eax
c0008f97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f9b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	50                   	push   eax
c0008fa4:	53                   	push   ebx
c0008fa5:	e8 58 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fb1:	89 1c 85 e0 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf220],ebx
c0008fb8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fc0:	83 ec 0c             	sub    esp,0xc
c0008fc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc7:	e8 ed e7 ff ff       	call   c00077b9 <malloc>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	89 c3                	mov    ebx,eax
c0008fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fda:	83 ec 08             	sub    esp,0x8
c0008fdd:	50                   	push   eax
c0008fde:	53                   	push   ebx
c0008fdf:	e8 1e 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008feb:	89 1c 85 a0 0d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf260],ebx
c0008ff2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ff6:	e9 7c ff ff ff       	jmp    c0008f77 <UnixFile::UnixFile(int)+0x125>
c0008ffb:	90                   	nop
c0008ffc:	83 c4 28             	add    esp,0x28
c0008fff:	5b                   	pop    ebx
c0009000:	c3                   	ret    
c0009001:	90                   	nop

c0009002 <ReservedFilename::ReservedFilename(int)>:
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009009:	83 ec 08             	sub    esp,0x8
c000900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009010:	50                   	push   eax
c0009011:	e8 3c fe ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c0009016:	83 c4 10             	add    esp,0x10
c0009019:	ba 34 da 01 c0       	mov    edx,0xc001da34
c000901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009022:	89 10                	mov    DWORD PTR [eax],edx
c0009024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000902c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000902f:	90                   	nop
c0009030:	83 c4 0c             	add    esp,0xc
c0009033:	c3                   	ret    

c0009034 <UnixFile::~UnixFile()>:
c0009034:	83 ec 1c             	sub    esp,0x1c
c0009037:	ba 18 da 01 c0       	mov    edx,0xc001da18
c000903c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009040:	89 10                	mov    DWORD PTR [eax],edx
c0009042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009049:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000904e:	7f 73                	jg     c00090c3 <UnixFile::~UnixFile()+0x8f>
c0009050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009058:	83 ec 0c             	sub    esp,0xc
c000905b:	68 18 0e 02 c0       	push   0xc0020e18
c0009060:	e8 67 35 01 00       	call   c001c5cc <LinkedList<UnixFile>::getFirstElement()>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	68 18 0e 02 c0       	push   0xc0020e18
c0009074:	e8 5b 35 01 00       	call   c001c5d4 <LinkedList<UnixFile>::removeFirst()>
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009080:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009084:	74 40                	je     c00090c6 <UnixFile::~UnixFile()+0x92>
c0009086:	83 ec 08             	sub    esp,0x8
c0009089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000908d:	68 18 0e 02 c0       	push   0xc0020e18
c0009092:	e8 61 34 01 00       	call   c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009097:	83 c4 10             	add    esp,0x10
c000909a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000909e:	8d 50 01             	lea    edx,[eax+0x1]
c00090a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090a5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090aa:	0f 94 c0             	sete   al
c00090ad:	84 c0                	test   al,al
c00090af:	74 a7                	je     c0009058 <UnixFile::~UnixFile()+0x24>
c00090b1:	83 ec 0c             	sub    esp,0xc
c00090b4:	68 f0 d9 01 c0       	push   0xc001d9f0
c00090b9:	e8 95 70 00 00       	call   c0010153 <KePanic(char const*)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	eb 95                	jmp    c0009058 <UnixFile::~UnixFile()+0x24>
c00090c3:	90                   	nop
c00090c4:	eb 01                	jmp    c00090c7 <UnixFile::~UnixFile()+0x93>
c00090c6:	90                   	nop
c00090c7:	90                   	nop
c00090c8:	83 c4 1c             	add    esp,0x1c
c00090cb:	c3                   	ret    

c00090cc <UnixFile::~UnixFile()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	83 ec 0c             	sub    esp,0xc
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 59 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 ec 08             	sub    esp,0x8
c00090e1:	6a 0c                	push   0xc
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 06 13 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c00090ec:	83 c4 10             	add    esp,0x10
c00090ef:	83 c4 0c             	add    esp,0xc
c00090f2:	c3                   	ret    
c00090f3:	90                   	nop

c00090f4 <ReservedFilename::~ReservedFilename()>:
c00090f4:	83 ec 0c             	sub    esp,0xc
c00090f7:	ba 34 da 01 c0       	mov    edx,0xc001da34
c00090fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009100:	89 10                	mov    DWORD PTR [eax],edx
c0009102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009106:	83 ec 0c             	sub    esp,0xc
c0009109:	50                   	push   eax
c000910a:	e8 25 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	90                   	nop
c0009113:	83 c4 0c             	add    esp,0xc
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::~ReservedFilename()>:
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	83 ec 0c             	sub    esp,0xc
c000911e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009122:	e8 cd ff ff ff       	call   c00090f4 <ReservedFilename::~ReservedFilename()>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	83 ec 08             	sub    esp,0x8
c000912d:	6a 0c                	push   0xc
c000912f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009133:	e8 ba 12 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0009138:	83 c4 10             	add    esp,0x10
c000913b:	83 c4 0c             	add    esp,0xc
c000913e:	c3                   	ret    

c000913f <getFromFileDescriptor(int)>:
c000913f:	53                   	push   ebx
c0009140:	83 ec 08             	sub    esp,0x8
c0009143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009147:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000914d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009153:	7f 2c                	jg     c0009181 <getFromFileDescriptor(int)+0x42>
c0009155:	83 ec 0c             	sub    esp,0xc
c0009158:	68 18 0e 02 c0       	push   0xc0020e18
c000915d:	e8 6a 34 01 00       	call   c001c5cc <LinkedList<UnixFile>::getFirstElement()>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	85 c0                	test   eax,eax
c0009167:	75 04                	jne    c000916d <getFromFileDescriptor(int)+0x2e>
c0009169:	31 c0                	xor    eax,eax
c000916b:	eb 6e                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c000916d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009170:	74 69                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c0009172:	52                   	push   edx
c0009173:	52                   	push   edx
c0009174:	50                   	push   eax
c0009175:	68 18 0e 02 c0       	push   0xc0020e18
c000917a:	e8 f7 34 01 00       	call   c001c676 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000917f:	eb e1                	jmp    c0009162 <getFromFileDescriptor(int)+0x23>
c0009181:	a1 0c 0e 02 c0       	mov    eax,ds:0xc0020e0c
c0009186:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000918c:	74 4d                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000918e:	a1 10 0e 02 c0       	mov    eax,ds:0xc0020e10
c0009193:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009199:	74 40                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000919b:	a1 08 0e 02 c0       	mov    eax,ds:0xc0020e08
c00091a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091a6:	74 33                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091a8:	a1 04 0e 02 c0       	mov    eax,ds:0xc0020e04
c00091ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091b3:	74 26                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091bb:	83 f8 08             	cmp    eax,0x8
c00091be:	77 09                	ja     c00091c9 <getFromFileDescriptor(int)+0x8a>
c00091c0:	8b 04 85 e0 0d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf220]
c00091c7:	eb 12                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c00091c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091cf:	83 fb 08             	cmp    ebx,0x8
c00091d2:	77 95                	ja     c0009169 <getFromFileDescriptor(int)+0x2a>
c00091d4:	8b 04 9d a0 0d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf260]
c00091db:	83 c4 08             	add    esp,0x8
c00091de:	5b                   	pop    ebx
c00091df:	c3                   	ret    

c00091e0 <__static_initialization_and_destruction_0(int, int)>:
c00091e0:	83 ec 0c             	sub    esp,0xc
c00091e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e8:	75 34                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091f2:	75 2a                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091f4:	83 ec 0c             	sub    esp,0xc
c00091f7:	68 18 0e 02 c0       	push   0xc0020e18
c00091fc:	e8 b5 32 01 00       	call   c001c4b6 <LinkedList<UnixFile>::LinkedList()>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	83 ec 04             	sub    esp,0x4
c0009207:	68 74 f9 01 c0       	push   0xc001f974
c000920c:	68 18 0e 02 c0       	push   0xc0020e18
c0009211:	68 b4 c4 01 c0       	push   0xc001c4b4
c0009216:	e8 87 11 00 00       	call   c000a3a2 <__cxa_atexit>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	90                   	nop
c000921f:	83 c4 0c             	add    esp,0xc
c0009222:	c3                   	ret    

c0009223 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009223:	83 ec 0c             	sub    esp,0xc
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	68 ff ff 00 00       	push   0xffff
c000922e:	6a 01                	push   0x1
c0009230:	e8 ab ff ff ff       	call   c00091e0 <__static_initialization_and_destruction_0(int, int)>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	83 c4 0c             	add    esp,0xc
c000923b:	c3                   	ret    

c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000923c:	53                   	push   ebx
c000923d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009241:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009245:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000924b:	89 c8                	mov    eax,ecx
c000924d:	d1 e8                	shr    eax,1
c000924f:	03 05 e8 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9e8
c0009255:	83 e1 01             	and    ecx,0x1
c0009258:	8a 10                	mov    dl,BYTE PTR [eax]
c000925a:	75 09                	jne    c0009265 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000925c:	83 e2 f0             	and    edx,0xfffffff0
c000925f:	09 da                	or     edx,ebx
c0009261:	88 10                	mov    BYTE PTR [eax],dl
c0009263:	5b                   	pop    ebx
c0009264:	c3                   	ret    
c0009265:	c1 e3 04             	shl    ebx,0x4
c0009268:	83 e2 0f             	and    edx,0xf
c000926b:	09 da                	or     edx,ebx
c000926d:	88 10                	mov    BYTE PTR [eax],dl
c000926f:	5b                   	pop    ebx
c0009270:	c3                   	ret    

c0009271 <Virt::getPageState(unsigned long)>:
c0009271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009275:	8b 0d e8 f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9e8
c000927b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009281:	89 d0                	mov    eax,edx
c0009283:	d1 e8                	shr    eax,1
c0009285:	83 e2 01             	and    edx,0x1
c0009288:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000928b:	75 04                	jne    c0009291 <Virt::getPageState(unsigned long)+0x20>
c000928d:	83 e0 0f             	and    eax,0xf
c0009290:	c3                   	ret    
c0009291:	c0 e8 04             	shr    al,0x4
c0009294:	c3                   	ret    

c0009295 <Virt::allocateKernelVirtualPages(int)>:
c0009295:	55                   	push   ebp
c0009296:	31 ed                	xor    ebp,ebp
c0009298:	57                   	push   edi
c0009299:	56                   	push   esi
c000929a:	53                   	push   ebx
c000929b:	31 db                	xor    ebx,ebx
c000929d:	83 ec 1c             	sub    esp,0x1c
c00092a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092a4:	8b 3d e4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9e4
c00092aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092af:	57                   	push   edi
c00092b0:	e8 bc ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092b5:	5a                   	pop    edx
c00092b6:	84 c0                	test   al,al
c00092b8:	75 3a                	jne    c00092f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092ba:	85 db                	test   ebx,ebx
c00092bc:	75 02                	jne    c00092c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092be:	89 fd                	mov    ebp,edi
c00092c0:	43                   	inc    ebx
c00092c1:	39 f3                	cmp    ebx,esi
c00092c3:	74 5a                	je     c000931f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092c5:	47                   	inc    edi
c00092c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092cc:	76 31                	jbe    c00092ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092ce:	c7 05 e4 f9 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f9e4,0xc8000
c00092d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092dd:	75 28                	jne    c0009307 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e9:	57                   	push   edi
c00092ea:	e8 82 ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092ef:	5a                   	pop    edx
c00092f0:	84 c0                	test   al,al
c00092f2:	74 c6                	je     c00092ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00092f4:	31 db                	xor    ebx,ebx
c00092f6:	47                   	inc    edi
c00092f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092fd:	77 cf                	ja     c00092ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ff:	89 3d e4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e4,edi
c0009305:	eb a8                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009307:	83 ec 0c             	sub    esp,0xc
c000930a:	68 48 da 01 c0       	push   0xc001da48
c000930f:	e8 3f 6e 00 00       	call   c0010153 <KePanic(char const*)>
c0009314:	8b 3d e4 f9 01 c0    	mov    edi,DWORD PTR ds:0xc001f9e4
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	eb 90                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000931f:	89 2d e4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e4,ebp
c0009325:	4b                   	dec    ebx
c0009326:	74 5f                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009328:	85 f6                	test   esi,esi
c000932a:	74 3d                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000932c:	89 e8                	mov    eax,ebp
c000932e:	31 db                	xor    ebx,ebx
c0009330:	8d 7e ff             	lea    edi,[esi-0x1]
c0009333:	eb 14                	jmp    c0009349 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009335:	6a 01                	push   0x1
c0009337:	43                   	inc    ebx
c0009338:	50                   	push   eax
c0009339:	e8 fe fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000933e:	58                   	pop    eax
c000933f:	39 f3                	cmp    ebx,esi
c0009341:	5a                   	pop    edx
c0009342:	74 25                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009344:	a1 e4 f9 01 c0       	mov    eax,ds:0xc001f9e4
c0009349:	8d 50 01             	lea    edx,[eax+0x1]
c000934c:	85 db                	test   ebx,ebx
c000934e:	89 15 e4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9e4,edx
c0009354:	74 20                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009356:	39 df                	cmp    edi,ebx
c0009358:	75 db                	jne    c0009335 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000935a:	6a 03                	push   0x3
c000935c:	43                   	inc    ebx
c000935d:	50                   	push   eax
c000935e:	e8 d9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009363:	59                   	pop    ecx
c0009364:	39 f3                	cmp    ebx,esi
c0009366:	58                   	pop    eax
c0009367:	75 db                	jne    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009369:	83 c4 1c             	add    esp,0x1c
c000936c:	89 e8                	mov    eax,ebp
c000936e:	5b                   	pop    ebx
c000936f:	c1 e0 0c             	shl    eax,0xc
c0009372:	5e                   	pop    esi
c0009373:	5f                   	pop    edi
c0009374:	5d                   	pop    ebp
c0009375:	c3                   	ret    
c0009376:	6a 02                	push   0x2
c0009378:	bb 01 00 00 00       	mov    ebx,0x1
c000937d:	50                   	push   eax
c000937e:	e8 b9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009383:	58                   	pop    eax
c0009384:	5a                   	pop    edx
c0009385:	eb bd                	jmp    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009387:	6a 04                	push   0x4
c0009389:	8d 45 01             	lea    eax,[ebp+0x1]
c000938c:	55                   	push   ebp
c000938d:	a3 e4 f9 01 c0       	mov    ds:0xc001f9e4,eax
c0009392:	e8 a5 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009397:	59                   	pop    ecx
c0009398:	89 e8                	mov    eax,ebp
c000939a:	5b                   	pop    ebx
c000939b:	c1 e0 0c             	shl    eax,0xc
c000939e:	83 c4 1c             	add    esp,0x1c
c00093a1:	5b                   	pop    ebx
c00093a2:	5e                   	pop    esi
c00093a3:	5f                   	pop    edi
c00093a4:	5d                   	pop    ebp
c00093a5:	c3                   	ret    

c00093a6 <Virt::freeSwapfilePage(unsigned long)>:
c00093a6:	53                   	push   ebx
c00093a7:	8b 15 2c 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e2c
c00093ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093b1:	b8 01 00 00 00       	mov    eax,0x1
c00093b6:	89 cb                	mov    ebx,ecx
c00093b8:	d3 e0                	shl    eax,cl
c00093ba:	c1 eb 05             	shr    ebx,0x5
c00093bd:	f7 d0                	not    eax
c00093bf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093c2:	5b                   	pop    ebx
c00093c3:	c3                   	ret    

c00093c4 <Virt::swapIDToSector(unsigned long)>:
c00093c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c8:	0f af 05 ec f9 01 c0 	imul   eax,DWORD PTR ds:0xc001f9ec
c00093cf:	03 05 f4 f9 01 c0    	add    eax,DWORD PTR ds:0xc001f9f4
c00093d5:	c3                   	ret    

c00093d6 <Virt::allocateSwapfilePage()>:
c00093d6:	55                   	push   ebp
c00093d7:	31 d2                	xor    edx,edx
c00093d9:	57                   	push   edi
c00093da:	56                   	push   esi
c00093db:	53                   	push   ebx
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	8b 0d ec f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9ec
c00093e5:	a1 f0 f9 01 c0       	mov    eax,ds:0xc001f9f0
c00093ea:	f7 f1                	div    ecx
c00093ec:	39 0d f0 f9 01 c0    	cmp    DWORD PTR ds:0xc001f9f0,ecx
c00093f2:	72 2d                	jb     c0009421 <Virt::allocateSwapfilePage()+0x4b>
c00093f4:	8b 35 2c 0e 02 c0    	mov    esi,DWORD PTR ds:0xc0020e2c
c00093fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00093fc:	f6 c2 01             	test   dl,0x1
c00093ff:	74 3c                	je     c000943d <Virt::allocateSwapfilePage()+0x67>
c0009401:	31 c9                	xor    ecx,ecx
c0009403:	bf 01 00 00 00       	mov    edi,0x1
c0009408:	eb 12                	jmp    c000941c <Virt::allocateSwapfilePage()+0x46>
c000940a:	89 fd                	mov    ebp,edi
c000940c:	89 ca                	mov    edx,ecx
c000940e:	d3 e5                	shl    ebp,cl
c0009410:	c1 ea 05             	shr    edx,0x5
c0009413:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009416:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009418:	85 ea                	test   edx,ebp
c000941a:	74 2a                	je     c0009446 <Virt::allocateSwapfilePage()+0x70>
c000941c:	41                   	inc    ecx
c000941d:	39 c8                	cmp    eax,ecx
c000941f:	77 e9                	ja     c000940a <Virt::allocateSwapfilePage()+0x34>
c0009421:	83 ec 0c             	sub    esp,0xc
c0009424:	68 af db 01 c0       	push   0xc001dbaf
c0009429:	e8 25 6d 00 00       	call   c0010153 <KePanic(char const*)>
c000942e:	83 c4 10             	add    esp,0x10
c0009431:	31 c9                	xor    ecx,ecx
c0009433:	83 c4 0c             	add    esp,0xc
c0009436:	89 c8                	mov    eax,ecx
c0009438:	5b                   	pop    ebx
c0009439:	5e                   	pop    esi
c000943a:	5f                   	pop    edi
c000943b:	5d                   	pop    ebp
c000943c:	c3                   	ret    
c000943d:	89 f3                	mov    ebx,esi
c000943f:	bd 01 00 00 00       	mov    ebp,0x1
c0009444:	31 c9                	xor    ecx,ecx
c0009446:	09 ea                	or     edx,ebp
c0009448:	89 c8                	mov    eax,ecx
c000944a:	89 13                	mov    DWORD PTR [ebx],edx
c000944c:	83 c4 0c             	add    esp,0xc
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <Virt::virtualMemorySetup()>:
c0009454:	53                   	push   ebx
c0009455:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000945a:	6a 0f                	push   0xf
c000945c:	53                   	push   ebx
c000945d:	43                   	inc    ebx
c000945e:	e8 d9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009463:	58                   	pop    eax
c0009464:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000946a:	5a                   	pop    edx
c000946b:	75 ed                	jne    c000945a <Virt::virtualMemorySetup()+0x6>
c000946d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009472:	6a 00                	push   0x0
c0009474:	53                   	push   ebx
c0009475:	43                   	inc    ebx
c0009476:	e8 c1 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000947b:	59                   	pop    ecx
c000947c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009482:	58                   	pop    eax
c0009483:	75 ed                	jne    c0009472 <Virt::virtualMemorySetup()+0x1e>
c0009485:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000948a:	6a 0f                	push   0xf
c000948c:	53                   	push   ebx
c000948d:	43                   	inc    ebx
c000948e:	e8 a9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009493:	58                   	pop    eax
c0009494:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000949a:	5a                   	pop    edx
c000949b:	75 ed                	jne    c000948a <Virt::virtualMemorySetup()+0x36>
c000949d:	5b                   	pop    ebx
c000949e:	c3                   	ret    

c000949f <Virt::setupPageSwapping(int)>:
c000949f:	53                   	push   ebx
c00094a0:	83 ec 0c             	sub    esp,0xc
c00094a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094a7:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00094ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094b4:	53                   	push   ebx
c00094b5:	c1 e3 0b             	shl    ebx,0xb
c00094b8:	68 c6 db 01 c0       	push   0xc001dbc6
c00094bd:	50                   	push   eax
c00094be:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094c1:	89 1d f0 f9 01 c0    	mov    DWORD PTR ds:0xc001f9f0,ebx
c00094c7:	c6 05 f8 f9 01 c0 43 	mov    BYTE PTR ds:0xc001f9f8,0x43
c00094ce:	c1 eb 08             	shr    ebx,0x8
c00094d1:	a3 f4 f9 01 c0       	mov    ds:0xc001f9f4,eax
c00094d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d9:	c7 05 ec f9 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f9ec,0x8
c00094e3:	e8 d1 e2 ff ff       	call   c00077b9 <malloc>
c00094e8:	83 c4 0c             	add    esp,0xc
c00094eb:	89 c1                	mov    ecx,eax
c00094ed:	a3 2c 0e 02 c0       	mov    ds:0xc0020e2c,eax
c00094f2:	31 d2                	xor    edx,edx
c00094f4:	a1 f0 f9 01 c0       	mov    eax,ds:0xc001f9f0
c00094f9:	f7 35 ec f9 01 c0    	div    DWORD PTR ds:0xc001f9ec
c00094ff:	c1 e8 05             	shr    eax,0x5
c0009502:	50                   	push   eax
c0009503:	6a 00                	push   0x0
c0009505:	51                   	push   ecx
c0009506:	e8 c5 6f ff ff       	call   c00004d0 <memset>
c000950b:	83 c4 18             	add    esp,0x18
c000950e:	5b                   	pop    ebx
c000950f:	c3                   	ret    

c0009510 <VAS::VAS()>:
c0009510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000951b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952a:	a3 30 0e 02 c0       	mov    ds:0xc0020e30,eax
c000952f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009533:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000953e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009542:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009549:	90                   	nop
c000954a:	c3                   	ret    
c000954b:	90                   	nop

c000954c <VAS::VAS(VAS*)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009553:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009565:	83 ec 0c             	sub    esp,0xc
c0009568:	68 68 da 01 c0       	push   0xc001da68
c000956d:	e8 e1 6b 00 00       	call   c0010153 <KePanic(char const*)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	90                   	nop
c0009576:	83 c4 0c             	add    esp,0xc
c0009579:	c3                   	ret    

c000957a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000957a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000957e:	89 c2                	mov    edx,eax
c0009580:	c1 e8 0a             	shr    eax,0xa
c0009583:	c1 ea 16             	shr    edx,0x16
c0009586:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000958b:	19 c9                	sbb    ecx,ecx
c000958d:	c1 e2 0c             	shl    edx,0xc
c0009590:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009596:	25 fc 0f 00 00       	and    eax,0xffc
c000959b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00095a2:	01 d0                	add    eax,edx
c00095a4:	c3                   	ret    
c00095a5:	90                   	nop

c00095a6 <VAS::getPageTableEntry(unsigned long)>:
c00095a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095aa:	89 ca                	mov    edx,ecx
c00095ac:	c1 e9 0a             	shr    ecx,0xa
c00095af:	c1 ea 16             	shr    edx,0x16
c00095b2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095b8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095be:	c1 e0 0c             	shl    eax,0xc
c00095c1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095c4:	c3                   	ret    

c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095c5:	57                   	push   edi
c00095c6:	56                   	push   esi
c00095c7:	be 01 00 00 00       	mov    esi,0x1
c00095cc:	53                   	push   ebx
c00095cd:	83 ec 10             	sub    esp,0x10
c00095d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095d4:	c1 eb 0c             	shr    ebx,0xc
c00095d7:	eb 3f                	jmp    c0009618 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095d9:	83 ec 08             	sub    esp,0x8
c00095dc:	a1 30 0e 02 c0       	mov    eax,ds:0xc0020e30
c00095e1:	57                   	push   edi
c00095e2:	50                   	push   eax
c00095e3:	e8 be ff ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00095ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095f1:	f6 c4 04             	test   ah,0x4
c00095f4:	75 60                	jne    c0009656 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095f6:	80 fa 04             	cmp    dl,0x4
c00095f9:	74 79                	je     c0009674 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095fb:	80 fa 02             	cmp    dl,0x2
c00095fe:	0f 84 89 00 00 00    	je     c000968d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009604:	80 fa 03             	cmp    dl,0x3
c0009607:	0f 84 ae 00 00 00    	je     c00096bb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000960d:	fe ca                	dec    dl
c000960f:	0f 84 93 00 00 00    	je     c00096a8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009615:	43                   	inc    ebx
c0009616:	31 f6                	xor    esi,esi
c0009618:	53                   	push   ebx
c0009619:	89 df                	mov    edi,ebx
c000961b:	e8 51 fc ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c0009620:	c1 e7 0c             	shl    edi,0xc
c0009623:	5a                   	pop    edx
c0009624:	84 c0                	test   al,al
c0009626:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000962a:	75 ad                	jne    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000962c:	83 ec 0c             	sub    esp,0xc
c000962f:	68 dd db 01 c0       	push   0xc001dbdd
c0009634:	e8 1a 6b 00 00       	call   c0010153 <KePanic(char const*)>
c0009639:	5a                   	pop    edx
c000963a:	59                   	pop    ecx
c000963b:	57                   	push   edi
c000963c:	8b 3d 30 0e 02 c0    	mov    edi,DWORD PTR ds:0xc0020e30
c0009642:	57                   	push   edi
c0009643:	e8 5e ff ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	8b 00                	mov    eax,DWORD PTR [eax]
c000964d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009651:	f6 c4 04             	test   ah,0x4
c0009654:	74 bf                	je     c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009656:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000965a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000965f:	83 ec 0c             	sub    esp,0xc
c0009662:	50                   	push   eax
c0009663:	e8 db e3 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000966f:	80 fa 04             	cmp    dl,0x4
c0009672:	75 87                	jne    c00095fb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009674:	89 f0                	mov    eax,esi
c0009676:	84 c0                	test   al,al
c0009678:	75 47                	jne    c00096c1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000967a:	c7 44 24 20 8c da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da8c
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	5b                   	pop    ebx
c0009686:	5e                   	pop    esi
c0009687:	5f                   	pop    edi
c0009688:	e9 c6 6a 00 00       	jmp    c0010153 <KePanic(char const*)>
c000968d:	89 f0                	mov    eax,esi
c000968f:	84 c0                	test   al,al
c0009691:	75 15                	jne    c00096a8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009693:	83 ec 0c             	sub    esp,0xc
c0009696:	68 f9 db 01 c0       	push   0xc001dbf9
c000969b:	e8 b3 6a 00 00       	call   c0010153 <KePanic(char const*)>
c00096a0:	83 c4 10             	add    esp,0x10
c00096a3:	e9 6d ff ff ff       	jmp    c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096a8:	83 ec 08             	sub    esp,0x8
c00096ab:	6a 00                	push   0x0
c00096ad:	53                   	push   ebx
c00096ae:	e8 89 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b3:	83 c4 10             	add    esp,0x10
c00096b6:	e9 5a ff ff ff       	jmp    c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096bb:	89 f0                	mov    eax,esi
c00096bd:	84 c0                	test   al,al
c00096bf:	75 15                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096c1:	83 ec 08             	sub    esp,0x8
c00096c4:	6a 00                	push   0x0
c00096c6:	53                   	push   ebx
c00096c7:	e8 70 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	83 c4 10             	add    esp,0x10
c00096d2:	5b                   	pop    ebx
c00096d3:	5e                   	pop    esi
c00096d4:	5f                   	pop    edi
c00096d5:	c3                   	ret    
c00096d6:	c7 44 24 20 15 dc 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dc15
c00096de:	83 c4 10             	add    esp,0x10
c00096e1:	5b                   	pop    ebx
c00096e2:	5e                   	pop    esi
c00096e3:	5f                   	pop    edi
c00096e4:	e9 6a 6a 00 00       	jmp    c0010153 <KePanic(char const*)>
c00096e9:	90                   	nop

c00096ea <VAS::freeAllocatedPages(unsigned long)>:
c00096ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096f2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096f6:	74 09                	je     c0009701 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096fc:	e9 c4 fe ff ff       	jmp    c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009701:	c7 44 24 04 b0 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dab0
c0009709:	e9 da 0d 00 00       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>

c000970e <VAS::virtualToPhysical(unsigned long)>:
c000970e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009712:	50                   	push   eax
c0009713:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009717:	52                   	push   edx
c0009718:	e8 89 fe ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000971d:	59                   	pop    ecx
c000971e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009720:	5a                   	pop    edx
c0009721:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009726:	c3                   	ret    
c0009727:	90                   	nop

c0009728 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009728:	55                   	push   ebp
c0009729:	57                   	push   edi
c000972a:	56                   	push   esi
c000972b:	53                   	push   ebx
c000972c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009730:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009738:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000973c:	85 db                	test   ebx,ebx
c000973e:	7e 22                	jle    c0009762 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009740:	c1 e3 0c             	shl    ebx,0xc
c0009743:	01 f3                	add    ebx,esi
c0009745:	56                   	push   esi
c0009746:	81 c6 00 10 00 00    	add    esi,0x1000
c000974c:	55                   	push   ebp
c000974d:	e8 54 fe ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0009752:	5a                   	pop    edx
c0009753:	59                   	pop    ecx
c0009754:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009756:	21 f9                	and    ecx,edi
c0009758:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000975c:	39 f3                	cmp    ebx,esi
c000975e:	89 08                	mov    DWORD PTR [eax],ecx
c0009760:	75 e3                	jne    c0009745 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009762:	5b                   	pop    ebx
c0009763:	5e                   	pop    esi
c0009764:	5f                   	pop    edi
c0009765:	5d                   	pop    ebp
c0009766:	c3                   	ret    
c0009767:	90                   	nop

c0009768 <VAS::setToWriteCombining(unsigned long, int)>:
c0009768:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000976d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009773:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000977a:	75 01                	jne    c000977d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000977c:	c3                   	ret    
c000977d:	68 80 00 00 00       	push   0x80
c0009782:	6a ff                	push   0xffffffff
c0009784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009788:	50                   	push   eax
c0009789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000978d:	52                   	push   edx
c000978e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009792:	51                   	push   ecx
c0009793:	e8 90 ff ff ff       	call   c0009728 <VAS::reflagRange(unsigned long, int, int, int)>
c0009798:	83 c4 14             	add    esp,0x14
c000979b:	c3                   	ret    

c000979c <VAS::mapOtherVASIn(bool, VAS*)>:
c000979c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097af:	19 c0                	sbb    eax,eax
c00097b1:	83 ca 03             	or     edx,0x3
c00097b4:	83 e0 fc             	and    eax,0xfffffffc
c00097b7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097be:	0f 20 d8             	mov    eax,cr3
c00097c1:	0f 22 d8             	mov    cr3,eax
c00097c4:	c3                   	ret    
c00097c5:	90                   	nop

c00097c6 <VAS::~VAS()>:
c00097c6:	83 ec 2c             	sub    esp,0x2c
c00097c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097d1:	fa                   	cli    
c00097d2:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00097d7:	40                   	inc    eax
c00097d8:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00097dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097e7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097f1:	6a 01                	push   0x1
c00097f3:	50                   	push   eax
c00097f4:	e8 a3 ff ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c00097f9:	83 c4 0c             	add    esp,0xc
c00097fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009804:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000980c:	0f 8f d4 00 00 00    	jg     c00098e6 <VAS::~VAS()+0x120>
c0009812:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009816:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000981d:	c1 e2 02             	shl    edx,0x2
c0009820:	01 d0                	add    eax,edx
c0009822:	8b 00                	mov    eax,DWORD PTR [eax]
c0009824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982c:	83 e0 01             	and    eax,0x1
c000982f:	0f 84 a8 00 00 00    	je     c00098dd <VAS::~VAS()+0x117>
c0009835:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000983d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009845:	7f 72                	jg     c00098b9 <VAS::~VAS()+0xf3>
c0009847:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000984b:	c1 e0 0a             	shl    eax,0xa
c000984e:	89 c2                	mov    edx,eax
c0009850:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009854:	01 d0                	add    eax,edx
c0009856:	c1 e0 0c             	shl    eax,0xc
c0009859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000985d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009862:	8b 00                	mov    eax,DWORD PTR [eax]
c0009864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009867:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000986d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009871:	6a 01                	push   0x1
c0009873:	50                   	push   eax
c0009874:	e8 01 fd ff ff       	call   c000957a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009884:	8b 00                	mov    eax,DWORD PTR [eax]
c0009886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 01 04 00 00       	and    eax,0x401
c0009893:	3d 01 04 00 00       	cmp    eax,0x401
c0009898:	75 19                	jne    c00098b3 <VAS::~VAS()+0xed>
c000989a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000989e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098a3:	83 ec 0c             	sub    esp,0xc
c00098a6:	50                   	push   eax
c00098a7:	e8 97 e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c00098ac:	83 c4 10             	add    esp,0x10
c00098af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098b3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098b7:	eb 84                	jmp    c000983d <VAS::~VAS()+0x77>
c00098b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098bd:	25 00 04 00 00       	and    eax,0x400
c00098c2:	74 19                	je     c00098dd <VAS::~VAS()+0x117>
c00098c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	50                   	push   eax
c00098d1:	e8 6d e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098dd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098e1:	e9 1e ff ff ff       	jmp    c0009804 <VAS::~VAS()+0x3e>
c00098e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ed:	83 ec 0c             	sub    esp,0xc
c00098f0:	50                   	push   eax
c00098f1:	e8 cf fc ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098f6:	83 c4 10             	add    esp,0x10
c00098f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009900:	83 ec 0c             	sub    esp,0xc
c0009903:	50                   	push   eax
c0009904:	e8 3a e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009910:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0009915:	48                   	dec    eax
c0009916:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000991b:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0009920:	85 c0                	test   eax,eax
c0009922:	75 01                	jne    c0009925 <VAS::~VAS()+0x15f>
c0009924:	fb                   	sti    
c0009925:	90                   	nop
c0009926:	83 c4 2c             	add    esp,0x2c
c0009929:	c3                   	ret    

c000992a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000992a:	55                   	push   ebp
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	83 ec 1c             	sub    esp,0x1c
c0009931:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009935:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009939:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000993f:	77 0b                	ja     c000994c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009941:	0f 20 d8             	mov    eax,cr3
c0009944:	0f 20 d8             	mov    eax,cr3
c0009947:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000994a:	75 47                	jne    c0009993 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000994c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009950:	09 d8                	or     eax,ebx
c0009952:	a9 ff 0f 00 00       	test   eax,0xfff
c0009957:	75 57                	jne    c00099b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009959:	89 de                	mov    esi,ebx
c000995b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000995e:	c1 ee 16             	shr    esi,0x16
c0009961:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009968:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000996c:	74 54                	je     c00099c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000996e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009972:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009978:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000997c:	c1 e6 0c             	shl    esi,0xc
c000997f:	c1 eb 0a             	shr    ebx,0xa
c0009982:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009988:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000998b:	83 c4 1c             	add    esp,0x1c
c000998e:	5b                   	pop    ebx
c000998f:	5e                   	pop    esi
c0009990:	5f                   	pop    edi
c0009991:	5d                   	pop    ebp
c0009992:	c3                   	ret    
c0009993:	83 ec 0c             	sub    esp,0xc
c0009996:	68 d4 da 01 c0       	push   0xc001dad4
c000999b:	e8 48 0b 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099a7:	09 d8                	or     eax,ebx
c00099a9:	a9 ff 0f 00 00       	test   eax,0xfff
c00099ae:	74 a9                	je     c0009959 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b0:	83 ec 0c             	sub    esp,0xc
c00099b3:	68 3c db 01 c0       	push   0xc001db3c
c00099b8:	e8 96 67 00 00       	call   c0010153 <KePanic(char const*)>
c00099bd:	83 c4 10             	add    esp,0x10
c00099c0:	eb 97                	jmp    c0009959 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099c6:	e8 da e0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c00099cb:	83 ec 0c             	sub    esp,0xc
c00099ce:	89 c5                	mov    ebp,eax
c00099d0:	8b 0d 30 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e30
c00099d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099da:	6a 01                	push   0x1
c00099dc:	e8 b4 f8 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c00099e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099e8:	6a 01                	push   0x1
c00099ea:	50                   	push   eax
c00099eb:	55                   	push   ebp
c00099ec:	81 cd 07 04 00 00    	or     ebp,0x407
c00099f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099f6:	51                   	push   ecx
c00099f7:	e8 28 02 00 00       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099fc:	83 c4 1c             	add    esp,0x1c
c00099ff:	68 00 10 00 00       	push   0x1000
c0009a04:	6a 00                	push   0x0
c0009a06:	50                   	push   eax
c0009a07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a0b:	e8 c0 6a ff ff       	call   c00004d0 <memset>
c0009a10:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a14:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a17:	e8 a9 fb ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a20:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a23:	83 c4 10             	add    esp,0x10
c0009a26:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a29:	e9 40 ff ff ff       	jmp    c000996e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a2e <VAS::allocatePages(int, int)>:
c0009a2e:	55                   	push   ebp
c0009a2f:	57                   	push   edi
c0009a30:	56                   	push   esi
c0009a31:	53                   	push   ebx
c0009a32:	83 ec 1c             	sub    esp,0x1c
c0009a35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a39:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009a3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a44:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a4a:	83 e0 01             	and    eax,0x1
c0009a4d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a51:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a55:	0f 85 cc 00 00 00    	jne    c0009b27 <VAS::allocatePages(int, int)+0xf9>
c0009a5b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a62:	85 c0                	test   eax,eax
c0009a64:	0f 84 a1 00 00 00    	je     c0009b0b <VAS::allocatePages(int, int)+0xdd>
c0009a6a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a72:	c1 e6 0c             	shl    esi,0xc
c0009a75:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a79:	85 c0                	test   eax,eax
c0009a7b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a7e:	7e 33                	jle    c0009ab3 <VAS::allocatePages(int, int)+0x85>
c0009a80:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a88:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a8e:	e8 12 e0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009a93:	55                   	push   ebp
c0009a94:	53                   	push   ebx
c0009a95:	50                   	push   eax
c0009a96:	57                   	push   edi
c0009a97:	e8 8e fe ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa4:	74 03                	je     c0009aa9 <VAS::allocatePages(int, int)+0x7b>
c0009aa6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aa9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aaf:	39 de                	cmp    esi,ebx
c0009ab1:	75 db                	jne    c0009a8e <VAS::allocatePages(int, int)+0x60>
c0009ab3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ab8:	75 12                	jne    c0009acc <VAS::allocatePages(int, int)+0x9e>
c0009aba:	0f 20 d8             	mov    eax,cr3
c0009abd:	0f 22 d8             	mov    cr3,eax
c0009ac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ac4:	83 c4 1c             	add    esp,0x1c
c0009ac7:	5b                   	pop    ebx
c0009ac8:	5e                   	pop    esi
c0009ac9:	5f                   	pop    edi
c0009aca:	5d                   	pop    ebp
c0009acb:	c3                   	ret    
c0009acc:	c1 ee 0a             	shr    esi,0xa
c0009acf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ad3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ad9:	c1 eb 0a             	shr    ebx,0xa
c0009adc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ae2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ae8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009aee:	39 c3                	cmp    ebx,eax
c0009af0:	77 ce                	ja     c0009ac0 <VAS::allocatePages(int, int)+0x92>
c0009af2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009af5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009afb:	39 d8                	cmp    eax,ebx
c0009afd:	73 f3                	jae    c0009af2 <VAS::allocatePages(int, int)+0xc4>
c0009aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b03:	83 c4 1c             	add    esp,0x1c
c0009b06:	5b                   	pop    ebx
c0009b07:	5e                   	pop    esi
c0009b08:	5f                   	pop    edi
c0009b09:	5d                   	pop    ebp
c0009b0a:	c3                   	ret    
c0009b0b:	83 ec 0c             	sub    esp,0xc
c0009b0e:	68 60 db 01 c0       	push   0xc001db60
c0009b13:	e8 3b 66 00 00       	call   c0010153 <KePanic(char const*)>
c0009b18:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b1f:	83 c4 10             	add    esp,0x10
c0009b22:	e9 43 ff ff ff       	jmp    c0009a6a <VAS::allocatePages(int, int)+0x3c>
c0009b27:	83 ec 0c             	sub    esp,0xc
c0009b2a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b2e:	51                   	push   ecx
c0009b2f:	e8 61 f7 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009b34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b38:	83 c4 10             	add    esp,0x10
c0009b3b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b40:	0f 87 9b 00 00 00    	ja     c0009be1 <VAS::allocatePages(int, int)+0x1b3>
c0009b46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b4a:	85 d2                	test   edx,edx
c0009b4c:	7e 3c                	jle    c0009b8a <VAS::allocatePages(int, int)+0x15c>
c0009b4e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b5a:	c1 e5 0c             	shl    ebp,0xc
c0009b5d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b63:	01 dd                	add    ebp,ebx
c0009b65:	e8 3b df ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009b6a:	56                   	push   esi
c0009b6b:	53                   	push   ebx
c0009b6c:	50                   	push   eax
c0009b6d:	57                   	push   edi
c0009b6e:	e8 b7 fd ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7b:	74 03                	je     c0009b80 <VAS::allocatePages(int, int)+0x152>
c0009b7d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b80:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b86:	39 dd                	cmp    ebp,ebx
c0009b88:	75 db                	jne    c0009b65 <VAS::allocatePages(int, int)+0x137>
c0009b8a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8f:	0f 84 25 ff ff ff    	je     c0009aba <VAS::allocatePages(int, int)+0x8c>
c0009b95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b9d:	89 d3                	mov    ebx,edx
c0009b9f:	c1 e0 0c             	shl    eax,0xc
c0009ba2:	c1 eb 0a             	shr    ebx,0xa
c0009ba5:	01 d0                	add    eax,edx
c0009ba7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bad:	c1 e8 0a             	shr    eax,0xa
c0009bb0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bbb:	2d 00 00 40 00       	sub    eax,0x400000
c0009bc0:	39 c3                	cmp    ebx,eax
c0009bc2:	0f 87 f8 fe ff ff    	ja     c0009ac0 <VAS::allocatePages(int, int)+0x92>
c0009bc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bd1:	39 d8                	cmp    eax,ebx
c0009bd3:	73 f3                	jae    c0009bc8 <VAS::allocatePages(int, int)+0x19a>
c0009bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd9:	83 c4 1c             	add    esp,0x1c
c0009bdc:	5b                   	pop    ebx
c0009bdd:	5e                   	pop    esi
c0009bde:	5f                   	pop    edi
c0009bdf:	5d                   	pop    ebp
c0009be0:	c3                   	ret    
c0009be1:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009be6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bec:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bf3:	0f 84 4d ff ff ff    	je     c0009b46 <VAS::allocatePages(int, int)+0x118>
c0009bf9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c01:	e9 40 ff ff ff       	jmp    c0009b46 <VAS::allocatePages(int, int)+0x118>

c0009c06 <VAS::setCPUSpecific(unsigned long)>:
c0009c06:	83 ec 0c             	sub    esp,0xc
c0009c09:	6a 05                	push   0x5
c0009c0b:	68 00 00 40 c2       	push   0xc2400000
c0009c10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c14:	50                   	push   eax
c0009c15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c19:	52                   	push   edx
c0009c1a:	e8 0b fd ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c1f:	83 c4 1c             	add    esp,0x1c
c0009c22:	c3                   	ret    
c0009c23:	90                   	nop

c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c24:	55                   	push   ebp
c0009c25:	57                   	push   edi
c0009c26:	56                   	push   esi
c0009c27:	53                   	push   ebx
c0009c28:	83 ec 1c             	sub    esp,0x1c
c0009c2b:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009c30:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c3e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c44:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c48:	83 e0 01             	and    eax,0x1
c0009c4b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c53:	85 c0                	test   eax,eax
c0009c55:	7e 39                	jle    c0009c90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5b:	89 f3                	mov    ebx,esi
c0009c5d:	c1 e0 0c             	shl    eax,0xc
c0009c60:	01 f0                	add    eax,esi
c0009c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c66:	55                   	push   ebp
c0009c67:	53                   	push   ebx
c0009c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c6c:	29 f0                	sub    eax,esi
c0009c6e:	01 d8                	add    eax,ebx
c0009c70:	50                   	push   eax
c0009c71:	57                   	push   edi
c0009c72:	e8 b3 fc ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c77:	83 c4 10             	add    esp,0x10
c0009c7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c7f:	74 03                	je     c0009c84 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c81:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c84:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c8a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c8e:	75 d6                	jne    c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c90:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c95:	75 10                	jne    c0009ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c97:	0f 20 d8             	mov    eax,cr3
c0009c9a:	0f 22 d8             	mov    cr3,eax
c0009c9d:	83 c4 1c             	add    esp,0x1c
c0009ca0:	89 f0                	mov    eax,esi
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    
c0009ca7:	89 f3                	mov    ebx,esi
c0009ca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cad:	c1 eb 0a             	shr    ebx,0xa
c0009cb0:	c1 e0 0c             	shl    eax,0xc
c0009cb3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cb9:	01 f0                	add    eax,esi
c0009cbb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cc1:	c1 e8 0a             	shr    eax,0xa
c0009cc4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cce:	39 c3                	cmp    ebx,eax
c0009cd0:	77 cb                	ja     c0009c9d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cdb:	39 d8                	cmp    eax,ebx
c0009cdd:	73 f3                	jae    c0009cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cdf:	83 c4 1c             	add    esp,0x1c
c0009ce2:	89 f0                	mov    eax,esi
c0009ce4:	5b                   	pop    ebx
c0009ce5:	5e                   	pop    esi
c0009ce6:	5f                   	pop    edi
c0009ce7:	5d                   	pop    ebp
c0009ce8:	c3                   	ret    
c0009ce9:	90                   	nop

c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cea:	55                   	push   ebp
c0009ceb:	57                   	push   edi
c0009cec:	56                   	push   esi
c0009ced:	53                   	push   ebx
c0009cee:	83 ec 1c             	sub    esp,0x1c
c0009cf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cf9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cfd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d01:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d06:	75 4a                	jne    c0009d52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d08:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d0f:	c1 eb 16             	shr    ebx,0x16
c0009d12:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d19:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d1d:	74 4d                	je     c0009d6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d23:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d27:	c1 e8 0a             	shr    eax,0xa
c0009d2a:	80 fa 01             	cmp    dl,0x1
c0009d2d:	19 d2                	sbb    edx,edx
c0009d2f:	c1 e3 0c             	shl    ebx,0xc
c0009d32:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d36:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d3c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d41:	01 d8                	add    eax,ebx
c0009d43:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d4a:	83 c4 1c             	add    esp,0x1c
c0009d4d:	5b                   	pop    ebx
c0009d4e:	5e                   	pop    esi
c0009d4f:	5f                   	pop    edi
c0009d50:	5d                   	pop    ebp
c0009d51:	c3                   	ret    
c0009d52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d56:	83 ec 0c             	sub    esp,0xc
c0009d59:	68 8c db 01 c0       	push   0xc001db8c
c0009d5e:	e8 f0 63 00 00       	call   c0010153 <KePanic(char const*)>
c0009d63:	83 c4 10             	add    esp,0x10
c0009d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d6a:	eb 9c                	jmp    c0009d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d70:	e8 30 dd ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009d75:	83 ec 0c             	sub    esp,0xc
c0009d78:	89 c5                	mov    ebp,eax
c0009d7a:	8b 0d 30 0e 02 c0    	mov    ecx,DWORD PTR ds:0xc0020e30
c0009d80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d84:	6a 01                	push   0x1
c0009d86:	e8 0a f5 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009d8b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d92:	6a 01                	push   0x1
c0009d94:	50                   	push   eax
c0009d95:	55                   	push   ebp
c0009d96:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009da0:	51                   	push   ecx
c0009da1:	e8 7e fe ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009da6:	83 c4 1c             	add    esp,0x1c
c0009da9:	68 00 10 00 00       	push   0x1000
c0009dae:	6a 00                	push   0x0
c0009db0:	50                   	push   eax
c0009db1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009db5:	e8 16 67 ff ff       	call   c00004d0 <memset>
c0009dba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dbe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dc1:	e8 ff f7 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dc6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dc9:	83 c4 10             	add    esp,0x10
c0009dcc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dd3:	e9 47 ff ff ff       	jmp    c0009d1f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dd8 <VAS::VAS(bool)>:
c0009dd8:	53                   	push   ebx
c0009dd9:	83 ec 28             	sub    esp,0x28
c0009ddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009de0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e02:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e05:	e8 9b dc ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009e0a:	89 c2                	mov    edx,eax
c0009e0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e10:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e13:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c0009e19:	83 ec 0c             	sub    esp,0xc
c0009e1c:	6a 01                	push   0x1
c0009e1e:	e8 72 f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	89 c2                	mov    edx,eax
c0009e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e2f:	83 ec 0c             	sub    esp,0xc
c0009e32:	6a 03                	push   0x3
c0009e34:	6a 01                	push   0x1
c0009e36:	52                   	push   edx
c0009e37:	50                   	push   eax
c0009e38:	53                   	push   ebx
c0009e39:	e8 e6 fd ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e3e:	83 c4 20             	add    esp,0x20
c0009e41:	89 c2                	mov    edx,eax
c0009e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e47:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e4a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e52:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e5a:	7f 1c                	jg     c0009e78 <VAS::VAS(bool)+0xa0>
c0009e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e67:	c1 e2 02             	shl    edx,0x2
c0009e6a:	01 d0                	add    eax,edx
c0009e6c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e72:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e76:	eb da                	jmp    c0009e52 <VAS::VAS(bool)+0x7a>
c0009e78:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e80:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e88:	7f 7a                	jg     c0009f04 <VAS::VAS(bool)+0x12c>
c0009e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e8e:	2d 00 02 00 00       	sub    eax,0x200
c0009e93:	c1 e0 0c             	shl    eax,0xc
c0009e96:	83 c8 03             	or     eax,0x3
c0009e99:	89 c2                	mov    edx,eax
c0009e9b:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009ea0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ea6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eac:	83 e0 10             	and    eax,0x10
c0009eaf:	84 c0                	test   al,al
c0009eb1:	74 07                	je     c0009eba <VAS::VAS(bool)+0xe2>
c0009eb3:	b8 00 01 00 00       	mov    eax,0x100
c0009eb8:	eb 05                	jmp    c0009ebf <VAS::VAS(bool)+0xe7>
c0009eba:	b8 00 00 00 00       	mov    eax,0x0
c0009ebf:	09 d0                	or     eax,edx
c0009ec1:	89 c1                	mov    ecx,eax
c0009ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ece:	c1 e2 02             	shl    edx,0x2
c0009ed1:	01 d0                	add    eax,edx
c0009ed3:	89 ca                	mov    edx,ecx
c0009ed5:	89 10                	mov    DWORD PTR [eax],edx
c0009ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009edb:	2d 40 03 00 00       	sub    eax,0x340
c0009ee0:	83 f8 7f             	cmp    eax,0x7f
c0009ee3:	77 16                	ja     c0009efb <VAS::VAS(bool)+0x123>
c0009ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ef0:	c1 e2 02             	shl    edx,0x2
c0009ef3:	01 d0                	add    eax,edx
c0009ef5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009efb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eff:	e9 7c ff ff ff       	jmp    c0009e80 <VAS::VAS(bool)+0xa8>
c0009f04:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009f09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f15:	83 e0 10             	and    eax,0x10
c0009f18:	84 c0                	test   al,al
c0009f1a:	74 07                	je     c0009f23 <VAS::VAS(bool)+0x14b>
c0009f1c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f21:	eb 05                	jmp    c0009f28 <VAS::VAS(bool)+0x150>
c0009f23:	b8 03 40 00 00       	mov    eax,0x4003
c0009f28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f2c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f2f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f35:	89 02                	mov    DWORD PTR [edx],eax
c0009f37:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009f3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f48:	83 ec 08             	sub    esp,0x8
c0009f4b:	50                   	push   eax
c0009f4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f50:	e8 b1 fc ff ff       	call   c0009c06 <VAS::setCPUSpecific(unsigned long)>
c0009f55:	83 c4 10             	add    esp,0x10
c0009f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f5f:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009f64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f6a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f70:	83 e0 10             	and    eax,0x10
c0009f73:	84 c0                	test   al,al
c0009f75:	74 07                	je     c0009f7e <VAS::VAS(bool)+0x1a6>
c0009f77:	b8 00 01 00 00       	mov    eax,0x100
c0009f7c:	eb 05                	jmp    c0009f83 <VAS::VAS(bool)+0x1ab>
c0009f7e:	b8 00 00 00 00       	mov    eax,0x0
c0009f83:	09 c2                	or     edx,eax
c0009f85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f8c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f91:	83 ca 03             	or     edx,0x3
c0009f94:	89 10                	mov    DWORD PTR [eax],edx
c0009f96:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009f9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fa1:	83 ec 0c             	sub    esp,0xc
c0009fa4:	50                   	push   eax
c0009fa5:	e8 12 1c 00 00       	call   c000bbbc <Device::getName()>
c0009faa:	83 c4 10             	add    esp,0x10
c0009fad:	83 ec 08             	sub    esp,0x8
c0009fb0:	68 2f dc 01 c0       	push   0xc001dc2f
c0009fb5:	50                   	push   eax
c0009fb6:	e8 25 67 ff ff       	call   c00006e0 <strcmp>
c0009fbb:	83 c4 10             	add    esp,0x10
c0009fbe:	85 c0                	test   eax,eax
c0009fc0:	0f 94 c0             	sete   al
c0009fc3:	84 c0                	test   al,al
c0009fc5:	0f 84 87 00 00 00    	je     c000a052 <VAS::VAS(bool)+0x27a>
c0009fcb:	fa                   	cli    
c0009fcc:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0009fd1:	40                   	inc    eax
c0009fd2:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0009fd7:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009fdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe2:	05 7c 09 00 00       	add    eax,0x97c
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 c6 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ff8:	89 c3                	mov    ebx,eax
c0009ffa:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0009fff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a005:	05 7c 09 00 00       	add    eax,0x97c
c000a00a:	83 ec 0c             	sub    esp,0xc
c000a00d:	50                   	push   eax
c000a00e:	e8 a3 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	83 ec 08             	sub    esp,0x8
c000a019:	50                   	push   eax
c000a01a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a01e:	e8 83 f5 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a023:	83 c4 10             	add    esp,0x10
c000a026:	8b 00                	mov    eax,DWORD PTR [eax]
c000a028:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a02d:	6a 11                	push   0x11
c000a02f:	53                   	push   ebx
c000a030:	50                   	push   eax
c000a031:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a035:	e8 f0 f8 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a03a:	83 c4 10             	add    esp,0x10
c000a03d:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000a042:	48                   	dec    eax
c000a043:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000a048:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000a04d:	85 c0                	test   eax,eax
c000a04f:	75 01                	jne    c000a052 <VAS::VAS(bool)+0x27a>
c000a051:	fb                   	sti    
c000a052:	90                   	nop
c000a053:	83 c4 28             	add    esp,0x28
c000a056:	5b                   	pop    ebx
c000a057:	c3                   	ret    

c000a058 <VAS::evict(unsigned long)>:
c000a058:	55                   	push   ebp
c000a059:	57                   	push   edi
c000a05a:	56                   	push   esi
c000a05b:	53                   	push   ebx
c000a05c:	83 ec 1c             	sub    esp,0x1c
c000a05f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a063:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a06b:	e8 66 f3 ff ff       	call   c00093d6 <Virt::allocateSwapfilePage()>
c000a070:	8b 0d ec f9 01 c0    	mov    ecx,DWORD PTR ds:0xc001f9ec
c000a076:	89 c7                	mov    edi,eax
c000a078:	85 c9                	test   ecx,ecx
c000a07a:	7e 3e                	jle    c000a0ba <VAS::evict(unsigned long)+0x62>
c000a07c:	89 ee                	mov    esi,ebp
c000a07e:	31 db                	xor    ebx,ebx
c000a080:	83 ec 0c             	sub    esp,0xc
c000a083:	57                   	push   edi
c000a084:	e8 3b f3 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a089:	89 34 24             	mov    DWORD PTR [esp],esi
c000a08c:	01 d8                	add    eax,ebx
c000a08e:	6a 01                	push   0x1
c000a090:	31 d2                	xor    edx,edx
c000a092:	43                   	inc    ebx
c000a093:	52                   	push   edx
c000a094:	81 c6 00 02 00 00    	add    esi,0x200
c000a09a:	50                   	push   eax
c000a09b:	0f be 05 f8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9f8
c000a0a2:	8b 14 85 9c 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce64]
c000a0a9:	52                   	push   edx
c000a0aa:	e8 b5 2b 00 00       	call   c000cc64 <LogicalDisk::write(unsigned long long, int, void*)>
c000a0af:	83 c4 20             	add    esp,0x20
c000a0b2:	39 1d ec f9 01 c0    	cmp    DWORD PTR ds:0xc001f9ec,ebx
c000a0b8:	7f c6                	jg     c000a080 <VAS::evict(unsigned long)+0x28>
c000a0ba:	83 ec 08             	sub    esp,0x8
c000a0bd:	c1 e7 0b             	shl    edi,0xb
c000a0c0:	55                   	push   ebp
c000a0c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c5:	50                   	push   eax
c000a0c6:	e8 db f4 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a0cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0cd:	89 d1                	mov    ecx,edx
c000a0cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0d5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0db:	09 cf                	or     edi,ecx
c000a0dd:	89 38                	mov    DWORD PTR [eax],edi
c000a0df:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0e2:	ff 05 28 0e 02 c0    	inc    DWORD PTR ds:0xc0020e28
c000a0e8:	e8 56 d9 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c000a0ed:	0f 20 d8             	mov    eax,cr3
c000a0f0:	0f 22 d8             	mov    cr3,eax
c000a0f3:	a1 24 0e 02 c0       	mov    eax,ds:0xc0020e24
c000a0f8:	c7 44 24 40 3d dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc3d
c000a100:	8d 50 01             	lea    edx,[eax+0x1]
c000a103:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a107:	89 15 24 0e 02 c0    	mov    DWORD PTR ds:0xc0020e24,edx
c000a10d:	83 c4 2c             	add    esp,0x2c
c000a110:	5b                   	pop    ebx
c000a111:	5e                   	pop    esi
c000a112:	5f                   	pop    edi
c000a113:	5d                   	pop    ebp
c000a114:	e9 cf 03 00 00       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a119:	90                   	nop

c000a11a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a11a:	55                   	push   ebp
c000a11b:	57                   	push   edi
c000a11c:	56                   	push   esi
c000a11d:	53                   	push   ebx
c000a11e:	83 ec 14             	sub    esp,0x14
c000a121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a125:	53                   	push   ebx
c000a126:	68 4e dc 01 c0       	push   0xc001dc4e
c000a12b:	e8 b8 03 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a139:	74 21                	je     c000a15c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a13b:	83 ec 08             	sub    esp,0x8
c000a13e:	53                   	push   ebx
c000a13f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a143:	57                   	push   edi
c000a144:	e8 5d f4 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 c6                	mov    esi,eax
c000a14e:	85 c0                	test   eax,eax
c000a150:	74 0a                	je     c000a15c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a152:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a154:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a15a:	74 0a                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a15c:	31 c0                	xor    eax,eax
c000a15e:	83 c4 0c             	add    esp,0xc
c000a161:	5b                   	pop    ebx
c000a162:	5e                   	pop    esi
c000a163:	5f                   	pop    edi
c000a164:	5d                   	pop    ebp
c000a165:	c3                   	ret    
c000a166:	e8 3a d9 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a16b:	c1 ed 0b             	shr    ebp,0xb
c000a16e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a170:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a176:	09 c2                	or     edx,eax
c000a178:	81 ca 01 08 00 00    	or     edx,0x801
c000a17e:	89 16                	mov    DWORD PTR [esi],edx
c000a180:	8b 35 ec f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9ec
c000a186:	85 f6                	test   esi,esi
c000a188:	7e 3e                	jle    c000a1c8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a18a:	89 df                	mov    edi,ebx
c000a18c:	31 f6                	xor    esi,esi
c000a18e:	83 ec 0c             	sub    esp,0xc
c000a191:	55                   	push   ebp
c000a192:	e8 2d f2 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a197:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a19a:	01 f0                	add    eax,esi
c000a19c:	6a 01                	push   0x1
c000a19e:	31 d2                	xor    edx,edx
c000a1a0:	46                   	inc    esi
c000a1a1:	52                   	push   edx
c000a1a2:	81 c7 00 02 00 00    	add    edi,0x200
c000a1a8:	50                   	push   eax
c000a1a9:	0f be 05 f8 f9 01 c0 	movsx  eax,BYTE PTR ds:0xc001f9f8
c000a1b0:	8b 0c 85 9c 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdce64]
c000a1b7:	51                   	push   ecx
c000a1b8:	e8 3b 2a 00 00       	call   c000cbf8 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1bd:	83 c4 20             	add    esp,0x20
c000a1c0:	39 35 ec f9 01 c0    	cmp    DWORD PTR ds:0xc001f9ec,esi
c000a1c6:	7f c6                	jg     c000a18e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1c8:	a1 28 0e 02 c0       	mov    eax,ds:0xc0020e28
c000a1cd:	48                   	dec    eax
c000a1ce:	52                   	push   edx
c000a1cf:	a3 28 0e 02 c0       	mov    ds:0xc0020e28,eax
c000a1d4:	50                   	push   eax
c000a1d5:	53                   	push   ebx
c000a1d6:	68 61 dc 01 c0       	push   0xc001dc61
c000a1db:	e8 08 03 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a1e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1e3:	e8 be f1 ff ff       	call   c00093a6 <Virt::freeSwapfilePage(unsigned long)>
c000a1e8:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	48                   	dec    eax
c000a1f1:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000a1f6:	85 c0                	test   eax,eax
c000a1f8:	75 01                	jne    c000a1fb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1fa:	fb                   	sti    
c000a1fb:	0f 20 d8             	mov    eax,cr3
c000a1fe:	0f 22 d8             	mov    cr3,eax
c000a201:	b0 01                	mov    al,0x1
c000a203:	e9 56 ff ff ff       	jmp    c000a15e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a208 <VAS::scanForEviction()>:
c000a208:	57                   	push   edi
c000a209:	31 ff                	xor    edi,edi
c000a20b:	56                   	push   esi
c000a20c:	53                   	push   ebx
c000a20d:	83 ec 10             	sub    esp,0x10
c000a210:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a214:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a217:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a21d:	75 0e                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a21f:	89 da                	mov    edx,ebx
c000a221:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a224:	c1 ea 16             	shr    edx,0x16
c000a227:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a22b:	74 4e                	je     c000a27b <VAS::scanForEviction()+0x73>
c000a22d:	53                   	push   ebx
c000a22e:	56                   	push   esi
c000a22f:	e8 72 f3 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a234:	5a                   	pop    edx
c000a235:	8b 10                	mov    edx,DWORD PTR [eax]
c000a237:	59                   	pop    ecx
c000a238:	89 d1                	mov    ecx,edx
c000a23a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a240:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a246:	74 3e                	je     c000a286 <VAS::scanForEviction()+0x7e>
c000a248:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a24e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a254:	76 2b                	jbe    c000a281 <VAS::scanForEviction()+0x79>
c000a256:	47                   	inc    edi
c000a257:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a25e:	83 ff 03             	cmp    edi,0x3
c000a261:	74 32                	je     c000a295 <VAS::scanForEviction()+0x8d>
c000a263:	31 db                	xor    ebx,ebx
c000a265:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a26b:	75 c0                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a26d:	89 da                	mov    edx,ebx
c000a26f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a272:	c1 ea 16             	shr    edx,0x16
c000a275:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a279:	75 b2                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a27b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a281:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a284:	eb 91                	jmp    c000a217 <VAS::scanForEviction()+0xf>
c000a286:	f6 c2 20             	test   dl,0x20
c000a289:	74 13                	je     c000a29e <VAS::scanForEviction()+0x96>
c000a28b:	83 e2 df             	and    edx,0xffffffdf
c000a28e:	89 10                	mov    DWORD PTR [eax],edx
c000a290:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a293:	eb b3                	jmp    c000a248 <VAS::scanForEviction()+0x40>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	31 c0                	xor    eax,eax
c000a29a:	5b                   	pop    ebx
c000a29b:	5e                   	pop    esi
c000a29c:	5f                   	pop    edi
c000a29d:	c3                   	ret    
c000a29e:	83 ec 08             	sub    esp,0x8
c000a2a1:	89 d0                	mov    eax,edx
c000a2a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2ac:	53                   	push   ebx
c000a2ad:	68 76 dc 01 c0       	push   0xc001dc76
c000a2b2:	e8 31 02 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a2b7:	58                   	pop    eax
c000a2b8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2bb:	5a                   	pop    edx
c000a2bc:	51                   	push   ecx
c000a2bd:	56                   	push   esi
c000a2be:	e8 95 fd ff ff       	call   c000a058 <VAS::evict(unsigned long)>
c000a2c3:	5b                   	pop    ebx
c000a2c4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2c7:	5f                   	pop    edi
c000a2c8:	50                   	push   eax
c000a2c9:	68 8a dc 01 c0       	push   0xc001dc8a
c000a2ce:	e8 15 02 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a2d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2da:	83 c4 10             	add    esp,0x10
c000a2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	5b                   	pop    ebx
c000a2e5:	5e                   	pop    esi
c000a2e6:	5f                   	pop    edi
c000a2e7:	c3                   	ret    

c000a2e8 <mapVASFirstTime>:
c000a2e8:	55                   	push   ebp
c000a2e9:	57                   	push   edi
c000a2ea:	56                   	push   esi
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 0c             	sub    esp,0xc
c000a2ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2f7:	4a                   	dec    edx
c000a2f8:	0f 84 8c 00 00 00    	je     c000a38a <mapVASFirstTime+0xa2>
c000a2fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a301:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a304:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a309:	c1 e5 15             	shl    ebp,0x15
c000a30c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a311:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a317:	29 eb                	sub    ebx,ebp
c000a319:	29 ef                	sub    edi,ebp
c000a31b:	e8 85 d7 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a320:	83 ec 0c             	sub    esp,0xc
c000a323:	68 03 04 00 00       	push   0x403
c000a328:	6a 01                	push   0x1
c000a32a:	53                   	push   ebx
c000a32b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a331:	50                   	push   eax
c000a332:	56                   	push   esi
c000a333:	e8 ec f8 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a338:	83 c4 20             	add    esp,0x20
c000a33b:	39 fb                	cmp    ebx,edi
c000a33d:	75 dc                	jne    c000a31b <mapVASFirstTime+0x33>
c000a33f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a344:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a349:	29 eb                	sub    ebx,ebp
c000a34b:	29 ef                	sub    edi,ebp
c000a34d:	e8 53 d7 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a352:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a356:	19 d2                	sbb    edx,edx
c000a358:	83 ec 0c             	sub    esp,0xc
c000a35b:	83 e2 04             	and    edx,0x4
c000a35e:	81 c2 03 04 00 00    	add    edx,0x403
c000a364:	52                   	push   edx
c000a365:	6a 01                	push   0x1
c000a367:	53                   	push   ebx
c000a368:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a36e:	50                   	push   eax
c000a36f:	56                   	push   esi
c000a370:	e8 af f8 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a375:	83 c4 20             	add    esp,0x20
c000a378:	39 df                	cmp    edi,ebx
c000a37a:	75 d1                	jne    c000a34d <mapVASFirstTime+0x65>
c000a37c:	0f 20 d8             	mov    eax,cr3
c000a37f:	0f 22 d8             	mov    cr3,eax
c000a382:	83 c4 0c             	add    esp,0xc
c000a385:	5b                   	pop    ebx
c000a386:	5e                   	pop    esi
c000a387:	5f                   	pop    edi
c000a388:	5d                   	pop    ebp
c000a389:	c3                   	ret    
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	68 9d dc 01 c0       	push   0xc001dc9d
c000a392:	e8 51 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a397:	83 c4 10             	add    esp,0x10
c000a39a:	83 c4 0c             	add    esp,0xc
c000a39d:	5b                   	pop    ebx
c000a39e:	5e                   	pop    esi
c000a39f:	5f                   	pop    edi
c000a3a0:	5d                   	pop    ebp
c000a3a1:	c3                   	ret    

c000a3a2 <__cxa_atexit>:
c000a3a2:	31 c0                	xor    eax,eax
c000a3a4:	c3                   	ret    

c000a3a5 <__cxa_finalize>:
c000a3a5:	c3                   	ret    

c000a3a6 <__stack_chk_fail>:
c000a3a6:	55                   	push   ebp
c000a3a7:	89 e5                	mov    ebp,esp
c000a3a9:	83 ec 10             	sub    esp,0x10
c000a3ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3af:	68 b6 dc 01 c0       	push   0xc001dcb6
c000a3b4:	e8 2f 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a3b9:	58                   	pop    eax
c000a3ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3bd:	5a                   	pop    edx
c000a3be:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3c1:	68 b6 dc 01 c0       	push   0xc001dcb6
c000a3c6:	e8 1d 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a3cb:	c7 04 24 be dc 01 c0 	mov    DWORD PTR [esp],0xc001dcbe
c000a3d2:	e8 7c 5d 00 00       	call   c0010153 <KePanic(char const*)>
c000a3d7:	83 c4 10             	add    esp,0x10
c000a3da:	c9                   	leave  
c000a3db:	c3                   	ret    

c000a3dc <__cxa_pure_virtual>:
c000a3dc:	83 ec 18             	sub    esp,0x18
c000a3df:	68 d6 dc 01 c0       	push   0xc001dcd6
c000a3e4:	e8 6a 5d 00 00       	call   c0010153 <KePanic(char const*)>
c000a3e9:	83 c4 1c             	add    esp,0x1c
c000a3ec:	c3                   	ret    

c000a3ed <operator new[](unsigned long)>:
c000a3ed:	e9 c7 d3 ff ff       	jmp    c00077b9 <malloc>

c000a3f2 <operator delete(void*, unsigned long)>:
c000a3f2:	e9 f2 d3 ff ff       	jmp    c00077e9 <rfree>

c000a3f7 <operator delete[](void*)>:
c000a3f7:	e9 ed d3 ff ff       	jmp    c00077e9 <rfree>

c000a3fc <operator delete[](void*, unsigned long)>:
c000a3fc:	e9 e8 d3 ff ff       	jmp    c00077e9 <rfree>

c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a401:	55                   	push   ebp
c000a402:	b9 04 00 00 00       	mov    ecx,0x4
c000a407:	57                   	push   edi
c000a408:	56                   	push   esi
c000a409:	be df d8 01 c0       	mov    esi,0xc001d8df
c000a40e:	53                   	push   ebx
c000a40f:	83 ec 20             	sub    esp,0x20
c000a412:	a1 de d8 01 c0       	mov    eax,ds:0xc001d8de
c000a417:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a41b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a41f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a423:	a1 eb d8 01 c0       	mov    eax,ds:0xc001d8eb
c000a428:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a42c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a430:	fc                   	cld    
c000a431:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a433:	89 ee                	mov    esi,ebp
c000a435:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a439:	eb 02                	jmp    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a43b:	89 c6                	mov    esi,eax
c000a43d:	31 d2                	xor    edx,edx
c000a43f:	41                   	inc    ecx
c000a440:	89 f0                	mov    eax,esi
c000a442:	f7 f3                	div    ebx
c000a444:	39 de                	cmp    esi,ebx
c000a446:	73 f3                	jae    c000a43b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a448:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a44b:	eb 02                	jmp    c000a44f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a44d:	89 c5                	mov    ebp,eax
c000a44f:	31 d2                	xor    edx,edx
c000a451:	49                   	dec    ecx
c000a452:	89 e8                	mov    eax,ebp
c000a454:	f7 f3                	div    ebx
c000a456:	39 dd                	cmp    ebp,ebx
c000a458:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a45c:	88 11                	mov    BYTE PTR [ecx],dl
c000a45e:	73 ed                	jae    c000a44d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a460:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a464:	83 c4 20             	add    esp,0x20
c000a467:	5b                   	pop    ebx
c000a468:	5e                   	pop    esi
c000a469:	5f                   	pop    edi
c000a46a:	5d                   	pop    ebp
c000a46b:	c3                   	ret    

c000a46c <Dbg::logc(char)>:
c000a46c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a470:	f6 05 50 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d50,0x10
c000a477:	75 12                	jne    c000a48b <Dbg::logc(char)+0x1f>
c000a479:	ba fd 03 00 00       	mov    edx,0x3fd
c000a47e:	ec                   	in     al,dx
c000a47f:	a8 20                	test   al,0x20
c000a481:	74 fb                	je     c000a47e <Dbg::logc(char)+0x12>
c000a483:	ba f8 03 00 00       	mov    edx,0x3f8
c000a488:	88 c8                	mov    al,cl
c000a48a:	ee                   	out    dx,al
c000a48b:	c3                   	ret    

c000a48c <Dbg::logs(char*)>:
c000a48c:	53                   	push   ebx
c000a48d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a491:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a494:	84 c0                	test   al,al
c000a496:	74 0f                	je     c000a4a7 <Dbg::logs(char*)+0x1b>
c000a498:	50                   	push   eax
c000a499:	43                   	inc    ebx
c000a49a:	e8 cd ff ff ff       	call   c000a46c <Dbg::logc(char)>
c000a49f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4a2:	5a                   	pop    edx
c000a4a3:	84 c0                	test   al,al
c000a4a5:	75 f1                	jne    c000a498 <Dbg::logs(char*)+0xc>
c000a4a7:	5b                   	pop    ebx
c000a4a8:	c3                   	ret    

c000a4a9 <Dbg::logWriteInt(unsigned int)>:
c000a4a9:	83 ec 10             	sub    esp,0x10
c000a4ac:	6a 0a                	push   0xa
c000a4ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4b2:	50                   	push   eax
c000a4b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4b7:	50                   	push   eax
c000a4b8:	e8 44 ff ff ff       	call   c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4bd:	50                   	push   eax
c000a4be:	e8 c9 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a4c3:	83 c4 20             	add    esp,0x20
c000a4c6:	c3                   	ret    

c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4ce:	50                   	push   eax
c000a4cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4d3:	50                   	push   eax
c000a4d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4d8:	52                   	push   edx
c000a4d9:	e8 23 ff ff ff       	call   c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4de:	50                   	push   eax
c000a4df:	e8 a8 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a4e4:	83 c4 20             	add    esp,0x20
c000a4e7:	c3                   	ret    

c000a4e8 <Dbg::kprintf(char const*, ...)>:
c000a4e8:	55                   	push   ebp
c000a4e9:	57                   	push   edi
c000a4ea:	56                   	push   esi
c000a4eb:	53                   	push   ebx
c000a4ec:	83 ec 0c             	sub    esp,0xc
c000a4ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4f3:	f6 05 50 0d 02 c0 10 	test   BYTE PTR ds:0xc0020d50,0x10
c000a4fa:	74 08                	je     c000a504 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4fc:	83 c4 0c             	add    esp,0xc
c000a4ff:	5b                   	pop    ebx
c000a500:	5e                   	pop    esi
c000a501:	5f                   	pop    edi
c000a502:	5d                   	pop    ebp
c000a503:	c3                   	ret    
c000a504:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a508:	31 ff                	xor    edi,edi
c000a50a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a50e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a511:	84 c0                	test   al,al
c000a513:	74 e7                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x14>
c000a515:	8d 77 01             	lea    esi,[edi+0x1]
c000a518:	3c 25                	cmp    al,0x25
c000a51a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a51d:	75 47                	jne    c000a566 <Dbg::kprintf(char const*, ...)+0x7e>
c000a51f:	83 c7 02             	add    edi,0x2
c000a522:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a525:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a528:	83 e8 25             	sub    eax,0x25
c000a52b:	3c 53                	cmp    al,0x53
c000a52d:	0f 87 d2 00 00 00    	ja     c000a605 <Dbg::kprintf(char const*, ...)+0x11d>
c000a533:	25 ff 00 00 00       	and    eax,0xff
c000a538:	ff 24 85 ec dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2314]
c000a53f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a543:	89 c8                	mov    eax,ecx
c000a545:	83 c1 04             	add    ecx,0x4
c000a548:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a54c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a54e:	55                   	push   ebp
c000a54f:	e8 55 ff ff ff       	call   c000a4a9 <Dbg::logWriteInt(unsigned int)>
c000a554:	58                   	pop    eax
c000a555:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a558:	84 c0                	test   al,al
c000a55a:	74 a0                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x14>
c000a55c:	8d 77 01             	lea    esi,[edi+0x1]
c000a55f:	3c 25                	cmp    al,0x25
c000a561:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a564:	74 b9                	je     c000a51f <Dbg::kprintf(char const*, ...)+0x37>
c000a566:	50                   	push   eax
c000a567:	89 f7                	mov    edi,esi
c000a569:	e8 fe fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a56e:	89 ee                	mov    esi,ebp
c000a570:	58                   	pop    eax
c000a571:	eb e2                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a573:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a577:	89 c8                	mov    eax,ecx
c000a579:	83 c1 04             	add    ecx,0x4
c000a57c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a57e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a582:	50                   	push   eax
c000a583:	e8 04 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a588:	58                   	pop    eax
c000a589:	eb ca                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a58b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a58f:	89 d0                	mov    eax,edx
c000a591:	83 c2 04             	add    edx,0x4
c000a594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a598:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59a:	50                   	push   eax
c000a59b:	e8 09 ff ff ff       	call   c000a4a9 <Dbg::logWriteInt(unsigned int)>
c000a5a0:	58                   	pop    eax
c000a5a1:	eb b2                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5a7:	89 d0                	mov    eax,edx
c000a5a9:	83 c2 04             	add    edx,0x4
c000a5ac:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5b3:	50                   	push   eax
c000a5b4:	e8 b3 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a5b9:	58                   	pop    eax
c000a5ba:	eb 99                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5c0:	89 c8                	mov    eax,ecx
c000a5c2:	83 c1 04             	add    ecx,0x4
c000a5c5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5c9:	6a 10                	push   0x10
c000a5cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5cd:	51                   	push   ecx
c000a5ce:	e8 f4 fe ff ff       	call   c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5d3:	5d                   	pop    ebp
c000a5d4:	58                   	pop    eax
c000a5d5:	e9 7b ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5de:	89 d0                	mov    eax,edx
c000a5e0:	83 c2 08             	add    edx,0x8
c000a5e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5e7:	6a 10                	push   0x10
c000a5e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5eb:	50                   	push   eax
c000a5ec:	e8 d6 fe ff ff       	call   c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5f1:	58                   	pop    eax
c000a5f2:	5a                   	pop    edx
c000a5f3:	e9 5d ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f8:	6a 25                	push   0x25
c000a5fa:	e8 6d fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a5ff:	5a                   	pop    edx
c000a600:	e9 50 ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a605:	6a 25                	push   0x25
c000a607:	e8 60 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a60c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a610:	50                   	push   eax
c000a611:	e8 56 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a616:	5a                   	pop    edx
c000a617:	59                   	pop    ecx
c000a618:	e9 38 ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a61d:	90                   	nop

c000a61e <File::read(unsigned long long, void*, int*)>:
c000a61e:	53                   	push   ebx
c000a61f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a623:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a627:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a62e:	3c 19                	cmp    al,0x19
c000a630:	77 35                	ja     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a632:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000a639:	85 c0                	test   eax,eax
c000a63b:	74 2a                	je     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a63d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a643:	85 c0                	test   eax,eax
c000a645:	74 20                	je     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a647:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a64b:	74 21                	je     c000a66e <File::read(unsigned long long, void*, int*)+0x50>
c000a64d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a64f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a653:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a65d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a661:	5b                   	pop    ebx
c000a662:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a665:	ff e0                	jmp    eax
c000a667:	b8 0b 00 00 00       	mov    eax,0xb
c000a66c:	eb 05                	jmp    c000a673 <File::read(unsigned long long, void*, int*)+0x55>
c000a66e:	b8 05 00 00 00       	mov    eax,0x5
c000a673:	5b                   	pop    ebx
c000a674:	c3                   	ret    
c000a675:	90                   	nop

c000a676 <File::write(unsigned long long, void*, int*)>:
c000a676:	53                   	push   ebx
c000a677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a67b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a67f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a686:	3c 19                	cmp    al,0x19
c000a688:	77 35                	ja     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a68a:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000a691:	85 c0                	test   eax,eax
c000a693:	74 2a                	je     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a695:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a69b:	85 c0                	test   eax,eax
c000a69d:	74 20                	je     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a69f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6a3:	74 21                	je     c000a6c6 <File::write(unsigned long long, void*, int*)+0x50>
c000a6a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6ab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6b9:	5b                   	pop    ebx
c000a6ba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6bd:	ff e0                	jmp    eax
c000a6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000a6c4:	eb 05                	jmp    c000a6cb <File::write(unsigned long long, void*, int*)+0x55>
c000a6c6:	b8 05 00 00 00       	mov    eax,0x5
c000a6cb:	5b                   	pop    ebx
c000a6cc:	c3                   	ret    
c000a6cd:	90                   	nop

c000a6ce <Directory::read(unsigned long long, void*, int*)>:
c000a6ce:	53                   	push   ebx
c000a6cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6de:	3c 19                	cmp    al,0x19
c000a6e0:	77 35                	ja     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e2:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000a6e9:	85 c0                	test   eax,eax
c000a6eb:	74 2a                	je     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6f3:	85 c0                	test   eax,eax
c000a6f5:	74 20                	je     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6fb:	74 21                	je     c000a71e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a703:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a709:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a70d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a711:	5b                   	pop    ebx
c000a712:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a715:	ff e0                	jmp    eax
c000a717:	b8 0b 00 00 00       	mov    eax,0xb
c000a71c:	eb 05                	jmp    c000a723 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a71e:	b8 05 00 00 00       	mov    eax,0x5
c000a723:	5b                   	pop    ebx
c000a724:	c3                   	ret    
c000a725:	90                   	nop

c000a726 <Directory::write(unsigned long long, void*, int*)>:
c000a726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a72a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a731:	b8 0b 00 00 00       	mov    eax,0xb
c000a736:	80 fa 19             	cmp    dl,0x19
c000a739:	77 18                	ja     c000a753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a73b:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000a742:	85 d2                	test   edx,edx
c000a744:	74 0d                	je     c000a753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a746:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a74d:	19 c0                	sbb    eax,eax
c000a74f:	83 e0 0a             	and    eax,0xa
c000a752:	40                   	inc    eax
c000a753:	c3                   	ret    

c000a754 <File::isAtty()>:
c000a754:	31 c0                	xor    eax,eax
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <Directory::isAtty()>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	c3                   	ret    
c000a75b:	90                   	nop

c000a75c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a75c:	b8 0a 00 00 00       	mov    eax,0xa
c000a761:	c3                   	ret    

c000a762 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a762:	b8 0a 00 00 00       	mov    eax,0xa
c000a767:	c3                   	ret    

c000a768 <Filesystem::allocateSwapfile(char const*, int)>:
c000a768:	31 c0                	xor    eax,eax
c000a76a:	31 d2                	xor    edx,edx
c000a76c:	c3                   	ret    
c000a76d:	90                   	nop

c000a76e <File::~File()>:
c000a76e:	83 ec 0c             	sub    esp,0xc
c000a771:	ba ac de 01 c0       	mov    edx,0xc001deac
c000a776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77a:	89 10                	mov    DWORD PTR [eax],edx
c000a77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	50                   	push   eax
c000a784:	e8 ab e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a789:	83 c4 10             	add    esp,0x10
c000a78c:	90                   	nop
c000a78d:	83 c4 0c             	add    esp,0xc
c000a790:	c3                   	ret    
c000a791:	90                   	nop

c000a792 <File::~File()>:
c000a792:	83 ec 0c             	sub    esp,0xc
c000a795:	83 ec 0c             	sub    esp,0xc
c000a798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79c:	e8 cd ff ff ff       	call   c000a76e <File::~File()>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	83 ec 08             	sub    esp,0x8
c000a7a7:	68 14 01 00 00       	push   0x114
c000a7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b0:	e8 3d fc ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a7b5:	83 c4 10             	add    esp,0x10
c000a7b8:	83 c4 0c             	add    esp,0xc
c000a7bb:	c3                   	ret    

c000a7bc <Directory::~Directory()>:
c000a7bc:	83 ec 0c             	sub    esp,0xc
c000a7bf:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000a7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ce:	83 ec 0c             	sub    esp,0xc
c000a7d1:	50                   	push   eax
c000a7d2:	e8 5d e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a7d7:	83 c4 10             	add    esp,0x10
c000a7da:	90                   	nop
c000a7db:	83 c4 0c             	add    esp,0xc
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <Directory::~Directory()>:
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	83 ec 0c             	sub    esp,0xc
c000a7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ea:	e8 cd ff ff ff       	call   c000a7bc <Directory::~Directory()>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	83 ec 08             	sub    esp,0x8
c000a7f5:	68 14 01 00 00       	push   0x114
c000a7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7fe:	e8 ef fb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	83 c4 0c             	add    esp,0xc
c000a809:	c3                   	ret    

c000a80a <Filesystem::Filesystem()>:
c000a80a:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000a80f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a813:	89 10                	mov    DWORD PTR [eax],edx
c000a815:	8b 15 34 0e 02 c0    	mov    edx,DWORD PTR ds:0xc0020e34
c000a81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a81f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a826:	a3 34 0e 02 c0       	mov    ds:0xc0020e34,eax
c000a82b:	90                   	nop
c000a82c:	c3                   	ret    
c000a82d:	90                   	nop

c000a82e <Filesystem::~Filesystem()>:
c000a82e:	ba 44 de 01 c0       	mov    edx,0xc001de44
c000a833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a837:	89 10                	mov    DWORD PTR [eax],edx
c000a839:	90                   	nop
c000a83a:	c3                   	ret    
c000a83b:	90                   	nop

c000a83c <Filesystem::~Filesystem()>:
c000a83c:	83 ec 0c             	sub    esp,0xc
c000a83f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a843:	e8 e6 ff ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c000a848:	83 c4 04             	add    esp,0x4
c000a84b:	83 ec 08             	sub    esp,0x8
c000a84e:	6a 08                	push   0x8
c000a850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a854:	e8 99 fb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 c4 0c             	add    esp,0xc
c000a85f:	c3                   	ret    

c000a860 <Fs::getcwd(Process*, char*, int)>:
c000a860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a864:	31 c0                	xor    eax,eax
c000a866:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a869:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a86d:	7d 15                	jge    c000a884 <Fs::getcwd(Process*, char*, int)+0x24>
c000a86f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a873:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a87a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a87d:	84 c9                	test   cl,cl
c000a87f:	74 06                	je     c000a887 <Fs::getcwd(Process*, char*, int)+0x27>
c000a881:	40                   	inc    eax
c000a882:	eb e2                	jmp    c000a866 <Fs::getcwd(Process*, char*, int)+0x6>
c000a884:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a887:	31 c0                	xor    eax,eax
c000a889:	c3                   	ret    

c000a88a <Fs::initVFS()>:
c000a88a:	83 ec 18             	sub    esp,0x18
c000a88d:	6a 08                	push   0x8
c000a88f:	e8 25 cf ff ff       	call   c00077b9 <malloc>
c000a894:	89 04 24             	mov    DWORD PTR [esp],eax
c000a897:	e8 8c c9 00 00       	call   c0017228 <FAT::FAT()>
c000a89c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8a3:	e8 11 cf ff ff       	call   c00077b9 <malloc>
c000a8a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ab:	e8 d4 d6 00 00       	call   c0017f84 <ISO9660::ISO9660()>
c000a8b0:	83 c4 1c             	add    esp,0x1c
c000a8b3:	c3                   	ret    

c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8b4:	55                   	push   ebp
c000a8b5:	57                   	push   edi
c000a8b6:	56                   	push   esi
c000a8b7:	53                   	push   ebx
c000a8b8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8be:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8c5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8cc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8d3:	68 00 04 00 00       	push   0x400
c000a8d8:	6a 00                	push   0x0
c000a8da:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8de:	56                   	push   esi
c000a8df:	e8 ec 5b ff ff       	call   c00004d0 <memset>
c000a8e4:	83 c4 10             	add    esp,0x10
c000a8e7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8eb:	75 0b                	jne    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8ed:	50                   	push   eax
c000a8ee:	50                   	push   eax
c000a8ef:	57                   	push   edi
c000a8f0:	56                   	push   esi
c000a8f1:	e8 0a 5d ff ff       	call   c0000600 <strcpy>
c000a8f6:	eb 41                	jmp    c000a939 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8f8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8fa:	3c 5c                	cmp    al,0x5c
c000a8fc:	74 04                	je     c000a902 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8fe:	3c 2f                	cmp    al,0x2f
c000a900:	75 18                	jne    c000a91a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a902:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a905:	3c 60                	cmp    al,0x60
c000a907:	7e 03                	jle    c000a90c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a909:	83 e8 20             	sub    eax,0x20
c000a90c:	88 04 24             	mov    BYTE PTR [esp],al
c000a90f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a916:	50                   	push   eax
c000a917:	50                   	push   eax
c000a918:	eb 18                	jmp    c000a932 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a91a:	50                   	push   eax
c000a91b:	50                   	push   eax
c000a91c:	55                   	push   ebp
c000a91d:	56                   	push   esi
c000a91e:	e8 dd 5c ff ff       	call   c0000600 <strcpy>
c000a923:	5a                   	pop    edx
c000a924:	59                   	pop    ecx
c000a925:	68 8a ed 01 c0       	push   0xc001ed8a
c000a92a:	56                   	push   esi
c000a92b:	e8 90 5e ff ff       	call   c00007c0 <strcat>
c000a930:	5d                   	pop    ebp
c000a931:	58                   	pop    eax
c000a932:	57                   	push   edi
c000a933:	56                   	push   esi
c000a934:	e8 87 5e ff ff       	call   c00007c0 <strcat>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a93f:	3c 60                	cmp    al,0x60
c000a941:	7e 03                	jle    c000a946 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a943:	83 e8 20             	sub    eax,0x20
c000a946:	88 04 24             	mov    BYTE PTR [esp],al
c000a949:	88 03                	mov    BYTE PTR [ebx],al
c000a94b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a952:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a958:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a95c:	bf 03 00 00 00       	mov    edi,0x3
c000a961:	b8 03 00 00 00       	mov    eax,0x3
c000a966:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a969:	84 d2                	test   dl,dl
c000a96b:	0f 84 91 00 00 00    	je     c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a971:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a974:	80 fa 5c             	cmp    dl,0x5c
c000a977:	74 05                	je     c000a97e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a979:	80 fa 2f             	cmp    dl,0x2f
c000a97c:	75 12                	jne    c000a990 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a97e:	89 c5                	mov    ebp,eax
c000a980:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a985:	74 09                	je     c000a990 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a987:	40                   	inc    eax
c000a988:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a98c:	89 cf                	mov    edi,ecx
c000a98e:	eb d6                	jmp    c000a966 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a990:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a995:	75 5b                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a997:	80 fa 2e             	cmp    dl,0x2e
c000a99a:	75 56                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a99c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9a0:	74 19                	je     c000a9bb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9a7:	74 53                	je     c000a9fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9a9:	89 f9                	mov    ecx,edi
c000a9ab:	41                   	inc    ecx
c000a9ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9af:	80 fa 2f             	cmp    dl,0x2f
c000a9b2:	74 f7                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b4:	80 fa 5c             	cmp    dl,0x5c
c000a9b7:	74 f2                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b9:	eb d1                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9c0:	74 3a                	je     c000a9fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9c2:	83 f8 03             	cmp    eax,0x3
c000a9c5:	74 c5                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9c7:	41                   	inc    ecx
c000a9c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9cb:	80 fa 2f             	cmp    dl,0x2f
c000a9ce:	74 f7                	je     c000a9c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9d0:	80 fa 5c             	cmp    dl,0x5c
c000a9d3:	74 f2                	je     c000a9c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9d5:	48                   	dec    eax
c000a9d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9da:	75 06                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9e0:	eb f3                	jmp    c000a9d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9e6:	74 07                	je     c000a9ef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9ec:	48                   	dec    eax
c000a9ed:	eb f3                	jmp    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 9a                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	80 fa 2f             	cmp    dl,0x2f
c000a9f5:	74 95                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f7:	80 fa 5c             	cmp    dl,0x5c
c000a9fa:	74 90                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ff:	40                   	inc    eax
c000aa00:	eb 8a                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa06:	83 ec 0c             	sub    esp,0xc
c000aa09:	53                   	push   ebx
c000aa0a:	e8 31 5b ff ff       	call   c0000540 <strlen>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa17:	75 26                	jne    c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa19:	83 ec 0c             	sub    esp,0xc
c000aa1c:	53                   	push   ebx
c000aa1d:	e8 1e 5b ff ff       	call   c0000540 <strlen>
c000aa22:	83 c4 10             	add    esp,0x10
c000aa25:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa2a:	74 26                	je     c000aa52 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa2c:	83 ec 0c             	sub    esp,0xc
c000aa2f:	53                   	push   ebx
c000aa30:	e8 0b 5b ff ff       	call   c0000540 <strlen>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa3d:	eb c7                	jmp    c000aa06 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa3f:	83 ec 0c             	sub    esp,0xc
c000aa42:	53                   	push   ebx
c000aa43:	e8 f8 5a ff ff       	call   c0000540 <strlen>
c000aa48:	83 c4 10             	add    esp,0x10
c000aa4b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa50:	74 c7                	je     c000aa19 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa52:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa58:	5b                   	pop    ebx
c000aa59:	5e                   	pop    esi
c000aa5a:	5f                   	pop    edi
c000aa5b:	5d                   	pop    ebp
c000aa5c:	c3                   	ret    
c000aa5d:	90                   	nop

c000aa5e <File::File(char const*, Process*)>:
c000aa5e:	83 ec 0c             	sub    esp,0xc
c000aa61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	6a 00                	push   0x0
c000aa6a:	50                   	push   eax
c000aa6b:	e8 e2 e3 ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000aa70:	83 c4 10             	add    esp,0x10
c000aa73:	ba ac de 01 c0       	mov    edx,0xc001deac
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	89 10                	mov    DWORD PTR [eax],edx
c000aa7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa82:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8c:	83 c0 0d             	add    eax,0xd
c000aa8f:	83 ec 04             	sub    esp,0x4
c000aa92:	52                   	push   edx
c000aa93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa97:	50                   	push   eax
c000aa98:	e8 17 fe ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa9d:	83 c4 10             	add    esp,0x10
c000aaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aaa7:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aac6:	25 ff 00 00 00       	and    eax,0xff
c000aacb:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000aad2:	85 c0                	test   eax,eax
c000aad4:	74 42                	je     c000ab18 <File::File(char const*, Process*)+0xba>
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aae0:	25 ff 00 00 00       	and    eax,0xff
c000aae5:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000aaec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaf2:	85 c0                	test   eax,eax
c000aaf4:	75 22                	jne    c000ab18 <File::File(char const*, Process*)+0xba>
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab00:	25 ff 00 00 00       	and    eax,0xff
c000ab05:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000ab0c:	83 ec 0c             	sub    esp,0xc
c000ab0f:	50                   	push   eax
c000ab10:	e8 21 20 00 00       	call   c000cb36 <LogicalDisk::mount()>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	90                   	nop
c000ab19:	83 c4 0c             	add    esp,0xc
c000ab1c:	c3                   	ret    
c000ab1d:	90                   	nop

c000ab1e <File::open(FileOpenMode)>:
c000ab1e:	53                   	push   ebx
c000ab1f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab24:	83 ec 08             	sub    esp,0x8
c000ab27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab2b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab32:	80 fa 19             	cmp    dl,0x19
c000ab35:	77 40                	ja     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab37:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000ab3e:	85 d2                	test   edx,edx
c000ab40:	74 35                	je     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab42:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab48:	85 d2                	test   edx,edx
c000ab4a:	74 2b                	je     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab4c:	b8 06 00 00 00       	mov    eax,0x6
c000ab51:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab55:	75 20                	jne    c000ab77 <File::open(FileOpenMode)+0x59>
c000ab57:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab59:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab63:	51                   	push   ecx
c000ab64:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab67:	51                   	push   ecx
c000ab68:	52                   	push   edx
c000ab69:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	85 c0                	test   eax,eax
c000ab71:	75 04                	jne    c000ab77 <File::open(FileOpenMode)+0x59>
c000ab73:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab77:	83 c4 08             	add    esp,0x8
c000ab7a:	5b                   	pop    ebx
c000ab7b:	c3                   	ret    

c000ab7c <File::close()>:
c000ab7c:	53                   	push   ebx
c000ab7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab82:	83 ec 08             	sub    esp,0x8
c000ab85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab89:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab90:	80 fa 19             	cmp    dl,0x19
c000ab93:	77 41                	ja     c000abd6 <File::close()+0x5a>
c000ab95:	8b 1c 95 a0 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd60]
c000ab9c:	85 db                	test   ebx,ebx
c000ab9e:	74 36                	je     c000abd6 <File::close()+0x5a>
c000aba0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000aba7:	74 2d                	je     c000abd6 <File::close()+0x5a>
c000aba9:	b8 05 00 00 00       	mov    eax,0x5
c000abae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abb2:	74 22                	je     c000abd6 <File::close()+0x5a>
c000abb4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abb8:	8b 04 95 a0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd60]
c000abbf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abc5:	53                   	push   ebx
c000abc6:	53                   	push   ebx
c000abc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abcf:	50                   	push   eax
c000abd0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	83 c4 08             	add    esp,0x8
c000abd9:	5b                   	pop    ebx
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <File::seek(unsigned long long)>:
c000abdc:	56                   	push   esi
c000abdd:	53                   	push   ebx
c000abde:	b8 0b 00 00 00       	mov    eax,0xb
c000abe3:	51                   	push   ecx
c000abe4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abf7:	80 fa 19             	cmp    dl,0x19
c000abfa:	77 31                	ja     c000ac2d <File::seek(unsigned long long)+0x51>
c000abfc:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000ac03:	85 d2                	test   edx,edx
c000ac05:	74 26                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac07:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac0d:	85 d2                	test   edx,edx
c000ac0f:	74 1c                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac11:	b8 05 00 00 00       	mov    eax,0x5
c000ac16:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac1a:	74 11                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac1c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac1e:	53                   	push   ebx
c000ac1f:	51                   	push   ecx
c000ac20:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac26:	52                   	push   edx
c000ac27:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	5a                   	pop    edx
c000ac2e:	5b                   	pop    ebx
c000ac2f:	5e                   	pop    esi
c000ac30:	c3                   	ret    
c000ac31:	90                   	nop

c000ac32 <File::tell(unsigned long long*)>:
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac3e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac45:	80 fa 19             	cmp    dl,0x19
c000ac48:	77 34                	ja     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac4a:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000ac51:	85 d2                	test   edx,edx
c000ac53:	74 29                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac55:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac5b:	85 d2                	test   edx,edx
c000ac5d:	74 1f                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac5f:	b8 05 00 00 00       	mov    eax,0x5
c000ac64:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac68:	74 14                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac6a:	50                   	push   eax
c000ac6b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac71:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac77:	52                   	push   edx
c000ac78:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 c4 0c             	add    esp,0xc
c000ac81:	c3                   	ret    

c000ac82 <File::rewind()>:
c000ac82:	83 ec 10             	sub    esp,0x10
c000ac85:	6a 00                	push   0x0
c000ac87:	6a 00                	push   0x0
c000ac89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8d:	e8 4a ff ff ff       	call   c000abdc <File::seek(unsigned long long)>
c000ac92:	83 c4 1c             	add    esp,0x1c
c000ac95:	c3                   	ret    

c000ac96 <File::unlink()>:
c000ac96:	83 ec 0c             	sub    esp,0xc
c000ac99:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aca9:	80 f9 19             	cmp    cl,0x19
c000acac:	77 2f                	ja     c000acdd <File::unlink()+0x47>
c000acae:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000acb5:	85 c9                	test   ecx,ecx
c000acb7:	74 24                	je     c000acdd <File::unlink()+0x47>
c000acb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acbf:	85 c9                	test   ecx,ecx
c000acc1:	74 1a                	je     c000acdd <File::unlink()+0x47>
c000acc3:	b8 06 00 00 00       	mov    eax,0x6
c000acc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000accc:	75 0f                	jne    c000acdd <File::unlink()+0x47>
c000acce:	83 c2 0d             	add    edx,0xd
c000acd1:	50                   	push   eax
c000acd2:	50                   	push   eax
c000acd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acd5:	52                   	push   edx
c000acd6:	51                   	push   ecx
c000acd7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	83 c4 0c             	add    esp,0xc
c000ace0:	c3                   	ret    
c000ace1:	90                   	nop

c000ace2 <File::rename(char const*)>:
c000ace2:	83 ec 0c             	sub    esp,0xc
c000ace5:	b8 0b 00 00 00       	mov    eax,0xb
c000acea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acf5:	80 f9 19             	cmp    cl,0x19
c000acf8:	77 32                	ja     c000ad2c <File::rename(char const*)+0x4a>
c000acfa:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000ad01:	85 c9                	test   ecx,ecx
c000ad03:	74 27                	je     c000ad2c <File::rename(char const*)+0x4a>
c000ad05:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad0b:	85 c9                	test   ecx,ecx
c000ad0d:	74 1d                	je     c000ad2c <File::rename(char const*)+0x4a>
c000ad0f:	b8 06 00 00 00       	mov    eax,0x6
c000ad14:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad18:	75 12                	jne    c000ad2c <File::rename(char const*)+0x4a>
c000ad1a:	83 c2 0d             	add    edx,0xd
c000ad1d:	50                   	push   eax
c000ad1e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad24:	52                   	push   edx
c000ad25:	51                   	push   ecx
c000ad26:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad29:	83 c4 10             	add    esp,0x10
c000ad2c:	83 c4 0c             	add    esp,0xc
c000ad2f:	c3                   	ret    

c000ad30 <File::chfatattr(unsigned char, unsigned char)>:
c000ad30:	57                   	push   edi
c000ad31:	b8 0b 00 00 00       	mov    eax,0xb
c000ad36:	56                   	push   esi
c000ad37:	53                   	push   ebx
c000ad38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad47:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad4b:	80 f9 19             	cmp    cl,0x19
c000ad4e:	77 37                	ja     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad50:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000ad57:	85 c9                	test   ecx,ecx
c000ad59:	74 2c                	je     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad61:	85 c9                	test   ecx,ecx
c000ad63:	74 22                	je     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad65:	b8 06 00 00 00       	mov    eax,0x6
c000ad6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad6e:	75 17                	jne    c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad70:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad72:	89 f0                	mov    eax,esi
c000ad74:	83 c2 0d             	add    edx,0xd
c000ad77:	0f b6 f0             	movzx  esi,al
c000ad7a:	0f b6 db             	movzx  ebx,bl
c000ad7d:	56                   	push   esi
c000ad7e:	53                   	push   ebx
c000ad7f:	52                   	push   edx
c000ad80:	51                   	push   ecx
c000ad81:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	5b                   	pop    ebx
c000ad88:	5e                   	pop    esi
c000ad89:	5f                   	pop    edi
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <File::exists()>:
c000ad8c:	83 ec 0c             	sub    esp,0xc
c000ad8f:	31 c0                	xor    eax,eax
c000ad91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad95:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad9c:	80 f9 19             	cmp    cl,0x19
c000ad9f:	77 24                	ja     c000adc5 <File::exists()+0x39>
c000ada1:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000ada8:	85 c9                	test   ecx,ecx
c000adaa:	74 19                	je     c000adc5 <File::exists()+0x39>
c000adac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adb2:	85 c9                	test   ecx,ecx
c000adb4:	74 0f                	je     c000adc5 <File::exists()+0x39>
c000adb6:	83 c2 0d             	add    edx,0xd
c000adb9:	50                   	push   eax
c000adba:	50                   	push   eax
c000adbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adbd:	52                   	push   edx
c000adbe:	51                   	push   ecx
c000adbf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adc2:	83 c4 10             	add    esp,0x10
c000adc5:	83 c4 0c             	add    esp,0xc
c000adc8:	c3                   	ret    
c000adc9:	90                   	nop

c000adca <File::stat(unsigned long long*, bool*)>:
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	50                   	push   eax
c000adcd:	b8 0b 00 00 00       	mov    eax,0xb
c000add2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ade1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ade5:	80 f9 19             	cmp    cl,0x19
c000ade8:	77 3d                	ja     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adea:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000adf1:	85 c9                	test   ecx,ecx
c000adf3:	74 32                	je     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adfb:	85 c9                	test   ecx,ecx
c000adfd:	74 28                	je     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae01:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae05:	74 13                	je     c000ae1a <File::stat(unsigned long long*, bool*)+0x50>
c000ae07:	83 ec 04             	sub    esp,0x4
c000ae0a:	56                   	push   esi
c000ae0b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae11:	51                   	push   ecx
c000ae12:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae15:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae18:	eb 0a                	jmp    c000ae24 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae1a:	53                   	push   ebx
c000ae1b:	83 c2 0d             	add    edx,0xd
c000ae1e:	56                   	push   esi
c000ae1f:	52                   	push   edx
c000ae20:	51                   	push   ecx
c000ae21:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	5a                   	pop    edx
c000ae28:	5b                   	pop    ebx
c000ae29:	5e                   	pop    esi
c000ae2a:	c3                   	ret    

c000ae2b <Fs::setcwd(Process*, char*)>:
c000ae2b:	55                   	push   ebp
c000ae2c:	57                   	push   edi
c000ae2d:	56                   	push   esi
c000ae2e:	53                   	push   ebx
c000ae2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae42:	57                   	push   edi
c000ae43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae4e:	56                   	push   esi
c000ae4f:	e8 60 fa ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae54:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae57:	e8 e4 56 ff ff       	call   c0000540 <strlen>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	83 f8 02             	cmp    eax,0x2
c000ae62:	77 15                	ja     c000ae79 <Fs::setcwd(Process*, char*)+0x4e>
c000ae64:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae69:	83 eb 41             	sub    ebx,0x41
c000ae6c:	8b 04 9d a0 32 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcd60]
c000ae73:	85 c0                	test   eax,eax
c000ae75:	75 1c                	jne    c000ae93 <Fs::setcwd(Process*, char*)+0x68>
c000ae77:	eb 2f                	jmp    c000aea8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae79:	83 ec 0c             	sub    esp,0xc
c000ae7c:	56                   	push   esi
c000ae7d:	e8 be 56 ff ff       	call   c0000540 <strlen>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	83 f8 03             	cmp    eax,0x3
c000ae88:	75 57                	jne    c000aee1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae8a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae8f:	75 50                	jne    c000aee1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae91:	eb d1                	jmp    c000ae64 <Fs::setcwd(Process*, char*)+0x39>
c000ae93:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae9a:	75 0c                	jne    c000aea8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae9c:	83 ec 0c             	sub    esp,0xc
c000ae9f:	50                   	push   eax
c000aea0:	e8 91 1c 00 00       	call   c000cb36 <LogicalDisk::mount()>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	b8 03 00 00 00       	mov    eax,0x3
c000aead:	83 fb 19             	cmp    ebx,0x19
c000aeb0:	0f 87 c6 00 00 00    	ja     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aeb6:	8b 14 9d a0 32 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdcd60]
c000aebd:	b8 05 00 00 00       	mov    eax,0x5
c000aec2:	85 d2                	test   edx,edx
c000aec4:	0f 84 b2 00 00 00    	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aeca:	b8 06 00 00 00       	mov    eax,0x6
c000aecf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aed6:	0f 85 92 00 00 00    	jne    c000af6e <Fs::setcwd(Process*, char*)+0x143>
c000aedc:	e9 9b 00 00 00       	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aee1:	83 ec 0c             	sub    esp,0xc
c000aee4:	68 14 01 00 00       	push   0x114
c000aee9:	e8 cb c8 ff ff       	call   c00077b9 <malloc>
c000aeee:	83 c4 0c             	add    esp,0xc
c000aef1:	89 c3                	mov    ebx,eax
c000aef3:	55                   	push   ebp
c000aef4:	56                   	push   esi
c000aef5:	50                   	push   eax
c000aef6:	e8 63 fb ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000aefb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af00:	83 c4 0c             	add    esp,0xc
c000af03:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af07:	50                   	push   eax
c000af08:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af0c:	50                   	push   eax
c000af0d:	53                   	push   ebx
c000af0e:	e8 b7 fe ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	83 f8 02             	cmp    eax,0x2
c000af19:	74 04                	je     c000af1f <Fs::setcwd(Process*, char*)+0xf4>
c000af1b:	85 c0                	test   eax,eax
c000af1d:	74 1c                	je     c000af3b <Fs::setcwd(Process*, char*)+0x110>
c000af1f:	b8 01 00 00 00       	mov    eax,0x1
c000af24:	85 db                	test   ebx,ebx
c000af26:	74 54                	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af2d:	53                   	push   ebx
c000af2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	b8 01 00 00 00       	mov    eax,0x1
c000af39:	eb 41                	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af40:	75 1c                	jne    c000af5e <Fs::setcwd(Process*, char*)+0x133>
c000af42:	b8 02 00 00 00       	mov    eax,0x2
c000af47:	85 db                	test   ebx,ebx
c000af49:	74 31                	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af50:	53                   	push   ebx
c000af51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	b8 02 00 00 00       	mov    eax,0x2
c000af5c:	eb 1e                	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af5e:	85 db                	test   ebx,ebx
c000af60:	74 0c                	je     c000af6e <Fs::setcwd(Process*, char*)+0x143>
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af67:	53                   	push   ebx
c000af68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	50                   	push   eax
c000af6f:	50                   	push   eax
c000af70:	56                   	push   esi
c000af71:	57                   	push   edi
c000af72:	e8 89 56 ff ff       	call   c0000600 <strcpy>
c000af77:	83 c4 10             	add    esp,0x10
c000af7a:	31 c0                	xor    eax,eax
c000af7c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af82:	5b                   	pop    ebx
c000af83:	5e                   	pop    esi
c000af84:	5f                   	pop    edi
c000af85:	5d                   	pop    ebp
c000af86:	c3                   	ret    
c000af87:	90                   	nop

c000af88 <Directory::Directory(char const*, Process*)>:
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8f:	83 ec 08             	sub    esp,0x8
c000af92:	6a 00                	push   0x0
c000af94:	50                   	push   eax
c000af95:	e8 b8 de ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	ba c8 de 01 c0       	mov    edx,0xc001dec8
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	89 10                	mov    DWORD PTR [eax],edx
c000afa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb6:	83 c0 0d             	add    eax,0xd
c000afb9:	83 ec 04             	sub    esp,0x4
c000afbc:	52                   	push   edx
c000afbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afc1:	50                   	push   eax
c000afc2:	e8 ed f8 ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afce:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afd1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aff0:	25 ff 00 00 00       	and    eax,0xff
c000aff5:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000affc:	85 c0                	test   eax,eax
c000affe:	74 42                	je     c000b042 <Directory::Directory(char const*, Process*)+0xba>
c000b000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b004:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b00a:	25 ff 00 00 00       	and    eax,0xff
c000b00f:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000b016:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b01c:	85 c0                	test   eax,eax
c000b01e:	75 22                	jne    c000b042 <Directory::Directory(char const*, Process*)+0xba>
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b02a:	25 ff 00 00 00       	and    eax,0xff
c000b02f:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c000b036:	83 ec 0c             	sub    esp,0xc
c000b039:	50                   	push   eax
c000b03a:	e8 f7 1a 00 00       	call   c000cb36 <LogicalDisk::mount()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	90                   	nop
c000b043:	83 c4 0c             	add    esp,0xc
c000b046:	c3                   	ret    
c000b047:	90                   	nop

c000b048 <Directory::open()>:
c000b048:	53                   	push   ebx
c000b049:	b8 0b 00 00 00       	mov    eax,0xb
c000b04e:	83 ec 08             	sub    esp,0x8
c000b051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b055:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b05c:	80 fa 19             	cmp    dl,0x19
c000b05f:	77 3d                	ja     c000b09e <Directory::open()+0x56>
c000b061:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000b068:	85 d2                	test   edx,edx
c000b06a:	74 32                	je     c000b09e <Directory::open()+0x56>
c000b06c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b072:	85 d2                	test   edx,edx
c000b074:	74 28                	je     c000b09e <Directory::open()+0x56>
c000b076:	b8 06 00 00 00       	mov    eax,0x6
c000b07b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b07f:	75 1d                	jne    c000b09e <Directory::open()+0x56>
c000b081:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b087:	50                   	push   eax
c000b088:	8b 02                	mov    eax,DWORD PTR [edx]
c000b08a:	51                   	push   ecx
c000b08b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b08e:	51                   	push   ecx
c000b08f:	52                   	push   edx
c000b090:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	85 c0                	test   eax,eax
c000b098:	75 04                	jne    c000b09e <Directory::open()+0x56>
c000b09a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b09e:	83 c4 08             	add    esp,0x8
c000b0a1:	5b                   	pop    ebx
c000b0a2:	c3                   	ret    
c000b0a3:	90                   	nop

c000b0a4 <Directory::close()>:
c000b0a4:	53                   	push   ebx
c000b0a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0aa:	83 ec 08             	sub    esp,0x8
c000b0ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0b8:	80 fa 19             	cmp    dl,0x19
c000b0bb:	77 41                	ja     c000b0fe <Directory::close()+0x5a>
c000b0bd:	8b 1c 95 a0 32 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcd60]
c000b0c4:	85 db                	test   ebx,ebx
c000b0c6:	74 36                	je     c000b0fe <Directory::close()+0x5a>
c000b0c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0cf:	74 2d                	je     c000b0fe <Directory::close()+0x5a>
c000b0d1:	b8 05 00 00 00       	mov    eax,0x5
c000b0d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0da:	74 22                	je     c000b0fe <Directory::close()+0x5a>
c000b0dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0e0:	8b 04 95 a0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd60]
c000b0e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0ed:	53                   	push   ebx
c000b0ee:	53                   	push   ebx
c000b0ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0f7:	50                   	push   eax
c000b0f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0fb:	83 c4 10             	add    esp,0x10
c000b0fe:	83 c4 08             	add    esp,0x8
c000b101:	5b                   	pop    ebx
c000b102:	c3                   	ret    
c000b103:	90                   	nop

c000b104 <Directory::unlink()>:
c000b104:	83 ec 0c             	sub    esp,0xc
c000b107:	b8 0b 00 00 00       	mov    eax,0xb
c000b10c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b110:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b117:	80 f9 19             	cmp    cl,0x19
c000b11a:	77 2f                	ja     c000b14b <Directory::unlink()+0x47>
c000b11c:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000b123:	85 c9                	test   ecx,ecx
c000b125:	74 24                	je     c000b14b <Directory::unlink()+0x47>
c000b127:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b12d:	85 c9                	test   ecx,ecx
c000b12f:	74 1a                	je     c000b14b <Directory::unlink()+0x47>
c000b131:	b8 06 00 00 00       	mov    eax,0x6
c000b136:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b13a:	75 0f                	jne    c000b14b <Directory::unlink()+0x47>
c000b13c:	83 c2 0d             	add    edx,0xd
c000b13f:	50                   	push   eax
c000b140:	50                   	push   eax
c000b141:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b143:	52                   	push   edx
c000b144:	51                   	push   ecx
c000b145:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	83 c4 0c             	add    esp,0xc
c000b14e:	c3                   	ret    
c000b14f:	90                   	nop

c000b150 <Directory::rename(char const*)>:
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	b8 0b 00 00 00       	mov    eax,0xb
c000b158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b15c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b163:	80 f9 19             	cmp    cl,0x19
c000b166:	77 32                	ja     c000b19a <Directory::rename(char const*)+0x4a>
c000b168:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000b16f:	85 c9                	test   ecx,ecx
c000b171:	74 27                	je     c000b19a <Directory::rename(char const*)+0x4a>
c000b173:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b179:	85 c9                	test   ecx,ecx
c000b17b:	74 1d                	je     c000b19a <Directory::rename(char const*)+0x4a>
c000b17d:	b8 06 00 00 00       	mov    eax,0x6
c000b182:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b186:	75 12                	jne    c000b19a <Directory::rename(char const*)+0x4a>
c000b188:	83 c2 0d             	add    edx,0xd
c000b18b:	50                   	push   eax
c000b18c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b192:	52                   	push   edx
c000b193:	51                   	push   ecx
c000b194:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	83 c4 0c             	add    esp,0xc
c000b19d:	c3                   	ret    

c000b19e <Directory::exists()>:
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	31 c0                	xor    eax,eax
c000b1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ae:	80 f9 19             	cmp    cl,0x19
c000b1b1:	77 24                	ja     c000b1d7 <Directory::exists()+0x39>
c000b1b3:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000b1ba:	85 c9                	test   ecx,ecx
c000b1bc:	74 19                	je     c000b1d7 <Directory::exists()+0x39>
c000b1be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1c4:	85 c9                	test   ecx,ecx
c000b1c6:	74 0f                	je     c000b1d7 <Directory::exists()+0x39>
c000b1c8:	83 c2 0d             	add    edx,0xd
c000b1cb:	50                   	push   eax
c000b1cc:	50                   	push   eax
c000b1cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1cf:	52                   	push   edx
c000b1d0:	51                   	push   ecx
c000b1d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1d4:	83 c4 10             	add    esp,0x10
c000b1d7:	83 c4 0c             	add    esp,0xc
c000b1da:	c3                   	ret    
c000b1db:	90                   	nop

c000b1dc <Directory::read(dirent*)>:
c000b1dc:	83 ec 1c             	sub    esp,0x1c
c000b1df:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1ef:	80 fa 19             	cmp    dl,0x19
c000b1f2:	77 30                	ja     c000b224 <Directory::read(dirent*)+0x48>
c000b1f4:	8b 14 95 a0 32 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcd60]
c000b1fb:	85 d2                	test   edx,edx
c000b1fd:	74 25                	je     c000b224 <Directory::read(dirent*)+0x48>
c000b1ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b206:	74 1c                	je     c000b224 <Directory::read(dirent*)+0x48>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b20d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b211:	52                   	push   edx
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	6a 00                	push   0x0
c000b218:	68 10 01 00 00       	push   0x110
c000b21d:	51                   	push   ecx
c000b21e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b221:	83 c4 20             	add    esp,0x20
c000b224:	83 c4 1c             	add    esp,0x1c
c000b227:	c3                   	ret    

c000b228 <Directory::create()>:
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	b8 0b 00 00 00       	mov    eax,0xb
c000b230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23b:	80 f9 19             	cmp    cl,0x19
c000b23e:	77 2f                	ja     c000b26f <Directory::create()+0x47>
c000b240:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c000b247:	85 c9                	test   ecx,ecx
c000b249:	74 24                	je     c000b26f <Directory::create()+0x47>
c000b24b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b251:	85 c9                	test   ecx,ecx
c000b253:	74 1a                	je     c000b26f <Directory::create()+0x47>
c000b255:	b8 06 00 00 00       	mov    eax,0x6
c000b25a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25e:	75 0f                	jne    c000b26f <Directory::create()+0x47>
c000b260:	83 c2 0d             	add    edx,0xd
c000b263:	50                   	push   eax
c000b264:	50                   	push   eax
c000b265:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b267:	52                   	push   edx
c000b268:	51                   	push   ecx
c000b269:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	83 c4 0c             	add    esp,0xc
c000b272:	c3                   	ret    
c000b273:	90                   	nop

c000b274 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b274:	b8 0a 00 00 00       	mov    eax,0xa
c000b279:	c3                   	ret    
c000b27a:	66 90                	xchg   ax,ax

c000b27c <Bus::Bus(char const*)>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b283:	83 ec 08             	sub    esp,0x8
c000b286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b28a:	50                   	push   eax
c000b28b:	e8 30 08 00 00       	call   c000bac0 <Device::Device(char const*)>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	ba e4 de 01 c0       	mov    edx,0xc001dee4
c000b298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b29c:	89 10                	mov    DWORD PTR [eax],edx
c000b29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2ac:	90                   	nop
c000b2ad:	83 c4 0c             	add    esp,0xc
c000b2b0:	c3                   	ret    
c000b2b1:	90                   	nop
c000b2b2:	66 90                	xchg   ax,ax

c000b2b4 <Bus::~Bus()>:
c000b2b4:	83 ec 0c             	sub    esp,0xc
c000b2b7:	ba e4 de 01 c0       	mov    edx,0xc001dee4
c000b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c0:	89 10                	mov    DWORD PTR [eax],edx
c000b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	50                   	push   eax
c000b2ca:	e8 5b 05 00 00       	call   c000b82a <Device::~Device()>
c000b2cf:	83 c4 10             	add    esp,0x10
c000b2d2:	90                   	nop
c000b2d3:	83 c4 0c             	add    esp,0xc
c000b2d6:	c3                   	ret    
c000b2d7:	90                   	nop

c000b2d8 <Bus::~Bus()>:
c000b2d8:	83 ec 0c             	sub    esp,0xc
c000b2db:	83 ec 0c             	sub    esp,0xc
c000b2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e2:	e8 cd ff ff ff       	call   c000b2b4 <Bus::~Bus()>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	83 ec 08             	sub    esp,0x8
c000b2ed:	68 58 01 00 00       	push   0x158
c000b2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f6:	e8 f7 f0 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	83 c4 0c             	add    esp,0xc
c000b301:	c3                   	ret    

c000b302 <beepThread(void*)>:
c000b302:	83 ec 0c             	sub    esp,0xc
c000b305:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000b30a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b30e:	48                   	dec    eax
c000b30f:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000b314:	75 01                	jne    c000b317 <beepThread(void*)+0x15>
c000b316:	fb                   	sti    
c000b317:	83 ec 0c             	sub    esp,0xc
c000b31a:	6b c2 0a             	imul   eax,edx,0xa
c000b31d:	50                   	push   eax
c000b31e:	e8 e9 88 00 00       	call   c0013c0c <milliTenthSleep(unsigned int)>
c000b323:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b32a:	e8 8f a6 00 00       	call   c00159be <HalMakeBeep(int)>
c000b32f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b337:	83 c4 1c             	add    esp,0x1c
c000b33a:	e9 c9 87 00 00       	jmp    c0013b08 <blockTask(TaskState)>

c000b33f <Krnl::beep(int, int, bool)>:
c000b33f:	56                   	push   esi
c000b340:	53                   	push   ebx
c000b341:	83 ec 10             	sub    esp,0x10
c000b344:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b350:	e8 69 a6 00 00       	call   c00159be <HalMakeBeep(int)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	89 f0                	mov    eax,esi
c000b35a:	84 c0                	test   al,al
c000b35c:	74 1e                	je     c000b37c <Krnl::beep(int, int, bool)+0x3d>
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	6b db 0a             	imul   ebx,ebx,0xa
c000b364:	53                   	push   ebx
c000b365:	e8 a2 88 00 00       	call   c0013c0c <milliTenthSleep(unsigned int)>
c000b36a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b372:	83 c4 14             	add    esp,0x14
c000b375:	5b                   	pop    ebx
c000b376:	5e                   	pop    esi
c000b377:	e9 42 a6 00 00       	jmp    c00159be <HalMakeBeep(int)>
c000b37c:	68 e6 00 00 00       	push   0xe6
c000b381:	53                   	push   ebx
c000b382:	68 02 b3 00 c0       	push   0xc000b302
c000b387:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c000b38d:	e8 5a 83 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c000b392:	83 c4 14             	add    esp,0x14
c000b395:	5b                   	pop    ebx
c000b396:	5e                   	pop    esi
c000b397:	c3                   	ret    

c000b398 <User::loadClockSettings(int)>:
c000b398:	53                   	push   ebx
c000b399:	83 ec 14             	sub    esp,0x14
c000b39c:	68 14 01 00 00       	push   0x114
c000b3a1:	e8 13 c4 ff ff       	call   c00077b9 <malloc>
c000b3a6:	83 c4 0c             	add    esp,0xc
c000b3a9:	89 c3                	mov    ebx,eax
c000b3ab:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c000b3b1:	68 08 df 01 c0       	push   0xc001df08
c000b3b6:	50                   	push   eax
c000b3b7:	e8 a2 f6 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000b3bc:	58                   	pop    eax
c000b3bd:	5a                   	pop    edx
c000b3be:	6a 01                	push   0x1
c000b3c0:	53                   	push   ebx
c000b3c1:	e8 58 f7 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000b3c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c9:	e8 ae f7 ff ff       	call   c000ab7c <File::close()>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	85 db                	test   ebx,ebx
c000b3d3:	74 0f                	je     c000b3e4 <User::loadClockSettings(int)+0x4c>
c000b3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3de:	83 c4 08             	add    esp,0x8
c000b3e1:	5b                   	pop    ebx
c000b3e2:	ff e0                	jmp    eax
c000b3e4:	83 c4 08             	add    esp,0x8
c000b3e7:	5b                   	pop    ebx
c000b3e8:	c3                   	ret    
c000b3e9:	90                   	nop

c000b3ea <Clock::Clock(char const*)>:
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f1:	83 ec 08             	sub    esp,0x8
c000b3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f8:	50                   	push   eax
c000b3f9:	e8 c2 06 00 00       	call   c000bac0 <Device::Device(char const*)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	89 10                	mov    DWORD PTR [eax],edx
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b41a:	90                   	nop
c000b41b:	83 c4 0c             	add    esp,0xc
c000b41e:	c3                   	ret    
c000b41f:	90                   	nop

c000b420 <Clock::~Clock()>:
c000b420:	83 ec 0c             	sub    esp,0xc
c000b423:	ba 30 df 01 c0       	mov    edx,0xc001df30
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	89 10                	mov    DWORD PTR [eax],edx
c000b42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b432:	83 ec 0c             	sub    esp,0xc
c000b435:	50                   	push   eax
c000b436:	e8 ef 03 00 00       	call   c000b82a <Device::~Device()>
c000b43b:	83 c4 10             	add    esp,0x10
c000b43e:	90                   	nop
c000b43f:	83 c4 0c             	add    esp,0xc
c000b442:	c3                   	ret    
c000b443:	90                   	nop

c000b444 <Clock::~Clock()>:
c000b444:	83 ec 0c             	sub    esp,0xc
c000b447:	83 ec 0c             	sub    esp,0xc
c000b44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44e:	e8 cd ff ff ff       	call   c000b420 <Clock::~Clock()>
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	83 ec 08             	sub    esp,0x8
c000b459:	68 58 01 00 00       	push   0x158
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	e8 8b ef ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	83 c4 0c             	add    esp,0xc
c000b46d:	c3                   	ret    

c000b46e <Clock::timeInSecondsLocal()>:
c000b46e:	53                   	push   ebx
c000b46f:	83 ec 14             	sub    esp,0x14
c000b472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b476:	8b 10                	mov    edx,DWORD PTR [eax]
c000b478:	50                   	push   eax
c000b479:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b47c:	0f b6 0d 38 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e38
c000b483:	03 0d 3c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e3c
c000b489:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b48f:	89 cb                	mov    ebx,ecx
c000b491:	c1 fb 1f             	sar    ebx,0x1f
c000b494:	01 c8                	add    eax,ecx
c000b496:	11 da                	adc    edx,ebx
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	31 c9                	xor    ecx,ecx
c000b49d:	80 3d 39 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e39,0x0
c000b4a4:	74 05                	je     c000b4ab <Clock::timeInSecondsLocal()+0x3d>
c000b4a6:	b9 08 07 00 00       	mov    ecx,0x708
c000b4ab:	31 db                	xor    ebx,ebx
c000b4ad:	01 c8                	add    eax,ecx
c000b4af:	11 da                	adc    edx,ebx
c000b4b1:	83 c4 08             	add    esp,0x8
c000b4b4:	5b                   	pop    ebx
c000b4b5:	c3                   	ret    

c000b4b6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4b6:	57                   	push   edi
c000b4b7:	56                   	push   esi
c000b4b8:	53                   	push   ebx
c000b4b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4c7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ca:	0f b6 05 38 0e 02 c0 	movzx  eax,BYTE PTR ds:0xc0020e38
c000b4d1:	03 05 3c 0e 02 c0    	add    eax,DWORD PTR ds:0xc0020e3c
c000b4d7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4dd:	99                   	cdq    
c000b4de:	29 c6                	sub    esi,eax
c000b4e0:	19 d7                	sbb    edi,edx
c000b4e2:	89 f0                	mov    eax,esi
c000b4e4:	89 fa                	mov    edx,edi
c000b4e6:	31 f6                	xor    esi,esi
c000b4e8:	80 3d 39 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e39,0x0
c000b4ef:	74 05                	je     c000b4f6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4f1:	be 08 07 00 00       	mov    esi,0x708
c000b4f6:	31 ff                	xor    edi,edi
c000b4f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4fc:	29 f0                	sub    eax,esi
c000b4fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b502:	19 fa                	sbb    edx,edi
c000b504:	89 d8                	mov    eax,ebx
c000b506:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b50a:	5b                   	pop    ebx
c000b50b:	5e                   	pop    esi
c000b50c:	5f                   	pop    edi
c000b50d:	ff e0                	jmp    eax

c000b50f <datetimeToSeconds(datetime_t)>:
c000b50f:	55                   	push   ebp
c000b510:	57                   	push   edi
c000b511:	56                   	push   esi
c000b512:	53                   	push   ebx
c000b513:	83 ec 14             	sub    esp,0x14
c000b516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b51a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b51e:	89 d3                	mov    ebx,edx
c000b520:	0f b6 c6             	movzx  eax,dh
c000b523:	c1 eb 10             	shr    ebx,0x10
c000b526:	48                   	dec    eax
c000b527:	66 81 eb 6c 07       	sub    bx,0x76c
c000b52c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b530:	0f b6 f5             	movzx  esi,ch
c000b533:	89 cf                	mov    edi,ecx
c000b535:	6b f6 3c             	imul   esi,esi,0x3c
c000b538:	c1 ef 10             	shr    edi,0x10
c000b53b:	0f b6 c9             	movzx  ecx,cl
c000b53e:	89 f8                	mov    eax,edi
c000b540:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b546:	0f b6 f8             	movzx  edi,al
c000b549:	0f b6 d2             	movzx  edx,dl
c000b54c:	01 fe                	add    esi,edi
c000b54e:	01 f1                	add    ecx,esi
c000b550:	0f b7 f3             	movzx  esi,bx
c000b553:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b557:	c1 f9 1f             	sar    ecx,0x1f
c000b55a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b55f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b563:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b568:	8b 0c 8d 80 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2080]
c000b56f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b573:	76 29                	jbe    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b575:	f6 c3 03             	test   bl,0x3
c000b578:	75 24                	jne    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b57a:	31 d2                	xor    edx,edx
c000b57c:	bf 64 00 00 00       	mov    edi,0x64
c000b581:	89 d8                	mov    eax,ebx
c000b583:	66 f7 f7             	div    di
c000b586:	66 85 d2             	test   dx,dx
c000b589:	75 12                	jne    c000b59d <datetimeToSeconds(datetime_t)+0x8e>
c000b58b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b591:	bf 90 01 00 00       	mov    edi,0x190
c000b596:	99                   	cdq    
c000b597:	f7 ff                	idiv   edi
c000b599:	85 d2                	test   edx,edx
c000b59b:	75 01                	jne    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b59d:	41                   	inc    ecx
c000b59e:	66 83 fb 46          	cmp    bx,0x46
c000b5a2:	76 45                	jbe    c000b5e9 <datetimeToSeconds(datetime_t)+0xda>
c000b5a4:	bb 46 00 00 00       	mov    ebx,0x46
c000b5a9:	bf 64 00 00 00       	mov    edi,0x64
c000b5ae:	bd 90 01 00 00       	mov    ebp,0x190
c000b5b3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5b8:	f6 c3 03             	test   bl,0x3
c000b5bb:	75 23                	jne    c000b5e0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bd:	89 d8                	mov    eax,ebx
c000b5bf:	99                   	cdq    
c000b5c0:	f7 ff                	idiv   edi
c000b5c2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5c7:	85 d2                	test   edx,edx
c000b5c9:	75 15                	jne    c000b5e0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5cb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5d1:	99                   	cdq    
c000b5d2:	f7 fd                	idiv   ebp
c000b5d4:	31 c0                	xor    eax,eax
c000b5d6:	85 d2                	test   edx,edx
c000b5d8:	0f 94 c0             	sete   al
c000b5db:	05 6d 01 00 00       	add    eax,0x16d
c000b5e0:	01 c1                	add    ecx,eax
c000b5e2:	43                   	inc    ebx
c000b5e3:	39 f3                	cmp    ebx,esi
c000b5e5:	7c cc                	jl     c000b5b3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5e7:	eb 3b                	jmp    c000b624 <datetimeToSeconds(datetime_t)+0x115>
c000b5e9:	74 39                	je     c000b624 <datetimeToSeconds(datetime_t)+0x115>
c000b5eb:	b8 45 00 00 00       	mov    eax,0x45
c000b5f0:	89 c2                	mov    edx,eax
c000b5f2:	83 e2 03             	and    edx,0x3
c000b5f5:	39 f0                	cmp    eax,esi
c000b5f7:	7e 13                	jle    c000b60c <datetimeToSeconds(datetime_t)+0xfd>
c000b5f9:	85 d2                	test   edx,edx
c000b5fb:	0f 94 c2             	sete   dl
c000b5fe:	48                   	dec    eax
c000b5ff:	0f b6 d2             	movzx  edx,dl
c000b602:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b608:	29 d1                	sub    ecx,edx
c000b60a:	eb e4                	jmp    c000b5f0 <datetimeToSeconds(datetime_t)+0xe1>
c000b60c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b611:	85 d2                	test   edx,edx
c000b613:	75 0d                	jne    c000b622 <datetimeToSeconds(datetime_t)+0x113>
c000b615:	31 c0                	xor    eax,eax
c000b617:	66 85 db             	test   bx,bx
c000b61a:	0f 95 c0             	setne  al
c000b61d:	05 6d 01 00 00       	add    eax,0x16d
c000b622:	29 c1                	sub    ecx,eax
c000b624:	b8 80 51 01 00       	mov    eax,0x15180
c000b629:	f7 e9                	imul   ecx
c000b62b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b62f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b633:	83 c4 14             	add    esp,0x14
c000b636:	5b                   	pop    ebx
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	5d                   	pop    ebp
c000b63a:	c3                   	ret    
c000b63b:	90                   	nop

c000b63c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b63c:	57                   	push   edi
c000b63d:	56                   	push   esi
c000b63e:	53                   	push   ebx
c000b63f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b643:	8b 06                	mov    eax,DWORD PTR [esi]
c000b645:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b64c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b650:	e8 ba fe ff ff       	call   c000b50f <datetimeToSeconds(datetime_t)>
c000b655:	59                   	pop    ecx
c000b656:	0f b6 0d 38 0e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020e38
c000b65d:	5b                   	pop    ebx
c000b65e:	03 0d 3c 0e 02 c0    	add    ecx,DWORD PTR ds:0xc0020e3c
c000b664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b66a:	89 cb                	mov    ebx,ecx
c000b66c:	c1 fb 1f             	sar    ebx,0x1f
c000b66f:	29 c8                	sub    eax,ecx
c000b671:	19 da                	sbb    edx,ebx
c000b673:	31 c9                	xor    ecx,ecx
c000b675:	80 3d 39 0e 02 c0 00 	cmp    BYTE PTR ds:0xc0020e39,0x0
c000b67c:	74 05                	je     c000b683 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b67e:	b9 08 07 00 00       	mov    ecx,0x708
c000b683:	31 db                	xor    ebx,ebx
c000b685:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b689:	29 c8                	sub    eax,ecx
c000b68b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b68f:	19 da                	sbb    edx,ebx
c000b691:	89 f8                	mov    eax,edi
c000b693:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b697:	5b                   	pop    ebx
c000b698:	5e                   	pop    esi
c000b699:	5f                   	pop    edi
c000b69a:	ff e0                	jmp    eax

c000b69c <secondsToDatetime(unsigned long long)>:
c000b69c:	55                   	push   ebp
c000b69d:	57                   	push   edi
c000b69e:	56                   	push   esi
c000b69f:	53                   	push   ebx
c000b6a0:	83 ec 1c             	sub    esp,0x1c
c000b6a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6af:	6a 00                	push   0x0
c000b6b1:	68 80 51 01 00       	push   0x15180
c000b6b6:	55                   	push   ebp
c000b6b7:	57                   	push   edi
c000b6b8:	e8 53 0b 01 00       	call   c001c210 <__udivdi3>
c000b6bd:	83 c4 10             	add    esp,0x10
c000b6c0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ca:	6a 00                	push   0x0
c000b6cc:	68 80 51 01 00       	push   0x15180
c000b6d1:	55                   	push   ebp
c000b6d2:	57                   	push   edi
c000b6d3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6d8:	e8 33 0c 01 00       	call   c001c310 <__umoddi3>
c000b6dd:	83 c4 10             	add    esp,0x10
c000b6e0:	99                   	cdq    
c000b6e1:	f7 ff                	idiv   edi
c000b6e3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6e8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6eb:	89 d0                	mov    eax,edx
c000b6ed:	99                   	cdq    
c000b6ee:	f7 ff                	idiv   edi
c000b6f0:	85 db                	test   ebx,ebx
c000b6f2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6f5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6f8:	79 11                	jns    c000b70b <secondsToDatetime(unsigned long long)+0x6f>
c000b6fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6fe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b704:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b709:	eb 07                	jmp    c000b712 <secondsToDatetime(unsigned long long)+0x76>
c000b70b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b710:	89 d8                	mov    eax,ebx
c000b712:	bf b4 05 00 00       	mov    edi,0x5b4
c000b717:	99                   	cdq    
c000b718:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b71d:	f7 f9                	idiv   ecx
c000b71f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b728:	31 d2                	xor    edx,edx
c000b72a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b732:	01 c3                	add    ebx,eax
c000b734:	89 d8                	mov    eax,ebx
c000b736:	f7 f1                	div    ecx
c000b738:	31 d2                	xor    edx,edx
c000b73a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b73d:	89 d8                	mov    eax,ebx
c000b73f:	f7 f7                	div    edi
c000b741:	31 d2                	xor    edx,edx
c000b743:	29 c1                	sub    ecx,eax
c000b745:	89 d8                	mov    eax,ebx
c000b747:	f7 f5                	div    ebp
c000b749:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b74e:	29 c1                	sub    ecx,eax
c000b750:	31 d2                	xor    edx,edx
c000b752:	89 c8                	mov    eax,ecx
c000b754:	f7 f5                	div    ebp
c000b756:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b75b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b75f:	31 d2                	xor    edx,edx
c000b761:	89 c8                	mov    eax,ecx
c000b763:	f7 f5                	div    ebp
c000b765:	31 d2                	xor    edx,edx
c000b767:	01 c3                	add    ebx,eax
c000b769:	89 c8                	mov    eax,ecx
c000b76b:	f7 f7                	div    edi
c000b76d:	bf 99 00 00 00       	mov    edi,0x99
c000b772:	29 c3                	sub    ebx,eax
c000b774:	31 d2                	xor    edx,edx
c000b776:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b77e:	29 c3                	sub    ebx,eax
c000b780:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b783:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b786:	bb 05 00 00 00       	mov    ebx,0x5
c000b78b:	83 c1 02             	add    ecx,0x2
c000b78e:	89 c8                	mov    eax,ecx
c000b790:	f7 f7                	div    edi
c000b792:	31 d2                	xor    edx,edx
c000b794:	89 c7                	mov    edi,eax
c000b796:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b79c:	83 c0 02             	add    eax,0x2
c000b79f:	f7 f3                	div    ebx
c000b7a1:	89 eb                	mov    ebx,ebp
c000b7a3:	29 c3                	sub    ebx,eax
c000b7a5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7ab:	88 1e                	mov    BYTE PTR [esi],bl
c000b7ad:	19 c0                	sbb    eax,eax
c000b7af:	31 d2                	xor    edx,edx
c000b7b1:	83 e0 0c             	and    eax,0xc
c000b7b4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7b8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7c4:	83 f9 01             	cmp    ecx,0x1
c000b7c7:	0f 96 c2             	setbe  dl
c000b7ca:	41                   	inc    ecx
c000b7cb:	01 d0                	add    eax,edx
c000b7cd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7d0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7d4:	83 c4 1c             	add    esp,0x1c
c000b7d7:	89 f0                	mov    eax,esi
c000b7d9:	5b                   	pop    ebx
c000b7da:	5e                   	pop    esi
c000b7db:	5f                   	pop    edi
c000b7dc:	5d                   	pop    ebp
c000b7dd:	c2 04 00             	ret    0x4

c000b7e0 <Clock::timeInDatetimeLocal()>:
c000b7e0:	53                   	push   ebx
c000b7e1:	83 ec 14             	sub    esp,0x14
c000b7e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7ec:	e8 7d fc ff ff       	call   c000b46e <Clock::timeInSecondsLocal()>
c000b7f1:	83 c4 0c             	add    esp,0xc
c000b7f4:	52                   	push   edx
c000b7f5:	50                   	push   eax
c000b7f6:	53                   	push   ebx
c000b7f7:	e8 a0 fe ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c000b7fc:	89 d8                	mov    eax,ebx
c000b7fe:	83 c4 14             	add    esp,0x14
c000b801:	5b                   	pop    ebx
c000b802:	c2 04 00             	ret    0x4
c000b805:	90                   	nop

c000b806 <Device::hibernate()>:
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <Device::wake()>:
c000b808:	c3                   	ret    
c000b809:	90                   	nop

c000b80a <Device::detect()>:
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <Device::disableLegacy()>:
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <Device::powerSaving(PowerSavingLevel)>:
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <DriverlessDevice::close(int, int, void*)>:
c000b810:	31 c0                	xor    eax,eax
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <DriverlessDevice::detect()>:
c000b814:	c3                   	ret    
c000b815:	90                   	nop

c000b816 <DriverlessDevice::open(int, int, void*)>:
c000b816:	83 ec 18             	sub    esp,0x18
c000b819:	68 b0 df 01 c0       	push   0xc001dfb0
c000b81e:	e8 30 49 00 00       	call   c0010153 <KePanic(char const*)>
c000b823:	83 c8 ff             	or     eax,0xffffffff
c000b826:	83 c4 1c             	add    esp,0x1c
c000b829:	c3                   	ret    

c000b82a <Device::~Device()>:
c000b82a:	ba 10 e0 01 c0       	mov    edx,0xc001e010
c000b82f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	90                   	nop
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <Device::~Device()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b83f:	e8 e6 ff ff ff       	call   c000b82a <Device::~Device()>
c000b844:	83 c4 04             	add    esp,0x4
c000b847:	83 ec 08             	sub    esp,0x8
c000b84a:	68 58 01 00 00       	push   0x158
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	e8 9a eb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	83 c4 0c             	add    esp,0xc
c000b85e:	c3                   	ret    
c000b85f:	90                   	nop

c000b860 <Device::findAndLoadDriver()>:
c000b860:	c7 44 24 04 ce df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfce
c000b868:	e9 7b ec ff ff       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000b86d:	90                   	nop

c000b86e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b86e:	57                   	push   edi
c000b86f:	b9 09 00 00 00       	mov    ecx,0x9
c000b874:	56                   	push   esi
c000b875:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b879:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b87d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b887:	81 c7 18 01 00 00    	add    edi,0x118
c000b88d:	fc                   	cld    
c000b88e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b890:	5e                   	pop    esi
c000b891:	5f                   	pop    edi
c000b892:	c3                   	ret    
c000b893:	90                   	nop

c000b894 <Device::preOpenACPI(void*, char*, char*)>:
c000b894:	57                   	push   edi
c000b895:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b89a:	56                   	push   esi
c000b89b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b89f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8a3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8ad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8b3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8bf:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8c4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8d0:	5e                   	pop    esi
c000b8d1:	5f                   	pop    edi
c000b8d2:	c3                   	ret    
c000b8d3:	90                   	nop

c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8d4:	53                   	push   ebx
c000b8d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8e5:	0f b6 c0             	movzx  eax,al
c000b8e8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8f8:	5b                   	pop    ebx
c000b8f9:	e9 a6 05 00 00       	jmp    c000bea4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8fe <Device::getParent()>:
c000b8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b902:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b908:	c3                   	ret    
c000b909:	90                   	nop

c000b90a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b90a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b90e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b912:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b917:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b91b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b91f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b923:	e9 e8 06 00 00       	jmp    c000c010 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b928 <Device::addChild(Device*)>:
c000b928:	53                   	push   ebx
c000b929:	83 ec 08             	sub    esp,0x8
c000b92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b934:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b93a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b940:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b942:	85 d2                	test   edx,edx
c000b944:	74 04                	je     c000b94a <Device::addChild(Device*)+0x22>
c000b946:	89 d3                	mov    ebx,edx
c000b948:	eb f6                	jmp    c000b940 <Device::addChild(Device*)+0x18>
c000b94a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b94d:	83 ec 0c             	sub    esp,0xc
c000b950:	6a 08                	push   0x8
c000b952:	e8 62 be ff ff       	call   c00077b9 <malloc>
c000b957:	89 03                	mov    DWORD PTR [ebx],eax
c000b959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b966:	83 c4 18             	add    esp,0x18
c000b969:	5b                   	pop    ebx
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Device::removeAllChildren()>:
c000b96c:	56                   	push   esi
c000b96d:	53                   	push   ebx
c000b96e:	52                   	push   edx
c000b96f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b973:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b979:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b97c:	74 17                	je     c000b995 <Device::removeAllChildren()+0x29>
c000b97e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b981:	85 c0                	test   eax,eax
c000b983:	74 0c                	je     c000b991 <Device::removeAllChildren()+0x25>
c000b985:	83 ec 0c             	sub    esp,0xc
c000b988:	8b 10                	mov    edx,DWORD PTR [eax]
c000b98a:	50                   	push   eax
c000b98b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b993:	eb e4                	jmp    c000b979 <Device::removeAllChildren()+0xd>
c000b995:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b99b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ae:	58                   	pop    eax
c000b9af:	5b                   	pop    ebx
c000b9b0:	5e                   	pop    esi
c000b9b1:	c3                   	ret    

c000b9b2 <Device::hibernateAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 14             	sub    esp,0x14
c000b9b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	53                   	push   ebx
c000b9bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9cc:	74 0f                	je     c000b9dd <Device::hibernateAll()+0x2b>
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9d4:	e8 d9 ff ff ff       	call   c000b9b2 <Device::hibernateAll()>
c000b9d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9db:	eb e9                	jmp    c000b9c6 <Device::hibernateAll()+0x14>
c000b9dd:	83 c4 08             	add    esp,0x8
c000b9e0:	5b                   	pop    ebx
c000b9e1:	c3                   	ret    

c000b9e2 <Device::wakeAll()>:
c000b9e2:	53                   	push   ebx
c000b9e3:	83 ec 14             	sub    esp,0x14
c000b9e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ec:	53                   	push   ebx
c000b9ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9f6:	83 c4 10             	add    esp,0x10
c000b9f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9fc:	74 0f                	je     c000ba0d <Device::wakeAll()+0x2b>
c000b9fe:	83 ec 0c             	sub    esp,0xc
c000ba01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba04:	e8 d9 ff ff ff       	call   c000b9e2 <Device::wakeAll()>
c000ba09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba0b:	eb e9                	jmp    c000b9f6 <Device::wakeAll()+0x14>
c000ba0d:	83 c4 08             	add    esp,0x8
c000ba10:	5b                   	pop    ebx
c000ba11:	c3                   	ret    

c000ba12 <Device::detectAll()>:
c000ba12:	53                   	push   ebx
c000ba13:	83 ec 14             	sub    esp,0x14
c000ba16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba1c:	53                   	push   ebx
c000ba1d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba20:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba2c:	74 0f                	je     c000ba3d <Device::detectAll()+0x2b>
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba34:	e8 d9 ff ff ff       	call   c000ba12 <Device::detectAll()>
c000ba39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba3b:	eb e9                	jmp    c000ba26 <Device::detectAll()+0x14>
c000ba3d:	83 c4 08             	add    esp,0x8
c000ba40:	5b                   	pop    ebx
c000ba41:	c3                   	ret    

c000ba42 <Device::disableLegacyAll()>:
c000ba42:	c3                   	ret    
c000ba43:	90                   	nop

c000ba44 <Device::loadDriversForAll()>:
c000ba44:	c3                   	ret    
c000ba45:	90                   	nop

c000ba46 <Device::closeAll()>:
c000ba46:	53                   	push   ebx
c000ba47:	83 ec 08             	sub    esp,0x8
c000ba4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba50:	6a 00                	push   0x0
c000ba52:	6a 00                	push   0x0
c000ba54:	6a 00                	push   0x0
c000ba56:	53                   	push   ebx
c000ba57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba5a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba66:	74 0f                	je     c000ba77 <Device::closeAll()+0x31>
c000ba68:	83 ec 0c             	sub    esp,0xc
c000ba6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba6e:	e8 d3 ff ff ff       	call   c000ba46 <Device::closeAll()>
c000ba73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba75:	eb e9                	jmp    c000ba60 <Device::closeAll()+0x1a>
c000ba77:	83 c4 08             	add    esp,0x8
c000ba7a:	5b                   	pop    ebx
c000ba7b:	c3                   	ret    

c000ba7c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba7c:	56                   	push   esi
c000ba7d:	53                   	push   ebx
c000ba7e:	83 ec 0c             	sub    esp,0xc
c000ba81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba89:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba8b:	56                   	push   esi
c000ba8c:	53                   	push   ebx
c000ba8d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba96:	83 c4 10             	add    esp,0x10
c000ba99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba9c:	74 0f                	je     c000baad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba9e:	52                   	push   edx
c000ba9f:	52                   	push   edx
c000baa0:	56                   	push   esi
c000baa1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baa4:	e8 d3 ff ff ff       	call   c000ba7c <Device::powerSavingAll(PowerSavingLevel)>
c000baa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baab:	eb e9                	jmp    c000ba96 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baad:	58                   	pop    eax
c000baae:	5b                   	pop    ebx
c000baaf:	5e                   	pop    esi
c000bab0:	c3                   	ret    
c000bab1:	90                   	nop

c000bab2 <Device::setName(char const*)>:
c000bab2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baba:	e9 41 4b ff ff       	jmp    c0000600 <strcpy>
c000babf:	90                   	nop

c000bac0 <Device::Device(char const*)>:
c000bac0:	83 ec 1c             	sub    esp,0x1c
c000bac3:	ba 10 e0 01 c0       	mov    edx,0xc001e010
c000bac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacc:	89 10                	mov    DWORD PTR [eax],edx
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000badc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000baea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb06:	83 ec 08             	sub    esp,0x8
c000bb09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb11:	e8 9c ff ff ff       	call   c000bab2 <Device::setName(char const*)>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb21:	83 ec 0c             	sub    esp,0xc
c000bb24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb28:	e8 8c bc ff ff       	call   c00077b9 <malloc>
c000bb2d:	83 c4 10             	add    esp,0x10
c000bb30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb41:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb77:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb82:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb90:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbb6:	90                   	nop
c000bbb7:	83 c4 1c             	add    esp,0x1c
c000bbba:	c3                   	ret    
c000bbbb:	90                   	nop

c000bbbc <Device::getName()>:
c000bbbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbc0:	05 d0 00 00 00       	add    eax,0xd0
c000bbc5:	c3                   	ret    

c000bbc6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbc6:	83 ec 0c             	sub    esp,0xc
c000bbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbcd:	83 ec 08             	sub    esp,0x8
c000bbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd4:	50                   	push   eax
c000bbd5:	e8 e6 fe ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c000bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe6:	89 10                	mov    DWORD PTR [eax],edx
c000bbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbf6:	90                   	nop
c000bbf7:	83 c4 0c             	add    esp,0xc
c000bbfa:	c3                   	ret    
c000bbfb:	90                   	nop

c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbfc:	57                   	push   edi
c000bbfd:	56                   	push   esi
c000bbfe:	53                   	push   ebx
c000bbff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc0b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc11:	75 0c                	jne    c000bc1f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc13:	52                   	push   edx
c000bc14:	52                   	push   edx
c000bc15:	53                   	push   ebx
c000bc16:	56                   	push   esi
c000bc17:	e8 a6 0a 01 00       	call   c001c6c2 <LinkedList<Device>::addElement(Device*)>
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc28:	74 12                	je     c000bc3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc2a:	50                   	push   eax
c000bc2b:	57                   	push   edi
c000bc2c:	56                   	push   esi
c000bc2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc30:	e8 c7 ff ff ff       	call   c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc37:	83 c4 10             	add    esp,0x10
c000bc3a:	eb e9                	jmp    c000bc25 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc3c:	5b                   	pop    ebx
c000bc3d:	5e                   	pop    esi
c000bc3e:	5f                   	pop    edi
c000bc3f:	c3                   	ret    

c000bc40 <getDevicesOfType(DeviceType)>:
c000bc40:	53                   	push   ebx
c000bc41:	83 ec 14             	sub    esp,0x14
c000bc44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc48:	53                   	push   ebx
c000bc49:	e8 50 0b 01 00       	call   c001c79e <LinkedList<Device>::LinkedList()>
c000bc4e:	83 c4 0c             	add    esp,0xc
c000bc51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc55:	53                   	push   ebx
c000bc56:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c000bc5c:	e8 9b ff ff ff       	call   c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc61:	89 d8                	mov    eax,ebx
c000bc63:	83 c4 18             	add    esp,0x18
c000bc66:	5b                   	pop    ebx
c000bc67:	c2 04 00             	ret    0x4
c000bc6a:	66 90                	xchg   ax,ax

c000bc6c <HardDiskController::HardDiskController(char const*)>:
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc73:	83 ec 08             	sub    esp,0x8
c000bc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc7a:	50                   	push   eax
c000bc7b:	e8 40 fe ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bc80:	83 c4 10             	add    esp,0x10
c000bc83:	ba 68 e0 01 c0       	mov    edx,0xc001e068
c000bc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8c:	89 10                	mov    DWORD PTR [eax],edx
c000bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc92:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc9c:	90                   	nop
c000bc9d:	83 c4 0c             	add    esp,0xc
c000bca0:	c3                   	ret    
c000bca1:	90                   	nop
c000bca2:	66 90                	xchg   ax,ax

c000bca4 <HardDiskController::~HardDiskController()>:
c000bca4:	83 ec 0c             	sub    esp,0xc
c000bca7:	ba 68 e0 01 c0       	mov    edx,0xc001e068
c000bcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	83 ec 0c             	sub    esp,0xc
c000bcb9:	50                   	push   eax
c000bcba:	e8 6b fb ff ff       	call   c000b82a <Device::~Device()>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	90                   	nop
c000bcc3:	83 c4 0c             	add    esp,0xc
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <HardDiskController::~HardDiskController()>:
c000bcc8:	83 ec 0c             	sub    esp,0xc
c000bccb:	83 ec 0c             	sub    esp,0xc
c000bcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd2:	e8 cd ff ff ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	83 ec 08             	sub    esp,0x8
c000bcdd:	68 58 01 00 00       	push   0x158
c000bce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce6:	e8 07 e7 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	83 c4 0c             	add    esp,0xc
c000bcf1:	c3                   	ret    

c000bcf2 <PhysicalDisk::eject()>:
c000bcf2:	83 c8 ff             	or     eax,0xffffffff
c000bcf5:	c3                   	ret    

c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcf6:	83 ec 0c             	sub    esp,0xc
c000bcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfd:	83 ec 08             	sub    esp,0x8
c000bd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd04:	50                   	push   eax
c000bd05:	e8 b6 fd ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000bd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd16:	89 10                	mov    DWORD PTR [eax],edx
c000bd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd27:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd32:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd58:	90                   	nop
c000bd59:	83 c4 0c             	add    esp,0xc
c000bd5c:	c3                   	ret    
c000bd5d:	90                   	nop

c000bd5e <PhysicalDisk::startCache()>:
c000bd5e:	56                   	push   esi
c000bd5f:	53                   	push   ebx
c000bd60:	83 ec 10             	sub    esp,0x10
c000bd63:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd67:	6a 44                	push   0x44
c000bd69:	e8 4b ba ff ff       	call   c00077b9 <malloc>
c000bd6e:	89 c6                	mov    esi,eax
c000bd70:	58                   	pop    eax
c000bd71:	5a                   	pop    edx
c000bd72:	53                   	push   ebx
c000bd73:	56                   	push   esi
c000bd74:	e8 d3 15 00 00       	call   c000d34c <VCache::VCache(PhysicalDisk*)>
c000bd79:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd7f:	83 c4 14             	add    esp,0x14
c000bd82:	5b                   	pop    ebx
c000bd83:	5e                   	pop    esi
c000bd84:	c3                   	ret    
c000bd85:	90                   	nop

c000bd86 <PhysicalDisk::~PhysicalDisk()>:
c000bd86:	83 ec 0c             	sub    esp,0xc
c000bd89:	ba 94 e0 01 c0       	mov    edx,0xc001e094
c000bd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd92:	89 10                	mov    DWORD PTR [eax],edx
c000bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	50                   	push   eax
c000bd9c:	e8 89 fa ff ff       	call   c000b82a <Device::~Device()>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	90                   	nop
c000bda5:	83 c4 0c             	add    esp,0xc
c000bda8:	c3                   	ret    
c000bda9:	90                   	nop

c000bdaa <PhysicalDisk::~PhysicalDisk()>:
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	83 ec 0c             	sub    esp,0xc
c000bdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb4:	e8 cd ff ff ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c000bdb9:	83 c4 10             	add    esp,0x10
c000bdbc:	83 ec 08             	sub    esp,0x8
c000bdbf:	68 6c 01 00 00       	push   0x16c
c000bdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc8:	e8 25 e6 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000bdcd:	83 c4 10             	add    esp,0x10
c000bdd0:	83 c4 0c             	add    esp,0xc
c000bdd3:	c3                   	ret    

c000bdd4 <int_handler>:
c000bdd4:	55                   	push   ebp
c000bdd5:	57                   	push   edi
c000bdd6:	56                   	push   esi
c000bdd7:	53                   	push   ebx
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bddf:	80 3d b8 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b8,0x0
c000bde6:	74 0b                	je     c000bdf3 <int_handler+0x1f>
c000bde8:	fa                   	cli    
c000bde9:	f4                   	hlt    
c000bdea:	80 3d b8 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b8,0x0
c000bdf1:	75 f5                	jne    c000bde8 <int_handler+0x14>
c000bdf3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdf6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdf9:	83 f8 17             	cmp    eax,0x17
c000bdfc:	76 3e                	jbe    c000be3c <int_handler+0x68>
c000bdfe:	c1 e6 04             	shl    esi,0x4
c000be01:	31 db                	xor    ebx,ebx
c000be03:	8d ae 40 1e 02 c0    	lea    ebp,[esi-0x3ffde1c0]
c000be09:	81 c6 40 0e 02 c0    	add    esi,0xc0020e40
c000be0f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be13:	85 c0                	test   eax,eax
c000be15:	74 13                	je     c000be2a <int_handler+0x56>
c000be17:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be1a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be1e:	74 2a                	je     c000be4a <int_handler+0x76>
c000be20:	83 ec 08             	sub    esp,0x8
c000be23:	52                   	push   edx
c000be24:	57                   	push   edi
c000be25:	ff d0                	call   eax
c000be27:	83 c4 10             	add    esp,0x10
c000be2a:	43                   	inc    ebx
c000be2b:	83 fb 04             	cmp    ebx,0x4
c000be2e:	75 df                	jne    c000be0f <int_handler+0x3b>
c000be30:	83 c4 0c             	add    esp,0xc
c000be33:	31 c0                	xor    eax,eax
c000be35:	5b                   	pop    ebx
c000be36:	31 d2                	xor    edx,edx
c000be38:	5e                   	pop    esi
c000be39:	5f                   	pop    edi
c000be3a:	5d                   	pop    ebp
c000be3b:	c3                   	ret    
c000be3c:	83 ec 0c             	sub    esp,0xc
c000be3f:	50                   	push   eax
c000be40:	e8 b6 9b 00 00       	call   c00159fb <HalEndOfInterrupt(int)>
c000be45:	83 c4 10             	add    esp,0x10
c000be48:	eb b4                	jmp    c000bdfe <int_handler+0x2a>
c000be4a:	83 ec 08             	sub    esp,0x8
c000be4d:	52                   	push   edx
c000be4e:	57                   	push   edi
c000be4f:	ff d0                	call   eax
c000be51:	83 c4 10             	add    esp,0x10
c000be54:	83 c4 0c             	add    esp,0xc
c000be57:	5b                   	pop    ebx
c000be58:	5e                   	pop    esi
c000be59:	5f                   	pop    edi
c000be5a:	5d                   	pop    ebp
c000be5b:	c3                   	ret    

c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be5c:	56                   	push   esi
c000be5d:	31 c0                	xor    eax,eax
c000be5f:	53                   	push   ebx
c000be60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be68:	89 ca                	mov    edx,ecx
c000be6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be6e:	c1 e2 04             	shl    edx,0x4
c000be71:	83 bc 82 40 1e 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde1c0],0x0
c000be79:	74 15                	je     c000be90 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be7b:	40                   	inc    eax
c000be7c:	83 f8 04             	cmp    eax,0x4
c000be7f:	75 f0                	jne    c000be71 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be81:	c7 44 24 0c c4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0c4
c000be89:	5b                   	pop    ebx
c000be8a:	5e                   	pop    esi
c000be8b:	e9 c3 42 00 00       	jmp    c0010153 <KePanic(char const*)>
c000be90:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be93:	89 1c 85 40 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1c0],ebx
c000be9a:	89 34 85 40 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1c0],esi
c000bea1:	5b                   	pop    ebx
c000bea2:	5e                   	pop    esi
c000bea3:	c3                   	ret    

c000bea4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bea4:	57                   	push   edi
c000bea5:	8b 15 38 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d38
c000beab:	56                   	push   esi
c000beac:	53                   	push   ebx
c000bead:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000beb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000beb5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bebc:	74 5b                	je     c000bf19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bebe:	89 c7                	mov    edi,eax
c000bec0:	84 c0                	test   al,al
c000bec2:	74 24                	je     c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bec4:	83 fe 0f             	cmp    esi,0xf
c000bec7:	0f 8f d9 00 00 00    	jg     c000bfa6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000becd:	8a 86 00 fa 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0600]
c000bed3:	25 ff 00 00 00       	and    eax,0xff
c000bed8:	66 8b bc 00 e0 35 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdca20]
c000bee0:	89 c6                	mov    esi,eax
c000bee2:	66 d1 ef             	shr    di,1
c000bee5:	83 e7 01             	and    edi,0x1
c000bee8:	83 ec 08             	sub    esp,0x8
c000beeb:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c000bef0:	31 db                	xor    ebx,ebx
c000bef2:	50                   	push   eax
c000bef3:	68 d1 e0 01 c0       	push   0xc001e0d1
c000bef8:	e8 eb e5 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c000bf05:	85 c0                	test   eax,eax
c000bf07:	7f 51                	jg     c000bf5a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf09:	83 ec 0c             	sub    esp,0xc
c000bf0c:	68 e8 e0 01 c0       	push   0xc001e0e8
c000bf11:	e8 3d 42 00 00       	call   c0010153 <KePanic(char const*)>
c000bf16:	83 c4 10             	add    esp,0x10
c000bf19:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf1c:	31 d2                	xor    edx,edx
c000bf1e:	89 c8                	mov    eax,ecx
c000bf20:	c1 e0 04             	shl    eax,0x4
c000bf23:	8b 9c 90 40 1e 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde1c0]
c000bf2a:	85 db                	test   ebx,ebx
c000bf2c:	0f 84 8b 00 00 00    	je     c000bfbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf32:	42                   	inc    edx
c000bf33:	83 fa 04             	cmp    edx,0x4
c000bf36:	75 eb                	jne    c000bf23 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	68 3c e1 01 c0       	push   0xc001e13c
c000bf40:	e8 0e 42 00 00       	call   c0010153 <KePanic(char const*)>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf4d:	5b                   	pop    ebx
c000bf4e:	5e                   	pop    esi
c000bf4f:	5f                   	pop    edi
c000bf50:	c3                   	ret    
c000bf51:	43                   	inc    ebx
c000bf52:	39 1d e0 49 02 c0    	cmp    DWORD PTR ds:0xc00249e0,ebx
c000bf58:	7e af                	jle    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf5a:	83 ec 08             	sub    esp,0x8
c000bf5d:	8b 04 9d 00 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb600]
c000bf64:	56                   	push   esi
c000bf65:	50                   	push   eax
c000bf66:	e8 7d f7 00 00       	call   c001b6e8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf6b:	83 c4 10             	add    esp,0x10
c000bf6e:	84 c0                	test   al,al
c000bf70:	74 df                	je     c000bf51 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf72:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf78:	50                   	push   eax
c000bf79:	8d 46 20             	lea    eax,[esi+0x20]
c000bf7c:	57                   	push   edi
c000bf7d:	25 ff 00 00 00       	and    eax,0xff
c000bf82:	6a 00                	push   0x0
c000bf84:	50                   	push   eax
c000bf85:	89 f0                	mov    eax,esi
c000bf87:	6a 00                	push   0x0
c000bf89:	25 ff 00 00 00       	and    eax,0xff
c000bf8e:	6a 00                	push   0x0
c000bf90:	50                   	push   eax
c000bf91:	8b 04 9d 00 4a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb600]
c000bf98:	50                   	push   eax
c000bf99:	e8 c4 f8 00 00       	call   c001b862 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf9e:	83 c4 20             	add    esp,0x20
c000bfa1:	e9 73 ff ff ff       	jmp    c000bf19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	31 ff                	xor    edi,edi
c000bfab:	68 04 e1 01 c0       	push   0xc001e104
c000bfb0:	e8 9e 41 00 00       	call   c0010153 <KePanic(char const*)>
c000bfb5:	83 c4 10             	add    esp,0x10
c000bfb8:	e9 2b ff ff ff       	jmp    c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfbd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfc4:	89 14 85 40 1e 02 c0 	mov    DWORD PTR [eax*4-0x3ffde1c0],edx
c000bfcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfcf:	5b                   	pop    ebx
c000bfd0:	89 14 85 40 0e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf1c0],edx
c000bfd7:	89 f0                	mov    eax,esi
c000bfd9:	5e                   	pop    esi
c000bfda:	5f                   	pop    edi
c000bfdb:	c3                   	ret    

c000bfdc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfe0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfe4:	c1 e0 04             	shl    eax,0x4
c000bfe7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfea:	39 88 40 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1c0],ecx
c000bff0:	74 08                	je     c000bffa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bff2:	83 c0 04             	add    eax,0x4
c000bff5:	39 d0                	cmp    eax,edx
c000bff7:	75 f1                	jne    c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bff9:	c3                   	ret    
c000bffa:	c7 80 40 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1c0],0x0
c000c004:	c7 80 40 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1c0],0x0
c000c00e:	eb e2                	jmp    c000bff2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c010 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c010:	53                   	push   ebx
c000c011:	83 ec 08             	sub    esp,0x8
c000c014:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c018:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c01d:	74 0e                	je     c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c01f:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000c024:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c02b:	75 37                	jne    c000c064 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c031:	83 c0 20             	add    eax,0x20
c000c034:	c1 e0 04             	shl    eax,0x4
c000c037:	8d 50 10             	lea    edx,[eax+0x10]
c000c03a:	39 98 40 1e 02 c0    	cmp    DWORD PTR [eax-0x3ffde1c0],ebx
c000c040:	74 0c                	je     c000c04e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c042:	83 c0 04             	add    eax,0x4
c000c045:	39 d0                	cmp    eax,edx
c000c047:	75 f1                	jne    c000c03a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c049:	83 c4 08             	add    esp,0x8
c000c04c:	5b                   	pop    ebx
c000c04d:	c3                   	ret    
c000c04e:	c7 80 40 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1c0],0x0
c000c058:	c7 80 40 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1c0],0x0
c000c062:	eb de                	jmp    c000c042 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c064:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c069:	7f 12                	jg     c000c07d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c06b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c06f:	31 c0                	xor    eax,eax
c000c071:	8a 81 00 fa 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0600]
c000c077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c07b:	eb b0                	jmp    c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c07d:	83 ec 0c             	sub    esp,0xc
c000c080:	68 f5 e0 01 c0       	push   0xc001e0f5
c000c085:	e8 c9 40 00 00       	call   c0010153 <KePanic(char const*)>
c000c08a:	83 c4 10             	add    esp,0x10
c000c08d:	eb 9e                	jmp    c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c08f <setupINTS()>:
c000c08f:	31 c0                	xor    eax,eax
c000c091:	c7 80 40 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1c0],0x0
c000c09b:	c7 80 40 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1c0],0x0
c000c0a5:	c7 80 44 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1bc],0x0
c000c0af:	c7 80 44 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1bc],0x0
c000c0b9:	c7 80 48 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1b8],0x0
c000c0c3:	c7 80 48 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1b8],0x0
c000c0cd:	c7 80 4c 1e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde1b4],0x0
c000c0d7:	c7 80 4c 0e 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf1b4],0x0
c000c0e1:	83 c0 10             	add    eax,0x10
c000c0e4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0e9:	75 a6                	jne    c000c091 <setupINTS()+0x2>
c000c0eb:	c3                   	ret    

c000c0ec <convertLegacyIRQNumber(int)>:
c000c0ec:	83 ec 0c             	sub    esp,0xc
c000c0ef:	8b 15 38 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d38
c000c0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c100:	74 0f                	je     c000c111 <convertLegacyIRQNumber(int)+0x25>
c000c102:	83 f8 0f             	cmp    eax,0xf
c000c105:	7f 0e                	jg     c000c115 <convertLegacyIRQNumber(int)+0x29>
c000c107:	31 c9                	xor    ecx,ecx
c000c109:	8a 88 00 fa 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0600]
c000c10f:	89 c8                	mov    eax,ecx
c000c111:	83 c4 0c             	add    esp,0xc
c000c114:	c3                   	ret    
c000c115:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	68 04 e1 01 c0       	push   0xc001e104
c000c121:	e8 2d 40 00 00       	call   c0010153 <KePanic(char const*)>
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12d:	83 c4 0c             	add    esp,0xc
c000c130:	c3                   	ret    
c000c131:	90                   	nop

c000c132 <startGUI(void*)>:
c000c132:	55                   	push   ebp
c000c133:	89 e5                	mov    ebp,esp
c000c135:	53                   	push   ebx
c000c136:	83 ec 04             	sub    esp,0x4
c000c139:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c13e:	48                   	dec    eax
c000c13f:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c144:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c149:	85 c0                	test   eax,eax
c000c14b:	75 01                	jne    c000c14e <startGUI(void*)+0x1c>
c000c14d:	fb                   	sti    
c000c14e:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c000c154:	83 ec 08             	sub    esp,0x8
c000c157:	6a 01                	push   0x1
c000c159:	68 61 e1 01 c0       	push   0xc001e161
c000c15e:	e8 36 6c 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 ec 08             	sub    esp,0x8
c000c169:	53                   	push   ebx
c000c16a:	50                   	push   eax
c000c16b:	e8 5a 6e 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000c170:	83 c4 10             	add    esp,0x10
c000c173:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c000c179:	83 ec 08             	sub    esp,0x8
c000c17c:	6a 01                	push   0x1
c000c17e:	68 7b e1 01 c0       	push   0xc001e17b
c000c183:	e8 11 6c 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000c188:	83 c4 10             	add    esp,0x10
c000c18b:	83 ec 08             	sub    esp,0x8
c000c18e:	53                   	push   ebx
c000c18f:	50                   	push   eax
c000c190:	e8 35 6e 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000c195:	83 c4 10             	add    esp,0x10
c000c198:	90                   	nop
c000c199:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c19c:	c9                   	leave  
c000c19d:	c3                   	ret    

c000c19e <startGUIVESA(void*)>:
c000c19e:	55                   	push   ebp
c000c19f:	89 e5                	mov    ebp,esp
c000c1a1:	53                   	push   ebx
c000c1a2:	83 ec 04             	sub    esp,0x4
c000c1a5:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c1aa:	48                   	dec    eax
c000c1ab:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c1b0:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c1b5:	85 c0                	test   eax,eax
c000c1b7:	75 01                	jne    c000c1ba <startGUIVESA(void*)+0x1c>
c000c1b9:	fb                   	sti    
c000c1ba:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c000c1c0:	83 ec 08             	sub    esp,0x8
c000c1c3:	6a 01                	push   0x1
c000c1c5:	68 99 e1 01 c0       	push   0xc001e199
c000c1ca:	e8 ca 6b 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	83 ec 08             	sub    esp,0x8
c000c1d5:	53                   	push   ebx
c000c1d6:	50                   	push   eax
c000c1d7:	e8 ee 6d 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000c1dc:	83 c4 10             	add    esp,0x10
c000c1df:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c000c1e5:	83 ec 08             	sub    esp,0x8
c000c1e8:	6a 01                	push   0x1
c000c1ea:	68 7b e1 01 c0       	push   0xc001e17b
c000c1ef:	e8 a5 6b 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000c1f4:	83 c4 10             	add    esp,0x10
c000c1f7:	83 ec 08             	sub    esp,0x8
c000c1fa:	53                   	push   ebx
c000c1fb:	50                   	push   eax
c000c1fc:	e8 c9 6d 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000c201:	83 c4 10             	add    esp,0x10
c000c204:	90                   	nop
c000c205:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c208:	c9                   	leave  
c000c209:	c3                   	ret    

c000c20a <sendKeyToTerminal(unsigned char)>:
c000c20a:	55                   	push   ebp
c000c20b:	89 e5                	mov    ebp,esp
c000c20d:	83 ec 28             	sub    esp,0x28
c000c210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c213:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c216:	8b 15 84 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d84
c000c21c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c21f:	25 ff 00 00 00       	and    eax,0xff
c000c224:	83 ec 08             	sub    esp,0x8
c000c227:	50                   	push   eax
c000c228:	52                   	push   edx
c000c229:	e8 28 c8 ff ff       	call   c0008a56 <VgaText::receiveKey(unsigned char)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c235:	74 0a                	je     c000c241 <sendKeyToTerminal(unsigned char)+0x37>
c000c237:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c23b:	0f 85 8f 00 00 00    	jne    c000c2d0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c241:	fa                   	cli    
c000c242:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c247:	40                   	inc    eax
c000c248:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c24d:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c000c252:	40                   	inc    eax
c000c253:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c000c258:	a1 40 2e 02 c0       	mov    eax,ds:0xc0022e40
c000c25d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c260:	c7 05 40 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e40,0x0
c000c26a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c26e:	74 1f                	je     c000c28f <sendKeyToTerminal(unsigned char)+0x85>
c000c270:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c273:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c276:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c279:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c27c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c285:	e8 46 7b 00 00       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c000c28a:	83 c4 10             	add    esp,0x10
c000c28d:	eb db                	jmp    c000c26a <sendKeyToTerminal(unsigned char)+0x60>
c000c28f:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c000c294:	48                   	dec    eax
c000c295:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c000c29a:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c000c29f:	85 c0                	test   eax,eax
c000c2a1:	75 18                	jne    c000c2bb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2a3:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c000c2a8:	85 c0                	test   eax,eax
c000c2aa:	74 0f                	je     c000c2bb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2ac:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c000c2b6:	e8 51 76 00 00       	call   c001390c <schedule()>
c000c2bb:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c2c0:	48                   	dec    eax
c000c2c1:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c2c6:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 01                	jne    c000c2d0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2cf:	fb                   	sti    
c000c2d0:	90                   	nop
c000c2d1:	c9                   	leave  
c000c2d2:	c3                   	ret    

c000c2d3 <sendKeyboardToken(KeyboardToken)>:
c000c2d3:	55                   	push   ebp
c000c2d4:	89 e5                	mov    ebp,esp
c000c2d6:	83 ec 18             	sub    esp,0x18
c000c2d9:	e8 c5 3e 00 00       	call   c00101a3 <Krnl::userIOReceived()>
c000c2de:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e4:	25 ff ff 00 00       	and    eax,0xffff
c000c2e9:	83 f2 01             	xor    edx,0x1
c000c2ec:	88 90 60 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd1a0],dl
c000c2f2:	a1 48 2e 02 c0       	mov    eax,ds:0xc0022e48
c000c2f7:	85 c0                	test   eax,eax
c000c2f9:	74 24                	je     c000c31f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2fb:	8b 0d 48 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e48
c000c301:	83 ec 04             	sub    esp,0x4
c000c304:	68 60 2e 02 c0       	push   0xc0022e60
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	89 e2                	mov    edx,esp
c000c30e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c311:	89 02                	mov    DWORD PTR [edx],eax
c000c313:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c316:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c31a:	ff d1                	call   ecx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c323:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c326:	a0 68 32 02 c0       	mov    al,ds:0xc0023268
c000c32b:	38 c2                	cmp    dl,al
c000c32d:	74 1e                	je     c000c34d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c32f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c332:	a2 68 32 02 c0       	mov    ds:0xc0023268,al
c000c337:	a0 68 32 02 c0       	mov    al,ds:0xc0023268
c000c33c:	25 ff 00 00 00       	and    eax,0xff
c000c341:	83 ec 0c             	sub    esp,0xc
c000c344:	50                   	push   eax
c000c345:	e8 5e be ff ff       	call   c00081a8 <setTerminalScrollLock(bool)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c350:	84 c0                	test   al,al
c000c352:	0f 84 ae 00 00 00    	je     c000c406 <sendKeyboardToken(KeyboardToken)+0x133>
c000c358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35b:	66 3d 10 03          	cmp    ax,0x310
c000c35f:	75 06                	jne    c000c367 <sendKeyboardToken(KeyboardToken)+0x94>
c000c361:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36a:	66 3d 11 03          	cmp    ax,0x311
c000c36e:	75 06                	jne    c000c376 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c370:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c379:	66 3d 12 03          	cmp    ax,0x312
c000c37d:	75 06                	jne    c000c385 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c37f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c388:	66 3d 13 03          	cmp    ax,0x313
c000c38c:	75 06                	jne    c000c394 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c38e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c397:	66 3d 14 03          	cmp    ax,0x314
c000c39b:	75 06                	jne    c000c3a3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c39d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a6:	66 3d 15 03          	cmp    ax,0x315
c000c3aa:	75 06                	jne    c000c3b2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3ac:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b5:	66 3d 16 03          	cmp    ax,0x316
c000c3b9:	75 06                	jne    c000c3c1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3bb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c4:	66 3d 17 03          	cmp    ax,0x317
c000c3c8:	75 06                	jne    c000c3d0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ca:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d3:	66 3d 18 03          	cmp    ax,0x318
c000c3d7:	75 06                	jne    c000c3df <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3d9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e2:	66 3d 19 03          	cmp    ax,0x319
c000c3e6:	75 06                	jne    c000c3ee <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3e8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f1:	66 3d 1a 03          	cmp    ax,0x31a
c000c3f5:	0f 85 c9 00 00 00    	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3fb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c401:	e9 be 00 00 00       	jmp    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c409:	66 3d 10 03          	cmp    ax,0x310
c000c40d:	75 0a                	jne    c000c419 <sendKeyboardToken(KeyboardToken)+0x146>
c000c40f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c415:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41c:	66 3d 11 03          	cmp    ax,0x311
c000c420:	75 0a                	jne    c000c42c <sendKeyboardToken(KeyboardToken)+0x159>
c000c422:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c428:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42f:	66 3d 12 03          	cmp    ax,0x312
c000c433:	75 0a                	jne    c000c43f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c435:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c43b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c442:	66 3d 13 03          	cmp    ax,0x313
c000c446:	75 0a                	jne    c000c452 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c448:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c44e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c455:	66 3d 14 03          	cmp    ax,0x314
c000c459:	75 0a                	jne    c000c465 <sendKeyboardToken(KeyboardToken)+0x192>
c000c45b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c461:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c468:	66 3d 15 03          	cmp    ax,0x315
c000c46c:	75 0a                	jne    c000c478 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c46e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c474:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47b:	66 3d 16 03          	cmp    ax,0x316
c000c47f:	75 0a                	jne    c000c48b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c481:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c487:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48e:	66 3d 17 03          	cmp    ax,0x317
c000c492:	75 0a                	jne    c000c49e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c494:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c49a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a1:	66 3d 18 03          	cmp    ax,0x318
c000c4a5:	75 0a                	jne    c000c4b1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4a7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b4:	66 3d 19 03          	cmp    ax,0x319
c000c4b8:	75 0a                	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4ba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c7:	66 3d 00 02          	cmp    ax,0x200
c000c4cb:	75 2c                	jne    c000c4f9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4cd:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c000c4d2:	83 f0 01             	xor    eax,0x1
c000c4d5:	84 c0                	test   al,al
c000c4d7:	74 20                	je     c000c4f9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4d9:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000c4de:	6a 01                	push   0x1
c000c4e0:	6a 00                	push   0x0
c000c4e2:	68 32 c1 00 c0       	push   0xc000c132
c000c4e7:	50                   	push   eax
c000c4e8:	e8 ff 71 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	c6 05 60 32 02 c0 01 	mov    BYTE PTR ds:0xc0023260,0x1
c000c4f7:	eb 33                	jmp    c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fc:	66 3d 01 02          	cmp    ax,0x201
c000c500:	75 2a                	jne    c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c502:	a0 60 32 02 c0       	mov    al,ds:0xc0023260
c000c507:	83 f0 01             	xor    eax,0x1
c000c50a:	84 c0                	test   al,al
c000c50c:	74 1e                	je     c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c50e:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000c513:	6a 01                	push   0x1
c000c515:	6a 00                	push   0x0
c000c517:	68 9e c1 00 c0       	push   0xc000c19e
c000c51c:	50                   	push   eax
c000c51d:	e8 ca 71 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c000c522:	83 c4 10             	add    esp,0x10
c000c525:	c6 05 60 32 02 c0 01 	mov    BYTE PTR ds:0xc0023260,0x1
c000c52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52f:	66 3d 1d 03          	cmp    ax,0x31d
c000c533:	75 06                	jne    c000c53b <sendKeyboardToken(KeyboardToken)+0x268>
c000c535:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53e:	66 3d 1c 03          	cmp    ax,0x31c
c000c542:	75 06                	jne    c000c54a <sendKeyboardToken(KeyboardToken)+0x277>
c000c544:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54d:	66 3d 1b 03          	cmp    ax,0x31b
c000c551:	75 06                	jne    c000c559 <sendKeyboardToken(KeyboardToken)+0x286>
c000c553:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55c:	66 3d 1e 03          	cmp    ax,0x31e
c000c560:	75 06                	jne    c000c568 <sendKeyboardToken(KeyboardToken)+0x295>
c000c562:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56b:	66 3d 1f 03          	cmp    ax,0x31f
c000c56f:	75 06                	jne    c000c577 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c571:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57a:	66 3d 1a 03          	cmp    ax,0x31a
c000c57e:	75 06                	jne    c000c586 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c580:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c586:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c58a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c58d:	83 f0 01             	xor    eax,0x1
c000c590:	84 c0                	test   al,al
c000c592:	74 7b                	je     c000c60f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c594:	a0 61 2f 02 c0       	mov    al,ds:0xc0022f61
c000c599:	84 c0                	test   al,al
c000c59b:	74 43                	je     c000c5e0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c59d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5a1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5a5:	74 2d                	je     c000c5d4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c5a7:	8b 15 64 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023264
c000c5ad:	89 d0                	mov    eax,edx
c000c5af:	c1 e0 02             	shl    eax,0x2
c000c5b2:	01 d0                	add    eax,edx
c000c5b4:	01 c0                	add    eax,eax
c000c5b6:	a3 64 32 02 c0       	mov    ds:0xc0023264,eax
c000c5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5be:	25 ff ff 00 00       	and    eax,0xffff
c000c5c3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5c6:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c000c5cb:	01 d0                	add    eax,edx
c000c5cd:	a3 64 32 02 c0       	mov    ds:0xc0023264,eax
c000c5d2:	eb 71                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d4:	c7 05 64 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023264,0x0
c000c5de:	eb 65                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5e0:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c000c5e5:	85 c0                	test   eax,eax
c000c5e7:	74 1a                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5e9:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c000c5ee:	25 ff 00 00 00       	and    eax,0xff
c000c5f3:	83 ec 0c             	sub    esp,0xc
c000c5f6:	50                   	push   eax
c000c5f7:	e8 0e fc ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c5fc:	83 c4 10             	add    esp,0x10
c000c5ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c603:	c7 05 64 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023264,0x0
c000c60d:	eb 36                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c612:	66 3d 01 01          	cmp    ax,0x101
c000c616:	75 2d                	jne    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c618:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c000c61d:	85 c0                	test   eax,eax
c000c61f:	74 1a                	je     c000c63b <sendKeyboardToken(KeyboardToken)+0x368>
c000c621:	a1 64 32 02 c0       	mov    eax,ds:0xc0023264
c000c626:	25 ff 00 00 00       	and    eax,0xff
c000c62b:	83 ec 0c             	sub    esp,0xc
c000c62e:	50                   	push   eax
c000c62f:	e8 d6 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c63b:	c7 05 64 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023264,0x0
c000c645:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c648:	83 f0 01             	xor    eax,0x1
c000c64b:	84 c0                	test   al,al
c000c64d:	74 4e                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c64f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c652:	83 f0 01             	xor    eax,0x1
c000c655:	84 c0                	test   al,al
c000c657:	74 44                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c659:	a0 60 2f 02 c0       	mov    al,ds:0xc0022f60
c000c65e:	83 f0 01             	xor    eax,0x1
c000c661:	84 c0                	test   al,al
c000c663:	74 38                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c668:	66 83 f8 1f          	cmp    ax,0x1f
c000c66c:	76 09                	jbe    c000c677 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c671:	66 83 f8 7e          	cmp    ax,0x7e
c000c675:	76 12                	jbe    c000c689 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67a:	66 83 f8 0a          	cmp    ax,0xa
c000c67e:	74 09                	je     c000c689 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c683:	66 83 f8 08          	cmp    ax,0x8
c000c687:	75 14                	jne    c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68c:	25 ff 00 00 00       	and    eax,0xff
c000c691:	83 ec 0c             	sub    esp,0xc
c000c694:	50                   	push   eax
c000c695:	e8 70 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6a0:	83 f0 01             	xor    eax,0x1
c000c6a3:	84 c0                	test   al,al
c000c6a5:	74 51                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6aa:	83 f0 01             	xor    eax,0x1
c000c6ad:	84 c0                	test   al,al
c000c6af:	74 47                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b1:	a0 60 2f 02 c0       	mov    al,ds:0xc0022f60
c000c6b6:	84 c0                	test   al,al
c000c6b8:	74 3e                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bd:	66 83 f8 3f          	cmp    ax,0x3f
c000c6c1:	76 35                	jbe    c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ca:	77 2c                	ja     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cf:	88 c2                	mov    dl,al
c000c6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6d8:	76 04                	jbe    c000c6de <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6da:	b0 20                	mov    al,0x20
c000c6dc:	eb 02                	jmp    c000c6e0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6de:	b0 00                	mov    al,0x0
c000c6e0:	29 c2                	sub    edx,eax
c000c6e2:	88 d0                	mov    al,dl
c000c6e4:	83 e8 40             	sub    eax,0x40
c000c6e7:	25 ff 00 00 00       	and    eax,0xff
c000c6ec:	83 ec 0c             	sub    esp,0xc
c000c6ef:	50                   	push   eax
c000c6f0:	e8 15 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fb:	66 3d 00 03          	cmp    ax,0x300
c000c6ff:	75 0f                	jne    c000c710 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c701:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c704:	83 f0 01             	xor    eax,0x1
c000c707:	84 c0                	test   al,al
c000c709:	74 05                	je     c000c710 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c70b:	e8 99 ba ff ff       	call   c00081a9 <doTerminalCycle()>
c000c710:	90                   	nop
c000c711:	c9                   	leave  
c000c712:	c3                   	ret    

c000c713 <clearInternalKeybuffer(VgaText*)>:
c000c713:	55                   	push   ebp
c000c714:	89 e5                	mov    ebp,esp
c000c716:	83 ec 08             	sub    esp,0x8
c000c719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71c:	05 b2 00 00 00       	add    eax,0xb2
c000c721:	83 ec 0c             	sub    esp,0xc
c000c724:	50                   	push   eax
c000c725:	e8 16 3e ff ff       	call   c0000540 <strlen>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c730:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c736:	83 ec 04             	sub    esp,0x4
c000c739:	50                   	push   eax
c000c73a:	6a 00                	push   0x0
c000c73c:	52                   	push   edx
c000c73d:	e8 8e 3d ff ff       	call   c00004d0 <memset>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	90                   	nop
c000c746:	c9                   	leave  
c000c747:	c3                   	ret    

c000c748 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c748:	55                   	push   ebp
c000c749:	89 e5                	mov    ebp,esp
c000c74b:	83 ec 18             	sub    esp,0x18
c000c74e:	a1 48 2e 02 c0       	mov    eax,ds:0xc0022e48
c000c753:	85 c0                	test   eax,eax
c000c755:	74 2a                	je     c000c781 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c757:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c75d:	8b 0d 48 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e48
c000c763:	83 ec 04             	sub    esp,0x4
c000c766:	68 60 2e 02 c0       	push   0xc0022e60
c000c76b:	83 ec 08             	sub    esp,0x8
c000c76e:	89 e2                	mov    edx,esp
c000c770:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c773:	89 02                	mov    DWORD PTR [edx],eax
c000c775:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c778:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c77c:	ff d1                	call   ecx
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	fb                   	sti    
c000c782:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c789:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c78d:	0f 84 c4 00 00 00    	je     c000c857 <readKeyboard(VgaText*, char*, unsigned long)+0x10f>
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c79c:	84 c0                	test   al,al
c000c79e:	75 28                	jne    c000c7c8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7a0:	fa                   	cli    
c000c7a1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c7a6:	40                   	inc    eax
c000c7a7:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c7ac:	e8 5b 71 00 00       	call   c001390c <schedule()>
c000c7b1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c7b6:	48                   	dec    eax
c000c7b7:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000c7bc:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000c7c1:	85 c0                	test   eax,eax
c000c7c3:	75 ce                	jne    c000c793 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7c5:	fb                   	sti    
c000c7c6:	eb cb                	jmp    c000c793 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7cb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ce:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7d4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7da:	88 10                	mov    BYTE PTR [eax],dl
c000c7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7df:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7e5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7e8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7ec:	75 1d                	jne    c000c80b <readKeyboard(VgaText*, char*, unsigned long)+0xc3>
c000c7ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c7f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c7f8:	05 20 07 00 00       	add    eax,0x720
c000c7fd:	83 ec 08             	sub    esp,0x8
c000c800:	6a 02                	push   0x2
c000c802:	50                   	push   eax
c000c803:	e8 2e 3d 00 00       	call   c0010536 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c808:	83 c4 10             	add    esp,0x10
c000c80b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c80e:	05 b2 00 00 00       	add    eax,0xb2
c000c813:	83 ec 0c             	sub    esp,0xc
c000c816:	50                   	push   eax
c000c817:	e8 24 3d ff ff       	call   c0000540 <strlen>
c000c81c:	83 c4 10             	add    esp,0x10
c000c81f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c822:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c828:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c82b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c82e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c834:	83 ec 04             	sub    esp,0x4
c000c837:	50                   	push   eax
c000c838:	51                   	push   ecx
c000c839:	52                   	push   edx
c000c83a:	e8 a1 3b ff ff       	call   c00003e0 <memmove>
c000c83f:	83 c4 10             	add    esp,0x10
c000c842:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c845:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c848:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c84c:	0f 85 37 ff ff ff    	jne    c000c789 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c852:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c855:	eb 03                	jmp    c000c85a <readKeyboard(VgaText*, char*, unsigned long)+0x112>
c000c857:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c85a:	c9                   	leave  
c000c85b:	c3                   	ret    

c000c85c <Keyboard::Keyboard(char const*)>:
c000c85c:	83 ec 0c             	sub    esp,0xc
c000c85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c863:	83 ec 08             	sub    esp,0x8
c000c866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86a:	50                   	push   eax
c000c86b:	e8 50 f2 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	ba bc e1 01 c0       	mov    edx,0xc001e1bc
c000c878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c87c:	89 10                	mov    DWORD PTR [eax],edx
c000c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c882:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c88c:	c6 05 44 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e44,0x1
c000c893:	90                   	nop
c000c894:	83 c4 0c             	add    esp,0xc
c000c897:	c3                   	ret    

c000c898 <Keyboard::~Keyboard()>:
c000c898:	83 ec 0c             	sub    esp,0xc
c000c89b:	ba bc e1 01 c0       	mov    edx,0xc001e1bc
c000c8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a4:	89 10                	mov    DWORD PTR [eax],edx
c000c8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8aa:	83 ec 0c             	sub    esp,0xc
c000c8ad:	50                   	push   eax
c000c8ae:	e8 77 ef ff ff       	call   c000b82a <Device::~Device()>
c000c8b3:	83 c4 10             	add    esp,0x10
c000c8b6:	90                   	nop
c000c8b7:	83 c4 0c             	add    esp,0xc
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <Keyboard::~Keyboard()>:
c000c8bc:	83 ec 0c             	sub    esp,0xc
c000c8bf:	83 ec 0c             	sub    esp,0xc
c000c8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8c6:	e8 cd ff ff ff       	call   c000c898 <Keyboard::~Keyboard()>
c000c8cb:	83 c4 10             	add    esp,0x10
c000c8ce:	83 ec 08             	sub    esp,0x8
c000c8d1:	68 5c 01 00 00       	push   0x15c
c000c8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8da:	e8 13 db ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000c8df:	83 c4 10             	add    esp,0x10
c000c8e2:	83 c4 0c             	add    esp,0xc
c000c8e5:	c3                   	ret    

c000c8e6 <LogicalDisk::close(int, int, void*)>:
c000c8e6:	83 c8 ff             	or     eax,0xffffffff
c000c8e9:	c3                   	ret    

c000c8ea <LogicalDisk::~LogicalDisk()>:
c000c8ea:	83 ec 0c             	sub    esp,0xc
c000c8ed:	ba 34 e2 01 c0       	mov    edx,0xc001e234
c000c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f6:	89 10                	mov    DWORD PTR [eax],edx
c000c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fc:	83 ec 0c             	sub    esp,0xc
c000c8ff:	50                   	push   eax
c000c900:	e8 25 ef ff ff       	call   c000b82a <Device::~Device()>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	90                   	nop
c000c909:	83 c4 0c             	add    esp,0xc
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <LogicalDisk::~LogicalDisk()>:
c000c90e:	83 ec 0c             	sub    esp,0xc
c000c911:	83 ec 0c             	sub    esp,0xc
c000c914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c918:	e8 cd ff ff ff       	call   c000c8ea <LogicalDisk::~LogicalDisk()>
c000c91d:	83 c4 10             	add    esp,0x10
c000c920:	83 ec 08             	sub    esp,0x8
c000c923:	68 74 01 00 00       	push   0x174
c000c928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92c:	e8 c1 da ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	83 c4 0c             	add    esp,0xc
c000c937:	c3                   	ret    

c000c938 <LogicalDisk::open(int, int, void*)>:
c000c938:	83 ec 18             	sub    esp,0x18
c000c93b:	68 e8 e1 01 c0       	push   0xc001e1e8
c000c940:	e8 0e 38 00 00       	call   c0010153 <KePanic(char const*)>
c000c945:	83 c8 ff             	or     eax,0xffffffff
c000c948:	83 c4 1c             	add    esp,0x1c
c000c94b:	c3                   	ret    

c000c94c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c94c:	53                   	push   ebx
c000c94d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c955:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c959:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c95f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c965:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c96b:	77 10                	ja     c000c97d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c96d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c973:	89 d3                	mov    ebx,edx
c000c975:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c97b:	72 05                	jb     c000c982 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c97d:	83 c8 ff             	or     eax,0xffffffff
c000c980:	89 c2                	mov    edx,eax
c000c982:	5b                   	pop    ebx
c000c983:	c3                   	ret    

c000c984 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c984:	56                   	push   esi
c000c985:	83 c8 ff             	or     eax,0xffffffff
c000c988:	53                   	push   ebx
c000c989:	89 c2                	mov    edx,eax
c000c98b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c98f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c993:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c997:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c99d:	77 27                	ja     c000c9c6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c99f:	89 d8                	mov    eax,ebx
c000c9a1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9a7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9b2:	89 c2                	mov    edx,eax
c000c9b4:	73 10                	jae    c000c9c6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9b6:	89 c8                	mov    eax,ecx
c000c9b8:	89 da                	mov    edx,ebx
c000c9ba:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9c0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9c6:	5b                   	pop    ebx
c000c9c7:	5e                   	pop    esi
c000c9c8:	c3                   	ret    
c000c9c9:	90                   	nop

c000c9ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9ca:	83 ec 1c             	sub    esp,0x1c
c000c9cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f0:	83 ec 08             	sub    esp,0x8
c000c9f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f7:	50                   	push   eax
c000c9f8:	e8 c3 f0 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000c9fd:	83 c4 10             	add    esp,0x10
c000ca00:	ba 34 e2 01 c0       	mov    edx,0xc001e234
c000ca05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca09:	89 10                	mov    DWORD PTR [eax],edx
c000ca0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca25:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca3b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca41:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca52:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca58:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca66:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca70:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca7a:	90                   	nop
c000ca7b:	83 c4 1c             	add    esp,0x1c
c000ca7e:	c3                   	ret    
c000ca7f:	90                   	nop

c000ca80 <LogicalDisk::assignDriveLetter()>:
c000ca80:	55                   	push   ebp
c000ca81:	57                   	push   edi
c000ca82:	56                   	push   esi
c000ca83:	53                   	push   ebx
c000ca84:	83 ec 14             	sub    esp,0x14
c000ca87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca8b:	8b 3d 80 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023280
c000ca91:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca97:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca9b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000caa1:	8b 3d 84 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023284
c000caa7:	3c 01                	cmp    al,0x1
c000caa9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000caad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cab1:	19 c0                	sbb    eax,eax
c000cab3:	83 e0 02             	and    eax,0x2
c000cab6:	83 c0 41             	add    eax,0x41
c000cab9:	0f be e8             	movsx  ebp,al
c000cabc:	3c 43                	cmp    al,0x43
c000cabe:	75 10                	jne    c000cad0 <LogicalDisk::assignDriveLetter()+0x50>
c000cac0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cac7:	75 5d                	jne    c000cb26 <LogicalDisk::assignDriveLetter()+0xa6>
c000cac9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cace:	75 56                	jne    c000cb26 <LogicalDisk::assignDriveLetter()+0xa6>
c000cad0:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cad3:	ba 01 00 00 00       	mov    edx,0x1
c000cad8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cadc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cae0:	d3 e2                	shl    edx,cl
c000cae2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cae6:	89 d7                	mov    edi,edx
c000cae8:	89 d6                	mov    esi,edx
c000caea:	c1 ff 1f             	sar    edi,0x1f
c000caed:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000caf1:	21 f9                	and    ecx,edi
c000caf3:	09 d1                	or     ecx,edx
c000caf5:	75 2f                	jne    c000cb26 <LogicalDisk::assignDriveLetter()+0xa6>
c000caf7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cafb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000caff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb05:	09 f2                	or     edx,esi
c000cb07:	89 15 80 32 02 c0    	mov    DWORD PTR ds:0xc0023280,edx
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	09 fa                	or     edx,edi
c000cb13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb17:	89 15 84 32 02 c0    	mov    DWORD PTR ds:0xc0023284,edx
c000cb1d:	89 1c bd a0 32 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcd60],ebx
c000cb24:	eb 08                	jmp    c000cb2e <LogicalDisk::assignDriveLetter()+0xae>
c000cb26:	45                   	inc    ebp
c000cb27:	40                   	inc    eax
c000cb28:	3c 5b                	cmp    al,0x5b
c000cb2a:	75 90                	jne    c000cabc <LogicalDisk::assignDriveLetter()+0x3c>
c000cb2c:	31 c0                	xor    eax,eax
c000cb2e:	83 c4 14             	add    esp,0x14
c000cb31:	5b                   	pop    ebx
c000cb32:	5e                   	pop    esi
c000cb33:	5f                   	pop    edi
c000cb34:	5d                   	pop    ebp
c000cb35:	c3                   	ret    

c000cb36 <LogicalDisk::mount()>:
c000cb36:	56                   	push   esi
c000cb37:	53                   	push   ebx
c000cb38:	53                   	push   ebx
c000cb39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb3d:	8b 1d 34 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e34
c000cb43:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb4d:	85 db                	test   ebx,ebx
c000cb4f:	74 27                	je     c000cb78 <LogicalDisk::mount()+0x42>
c000cb51:	51                   	push   ecx
c000cb52:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb59:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb5b:	83 e8 41             	sub    eax,0x41
c000cb5e:	50                   	push   eax
c000cb5f:	56                   	push   esi
c000cb60:	53                   	push   ebx
c000cb61:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb64:	83 c4 10             	add    esp,0x10
c000cb67:	84 c0                	test   al,al
c000cb69:	74 08                	je     c000cb73 <LogicalDisk::mount()+0x3d>
c000cb6b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb71:	eb 07                	jmp    c000cb7a <LogicalDisk::mount()+0x44>
c000cb73:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb76:	eb d5                	jmp    c000cb4d <LogicalDisk::mount()+0x17>
c000cb78:	31 c0                	xor    eax,eax
c000cb7a:	5a                   	pop    edx
c000cb7b:	5b                   	pop    ebx
c000cb7c:	5e                   	pop    esi
c000cb7d:	c3                   	ret    

c000cb7e <LogicalDisk::unmount()>:
c000cb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb82:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb8c:	c3                   	ret    
c000cb8d:	90                   	nop

c000cb8e <LogicalDisk::eject()>:
c000cb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb98:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb9e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cba1:	90                   	nop

c000cba2 <LogicalDisk::unassignDriveLetter()>:
c000cba2:	57                   	push   edi
c000cba3:	56                   	push   esi
c000cba4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cba8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbaf:	84 c9                	test   cl,cl
c000cbb1:	75 0f                	jne    c000cbc2 <LogicalDisk::unassignDriveLetter()+0x20>
c000cbb3:	c7 44 24 0c 0c e2 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e20c
c000cbbb:	5e                   	pop    esi
c000cbbc:	5f                   	pop    edi
c000cbbd:	e9 91 35 00 00       	jmp    c0010153 <KePanic(char const*)>
c000cbc2:	83 e9 41             	sub    ecx,0x41
c000cbc5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbcc:	b8 01 00 00 00       	mov    eax,0x1
c000cbd1:	c7 04 8d a0 32 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcd60],0x0
c000cbdc:	d3 e0                	shl    eax,cl
c000cbde:	89 c7                	mov    edi,eax
c000cbe0:	f7 d0                	not    eax
c000cbe2:	c1 ff 1f             	sar    edi,0x1f
c000cbe5:	21 05 80 32 02 c0    	and    DWORD PTR ds:0xc0023280,eax
c000cbeb:	89 fe                	mov    esi,edi
c000cbed:	f7 d6                	not    esi
c000cbef:	21 35 84 32 02 c0    	and    DWORD PTR ds:0xc0023284,esi
c000cbf5:	5e                   	pop    esi
c000cbf6:	5f                   	pop    edi
c000cbf7:	c3                   	ret    

c000cbf8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbf8:	57                   	push   edi
c000cbf9:	56                   	push   esi
c000cbfa:	53                   	push   ebx
c000cbfb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc03:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc0b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc11:	77 41                	ja     c000cc54 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc13:	99                   	cdq    
c000cc14:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc1a:	01 c8                	add    eax,ecx
c000cc1c:	11 da                	adc    edx,ebx
c000cc1e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc24:	19 d7                	sbb    edi,edx
c000cc26:	72 33                	jb     c000cc5b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc28:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc2e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc34:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc38:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc3c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc42:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc4c:	5b                   	pop    ebx
c000cc4d:	5e                   	pop    esi
c000cc4e:	5f                   	pop    edi
c000cc4f:	e9 4e 0a 00 00       	jmp    c000d6a2 <VCache::read(unsigned long long, int, void*)>
c000cc54:	b8 05 00 00 00       	mov    eax,0x5
c000cc59:	eb 05                	jmp    c000cc60 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc5b:	b8 07 00 00 00       	mov    eax,0x7
c000cc60:	5b                   	pop    ebx
c000cc61:	5e                   	pop    esi
c000cc62:	5f                   	pop    edi
c000cc63:	c3                   	ret    

c000cc64 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc64:	57                   	push   edi
c000cc65:	56                   	push   esi
c000cc66:	53                   	push   ebx
c000cc67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc6f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc7d:	77 41                	ja     c000ccc0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc7f:	99                   	cdq    
c000cc80:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc86:	01 c8                	add    eax,ecx
c000cc88:	11 da                	adc    edx,ebx
c000cc8a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc90:	19 d7                	sbb    edi,edx
c000cc92:	72 33                	jb     c000ccc7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc94:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc9a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cca0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cca4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cca8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb8:	5b                   	pop    ebx
c000ccb9:	5e                   	pop    esi
c000ccba:	5f                   	pop    edi
c000ccbb:	e9 cc 08 00 00       	jmp    c000d58c <VCache::write(unsigned long long, int, void*)>
c000ccc0:	b8 05 00 00 00       	mov    eax,0x5
c000ccc5:	eb 05                	jmp    c000cccc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccc7:	b8 07 00 00 00       	mov    eax,0x7
c000cccc:	5b                   	pop    ebx
c000cccd:	5e                   	pop    esi
c000ccce:	5f                   	pop    edi
c000cccf:	c3                   	ret    

c000ccd0 <Mouse::Mouse(char const*)>:
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd7:	83 ec 08             	sub    esp,0x8
c000ccda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccde:	50                   	push   eax
c000ccdf:	e8 dc ed ff ff       	call   c000bac0 <Device::Device(char const*)>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	ba 60 e2 01 c0       	mov    edx,0xc001e260
c000ccec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf0:	89 10                	mov    DWORD PTR [eax],edx
c000ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd00:	90                   	nop
c000cd01:	83 c4 0c             	add    esp,0xc
c000cd04:	c3                   	ret    
c000cd05:	90                   	nop
c000cd06:	66 90                	xchg   ax,ax

c000cd08 <Mouse::~Mouse()>:
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	ba 60 e2 01 c0       	mov    edx,0xc001e260
c000cd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd14:	89 10                	mov    DWORD PTR [eax],edx
c000cd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1a:	83 ec 0c             	sub    esp,0xc
c000cd1d:	50                   	push   eax
c000cd1e:	e8 07 eb ff ff       	call   c000b82a <Device::~Device()>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	90                   	nop
c000cd27:	83 c4 0c             	add    esp,0xc
c000cd2a:	c3                   	ret    
c000cd2b:	90                   	nop

c000cd2c <Mouse::~Mouse()>:
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	83 ec 0c             	sub    esp,0xc
c000cd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd36:	e8 cd ff ff ff       	call   c000cd08 <Mouse::~Mouse()>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	83 ec 08             	sub    esp,0x8
c000cd41:	68 58 01 00 00       	push   0x158
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	e8 a3 d6 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	83 c4 0c             	add    esp,0xc
c000cd55:	c3                   	ret    

c000cd56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd56:	55                   	push   ebp
c000cd57:	57                   	push   edi
c000cd58:	56                   	push   esi
c000cd59:	53                   	push   ebx
c000cd5a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd60:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd67:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd6e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd75:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd80:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd84:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd8b:	e8 2c ee ff ff       	call   c000bbbc <Device::getName()>
c000cd90:	5a                   	pop    edx
c000cd91:	59                   	pop    ecx
c000cd92:	50                   	push   eax
c000cd93:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd97:	55                   	push   ebp
c000cd98:	e8 63 38 ff ff       	call   c0000600 <strcpy>
c000cd9d:	5b                   	pop    ebx
c000cd9e:	58                   	pop    eax
c000cd9f:	68 84 e2 01 c0       	push   0xc001e284
c000cda4:	55                   	push   ebp
c000cda5:	e8 16 3a ff ff       	call   c00007c0 <strcat>
c000cdaa:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cdb1:	e8 03 aa ff ff       	call   c00077b9 <malloc>
c000cdb6:	83 c4 0c             	add    esp,0xc
c000cdb9:	89 c3                	mov    ebx,eax
c000cdbb:	57                   	push   edi
c000cdbc:	56                   	push   esi
c000cdbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdc5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cdcc:	55                   	push   ebp
c000cdcd:	50                   	push   eax
c000cdce:	e8 f7 fb ff ff       	call   c000c9ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cdd3:	83 c4 14             	add    esp,0x14
c000cdd6:	53                   	push   ebx
c000cdd7:	e8 a4 fc ff ff       	call   c000ca80 <LogicalDisk::assignDriveLetter()>
c000cddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cddf:	e8 52 fd ff ff       	call   c000cb36 <LogicalDisk::mount()>
c000cde4:	58                   	pop    eax
c000cde5:	5a                   	pop    edx
c000cde6:	53                   	push   ebx
c000cde7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdee:	e8 35 eb ff ff       	call   c000b928 <Device::addChild(Device*)>
c000cdf3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cdf9:	5b                   	pop    ebx
c000cdfa:	5e                   	pop    esi
c000cdfb:	5f                   	pop    edi
c000cdfc:	5d                   	pop    ebp
c000cdfd:	c3                   	ret    

c000cdfe <createPartitionsForDisk(PhysicalDisk*)>:
c000cdfe:	55                   	push   ebp
c000cdff:	57                   	push   edi
c000ce00:	56                   	push   esi
c000ce01:	53                   	push   ebx
c000ce02:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce08:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce0f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce15:	3d 00 02 00 00       	cmp    eax,0x200
c000ce1a:	74 27                	je     c000ce43 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce1c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce22:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce28:	83 ec 10             	sub    esp,0x10
c000ce2b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce2f:	99                   	cdq    
c000ce30:	c1 e6 0a             	shl    esi,0xa
c000ce33:	52                   	push   edx
c000ce34:	89 fd                	mov    ebp,edi
c000ce36:	50                   	push   eax
c000ce37:	55                   	push   ebp
c000ce38:	56                   	push   esi
c000ce39:	e8 d2 f3 00 00       	call   c001c210 <__udivdi3>
c000ce3e:	e9 b1 00 00 00       	jmp    c000cef4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce43:	83 ec 0c             	sub    esp,0xc
c000ce46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce48:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce4c:	56                   	push   esi
c000ce4d:	6a 01                	push   0x1
c000ce4f:	6a 00                	push   0x0
c000ce51:	6a 00                	push   0x0
c000ce53:	53                   	push   ebx
c000ce54:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce62:	75 0a                	jne    c000ce6e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce64:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce6c:	74 2c                	je     c000ce9a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce6e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce74:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce7a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce80:	83 ec 10             	sub    esp,0x10
c000ce83:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce87:	89 f7                	mov    edi,esi
c000ce89:	c1 e0 0a             	shl    eax,0xa
c000ce8c:	c1 ff 1f             	sar    edi,0x1f
c000ce8f:	57                   	push   edi
c000ce90:	56                   	push   esi
c000ce91:	52                   	push   edx
c000ce92:	50                   	push   eax
c000ce93:	e8 78 f3 00 00       	call   c001c210 <__udivdi3>
c000ce98:	eb 5a                	jmp    c000cef4 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce9a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cea1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cea8:	83 e1 7f             	and    ecx,0x7f
c000ceab:	83 e0 7f             	and    eax,0x7f
c000ceae:	01 c1                	add    ecx,eax
c000ceb0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ceb7:	83 e0 7f             	and    eax,0x7f
c000ceba:	01 c1                	add    ecx,eax
c000cebc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cec3:	83 e0 7f             	and    eax,0x7f
c000cec6:	00 c1                	add    cl,al
c000cec8:	74 41                	je     c000cf0b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ced0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ced6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cedc:	83 ec 10             	sub    esp,0x10
c000cedf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cee3:	89 f7                	mov    edi,esi
c000cee5:	c1 e0 0a             	shl    eax,0xa
c000cee8:	c1 ff 1f             	sar    edi,0x1f
c000ceeb:	57                   	push   edi
c000ceec:	56                   	push   esi
c000ceed:	52                   	push   edx
c000ceee:	50                   	push   eax
c000ceef:	e8 1c f3 00 00       	call   c001c210 <__udivdi3>
c000cef4:	83 c4 14             	add    esp,0x14
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	6a 00                	push   0x0
c000cefb:	6a 00                	push   0x0
c000cefd:	53                   	push   ebx
c000cefe:	e8 53 fe ff ff       	call   c000cd56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf03:	83 c4 20             	add    esp,0x20
c000cf06:	e9 79 01 00 00       	jmp    c000d084 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf0b:	89 f0                	mov    eax,esi
c000cf0d:	31 f6                	xor    esi,esi
c000cf0f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf16:	75 02                	jne    c000cf1a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf18:	89 f1                	mov    ecx,esi
c000cf1a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf21:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf28:	c1 e2 08             	shl    edx,0x8
c000cf2b:	c1 e7 10             	shl    edi,0x10
c000cf2e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf36:	09 fa                	or     edx,edi
c000cf38:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf40:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf47:	83 c0 10             	add    eax,0x10
c000cf4a:	09 fa                	or     edx,edi
c000cf4c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf53:	c1 e7 18             	shl    edi,0x18
c000cf56:	09 fa                	or     edx,edi
c000cf58:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf5f:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf63:	c1 e7 10             	shl    edi,0x10
c000cf66:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf6d:	c1 e2 08             	shl    edx,0x8
c000cf70:	09 fa                	or     edx,edi
c000cf72:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf79:	09 fa                	or     edx,edi
c000cf7b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf82:	c1 e7 18             	shl    edi,0x18
c000cf85:	09 fa                	or     edx,edi
c000cf87:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf8b:	46                   	inc    esi
c000cf8c:	83 fe 04             	cmp    esi,0x4
c000cf8f:	0f 85 7a ff ff ff    	jne    c000cf0f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf99:	83 f0 01             	xor    eax,0x1
c000cf9c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfa0:	75 57                	jne    c000cff9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfa6:	83 f0 01             	xor    eax,0x1
c000cfa9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfad:	75 4a                	jne    c000cff9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfaf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfb3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfbb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfc3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfc9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfcf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfd5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfd9:	89 f7                	mov    edi,esi
c000cfdb:	c1 e0 0a             	shl    eax,0xa
c000cfde:	c1 ff 1f             	sar    edi,0x1f
c000cfe1:	57                   	push   edi
c000cfe2:	56                   	push   esi
c000cfe3:	52                   	push   edx
c000cfe4:	50                   	push   eax
c000cfe5:	e8 26 f2 00 00       	call   c001c210 <__udivdi3>
c000cfea:	83 c4 10             	add    esp,0x10
c000cfed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cff5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cff9:	84 c9                	test   cl,cl
c000cffb:	74 53                	je     c000d050 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cffd:	0f b6 c9             	movzx  ecx,cl
c000d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d004:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d008:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d00c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d010:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d014:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d018:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d01c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d020:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d024:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d02c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d030:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d034:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d038:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d03c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d040:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d044:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d048:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d04c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d050:	31 ed                	xor    ebp,ebp
c000d052:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d056:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d05a:	89 f8                	mov    eax,edi
c000d05c:	09 f0                	or     eax,esi
c000d05e:	74 1e                	je     c000d07e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d060:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d064:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d068:	89 d1                	mov    ecx,edx
c000d06a:	09 c1                	or     ecx,eax
c000d06c:	74 10                	je     c000d07e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d06e:	83 ec 0c             	sub    esp,0xc
c000d071:	57                   	push   edi
c000d072:	56                   	push   esi
c000d073:	52                   	push   edx
c000d074:	50                   	push   eax
c000d075:	53                   	push   ebx
c000d076:	e8 db fc ff ff       	call   c000cd56 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d07b:	83 c4 20             	add    esp,0x20
c000d07e:	45                   	inc    ebp
c000d07f:	83 fd 04             	cmp    ebp,0x4
c000d082:	75 ce                	jne    c000d052 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d084:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d08a:	5b                   	pop    ebx
c000d08b:	5e                   	pop    esi
c000d08c:	5f                   	pop    edi
c000d08d:	5d                   	pop    ebp
c000d08e:	c3                   	ret    
c000d08f:	90                   	nop

c000d090 <Serial::Serial(char const*)>:
c000d090:	83 ec 0c             	sub    esp,0xc
c000d093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d097:	83 ec 08             	sub    esp,0x8
c000d09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d09e:	50                   	push   eax
c000d09f:	e8 1c ea ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d0a4:	83 c4 10             	add    esp,0x10
c000d0a7:	ba 98 e2 01 c0       	mov    edx,0xc001e298
c000d0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b0:	89 10                	mov    DWORD PTR [eax],edx
c000d0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0b6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0c0:	90                   	nop
c000d0c1:	83 c4 0c             	add    esp,0xc
c000d0c4:	c3                   	ret    
c000d0c5:	90                   	nop
c000d0c6:	66 90                	xchg   ax,ax

c000d0c8 <Serial::~Serial()>:
c000d0c8:	83 ec 0c             	sub    esp,0xc
c000d0cb:	ba 98 e2 01 c0       	mov    edx,0xc001e298
c000d0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d4:	89 10                	mov    DWORD PTR [eax],edx
c000d0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	50                   	push   eax
c000d0de:	e8 47 e7 ff ff       	call   c000b82a <Device::~Device()>
c000d0e3:	83 c4 10             	add    esp,0x10
c000d0e6:	90                   	nop
c000d0e7:	83 c4 0c             	add    esp,0xc
c000d0ea:	c3                   	ret    
c000d0eb:	90                   	nop

c000d0ec <Serial::~Serial()>:
c000d0ec:	83 ec 0c             	sub    esp,0xc
c000d0ef:	83 ec 0c             	sub    esp,0xc
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	e8 cd ff ff ff       	call   c000d0c8 <Serial::~Serial()>
c000d0fb:	83 c4 10             	add    esp,0x10
c000d0fe:	83 ec 08             	sub    esp,0x8
c000d101:	68 58 01 00 00       	push   0x158
c000d106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10a:	e8 e3 d2 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d10f:	83 c4 10             	add    esp,0x10
c000d112:	83 c4 0c             	add    esp,0xc
c000d115:	c3                   	ret    
c000d116:	66 90                	xchg   ax,ax

c000d118 <Timer::Timer(char const*)>:
c000d118:	83 ec 0c             	sub    esp,0xc
c000d11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d11f:	83 ec 08             	sub    esp,0x8
c000d122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d126:	50                   	push   eax
c000d127:	e8 94 e9 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d12c:	83 c4 10             	add    esp,0x10
c000d12f:	ba dc e2 01 c0       	mov    edx,0xc001e2dc
c000d134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d138:	89 10                	mov    DWORD PTR [eax],edx
c000d13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d13e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d148:	90                   	nop
c000d149:	83 c4 0c             	add    esp,0xc
c000d14c:	c3                   	ret    
c000d14d:	90                   	nop
c000d14e:	66 90                	xchg   ax,ax

c000d150 <Timer::~Timer()>:
c000d150:	83 ec 0c             	sub    esp,0xc
c000d153:	ba dc e2 01 c0       	mov    edx,0xc001e2dc
c000d158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15c:	89 10                	mov    DWORD PTR [eax],edx
c000d15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d162:	83 ec 0c             	sub    esp,0xc
c000d165:	50                   	push   eax
c000d166:	e8 bf e6 ff ff       	call   c000b82a <Device::~Device()>
c000d16b:	83 c4 10             	add    esp,0x10
c000d16e:	90                   	nop
c000d16f:	83 c4 0c             	add    esp,0xc
c000d172:	c3                   	ret    
c000d173:	90                   	nop

c000d174 <Timer::~Timer()>:
c000d174:	83 ec 0c             	sub    esp,0xc
c000d177:	83 ec 0c             	sub    esp,0xc
c000d17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17e:	e8 cd ff ff ff       	call   c000d150 <Timer::~Timer()>
c000d183:	83 c4 10             	add    esp,0x10
c000d186:	83 ec 08             	sub    esp,0x8
c000d189:	68 5c 01 00 00       	push   0x15c
c000d18e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d192:	e8 5b d2 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d197:	83 c4 10             	add    esp,0x10
c000d19a:	83 c4 0c             	add    esp,0xc
c000d19d:	c3                   	ret    

c000d19e <Timer::read()>:
c000d19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1a8:	c3                   	ret    

c000d1a9 <setupTimer(int)>:
c000d1a9:	53                   	push   ebx
c000d1aa:	83 ec 14             	sub    esp,0x14
c000d1ad:	68 5c 01 00 00       	push   0x15c
c000d1b2:	e8 02 a6 ff ff       	call   c00077b9 <malloc>
c000d1b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1ba:	89 c3                	mov    ebx,eax
c000d1bc:	e8 bf e9 00 00       	call   c001bb80 <PIT::PIT()>
c000d1c1:	58                   	pop    eax
c000d1c2:	5a                   	pop    edx
c000d1c3:	53                   	push   ebx
c000d1c4:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c000d1ca:	e8 59 e7 ff ff       	call   c000b928 <Device::addChild(Device*)>
c000d1cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1d1:	6a 00                	push   0x0
c000d1d3:	6a 00                	push   0x0
c000d1d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1d9:	53                   	push   ebx
c000d1da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1dd:	89 d8                	mov    eax,ebx
c000d1df:	83 c4 28             	add    esp,0x28
c000d1e2:	5b                   	pop    ebx
c000d1e3:	c3                   	ret    

c000d1e4 <timerHandler(unsigned int)>:
c000d1e4:	56                   	push   esi
c000d1e5:	53                   	push   ebx
c000d1e6:	51                   	push   ecx
c000d1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1eb:	01 05 0c 33 02 c0    	add    DWORD PTR ds:0xc002330c,eax
c000d1f1:	80 3d 3d 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d3d,0x0
c000d1f8:	0f 84 4a 01 00 00    	je     c000d348 <timerHandler(unsigned int)+0x164>
c000d1fe:	fa                   	cli    
c000d1ff:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 05 e4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe4
c000d20e:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d213:	e8 c8 f5 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	84 c0                	test   al,al
c000d21d:	0f 85 a1 00 00 00    	jne    c000d2c4 <timerHandler(unsigned int)+0xe0>
c000d223:	83 ec 0c             	sub    esp,0xc
c000d226:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d22b:	e8 cc f5 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 c6                	mov    esi,eax
c000d235:	8d 76 00             	lea    esi,[esi+0x0]
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d240:	e8 b7 f5 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d245:	c7 04 24 f8 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff8
c000d24c:	89 c3                	mov    ebx,eax
c000d24e:	e8 b1 f5 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d253:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d256:	83 c4 10             	add    esp,0x10
c000d259:	3b 05 0c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002330c
c000d25f:	77 23                	ja     c000d284 <timerHandler(unsigned int)+0xa0>
c000d261:	83 ec 0c             	sub    esp,0xc
c000d264:	53                   	push   ebx
c000d265:	e8 66 6b 00 00       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c000d26a:	83 c4 10             	add    esp,0x10
c000d26d:	39 de                	cmp    esi,ebx
c000d26f:	75 27                	jne    c000d298 <timerHandler(unsigned int)+0xb4>
c000d271:	83 ec 0c             	sub    esp,0xc
c000d274:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d279:	e8 7e f5 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d27e:	89 c6                	mov    esi,eax
c000d280:	eb 12                	jmp    c000d294 <timerHandler(unsigned int)+0xb0>
c000d282:	66 90                	xchg   ax,ax
c000d284:	52                   	push   edx
c000d285:	52                   	push   edx
c000d286:	53                   	push   ebx
c000d287:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d28c:	e8 2b f6 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d291:	8d 76 00             	lea    esi,[esi+0x0]
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	90                   	nop
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d2a0:	e8 3b f5 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	84 c0                	test   al,al
c000d2aa:	75 18                	jne    c000d2c4 <timerHandler(unsigned int)+0xe0>
c000d2ac:	83 ec 0c             	sub    esp,0xc
c000d2af:	68 f8 3f 02 c0       	push   0xc0023ff8
c000d2b4:	e8 43 f5 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	39 f0                	cmp    eax,esi
c000d2be:	0f 85 74 ff ff ff    	jne    c000d238 <timerHandler(unsigned int)+0x54>
c000d2c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2c9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2cd:	74 41                	je     c000d310 <timerHandler(unsigned int)+0x12c>
c000d2cf:	80 3d 3c 0d 02 c0 00 	cmp    BYTE PTR ds:0xc0020d3c,0x0
c000d2d6:	74 38                	je     c000d310 <timerHandler(unsigned int)+0x12c>
c000d2d8:	fa                   	cli    
c000d2d9:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c000d2df:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000d2e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2ea:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2f3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2f6:	72 08                	jb     c000d300 <timerHandler(unsigned int)+0x11c>
c000d2f8:	e8 0f 66 00 00       	call   c001390c <schedule()>
c000d2fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d300:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000d305:	48                   	dec    eax
c000d306:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000d30b:	75 03                	jne    c000d310 <timerHandler(unsigned int)+0x12c>
c000d30d:	fb                   	sti    
c000d30e:	66 90                	xchg   ax,ax
c000d310:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c000d315:	48                   	dec    eax
c000d316:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c000d31b:	75 1b                	jne    c000d338 <timerHandler(unsigned int)+0x154>
c000d31d:	83 3d e0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fe0,0x0
c000d324:	74 12                	je     c000d338 <timerHandler(unsigned int)+0x154>
c000d326:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c000d330:	e8 d7 65 00 00       	call   c001390c <schedule()>
c000d335:	8d 76 00             	lea    esi,[esi+0x0]
c000d338:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c000d33d:	48                   	dec    eax
c000d33e:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c000d343:	75 03                	jne    c000d348 <timerHandler(unsigned int)+0x164>
c000d345:	fb                   	sti    
c000d346:	66 90                	xchg   ax,ax
c000d348:	58                   	pop    eax
c000d349:	5b                   	pop    ebx
c000d34a:	5e                   	pop    esi
c000d34b:	c3                   	ret    

c000d34c <VCache::VCache(PhysicalDisk*)>:
c000d34c:	53                   	push   ebx
c000d34d:	83 ec 18             	sub    esp,0x18
c000d350:	ba 0c e3 01 c0       	mov    edx,0xc001e30c
c000d355:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d359:	89 10                	mov    DWORD PTR [eax],edx
c000d35b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d375:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d37c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d387:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d38e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d399:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ac:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3b3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3dd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3e5:	83 ec 0c             	sub    esp,0xc
c000d3e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3ec:	e8 c8 a3 ff ff       	call   c00077b9 <malloc>
c000d3f1:	83 c4 10             	add    esp,0x10
c000d3f4:	89 c3                	mov    ebx,eax
c000d3f6:	83 ec 0c             	sub    esp,0xc
c000d3f9:	53                   	push   ebx
c000d3fa:	e8 d9 62 00 00       	call   c00136d8 <Mutex::Mutex()>
c000d3ff:	83 c4 10             	add    esp,0x10
c000d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d406:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d411:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d418:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d41f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d423:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d429:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d42d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d430:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d434:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d43a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d440:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d444:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d447:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d452:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d456:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d45c:	05 00 01 00 00       	add    eax,0x100
c000d461:	c1 e0 04             	shl    eax,0x4
c000d464:	83 ec 0c             	sub    esp,0xc
c000d467:	50                   	push   eax
c000d468:	e8 4c a3 ff ff       	call   c00077b9 <malloc>
c000d46d:	83 c4 10             	add    esp,0x10
c000d470:	89 c2                	mov    edx,eax
c000d472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d476:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d488:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d48c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d490:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d496:	c1 e0 06             	shl    eax,0x6
c000d499:	83 ec 0c             	sub    esp,0xc
c000d49c:	50                   	push   eax
c000d49d:	e8 17 a3 ff ff       	call   c00077b9 <malloc>
c000d4a2:	83 c4 10             	add    esp,0x10
c000d4a5:	89 c2                	mov    edx,eax
c000d4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4ae:	90                   	nop
c000d4af:	83 c4 18             	add    esp,0x18
c000d4b2:	5b                   	pop    ebx
c000d4b3:	c3                   	ret    

c000d4b4 <VCache::invalidateReadBuffer()>:
c000d4b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4b8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4c2:	c3                   	ret    
c000d4c3:	90                   	nop

c000d4c4 <VCache::writeWriteBuffer()>:
c000d4c4:	53                   	push   ebx
c000d4c5:	83 ec 08             	sub    esp,0x8
c000d4c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4d0:	74 1e                	je     c000d4f0 <VCache::writeWriteBuffer()+0x2c>
c000d4d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4d5:	83 ec 0c             	sub    esp,0xc
c000d4d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4e0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4e3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4e6:	50                   	push   eax
c000d4e7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4ea:	83 c4 20             	add    esp,0x20
c000d4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4f7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4fe:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d502:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d509:	83 c4 08             	add    esp,0x8
c000d50c:	5b                   	pop    ebx
c000d50d:	c3                   	ret    
c000d50e:	66 90                	xchg   ax,ax

c000d510 <VCache::~VCache()>:
c000d510:	83 ec 0c             	sub    esp,0xc
c000d513:	ba 0c e3 01 c0       	mov    edx,0xc001e30c
c000d518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51c:	89 10                	mov    DWORD PTR [eax],edx
c000d51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d522:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d525:	84 c0                	test   al,al
c000d527:	74 0f                	je     c000d538 <VCache::~VCache()+0x28>
c000d529:	83 ec 0c             	sub    esp,0xc
c000d52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d530:	e8 8f ff ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c000d535:	83 c4 10             	add    esp,0x10
c000d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d53f:	83 ec 0c             	sub    esp,0xc
c000d542:	50                   	push   eax
c000d543:	e8 91 a2 ff ff       	call   c00077d9 <free>
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d552:	83 ec 0c             	sub    esp,0xc
c000d555:	50                   	push   eax
c000d556:	e8 7e a2 ff ff       	call   c00077d9 <free>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	90                   	nop
c000d55f:	83 c4 0c             	add    esp,0xc
c000d562:	c3                   	ret    
c000d563:	90                   	nop

c000d564 <VCache::~VCache()>:
c000d564:	83 ec 0c             	sub    esp,0xc
c000d567:	83 ec 0c             	sub    esp,0xc
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	e8 9d ff ff ff       	call   c000d510 <VCache::~VCache()>
c000d573:	83 c4 10             	add    esp,0x10
c000d576:	83 ec 08             	sub    esp,0x8
c000d579:	6a 44                	push   0x44
c000d57b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d57f:	e8 6e ce ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	83 c4 0c             	add    esp,0xc
c000d58a:	c3                   	ret    
c000d58b:	90                   	nop

c000d58c <VCache::write(unsigned long long, int, void*)>:
c000d58c:	55                   	push   ebp
c000d58d:	57                   	push   edi
c000d58e:	56                   	push   esi
c000d58f:	53                   	push   ebx
c000d590:	83 ec 1c             	sub    esp,0x1c
c000d593:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d597:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d59b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d59f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5a7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5af:	31 c0                	xor    eax,eax
c000d5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5b4:	39 e8                	cmp    eax,ebp
c000d5b6:	7d 18                	jge    c000d5d0 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5bb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5c1:	0f af c8             	imul   ecx,eax
c000d5c4:	89 ca                	mov    edx,ecx
c000d5c6:	01 f2                	add    edx,esi
c000d5c8:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5ca:	40                   	inc    eax
c000d5cb:	eb e7                	jmp    c000d5b4 <VCache::write(unsigned long long, int, void*)+0x28>
c000d5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5d4:	74 0a                	je     c000d5e0 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5d6:	53                   	push   ebx
c000d5d7:	e8 d8 fe ff ff       	call   c000d4b4 <VCache::invalidateReadBuffer()>
c000d5dc:	58                   	pop    eax
c000d5dd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5e4:	74 5a                	je     c000d640 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5e6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5ed:	89 f8                	mov    eax,edi
c000d5ef:	99                   	cdq    
c000d5f0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5f3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5f6:	31 c1                	xor    ecx,eax
c000d5f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fc:	31 d0                	xor    eax,edx
c000d5fe:	09 c1                	or     ecx,eax
c000d600:	75 32                	jne    c000d634 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d602:	83 fd 01             	cmp    ebp,0x1
c000d605:	75 2d                	jne    c000d634 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d607:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d60a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d610:	0f af f9             	imul   edi,ecx
c000d613:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d616:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d618:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d61b:	40                   	inc    eax
c000d61c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d61f:	83 f8 40             	cmp    eax,0x40
c000d622:	75 74                	jne    c000d698 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	53                   	push   ebx
c000d628:	e8 97 fe ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c000d62d:	83 c4 10             	add    esp,0x10
c000d630:	eb 66                	jmp    c000d698 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d632:	66 90                	xchg   ax,ax
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	53                   	push   ebx
c000d638:	e8 87 fe ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c000d63d:	83 c4 10             	add    esp,0x10
c000d640:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d643:	83 fd 3f             	cmp    ebp,0x3f
c000d646:	7f 24                	jg     c000d66c <VCache::write(unsigned long long, int, void*)+0xe0>
c000d648:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d64c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d64f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d652:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d656:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d65a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d65d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d660:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d666:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d668:	eb 2e                	jmp    c000d698 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d66a:	66 90                	xchg   ax,ax
c000d66c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d66e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d672:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d676:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d67a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d67e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d682:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d686:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d68a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d68d:	83 c4 1c             	add    esp,0x1c
c000d690:	5b                   	pop    ebx
c000d691:	5e                   	pop    esi
c000d692:	5f                   	pop    edi
c000d693:	5d                   	pop    ebp
c000d694:	ff e0                	jmp    eax
c000d696:	66 90                	xchg   ax,ax
c000d698:	83 c4 1c             	add    esp,0x1c
c000d69b:	31 c0                	xor    eax,eax
c000d69d:	5b                   	pop    ebx
c000d69e:	5e                   	pop    esi
c000d69f:	5f                   	pop    edi
c000d6a0:	5d                   	pop    ebp
c000d6a1:	c3                   	ret    

c000d6a2 <VCache::read(unsigned long long, int, void*)>:
c000d6a2:	55                   	push   ebp
c000d6a3:	57                   	push   edi
c000d6a4:	56                   	push   esi
c000d6a5:	53                   	push   ebx
c000d6a6:	83 ec 1c             	sub    esp,0x1c
c000d6a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6b5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6c1:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d6c5:	74 0d                	je     c000d6d4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d6c7:	83 ec 0c             	sub    esp,0xc
c000d6ca:	55                   	push   ebp
c000d6cb:	e8 f4 fd ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c000d6d0:	83 c4 10             	add    esp,0x10
c000d6d3:	90                   	nop
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	55                   	push   ebp
c000d6d8:	e8 d7 fd ff ff       	call   c000d4b4 <VCache::invalidateReadBuffer()>
c000d6dd:	83 c4 0c             	add    esp,0xc
c000d6e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6e9:	6a 00                	push   0x0
c000d6eb:	53                   	push   ebx
c000d6ec:	e8 df 2d ff ff       	call   c00004d0 <memset>
c000d6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d6f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6fa:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d6fe:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d702:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d706:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d70e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d711:	83 c4 2c             	add    esp,0x2c
c000d714:	5b                   	pop    ebx
c000d715:	5e                   	pop    esi
c000d716:	5f                   	pop    edi
c000d717:	5d                   	pop    ebp
c000d718:	ff e0                	jmp    eax

c000d71a <Video::putrect(int, int, int, int, unsigned int)>:
c000d71a:	55                   	push   ebp
c000d71b:	57                   	push   edi
c000d71c:	56                   	push   esi
c000d71d:	53                   	push   ebx
c000d71e:	83 ec 1c             	sub    esp,0x1c
c000d721:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d725:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d729:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d72d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d731:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d739:	01 df                	add    edi,ebx
c000d73b:	39 fb                	cmp    ebx,edi
c000d73d:	7d 1f                	jge    c000d75e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d73f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d743:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d747:	7d 12                	jge    c000d75b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d749:	8b 16                	mov    edx,DWORD PTR [esi]
c000d74b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d74f:	53                   	push   ebx
c000d750:	55                   	push   ebp
c000d751:	45                   	inc    ebp
c000d752:	56                   	push   esi
c000d753:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d756:	83 c4 10             	add    esp,0x10
c000d759:	eb e8                	jmp    c000d743 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d75b:	43                   	inc    ebx
c000d75c:	eb dd                	jmp    c000d73b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d75e:	83 c4 1c             	add    esp,0x1c
c000d761:	5b                   	pop    ebx
c000d762:	5e                   	pop    esi
c000d763:	5f                   	pop    edi
c000d764:	5d                   	pop    ebp
c000d765:	c3                   	ret    

c000d766 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d766:	55                   	push   ebp
c000d767:	57                   	push   edi
c000d768:	31 ff                	xor    edi,edi
c000d76a:	56                   	push   esi
c000d76b:	53                   	push   ebx
c000d76c:	83 ec 1c             	sub    esp,0x1c
c000d76f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d773:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d777:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d77e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d787:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d78b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d78f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d792:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d796:	01 f9                	add    ecx,edi
c000d798:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d79c:	7d 2f                	jge    c000d7cd <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d79e:	31 f6                	xor    esi,esi
c000d7a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7a4:	01 f2                	add    edx,esi
c000d7a6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7aa:	7d 1a                	jge    c000d7c6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7af:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7b2:	46                   	inc    esi
c000d7b3:	51                   	push   ecx
c000d7b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7b8:	52                   	push   edx
c000d7b9:	55                   	push   ebp
c000d7ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7bd:	83 c4 10             	add    esp,0x10
c000d7c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7c4:	eb da                	jmp    c000d7a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7c6:	47                   	inc    edi
c000d7c7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7cb:	eb c5                	jmp    c000d792 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7cd:	83 c4 1c             	add    esp,0x1c
c000d7d0:	5b                   	pop    ebx
c000d7d1:	5e                   	pop    esi
c000d7d2:	5f                   	pop    edi
c000d7d3:	5d                   	pop    ebp
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop

c000d7d6 <Video::blit(unsigned int*, int, int, int, int)>:
c000d7d6:	55                   	push   ebp
c000d7d7:	57                   	push   edi
c000d7d8:	56                   	push   esi
c000d7d9:	53                   	push   ebx
c000d7da:	83 ec 1c             	sub    esp,0x1c
c000d7dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7e5:	85 c0                	test   eax,eax
c000d7e7:	79 02                	jns    c000d7eb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7e9:	31 c0                	xor    eax,eax
c000d7eb:	c1 e0 02             	shl    eax,0x2
c000d7ee:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7fa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7fe:	39 d8                	cmp    eax,ebx
c000d800:	7e 49                	jle    c000d84b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d802:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d808:	7c 41                	jl     c000d84b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d80a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d80e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d812:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d816:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d81a:	39 f9                	cmp    ecx,edi
c000d81c:	7e 22                	jle    c000d840 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d81e:	83 c5 04             	add    ebp,0x4
c000d821:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d827:	7c 14                	jl     c000d83d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d829:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d82b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d82e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d832:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d836:	56                   	push   esi
c000d837:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d83a:	83 c4 10             	add    esp,0x10
c000d83d:	47                   	inc    edi
c000d83e:	eb d2                	jmp    c000d812 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d844:	43                   	inc    ebx
c000d845:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d849:	eb ab                	jmp    c000d7f6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d84b:	83 c4 1c             	add    esp,0x1c
c000d84e:	5b                   	pop    ebx
c000d84f:	5e                   	pop    esi
c000d850:	5f                   	pop    edi
c000d851:	5d                   	pop    ebp
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <Video::clearScreen(unsigned int)>:
c000d854:	57                   	push   edi
c000d855:	56                   	push   esi
c000d856:	53                   	push   ebx
c000d857:	31 db                	xor    ebx,ebx
c000d859:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d85d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d863:	7e 1f                	jle    c000d884 <Video::clearScreen(unsigned int)+0x30>
c000d865:	31 ff                	xor    edi,edi
c000d867:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d86d:	7e 12                	jle    c000d881 <Video::clearScreen(unsigned int)+0x2d>
c000d86f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d875:	53                   	push   ebx
c000d876:	57                   	push   edi
c000d877:	47                   	inc    edi
c000d878:	56                   	push   esi
c000d879:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d87c:	83 c4 10             	add    esp,0x10
c000d87f:	eb e6                	jmp    c000d867 <Video::clearScreen(unsigned int)+0x13>
c000d881:	43                   	inc    ebx
c000d882:	eb d9                	jmp    c000d85d <Video::clearScreen(unsigned int)+0x9>
c000d884:	5b                   	pop    ebx
c000d885:	5e                   	pop    esi
c000d886:	5f                   	pop    edi
c000d887:	c3                   	ret    

c000d888 <Video::putpixel(int, int, unsigned int)>:
c000d888:	c7 44 24 04 14 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e314
c000d890:	e9 be 28 00 00       	jmp    c0010153 <KePanic(char const*)>
c000d895:	90                   	nop

c000d896 <Video::Video(char const*)>:
c000d896:	83 ec 0c             	sub    esp,0xc
c000d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89d:	83 ec 08             	sub    esp,0x8
c000d8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8a4:	50                   	push   eax
c000d8a5:	e8 16 e2 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d8aa:	83 c4 10             	add    esp,0x10
c000d8ad:	ba 84 e3 01 c0       	mov    edx,0xc001e384
c000d8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b6:	89 10                	mov    DWORD PTR [eax],edx
c000d8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8bc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8c6:	90                   	nop
c000d8c7:	83 c4 0c             	add    esp,0xc
c000d8ca:	c3                   	ret    
c000d8cb:	90                   	nop

c000d8cc <Video::~Video()>:
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	ba 84 e3 01 c0       	mov    edx,0xc001e384
c000d8d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8d8:	89 10                	mov    DWORD PTR [eax],edx
c000d8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8de:	83 ec 0c             	sub    esp,0xc
c000d8e1:	50                   	push   eax
c000d8e2:	e8 43 df ff ff       	call   c000b82a <Device::~Device()>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	90                   	nop
c000d8eb:	83 c4 0c             	add    esp,0xc
c000d8ee:	c3                   	ret    
c000d8ef:	90                   	nop

c000d8f0 <Video::~Video()>:
c000d8f0:	83 ec 0c             	sub    esp,0xc
c000d8f3:	83 ec 0c             	sub    esp,0xc
c000d8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fa:	e8 cd ff ff ff       	call   c000d8cc <Video::~Video()>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	83 ec 08             	sub    esp,0x8
c000d905:	68 64 01 00 00       	push   0x164
c000d90a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90e:	e8 df ca ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	83 c4 0c             	add    esp,0xc
c000d919:	c3                   	ret    

c000d91a <Video::isMonochrome()>:
c000d91a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d91e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d924:	c3                   	ret    
c000d925:	90                   	nop

c000d926 <Video::getWidth()>:
c000d926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d930:	c3                   	ret    
c000d931:	90                   	nop

c000d932 <Video::getHeight()>:
c000d932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d936:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d93c:	c3                   	ret    
c000d93d:	90                   	nop

c000d93e <Video::drawCursor(int, int, unsigned char*, int)>:
c000d93e:	55                   	push   ebp
c000d93f:	57                   	push   edi
c000d940:	56                   	push   esi
c000d941:	53                   	push   ebx
c000d942:	83 ec 2c             	sub    esp,0x2c
c000d945:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d949:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d94d:	83 f8 01             	cmp    eax,0x1
c000d950:	19 c9                	sbb    ecx,ecx
c000d952:	31 db                	xor    ebx,ebx
c000d954:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d958:	89 cd                	mov    ebp,ecx
c000d95a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d962:	f7 d5                	not    ebp
c000d964:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d96a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d96e:	01 d8                	add    eax,ebx
c000d970:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d974:	56                   	push   esi
c000d975:	e8 b8 ff ff ff       	call   c000d932 <Video::getHeight()>
c000d97a:	59                   	pop    ecx
c000d97b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d97f:	7e 70                	jle    c000d9f1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d981:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d985:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d989:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d98c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d990:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d994:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d99b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99f:	89 f8                	mov    eax,edi
c000d9a1:	83 c0 20             	add    eax,0x20
c000d9a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9a8:	56                   	push   esi
c000d9a9:	e8 78 ff ff ff       	call   c000d926 <Video::getWidth()>
c000d9ae:	5a                   	pop    edx
c000d9af:	39 c7                	cmp    edi,eax
c000d9b1:	7d 34                	jge    c000d9e7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9b3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9b8:	74 05                	je     c000d9bf <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9ba:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9bc:	55                   	push   ebp
c000d9bd:	eb 0d                	jmp    c000d9cc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9bf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9c4:	74 12                	je     c000d9d8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9c6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9d0:	57                   	push   edi
c000d9d1:	56                   	push   esi
c000d9d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9dc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9e0:	47                   	inc    edi
c000d9e1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9e5:	75 c1                	jne    c000d9a8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9e7:	43                   	inc    ebx
c000d9e8:	83 fb 20             	cmp    ebx,0x20
c000d9eb:	0f 85 79 ff ff ff    	jne    c000d96a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9f1:	83 c4 2c             	add    esp,0x2c
c000d9f4:	5b                   	pop    ebx
c000d9f5:	5e                   	pop    esi
c000d9f6:	5f                   	pop    edi
c000d9f7:	5d                   	pop    ebp
c000d9f8:	c3                   	ret    
c000d9f9:	90                   	nop

c000d9fa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9fa:	55                   	push   ebp
c000d9fb:	57                   	push   edi
c000d9fc:	56                   	push   esi
c000d9fd:	53                   	push   ebx
c000d9fe:	83 ec 28             	sub    esp,0x28
c000da01:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da05:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da09:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da0d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da11:	c1 e6 08             	shl    esi,0x8
c000da14:	01 c6                	add    esi,eax
c000da16:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da1a:	c1 e0 08             	shl    eax,0x8
c000da1d:	01 d0                	add    eax,edx
c000da1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da27:	0f af c6             	imul   eax,esi
c000da2a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da31:	50                   	push   eax
c000da32:	e8 82 9d ff ff       	call   c00077b9 <malloc>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	89 c7                	mov    edi,eax
c000da3c:	85 c0                	test   eax,eax
c000da3e:	75 10                	jne    c000da50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	68 35 e3 01 c0       	push   0xc001e335
c000da48:	e8 06 27 00 00       	call   c0010153 <KePanic(char const*)>
c000da4d:	83 c4 10             	add    esp,0x10
c000da50:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da53:	ba 12 00 00 00       	mov    edx,0x12
c000da58:	84 c0                	test   al,al
c000da5a:	74 11                	je     c000da6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da5c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da60:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da64:	c1 fa 03             	sar    edx,0x3
c000da67:	0f af d1             	imul   edx,ecx
c000da6a:	83 c2 12             	add    edx,0x12
c000da6d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da71:	74 04                	je     c000da77 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da73:	85 f6                	test   esi,esi
c000da75:	75 12                	jne    c000da89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da77:	83 ec 0c             	sub    esp,0xc
c000da7a:	68 45 e3 01 c0       	push   0xc001e345
c000da7f:	e8 64 ca ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000da84:	e9 b8 00 00 00       	jmp    c000db41 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da89:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da8d:	80 f9 02             	cmp    cl,0x2
c000da90:	0f 85 96 00 00 00    	jne    c000db2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da96:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da9b:	75 0e                	jne    c000daab <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da9d:	84 c0                	test   al,al
c000da9f:	75 0a                	jne    c000daab <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000daa4:	83 e8 18             	sub    eax,0x18
c000daa7:	a8 f7                	test   al,0xf7
c000daa9:	74 0a                	je     c000dab5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000daab:	83 ec 0c             	sub    esp,0xc
c000daae:	68 5a e3 01 c0       	push   0xc001e35a
c000dab3:	eb 7f                	jmp    c000db34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dab5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dabd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dac5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dac9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dad1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dad5:	75 0c                	jne    c000dae3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dad7:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dadc:	c1 e0 18             	shl    eax,0x18
c000dadf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dae3:	45                   	inc    ebp
c000dae4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dae9:	c1 e1 10             	shl    ecx,0x10
c000daec:	89 c8                	mov    eax,ecx
c000daee:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000daf3:	c1 e1 08             	shl    ecx,0x8
c000daf6:	09 c1                	or     ecx,eax
c000daf8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dafc:	09 c1                	or     ecx,eax
c000dafe:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db02:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db06:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db0a:	c1 f8 03             	sar    eax,0x3
c000db0d:	01 c2                	add    edx,eax
c000db0f:	89 e8                	mov    eax,ebp
c000db11:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db15:	39 c6                	cmp    esi,eax
c000db17:	7f b0                	jg     c000dac9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db19:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db1d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db21:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db24:	7e 22                	jle    c000db48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db26:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db2a:	eb 99                	jmp    c000dac5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db2c:	50                   	push   eax
c000db2d:	50                   	push   eax
c000db2e:	51                   	push   ecx
c000db2f:	68 68 e3 01 c0       	push   0xc001e368
c000db34:	e8 af c9 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000db39:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db3c:	e8 98 9c ff ff       	call   c00077d9 <free>
c000db41:	83 c4 10             	add    esp,0x10
c000db44:	31 ff                	xor    edi,edi
c000db46:	eb 0f                	jmp    c000db57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db4c:	89 30                	mov    DWORD PTR [eax],esi
c000db4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db52:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db55:	89 30                	mov    DWORD PTR [eax],esi
c000db57:	83 c4 1c             	add    esp,0x1c
c000db5a:	89 f8                	mov    eax,edi
c000db5c:	5b                   	pop    ebx
c000db5d:	5e                   	pop    esi
c000db5e:	5f                   	pop    edi
c000db5f:	5d                   	pop    ebp
c000db60:	c3                   	ret    
c000db61:	90                   	nop

c000db62 <Video::putTGA(int, int, unsigned char*, int)>:
c000db62:	55                   	push   ebp
c000db63:	57                   	push   edi
c000db64:	56                   	push   esi
c000db65:	53                   	push   ebx
c000db66:	83 ec 28             	sub    esp,0x28
c000db69:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db71:	50                   	push   eax
c000db72:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db76:	50                   	push   eax
c000db77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db7b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db7f:	56                   	push   esi
c000db80:	e8 75 fe ff ff       	call   c000d9fa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db85:	83 c4 20             	add    esp,0x20
c000db88:	85 c0                	test   eax,eax
c000db8a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db8e:	74 35                	je     c000dbc5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db90:	89 c7                	mov    edi,eax
c000db92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db96:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db9a:	39 d8                	cmp    eax,ebx
c000db9c:	7e 27                	jle    c000dbc5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db9e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dba2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dba6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbaa:	39 e8                	cmp    eax,ebp
c000dbac:	7e 14                	jle    c000dbc2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbae:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbb0:	83 c7 04             	add    edi,0x4
c000dbb3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbb6:	53                   	push   ebx
c000dbb7:	55                   	push   ebp
c000dbb8:	45                   	inc    ebp
c000dbb9:	56                   	push   esi
c000dbba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	eb e0                	jmp    c000dba2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbc2:	43                   	inc    ebx
c000dbc3:	eb cd                	jmp    c000db92 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbc5:	83 c4 1c             	add    esp,0x1c
c000dbc8:	5b                   	pop    ebx
c000dbc9:	5e                   	pop    esi
c000dbca:	5f                   	pop    edi
c000dbcb:	5d                   	pop    ebp
c000dbcc:	c3                   	ret    
c000dbcd:	66 90                	xchg   ax,ax
c000dbcf:	90                   	nop

c000dbd0 <ACPI::close(int, int, void*)>:
c000dbd0:	83 ec 1c             	sub    esp,0x1c
c000dbd3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbdb:	74 0b                	je     c000dbe8 <ACPI::close(int, int, void*)+0x18>
c000dbdd:	b8 00 00 00 00       	mov    eax,0x0
c000dbe2:	e9 9d 00 00 00       	jmp    c000dc84 <ACPI::close(int, int, void*)+0xb4>
c000dbe7:	90                   	nop
c000dbe8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbed:	75 29                	jne    c000dc18 <ACPI::close(int, int, void*)+0x48>
c000dbef:	a1 28 33 02 c0       	mov    eax,ds:0xc0023328
c000dbf4:	85 c0                	test   eax,eax
c000dbf6:	74 08                	je     c000dc00 <ACPI::close(int, int, void*)+0x30>
c000dbf8:	a1 28 33 02 c0       	mov    eax,ds:0xc0023328
c000dbfd:	ff d0                	call   eax
c000dbff:	90                   	nop
c000dc00:	83 ec 0c             	sub    esp,0xc
c000dc03:	68 c4 e3 01 c0       	push   0xc001e3c4
c000dc08:	e8 46 25 00 00       	call   c0010153 <KePanic(char const*)>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc15:	eb 6d                	jmp    c000dc84 <ACPI::close(int, int, void*)+0xb4>
c000dc17:	90                   	nop
c000dc18:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc1d:	75 5d                	jne    c000dc7c <ACPI::close(int, int, void*)+0xac>
c000dc1f:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c000dc24:	85 c0                	test   eax,eax
c000dc26:	74 08                	je     c000dc30 <ACPI::close(int, int, void*)+0x60>
c000dc28:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c000dc2d:	ff d0                	call   eax
c000dc2f:	90                   	nop
c000dc30:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc35:	8d 76 00             	lea    esi,[esi+0x0]
c000dc38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc3c:	25 ff 00 00 00       	and    eax,0xff
c000dc41:	83 e0 02             	and    eax,0x2
c000dc44:	74 1e                	je     c000dc64 <ACPI::close(int, int, void*)+0x94>
c000dc46:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc51:	89 c2                	mov    edx,eax
c000dc53:	ec                   	in     al,dx
c000dc54:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc58:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc60:	eb d6                	jmp    c000dc38 <ACPI::close(int, int, void*)+0x68>
c000dc62:	66 90                	xchg   ax,ax
c000dc64:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc6b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc70:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc78:	ee                   	out    dx,al
c000dc79:	8d 76 00             	lea    esi,[esi+0x0]
c000dc7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	83 c4 1c             	add    esp,0x1c
c000dc87:	c3                   	ret    

c000dc88 <findRSDP()>:
c000dc88:	83 ec 1c             	sub    esp,0x1c
c000dc8b:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000dc90:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc96:	83 e0 04             	and    eax,0x4
c000dc99:	84 c0                	test   al,al
c000dc9b:	75 07                	jne    c000dca4 <findRSDP()+0x1c>
c000dc9d:	b8 00 00 00 00       	mov    eax,0x0
c000dca2:	eb 70                	jmp    c000dd14 <findRSDP()+0x8c>
c000dca4:	a1 68 0d 02 c0       	mov    eax,ds:0xc0020d68
c000dca9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcae:	7f 1c                	jg     c000dccc <findRSDP()+0x44>
c000dcb0:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000dcb5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcbb:	83 e2 fb             	and    edx,0xfffffffb
c000dcbe:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcc4:	b8 00 00 00 00       	mov    eax,0x0
c000dcc9:	eb 49                	jmp    c000dd14 <findRSDP()+0x8c>
c000dccb:	90                   	nop
c000dccc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcd4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcdc:	77 2e                	ja     c000dd0c <findRSDP()+0x84>
c000dcde:	83 ec 04             	sub    esp,0x4
c000dce1:	6a 08                	push   0x8
c000dce3:	68 5f e4 01 c0       	push   0xc001e45f
c000dce8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcec:	e8 9f 26 ff ff       	call   c0000390 <memcmp>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	85 c0                	test   eax,eax
c000dcf6:	0f 94 c0             	sete   al
c000dcf9:	84 c0                	test   al,al
c000dcfb:	74 07                	je     c000dd04 <findRSDP()+0x7c>
c000dcfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd01:	eb 11                	jmp    c000dd14 <findRSDP()+0x8c>
c000dd03:	90                   	nop
c000dd04:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd09:	eb c9                	jmp    c000dcd4 <findRSDP()+0x4c>
c000dd0b:	90                   	nop
c000dd0c:	b8 00 00 00 00       	mov    eax,0x0
c000dd11:	8d 76 00             	lea    esi,[esi+0x0]
c000dd14:	83 c4 1c             	add    esp,0x1c
c000dd17:	c3                   	ret    

c000dd18 <loadACPITables(unsigned char*)>:
c000dd18:	57                   	push   edi
c000dd19:	56                   	push   esi
c000dd1a:	53                   	push   ebx
c000dd1b:	83 ec 60             	sub    esp,0x60
c000dd1e:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000dd23:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd29:	83 e0 04             	and    eax,0x4
c000dd2c:	84 c0                	test   al,al
c000dd2e:	0f 84 3c 02 00 00    	je     c000df70 <loadACPITables(unsigned char*)+0x258>
c000dd34:	a0 40 35 02 c0       	mov    al,ds:0xc0023540
c000dd39:	84 c0                	test   al,al
c000dd3b:	74 77                	je     c000ddb4 <loadACPITables(unsigned char*)+0x9c>
c000dd3d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd41:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd4c:	83 e8 24             	sub    eax,0x24
c000dd4f:	c1 e8 03             	shr    eax,0x3
c000dd52:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd56:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd5e:	66 90                	xchg   ax,ax
c000dd60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd64:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd68:	0f 8d b6 00 00 00    	jge    c000de24 <loadACPITables(unsigned char*)+0x10c>
c000dd6e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd72:	83 c0 24             	add    eax,0x24
c000dd75:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd7d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd81:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd85:	c1 e0 03             	shl    eax,0x3
c000dd88:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd8c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd93:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd95:	89 c1                	mov    ecx,eax
c000dd97:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c000dd9c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd9f:	89 15 2c 33 02 c0    	mov    DWORD PTR ds:0xc002332c,edx
c000dda5:	89 ca                	mov    edx,ecx
c000dda7:	89 14 c5 44 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccbc],edx
c000ddae:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddb2:	eb ac                	jmp    c000dd60 <loadACPITables(unsigned char*)+0x48>
c000ddb4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddb8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddc3:	83 e8 24             	sub    eax,0x24
c000ddc6:	c1 e8 02             	shr    eax,0x2
c000ddc9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddcd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ddd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddd8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dddc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dde0:	7d 42                	jge    c000de24 <loadACPITables(unsigned char*)+0x10c>
c000dde2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dde6:	83 c0 24             	add    eax,0x24
c000dde9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dded:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddf1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ddf5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddf9:	c1 e0 02             	shl    eax,0x2
c000ddfc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de04:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de06:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c000de0b:	8d 50 01             	lea    edx,[eax+0x1]
c000de0e:	89 15 2c 33 02 c0    	mov    DWORD PTR ds:0xc002332c,edx
c000de14:	89 ca                	mov    edx,ecx
c000de16:	89 14 c5 44 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccbc],edx
c000de1d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de21:	eb b5                	jmp    c000ddd8 <loadACPITables(unsigned char*)+0xc0>
c000de23:	90                   	nop
c000de24:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de2c:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c000de31:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de35:	0f 8d 39 01 00 00    	jge    c000df74 <loadACPITables(unsigned char*)+0x25c>
c000de3b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de3f:	8b 04 c5 44 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdccbc]
c000de46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de56:	25 ff 0f 00 00       	and    eax,0xfff
c000de5b:	89 c6                	mov    esi,eax
c000de5d:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c000de63:	83 ec 0c             	sub    esp,0xc
c000de66:	6a 01                	push   0x1
c000de68:	e8 28 b4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de74:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de7a:	83 ec 0c             	sub    esp,0xc
c000de7d:	6a 01                	push   0x1
c000de7f:	6a 01                	push   0x1
c000de81:	50                   	push   eax
c000de82:	52                   	push   edx
c000de83:	53                   	push   ebx
c000de84:	e8 9b bd ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de89:	83 c4 20             	add    esp,0x20
c000de8c:	09 f0                	or     eax,esi
c000de8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de92:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de96:	c1 e0 03             	shl    eax,0x3
c000de99:	05 40 33 02 c0       	add    eax,0xc0023340
c000de9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dea6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deaa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000deb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000deb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000debe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dec2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dec6:	89 c6                	mov    esi,eax
c000dec8:	89 d7                	mov    edi,edx
c000deca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000decc:	89 c8                	mov    eax,ecx
c000dece:	89 fa                	mov    edx,edi
c000ded0:	89 f3                	mov    ebx,esi
c000ded2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ded6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000deda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dee5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dee9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000deed:	05 00 10 00 00       	add    eax,0x1000
c000def2:	c1 e8 0c             	shr    eax,0xc
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000defd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df05:	25 ff 0f 00 00       	and    eax,0xfff
c000df0a:	89 c6                	mov    esi,eax
c000df0c:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df19:	e8 77 b3 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df25:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df2b:	83 ec 0c             	sub    esp,0xc
c000df2e:	6a 01                	push   0x1
c000df30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df34:	50                   	push   eax
c000df35:	52                   	push   edx
c000df36:	53                   	push   ebx
c000df37:	e8 e8 bc ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df3c:	83 c4 20             	add    esp,0x20
c000df3f:	09 f0                	or     eax,esi
c000df41:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df49:	83 ec 0c             	sub    esp,0xc
c000df4c:	50                   	push   eax
c000df4d:	e8 73 b6 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df52:	83 c4 10             	add    esp,0x10
c000df55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df59:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df5d:	89 14 c5 44 33 02 c0 	mov    DWORD PTR [eax*8-0x3ffdccbc],edx
c000df64:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df68:	e9 bf fe ff ff       	jmp    c000de2c <loadACPITables(unsigned char*)+0x114>
c000df6d:	8d 76 00             	lea    esi,[esi+0x0]
c000df70:	90                   	nop
c000df71:	8d 76 00             	lea    esi,[esi+0x0]
c000df74:	83 c4 60             	add    esp,0x60
c000df77:	5b                   	pop    ebx
c000df78:	5e                   	pop    esi
c000df79:	5f                   	pop    edi
c000df7a:	c3                   	ret    
c000df7b:	90                   	nop

c000df7c <findRSDT(unsigned char*)>:
c000df7c:	57                   	push   edi
c000df7d:	56                   	push   esi
c000df7e:	53                   	push   ebx
c000df7f:	83 ec 50             	sub    esp,0x50
c000df82:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000df87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df8d:	83 e0 04             	and    eax,0x4
c000df90:	84 c0                	test   al,al
c000df92:	75 0c                	jne    c000dfa0 <findRSDT(unsigned char*)+0x24>
c000df94:	b8 00 00 00 00       	mov    eax,0x0
c000df99:	e9 26 01 00 00       	jmp    c000e0c4 <findRSDT(unsigned char*)+0x148>
c000df9e:	66 90                	xchg   ax,ax
c000dfa0:	89 e0                	mov    eax,esp
c000dfa2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfa6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfae:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfc6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfca:	89 c6                	mov    esi,eax
c000dfcc:	89 d7                	mov    edi,edx
c000dfce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfd0:	89 c8                	mov    eax,ecx
c000dfd2:	89 fa                	mov    edx,edi
c000dfd4:	89 f3                	mov    ebx,esi
c000dfd6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfda:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfe2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfe6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dfea:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dff2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dff6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dffa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e002:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e006:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e00a:	25 ff 0f 00 00       	and    eax,0xfff
c000e00f:	89 c6                	mov    esi,eax
c000e011:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c000e017:	83 ec 0c             	sub    esp,0xc
c000e01a:	6a 02                	push   0x2
c000e01c:	e8 74 b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e021:	83 c4 10             	add    esp,0x10
c000e024:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e028:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	6a 01                	push   0x1
c000e033:	6a 02                	push   0x2
c000e035:	50                   	push   eax
c000e036:	52                   	push   edx
c000e037:	53                   	push   ebx
c000e038:	e8 e7 bb ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e03d:	83 c4 20             	add    esp,0x20
c000e040:	09 f0                	or     eax,esi
c000e042:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e046:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e04a:	25 ff 0f 00 00       	and    eax,0xfff
c000e04f:	89 c6                	mov    esi,eax
c000e051:	8b 1d 30 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e30
c000e057:	83 ec 0c             	sub    esp,0xc
c000e05a:	6a 02                	push   0x2
c000e05c:	e8 34 b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e061:	83 c4 10             	add    esp,0x10
c000e064:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e068:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	6a 01                	push   0x1
c000e073:	6a 02                	push   0x2
c000e075:	50                   	push   eax
c000e076:	52                   	push   edx
c000e077:	53                   	push   ebx
c000e078:	e8 a7 bb ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e07d:	83 c4 20             	add    esp,0x20
c000e080:	09 f0                	or     eax,esi
c000e082:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e086:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e08b:	75 13                	jne    c000e0a0 <findRSDT(unsigned char*)+0x124>
c000e08d:	c6 05 40 35 02 c0 00 	mov    BYTE PTR ds:0xc0023540,0x0
c000e094:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e098:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e09c:	eb 22                	jmp    c000e0c0 <findRSDT(unsigned char*)+0x144>
c000e09e:	66 90                	xchg   ax,ax
c000e0a0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0a5:	75 11                	jne    c000e0b8 <findRSDT(unsigned char*)+0x13c>
c000e0a7:	c6 05 40 35 02 c0 01 	mov    BYTE PTR ds:0xc0023540,0x1
c000e0ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0b6:	eb 08                	jmp    c000e0c0 <findRSDT(unsigned char*)+0x144>
c000e0b8:	b8 00 00 00 00       	mov    eax,0x0
c000e0bd:	eb 05                	jmp    c000e0c4 <findRSDT(unsigned char*)+0x148>
c000e0bf:	90                   	nop
c000e0c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0c4:	83 c4 50             	add    esp,0x50
c000e0c7:	5b                   	pop    ebx
c000e0c8:	5e                   	pop    esi
c000e0c9:	5f                   	pop    edi
c000e0ca:	c3                   	ret    
c000e0cb:	90                   	nop

c000e0cc <findDataTable(unsigned char*, char*)>:
c000e0cc:	83 ec 1c             	sub    esp,0x1c
c000e0cf:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e0d4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0da:	83 e0 04             	and    eax,0x4
c000e0dd:	84 c0                	test   al,al
c000e0df:	75 07                	jne    c000e0e8 <findDataTable(unsigned char*, char*)+0x1c>
c000e0e1:	b8 00 00 00 00       	mov    eax,0x0
c000e0e6:	eb 58                	jmp    c000e140 <findDataTable(unsigned char*, char*)+0x74>
c000e0e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0f0:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c000e0f5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0f9:	7d 3d                	jge    c000e138 <findDataTable(unsigned char*, char*)+0x6c>
c000e0fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0ff:	c1 e0 03             	shl    eax,0x3
c000e102:	05 40 33 02 c0       	add    eax,0xc0023340
c000e107:	83 ec 04             	sub    esp,0x4
c000e10a:	6a 04                	push   0x4
c000e10c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e110:	50                   	push   eax
c000e111:	e8 7a 22 ff ff       	call   c0000390 <memcmp>
c000e116:	83 c4 10             	add    esp,0x10
c000e119:	85 c0                	test   eax,eax
c000e11b:	0f 94 c0             	sete   al
c000e11e:	84 c0                	test   al,al
c000e120:	74 0e                	je     c000e130 <findDataTable(unsigned char*, char*)+0x64>
c000e122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e126:	8b 04 c5 44 33 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdccbc]
c000e12d:	eb 11                	jmp    c000e140 <findDataTable(unsigned char*, char*)+0x74>
c000e12f:	90                   	nop
c000e130:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e134:	eb ba                	jmp    c000e0f0 <findDataTable(unsigned char*, char*)+0x24>
c000e136:	66 90                	xchg   ax,ax
c000e138:	b8 00 00 00 00       	mov    eax,0x0
c000e13d:	8d 76 00             	lea    esi,[esi+0x0]
c000e140:	83 c4 1c             	add    esp,0x1c
c000e143:	c3                   	ret    

c000e144 <scanMADT()>:
c000e144:	53                   	push   ebx
c000e145:	83 ec 38             	sub    esp,0x38
c000e148:	a1 50 0d 02 c0       	mov    eax,ds:0xc0020d50
c000e14d:	25 00 04 00 00       	and    eax,0x400
c000e152:	74 14                	je     c000e168 <scanMADT()+0x24>
c000e154:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e159:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e15f:	83 e2 fb             	and    edx,0xfffffffb
c000e162:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e168:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e16d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e173:	83 e0 04             	and    eax,0x4
c000e176:	84 c0                	test   al,al
c000e178:	0f 84 8a 04 00 00    	je     c000e608 <scanMADT()+0x4c4>
c000e17e:	e8 05 fb ff ff       	call   c000dc88 <findRSDP()>
c000e183:	a3 4c 35 02 c0       	mov    ds:0xc002354c,eax
c000e188:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c000e18d:	85 c0                	test   eax,eax
c000e18f:	75 1b                	jne    c000e1ac <scanMADT()+0x68>
c000e191:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e196:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e19c:	83 e2 fb             	and    edx,0xfffffffb
c000e19f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1a5:	e9 66 04 00 00       	jmp    c000e610 <scanMADT()+0x4cc>
c000e1aa:	66 90                	xchg   ax,ax
c000e1ac:	a1 4c 35 02 c0       	mov    eax,ds:0xc002354c
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	50                   	push   eax
c000e1b5:	e8 c2 fd ff ff       	call   c000df7c <findRSDT(unsigned char*)>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	a3 48 35 02 c0       	mov    ds:0xc0023548,eax
c000e1c2:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000e1c7:	85 c0                	test   eax,eax
c000e1c9:	75 19                	jne    c000e1e4 <scanMADT()+0xa0>
c000e1cb:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e1d0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1d6:	83 e2 fb             	and    edx,0xfffffffb
c000e1d9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1df:	e9 2c 04 00 00       	jmp    c000e610 <scanMADT()+0x4cc>
c000e1e4:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000e1e9:	83 ec 0c             	sub    esp,0xc
c000e1ec:	50                   	push   eax
c000e1ed:	e8 26 fb ff ff       	call   c000dd18 <loadACPITables(unsigned char*)>
c000e1f2:	83 c4 10             	add    esp,0x10
c000e1f5:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000e1fa:	83 ec 08             	sub    esp,0x8
c000e1fd:	68 68 e4 01 c0       	push   0xc001e468
c000e202:	50                   	push   eax
c000e203:	e8 c4 fe ff ff       	call   c000e0cc <findDataTable(unsigned char*, char*)>
c000e208:	83 c4 10             	add    esp,0x10
c000e20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e20f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e214:	75 1a                	jne    c000e230 <scanMADT()+0xec>
c000e216:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e21b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e221:	83 e2 fe             	and    edx,0xfffffffe
c000e224:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e22a:	e9 e1 03 00 00       	jmp    c000e610 <scanMADT()+0x4cc>
c000e22f:	90                   	nop
c000e230:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e238:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e23c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e23f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e243:	0f 87 c7 03 00 00    	ja     c000e610 <scanMADT()+0x4cc>
c000e249:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e251:	0f 87 b9 03 00 00    	ja     c000e610 <scanMADT()+0x4cc>
c000e257:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e25b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e25f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e263:	8d 50 01             	lea    edx,[eax+0x1]
c000e266:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e26a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e26e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e272:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e276:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e27a:	8d 50 01             	lea    edx,[eax+0x1]
c000e27d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e281:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e285:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e289:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e28d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e292:	0f 86 74 03 00 00    	jbe    c000e60c <scanMADT()+0x4c8>
c000e298:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e29d:	75 5d                	jne    c000e2fc <scanMADT()+0x1b8>
c000e29f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2a3:	8d 50 01             	lea    edx,[eax+0x1]
c000e2a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2aa:	8a 15 40 37 02 c0    	mov    dl,BYTE PTR ds:0xc0023740
c000e2b0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2b6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2be:	88 82 80 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc880],al
c000e2c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2c8:	8d 42 01             	lea    eax,[edx+0x1]
c000e2cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2cf:	a0 40 37 02 c0       	mov    al,ds:0xc0023740
c000e2d4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2d7:	88 0d 40 37 02 c0    	mov    BYTE PTR ds:0xc0023740,cl
c000e2dd:	25 ff 00 00 00       	and    eax,0xff
c000e2e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2e6:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2ea:	88 90 60 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc8a0],dl
c000e2f0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2f5:	e9 f6 02 00 00       	jmp    c000e5f0 <scanMADT()+0x4ac>
c000e2fa:	66 90                	xchg   ax,ax
c000e2fc:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e301:	0f 85 29 01 00 00    	jne    c000e430 <scanMADT()+0x2ec>
c000e307:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e30b:	8d 50 01             	lea    edx,[eax+0x1]
c000e30e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e312:	8a 15 00 36 02 c0    	mov    dl,BYTE PTR ds:0xc0023600
c000e318:	81 e2 ff 00 00 00    	and    edx,0xff
c000e31e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e322:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e326:	88 82 20 36 02 c0    	mov    BYTE PTR [edx-0x3ffdc9e0],al
c000e32c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e330:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e338:	01 d0                	add    eax,edx
c000e33a:	83 c0 2c             	add    eax,0x2c
c000e33d:	8a 00                	mov    al,BYTE PTR [eax]
c000e33f:	31 d2                	xor    edx,edx
c000e341:	88 c2                	mov    dl,al
c000e343:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e347:	8d 48 01             	lea    ecx,[eax+0x1]
c000e34a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e34e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e352:	25 ff 00 00 00       	and    eax,0xff
c000e357:	c1 e0 08             	shl    eax,0x8
c000e35a:	89 d1                	mov    ecx,edx
c000e35c:	09 c1                	or     ecx,eax
c000e35e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e362:	8d 50 02             	lea    edx,[eax+0x2]
c000e365:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e369:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e36d:	25 ff 00 00 00       	and    eax,0xff
c000e372:	c1 e0 10             	shl    eax,0x10
c000e375:	09 c1                	or     ecx,eax
c000e377:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e37b:	8d 50 03             	lea    edx,[eax+0x3]
c000e37e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e382:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e386:	25 ff 00 00 00       	and    eax,0xff
c000e38b:	c1 e0 18             	shl    eax,0x18
c000e38e:	09 c1                	or     ecx,eax
c000e390:	89 ca                	mov    edx,ecx
c000e392:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c000e397:	25 ff 00 00 00       	and    eax,0xff
c000e39c:	89 14 85 40 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9c0],edx
c000e3a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b0:	01 d0                	add    eax,edx
c000e3b2:	83 c0 2c             	add    eax,0x2c
c000e3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	88 c2                	mov    dl,al
c000e3bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ca:	25 ff 00 00 00       	and    eax,0xff
c000e3cf:	c1 e0 08             	shl    eax,0x8
c000e3d2:	89 d1                	mov    ecx,edx
c000e3d4:	09 c1                	or     ecx,eax
c000e3d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3da:	8d 50 02             	lea    edx,[eax+0x2]
c000e3dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e5:	25 ff 00 00 00       	and    eax,0xff
c000e3ea:	c1 e0 10             	shl    eax,0x10
c000e3ed:	09 c1                	or     ecx,eax
c000e3ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3fe:	25 ff 00 00 00       	and    eax,0xff
c000e403:	c1 e0 18             	shl    eax,0x18
c000e406:	09 c1                	or     ecx,eax
c000e408:	89 ca                	mov    edx,ecx
c000e40a:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c000e40f:	25 ff 00 00 00       	and    eax,0xff
c000e414:	89 14 85 c0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc940],edx
c000e41b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e420:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c000e425:	40                   	inc    eax
c000e426:	a2 00 36 02 c0       	mov    ds:0xc0023600,al
c000e42b:	e9 c0 01 00 00       	jmp    c000e5f0 <scanMADT()+0x4ac>
c000e430:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e435:	0f 85 fd 00 00 00    	jne    c000e538 <scanMADT()+0x3f4>
c000e43b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43f:	8d 50 01             	lea    edx,[eax+0x1]
c000e442:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e446:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e44a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e44e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e452:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e456:	8d 50 01             	lea    edx,[eax+0x1]
c000e459:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e45d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e461:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e465:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e469:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e46d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e471:	01 d0                	add    eax,edx
c000e473:	83 c0 2c             	add    eax,0x2c
c000e476:	8a 00                	mov    al,BYTE PTR [eax]
c000e478:	31 d2                	xor    edx,edx
c000e47a:	88 c2                	mov    dl,al
c000e47c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e480:	8d 48 01             	lea    ecx,[eax+0x1]
c000e483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e487:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e48b:	25 ff 00 00 00       	and    eax,0xff
c000e490:	c1 e0 08             	shl    eax,0x8
c000e493:	89 d1                	mov    ecx,edx
c000e495:	09 c1                	or     ecx,eax
c000e497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49b:	8d 50 02             	lea    edx,[eax+0x2]
c000e49e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4a6:	25 ff 00 00 00       	and    eax,0xff
c000e4ab:	c1 e0 10             	shl    eax,0x10
c000e4ae:	09 c1                	or     ecx,eax
c000e4b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b4:	8d 50 03             	lea    edx,[eax+0x3]
c000e4b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4bb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4bf:	25 ff 00 00 00       	and    eax,0xff
c000e4c4:	c1 e0 18             	shl    eax,0x18
c000e4c7:	09 c8                	or     eax,ecx
c000e4c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4cd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4da:	01 d0                	add    eax,edx
c000e4dc:	83 c0 2c             	add    eax,0x2c
c000e4df:	8a 00                	mov    al,BYTE PTR [eax]
c000e4e1:	25 ff 00 00 00       	and    eax,0xff
c000e4e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4ea:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4f5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4fb:	c1 e2 08             	shl    edx,0x8
c000e4fe:	09 d0                	or     eax,edx
c000e500:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e505:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e50a:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e50e:	25 ff 00 00 00       	and    eax,0xff
c000e513:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e517:	88 90 00 fa 01 c0    	mov    BYTE PTR [eax-0x3ffe0600],dl
c000e51d:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e521:	31 d2                	xor    edx,edx
c000e523:	88 c2                	mov    dl,al
c000e525:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e52a:	66 89 84 12 e0 35 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdca20],ax
c000e532:	e9 b9 00 00 00       	jmp    c000e5f0 <scanMADT()+0x4ac>
c000e537:	90                   	nop
c000e538:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e53d:	0f 85 a1 00 00 00    	jne    c000e5e4 <scanMADT()+0x4a0>
c000e543:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e547:	8d 50 01             	lea    edx,[eax+0x1]
c000e54a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e54e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e552:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e556:	25 ff 00 00 00       	and    eax,0xff
c000e55b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e55f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e567:	01 d0                	add    eax,edx
c000e569:	83 c0 2c             	add    eax,0x2c
c000e56c:	8a 00                	mov    al,BYTE PTR [eax]
c000e56e:	31 d2                	xor    edx,edx
c000e570:	88 c2                	mov    dl,al
c000e572:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e576:	8d 48 01             	lea    ecx,[eax+0x1]
c000e579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e57d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e581:	25 ff 00 00 00       	and    eax,0xff
c000e586:	c1 e0 08             	shl    eax,0x8
c000e589:	09 d0                	or     eax,edx
c000e58b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e58f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e594:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e598:	8d 50 01             	lea    edx,[eax+0x1]
c000e59b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e59f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5a3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5a7:	25 ff 00 00 00       	and    eax,0xff
c000e5ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5b4:	c1 e0 08             	shl    eax,0x8
c000e5b7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5bb:	89 c1                	mov    ecx,eax
c000e5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c1:	c1 e0 18             	shl    eax,0x18
c000e5c4:	89 c3                	mov    ebx,eax
c000e5c6:	a1 50 35 02 c0       	mov    eax,ds:0xc0023550
c000e5cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ce:	89 15 50 35 02 c0    	mov    DWORD PTR ds:0xc0023550,edx
c000e5d4:	09 d9                	or     ecx,ebx
c000e5d6:	89 ca                	mov    edx,ecx
c000e5d8:	89 14 85 60 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcaa0],edx
c000e5df:	eb 0f                	jmp    c000e5f0 <scanMADT()+0x4ac>
c000e5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5e9:	75 05                	jne    c000e5f0 <scanMADT()+0x4ac>
c000e5eb:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5f0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5f4:	31 d2                	xor    edx,edx
c000e5f6:	88 c2                	mov    dl,al
c000e5f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5fc:	01 d0                	add    eax,edx
c000e5fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e602:	e9 31 fc ff ff       	jmp    c000e238 <scanMADT()+0xf4>
c000e607:	90                   	nop
c000e608:	90                   	nop
c000e609:	eb 05                	jmp    c000e610 <scanMADT()+0x4cc>
c000e60b:	90                   	nop
c000e60c:	90                   	nop
c000e60d:	8d 76 00             	lea    esi,[esi+0x0]
c000e610:	83 c4 38             	add    esp,0x38
c000e613:	5b                   	pop    ebx
c000e614:	c3                   	ret    
c000e615:	90                   	nop
c000e616:	66 90                	xchg   ax,ax

c000e618 <ACPI::ACPI()>:
c000e618:	83 ec 0c             	sub    esp,0xc
c000e61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e61f:	83 ec 08             	sub    esp,0x8
c000e622:	68 6d e4 01 c0       	push   0xc001e46d
c000e627:	50                   	push   eax
c000e628:	e8 93 d4 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000e62d:	83 c4 10             	add    esp,0x10
c000e630:	ba a4 e5 01 c0       	mov    edx,0xc001e5a4
c000e635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e639:	89 10                	mov    DWORD PTR [eax],edx
c000e63b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e658:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e662:	e8 dd fa ff ff       	call   c000e144 <scanMADT()>
c000e667:	90                   	nop
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e66c:	83 ec 2c             	sub    esp,0x2c
c000e66f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e677:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e67b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e67f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e684:	88 d0                	mov    al,dl
c000e686:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e68a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e68f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e697:	90                   	nop
c000e698:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e69c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6a2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6a6:	0f 8d 9c 00 00 00    	jge    c000e748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6b4:	83 c2 2a             	add    edx,0x2a
c000e6b7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6bb:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6c0:	75 7a                	jne    c000e73c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ca:	83 c2 2a             	add    edx,0x2a
c000e6cd:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6d1:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6d5:	75 65                	jne    c000e73c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6d7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6dc:	74 3a                	je     c000e718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6e6:	83 c2 2a             	add    edx,0x2a
c000e6e9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6f4:	39 c2                	cmp    edx,eax
c000e6f6:	74 10                	je     c000e708 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	68 e8 e3 01 c0       	push   0xc001e3e8
c000e700:	e8 4e 1a 00 00       	call   c0010153 <KePanic(char const*)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	68 72 e4 01 c0       	push   0xc001e472
c000e710:	e8 3e 1a 00 00       	call   c0010153 <KePanic(char const*)>
c000e715:	83 c4 10             	add    esp,0x10
c000e718:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e71c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e720:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e724:	83 c2 2a             	add    edx,0x2a
c000e727:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e72b:	8b 02                	mov    eax,DWORD PTR [edx]
c000e72d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e730:	89 01                	mov    DWORD PTR [ecx],eax
c000e732:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e735:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e73a:	66 90                	xchg   ax,ax
c000e73c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e740:	e9 53 ff ff ff       	jmp    c000e698 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e745:	8d 76 00             	lea    esi,[esi+0x0]
c000e748:	90                   	nop
c000e749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e74d:	83 c4 2c             	add    esp,0x2c
c000e750:	c2 04 00             	ret    0x4
c000e753:	90                   	nop

c000e754 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e754:	83 ec 1c             	sub    esp,0x1c
c000e757:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e75b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e75f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e763:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e768:	88 c8                	mov    al,cl
c000e76a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e76e:	88 d0                	mov    al,dl
c000e770:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e778:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e782:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e785:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e789:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e78d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e791:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e797:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e79b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e79e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7a2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ab:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7b1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7b5:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7bc:	83 c2 2a             	add    edx,0x2a
c000e7bf:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d1:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7d8:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7e6:	8d 50 01             	lea    edx,[eax+0x1]
c000e7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ed:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7fd:	3d 00 02 00 00       	cmp    eax,0x200
c000e802:	75 10                	jne    c000e814 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e804:	83 ec 0c             	sub    esp,0xc
c000e807:	68 81 e4 01 c0       	push   0xc001e481
c000e80c:	e8 42 19 00 00       	call   c0010153 <KePanic(char const*)>
c000e811:	83 c4 10             	add    esp,0x10
c000e814:	90                   	nop
c000e815:	83 c4 1c             	add    esp,0x1c
c000e818:	c3                   	ret    
c000e819:	90                   	nop
c000e81a:	66 90                	xchg   ax,ax

c000e81c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e81c:	b8 00 00 00 00       	mov    eax,0x0
c000e821:	c3                   	ret    
c000e822:	66 90                	xchg   ax,ax

c000e824 <ACPI::detectPCI()>:
c000e824:	53                   	push   ebx
c000e825:	83 ec 28             	sub    esp,0x28
c000e828:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e82d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e832:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000e837:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e83d:	83 e0 04             	and    eax,0x4
c000e840:	84 c0                	test   al,al
c000e842:	74 2c                	je     c000e870 <ACPI::detectPCI()+0x4c>
c000e844:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000e849:	83 ec 08             	sub    esp,0x8
c000e84c:	68 9e e4 01 c0       	push   0xc001e49e
c000e851:	50                   	push   eax
c000e852:	e8 75 f8 ff ff       	call   c000e0cc <findDataTable(unsigned char*, char*)>
c000e857:	83 c4 10             	add    esp,0x10
c000e85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e85e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e863:	74 0b                	je     c000e870 <ACPI::detectPCI()+0x4c>
c000e865:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e86a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e86f:	90                   	nop
c000e870:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e878:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e87c:	8a 00                	mov    al,BYTE PTR [eax]
c000e87e:	3c 01                	cmp    al,0x1
c000e880:	75 0e                	jne    c000e890 <ACPI::detectPCI()+0x6c>
c000e882:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e887:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e88c:	eb 2a                	jmp    c000e8b8 <ACPI::detectPCI()+0x94>
c000e88e:	66 90                	xchg   ax,ax
c000e890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e894:	8a 00                	mov    al,BYTE PTR [eax]
c000e896:	3c 02                	cmp    al,0x2
c000e898:	75 1e                	jne    c000e8b8 <ACPI::detectPCI()+0x94>
c000e89a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e89f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8a4:	74 12                	je     c000e8b8 <ACPI::detectPCI()+0x94>
c000e8a6:	83 ec 0c             	sub    esp,0xc
c000e8a9:	68 18 e4 01 c0       	push   0xc001e418
c000e8ae:	e8 a0 18 00 00       	call   c0010153 <KePanic(char const*)>
c000e8b3:	83 c4 10             	add    esp,0x10
c000e8b6:	66 90                	xchg   ax,ax
c000e8b8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8bc:	83 f0 01             	xor    eax,0x1
c000e8bf:	84 c0                	test   al,al
c000e8c1:	74 41                	je     c000e904 <ACPI::detectPCI()+0xe0>
c000e8c3:	e8 68 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8d1:	75 0d                	jne    c000e8e0 <ACPI::detectPCI()+0xbc>
c000e8d3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8d8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8dd:	eb 25                	jmp    c000e904 <ACPI::detectPCI()+0xe0>
c000e8df:	90                   	nop
c000e8e0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8e5:	75 1d                	jne    c000e904 <ACPI::detectPCI()+0xe0>
c000e8e7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8ec:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8f1:	74 11                	je     c000e904 <ACPI::detectPCI()+0xe0>
c000e8f3:	83 ec 0c             	sub    esp,0xc
c000e8f6:	68 18 e4 01 c0       	push   0xc001e418
c000e8fb:	e8 53 18 00 00       	call   c0010153 <KePanic(char const*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	90                   	nop
c000e904:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e909:	0f 84 85 00 00 00    	je     c000e994 <ACPI::detectPCI()+0x170>
c000e90f:	83 ec 0c             	sub    esp,0xc
c000e912:	68 a3 e4 01 c0       	push   0xc001e4a3
c000e917:	e8 bf 11 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000e91c:	83 c4 10             	add    esp,0x10
c000e91f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e927:	83 ec 0c             	sub    esp,0xc
c000e92a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e92e:	e8 86 8e ff ff       	call   c00077b9 <malloc>
c000e933:	83 c4 10             	add    esp,0x10
c000e936:	89 c3                	mov    ebx,eax
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	53                   	push   ebx
c000e93c:	e8 71 9c 00 00       	call   c00185b2 <PCI::PCI()>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e948:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e94c:	83 ec 08             	sub    esp,0x8
c000e94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e953:	50                   	push   eax
c000e954:	e8 cf cf ff ff       	call   c000b928 <Device::addChild(Device*)>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e960:	8b 00                	mov    eax,DWORD PTR [eax]
c000e962:	83 c0 08             	add    eax,0x8
c000e965:	8b 00                	mov    eax,DWORD PTR [eax]
c000e967:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e96c:	74 0a                	je     c000e978 <ACPI::detectPCI()+0x154>
c000e96e:	ba 01 00 00 00       	mov    edx,0x1
c000e973:	eb 0b                	jmp    c000e980 <ACPI::detectPCI()+0x15c>
c000e975:	8d 76 00             	lea    esi,[esi+0x0]
c000e978:	ba 02 00 00 00       	mov    edx,0x2
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]
c000e980:	6a 00                	push   0x0
c000e982:	6a 00                	push   0x0
c000e984:	52                   	push   edx
c000e985:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e989:	ff d0                	call   eax
c000e98b:	83 c4 10             	add    esp,0x10
c000e98e:	e9 91 00 00 00       	jmp    c000ea24 <ACPI::detectPCI()+0x200>
c000e993:	90                   	nop
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	68 bb e4 01 c0       	push   0xc001e4bb
c000e99c:	e8 3a 11 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000e9a1:	83 c4 10             	add    esp,0x10
c000e9a4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9ab:	83 ec 0c             	sub    esp,0xc
c000e9ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9b2:	e8 02 8e ff ff       	call   c00077b9 <malloc>
c000e9b7:	83 c4 10             	add    esp,0x10
c000e9ba:	89 c3                	mov    ebx,eax
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	53                   	push   ebx
c000e9c0:	e8 19 a7 00 00       	call   c00190de <IDE::IDE()>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d0:	83 ec 08             	sub    esp,0x8
c000e9d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9d7:	50                   	push   eax
c000e9d8:	e8 4b cf ff ff       	call   c000b928 <Device::addChild(Device*)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9e4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9f2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea0e:	83 c0 08             	add    eax,0x8
c000ea11:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea13:	6a 00                	push   0x0
c000ea15:	6a 00                	push   0x0
c000ea17:	6a 00                	push   0x0
c000ea19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea1d:	ff d0                	call   eax
c000ea1f:	83 c4 10             	add    esp,0x10
c000ea22:	66 90                	xchg   ax,ax
c000ea24:	90                   	nop
c000ea25:	83 c4 28             	add    esp,0x28
c000ea28:	5b                   	pop    ebx
c000ea29:	c3                   	ret    
c000ea2a:	66 90                	xchg   ax,ax

c000ea2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea2c:	83 ec 1c             	sub    esp,0x1c
c000ea2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea36:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea3a:	8b 15 38 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d38
c000ea40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea44:	25 ff 00 00 00       	and    eax,0xff
c000ea49:	83 ec 08             	sub    esp,0x8
c000ea4c:	50                   	push   eax
c000ea4d:	52                   	push   edx
c000ea4e:	e8 53 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea53:	83 c4 10             	add    esp,0x10
c000ea56:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea5a:	8b 15 38 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d38
c000ea60:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea64:	25 ff 00 00 00       	and    eax,0xff
c000ea69:	83 ec 04             	sub    esp,0x4
c000ea6c:	6a 01                	push   0x1
c000ea6e:	50                   	push   eax
c000ea6f:	52                   	push   edx
c000ea70:	e8 47 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea75:	83 c4 10             	add    esp,0x10
c000ea78:	90                   	nop
c000ea79:	83 c4 1c             	add    esp,0x1c
c000ea7c:	c3                   	ret    
c000ea7d:	90                   	nop
c000ea7e:	66 90                	xchg   ax,ax

c000ea80 <ACPI::sleep()>:
c000ea80:	83 ec 0c             	sub    esp,0xc
c000ea83:	a1 20 33 02 c0       	mov    eax,ds:0xc0023320
c000ea88:	85 c0                	test   eax,eax
c000ea8a:	74 08                	je     c000ea94 <ACPI::sleep()+0x14>
c000ea8c:	a1 20 33 02 c0       	mov    eax,ds:0xc0023320
c000ea91:	ff d0                	call   eax
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	83 c4 0c             	add    esp,0xc
c000ea98:	c3                   	ret    
c000ea99:	90                   	nop
c000ea9a:	66 90                	xchg   ax,ax

c000ea9c <ACPI::open(int, int, void*)>:
c000ea9c:	57                   	push   edi
c000ea9d:	56                   	push   esi
c000ea9e:	53                   	push   ebx
c000ea9f:	81 ec 70 01 00 00    	sub    esp,0x170
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eaaf:	e8 70 fd ff ff       	call   c000e824 <ACPI::detectPCI()>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	83 ec 0c             	sub    esp,0xc
c000eaba:	68 40 e4 01 c0       	push   0xc001e440
c000eabf:	e8 17 10 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	68 d0 e4 01 c0       	push   0xc001e4d0
c000eacf:	e8 4e 38 00 00       	call   c0012322 <Thr::loadKernelSymbolTable(char const*)>
c000ead4:	83 c4 10             	add    esp,0x10
c000ead7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eadf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eaea:	83 ec 0c             	sub    esp,0xc
c000eaed:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eaf4:	e8 c0 8c ff ff       	call   c00077b9 <malloc>
c000eaf9:	83 c4 10             	add    esp,0x10
c000eafc:	89 c3                	mov    ebx,eax
c000eafe:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000eb03:	83 ec 04             	sub    esp,0x4
c000eb06:	50                   	push   eax
c000eb07:	68 ee e4 01 c0       	push   0xc001e4ee
c000eb0c:	53                   	push   ebx
c000eb0d:	e8 4c bf ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000eb12:	83 c4 10             	add    esp,0x10
c000eb15:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb1c:	83 ec 08             	sub    esp,0x8
c000eb1f:	6a 01                	push   0x1
c000eb21:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb28:	e8 f1 bf ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000eb2d:	83 c4 10             	add    esp,0x10
c000eb30:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb37:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb3f:	75 17                	jne    c000eb58 <ACPI::open(int, int, void*)+0xbc>
c000eb41:	83 ec 0c             	sub    esp,0xc
c000eb44:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb4b:	e8 2c c0 ff ff       	call   c000ab7c <File::close()>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	eb 0b                	jmp    c000eb60 <ACPI::open(int, int, void*)+0xc4>
c000eb55:	8d 76 00             	lea    esi,[esi+0x0]
c000eb58:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb60:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb68:	74 1e                	je     c000eb88 <ACPI::open(int, int, void*)+0xec>
c000eb6a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb71:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb73:	83 c0 08             	add    eax,0x8
c000eb76:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb78:	83 ec 0c             	sub    esp,0xc
c000eb7b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb82:	ff d0                	call   eax
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	90                   	nop
c000eb88:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb8f:	83 f0 01             	xor    eax,0x1
c000eb92:	84 c0                	test   al,al
c000eb94:	74 42                	je     c000ebd8 <ACPI::open(int, int, void*)+0x13c>
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	68 0c e5 01 c0       	push   0xc001e50c
c000eb9e:	e8 38 0f 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	83 ec 04             	sub    esp,0x4
c000eba9:	6a 0c                	push   0xc
c000ebab:	68 27 e5 01 c0       	push   0xc001e527
c000ebb0:	68 38 e5 01 c0       	push   0xc001e538
c000ebb5:	e8 58 2d 00 00       	call   c0011912 <Reg::readIntWithDefault(char*, char*, int)>
c000ebba:	83 c4 10             	add    esp,0x10
c000ebbd:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebc4:	83 ec 0c             	sub    esp,0xc
c000ebc7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebce:	e8 cc a8 ff ff       	call   c000949f <Virt::setupPageSwapping(int)>
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	66 90                	xchg   ax,ax
c000ebd8:	83 ec 0c             	sub    esp,0xc
c000ebdb:	68 97 d5 01 c0       	push   0xc001d597
c000ebe0:	e8 f6 0e 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebef:	83 ec 08             	sub    esp,0x8
c000ebf2:	6a 12                	push   0x12
c000ebf4:	50                   	push   eax
c000ebf5:	e8 46 d0 ff ff       	call   c000bc40 <getDevicesOfType(DeviceType)>
c000ebfa:	83 c4 0c             	add    esp,0xc
c000ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec0a:	50                   	push   eax
c000ec0b:	e8 dc dd 00 00       	call   c001c9ec <LinkedList<Device>::isEmpty()>
c000ec10:	83 c4 10             	add    esp,0x10
c000ec13:	83 f0 01             	xor    eax,0x1
c000ec16:	84 c0                	test   al,al
c000ec18:	0f 84 46 01 00 00    	je     c000ed64 <ACPI::open(int, int, void*)+0x2c8>
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec28:	50                   	push   eax
c000ec29:	e8 da dd 00 00       	call   c001ca08 <LinkedList<Device>::getFirstElement()>
c000ec2e:	83 c4 10             	add    esp,0x10
c000ec31:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec42:	50                   	push   eax
c000ec43:	e8 c8 dd 00 00       	call   c001ca10 <LinkedList<Device>::removeFirst()>
c000ec48:	83 c4 10             	add    esp,0x10
c000ec4b:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec52:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec59:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec60:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec64:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec6a:	ba 09 00 00 00       	mov    edx,0x9
c000ec6f:	fc                   	cld    
c000ec70:	89 c7                	mov    edi,eax
c000ec72:	89 de                	mov    esi,ebx
c000ec74:	89 d1                	mov    ecx,edx
c000ec76:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec78:	83 ec 08             	sub    esp,0x8
c000ec7b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec7f:	50                   	push   eax
c000ec80:	83 ec 24             	sub    esp,0x24
c000ec83:	89 e0                	mov    eax,esp
c000ec85:	89 c3                	mov    ebx,eax
c000ec87:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec8b:	ba 09 00 00 00       	mov    edx,0x9
c000ec90:	89 df                	mov    edi,ebx
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	89 d1                	mov    ecx,edx
c000ec96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec98:	e8 f7 9d 00 00       	call   c0018a94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec9d:	83 c4 30             	add    esp,0x30
c000eca0:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000eca7:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecaf:	0f 84 4b ff ff ff    	je     c000ec00 <ACPI::open(int, int, void*)+0x164>
c000ecb5:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecc0:	83 ec 0c             	sub    esp,0xc
c000ecc3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecca:	e8 ea 8a ff ff       	call   c00077b9 <malloc>
c000eccf:	83 c4 10             	add    esp,0x10
c000ecd2:	89 c3                	mov    ebx,eax
c000ecd4:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000ecd9:	83 ec 04             	sub    esp,0x4
c000ecdc:	50                   	push   eax
c000ecdd:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ece4:	53                   	push   ebx
c000ece5:	e8 74 bd ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecf4:	83 ec 0c             	sub    esp,0xc
c000ecf7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecfe:	e8 89 c0 ff ff       	call   c000ad8c <File::exists()>
c000ed03:	83 c4 10             	add    esp,0x10
c000ed06:	84 c0                	test   al,al
c000ed08:	74 2a                	je     c000ed34 <ACPI::open(int, int, void*)+0x298>
c000ed0a:	83 ec 08             	sub    esp,0x8
c000ed0d:	6a 01                	push   0x1
c000ed0f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed16:	e8 7e 40 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000ed1b:	83 c4 10             	add    esp,0x10
c000ed1e:	83 ec 08             	sub    esp,0x8
c000ed21:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed28:	50                   	push   eax
c000ed29:	e8 9c 42 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed3c:	0f 84 be fe ff ff    	je     c000ec00 <ACPI::open(int, int, void*)+0x164>
c000ed42:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed49:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed4b:	83 c0 08             	add    eax,0x8
c000ed4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed50:	83 ec 0c             	sub    esp,0xc
c000ed53:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed5a:	ff d0                	call   eax
c000ed5c:	83 c4 10             	add    esp,0x10
c000ed5f:	e9 9c fe ff ff       	jmp    c000ec00 <ACPI::open(int, int, void*)+0x164>
c000ed64:	83 ec 0c             	sub    esp,0xc
c000ed67:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed6e:	50                   	push   eax
c000ed6f:	e8 74 dc 00 00       	call   c001c9e8 <LinkedList<Device>::~LinkedList()>
c000ed74:	83 c4 10             	add    esp,0x10
c000ed77:	8b 1d 38 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d38
c000ed7d:	83 ec 08             	sub    esp,0x8
c000ed80:	6a 01                	push   0x1
c000ed82:	68 3f e5 01 c0       	push   0xc001e53f
c000ed87:	e8 0d 40 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	83 ec 08             	sub    esp,0x8
c000ed92:	53                   	push   ebx
c000ed93:	50                   	push   eax
c000ed94:	e8 31 42 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000ed99:	83 c4 10             	add    esp,0x10
c000ed9c:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000eda1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eda7:	83 e0 04             	and    eax,0x4
c000edaa:	84 c0                	test   al,al
c000edac:	0f 84 16 01 00 00    	je     c000eec8 <ACPI::open(int, int, void*)+0x42c>
c000edb2:	83 ec 0c             	sub    esp,0xc
c000edb5:	68 5c e5 01 c0       	push   0xc001e55c
c000edba:	e8 1c 0d 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000edbf:	83 c4 10             	add    esp,0x10
c000edc2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edcd:	83 ec 0c             	sub    esp,0xc
c000edd0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000edd7:	e8 dd 89 ff ff       	call   c00077b9 <malloc>
c000eddc:	83 c4 10             	add    esp,0x10
c000eddf:	89 c3                	mov    ebx,eax
c000ede1:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000ede6:	83 ec 04             	sub    esp,0x4
c000ede9:	50                   	push   eax
c000edea:	68 79 e5 01 c0       	push   0xc001e579
c000edef:	53                   	push   ebx
c000edf0:	e8 69 bc ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000edf5:	83 c4 10             	add    esp,0x10
c000edf8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edff:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee07:	74 1b                	je     c000ee24 <ACPI::open(int, int, void*)+0x388>
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee13:	e8 74 bf ff ff       	call   c000ad8c <File::exists()>
c000ee18:	83 c4 10             	add    esp,0x10
c000ee1b:	84 c0                	test   al,al
c000ee1d:	74 05                	je     c000ee24 <ACPI::open(int, int, void*)+0x388>
c000ee1f:	b0 01                	mov    al,0x1
c000ee21:	eb 05                	jmp    c000ee28 <ACPI::open(int, int, void*)+0x38c>
c000ee23:	90                   	nop
c000ee24:	b0 00                	mov    al,0x0
c000ee26:	66 90                	xchg   ax,ax
c000ee28:	84 c0                	test   al,al
c000ee2a:	74 28                	je     c000ee54 <ACPI::open(int, int, void*)+0x3b8>
c000ee2c:	83 ec 08             	sub    esp,0x8
c000ee2f:	6a 01                	push   0x1
c000ee31:	68 79 e5 01 c0       	push   0xc001e579
c000ee36:	e8 5e 3f 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c000ee3b:	83 c4 10             	add    esp,0x10
c000ee3e:	83 ec 08             	sub    esp,0x8
c000ee41:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee48:	50                   	push   eax
c000ee49:	e8 7c 41 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c000ee4e:	83 c4 10             	add    esp,0x10
c000ee51:	8d 76 00             	lea    esi,[esi+0x0]
c000ee54:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee5c:	74 2a                	je     c000ee88 <ACPI::open(int, int, void*)+0x3ec>
c000ee5e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee66:	74 20                	je     c000ee88 <ACPI::open(int, int, void*)+0x3ec>
c000ee68:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee6f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee71:	83 c0 08             	add    eax,0x8
c000ee74:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee76:	83 ec 0c             	sub    esp,0xc
c000ee79:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee80:	ff d0                	call   eax
c000ee82:	83 c4 10             	add    esp,0x10
c000ee85:	8d 76 00             	lea    esi,[esi+0x0]
c000ee88:	a1 48 35 02 c0       	mov    eax,ds:0xc0023548
c000ee8d:	83 ec 08             	sub    esp,0x8
c000ee90:	68 96 e5 01 c0       	push   0xc001e596
c000ee95:	50                   	push   eax
c000ee96:	e8 31 f2 ff ff       	call   c000e0cc <findDataTable(unsigned char*, char*)>
c000ee9b:	83 c4 10             	add    esp,0x10
c000ee9e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eea5:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eead:	74 19                	je     c000eec8 <ACPI::open(int, int, void*)+0x42c>
c000eeaf:	83 ec 08             	sub    esp,0x8
c000eeb2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eeb9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eec0:	e8 67 fb ff ff       	call   c000ea2c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eec5:	83 c4 10             	add    esp,0x10
c000eec8:	b8 00 00 00 00       	mov    eax,0x0
c000eecd:	81 c4 70 01 00 00    	add    esp,0x170
c000eed3:	5b                   	pop    ebx
c000eed4:	5e                   	pop    esi
c000eed5:	5f                   	pop    edi
c000eed6:	c3                   	ret    
c000eed7:	90                   	nop

c000eed8 <CPU::close(int, int, void*)>:
c000eed8:	31 c0                	xor    eax,eax
c000eeda:	c3                   	ret    
c000eedb:	90                   	nop

c000eedc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eedc:	60                   	pusha  
c000eedd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eee9:	9c                   	pushf  
c000eeea:	fa                   	cli    
c000eeeb:	0f 09                	wbinvd 
c000eeed:	0f 30                	wrmsr  
c000eeef:	9d                   	popf   
c000eef0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eef4:	89 02                	mov    DWORD PTR [edx],eax
c000eef6:	61                   	popa   
c000eef7:	c3                   	ret    

c000eef8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eef8:	60                   	pusha  
c000eef9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eefd:	9c                   	pushf  
c000eefe:	fa                   	cli    
c000eeff:	0f 09                	wbinvd 
c000ef01:	31 c0                	xor    eax,eax
c000ef03:	31 d2                	xor    edx,edx
c000ef05:	0f 32                	rdmsr  
c000ef07:	9d                   	popf   
c000ef08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef0c:	89 02                	mov    DWORD PTR [edx],eax
c000ef0e:	61                   	popa   
c000ef0f:	c3                   	ret    

c000ef10 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef10:	56                   	push   esi
c000ef11:	53                   	push   ebx
c000ef12:	83 ec 10             	sub    esp,0x10
c000ef15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef19:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef1e:	75 5d                	jne    c000ef7d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef20:	83 f8 08             	cmp    eax,0x8
c000ef23:	75 09                	jne    c000ef2e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef25:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef2a:	7e 13                	jle    c000ef3f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef2c:	eb 30                	jmp    c000ef5e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef2e:	83 f8 06             	cmp    eax,0x6
c000ef31:	7c 4a                	jl     c000ef7d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef33:	83 f8 07             	cmp    eax,0x7
c000ef36:	7e 07                	jle    c000ef3f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef38:	83 f8 09             	cmp    eax,0x9
c000ef3b:	74 21                	je     c000ef5e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef3d:	eb 3e                	jmp    c000ef7d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef3f:	89 e6                	mov    esi,esp
c000ef41:	8b 1d 5c 0d 02 c0    	mov    ebx,DWORD PTR ds:0xc0020d5c
c000ef47:	56                   	push   esi
c000ef48:	c1 eb 15             	shr    ebx,0x15
c000ef4b:	68 82 00 00 c0       	push   0xc0000082
c000ef50:	83 e3 7e             	and    ebx,0x7e
c000ef53:	e8 a0 ff ff ff       	call   c000eef8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef58:	56                   	push   esi
c000ef59:	6a 00                	push   0x0
c000ef5b:	53                   	push   ebx
c000ef5c:	eb 12                	jmp    c000ef70 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef5e:	89 e3                	mov    ebx,esp
c000ef60:	53                   	push   ebx
c000ef61:	68 82 00 00 c0       	push   0xc0000082
c000ef66:	e8 8d ff ff ff       	call   c000eef8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef6b:	53                   	push   ebx
c000ef6c:	6a 00                	push   0x0
c000ef6e:	6a 00                	push   0x0
c000ef70:	68 82 00 00 c0       	push   0xc0000082
c000ef75:	e8 62 ff ff ff       	call   c000eedc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef7a:	83 c4 18             	add    esp,0x18
c000ef7d:	83 c4 10             	add    esp,0x10
c000ef80:	5b                   	pop    ebx
c000ef81:	5e                   	pop    esi
c000ef82:	c3                   	ret    
c000ef83:	90                   	nop

c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef84:	55                   	push   ebp
c000ef85:	57                   	push   edi
c000ef86:	56                   	push   esi
c000ef87:	53                   	push   ebx
c000ef88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef8c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef94:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef98:	39 05 10 fa 01 c0    	cmp    DWORD PTR ds:0xc001fa10,eax
c000ef9e:	75 23                	jne    c000efc3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efa0:	a1 ac 37 02 c0       	mov    eax,ds:0xc00237ac
c000efa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efa9:	89 06                	mov    DWORD PTR [esi],eax
c000efab:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000efb0:	89 07                	mov    DWORD PTR [edi],eax
c000efb2:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000efb7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efba:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c000efbf:	89 02                	mov    DWORD PTR [edx],eax
c000efc1:	eb 3f                	jmp    c000f002 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efc3:	31 c9                	xor    ecx,ecx
c000efc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efc9:	0f a2                	cpuid  
c000efcb:	89 06                	mov    DWORD PTR [esi],eax
c000efcd:	89 1f                	mov    DWORD PTR [edi],ebx
c000efcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efd3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efd6:	89 10                	mov    DWORD PTR [eax],edx
c000efd8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efdc:	a3 10 fa 01 c0       	mov    ds:0xc001fa10,eax
c000efe1:	8b 06                	mov    eax,DWORD PTR [esi]
c000efe3:	a3 ac 37 02 c0       	mov    ds:0xc00237ac,eax
c000efe8:	8b 07                	mov    eax,DWORD PTR [edi]
c000efea:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000efef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eff2:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c000eff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000effb:	8b 00                	mov    eax,DWORD PTR [eax]
c000effd:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c000f002:	5b                   	pop    ebx
c000f003:	5e                   	pop    esi
c000f004:	5f                   	pop    edi
c000f005:	5d                   	pop    ebp
c000f006:	c3                   	ret    
c000f007:	90                   	nop

c000f008 <CPU::cpuidCheckEDX(unsigned int)>:
c000f008:	83 ec 10             	sub    esp,0x10
c000f00b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f00f:	50                   	push   eax
c000f010:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f014:	50                   	push   eax
c000f015:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f019:	50                   	push   eax
c000f01a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01e:	50                   	push   eax
c000f01f:	6a 01                	push   0x1
c000f021:	e8 5e ff ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f026:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f02a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f02e:	0f 95 c0             	setne  al
c000f031:	83 c4 24             	add    esp,0x24
c000f034:	c3                   	ret    
c000f035:	90                   	nop

c000f036 <CPU::cpuidCheckECX(unsigned int)>:
c000f036:	83 ec 10             	sub    esp,0x10
c000f039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f03d:	50                   	push   eax
c000f03e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f042:	50                   	push   eax
c000f043:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f047:	50                   	push   eax
c000f048:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04c:	50                   	push   eax
c000f04d:	6a 01                	push   0x1
c000f04f:	e8 30 ff ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f054:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f058:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f05c:	0f 95 c0             	setne  al
c000f05f:	83 c4 24             	add    esp,0x24
c000f062:	c3                   	ret    
c000f063:	90                   	nop

c000f064 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f064:	83 ec 10             	sub    esp,0x10
c000f067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f06b:	50                   	push   eax
c000f06c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f070:	50                   	push   eax
c000f071:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f075:	50                   	push   eax
c000f076:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07a:	50                   	push   eax
c000f07b:	6a 07                	push   0x7
c000f07d:	e8 02 ff ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f082:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f086:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f08a:	0f 95 c0             	setne  al
c000f08d:	83 c4 24             	add    esp,0x24
c000f090:	c3                   	ret    
c000f091:	90                   	nop

c000f092 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f092:	83 ec 10             	sub    esp,0x10
c000f095:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f099:	50                   	push   eax
c000f09a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f09e:	50                   	push   eax
c000f09f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a3:	50                   	push   eax
c000f0a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a8:	50                   	push   eax
c000f0a9:	6a 07                	push   0x7
c000f0ab:	e8 d4 fe ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0b8:	0f 95 c0             	setne  al
c000f0bb:	83 c4 24             	add    esp,0x24
c000f0be:	c3                   	ret    
c000f0bf:	90                   	nop

c000f0c0 <CPU::CPU()>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0c7:	83 ec 08             	sub    esp,0x8
c000f0ca:	68 b9 e6 01 c0       	push   0xc001e6b9
c000f0cf:	50                   	push   eax
c000f0d0:	e8 eb c9 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000f0d5:	83 c4 10             	add    esp,0x10
c000f0d8:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c000f0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e1:	89 10                	mov    DWORD PTR [eax],edx
c000f0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f5:	05 78 01 00 00       	add    eax,0x178
c000f0fa:	83 ec 0c             	sub    esp,0xc
c000f0fd:	50                   	push   eax
c000f0fe:	e8 77 7f ff ff       	call   c000707a <GDT::GDT()>
c000f103:	83 c4 10             	add    esp,0x10
c000f106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f10a:	05 7c 09 00 00       	add    eax,0x97c
c000f10f:	83 ec 0c             	sub    esp,0xc
c000f112:	50                   	push   eax
c000f113:	e8 9c 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f118:	83 c4 10             	add    esp,0x10
c000f11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f11f:	05 7c 11 00 00       	add    eax,0x117c
c000f124:	83 ec 0c             	sub    esp,0xc
c000f127:	50                   	push   eax
c000f128:	e8 ab 9a ff ff       	call   c0008bd8 <TSS::TSS()>
c000f12d:	83 c4 10             	add    esp,0x10
c000f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f134:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f149:	90                   	nop
c000f14a:	83 c4 0c             	add    esp,0xc
c000f14d:	c3                   	ret    

c000f14e <CPU::displayFeatures()>:
c000f14e:	c3                   	ret    
c000f14f:	90                   	nop

c000f150 <CPU::detectFeatures()>:
c000f150:	55                   	push   ebp
c000f151:	57                   	push   edi
c000f152:	56                   	push   esi
c000f153:	53                   	push   ebx
c000f154:	83 ec 30             	sub    esp,0x30
c000f157:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f15b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f165:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f16c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f172:	6a 0d                	push   0xd
c000f174:	6a 00                	push   0x0
c000f176:	55                   	push   ebp
c000f177:	e8 54 13 ff ff       	call   c00004d0 <memset>
c000f17c:	83 c4 10             	add    esp,0x10
c000f17f:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000f184:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f18b:	0f 84 d5 05 00 00    	je     c000f766 <CPU::detectFeatures()+0x616>
c000f191:	83 ec 0c             	sub    esp,0xc
c000f194:	89 ef                	mov    edi,ebp
c000f196:	6a 10                	push   0x10
c000f198:	e8 6b fe ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f19d:	83 e0 01             	and    eax,0x1
c000f1a0:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1a3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a9:	83 e0 fd             	and    eax,0xfffffffd
c000f1ac:	09 d0                	or     eax,edx
c000f1ae:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1b4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1bb:	e8 48 fe ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f1c0:	83 e0 01             	and    eax,0x1
c000f1c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1d0:	83 e0 fb             	and    eax,0xfffffffb
c000f1d3:	09 d0                	or     eax,edx
c000f1d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1db:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1e2:	e8 21 fe ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f1e7:	83 e0 01             	and    eax,0x1
c000f1ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1f1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1f7:	83 e0 f7             	and    eax,0xfffffff7
c000f1fa:	09 d0                	or     eax,edx
c000f1fc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f202:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f209:	e8 fa fd ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f20e:	83 e0 01             	and    eax,0x1
c000f211:	c1 e0 04             	shl    eax,0x4
c000f214:	88 c2                	mov    dl,al
c000f216:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f21c:	83 e0 ef             	and    eax,0xffffffef
c000f21f:	09 d0                	or     eax,edx
c000f221:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f227:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f22e:	e8 d5 fd ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f233:	83 e0 01             	and    eax,0x1
c000f236:	c1 e0 05             	shl    eax,0x5
c000f239:	88 c2                	mov    dl,al
c000f23b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f241:	83 e0 df             	and    eax,0xffffffdf
c000f244:	09 d0                	or     eax,edx
c000f246:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f24c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f253:	e8 b0 fd ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f258:	83 e0 01             	and    eax,0x1
c000f25b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f25e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f264:	83 e0 fd             	and    eax,0xfffffffd
c000f267:	09 d0                	or     eax,edx
c000f269:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f26f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f276:	e8 8d fd ff ff       	call   c000f008 <CPU::cpuidCheckEDX(unsigned int)>
c000f27b:	83 e0 01             	and    eax,0x1
c000f27e:	c1 e0 06             	shl    eax,0x6
c000f281:	88 c2                	mov    dl,al
c000f283:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f289:	83 e0 bf             	and    eax,0xffffffbf
c000f28c:	09 d0                	or     eax,edx
c000f28e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f294:	58                   	pop    eax
c000f295:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f299:	50                   	push   eax
c000f29a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f29e:	50                   	push   eax
c000f29f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2a3:	56                   	push   esi
c000f2a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a8:	50                   	push   eax
c000f2a9:	6a 00                	push   0x0
c000f2ab:	e8 d4 fc ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2b0:	b8 04 00 00 00       	mov    eax,0x4
c000f2b5:	89 c1                	mov    ecx,eax
c000f2b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2b9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2bf:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2c3:	89 c1                	mov    ecx,eax
c000f2c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2cd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2d1:	89 c1                	mov    ecx,eax
c000f2d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2d5:	83 c4 18             	add    esp,0x18
c000f2d8:	68 c8 e5 01 c0       	push   0xc001e5c8
c000f2dd:	55                   	push   ebp
c000f2de:	e8 fd 13 ff ff       	call   c00006e0 <strcmp>
c000f2e3:	83 c4 10             	add    esp,0x10
c000f2e6:	85 c0                	test   eax,eax
c000f2e8:	75 0f                	jne    c000f2f9 <CPU::detectFeatures()+0x1a9>
c000f2ea:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2f4:	e9 22 02 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f2f9:	50                   	push   eax
c000f2fa:	50                   	push   eax
c000f2fb:	68 d5 e5 01 c0       	push   0xc001e5d5
c000f300:	55                   	push   ebp
c000f301:	e8 da 13 ff ff       	call   c00006e0 <strcmp>
c000f306:	83 c4 10             	add    esp,0x10
c000f309:	85 c0                	test   eax,eax
c000f30b:	74 dd                	je     c000f2ea <CPU::detectFeatures()+0x19a>
c000f30d:	50                   	push   eax
c000f30e:	50                   	push   eax
c000f30f:	68 e2 e5 01 c0       	push   0xc001e5e2
c000f314:	55                   	push   ebp
c000f315:	e8 c6 13 ff ff       	call   c00006e0 <strcmp>
c000f31a:	83 c4 10             	add    esp,0x10
c000f31d:	85 c0                	test   eax,eax
c000f31f:	74 2a                	je     c000f34b <CPU::detectFeatures()+0x1fb>
c000f321:	50                   	push   eax
c000f322:	50                   	push   eax
c000f323:	68 ef e5 01 c0       	push   0xc001e5ef
c000f328:	55                   	push   ebp
c000f329:	e8 b2 13 ff ff       	call   c00006e0 <strcmp>
c000f32e:	83 c4 10             	add    esp,0x10
c000f331:	85 c0                	test   eax,eax
c000f333:	74 16                	je     c000f34b <CPU::detectFeatures()+0x1fb>
c000f335:	50                   	push   eax
c000f336:	50                   	push   eax
c000f337:	68 fc e5 01 c0       	push   0xc001e5fc
c000f33c:	55                   	push   ebp
c000f33d:	e8 9e 13 ff ff       	call   c00006e0 <strcmp>
c000f342:	83 c4 10             	add    esp,0x10
c000f345:	85 c0                	test   eax,eax
c000f347:	74 48                	je     c000f391 <CPU::detectFeatures()+0x241>
c000f349:	eb 0f                	jmp    c000f35a <CPU::detectFeatures()+0x20a>
c000f34b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f355:	e9 c1 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f35a:	50                   	push   eax
c000f35b:	50                   	push   eax
c000f35c:	68 09 e6 01 c0       	push   0xc001e609
c000f361:	55                   	push   ebp
c000f362:	e8 79 13 ff ff       	call   c00006e0 <strcmp>
c000f367:	83 c4 10             	add    esp,0x10
c000f36a:	85 c0                	test   eax,eax
c000f36c:	74 23                	je     c000f391 <CPU::detectFeatures()+0x241>
c000f36e:	57                   	push   edi
c000f36f:	57                   	push   edi
c000f370:	68 16 e6 01 c0       	push   0xc001e616
c000f375:	55                   	push   ebp
c000f376:	e8 65 13 ff ff       	call   c00006e0 <strcmp>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	85 c0                	test   eax,eax
c000f380:	75 1e                	jne    c000f3a0 <CPU::detectFeatures()+0x250>
c000f382:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f38c:	e9 8a 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f391:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f39b:	e9 7b 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f3a0:	56                   	push   esi
c000f3a1:	56                   	push   esi
c000f3a2:	68 23 e6 01 c0       	push   0xc001e623
c000f3a7:	55                   	push   ebp
c000f3a8:	e8 33 13 ff ff       	call   c00006e0 <strcmp>
c000f3ad:	83 c4 10             	add    esp,0x10
c000f3b0:	85 c0                	test   eax,eax
c000f3b2:	75 0f                	jne    c000f3c3 <CPU::detectFeatures()+0x273>
c000f3b4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3be:	e9 58 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f3c3:	51                   	push   ecx
c000f3c4:	51                   	push   ecx
c000f3c5:	68 e2 e5 01 c0       	push   0xc001e5e2
c000f3ca:	55                   	push   ebp
c000f3cb:	e8 10 13 ff ff       	call   c00006e0 <strcmp>
c000f3d0:	83 c4 10             	add    esp,0x10
c000f3d3:	85 c0                	test   eax,eax
c000f3d5:	75 0f                	jne    c000f3e6 <CPU::detectFeatures()+0x296>
c000f3d7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3e1:	e9 35 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f3e6:	52                   	push   edx
c000f3e7:	52                   	push   edx
c000f3e8:	68 30 e6 01 c0       	push   0xc001e630
c000f3ed:	55                   	push   ebp
c000f3ee:	e8 ed 12 ff ff       	call   c00006e0 <strcmp>
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	85 c0                	test   eax,eax
c000f3f8:	75 0f                	jne    c000f409 <CPU::detectFeatures()+0x2b9>
c000f3fa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f404:	e9 12 01 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f409:	50                   	push   eax
c000f40a:	50                   	push   eax
c000f40b:	68 3d e6 01 c0       	push   0xc001e63d
c000f410:	55                   	push   ebp
c000f411:	e8 ca 12 ff ff       	call   c00006e0 <strcmp>
c000f416:	83 c4 10             	add    esp,0x10
c000f419:	85 c0                	test   eax,eax
c000f41b:	75 0f                	jne    c000f42c <CPU::detectFeatures()+0x2dc>
c000f41d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f427:	e9 ef 00 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f42c:	50                   	push   eax
c000f42d:	50                   	push   eax
c000f42e:	68 4a e6 01 c0       	push   0xc001e64a
c000f433:	55                   	push   ebp
c000f434:	e8 a7 12 ff ff       	call   c00006e0 <strcmp>
c000f439:	83 c4 10             	add    esp,0x10
c000f43c:	85 c0                	test   eax,eax
c000f43e:	75 0f                	jne    c000f44f <CPU::detectFeatures()+0x2ff>
c000f440:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f44a:	e9 cc 00 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f44f:	50                   	push   eax
c000f450:	50                   	push   eax
c000f451:	68 57 e6 01 c0       	push   0xc001e657
c000f456:	55                   	push   ebp
c000f457:	e8 84 12 ff ff       	call   c00006e0 <strcmp>
c000f45c:	83 c4 10             	add    esp,0x10
c000f45f:	85 c0                	test   eax,eax
c000f461:	75 0f                	jne    c000f472 <CPU::detectFeatures()+0x322>
c000f463:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f46d:	e9 a9 00 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f472:	50                   	push   eax
c000f473:	50                   	push   eax
c000f474:	68 64 e6 01 c0       	push   0xc001e664
c000f479:	55                   	push   ebp
c000f47a:	e8 61 12 ff ff       	call   c00006e0 <strcmp>
c000f47f:	83 c4 10             	add    esp,0x10
c000f482:	85 c0                	test   eax,eax
c000f484:	75 0f                	jne    c000f495 <CPU::detectFeatures()+0x345>
c000f486:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f490:	e9 86 00 00 00       	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f495:	50                   	push   eax
c000f496:	50                   	push   eax
c000f497:	68 71 e6 01 c0       	push   0xc001e671
c000f49c:	55                   	push   ebp
c000f49d:	e8 3e 12 ff ff       	call   c00006e0 <strcmp>
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	75 0c                	jne    c000f4b5 <CPU::detectFeatures()+0x365>
c000f4a9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4b3:	eb 66                	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f4b5:	50                   	push   eax
c000f4b6:	50                   	push   eax
c000f4b7:	68 7e e6 01 c0       	push   0xc001e67e
c000f4bc:	55                   	push   ebp
c000f4bd:	e8 1e 12 ff ff       	call   c00006e0 <strcmp>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	85 c0                	test   eax,eax
c000f4c7:	75 0c                	jne    c000f4d5 <CPU::detectFeatures()+0x385>
c000f4c9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4d3:	eb 46                	jmp    c000f51b <CPU::detectFeatures()+0x3cb>
c000f4d5:	57                   	push   edi
c000f4d6:	57                   	push   edi
c000f4d7:	68 8b e6 01 c0       	push   0xc001e68b
c000f4dc:	55                   	push   ebp
c000f4dd:	e8 fe 11 ff ff       	call   c00006e0 <strcmp>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	85 c0                	test   eax,eax
c000f4e7:	74 e0                	je     c000f4c9 <CPU::detectFeatures()+0x379>
c000f4e9:	56                   	push   esi
c000f4ea:	56                   	push   esi
c000f4eb:	68 98 e6 01 c0       	push   0xc001e698
c000f4f0:	55                   	push   ebp
c000f4f1:	e8 ea 11 ff ff       	call   c00006e0 <strcmp>
c000f4f6:	83 c4 10             	add    esp,0x10
c000f4f9:	85 c0                	test   eax,eax
c000f4fb:	74 cc                	je     c000f4c9 <CPU::detectFeatures()+0x379>
c000f4fd:	51                   	push   ecx
c000f4fe:	51                   	push   ecx
c000f4ff:	68 a5 e6 01 c0       	push   0xc001e6a5
c000f504:	55                   	push   ebp
c000f505:	e8 d6 11 ff ff       	call   c00006e0 <strcmp>
c000f50a:	83 c4 10             	add    esp,0x10
c000f50d:	85 c0                	test   eax,eax
c000f50f:	74 b8                	je     c000f4c9 <CPU::detectFeatures()+0x379>
c000f511:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f51b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f520:	0f 86 be 00 00 00    	jbe    c000f5e4 <CPU::detectFeatures()+0x494>
c000f526:	83 ec 0c             	sub    esp,0xc
c000f529:	68 80 00 00 00       	push   0x80
c000f52e:	e8 31 fb ff ff       	call   c000f064 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f533:	83 e0 01             	and    eax,0x1
c000f536:	c1 e0 06             	shl    eax,0x6
c000f539:	88 c2                	mov    dl,al
c000f53b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f541:	83 e0 bf             	and    eax,0xffffffbf
c000f544:	09 d0                	or     eax,edx
c000f546:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f54c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f553:	e8 0c fb ff ff       	call   c000f064 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f558:	83 e0 01             	and    eax,0x1
c000f55b:	c1 e0 04             	shl    eax,0x4
c000f55e:	88 c2                	mov    dl,al
c000f560:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f566:	83 e0 ef             	and    eax,0xffffffef
c000f569:	09 d0                	or     eax,edx
c000f56b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f571:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f578:	e8 e7 fa ff ff       	call   c000f064 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f57d:	c1 e0 07             	shl    eax,0x7
c000f580:	88 c2                	mov    dl,al
c000f582:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f588:	83 e0 7f             	and    eax,0x7f
c000f58b:	09 d0                	or     eax,edx
c000f58d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f593:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f59a:	e8 f3 fa ff ff       	call   c000f092 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f59f:	83 e0 01             	and    eax,0x1
c000f5a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5a9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5af:	83 e0 f7             	and    eax,0xfffffff7
c000f5b2:	09 d0                	or     eax,edx
c000f5b4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5ba:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5c1:	e8 cc fa ff ff       	call   c000f092 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5c6:	83 c4 10             	add    esp,0x10
c000f5c9:	83 e0 01             	and    eax,0x1
c000f5cc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5d3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5d9:	83 e0 fb             	and    eax,0xfffffffb
c000f5dc:	09 d0                	or     eax,edx
c000f5de:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5e4:	83 ec 0c             	sub    esp,0xc
c000f5e7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5eb:	50                   	push   eax
c000f5ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f0:	50                   	push   eax
c000f5f1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5f5:	56                   	push   esi
c000f5f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5fa:	50                   	push   eax
c000f5fb:	6a 01                	push   0x1
c000f5fd:	e8 82 f9 ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f602:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f606:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f60c:	88 ca                	mov    dl,cl
c000f60e:	83 e0 f0             	and    eax,0xfffffff0
c000f611:	83 e2 0f             	and    edx,0xf
c000f614:	09 d0                	or     eax,edx
c000f616:	88 ca                	mov    dl,cl
c000f618:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f61e:	c0 ea 04             	shr    dl,0x4
c000f621:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f625:	0f b6 c2             	movzx  eax,dl
c000f628:	83 c4 20             	add    esp,0x20
c000f62b:	c1 e0 06             	shl    eax,0x6
c000f62e:	89 c7                	mov    edi,eax
c000f630:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f636:	66 25 3f c0          	and    ax,0xc03f
c000f63a:	09 f8                	or     eax,edi
c000f63c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f643:	89 c8                	mov    eax,ecx
c000f645:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f64c:	c1 e8 08             	shr    eax,0x8
c000f64f:	83 e5 3f             	and    ebp,0x3f
c000f652:	83 e0 0f             	and    eax,0xf
c000f655:	89 c7                	mov    edi,eax
c000f657:	c1 e7 06             	shl    edi,0x6
c000f65a:	09 ef                	or     edi,ebp
c000f65c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f663:	89 fa                	mov    edx,edi
c000f665:	83 e5 c0             	and    ebp,0xffffffc0
c000f668:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f66e:	88 c2                	mov    dl,al
c000f670:	c0 ea 02             	shr    dl,0x2
c000f673:	89 d7                	mov    edi,edx
c000f675:	09 ef                	or     edi,ebp
c000f677:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f67d:	89 fa                	mov    edx,edi
c000f67f:	83 e5 cf             	and    ebp,0xffffffcf
c000f682:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f688:	89 cf                	mov    edi,ecx
c000f68a:	c1 ef 0c             	shr    edi,0xc
c000f68d:	83 e7 03             	and    edi,0x3
c000f690:	c1 e7 04             	shl    edi,0x4
c000f693:	09 ef                	or     edi,ebp
c000f695:	3c 06                	cmp    al,0x6
c000f697:	89 fa                	mov    edx,edi
c000f699:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f69f:	74 04                	je     c000f6a5 <CPU::detectFeatures()+0x555>
c000f6a1:	3c 0f                	cmp    al,0xf
c000f6a3:	75 5c                	jne    c000f701 <CPU::detectFeatures()+0x5b1>
c000f6a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6a9:	89 cf                	mov    edi,ecx
c000f6ab:	c1 ef 10             	shr    edi,0x10
c000f6ae:	c1 e7 04             	shl    edi,0x4
c000f6b1:	09 fa                	or     edx,edi
c000f6b3:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6b9:	0f b6 d2             	movzx  edx,dl
c000f6bc:	66 81 e7 3f c0       	and    di,0xc03f
c000f6c1:	c1 e2 06             	shl    edx,0x6
c000f6c4:	09 fa                	or     edx,edi
c000f6c6:	3c 0f                	cmp    al,0xf
c000f6c8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6cf:	75 30                	jne    c000f701 <CPU::detectFeatures()+0x5b1>
c000f6d1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6d7:	c1 e9 14             	shr    ecx,0x14
c000f6da:	83 e0 3f             	and    eax,0x3f
c000f6dd:	83 c1 0f             	add    ecx,0xf
c000f6e0:	88 ca                	mov    dl,cl
c000f6e2:	c0 e9 02             	shr    cl,0x2
c000f6e5:	c1 e2 06             	shl    edx,0x6
c000f6e8:	09 d0                	or     eax,edx
c000f6ea:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6f0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6f6:	83 e0 c0             	and    eax,0xffffffc0
c000f6f9:	09 c1                	or     ecx,eax
c000f6fb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f701:	83 ec 0c             	sub    esp,0xc
c000f704:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f70b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f70f:	50                   	push   eax
c000f710:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f714:	55                   	push   ebp
c000f715:	56                   	push   esi
c000f716:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f71a:	57                   	push   edi
c000f71b:	68 00 00 00 80       	push   0x80000000
c000f720:	e8 5f f8 ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f725:	83 c4 20             	add    esp,0x20
c000f728:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f730:	76 22                	jbe    c000f754 <CPU::detectFeatures()+0x604>
c000f732:	83 ec 0c             	sub    esp,0xc
c000f735:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f739:	50                   	push   eax
c000f73a:	55                   	push   ebp
c000f73b:	56                   	push   esi
c000f73c:	57                   	push   edi
c000f73d:	68 01 00 00 80       	push   0x80000001
c000f742:	e8 3d f8 ff ff       	call   c000ef84 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f747:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f751:	83 c4 20             	add    esp,0x20
c000f754:	52                   	push   edx
c000f755:	52                   	push   edx
c000f756:	68 b1 e6 01 c0       	push   0xc001e6b1
c000f75b:	53                   	push   ebx
c000f75c:	e8 51 c3 ff ff       	call   c000bab2 <Device::setName(char const*)>
c000f761:	83 c4 10             	add    esp,0x10
c000f764:	eb 67                	jmp    c000f7cd <CPU::detectFeatures()+0x67d>
c000f766:	50                   	push   eax
c000f767:	50                   	push   eax
c000f768:	68 16 e6 01 c0       	push   0xc001e616
c000f76d:	55                   	push   ebp
c000f76e:	e8 8d 0e ff ff       	call   c0000600 <strcpy>
c000f773:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f77d:	e8 41 0a ff ff       	call   c00001c3 <is486>
c000f782:	83 c4 10             	add    esp,0x10
c000f785:	85 c0                	test   eax,eax
c000f787:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f78d:	74 1d                	je     c000f7ac <CPU::detectFeatures()+0x65c>
c000f78f:	83 c8 07             	or     eax,0x7
c000f792:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f798:	0f 20 c0             	mov    eax,cr0
c000f79b:	83 e0 14             	and    eax,0x14
c000f79e:	83 f8 04             	cmp    eax,0x4
c000f7a1:	75 0e                	jne    c000f7b1 <CPU::detectFeatures()+0x661>
c000f7a3:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7aa:	eb 21                	jmp    c000f7cd <CPU::detectFeatures()+0x67d>
c000f7ac:	83 e0 f8             	and    eax,0xfffffff8
c000f7af:	eb e1                	jmp    c000f792 <CPU::detectFeatures()+0x642>
c000f7b1:	e8 e8 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7b6:	83 e0 01             	and    eax,0x1
c000f7b9:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7bc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7c2:	83 e0 fd             	and    eax,0xfffffffd
c000f7c5:	09 d0                	or     eax,edx
c000f7c7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7cd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7d4:	74 0e                	je     c000f7e4 <CPU::detectFeatures()+0x694>
c000f7d6:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000f7db:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7e2:	eb 20                	jmp    c000f804 <CPU::detectFeatures()+0x6b4>
c000f7e4:	e8 b5 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7e9:	83 e0 01             	and    eax,0x1
c000f7ec:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7ef:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7f5:	83 e0 fd             	and    eax,0xfffffffd
c000f7f8:	09 d0                	or     eax,edx
c000f7fa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f800:	a8 02                	test   al,0x2
c000f802:	75 d2                	jne    c000f7d6 <CPU::detectFeatures()+0x686>
c000f804:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f80b:	83 c4 2c             	add    esp,0x2c
c000f80e:	5b                   	pop    ebx
c000f80f:	5e                   	pop    esi
c000f810:	5f                   	pop    edi
c000f811:	5d                   	pop    ebp
c000f812:	c3                   	ret    
c000f813:	90                   	nop

c000f814 <CPU::setupSMEP()>:
c000f814:	0f 20 e0             	mov    eax,cr4
c000f817:	0d 00 00 10 00       	or     eax,0x100000
c000f81c:	0f 22 e0             	mov    cr4,eax
c000f81f:	c3                   	ret    

c000f820 <CPU::setupUMIP()>:
c000f820:	0f 20 e0             	mov    eax,cr4
c000f823:	80 cc 08             	or     ah,0x8
c000f826:	0f 22 e0             	mov    cr4,eax
c000f829:	c3                   	ret    

c000f82a <CPU::setupTSC()>:
c000f82a:	0f 20 e0             	mov    eax,cr4
c000f82d:	83 c8 04             	or     eax,0x4
c000f830:	0f 22 e0             	mov    cr4,eax
c000f833:	c3                   	ret    

c000f834 <CPU::setupLargePages()>:
c000f834:	0f 20 e0             	mov    eax,cr4
c000f837:	83 c8 10             	or     eax,0x10
c000f83a:	0f 22 e0             	mov    cr4,eax
c000f83d:	c3                   	ret    

c000f83e <CPU::setupPAT()>:
c000f83e:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c000f843:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f84a:	74 2c                	je     c000f878 <CPU::setupPAT()+0x3a>
c000f84c:	53                   	push   ebx
c000f84d:	83 ec 10             	sub    esp,0x10
c000f850:	68 77 02 00 00       	push   0x277
c000f855:	50                   	push   eax
c000f856:	e8 97 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f85b:	83 e2 f8             	and    edx,0xfffffff8
c000f85e:	83 ca 01             	or     edx,0x1
c000f861:	52                   	push   edx
c000f862:	50                   	push   eax
c000f863:	68 77 02 00 00       	push   0x277
c000f868:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c000f86e:	e8 ab 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f873:	83 c4 28             	add    esp,0x28
c000f876:	5b                   	pop    ebx
c000f877:	c3                   	ret    
c000f878:	c3                   	ret    
c000f879:	90                   	nop

c000f87a <CPU::setupMTRR()>:
c000f87a:	c3                   	ret    
c000f87b:	90                   	nop

c000f87c <CPU::setupGlobalPages()>:
c000f87c:	0f 20 e0             	mov    eax,cr4
c000f87f:	0c 80                	or     al,0x80
c000f881:	0f 22 e0             	mov    cr4,eax
c000f884:	c3                   	ret    
c000f885:	90                   	nop

c000f886 <CPU::allowUsermodeDataAccess()>:
c000f886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f88a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f891:	74 03                	je     c000f896 <CPU::allowUsermodeDataAccess()+0x10>
c000f893:	0f 01 cb             	stac   
c000f896:	c3                   	ret    
c000f897:	90                   	nop

c000f898 <CPU::prohibitUsermodeDataAccess()>:
c000f898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f89c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8a3:	74 03                	je     c000f8a8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8a5:	0f 01 ca             	clac   
c000f8a8:	c3                   	ret    
c000f8a9:	90                   	nop

c000f8aa <CPU::setupSMAP()>:
c000f8aa:	0f 20 e0             	mov    eax,cr4
c000f8ad:	0d 00 00 20 00       	or     eax,0x200000
c000f8b2:	0f 22 e0             	mov    cr4,eax
c000f8b5:	eb e1                	jmp    c000f898 <CPU::prohibitUsermodeDataAccess()>
c000f8b7:	90                   	nop

c000f8b8 <CPU::setupFeatures()>:
c000f8b8:	53                   	push   ebx
c000f8b9:	83 ec 08             	sub    esp,0x8
c000f8bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8c7:	74 18                	je     c000f8e1 <CPU::setupFeatures()+0x29>
c000f8c9:	83 ec 0c             	sub    esp,0xc
c000f8cc:	68 bd e6 01 c0       	push   0xc001e6bd
c000f8d1:	e8 12 ac ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f8d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8d9:	e8 42 ff ff ff       	call   c000f820 <CPU::setupUMIP()>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8e8:	74 18                	je     c000f902 <CPU::setupFeatures()+0x4a>
c000f8ea:	83 ec 0c             	sub    esp,0xc
c000f8ed:	68 c7 e6 01 c0       	push   0xc001e6c7
c000f8f2:	e8 f1 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f8f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8fa:	e8 2b ff ff ff       	call   c000f82a <CPU::setupTSC()>
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f909:	74 18                	je     c000f923 <CPU::setupFeatures()+0x6b>
c000f90b:	83 ec 0c             	sub    esp,0xc
c000f90e:	68 d0 e6 01 c0       	push   0xc001e6d0
c000f913:	e8 d0 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f918:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f91b:	e8 14 ff ff ff       	call   c000f834 <CPU::setupLargePages()>
c000f920:	83 c4 10             	add    esp,0x10
c000f923:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f92a:	74 18                	je     c000f944 <CPU::setupFeatures()+0x8c>
c000f92c:	83 ec 0c             	sub    esp,0xc
c000f92f:	68 d9 e6 01 c0       	push   0xc001e6d9
c000f934:	e8 af ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f939:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f93c:	e8 3b ff ff ff       	call   c000f87c <CPU::setupGlobalPages()>
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f94b:	74 18                	je     c000f965 <CPU::setupFeatures()+0xad>
c000f94d:	83 ec 0c             	sub    esp,0xc
c000f950:	68 eb e6 01 c0       	push   0xc001e6eb
c000f955:	e8 8e ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f95a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f95d:	e8 dc fe ff ff       	call   c000f83e <CPU::setupPAT()>
c000f962:	83 c4 10             	add    esp,0x10
c000f965:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f96c:	74 11                	je     c000f97f <CPU::setupFeatures()+0xc7>
c000f96e:	c7 44 24 10 f4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6f4
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 69 ab ff ff       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f97f:	83 c4 08             	add    esp,0x8
c000f982:	5b                   	pop    ebx
c000f983:	c3                   	ret    

c000f984 <CPU::open(int, int, void*)>:
c000f984:	57                   	push   edi
c000f985:	56                   	push   esi
c000f986:	53                   	push   ebx
c000f987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f98b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f98f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f99e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9a4:	50                   	push   eax
c000f9a5:	e8 32 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9aa:	83 c4 0c             	add    esp,0xc
c000f9ad:	6a 00                	push   0x0
c000f9af:	68 ef be ad de       	push   0xdeadbeef
c000f9b4:	57                   	push   edi
c000f9b5:	e8 62 92 ff ff       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c000f9ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9bd:	e8 3a 92 ff ff       	call   c0008bfc <TSS::flush()>
c000f9c2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9cb:	e8 5a 79 ff ff       	call   c000732a <IDT::setup()>
c000f9d0:	b8 00 04 00 00       	mov    eax,0x400
c000f9d5:	0f 23 f8             	mov    db7,eax
c000f9d8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9e2:	e8 be 80 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000f9e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9ed:	89 30                	mov    DWORD PTR [eax],esi
c000f9ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9f5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9f8:	58                   	pop    eax
c000f9f9:	5a                   	pop    edx
c000f9fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa04:	e8 fd a1 ff ff       	call   c0009c06 <VAS::setCPUSpecific(unsigned long)>
c000fa09:	c7 04 24 fe e6 01 c0 	mov    DWORD PTR [esp],0xc001e6fe
c000fa10:	e8 c6 00 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000fa15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa18:	e8 33 f7 ff ff       	call   c000f150 <CPU::detectFeatures()>
c000fa1d:	c7 04 24 21 e7 01 c0 	mov    DWORD PTR [esp],0xc001e721
c000fa24:	e8 b2 00 00 00       	call   c000fadb <KeSetBootMessage(char const*)>
c000fa29:	e8 ea 5d 00 00       	call   c0015818 <HalInitialise()>
c000fa2e:	a1 50 0d 02 c0       	mov    eax,ds:0xc0020d50
c000fa33:	83 e0 10             	and    eax,0x10
c000fa36:	83 f8 01             	cmp    eax,0x1
c000fa39:	19 c0                	sbb    eax,eax
c000fa3b:	83 e0 46             	and    eax,0x46
c000fa3e:	83 c0 1e             	add    eax,0x1e
c000fa41:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa44:	e8 60 d7 ff ff       	call   c000d1a9 <setupTimer(int)>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa52:	f6 05 50 0d 02 c0 20 	test   BYTE PTR ds:0xc0020d50,0x20
c000fa59:	74 0c                	je     c000fa67 <CPU::open(int, int, void*)+0xe3>
c000fa5b:	83 ec 0c             	sub    esp,0xc
c000fa5e:	53                   	push   ebx
c000fa5f:	e8 54 fe ff ff       	call   c000f8b8 <CPU::setupFeatures()>
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	5b                   	pop    ebx
c000fa68:	31 c0                	xor    eax,eax
c000fa6a:	5e                   	pop    esi
c000fa6b:	5f                   	pop    edi
c000fa6c:	c3                   	ret    

c000fa6d <KeDisplaySplashScreen()>:
c000fa6d:	55                   	push   ebp
c000fa6e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa73:	57                   	push   edi
c000fa74:	bf 20 fa 01 c0       	mov    edi,0xc001fa20
c000fa79:	56                   	push   esi
c000fa7a:	be 0a 00 00 00       	mov    esi,0xa
c000fa7f:	53                   	push   ebx
c000fa80:	31 db                	xor    ebx,ebx
c000fa82:	83 ec 0c             	sub    esp,0xc
c000fa85:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa88:	84 c0                	test   al,al
c000fa8a:	74 47                	je     c000fad3 <KeDisplaySplashScreen()+0x66>
c000fa8c:	80 bb 56 fa 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe05aa],0xdb
c000fa93:	75 13                	jne    c000faa8 <KeDisplaySplashScreen()+0x3b>
c000fa95:	0f b6 93 55 fa 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe05ab]
c000fa9c:	83 e2 fe             	and    edx,0xfffffffe
c000fa9f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000faa5:	75 01                	jne    c000faa8 <KeDisplaySplashScreen()+0x3b>
c000faa7:	46                   	inc    esi
c000faa8:	3c 0d                	cmp    al,0xd
c000faaa:	74 24                	je     c000fad0 <KeDisplaySplashScreen()+0x63>
c000faac:	3c 0a                	cmp    al,0xa
c000faae:	75 0a                	jne    c000faba <KeDisplaySplashScreen()+0x4d>
c000fab0:	45                   	inc    ebp
c000fab1:	be 0a 00 00 00       	mov    esi,0xa
c000fab6:	31 db                	xor    ebx,ebx
c000fab8:	eb 16                	jmp    c000fad0 <KeDisplaySplashScreen()+0x63>
c000faba:	83 ec 0c             	sub    esp,0xc
c000fabd:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fac0:	55                   	push   ebp
c000fac1:	43                   	inc    ebx
c000fac2:	52                   	push   edx
c000fac3:	6a 00                	push   0x0
c000fac5:	6a 0e                	push   0xe
c000fac7:	50                   	push   eax
c000fac8:	e8 af 69 00 00       	call   c001647c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000facd:	83 c4 20             	add    esp,0x20
c000fad0:	47                   	inc    edi
c000fad1:	eb b2                	jmp    c000fa85 <KeDisplaySplashScreen()+0x18>
c000fad3:	83 c4 0c             	add    esp,0xc
c000fad6:	5b                   	pop    ebx
c000fad7:	5e                   	pop    esi
c000fad8:	5f                   	pop    edi
c000fad9:	5d                   	pop    ebp
c000fada:	c3                   	ret    

c000fadb <KeSetBootMessage(char const*)>:
c000fadb:	57                   	push   edi
c000fadc:	56                   	push   esi
c000fadd:	53                   	push   ebx
c000fade:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fae4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000faeb:	68 9e 00 00 00       	push   0x9e
c000faf0:	6a 00                	push   0x0
c000faf2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000faf6:	56                   	push   esi
c000faf7:	e8 d4 09 ff ff       	call   c00004d0 <memset>
c000fafc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faff:	e8 3c 0a ff ff       	call   c0000540 <strlen>
c000fb04:	ba 50 00 00 00       	mov    edx,0x50
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	29 c2                	sub    edx,eax
c000fb0e:	31 c9                	xor    ecx,ecx
c000fb10:	83 e2 fe             	and    edx,0xfffffffe
c000fb13:	01 f2                	add    edx,esi
c000fb15:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb1a:	84 c0                	test   al,al
c000fb1c:	74 0a                	je     c000fb28 <KeSetBootMessage(char const*)+0x4d>
c000fb1e:	80 cc 0f             	or     ah,0xf
c000fb21:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb25:	41                   	inc    ecx
c000fb26:	eb ed                	jmp    c000fb15 <KeSetBootMessage(char const*)+0x3a>
c000fb28:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb2d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb34:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb3a:	5b                   	pop    ebx
c000fb3b:	5e                   	pop    esi
c000fb3c:	5f                   	pop    edi
c000fb3d:	c3                   	ret    

c000fb3e <EnvVarContainer::getEnv(char const*)>:
c000fb3e:	57                   	push   edi
c000fb3f:	56                   	push   esi
c000fb40:	53                   	push   ebx
c000fb41:	31 db                	xor    ebx,ebx
c000fb43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb47:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb49:	7e 2b                	jle    c000fb76 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb4b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb52:	50                   	push   eax
c000fb53:	50                   	push   eax
c000fb54:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb57:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb5e:	e8 7d 0b ff ff       	call   c00006e0 <strcmp>
c000fb63:	83 c4 10             	add    esp,0x10
c000fb66:	85 c0                	test   eax,eax
c000fb68:	75 09                	jne    c000fb73 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb6d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb71:	eb 05                	jmp    c000fb78 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb73:	43                   	inc    ebx
c000fb74:	eb d1                	jmp    c000fb47 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb76:	31 c0                	xor    eax,eax
c000fb78:	5b                   	pop    ebx
c000fb79:	5e                   	pop    esi
c000fb7a:	5f                   	pop    edi
c000fb7b:	c3                   	ret    

c000fb7c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb7c:	55                   	push   ebp
c000fb7d:	57                   	push   edi
c000fb7e:	56                   	push   esi
c000fb7f:	53                   	push   ebx
c000fb80:	83 ec 28             	sub    esp,0x28
c000fb83:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb87:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb8b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb8f:	56                   	push   esi
c000fb90:	e8 ab 09 ff ff       	call   c0000540 <strlen>
c000fb95:	40                   	inc    eax
c000fb96:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb99:	e8 1b 7c ff ff       	call   c00077b9 <malloc>
c000fb9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fba5:	e8 96 09 ff ff       	call   c0000540 <strlen>
c000fbaa:	40                   	inc    eax
c000fbab:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbae:	e8 06 7c ff ff       	call   c00077b9 <malloc>
c000fbb3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbba:	e8 81 09 ff ff       	call   c0000540 <strlen>
c000fbbf:	83 c4 0c             	add    esp,0xc
c000fbc2:	40                   	inc    eax
c000fbc3:	50                   	push   eax
c000fbc4:	6a 00                	push   0x0
c000fbc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbca:	e8 01 09 ff ff       	call   c00004d0 <memset>
c000fbcf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbd2:	e8 69 09 ff ff       	call   c0000540 <strlen>
c000fbd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbdb:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbe3:	89 de                	mov    esi,ebx
c000fbe5:	e8 56 09 ff ff       	call   c0000540 <strlen>
c000fbea:	83 c4 0c             	add    esp,0xc
c000fbed:	40                   	inc    eax
c000fbee:	50                   	push   eax
c000fbef:	6a 00                	push   0x0
c000fbf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbf5:	e8 d6 08 ff ff       	call   c00004d0 <memset>
c000fbfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbfd:	e8 3e 09 ff ff       	call   c0000540 <strlen>
c000fc02:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc06:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc0e:	40                   	inc    eax
c000fc0f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc12:	c1 e0 03             	shl    eax,0x3
c000fc15:	5a                   	pop    edx
c000fc16:	59                   	pop    ecx
c000fc17:	50                   	push   eax
c000fc18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc1b:	e8 85 7b ff ff       	call   c00077a5 <realloc>
c000fc20:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc24:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc27:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc2a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc2e:	b9 08 00 00 00       	mov    ecx,0x8
c000fc33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc35:	83 c4 2c             	add    esp,0x2c
c000fc38:	5b                   	pop    ebx
c000fc39:	5e                   	pop    esi
c000fc3a:	5f                   	pop    edi
c000fc3b:	5d                   	pop    ebp
c000fc3c:	c3                   	ret    
c000fc3d:	90                   	nop

c000fc3e <EnvVarContainer::deleteEnv(char const*)>:
c000fc3e:	c3                   	ret    
c000fc3f:	90                   	nop

c000fc40 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc40:	55                   	push   ebp
c000fc41:	57                   	push   edi
c000fc42:	56                   	push   esi
c000fc43:	53                   	push   ebx
c000fc44:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc4a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc51:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc58:	68 14 01 00 00       	push   0x114
c000fc5d:	e8 57 7b ff ff       	call   c00077b9 <malloc>
c000fc62:	83 c4 0c             	add    esp,0xc
c000fc65:	89 c3                	mov    ebx,eax
c000fc67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc6a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc71:	50                   	push   eax
c000fc72:	e8 e7 ad ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000fc77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc7a:	e8 0d b1 ff ff       	call   c000ad8c <File::exists()>
c000fc7f:	83 c4 10             	add    esp,0x10
c000fc82:	84 c0                	test   al,al
c000fc84:	75 31                	jne    c000fcb7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc86:	50                   	push   eax
c000fc87:	50                   	push   eax
c000fc88:	6a 12                	push   0x12
c000fc8a:	53                   	push   ebx
c000fc8b:	e8 8e ae ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000fc90:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc92:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc95:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc98:	e8 a3 08 ff ff       	call   c0000540 <strlen>
c000fc9d:	5a                   	pop    edx
c000fc9e:	31 d2                	xor    edx,edx
c000fca0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fca4:	51                   	push   ecx
c000fca5:	56                   	push   esi
c000fca6:	52                   	push   edx
c000fca7:	50                   	push   eax
c000fca8:	53                   	push   ebx
c000fca9:	ff d7                	call   edi
c000fcab:	83 c4 14             	add    esp,0x14
c000fcae:	53                   	push   ebx
c000fcaf:	e8 c8 ae ff ff       	call   c000ab7c <File::close()>
c000fcb4:	83 c4 10             	add    esp,0x10
c000fcb7:	56                   	push   esi
c000fcb8:	31 f6                	xor    esi,esi
c000fcba:	68 00 01 00 00       	push   0x100
c000fcbf:	6a 00                	push   0x0
c000fcc1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcc5:	50                   	push   eax
c000fcc6:	e8 05 08 ff ff       	call   c00004d0 <memset>
c000fccb:	5f                   	pop    edi
c000fccc:	58                   	pop    eax
c000fccd:	6a 01                	push   0x1
c000fccf:	53                   	push   ebx
c000fcd0:	e8 49 ae ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fce0:	83 ec 0c             	sub    esp,0xc
c000fce3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fce5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fce9:	51                   	push   ecx
c000fcea:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcee:	52                   	push   edx
c000fcef:	6a 00                	push   0x0
c000fcf1:	6a 01                	push   0x1
c000fcf3:	53                   	push   ebx
c000fcf4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcf7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fcfb:	83 c4 20             	add    esp,0x20
c000fcfe:	3c 0d                	cmp    al,0xd
c000fd00:	0f 84 09 01 00 00    	je     c000fe0f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd0b:	0f 84 ef 00 00 00    	je     c000fe00 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd11:	3c 0a                	cmp    al,0xa
c000fd13:	74 13                	je     c000fd28 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd15:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd1a:	74 0c                	je     c000fd28 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd1c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd22:	0f 8e d8 00 00 00    	jle    c000fe00 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd2c:	83 ec 0c             	sub    esp,0xc
c000fd2f:	8d 78 01             	lea    edi,[eax+0x1]
c000fd32:	57                   	push   edi
c000fd33:	e8 81 7a ff ff       	call   c00077b9 <malloc>
c000fd38:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd40:	8d 56 04             	lea    edx,[esi+0x4]
c000fd43:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd4a:	e8 6a 7a ff ff       	call   c00077b9 <malloc>
c000fd4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd53:	83 c4 0c             	add    esp,0xc
c000fd56:	57                   	push   edi
c000fd57:	6a 00                	push   0x0
c000fd59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd5d:	e8 6e 07 ff ff       	call   c00004d0 <memset>
c000fd62:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd66:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd6a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd70:	83 c4 0c             	add    esp,0xc
c000fd73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd77:	52                   	push   edx
c000fd78:	6a 00                	push   0x0
c000fd7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd7e:	e8 4d 07 ff ff       	call   c00004d0 <memset>
c000fd83:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd87:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd8b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd8e:	e8 ad 07 ff ff       	call   c0000540 <strlen>
c000fd93:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd97:	89 c1                	mov    ecx,eax
c000fd99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd9e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fda1:	40                   	inc    eax
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fda8:	85 d2                	test   edx,edx
c000fdaa:	75 0c                	jne    c000fdb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	6a 08                	push   0x8
c000fdb1:	e8 03 7a ff ff       	call   c00077b9 <malloc>
c000fdb6:	eb 0c                	jmp    c000fdc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdb8:	c1 e0 03             	shl    eax,0x3
c000fdbb:	51                   	push   ecx
c000fdbc:	51                   	push   ecx
c000fdbd:	50                   	push   eax
c000fdbe:	52                   	push   edx
c000fdbf:	e8 e1 79 ff ff       	call   c00077a5 <realloc>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdcd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdd0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdd4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdd8:	b9 08 00 00 00       	mov    ecx,0x8
c000fddd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fddf:	31 f6                	xor    esi,esi
c000fde1:	50                   	push   eax
c000fde2:	68 00 01 00 00       	push   0x100
c000fde7:	6a 00                	push   0x0
c000fde9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fded:	50                   	push   eax
c000fdee:	e8 dd 06 ff ff       	call   c00004d0 <memset>
c000fdf3:	83 c4 10             	add    esp,0x10
c000fdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdfe:	eb 0f                	jmp    c000fe0f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe00:	3c 3d                	cmp    al,0x3d
c000fe02:	74 07                	je     c000fe0b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe04:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe08:	46                   	inc    esi
c000fe09:	eb 04                	jmp    c000fe0f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe0b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe14:	0f 85 c6 fe ff ff    	jne    c000fce0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe20:	5b                   	pop    ebx
c000fe21:	5e                   	pop    esi
c000fe22:	5f                   	pop    edi
c000fe23:	5d                   	pop    ebp
c000fe24:	c3                   	ret    
c000fe25:	90                   	nop

c000fe26 <EnvVarContainer::__loadSystem()>:
c000fe26:	83 ec 10             	sub    esp,0x10
c000fe29:	68 80 fb 01 c0       	push   0xc001fb80
c000fe2e:	68 64 e7 01 c0       	push   0xc001e764
c000fe33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe37:	e8 04 fe ff ff       	call   c000fc40 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe3c:	83 c4 1c             	add    esp,0x1c
c000fe3f:	c3                   	ret    

c000fe40 <EnvVarContainer::__loadUser()>:
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe54:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe5b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe62:	90                   	nop
c000fe63:	c3                   	ret    

c000fe64 <EnvVarContainer::~EnvVarContainer()>:
c000fe64:	83 ec 0c             	sub    esp,0xc
c000fe67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe6e:	85 c0                	test   eax,eax
c000fe70:	74 1d                	je     c000fe8f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe76:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe78:	85 c0                	test   eax,eax
c000fe7a:	74 13                	je     c000fe8f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe83:	83 ec 0c             	sub    esp,0xc
c000fe86:	50                   	push   eax
c000fe87:	e8 4d 79 ff ff       	call   c00077d9 <free>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	90                   	nop
c000fe90:	83 c4 0c             	add    esp,0xc
c000fe93:	c3                   	ret    

c000fe94 <Krnl::getEnv(Process*, char const*)>:
c000fe94:	53                   	push   ebx
c000fe95:	83 ec 08             	sub    esp,0x8
c000fe98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fea0:	39 05 10 40 02 c0    	cmp    DWORD PTR ds:0xc0024010,eax
c000fea6:	74 04                	je     c000feac <Krnl::getEnv(Process*, char const*)+0x18>
c000fea8:	85 c0                	test   eax,eax
c000feaa:	75 0b                	jne    c000feb7 <Krnl::getEnv(Process*, char const*)+0x23>
c000feac:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000feb1:	85 c0                	test   eax,eax
c000feb3:	75 19                	jne    c000fece <Krnl::getEnv(Process*, char const*)+0x3a>
c000feb5:	eb 27                	jmp    c000fede <Krnl::getEnv(Process*, char const*)+0x4a>
c000feb7:	52                   	push   edx
c000feb8:	52                   	push   edx
c000feb9:	53                   	push   ebx
c000feba:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fec0:	e8 79 fc ff ff       	call   c000fb3e <EnvVarContainer::getEnv(char const*)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	85 c0                	test   eax,eax
c000feca:	75 28                	jne    c000fef4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fecc:	eb de                	jmp    c000feac <Krnl::getEnv(Process*, char const*)+0x18>
c000fece:	52                   	push   edx
c000fecf:	52                   	push   edx
c000fed0:	53                   	push   ebx
c000fed1:	50                   	push   eax
c000fed2:	e8 67 fc ff ff       	call   c000fb3e <EnvVarContainer::getEnv(char const*)>
c000fed7:	83 c4 10             	add    esp,0x10
c000feda:	85 c0                	test   eax,eax
c000fedc:	75 16                	jne    c000fef4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fede:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fee2:	a1 b4 37 02 c0       	mov    eax,ds:0xc00237b4
c000fee7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000feeb:	83 c4 08             	add    esp,0x8
c000feee:	5b                   	pop    ebx
c000feef:	e9 4a fc ff ff       	jmp    c000fb3e <EnvVarContainer::getEnv(char const*)>
c000fef4:	83 c4 08             	add    esp,0x8
c000fef7:	5b                   	pop    ebx
c000fef8:	c3                   	ret    

c000fef9 <Krnl::setEnvSystem(char const*, char const*)>:
c000fef9:	83 ec 10             	sub    esp,0x10
c000fefc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff04:	ff 35 b4 37 02 c0    	push   DWORD PTR ds:0xc00237b4
c000ff0a:	e8 6d fc ff ff       	call   c000fb7c <EnvVarContainer::setEnv(char const*, char const*)>
c000ff0f:	83 c4 1c             	add    esp,0x1c
c000ff12:	c3                   	ret    

c000ff13 <Krnl::setEnvUser(char const*, char const*)>:
c000ff13:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000ff18:	85 c0                	test   eax,eax
c000ff1a:	74 15                	je     c000ff31 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff1c:	83 ec 10             	sub    esp,0x10
c000ff1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff27:	50                   	push   eax
c000ff28:	e8 4f fc ff ff       	call   c000fb7c <EnvVarContainer::setEnv(char const*, char const*)>
c000ff2d:	83 c4 1c             	add    esp,0x1c
c000ff30:	c3                   	ret    
c000ff31:	c3                   	ret    

c000ff32 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff36:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff40:	e9 37 fc ff ff       	jmp    c000fb7c <EnvVarContainer::setEnv(char const*, char const*)>

c000ff45 <Krnl::deleteEnvSystem(char const*)>:
c000ff45:	c3                   	ret    

c000ff46 <Krnl::deleteEnvUser(char const*)>:
c000ff46:	c3                   	ret    

c000ff47 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff47:	c3                   	ret    

c000ff48 <Krnl::newProcessEnv(Process*)>:
c000ff48:	83 ec 28             	sub    esp,0x28
c000ff4b:	6a 0c                	push   0xc
c000ff4d:	e8 67 78 ff ff       	call   c00077b9 <malloc>
c000ff52:	5a                   	pop    edx
c000ff53:	59                   	pop    ecx
c000ff54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff58:	50                   	push   eax
c000ff59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff5d:	e8 e0 fe ff ff       	call   c000fe42 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff66:	83 c4 2c             	add    esp,0x2c
c000ff69:	c3                   	ret    

c000ff6a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff6a:	57                   	push   edi
c000ff6b:	56                   	push   esi
c000ff6c:	53                   	push   ebx
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 0c             	sub    esp,0xc
c000ff74:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff7a:	6a 0c                	push   0xc
c000ff7c:	e8 38 78 ff ff       	call   c00077b9 <malloc>
c000ff81:	89 c3                	mov    ebx,eax
c000ff83:	58                   	pop    eax
c000ff84:	5a                   	pop    edx
c000ff85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff89:	53                   	push   ebx
c000ff8a:	e8 b3 fe ff ff       	call   c000fe42 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff8f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff91:	89 03                	mov    DWORD PTR [ebx],eax
c000ff93:	c1 e0 03             	shl    eax,0x3
c000ff96:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff99:	e8 1b 78 ff ff       	call   c00077b9 <malloc>
c000ff9e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffa1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffa3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffa6:	c1 e1 03             	shl    ecx,0x3
c000ffa9:	89 c7                	mov    edi,eax
c000ffab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffad:	83 c4 10             	add    esp,0x10
c000ffb0:	89 d8                	mov    eax,ebx
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	c3                   	ret    

c000ffb6 <Krnl::loadSystemEnv()>:
c000ffb6:	53                   	push   ebx
c000ffb7:	83 ec 14             	sub    esp,0x14
c000ffba:	6a 0c                	push   0xc
c000ffbc:	e8 f8 77 ff ff       	call   c00077b9 <malloc>
c000ffc1:	89 c3                	mov    ebx,eax
c000ffc3:	58                   	pop    eax
c000ffc4:	5a                   	pop    edx
c000ffc5:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c000ffcb:	53                   	push   ebx
c000ffcc:	e8 71 fe ff ff       	call   c000fe42 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd4:	89 1d b4 37 02 c0    	mov    DWORD PTR ds:0xc00237b4,ebx
c000ffda:	e8 47 fe ff ff       	call   c000fe26 <EnvVarContainer::__loadSystem()>
c000ffdf:	83 c4 18             	add    esp,0x18
c000ffe2:	5b                   	pop    ebx
c000ffe3:	c3                   	ret    

c000ffe4 <Krnl::loadUserEnv()>:
c000ffe4:	53                   	push   ebx
c000ffe5:	83 ec 14             	sub    esp,0x14
c000ffe8:	6a 0c                	push   0xc
c000ffea:	e8 ca 77 ff ff       	call   c00077b9 <malloc>
c000ffef:	89 c3                	mov    ebx,eax
c000fff1:	58                   	pop    eax
c000fff2:	5a                   	pop    edx
c000fff3:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c000fff9:	53                   	push   ebx
c000fffa:	e8 43 fe ff ff       	call   c000fe42 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffff:	89 1d b0 37 02 c0    	mov    DWORD PTR ds:0xc00237b0,ebx
c0010005:	83 c4 18             	add    esp,0x18
c0010008:	5b                   	pop    ebx
c0010009:	c3                   	ret    

c001000a <Krnl::flushEnv()>:
c001000a:	c3                   	ret    

c001000b <Krnl::getProcessTotalEnvCount(Process*)>:
c001000b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001000f:	8b 15 b0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237b0
c0010015:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001001b:	a1 b4 37 02 c0       	mov    eax,ds:0xc00237b4
c0010020:	8b 00                	mov    eax,DWORD PTR [eax]
c0010022:	03 01                	add    eax,DWORD PTR [ecx]
c0010024:	85 d2                	test   edx,edx
c0010026:	74 02                	je     c001002a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010028:	03 02                	add    eax,DWORD PTR [edx]
c001002a:	c3                   	ret    

c001002b <Krnl::getProcessEnvPair(Process*, int)>:
c001002b:	57                   	push   edi
c001002c:	56                   	push   esi
c001002d:	8b 35 b0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237b0
c0010033:	53                   	push   ebx
c0010034:	85 f6                	test   esi,esi
c0010036:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001003a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001003e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010044:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010048:	8b 01                	mov    eax,DWORD PTR [ecx]
c001004a:	75 16                	jne    c0010062 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001004c:	39 c2                	cmp    edx,eax
c001004e:	7c 16                	jl     c0010066 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010050:	8b 0d b4 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237b4
c0010056:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010058:	01 c6                	add    esi,eax
c001005a:	39 d6                	cmp    esi,edx
c001005c:	7e 3c                	jle    c001009a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001005e:	29 c2                	sub    edx,eax
c0010060:	eb 04                	jmp    c0010066 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010062:	39 c2                	cmp    edx,eax
c0010064:	7d 05                	jge    c001006b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010066:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010069:	eb 20                	jmp    c001008b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001006b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001006d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010070:	39 d1                	cmp    ecx,edx
c0010072:	7e 04                	jle    c0010078 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010074:	29 c2                	sub    edx,eax
c0010076:	eb 10                	jmp    c0010088 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010078:	8b 35 b4 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237b4
c001007e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010080:	39 d1                	cmp    ecx,edx
c0010082:	7e 16                	jle    c001009a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010084:	29 c2                	sub    edx,eax
c0010086:	29 fa                	sub    edx,edi
c0010088:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001008b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001008e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010090:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010093:	89 03                	mov    DWORD PTR [ebx],eax
c0010095:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010098:	eb 1d                	jmp    c00100b7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001009a:	83 ec 0c             	sub    esp,0xc
c001009d:	68 86 e7 01 c0       	push   0xc001e786
c00100a2:	e8 ac 00 00 00       	call   c0010153 <KePanic(char const*)>
c00100a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100b4:	83 c4 10             	add    esp,0x10
c00100b7:	89 d8                	mov    eax,ebx
c00100b9:	5b                   	pop    ebx
c00100ba:	5e                   	pop    esi
c00100bb:	5f                   	pop    edi
c00100bc:	c2 04 00             	ret    0x4

c00100bf <CPU::current()>:
c00100bf:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c00100c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100ca:	c3                   	ret    

c00100cb <operator new(unsigned long)>:
c00100cb:	e9 e9 76 ff ff       	jmp    c00077b9 <malloc>

c00100d0 <operator delete(void*)>:
c00100d0:	e9 14 77 ff ff       	jmp    c00077e9 <rfree>

c00100d5 <disableIRQs()>:
c00100d5:	fa                   	cli    
c00100d6:	c3                   	ret    

c00100d7 <enableIRQs()>:
c00100d7:	fb                   	sti    
c00100d8:	c3                   	ret    

c00100d9 <lockScheduler()>:
c00100d9:	fa                   	cli    
c00100da:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c00100e0:	c3                   	ret    

c00100e1 <unlockScheduler()>:
c00100e1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00100e6:	48                   	dec    eax
c00100e7:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00100ec:	75 01                	jne    c00100ef <unlockScheduler()+0xe>
c00100ee:	fb                   	sti    
c00100ef:	c3                   	ret    

c00100f0 <lockStuff()>:
c00100f0:	fa                   	cli    
c00100f1:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c00100f7:	ff 05 e4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe4
c00100fd:	c3                   	ret    

c00100fe <unlockStuff()>:
c00100fe:	83 ec 0c             	sub    esp,0xc
c0010101:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0010106:	48                   	dec    eax
c0010107:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c001010c:	75 18                	jne    c0010126 <unlockStuff()+0x28>
c001010e:	83 3d e0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fe0,0x0
c0010115:	74 0f                	je     c0010126 <unlockStuff()+0x28>
c0010117:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0010121:	e8 e6 37 00 00       	call   c001390c <schedule()>
c0010126:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001012b:	48                   	dec    eax
c001012c:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0010131:	75 01                	jne    c0010134 <unlockStuff()+0x36>
c0010133:	fb                   	sti    
c0010134:	83 c4 0c             	add    esp,0xc
c0010137:	c3                   	ret    

c0010138 <Virt::getAKernelVAS()>:
c0010138:	a1 30 0e 02 c0       	mov    eax,ds:0xc0020e30
c001013d:	c3                   	ret    

c001013e <__not_memcpy>:
c001013e:	57                   	push   edi
c001013f:	56                   	push   esi
c0010140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010144:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010148:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001014c:	89 c7                	mov    edi,eax
c001014e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010150:	5e                   	pop    esi
c0010151:	5f                   	pop    edi
c0010152:	c3                   	ret    

c0010153 <KePanic(char const*)>:
c0010153:	c6 05 b8 37 02 c0 01 	mov    BYTE PTR ds:0xc00237b8,0x1
c001015a:	e9 a5 55 00 00       	jmp    c0015704 <HalPanic(char const*)>

c001015f <Krnl::powerThread(void*)>:
c001015f:	83 ec 0c             	sub    esp,0xc
c0010162:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0010167:	48                   	dec    eax
c0010168:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001016d:	75 01                	jne    c0010170 <Krnl::powerThread(void*)+0x11>
c001016f:	fb                   	sti    
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	c6 05 c0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237c0,0x0
c001017a:	6a 0a                	push   0xa
c001017c:	e8 9b 3a 00 00       	call   c0013c1c <sleep(unsigned int)>
c0010181:	83 05 04 38 02 c0 0a 	add    DWORD PTR ds:0xc0023804,0xa
c0010188:	83 c4 10             	add    esp,0x10
c001018b:	eb e3                	jmp    c0010170 <Krnl::powerThread(void*)+0x11>

c001018d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001018d:	57                   	push   edi
c001018e:	b9 09 00 00 00       	mov    ecx,0x9
c0010193:	56                   	push   esi
c0010194:	bf e0 37 02 c0       	mov    edi,0xc00237e0
c0010199:	fc                   	cld    
c001019a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001019e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101a0:	5e                   	pop    esi
c00101a1:	5f                   	pop    edi
c00101a2:	c3                   	ret    

c00101a3 <Krnl::userIOReceived()>:
c00101a3:	c7 05 04 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023804,0x0
c00101ad:	c3                   	ret    

c00101ae <Krnl::handlePowerButton()>:
c00101ae:	83 ec 0c             	sub    esp,0xc
c00101b1:	a1 e0 37 02 c0       	mov    eax,ds:0xc00237e0
c00101b6:	83 f8 02             	cmp    eax,0x2
c00101b9:	75 10                	jne    c00101cb <Krnl::handlePowerButton()+0x1d>
c00101bb:	83 ec 0c             	sub    esp,0xc
c00101be:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00101c4:	e8 8d 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101c9:	eb 11                	jmp    c00101dc <Krnl::handlePowerButton()+0x2e>
c00101cb:	48                   	dec    eax
c00101cc:	75 11                	jne    c00101df <Krnl::handlePowerButton()+0x31>
c00101ce:	83 ec 0c             	sub    esp,0xc
c00101d1:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00101d7:	e8 aa 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101dc:	83 c4 10             	add    esp,0x10
c00101df:	83 c4 0c             	add    esp,0xc
c00101e2:	c3                   	ret    

c00101e3 <Krnl::handleSleepButton()>:
c00101e3:	83 ec 0c             	sub    esp,0xc
c00101e6:	a1 e4 37 02 c0       	mov    eax,ds:0xc00237e4
c00101eb:	83 f8 02             	cmp    eax,0x2
c00101ee:	75 10                	jne    c0010200 <Krnl::handleSleepButton()+0x1d>
c00101f0:	83 ec 0c             	sub    esp,0xc
c00101f3:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00101f9:	e8 58 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101fe:	eb 11                	jmp    c0010211 <Krnl::handleSleepButton()+0x2e>
c0010200:	48                   	dec    eax
c0010201:	75 11                	jne    c0010214 <Krnl::handleSleepButton()+0x31>
c0010203:	83 ec 0c             	sub    esp,0xc
c0010206:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c001020c:	e8 75 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010211:	83 c4 10             	add    esp,0x10
c0010214:	83 c4 0c             	add    esp,0xc
c0010217:	c3                   	ret    

c0010218 <Krnl::setupPowerManager()>:
c0010218:	83 ec 0c             	sub    esp,0xc
c001021b:	c7 05 04 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023804,0x0
c0010225:	68 f0 00 00 00       	push   0xf0
c001022a:	c6 05 c0 37 02 c0 00 	mov    BYTE PTR ds:0xc00237c0,0x0
c0010231:	6a 00                	push   0x0
c0010233:	68 5f 01 01 c0       	push   0xc001015f
c0010238:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c001023e:	e8 a9 34 00 00       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c0010243:	c7 05 e0 37 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00237e0,0x2
c001024d:	c7 05 e4 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00237e4,0x1
c0010257:	c7 05 e8 37 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00237e8,0x3
c0010261:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c001026b:	c7 05 f8 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237f8,0x0
c0010275:	c7 05 f0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237f0,0x0
c001027f:	c7 05 fc 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237fc,0x0
c0010289:	c7 05 f4 37 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00237f4,0x3c
c0010293:	c7 05 00 38 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023800,0x3c
c001029d:	83 c4 1c             	add    esp,0x1c
c00102a0:	c3                   	ret    
c00102a1:	66 90                	xchg   ax,ax
c00102a3:	90                   	nop

c00102a4 <KeResolveCompatibilitySymbol(char*)>:
c00102a4:	83 ec 0c             	sub    esp,0xc
c00102a7:	83 ec 08             	sub    esp,0x8
c00102aa:	68 a0 e7 01 c0       	push   0xc001e7a0
c00102af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b3:	e8 28 04 ff ff       	call   c00006e0 <strcmp>
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	85 c0                	test   eax,eax
c00102bd:	0f 94 c0             	sete   al
c00102c0:	84 c0                	test   al,al
c00102c2:	74 0c                	je     c00102d0 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102c4:	b8 38 0d 02 c0       	mov    eax,0xc0020d38
c00102c9:	e9 62 01 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102ce:	66 90                	xchg   ax,ax
c00102d0:	83 ec 08             	sub    esp,0x8
c00102d3:	68 a9 e7 01 c0       	push   0xc001e7a9
c00102d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102dc:	e8 ff 03 ff ff       	call   c00006e0 <strcmp>
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	85 c0                	test   eax,eax
c00102e6:	0f 94 c0             	sete   al
c00102e9:	84 c0                	test   al,al
c00102eb:	74 0b                	je     c00102f8 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102ed:	b8 10 c2 01 c0       	mov    eax,0xc001c210
c00102f2:	e9 39 01 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102f7:	90                   	nop
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	68 b3 e7 01 c0       	push   0xc001e7b3
c0010300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010304:	e8 d7 03 ff ff       	call   c00006e0 <strcmp>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	85 c0                	test   eax,eax
c001030e:	0f 94 c0             	sete   al
c0010311:	84 c0                	test   al,al
c0010313:	74 0b                	je     c0010320 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010315:	b8 44 bf 01 c0       	mov    eax,0xc001bf44
c001031a:	e9 11 01 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001031f:	90                   	nop
c0010320:	83 ec 08             	sub    esp,0x8
c0010323:	68 bc e7 01 c0       	push   0xc001e7bc
c0010328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032c:	e8 af 03 ff ff       	call   c00006e0 <strcmp>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	85 c0                	test   eax,eax
c0010336:	0f 94 c0             	sete   al
c0010339:	84 c0                	test   al,al
c001033b:	74 0b                	je     c0010348 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001033d:	b8 53 01 01 c0       	mov    eax,0xc0010153
c0010342:	e9 e9 00 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010347:	90                   	nop
c0010348:	83 ec 08             	sub    esp,0x8
c001034b:	68 cf e7 01 c0       	push   0xc001e7cf
c0010350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010354:	e8 87 03 ff ff       	call   c00006e0 <strcmp>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	85 c0                	test   eax,eax
c001035e:	0f 94 c0             	sete   al
c0010361:	84 c0                	test   al,al
c0010363:	74 0b                	je     c0010370 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010365:	b8 db fa 00 c0       	mov    eax,0xc000fadb
c001036a:	e9 c1 00 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001036f:	90                   	nop
c0010370:	83 ec 08             	sub    esp,0x8
c0010373:	68 ec e7 01 c0       	push   0xc001e7ec
c0010378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001037c:	e8 5f 03 ff ff       	call   c00006e0 <strcmp>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	85 c0                	test   eax,eax
c0010386:	0f 94 c0             	sete   al
c0010389:	84 c0                	test   al,al
c001038b:	74 0b                	je     c0010398 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001038d:	b8 10 c3 01 c0       	mov    eax,0xc001c310
c0010392:	e9 99 00 00 00       	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010397:	90                   	nop
c0010398:	83 ec 08             	sub    esp,0x8
c001039b:	68 f6 e7 01 c0       	push   0xc001e7f6
c00103a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103a4:	e8 37 03 ff ff       	call   c00006e0 <strcmp>
c00103a9:	83 c4 10             	add    esp,0x10
c00103ac:	85 c0                	test   eax,eax
c00103ae:	0f 94 c0             	sete   al
c00103b1:	84 c0                	test   al,al
c00103b3:	74 07                	je     c00103bc <KeResolveCompatibilitySymbol(char*)+0x118>
c00103b5:	b8 90 c0 01 c0       	mov    eax,0xc001c090
c00103ba:	eb 74                	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103bc:	83 ec 08             	sub    esp,0x8
c00103bf:	68 ff e7 01 c0       	push   0xc001e7ff
c00103c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c8:	e8 13 03 ff ff       	call   c00006e0 <strcmp>
c00103cd:	83 c4 10             	add    esp,0x10
c00103d0:	85 c0                	test   eax,eax
c00103d2:	0f 94 c0             	sete   al
c00103d5:	84 c0                	test   al,al
c00103d7:	74 07                	je     c00103e0 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103d9:	b8 3c 0d 02 c0       	mov    eax,0xc0020d3c
c00103de:	eb 50                	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103e0:	83 ec 08             	sub    esp,0x8
c00103e3:	68 17 e8 01 c0       	push   0xc001e817
c00103e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ec:	e8 ef 02 ff ff       	call   c00006e0 <strcmp>
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	85 c0                	test   eax,eax
c00103f6:	0f 94 c0             	sete   al
c00103f9:	84 c0                	test   al,al
c00103fb:	74 07                	je     c0010404 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103fd:	b8 3c 0d 02 c0       	mov    eax,0xc0020d3c
c0010402:	eb 2c                	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010404:	83 ec 08             	sub    esp,0x8
c0010407:	68 24 e8 01 c0       	push   0xc001e824
c001040c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010410:	e8 cb 02 ff ff       	call   c00006e0 <strcmp>
c0010415:	83 c4 10             	add    esp,0x10
c0010418:	85 c0                	test   eax,eax
c001041a:	0f 94 c0             	sete   al
c001041d:	84 c0                	test   al,al
c001041f:	74 07                	je     c0010428 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010421:	b8 3d 0d 02 c0       	mov    eax,0xc0020d3d
c0010426:	eb 08                	jmp    c0010430 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010428:	b8 00 00 00 00       	mov    eax,0x0
c001042d:	8d 76 00             	lea    esi,[esi+0x0]
c0010430:	83 c4 0c             	add    esp,0xc
c0010433:	c3                   	ret    

c0010434 <KiDefaultSignalHandlerAbort(int)>:
c0010434:	c7 44 24 04 31 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e831
c001043c:	e9 12 fd ff ff       	jmp    c0010153 <KePanic(char const*)>

c0010441 <KiDefaultSignalHandlerTerminate(int)>:
c0010441:	c7 44 24 04 4d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e84d
c0010449:	e9 05 fd ff ff       	jmp    c0010153 <KePanic(char const*)>

c001044e <KiSigKill(int)>:
c001044e:	c7 44 24 04 6d e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e86d
c0010456:	e9 f8 fc ff ff       	jmp    c0010153 <KePanic(char const*)>

c001045b <KiDefaultSignalHandlerIgnore(int)>:
c001045b:	c3                   	ret    

c001045c <KiDefaultSignalHandlerPause(int)>:
c001045c:	c7 44 24 04 77 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e877
c0010464:	e9 ea fc ff ff       	jmp    c0010153 <KePanic(char const*)>

c0010469 <KiDefaultSignalHandlerResume(int)>:
c0010469:	c7 44 24 04 93 e8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e893
c0010471:	e9 dd fc ff ff       	jmp    c0010153 <KePanic(char const*)>

c0010476 <KeInitSignals()>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 14             	sub    esp,0x14
c001047a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001047e:	68 b0 e8 01 c0       	push   0xc001e8b0
c0010483:	e8 60 a0 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010488:	83 c4 0c             	add    esp,0xc
c001048b:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010495:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c001049f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00104a5:	6a 20                	push   0x20
c00104a7:	6a 00                	push   0x0
c00104a9:	50                   	push   eax
c00104aa:	e8 21 00 ff ff       	call   c00004d0 <memset>
c00104af:	83 c4 0c             	add    esp,0xc
c00104b2:	6a 44                	push   0x44
c00104b4:	6a 00                	push   0x0
c00104b6:	53                   	push   ebx
c00104b7:	e8 14 00 ff ff       	call   c00004d0 <memset>
c00104bc:	c7 04 24 c1 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8c1
c00104c3:	e8 20 a0 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00104c8:	89 d8                	mov    eax,ebx
c00104ca:	83 c4 18             	add    esp,0x18
c00104cd:	5b                   	pop    ebx
c00104ce:	c2 04 00             	ret    0x4

c00104d1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00104d1:	57                   	push   edi
c00104d2:	56                   	push   esi
c00104d3:	53                   	push   ebx
c00104d4:	bb 01 00 00 00       	mov    ebx,0x1
c00104d9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00104dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104e1:	83 ec 0c             	sub    esp,0xc
c00104e4:	68 d2 e8 01 c0       	push   0xc001e8d2
c00104e9:	e8 fa 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	83 fe 10             	cmp    esi,0x10
c00104f4:	7f 3a                	jg     c0010530 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x5f>
c00104f6:	83 ec 0c             	sub    esp,0xc
c00104f9:	68 ed e8 01 c0       	push   0xc001e8ed
c00104fe:	e8 e5 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010503:	8d 04 b7             	lea    eax,[edi+esi*4]
c0010506:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001050a:	89 f1                	mov    ecx,esi
c001050c:	89 10                	mov    DWORD PTR [eax],edx
c001050e:	d3 e3                	shl    ebx,cl
c0010510:	0b 5c 24 2c          	or     ebx,DWORD PTR [esp+0x2c]
c0010514:	89 58 44             	mov    DWORD PTR [eax+0x44],ebx
c0010517:	c6 84 37 88 00 00 00 00 	mov    BYTE PTR [edi+esi*1+0x88],0x0
c001051f:	31 db                	xor    ebx,ebx
c0010521:	c7 04 24 08 e9 01 c0 	mov    DWORD PTR [esp],0xc001e908
c0010528:	e8 bb 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	89 d8                	mov    eax,ebx
c0010532:	5b                   	pop    ebx
c0010533:	5e                   	pop    esi
c0010534:	5f                   	pop    edi
c0010535:	c3                   	ret    

c0010536 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010536:	55                   	push   ebp
c0010537:	57                   	push   edi
c0010538:	56                   	push   esi
c0010539:	be 08 00 00 00       	mov    esi,0x8
c001053e:	53                   	push   ebx
c001053f:	83 ec 18             	sub    esp,0x18
c0010542:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010546:	68 23 e9 01 c0       	push   0xc001e923
c001054b:	e8 98 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010550:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010557:	8b bb bc 00 00 00    	mov    edi,DWORD PTR [ebx+0xbc]
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	31 c9                	xor    ecx,ecx
c0010562:	8d 04 0f             	lea    eax,[edi+ecx*1]
c0010565:	99                   	cdq    
c0010566:	f7 fe                	idiv   esi
c0010568:	83 c2 24             	add    edx,0x24
c001056b:	8b 6c 93 0c          	mov    ebp,DWORD PTR [ebx+edx*4+0xc]
c001056f:	85 ed                	test   ebp,ebp
c0010571:	75 1a                	jne    c001058d <KeRaiseSignal(SigHandlerBlock*, int)+0x57>
c0010573:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010577:	83 ec 0c             	sub    esp,0xc
c001057a:	89 44 93 0c          	mov    DWORD PTR [ebx+edx*4+0xc],eax
c001057e:	68 34 e9 01 c0       	push   0xc001e934
c0010583:	e8 60 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010588:	83 c4 10             	add    esp,0x10
c001058b:	eb 1b                	jmp    c00105a8 <KeRaiseSignal(SigHandlerBlock*, int)+0x72>
c001058d:	41                   	inc    ecx
c001058e:	83 f9 08             	cmp    ecx,0x8
c0010591:	75 cf                	jne    c0010562 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010593:	83 ec 0c             	sub    esp,0xc
c0010596:	bd 01 00 00 00       	mov    ebp,0x1
c001059b:	68 45 e9 01 c0       	push   0xc001e945
c00105a0:	e8 43 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105a5:	83 c4 10             	add    esp,0x10
c00105a8:	83 c4 0c             	add    esp,0xc
c00105ab:	89 e8                	mov    eax,ebp
c00105ad:	5b                   	pop    ebx
c00105ae:	5e                   	pop    esi
c00105af:	5f                   	pop    edi
c00105b0:	5d                   	pop    ebp
c00105b1:	c3                   	ret    

c00105b2 <KeCheckSignal(SigHandlerBlock*)>:
c00105b2:	55                   	push   ebp
c00105b3:	57                   	push   edi
c00105b4:	56                   	push   esi
c00105b5:	31 f6                	xor    esi,esi
c00105b7:	53                   	push   ebx
c00105b8:	83 ec 18             	sub    esp,0x18
c00105bb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105bf:	68 56 e9 01 c0       	push   0xc001e956
c00105c4:	e8 1f 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00105d3:	0f 84 55 01 00 00    	je     c001072e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00105d9:	83 ec 0c             	sub    esp,0xc
c00105dc:	bd 08 00 00 00       	mov    ebp,0x8
c00105e1:	68 67 e9 01 c0       	push   0xc001e967
c00105e6:	e8 fd 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	31 c9                	xor    ecx,ecx
c00105f0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00105f6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00105f9:	99                   	cdq    
c00105fa:	f7 fd                	idiv   ebp
c00105fc:	8b bc 93 9c 00 00 00 	mov    edi,DWORD PTR [ebx+edx*4+0x9c]
c0010603:	85 ff                	test   edi,edi
c0010605:	0f 84 00 01 00 00    	je     c001070b <KeCheckSignal(SigHandlerBlock*)+0x159>
c001060b:	83 ec 0c             	sub    esp,0xc
c001060e:	be 01 00 00 00       	mov    esi,0x1
c0010613:	68 78 e9 01 c0       	push   0xc001e978
c0010618:	e8 cb 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001061d:	89 f9                	mov    ecx,edi
c001061f:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010625:	d3 e6                	shl    esi,cl
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	31 c9                	xor    ecx,ecx
c001062c:	ba 01 00 00 00       	mov    edx,0x1
c0010631:	89 d5                	mov    ebp,edx
c0010633:	d3 e5                	shl    ebp,cl
c0010635:	85 c5                	test   ebp,eax
c0010637:	74 13                	je     c001064c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c0010639:	85 74 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],esi
c001063d:	74 0d                	je     c001064c <KeCheckSignal(SigHandlerBlock*)+0x9a>
c001063f:	83 ec 0c             	sub    esp,0xc
c0010642:	68 89 e9 01 c0       	push   0xc001e989
c0010647:	e9 d8 00 00 00       	jmp    c0010724 <KeCheckSignal(SigHandlerBlock*)+0x172>
c001064c:	41                   	inc    ecx
c001064d:	83 f9 11             	cmp    ecx,0x11
c0010650:	75 df                	jne    c0010631 <KeCheckSignal(SigHandlerBlock*)+0x7f>
c0010652:	83 ec 0c             	sub    esp,0xc
c0010655:	68 9a e9 01 c0       	push   0xc001e99a
c001065a:	e8 89 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001065f:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	8d 50 01             	lea    edx,[eax+0x1]
c001066b:	89 93 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],edx
c0010671:	c7 84 83 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+eax*4+0x9c],0x0
c001067c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010683:	09 b3 c0 00 00 00    	or     DWORD PTR [ebx+0xc0],esi
c0010689:	31 c0                	xor    eax,eax
c001068b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010693:	74 09                	je     c001069e <KeCheckSignal(SigHandlerBlock*)+0xec>
c0010695:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001069c:	eb 06                	jmp    c00106a4 <KeCheckSignal(SigHandlerBlock*)+0xf2>
c001069e:	40                   	inc    eax
c001069f:	83 f8 08             	cmp    eax,0x8
c00106a2:	75 e7                	jne    c001068b <KeCheckSignal(SigHandlerBlock*)+0xd9>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	68 ab e9 01 c0       	push   0xc001e9ab
c00106ac:	e8 37 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106b1:	83 c4 10             	add    esp,0x10
c00106b4:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
c00106b7:	83 ff 09             	cmp    edi,0x9
c00106ba:	75 14                	jne    c00106d0 <KeCheckSignal(SigHandlerBlock*)+0x11e>
c00106bc:	83 ec 0c             	sub    esp,0xc
c00106bf:	be 4e 04 01 c0       	mov    esi,0xc001044e
c00106c4:	68 bc e9 01 c0       	push   0xc001e9bc
c00106c9:	e8 1a 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106ce:	eb 36                	jmp    c0010706 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106d0:	83 fe 01             	cmp    esi,0x1
c00106d3:	75 0a                	jne    c00106df <KeCheckSignal(SigHandlerBlock*)+0x12d>
c00106d5:	83 ec 0c             	sub    esp,0xc
c00106d8:	68 cd e9 01 c0       	push   0xc001e9cd
c00106dd:	eb 45                	jmp    c0010724 <KeCheckSignal(SigHandlerBlock*)+0x172>
c00106df:	85 f6                	test   esi,esi
c00106e1:	75 16                	jne    c00106f9 <KeCheckSignal(SigHandlerBlock*)+0x147>
c00106e3:	83 ec 0c             	sub    esp,0xc
c00106e6:	68 de e9 01 c0       	push   0xc001e9de
c00106eb:	e8 f8 9d ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106f0:	8b 34 bd e0 fb 01 c0 	mov    esi,DWORD PTR [edi*4-0x3ffe0420]
c00106f7:	eb 0d                	jmp    c0010706 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106f9:	83 ec 0c             	sub    esp,0xc
c00106fc:	68 ef e9 01 c0       	push   0xc001e9ef
c0010701:	e8 e2 9d ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010706:	83 c4 10             	add    esp,0x10
c0010709:	eb 23                	jmp    c001072e <KeCheckSignal(SigHandlerBlock*)+0x17c>
c001070b:	46                   	inc    esi
c001070c:	41                   	inc    ecx
c001070d:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010713:	83 f9 08             	cmp    ecx,0x8
c0010716:	0f 85 d4 fe ff ff    	jne    c00105f0 <KeCheckSignal(SigHandlerBlock*)+0x3e>
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	68 00 ea 01 c0       	push   0xc001ea00
c0010724:	e8 bf 9d ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010729:	31 f6                	xor    esi,esi
c001072b:	83 c4 10             	add    esp,0x10
c001072e:	83 c4 0c             	add    esp,0xc
c0010731:	89 f0                	mov    eax,esi
c0010733:	5b                   	pop    ebx
c0010734:	5e                   	pop    esi
c0010735:	5f                   	pop    edi
c0010736:	5d                   	pop    ebp
c0010737:	c3                   	ret    

c0010738 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010738:	56                   	push   esi
c0010739:	53                   	push   ebx
c001073a:	bb 01 00 00 00       	mov    ebx,0x1
c001073f:	52                   	push   edx
c0010740:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010744:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010748:	d3 e3                	shl    ebx,cl
c001074a:	83 f9 10             	cmp    ecx,0x10
c001074d:	7f 08                	jg     c0010757 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001074f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010755:	75 10                	jne    c0010767 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010757:	83 ec 0c             	sub    esp,0xc
c001075a:	68 11 ea 01 c0       	push   0xc001ea11
c001075f:	e8 ef f9 ff ff       	call   c0010153 <KePanic(char const*)>
c0010764:	83 c4 10             	add    esp,0x10
c0010767:	f7 d3                	not    ebx
c0010769:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001076f:	58                   	pop    eax
c0010770:	5b                   	pop    ebx
c0010771:	5e                   	pop    esi
c0010772:	c3                   	ret    

c0010773 <SysSeekDir(regs*)>:
c0010773:	31 c0                	xor    eax,eax
c0010775:	31 d2                	xor    edx,edx
c0010777:	c3                   	ret    

c0010778 <SysTellDir(regs*)>:
c0010778:	31 c0                	xor    eax,eax
c001077a:	31 d2                	xor    edx,edx
c001077c:	c3                   	ret    

c001077d <SysVerify(regs*)>:
c001077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010781:	31 d2                	xor    edx,edx
c0010783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010786:	c3                   	ret    

c0010787 <SysGetArgc(regs*)>:
c0010787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001078c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001078f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010795:	99                   	cdq    
c0010796:	c3                   	ret    

c0010797 <SysTTYName(regs*)>:
c0010797:	b8 01 00 00 00       	mov    eax,0x1
c001079c:	31 d2                	xor    edx,edx
c001079e:	c3                   	ret    

c001079f <SysFormatDisk(regs*)>:
c001079f:	56                   	push   esi
c00107a0:	53                   	push   ebx
c00107a1:	50                   	push   eax
c00107a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107a6:	8b 1d 34 0e 02 c0    	mov    ebx,DWORD PTR ds:0xc0020e34
c00107ac:	eb 28                	jmp    c00107d6 <SysFormatDisk(regs*)+0x37>
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107b4:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107b9:	51                   	push   ecx
c00107ba:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107bd:	51                   	push   ecx
c00107be:	50                   	push   eax
c00107bf:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c00107c6:	50                   	push   eax
c00107c7:	53                   	push   ebx
c00107c8:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107cb:	83 c4 20             	add    esp,0x20
c00107ce:	83 f8 08             	cmp    eax,0x8
c00107d1:	75 12                	jne    c00107e5 <SysFormatDisk(regs*)+0x46>
c00107d3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107d6:	85 db                	test   ebx,ebx
c00107d8:	75 d4                	jne    c00107ae <SysFormatDisk(regs*)+0xf>
c00107da:	59                   	pop    ecx
c00107db:	b8 03 00 00 00       	mov    eax,0x3
c00107e0:	31 d2                	xor    edx,edx
c00107e2:	5b                   	pop    ebx
c00107e3:	5e                   	pop    esi
c00107e4:	c3                   	ret    
c00107e5:	85 c0                	test   eax,eax
c00107e7:	74 1b                	je     c0010804 <SysFormatDisk(regs*)+0x65>
c00107e9:	83 f8 09             	cmp    eax,0x9
c00107ec:	74 0b                	je     c00107f9 <SysFormatDisk(regs*)+0x5a>
c00107ee:	59                   	pop    ecx
c00107ef:	b8 02 00 00 00       	mov    eax,0x2
c00107f4:	31 d2                	xor    edx,edx
c00107f6:	5b                   	pop    ebx
c00107f7:	5e                   	pop    esi
c00107f8:	c3                   	ret    
c00107f9:	59                   	pop    ecx
c00107fa:	b8 01 00 00 00       	mov    eax,0x1
c00107ff:	31 d2                	xor    edx,edx
c0010801:	5b                   	pop    ebx
c0010802:	5e                   	pop    esi
c0010803:	c3                   	ret    
c0010804:	59                   	pop    ecx
c0010805:	31 c0                	xor    eax,eax
c0010807:	31 d2                	xor    edx,edx
c0010809:	5b                   	pop    ebx
c001080a:	5e                   	pop    esi
c001080b:	c3                   	ret    

c001080c <SysSetDiskVolumeLabel(regs*)>:
c001080c:	56                   	push   esi
c001080d:	53                   	push   ebx
c001080e:	53                   	push   ebx
c001080f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010813:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010816:	83 f8 19             	cmp    eax,0x19
c0010819:	77 2d                	ja     c0010848 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001081b:	8b 0c 85 a0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd60]
c0010822:	85 c9                	test   ecx,ecx
c0010824:	74 22                	je     c0010848 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010826:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010829:	85 db                	test   ebx,ebx
c001082b:	74 1b                	je     c0010848 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001082d:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010833:	85 d2                	test   edx,edx
c0010835:	74 11                	je     c0010848 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010837:	8b 32                	mov    esi,DWORD PTR [edx]
c0010839:	53                   	push   ebx
c001083a:	50                   	push   eax
c001083b:	51                   	push   ecx
c001083c:	52                   	push   edx
c001083d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	99                   	cdq    
c0010844:	59                   	pop    ecx
c0010845:	5b                   	pop    ebx
c0010846:	5e                   	pop    esi
c0010847:	c3                   	ret    
c0010848:	59                   	pop    ecx
c0010849:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001084e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010853:	5b                   	pop    ebx
c0010854:	5e                   	pop    esi
c0010855:	c3                   	ret    

c0010856 <SysGetDiskVolumeLabel(regs*)>:
c0010856:	57                   	push   edi
c0010857:	56                   	push   esi
c0010858:	53                   	push   ebx
c0010859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010860:	83 fa 19             	cmp    edx,0x19
c0010863:	77 38                	ja     c001089d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010865:	8b 0c 95 a0 32 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcd60]
c001086c:	85 c9                	test   ecx,ecx
c001086e:	74 2d                	je     c001089d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010870:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010873:	85 db                	test   ebx,ebx
c0010875:	74 26                	je     c001089d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010877:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001087a:	85 f6                	test   esi,esi
c001087c:	74 1f                	je     c001089d <SysGetDiskVolumeLabel(regs*)+0x47>
c001087e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010884:	85 c0                	test   eax,eax
c0010886:	74 15                	je     c001089d <SysGetDiskVolumeLabel(regs*)+0x47>
c0010888:	83 ec 0c             	sub    esp,0xc
c001088b:	8b 38                	mov    edi,DWORD PTR [eax]
c001088d:	56                   	push   esi
c001088e:	53                   	push   ebx
c001088f:	52                   	push   edx
c0010890:	51                   	push   ecx
c0010891:	50                   	push   eax
c0010892:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010895:	83 c4 20             	add    esp,0x20
c0010898:	99                   	cdq    
c0010899:	5b                   	pop    ebx
c001089a:	5e                   	pop    esi
c001089b:	5f                   	pop    edi
c001089c:	c3                   	ret    
c001089d:	5b                   	pop    ebx
c001089e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108a8:	5e                   	pop    esi
c00108a9:	5f                   	pop    edi
c00108aa:	c3                   	ret    

c00108ab <SysShutdown(regs*)>:
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108b5:	85 c0                	test   eax,eax
c00108b7:	74 18                	je     c00108d1 <SysShutdown(regs*)+0x26>
c00108b9:	83 f8 01             	cmp    eax,0x1
c00108bc:	74 38                	je     c00108f6 <SysShutdown(regs*)+0x4b>
c00108be:	83 f8 02             	cmp    eax,0x2
c00108c1:	74 24                	je     c00108e7 <SysShutdown(regs*)+0x3c>
c00108c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108cd:	83 c4 0c             	add    esp,0xc
c00108d0:	c3                   	ret    
c00108d1:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c00108d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00108d8:	6a 00                	push   0x0
c00108da:	6a 00                	push   0x0
c00108dc:	6a 00                	push   0x0
c00108de:	50                   	push   eax
c00108df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108e2:	83 c4 10             	add    esp,0x10
c00108e5:	eb dc                	jmp    c00108c3 <SysShutdown(regs*)+0x18>
c00108e7:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c00108ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00108ee:	6a 00                	push   0x0
c00108f0:	6a 00                	push   0x0
c00108f2:	6a 01                	push   0x1
c00108f4:	eb e8                	jmp    c00108de <SysShutdown(regs*)+0x33>
c00108f6:	a1 20 33 02 c0       	mov    eax,ds:0xc0023320
c00108fb:	85 c0                	test   eax,eax
c00108fd:	74 02                	je     c0010901 <SysShutdown(regs*)+0x56>
c00108ff:	ff d0                	call   eax
c0010901:	31 c0                	xor    eax,eax
c0010903:	31 d2                	xor    edx,edx
c0010905:	83 c4 0c             	add    esp,0xc
c0010908:	c3                   	ret    

c0010909 <SysRealpath(regs*)>:
c0010909:	83 ec 0c             	sub    esp,0xc
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010913:	85 d2                	test   edx,edx
c0010915:	74 07                	je     c001091e <SysRealpath(regs*)+0x15>
c0010917:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001091a:	85 c0                	test   eax,eax
c001091c:	75 0b                	jne    c0010929 <SysRealpath(regs*)+0x20>
c001091e:	b8 01 00 00 00       	mov    eax,0x1
c0010923:	31 d2                	xor    edx,edx
c0010925:	83 c4 0c             	add    esp,0xc
c0010928:	c3                   	ret    
c0010929:	51                   	push   ecx
c001092a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010930:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010933:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010939:	51                   	push   ecx
c001093a:	52                   	push   edx
c001093b:	50                   	push   eax
c001093c:	e8 73 9f ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	31 c0                	xor    eax,eax
c0010946:	31 d2                	xor    edx,edx
c0010948:	83 c4 0c             	add    esp,0xc
c001094b:	c3                   	ret    

c001094c <SysReadDir(regs*)>:
c001094c:	53                   	push   ebx
c001094d:	83 ec 18             	sub    esp,0x18
c0010950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010954:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010957:	83 f8 02             	cmp    eax,0x2
c001095a:	76 61                	jbe    c00109bd <SysReadDir(regs*)+0x71>
c001095c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010963:	77 49                	ja     c00109ae <SysReadDir(regs*)+0x62>
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 d1 87 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	85 c0                	test   eax,eax
c0010973:	74 39                	je     c00109ae <SysReadDir(regs*)+0x62>
c0010975:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001097d:	83 ec 0c             	sub    esp,0xc
c0010980:	8b 10                	mov    edx,DWORD PTR [eax]
c0010982:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010986:	51                   	push   ecx
c0010987:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001098a:	51                   	push   ecx
c001098b:	6a 00                	push   0x0
c001098d:	68 10 01 00 00       	push   0x110
c0010992:	50                   	push   eax
c0010993:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010996:	83 c4 20             	add    esp,0x20
c0010999:	85 c0                	test   eax,eax
c001099b:	74 29                	je     c00109c6 <SysReadDir(regs*)+0x7a>
c001099d:	83 f8 07             	cmp    eax,0x7
c00109a0:	74 1b                	je     c00109bd <SysReadDir(regs*)+0x71>
c00109a2:	b8 02 00 00 00       	mov    eax,0x2
c00109a7:	31 d2                	xor    edx,edx
c00109a9:	83 c4 18             	add    esp,0x18
c00109ac:	5b                   	pop    ebx
c00109ad:	c3                   	ret    
c00109ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109b8:	83 c4 18             	add    esp,0x18
c00109bb:	5b                   	pop    ebx
c00109bc:	c3                   	ret    
c00109bd:	b8 01 00 00 00       	mov    eax,0x1
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	eb e3                	jmp    c00109a9 <SysReadDir(regs*)+0x5d>
c00109c6:	31 c0                	xor    eax,eax
c00109c8:	31 d2                	xor    edx,edx
c00109ca:	eb dd                	jmp    c00109a9 <SysReadDir(regs*)+0x5d>

c00109cc <SysIsATTY(regs*)>:
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109d6:	83 f8 02             	cmp    eax,0x2
c00109d9:	76 07                	jbe    c00109e2 <SysIsATTY(regs*)+0x16>
c00109db:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109e0:	75 28                	jne    c0010a0a <SysIsATTY(regs*)+0x3e>
c00109e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109f0:	85 c0                	test   eax,eax
c00109f2:	74 26                	je     c0010a1a <SysIsATTY(regs*)+0x4e>
c00109f4:	83 ec 0c             	sub    esp,0xc
c00109f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f9:	50                   	push   eax
c00109fa:	ff 12                	call   DWORD PTR [edx]
c00109fc:	31 d2                	xor    edx,edx
c00109fe:	25 ff 00 00 00       	and    eax,0xff
c0010a03:	83 c4 10             	add    esp,0x10
c0010a06:	83 c4 0c             	add    esp,0xc
c0010a09:	c3                   	ret    
c0010a0a:	83 ec 0c             	sub    esp,0xc
c0010a0d:	50                   	push   eax
c0010a0e:	e8 2c 87 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a13:	83 c4 10             	add    esp,0x10
c0010a16:	85 c0                	test   eax,eax
c0010a18:	75 da                	jne    c00109f4 <SysIsATTY(regs*)+0x28>
c0010a1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a24:	83 c4 0c             	add    esp,0xc
c0010a27:	c3                   	ret    

c0010a28 <SysSeek(regs*)>:
c0010a28:	53                   	push   ebx
c0010a29:	83 ec 08             	sub    esp,0x8
c0010a2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a33:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a36:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a3c:	77 34                	ja     c0010a72 <SysSeek(regs*)+0x4a>
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	50                   	push   eax
c0010a42:	e8 f8 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a4d:	31 db                	xor    ebx,ebx
c0010a4f:	53                   	push   ebx
c0010a50:	51                   	push   ecx
c0010a51:	50                   	push   eax
c0010a52:	e8 85 a1 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0010a57:	83 c4 10             	add    esp,0x10
c0010a5a:	85 c0                	test   eax,eax
c0010a5c:	0f 95 c0             	setne  al
c0010a5f:	31 d2                	xor    edx,edx
c0010a61:	25 ff 00 00 00       	and    eax,0xff
c0010a66:	f7 d8                	neg    eax
c0010a68:	83 d2 00             	adc    edx,0x0
c0010a6b:	83 c4 08             	add    esp,0x8
c0010a6e:	f7 da                	neg    edx
c0010a70:	5b                   	pop    ebx
c0010a71:	c3                   	ret    
c0010a72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a7c:	83 c4 08             	add    esp,0x8
c0010a7f:	5b                   	pop    ebx
c0010a80:	c3                   	ret    

c0010a81 <SysTell(regs*)>:
c0010a81:	53                   	push   ebx
c0010a82:	83 ec 08             	sub    esp,0x8
c0010a85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a8c:	83 f8 02             	cmp    eax,0x2
c0010a8f:	76 50                	jbe    c0010ae1 <SysTell(regs*)+0x60>
c0010a91:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a96:	76 19                	jbe    c0010ab1 <SysTell(regs*)+0x30>
c0010a98:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a9b:	31 d2                	xor    edx,edx
c0010a9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010aa3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aaa:	31 c0                	xor    eax,eax
c0010aac:	83 c4 08             	add    esp,0x8
c0010aaf:	5b                   	pop    ebx
c0010ab0:	c3                   	ret    
c0010ab1:	83 ec 0c             	sub    esp,0xc
c0010ab4:	50                   	push   eax
c0010ab5:	e8 85 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010aba:	5a                   	pop    edx
c0010abb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010abe:	59                   	pop    ecx
c0010abf:	53                   	push   ebx
c0010ac0:	50                   	push   eax
c0010ac1:	e8 6c a1 ff ff       	call   c000ac32 <File::tell(unsigned long long*)>
c0010ac6:	83 c4 10             	add    esp,0x10
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	0f 95 c0             	setne  al
c0010ace:	31 d2                	xor    edx,edx
c0010ad0:	25 ff 00 00 00       	and    eax,0xff
c0010ad5:	f7 d8                	neg    eax
c0010ad7:	83 d2 00             	adc    edx,0x0
c0010ada:	83 c4 08             	add    esp,0x8
c0010add:	f7 da                	neg    edx
c0010adf:	5b                   	pop    ebx
c0010ae0:	c3                   	ret    
c0010ae1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ae6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010aeb:	83 c4 08             	add    esp,0x8
c0010aee:	5b                   	pop    ebx
c0010aef:	c3                   	ret    

c0010af0 <SysSize(regs*)>:
c0010af0:	53                   	push   ebx
c0010af1:	83 ec 18             	sub    esp,0x18
c0010af4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010af8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010afb:	83 f8 02             	cmp    eax,0x2
c0010afe:	76 56                	jbe    c0010b56 <SysSize(regs*)+0x66>
c0010b00:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b05:	76 19                	jbe    c0010b20 <SysSize(regs*)+0x30>
c0010b07:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b0a:	31 d2                	xor    edx,edx
c0010b0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b19:	31 c0                	xor    eax,eax
c0010b1b:	83 c4 18             	add    esp,0x18
c0010b1e:	5b                   	pop    ebx
c0010b1f:	c3                   	ret    
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	50                   	push   eax
c0010b24:	e8 16 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010b29:	83 c4 0c             	add    esp,0xc
c0010b2c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b30:	52                   	push   edx
c0010b31:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b34:	52                   	push   edx
c0010b35:	50                   	push   eax
c0010b36:	e8 8f a2 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	85 c0                	test   eax,eax
c0010b40:	0f 95 c0             	setne  al
c0010b43:	31 d2                	xor    edx,edx
c0010b45:	25 ff 00 00 00       	and    eax,0xff
c0010b4a:	f7 d8                	neg    eax
c0010b4c:	83 d2 00             	adc    edx,0x0
c0010b4f:	83 c4 18             	add    esp,0x18
c0010b52:	f7 da                	neg    edx
c0010b54:	5b                   	pop    ebx
c0010b55:	c3                   	ret    
c0010b56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b60:	83 c4 18             	add    esp,0x18
c0010b63:	5b                   	pop    ebx
c0010b64:	c3                   	ret    

c0010b65 <SysSizeFromFilename(regs*)>:
c0010b65:	57                   	push   edi
c0010b66:	56                   	push   esi
c0010b67:	53                   	push   ebx
c0010b68:	83 ec 20             	sub    esp,0x20
c0010b6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b6f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b72:	83 fb 02             	cmp    ebx,0x2
c0010b75:	0f 86 8c 00 00 00    	jbe    c0010c07 <SysSizeFromFilename(regs*)+0xa2>
c0010b7b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b81:	76 1b                	jbe    c0010b9e <SysSizeFromFilename(regs*)+0x39>
c0010b83:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b86:	31 d2                	xor    edx,edx
c0010b88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b8e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b95:	83 c4 20             	add    esp,0x20
c0010b98:	31 c0                	xor    eax,eax
c0010b9a:	5b                   	pop    ebx
c0010b9b:	5e                   	pop    esi
c0010b9c:	5f                   	pop    edi
c0010b9d:	c3                   	ret    
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	68 14 01 00 00       	push   0x114
c0010ba6:	e8 0e 6c ff ff       	call   c00077b9 <malloc>
c0010bab:	83 c4 0c             	add    esp,0xc
c0010bae:	89 c7                	mov    edi,eax
c0010bb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb8:	50                   	push   eax
c0010bb9:	53                   	push   ebx
c0010bba:	57                   	push   edi
c0010bbb:	e8 9e 9e ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010bc0:	83 c4 0c             	add    esp,0xc
c0010bc3:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bc7:	50                   	push   eax
c0010bc8:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bcb:	52                   	push   edx
c0010bcc:	57                   	push   edi
c0010bcd:	e8 f8 a1 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	85 ff                	test   edi,edi
c0010bd7:	74 14                	je     c0010bed <SysSizeFromFilename(regs*)+0x88>
c0010bd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bdd:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bdf:	83 ec 0c             	sub    esp,0xc
c0010be2:	57                   	push   edi
c0010be3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bed:	85 c0                	test   eax,eax
c0010bef:	0f 95 c0             	setne  al
c0010bf2:	31 d2                	xor    edx,edx
c0010bf4:	25 ff 00 00 00       	and    eax,0xff
c0010bf9:	f7 d8                	neg    eax
c0010bfb:	83 d2 00             	adc    edx,0x0
c0010bfe:	83 c4 20             	add    esp,0x20
c0010c01:	f7 da                	neg    edx
c0010c03:	5b                   	pop    ebx
c0010c04:	5e                   	pop    esi
c0010c05:	5f                   	pop    edi
c0010c06:	c3                   	ret    
c0010c07:	83 c4 20             	add    esp,0x20
c0010c0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c0f:	5b                   	pop    ebx
c0010c10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c15:	5e                   	pop    esi
c0010c16:	5f                   	pop    edi
c0010c17:	c3                   	ret    

c0010c18 <SysClose(regs*)>:
c0010c18:	53                   	push   ebx
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c23:	83 f8 02             	cmp    eax,0x2
c0010c26:	76 41                	jbe    c0010c69 <SysClose(regs*)+0x51>
c0010c28:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c2e:	83 fa 01             	cmp    edx,0x1
c0010c31:	76 2d                	jbe    c0010c60 <SysClose(regs*)+0x48>
c0010c33:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c38:	77 2f                	ja     c0010c69 <SysClose(regs*)+0x51>
c0010c3a:	83 ec 0c             	sub    esp,0xc
c0010c3d:	50                   	push   eax
c0010c3e:	e8 fc 84 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010c43:	89 c3                	mov    ebx,eax
c0010c45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c48:	e8 2f 9f ff ff       	call   c000ab7c <File::close()>
c0010c4d:	83 c4 10             	add    esp,0x10
c0010c50:	85 db                	test   ebx,ebx
c0010c52:	74 0c                	je     c0010c60 <SysClose(regs*)+0x48>
c0010c54:	83 ec 0c             	sub    esp,0xc
c0010c57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c59:	53                   	push   ebx
c0010c5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c5d:	83 c4 10             	add    esp,0x10
c0010c60:	31 c0                	xor    eax,eax
c0010c62:	31 d2                	xor    edx,edx
c0010c64:	83 c4 08             	add    esp,0x8
c0010c67:	5b                   	pop    ebx
c0010c68:	c3                   	ret    
c0010c69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c73:	83 c4 08             	add    esp,0x8
c0010c76:	5b                   	pop    ebx
c0010c77:	c3                   	ret    

c0010c78 <SysOpenDir(regs*)>:
c0010c78:	57                   	push   edi
c0010c79:	56                   	push   esi
c0010c7a:	53                   	push   ebx
c0010c7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c7f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c82:	85 c0                	test   eax,eax
c0010c84:	0f 84 e7 00 00 00    	je     c0010d71 <SysOpenDir(regs*)+0xf9>
c0010c8a:	83 ec 0c             	sub    esp,0xc
c0010c8d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c90:	56                   	push   esi
c0010c91:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c94:	57                   	push   edi
c0010c95:	50                   	push   eax
c0010c96:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c99:	50                   	push   eax
c0010c9a:	68 24 ea 01 c0       	push   0xc001ea24
c0010c9f:	e8 44 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010ca4:	83 c4 18             	add    esp,0x18
c0010ca7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010caa:	50                   	push   eax
c0010cab:	68 4a ea 01 c0       	push   0xc001ea4a
c0010cb0:	e8 33 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010cb5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cbc:	e8 f8 6a ff ff       	call   c00077b9 <malloc>
c0010cc1:	83 c4 0c             	add    esp,0xc
c0010cc4:	89 c6                	mov    esi,eax
c0010cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ccb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cce:	50                   	push   eax
c0010ccf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd2:	50                   	push   eax
c0010cd3:	56                   	push   esi
c0010cd4:	e8 af a2 ff ff       	call   c000af88 <Directory::Directory(char const*, Process*)>
c0010cd9:	c7 04 24 3e f8 01 c0 	mov    DWORD PTR [esp],0xc001f83e
c0010ce0:	e8 03 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010ce5:	83 c4 10             	add    esp,0x10
c0010ce8:	85 f6                	test   esi,esi
c0010cea:	0f 84 8f 00 00 00    	je     c0010d7f <SysOpenDir(regs*)+0x107>
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	68 5f ea 01 c0       	push   0xc001ea5f
c0010cf8:	e8 eb 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010cfd:	58                   	pop    eax
c0010cfe:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d01:	5a                   	pop    edx
c0010d02:	51                   	push   ecx
c0010d03:	68 63 ea 01 c0       	push   0xc001ea63
c0010d08:	e8 db 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d0d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d10:	e8 33 a3 ff ff       	call   c000b048 <Directory::open()>
c0010d15:	c7 04 24 78 d7 01 c0 	mov    DWORD PTR [esp],0xc001d778
c0010d1c:	89 c7                	mov    edi,eax
c0010d1e:	e8 c5 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d23:	83 c4 10             	add    esp,0x10
c0010d26:	85 ff                	test   edi,edi
c0010d28:	75 37                	jne    c0010d61 <SysOpenDir(regs*)+0xe9>
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	68 74 ea 01 c0       	push   0xc001ea74
c0010d32:	e8 b1 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d37:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d3a:	e8 0b 81 ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c0010d3f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d42:	89 02                	mov    DWORD PTR [edx],eax
c0010d44:	c1 f8 1f             	sar    eax,0x1f
c0010d47:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d4a:	c7 04 24 78 ea 01 c0 	mov    DWORD PTR [esp],0xc001ea78
c0010d51:	e8 92 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	31 c0                	xor    eax,eax
c0010d5b:	5b                   	pop    ebx
c0010d5c:	31 d2                	xor    edx,edx
c0010d5e:	5e                   	pop    esi
c0010d5f:	5f                   	pop    edi
c0010d60:	c3                   	ret    
c0010d61:	83 ec 0c             	sub    esp,0xc
c0010d64:	68 70 ea 01 c0       	push   0xc001ea70
c0010d69:	e8 7a 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d6e:	83 c4 10             	add    esp,0x10
c0010d71:	5b                   	pop    ebx
c0010d72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d7c:	5e                   	pop    esi
c0010d7d:	5f                   	pop    edi
c0010d7e:	c3                   	ret    
c0010d7f:	83 ec 0c             	sub    esp,0xc
c0010d82:	68 5b ea 01 c0       	push   0xc001ea5b
c0010d87:	eb e0                	jmp    c0010d69 <SysOpenDir(regs*)+0xf1>

c0010d89 <SysCloseDir(regs*)>:
c0010d89:	53                   	push   ebx
c0010d8a:	83 ec 08             	sub    esp,0x8
c0010d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d94:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d97:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d9d:	77 2f                	ja     c0010dce <SysCloseDir(regs*)+0x45>
c0010d9f:	83 ec 0c             	sub    esp,0xc
c0010da2:	50                   	push   eax
c0010da3:	e8 97 83 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010da8:	89 c3                	mov    ebx,eax
c0010daa:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dad:	e8 f2 a2 ff ff       	call   c000b0a4 <Directory::close()>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	85 db                	test   ebx,ebx
c0010db7:	74 0c                	je     c0010dc5 <SysCloseDir(regs*)+0x3c>
c0010db9:	83 ec 0c             	sub    esp,0xc
c0010dbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dbe:	53                   	push   ebx
c0010dbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dc2:	83 c4 10             	add    esp,0x10
c0010dc5:	31 c0                	xor    eax,eax
c0010dc7:	31 d2                	xor    edx,edx
c0010dc9:	83 c4 08             	add    esp,0x8
c0010dcc:	5b                   	pop    ebx
c0010dcd:	c3                   	ret    
c0010dce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dd8:	83 c4 08             	add    esp,0x8
c0010ddb:	5b                   	pop    ebx
c0010ddc:	c3                   	ret    

c0010ddd <SysMakeDir(regs*)>:
c0010ddd:	56                   	push   esi
c0010dde:	53                   	push   ebx
c0010ddf:	83 ec 10             	sub    esp,0x10
c0010de2:	68 14 01 00 00       	push   0x114
c0010de7:	e8 cd 69 ff ff       	call   c00077b9 <malloc>
c0010dec:	83 c4 0c             	add    esp,0xc
c0010def:	89 c3                	mov    ebx,eax
c0010df1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df6:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010df9:	56                   	push   esi
c0010dfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dfe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e01:	50                   	push   eax
c0010e02:	53                   	push   ebx
c0010e03:	e8 80 a1 ff ff       	call   c000af88 <Directory::Directory(char const*, Process*)>
c0010e08:	83 c4 10             	add    esp,0x10
c0010e0b:	85 db                	test   ebx,ebx
c0010e0d:	74 32                	je     c0010e41 <SysMakeDir(regs*)+0x64>
c0010e0f:	83 ec 0c             	sub    esp,0xc
c0010e12:	53                   	push   ebx
c0010e13:	e8 10 a4 ff ff       	call   c000b228 <Directory::create()>
c0010e18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e1b:	89 c6                	mov    esi,eax
c0010e1d:	e8 82 a2 ff ff       	call   c000b0a4 <Directory::close()>
c0010e22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e2a:	83 c4 10             	add    esp,0x10
c0010e2d:	31 c0                	xor    eax,eax
c0010e2f:	59                   	pop    ecx
c0010e30:	85 f6                	test   esi,esi
c0010e32:	5b                   	pop    ebx
c0010e33:	0f 95 c0             	setne  al
c0010e36:	5e                   	pop    esi
c0010e37:	31 d2                	xor    edx,edx
c0010e39:	f7 d8                	neg    eax
c0010e3b:	83 d2 00             	adc    edx,0x0
c0010e3e:	f7 da                	neg    edx
c0010e40:	c3                   	ret    
c0010e41:	59                   	pop    ecx
c0010e42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e4c:	5b                   	pop    ebx
c0010e4d:	5e                   	pop    esi
c0010e4e:	c3                   	ret    

c0010e4f <SysWait(regs*)>:
c0010e4f:	83 ec 10             	sub    esp,0x10
c0010e52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e56:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e59:	52                   	push   edx
c0010e5a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e5d:	51                   	push   ecx
c0010e5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e61:	50                   	push   eax
c0010e62:	e8 d1 2c 00 00       	call   c0013b38 <waitTask(int, int*, int)>
c0010e67:	83 c4 1c             	add    esp,0x1c
c0010e6a:	99                   	cdq    
c0010e6b:	c3                   	ret    

c0010e6c <SysNotImpl(regs*)>:
c0010e6c:	83 ec 18             	sub    esp,0x18
c0010e6f:	68 7c ea 01 c0       	push   0xc001ea7c
c0010e74:	e8 da f2 ff ff       	call   c0010153 <KePanic(char const*)>
c0010e79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e83:	83 c4 1c             	add    esp,0x1c
c0010e86:	c3                   	ret    

c0010e87 <SysPanic(regs*)>:
c0010e87:	83 ec 18             	sub    esp,0x18
c0010e8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e91:	50                   	push   eax
c0010e92:	e8 bc f2 ff ff       	call   c0010153 <KePanic(char const*)>
c0010e97:	b8 01 00 00 00       	mov    eax,0x1
c0010e9c:	31 d2                	xor    edx,edx
c0010e9e:	83 c4 1c             	add    esp,0x1c
c0010ea1:	c3                   	ret    

c0010ea2 <SysRmdir(regs*)>:
c0010ea2:	56                   	push   esi
c0010ea3:	53                   	push   ebx
c0010ea4:	83 ec 20             	sub    esp,0x20
c0010ea7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010eab:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010eae:	68 14 01 00 00       	push   0x114
c0010eb3:	e8 01 69 ff ff       	call   c00077b9 <malloc>
c0010eb8:	83 c4 0c             	add    esp,0xc
c0010ebb:	89 c3                	mov    ebx,eax
c0010ebd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ec2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ec5:	50                   	push   eax
c0010ec6:	56                   	push   esi
c0010ec7:	53                   	push   ebx
c0010ec8:	e8 91 9b ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010ecd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ed0:	e8 c1 9d ff ff       	call   c000ac96 <File::unlink()>
c0010ed5:	83 c4 10             	add    esp,0x10
c0010ed8:	85 db                	test   ebx,ebx
c0010eda:	74 14                	je     c0010ef0 <SysRmdir(regs*)+0x4e>
c0010edc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ee0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ee2:	83 ec 0c             	sub    esp,0xc
c0010ee5:	53                   	push   ebx
c0010ee6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ef0:	85 c0                	test   eax,eax
c0010ef2:	0f 95 c0             	setne  al
c0010ef5:	31 d2                	xor    edx,edx
c0010ef7:	25 ff 00 00 00       	and    eax,0xff
c0010efc:	f7 d8                	neg    eax
c0010efe:	83 d2 00             	adc    edx,0x0
c0010f01:	83 c4 14             	add    esp,0x14
c0010f04:	f7 da                	neg    edx
c0010f06:	5b                   	pop    ebx
c0010f07:	5e                   	pop    esi
c0010f08:	c3                   	ret    

c0010f09 <SysUnlink(regs*)>:
c0010f09:	56                   	push   esi
c0010f0a:	53                   	push   ebx
c0010f0b:	83 ec 20             	sub    esp,0x20
c0010f0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f15:	68 14 01 00 00       	push   0x114
c0010f1a:	e8 9a 68 ff ff       	call   c00077b9 <malloc>
c0010f1f:	83 c4 0c             	add    esp,0xc
c0010f22:	89 c3                	mov    ebx,eax
c0010f24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f2c:	50                   	push   eax
c0010f2d:	56                   	push   esi
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 2a 9b ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010f34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f37:	e8 5a 9d ff ff       	call   c000ac96 <File::unlink()>
c0010f3c:	83 c4 10             	add    esp,0x10
c0010f3f:	85 db                	test   ebx,ebx
c0010f41:	74 14                	je     c0010f57 <SysUnlink(regs*)+0x4e>
c0010f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	53                   	push   ebx
c0010f4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f50:	83 c4 10             	add    esp,0x10
c0010f53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f57:	85 c0                	test   eax,eax
c0010f59:	0f 95 c0             	setne  al
c0010f5c:	31 d2                	xor    edx,edx
c0010f5e:	25 ff 00 00 00       	and    eax,0xff
c0010f63:	f7 d8                	neg    eax
c0010f65:	83 d2 00             	adc    edx,0x0
c0010f68:	83 c4 14             	add    esp,0x14
c0010f6b:	f7 da                	neg    edx
c0010f6d:	5b                   	pop    ebx
c0010f6e:	5e                   	pop    esi
c0010f6f:	c3                   	ret    

c0010f70 <SysGetArgv(regs*)>:
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f77:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f7a:	85 c0                	test   eax,eax
c0010f7c:	78 2c                	js     c0010faa <SysGetArgv(regs*)+0x3a>
c0010f7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f84:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f87:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f8d:	7d 1b                	jge    c0010faa <SysGetArgv(regs*)+0x3a>
c0010f8f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f96:	85 c0                	test   eax,eax
c0010f98:	74 18                	je     c0010fb2 <SysGetArgv(regs*)+0x42>
c0010f9a:	83 ec 08             	sub    esp,0x8
c0010f9d:	50                   	push   eax
c0010f9e:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fa1:	50                   	push   eax
c0010fa2:	e8 59 f6 fe ff       	call   c0000600 <strcpy>
c0010fa7:	83 c4 10             	add    esp,0x10
c0010faa:	31 c0                	xor    eax,eax
c0010fac:	31 d2                	xor    edx,edx
c0010fae:	83 c4 0c             	add    esp,0xc
c0010fb1:	c3                   	ret    
c0010fb2:	b8 01 00 00 00       	mov    eax,0x1
c0010fb7:	31 d2                	xor    edx,edx
c0010fb9:	83 c4 0c             	add    esp,0xc
c0010fbc:	c3                   	ret    

c0010fbd <SysUSleep(regs*)>:
c0010fbd:	83 ec 1c             	sub    esp,0x1c
c0010fc0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fc4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fc7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fca:	6a 00                	push   0x0
c0010fcc:	6a 64                	push   0x64
c0010fce:	52                   	push   edx
c0010fcf:	50                   	push   eax
c0010fd0:	e8 3b b2 00 00       	call   c001c210 <__udivdi3>
c0010fd5:	83 c4 14             	add    esp,0x14
c0010fd8:	50                   	push   eax
c0010fd9:	e8 2e 2c 00 00       	call   c0013c0c <milliTenthSleep(unsigned int)>
c0010fde:	31 c0                	xor    eax,eax
c0010fe0:	31 d2                	xor    edx,edx
c0010fe2:	83 c4 1c             	add    esp,0x1c
c0010fe5:	c3                   	ret    

c0010fe6 <SysSpawn(regs*)>:
c0010fe6:	56                   	push   esi
c0010fe7:	53                   	push   ebx
c0010fe8:	50                   	push   eax
c0010fe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ff0:	85 c0                	test   eax,eax
c0010ff2:	75 08                	jne    c0010ffc <SysSpawn(regs*)+0x16>
c0010ff4:	59                   	pop    ecx
c0010ff5:	31 c0                	xor    eax,eax
c0010ff7:	31 d2                	xor    edx,edx
c0010ff9:	5b                   	pop    ebx
c0010ffa:	5e                   	pop    esi
c0010ffb:	c3                   	ret    
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	68 e8 07 00 00       	push   0x7e8
c0011004:	e8 b0 67 ff ff       	call   c00077b9 <malloc>
c0011009:	83 c4 10             	add    esp,0x10
c001100c:	89 c6                	mov    esi,eax
c001100e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011011:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011014:	85 c0                	test   eax,eax
c0011016:	75 33                	jne    c001104b <SysSpawn(regs*)+0x65>
c0011018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001101d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011020:	52                   	push   edx
c0011021:	50                   	push   eax
c0011022:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011025:	53                   	push   ebx
c0011026:	56                   	push   esi
c0011027:	e8 44 21 00 00       	call   c0013170 <Process::Process(char const*, Process*, char**)>
c001102c:	83 c4 10             	add    esp,0x10
c001102f:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011036:	75 bc                	jne    c0010ff4 <SysSpawn(regs*)+0xe>
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	56                   	push   esi
c001103c:	e8 a3 27 00 00       	call   c00137e4 <Process::createUserThread()>
c0011041:	8b 06                	mov    eax,DWORD PTR [esi]
c0011043:	83 c4 10             	add    esp,0x10
c0011046:	99                   	cdq    
c0011047:	59                   	pop    ecx
c0011048:	5b                   	pop    ebx
c0011049:	5e                   	pop    esi
c001104a:	c3                   	ret    
c001104b:	31 c0                	xor    eax,eax
c001104d:	eb d1                	jmp    c0011020 <SysSpawn(regs*)+0x3a>

c001104f <SysGetEnv(regs*)>:
c001104f:	57                   	push   edi
c0011050:	56                   	push   esi
c0011051:	53                   	push   ebx
c0011052:	83 ec 1c             	sub    esp,0x1c
c0011055:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001105e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011061:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011064:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011067:	50                   	push   eax
c0011068:	e8 9e ef ff ff       	call   c001000b <Krnl::getProcessTotalEnvCount(Process*)>
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	39 c7                	cmp    edi,eax
c0011072:	7c 14                	jl     c0011088 <SysGetEnv(regs*)+0x39>
c0011074:	85 f6                	test   esi,esi
c0011076:	75 0b                	jne    c0011083 <SysGetEnv(regs*)+0x34>
c0011078:	83 c4 10             	add    esp,0x10
c001107b:	31 c0                	xor    eax,eax
c001107d:	5b                   	pop    ebx
c001107e:	31 d2                	xor    edx,edx
c0011080:	5e                   	pop    esi
c0011081:	5f                   	pop    edi
c0011082:	c3                   	ret    
c0011083:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011086:	eb f0                	jmp    c0011078 <SysGetEnv(regs*)+0x29>
c0011088:	8d 44 24 08          	lea    eax,[esp+0x8]
c001108c:	52                   	push   edx
c001108d:	57                   	push   edi
c001108e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011094:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011097:	51                   	push   ecx
c0011098:	50                   	push   eax
c0011099:	e8 8d ef ff ff       	call   c001002b <Krnl::getProcessEnvPair(Process*, int)>
c001109e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110a9:	83 c4 0c             	add    esp,0xc
c00110ac:	85 db                	test   ebx,ebx
c00110ae:	75 23                	jne    c00110d3 <SysGetEnv(regs*)+0x84>
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	50                   	push   eax
c00110b4:	e8 87 f4 fe ff       	call   c0000540 <strlen>
c00110b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110bc:	89 c3                	mov    ebx,eax
c00110be:	e8 7d f4 fe ff       	call   c0000540 <strlen>
c00110c3:	31 d2                	xor    edx,edx
c00110c5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	83 c4 10             	add    esp,0x10
c00110cf:	5b                   	pop    ebx
c00110d0:	5e                   	pop    esi
c00110d1:	5f                   	pop    edi
c00110d2:	c3                   	ret    
c00110d3:	83 ec 08             	sub    esp,0x8
c00110d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110d9:	50                   	push   eax
c00110da:	56                   	push   esi
c00110db:	e8 20 f5 fe ff       	call   c0000600 <strcpy>
c00110e0:	58                   	pop    eax
c00110e1:	5a                   	pop    edx
c00110e2:	68 96 ea 01 c0       	push   0xc001ea96
c00110e7:	56                   	push   esi
c00110e8:	e8 d3 f6 fe ff       	call   c00007c0 <strcat>
c00110ed:	59                   	pop    ecx
c00110ee:	5b                   	pop    ebx
c00110ef:	57                   	push   edi
c00110f0:	56                   	push   esi
c00110f1:	e8 ca f6 fe ff       	call   c00007c0 <strcat>
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	e9 7a ff ff ff       	jmp    c0011078 <SysGetEnv(regs*)+0x29>

c00110fe <SysSetFatAttrib(regs*)>:
c00110fe:	57                   	push   edi
c00110ff:	56                   	push   esi
c0011100:	53                   	push   ebx
c0011101:	83 ec 1c             	sub    esp,0x1c
c0011104:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011108:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001110b:	68 14 01 00 00       	push   0x114
c0011110:	e8 a4 66 ff ff       	call   c00077b9 <malloc>
c0011115:	83 c4 0c             	add    esp,0xc
c0011118:	89 c3                	mov    ebx,eax
c001111a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001111f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011122:	50                   	push   eax
c0011123:	57                   	push   edi
c0011124:	53                   	push   ebx
c0011125:	e8 34 99 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c001112a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001112d:	83 c4 0c             	add    esp,0xc
c0011130:	0f b6 d4             	movzx  edx,ah
c0011133:	25 ff 00 00 00       	and    eax,0xff
c0011138:	52                   	push   edx
c0011139:	50                   	push   eax
c001113a:	53                   	push   ebx
c001113b:	e8 f0 9b ff ff       	call   c000ad30 <File::chfatattr(unsigned char, unsigned char)>
c0011140:	83 c4 10             	add    esp,0x10
c0011143:	85 db                	test   ebx,ebx
c0011145:	74 14                	je     c001115b <SysSetFatAttrib(regs*)+0x5d>
c0011147:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001114b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001114d:	83 ec 0c             	sub    esp,0xc
c0011150:	53                   	push   ebx
c0011151:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011154:	83 c4 10             	add    esp,0x10
c0011157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001115b:	85 c0                	test   eax,eax
c001115d:	0f 95 c0             	setne  al
c0011160:	31 d2                	xor    edx,edx
c0011162:	25 ff 00 00 00       	and    eax,0xff
c0011167:	f7 d8                	neg    eax
c0011169:	83 d2 00             	adc    edx,0x0
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	f7 da                	neg    edx
c0011171:	5b                   	pop    ebx
c0011172:	5e                   	pop    esi
c0011173:	5f                   	pop    edi
c0011174:	c3                   	ret    

c0011175 <SysPipe(regs*)>:
c0011175:	57                   	push   edi
c0011176:	56                   	push   esi
c0011177:	53                   	push   ebx
c0011178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001117c:	83 ec 0c             	sub    esp,0xc
c001117f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011182:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011185:	6a 20                	push   0x20
c0011187:	e8 2d 66 ff ff       	call   c00077b9 <malloc>
c001118c:	89 c3                	mov    ebx,eax
c001118e:	58                   	pop    eax
c001118f:	5a                   	pop    edx
c0011190:	68 00 50 00 00       	push   0x5000
c0011195:	53                   	push   ebx
c0011196:	e8 33 6f ff ff       	call   c00080ce <Pipe::Pipe(int)>
c001119b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001119e:	e8 a7 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111a3:	89 07                	mov    DWORD PTR [edi],eax
c00111a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a8:	e8 9d 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111ad:	83 c4 10             	add    esp,0x10
c00111b0:	89 06                	mov    DWORD PTR [esi],eax
c00111b2:	31 d2                	xor    edx,edx
c00111b4:	5b                   	pop    ebx
c00111b5:	31 c0                	xor    eax,eax
c00111b7:	5e                   	pop    esi
c00111b8:	5f                   	pop    edi
c00111b9:	c3                   	ret    

c00111ba <SysGetUnixTime(regs*)>:
c00111ba:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c00111bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111c9:	e9 a0 a2 ff ff       	jmp    c000b46e <Clock::timeInSecondsLocal()>

c00111ce <string_ends_with(char const*, char const*)>:
c00111ce:	57                   	push   edi
c00111cf:	56                   	push   esi
c00111d0:	53                   	push   ebx
c00111d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111d9:	83 ec 0c             	sub    esp,0xc
c00111dc:	53                   	push   ebx
c00111dd:	e8 5e f3 fe ff       	call   c0000540 <strlen>
c00111e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111e5:	89 c6                	mov    esi,eax
c00111e7:	e8 54 f3 fe ff       	call   c0000540 <strlen>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	39 c6                	cmp    esi,eax
c00111f1:	7d 06                	jge    c00111f9 <string_ends_with(char const*, char const*)+0x2b>
c00111f3:	5b                   	pop    ebx
c00111f4:	31 c0                	xor    eax,eax
c00111f6:	5e                   	pop    esi
c00111f7:	5f                   	pop    edi
c00111f8:	c3                   	ret    
c00111f9:	83 ec 08             	sub    esp,0x8
c00111fc:	29 c6                	sub    esi,eax
c00111fe:	57                   	push   edi
c00111ff:	01 f3                	add    ebx,esi
c0011201:	53                   	push   ebx
c0011202:	e8 d9 f4 fe ff       	call   c00006e0 <strcmp>
c0011207:	83 c4 10             	add    esp,0x10
c001120a:	85 c0                	test   eax,eax
c001120c:	5b                   	pop    ebx
c001120d:	0f 94 c0             	sete   al
c0011210:	5e                   	pop    esi
c0011211:	25 ff 00 00 00       	and    eax,0xff
c0011216:	5f                   	pop    edi
c0011217:	c3                   	ret    

c0011218 <SysOpen(regs*)>:
c0011218:	56                   	push   esi
c0011219:	53                   	push   ebx
c001121a:	81 ec 04 01 00 00    	sub    esp,0x104
c0011220:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011227:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001122a:	85 d2                	test   edx,edx
c001122c:	0f 84 cc 01 00 00    	je     c00113fe <SysOpen(regs*)+0x1e6>
c0011232:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011235:	85 c0                	test   eax,eax
c0011237:	0f 84 c1 01 00 00    	je     c00113fe <SysOpen(regs*)+0x1e6>
c001123d:	83 ec 08             	sub    esp,0x8
c0011240:	50                   	push   eax
c0011241:	68 98 ea 01 c0       	push   0xc001ea98
c0011246:	e8 9d 92 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001124b:	83 c4 0c             	add    esp,0xc
c001124e:	68 a5 ea 01 c0       	push   0xc001eaa5
c0011253:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011256:	50                   	push   eax
c0011257:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001125b:	56                   	push   esi
c001125c:	e8 53 96 ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011261:	89 34 24             	mov    DWORD PTR [esp],esi
c0011264:	e8 d7 f2 fe ff       	call   c0000540 <strlen>
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	48                   	dec    eax
c001126d:	74 1d                	je     c001128c <SysOpen(regs*)+0x74>
c001126f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011272:	eb 0f                	jmp    c0011283 <SysOpen(regs*)+0x6b>
c0011274:	80 fa 3a             	cmp    dl,0x3a
c0011277:	74 0f                	je     c0011288 <SysOpen(regs*)+0x70>
c0011279:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001127d:	48                   	dec    eax
c001127e:	74 0c                	je     c001128c <SysOpen(regs*)+0x74>
c0011280:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011283:	80 fa 2e             	cmp    dl,0x2e
c0011286:	75 ec                	jne    c0011274 <SysOpen(regs*)+0x5c>
c0011288:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	68 a9 ea 01 c0       	push   0xc001eaa9
c0011294:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011297:	50                   	push   eax
c0011298:	e8 31 ff ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	85 c0                	test   eax,eax
c00112a2:	74 1d                	je     c00112c1 <SysOpen(regs*)+0xa9>
c00112a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112b4:	81 c4 04 01 00 00    	add    esp,0x104
c00112ba:	31 c0                	xor    eax,eax
c00112bc:	31 d2                	xor    edx,edx
c00112be:	5b                   	pop    ebx
c00112bf:	5e                   	pop    esi
c00112c0:	c3                   	ret    
c00112c1:	83 ec 08             	sub    esp,0x8
c00112c4:	68 ae ea 01 c0       	push   0xc001eaae
c00112c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112cc:	50                   	push   eax
c00112cd:	e8 fc fe ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	85 c0                	test   eax,eax
c00112d7:	75 cb                	jne    c00112a4 <SysOpen(regs*)+0x8c>
c00112d9:	83 ec 08             	sub    esp,0x8
c00112dc:	68 aa ea 01 c0       	push   0xc001eaaa
c00112e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e4:	50                   	push   eax
c00112e5:	e8 f6 f3 fe ff       	call   c00006e0 <strcmp>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	85 c0                	test   eax,eax
c00112ef:	74 b3                	je     c00112a4 <SysOpen(regs*)+0x8c>
c00112f1:	83 ec 08             	sub    esp,0x8
c00112f4:	68 a9 ea 01 c0       	push   0xc001eaa9
c00112f9:	56                   	push   esi
c00112fa:	e8 cf fe ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	85 c0                	test   eax,eax
c0011304:	75 9e                	jne    c00112a4 <SysOpen(regs*)+0x8c>
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	68 b3 ea 01 c0       	push   0xc001eab3
c001130e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011311:	50                   	push   eax
c0011312:	e8 b7 fe ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	85 c0                	test   eax,eax
c001131c:	0f 85 ef 00 00 00    	jne    c0011411 <SysOpen(regs*)+0x1f9>
c0011322:	83 ec 08             	sub    esp,0x8
c0011325:	68 b8 ea 01 c0       	push   0xc001eab8
c001132a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001132d:	50                   	push   eax
c001132e:	e8 9b fe ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	85 c0                	test   eax,eax
c0011338:	0f 85 d3 00 00 00    	jne    c0011411 <SysOpen(regs*)+0x1f9>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	68 b4 ea 01 c0       	push   0xc001eab4
c0011346:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011349:	51                   	push   ecx
c001134a:	e8 91 f3 fe ff       	call   c00006e0 <strcmp>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	85 c0                	test   eax,eax
c0011354:	0f 84 b7 00 00 00    	je     c0011411 <SysOpen(regs*)+0x1f9>
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 b3 ea 01 c0       	push   0xc001eab3
c0011362:	56                   	push   esi
c0011363:	e8 66 fe ff ff       	call   c00111ce <string_ends_with(char const*, char const*)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	85 c0                	test   eax,eax
c001136d:	0f 85 9e 00 00 00    	jne    c0011411 <SysOpen(regs*)+0x1f9>
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	68 14 01 00 00       	push   0x114
c001137b:	e8 39 64 ff ff       	call   c00077b9 <malloc>
c0011380:	83 c4 0c             	add    esp,0xc
c0011383:	89 c6                	mov    esi,eax
c0011385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001138a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001138d:	50                   	push   eax
c001138e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011391:	52                   	push   edx
c0011392:	56                   	push   esi
c0011393:	e8 c6 96 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	85 f6                	test   esi,esi
c001139d:	74 5f                	je     c00113fe <SysOpen(regs*)+0x1e6>
c001139f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113a2:	89 d0                	mov    eax,edx
c00113a4:	25 ff 00 00 00       	and    eax,0xff
c00113a9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113ac:	89 d0                	mov    eax,edx
c00113ae:	83 e0 01             	and    eax,0x1
c00113b1:	f6 c2 02             	test   dl,0x2
c00113b4:	74 03                	je     c00113b9 <SysOpen(regs*)+0x1a1>
c00113b6:	83 c8 02             	or     eax,0x2
c00113b9:	f6 c2 04             	test   dl,0x4
c00113bc:	74 03                	je     c00113c1 <SysOpen(regs*)+0x1a9>
c00113be:	83 c8 04             	or     eax,0x4
c00113c1:	f6 c2 08             	test   dl,0x8
c00113c4:	74 03                	je     c00113c9 <SysOpen(regs*)+0x1b1>
c00113c6:	83 c8 0a             	or     eax,0xa
c00113c9:	83 e2 10             	and    edx,0x10
c00113cc:	74 03                	je     c00113d1 <SysOpen(regs*)+0x1b9>
c00113ce:	83 c8 12             	or     eax,0x12
c00113d1:	83 ec 08             	sub    esp,0x8
c00113d4:	50                   	push   eax
c00113d5:	56                   	push   esi
c00113d6:	e8 43 97 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	85 c0                	test   eax,eax
c00113e0:	75 1c                	jne    c00113fe <SysOpen(regs*)+0x1e6>
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	56                   	push   esi
c00113e6:	e8 5f 7a ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00113eb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	89 02                	mov    DWORD PTR [edx],eax
c00113f3:	c1 f8 1f             	sar    eax,0x1f
c00113f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113f9:	e9 b6 fe ff ff       	jmp    c00112b4 <SysOpen(regs*)+0x9c>
c00113fe:	81 c4 04 01 00 00    	add    esp,0x104
c0011404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011409:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140e:	5b                   	pop    ebx
c001140f:	5e                   	pop    esi
c0011410:	c3                   	ret    
c0011411:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011414:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001141a:	e9 8e fe ff ff       	jmp    c00112ad <SysOpen(regs*)+0x95>

c001141f <KeSystemCall(regs*, void*)>:
c001141f:	53                   	push   ebx
c0011420:	83 ec 10             	sub    esp,0x10
c0011423:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011427:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001142a:	68 bd ea 01 c0       	push   0xc001eabd
c001142f:	e8 b4 90 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011434:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011437:	83 c4 10             	add    esp,0x10
c001143a:	83 f8 32             	cmp    eax,0x32
c001143d:	77 16                	ja     c0011455 <KeSystemCall(regs*, void*)+0x36>
c001143f:	8b 14 85 40 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03c0]
c0011446:	85 d2                	test   edx,edx
c0011448:	74 0b                	je     c0011455 <KeSystemCall(regs*, void*)+0x36>
c001144a:	83 ec 0c             	sub    esp,0xc
c001144d:	53                   	push   ebx
c001144e:	ff d2                	call   edx
c0011450:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011453:	eb 0d                	jmp    c0011462 <KeSystemCall(regs*, void*)+0x43>
c0011455:	52                   	push   edx
c0011456:	52                   	push   edx
c0011457:	50                   	push   eax
c0011458:	68 cd ea 01 c0       	push   0xc001eacd
c001145d:	e8 86 90 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001146a:	31 d2                	xor    edx,edx
c001146c:	83 c4 08             	add    esp,0x8
c001146f:	5b                   	pop    ebx
c0011470:	c3                   	ret    

c0011471 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011471:	55                   	push   ebp
c0011472:	57                   	push   edi
c0011473:	56                   	push   esi
c0011474:	53                   	push   ebx
c0011475:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001147b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011482:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011484:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011487:	80 fb 40             	cmp    bl,0x40
c001148a:	75 1b                	jne    c00114a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001148c:	8a 16                	mov    dl,BYTE PTR [esi]
c001148e:	84 d2                	test   dl,dl
c0011490:	0f 84 f1 00 00 00    	je     c0011587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011496:	8d 46 01             	lea    eax,[esi+0x1]
c0011499:	80 fa 3a             	cmp    dl,0x3a
c001149c:	74 04                	je     c00114a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001149e:	89 c6                	mov    esi,eax
c00114a0:	eb ea                	jmp    c001148c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00114a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00114a5:	89 c6                	mov    esi,eax
c00114a7:	50                   	push   eax
c00114a8:	6a 40                	push   0x40
c00114aa:	6a 00                	push   0x0
c00114ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114b0:	50                   	push   eax
c00114b1:	e8 1a f0 fe ff       	call   c00004d0 <memset>
c00114b6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114bd:	31 c0                	xor    eax,eax
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114c4:	84 c9                	test   cl,cl
c00114c6:	0f 84 bb 00 00 00    	je     c0011587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114cc:	3d c7 00 00 00       	cmp    eax,0xc7
c00114d1:	0f 8f b0 00 00 00    	jg     c0011587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114d7:	80 f9 0a             	cmp    cl,0xa
c00114da:	0f 85 98 00 00 00    	jne    c0011578 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114e0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114e5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114e9:	a8 df                	test   al,0xdf
c00114eb:	0f 94 c1             	sete   cl
c00114ee:	3c 23                	cmp    al,0x23
c00114f0:	0f 94 c2             	sete   dl
c00114f3:	08 d1                	or     cl,dl
c00114f5:	75 4a                	jne    c0011541 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114f7:	8d 50 f7             	lea    edx,[eax-0x9]
c00114fa:	80 fa 01             	cmp    dl,0x1
c00114fd:	76 42                	jbe    c0011541 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114ff:	3c 5b                	cmp    al,0x5b
c0011501:	75 42                	jne    c0011545 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011503:	80 fb 40             	cmp    bl,0x40
c0011506:	75 39                	jne    c0011541 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001150f:	52                   	push   edx
c0011510:	e8 2b f0 fe ff       	call   c0000540 <strlen>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	83 f8 3f             	cmp    eax,0x3f
c001151b:	77 6a                	ja     c0011587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001151d:	50                   	push   eax
c001151e:	50                   	push   eax
c001151f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011523:	52                   	push   edx
c0011524:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011528:	52                   	push   edx
c0011529:	e8 d2 f0 fe ff       	call   c0000600 <strcpy>
c001152e:	58                   	pop    eax
c001152f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011533:	52                   	push   edx
c0011534:	e8 07 f0 fe ff       	call   c0000540 <strlen>
c0011539:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001153e:	83 c4 10             	add    esp,0x10
c0011541:	31 d2                	xor    edx,edx
c0011543:	eb 3a                	jmp    c001157f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011545:	80 fb 40             	cmp    bl,0x40
c0011548:	74 06                	je     c0011550 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001154a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001154e:	eb 20                	jmp    c0011570 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011550:	50                   	push   eax
c0011551:	50                   	push   eax
c0011552:	55                   	push   ebp
c0011553:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011557:	50                   	push   eax
c0011558:	e8 83 f1 fe ff       	call   c00006e0 <strcmp>
c001155d:	83 c4 10             	add    esp,0x10
c0011560:	85 c0                	test   eax,eax
c0011562:	75 dd                	jne    c0011541 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011564:	eb e4                	jmp    c001154a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011566:	8d 50 01             	lea    edx,[eax+0x1]
c0011569:	80 f9 3d             	cmp    cl,0x3d
c001156c:	74 1d                	je     c001158b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001156e:	89 d0                	mov    eax,edx
c0011570:	8a 08                	mov    cl,BYTE PTR [eax]
c0011572:	84 c9                	test   cl,cl
c0011574:	75 f0                	jne    c0011566 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011576:	eb 0f                	jmp    c0011587 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011578:	8d 50 01             	lea    edx,[eax+0x1]
c001157b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001157f:	47                   	inc    edi
c0011580:	89 d0                	mov    eax,edx
c0011582:	e9 3b ff ff ff       	jmp    c00114c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011587:	31 c0                	xor    eax,eax
c0011589:	eb 33                	jmp    c00115be <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001158b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001158f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011592:	50                   	push   eax
c0011593:	50                   	push   eax
c0011594:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011598:	50                   	push   eax
c0011599:	56                   	push   esi
c001159a:	e8 41 f1 fe ff       	call   c00006e0 <strcmp>
c001159f:	83 c4 10             	add    esp,0x10
c00115a2:	85 c0                	test   eax,eax
c00115a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115a8:	75 97                	jne    c0011541 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115aa:	51                   	push   ecx
c00115ab:	51                   	push   ecx
c00115ac:	52                   	push   edx
c00115ad:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115b4:	e8 47 f0 fe ff       	call   c0000600 <strcpy>
c00115b9:	83 c4 10             	add    esp,0x10
c00115bc:	b0 01                	mov    al,0x1
c00115be:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115c4:	5b                   	pop    ebx
c00115c5:	5e                   	pop    esi
c00115c6:	5f                   	pop    edi
c00115c7:	5d                   	pop    ebp
c00115c8:	c3                   	ret    

c00115c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115c9:	57                   	push   edi
c00115ca:	56                   	push   esi
c00115cb:	53                   	push   ebx
c00115cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115d2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115d9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115e0:	53                   	push   ebx
c00115e1:	e8 5a ef fe ff       	call   c0000540 <strlen>
c00115e6:	89 34 24             	mov    DWORD PTR [esp],esi
c00115e9:	89 c7                	mov    edi,eax
c00115eb:	e8 50 ef fe ff       	call   c0000540 <strlen>
c00115f0:	83 c4 10             	add    esp,0x10
c00115f3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115f7:	3d ff 00 00 00       	cmp    eax,0xff
c00115fc:	0f 87 d3 00 00 00    	ja     c00116d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011602:	57                   	push   edi
c0011603:	57                   	push   edi
c0011604:	56                   	push   esi
c0011605:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011609:	56                   	push   esi
c001160a:	e8 f1 ef fe ff       	call   c0000600 <strcpy>
c001160f:	58                   	pop    eax
c0011610:	5a                   	pop    edx
c0011611:	68 8a ed 01 c0       	push   0xc001ed8a
c0011616:	56                   	push   esi
c0011617:	e8 a4 f1 fe ff       	call   c00007c0 <strcat>
c001161c:	59                   	pop    ecx
c001161d:	5f                   	pop    edi
c001161e:	53                   	push   ebx
c001161f:	56                   	push   esi
c0011620:	e8 9b f1 fe ff       	call   c00007c0 <strcat>
c0011625:	58                   	pop    eax
c0011626:	5a                   	pop    edx
c0011627:	68 e1 ea 01 c0       	push   0xc001eae1
c001162c:	56                   	push   esi
c001162d:	e8 8e f1 fe ff       	call   c00007c0 <strcat>
c0011632:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011639:	e8 7b 61 ff ff       	call   c00077b9 <malloc>
c001163e:	83 c4 0c             	add    esp,0xc
c0011641:	89 c3                	mov    ebx,eax
c0011643:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c0011649:	56                   	push   esi
c001164a:	50                   	push   eax
c001164b:	e8 0e 94 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011650:	83 c4 10             	add    esp,0x10
c0011653:	85 db                	test   ebx,ebx
c0011655:	74 7e                	je     c00116d5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011657:	51                   	push   ecx
c0011658:	51                   	push   ecx
c0011659:	6a 01                	push   0x1
c001165b:	53                   	push   ebx
c001165c:	e8 bd 94 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	85 c0                	test   eax,eax
c0011666:	74 08                	je     c0011670 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011668:	83 ec 0c             	sub    esp,0xc
c001166b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001166d:	53                   	push   ebx
c001166e:	eb 5f                	jmp    c00116cf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011670:	52                   	push   edx
c0011671:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011675:	50                   	push   eax
c0011676:	8d 44 24 20          	lea    eax,[esp+0x20]
c001167a:	50                   	push   eax
c001167b:	53                   	push   ebx
c001167c:	e8 49 97 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0011681:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	89 c1                	mov    ecx,eax
c001168a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001168e:	74 31                	je     c00116c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011690:	83 ec 0c             	sub    esp,0xc
c0011693:	50                   	push   eax
c0011694:	e8 20 61 ff ff       	call   c00077b9 <malloc>
c0011699:	89 c6                	mov    esi,eax
c001169b:	58                   	pop    eax
c001169c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001169e:	8d 54 24 20          	lea    edx,[esp+0x20]
c00116a2:	52                   	push   edx
c00116a3:	56                   	push   esi
c00116a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116ac:	53                   	push   ebx
c00116ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116b0:	83 c4 20             	add    esp,0x20
c00116b3:	85 c0                	test   eax,eax
c00116b5:	75 0a                	jne    c00116c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116bb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116bf:	74 18                	je     c00116d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116c1:	83 ec 0c             	sub    esp,0xc
c00116c4:	53                   	push   ebx
c00116c5:	e8 b2 94 ff ff       	call   c000ab7c <File::close()>
c00116ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	31 c0                	xor    eax,eax
c00116d7:	eb 3b                	jmp    c0011714 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116d9:	83 ec 0c             	sub    esp,0xc
c00116dc:	53                   	push   ebx
c00116dd:	e8 9a 94 ff ff       	call   c000ab7c <File::close()>
c00116e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116ea:	83 c4 0c             	add    esp,0xc
c00116ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116f4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116fb:	56                   	push   esi
c00116fc:	e8 70 fd ff ff       	call   c0011471 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011701:	89 34 24             	mov    DWORD PTR [esp],esi
c0011704:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011708:	e8 cc 60 ff ff       	call   c00077d9 <free>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011714:	81 c4 20 01 00 00    	add    esp,0x120
c001171a:	5b                   	pop    ebx
c001171b:	5e                   	pop    esi
c001171c:	5f                   	pop    edi
c001171d:	c3                   	ret    

c001171e <Reg::getLine(char*, char*, char*)>:
c001171e:	57                   	push   edi
c001171f:	56                   	push   esi
c0011720:	53                   	push   ebx
c0011721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011725:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011729:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001172d:	57                   	push   edi
c001172e:	56                   	push   esi
c001172f:	53                   	push   ebx
c0011730:	68 e6 ea 01 c0       	push   0xc001eae6
c0011735:	e8 8f fe ff ff       	call   c00115c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	84 c0                	test   al,al
c001173f:	75 10                	jne    c0011751 <Reg::getLine(char*, char*, char*)+0x33>
c0011741:	57                   	push   edi
c0011742:	56                   	push   esi
c0011743:	53                   	push   ebx
c0011744:	68 0b eb 01 c0       	push   0xc001eb0b
c0011749:	e8 7b fe ff ff       	call   c00115c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001174e:	83 c4 10             	add    esp,0x10
c0011751:	5b                   	pop    ebx
c0011752:	5e                   	pop    esi
c0011753:	5f                   	pop    edi
c0011754:	c3                   	ret    

c0011755 <Reg::readInt(char*, char*, int*)>:
c0011755:	55                   	push   ebp
c0011756:	57                   	push   edi
c0011757:	56                   	push   esi
c0011758:	53                   	push   ebx
c0011759:	81 ec f0 00 00 00    	sub    esp,0xf0
c001175f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011763:	57                   	push   edi
c0011764:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001176b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011772:	e8 a7 ff ff ff       	call   c001171e <Reg::getLine(char*, char*, char*)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	84 c0                	test   al,al
c001177c:	0f 84 b3 00 00 00    	je     c0011835 <Reg::readInt(char*, char*, int*)+0xe0>
c0011782:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011786:	80 fa 2b             	cmp    dl,0x2b
c0011789:	74 0c                	je     c0011797 <Reg::readInt(char*, char*, int*)+0x42>
c001178b:	80 fa 2d             	cmp    dl,0x2d
c001178e:	75 0e                	jne    c001179e <Reg::readInt(char*, char*, int*)+0x49>
c0011790:	ba 01 00 00 00       	mov    edx,0x1
c0011795:	eb 0b                	jmp    c00117a2 <Reg::readInt(char*, char*, int*)+0x4d>
c0011797:	ba 01 00 00 00       	mov    edx,0x1
c001179c:	eb 02                	jmp    c00117a0 <Reg::readInt(char*, char*, int*)+0x4b>
c001179e:	31 d2                	xor    edx,edx
c00117a0:	31 c0                	xor    eax,eax
c00117a2:	be 0a 00 00 00       	mov    esi,0xa
c00117a7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117ac:	75 20                	jne    c00117ce <Reg::readInt(char*, char*, int*)+0x79>
c00117ae:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117b2:	80 f9 78             	cmp    cl,0x78
c00117b5:	75 0a                	jne    c00117c1 <Reg::readInt(char*, char*, int*)+0x6c>
c00117b7:	83 c2 02             	add    edx,0x2
c00117ba:	be 10 00 00 00       	mov    esi,0x10
c00117bf:	eb 0d                	jmp    c00117ce <Reg::readInt(char*, char*, int*)+0x79>
c00117c1:	80 f9 62             	cmp    cl,0x62
c00117c4:	75 08                	jne    c00117ce <Reg::readInt(char*, char*, int*)+0x79>
c00117c6:	83 c2 02             	add    edx,0x2
c00117c9:	be 02 00 00 00       	mov    esi,0x2
c00117ce:	01 d7                	add    edi,edx
c00117d0:	31 d2                	xor    edx,edx
c00117d2:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117d4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117d8:	80 fb 0d             	cmp    bl,0xd
c00117db:	0f 94 c3             	sete   bl
c00117de:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117e3:	0f 94 c1             	sete   cl
c00117e6:	08 cb                	or     bl,cl
c00117e8:	75 3a                	jne    c0011824 <Reg::readInt(char*, char*, int*)+0xcf>
c00117ea:	0f af d6             	imul   edx,esi
c00117ed:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117f2:	83 fe 10             	cmp    esi,0x10
c00117f5:	75 26                	jne    c001181d <Reg::readInt(char*, char*, int*)+0xc8>
c00117f7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117fb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117fe:	89 e9                	mov    ecx,ebp
c0011800:	80 f9 05             	cmp    cl,0x5
c0011803:	77 06                	ja     c001180b <Reg::readInt(char*, char*, int*)+0xb6>
c0011805:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011809:	eb 16                	jmp    c0011821 <Reg::readInt(char*, char*, int*)+0xcc>
c001180b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001180f:	83 e9 61             	sub    ecx,0x61
c0011812:	80 f9 05             	cmp    cl,0x5
c0011815:	77 06                	ja     c001181d <Reg::readInt(char*, char*, int*)+0xc8>
c0011817:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001181b:	eb 04                	jmp    c0011821 <Reg::readInt(char*, char*, int*)+0xcc>
c001181d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011821:	47                   	inc    edi
c0011822:	eb ae                	jmp    c00117d2 <Reg::readInt(char*, char*, int*)+0x7d>
c0011824:	84 c0                	test   al,al
c0011826:	74 02                	je     c001182a <Reg::readInt(char*, char*, int*)+0xd5>
c0011828:	f7 da                	neg    edx
c001182a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011831:	89 10                	mov    DWORD PTR [eax],edx
c0011833:	88 d8                	mov    al,bl
c0011835:	81 c4 ec 00 00 00    	add    esp,0xec
c001183b:	5b                   	pop    ebx
c001183c:	5e                   	pop    esi
c001183d:	5f                   	pop    edi
c001183e:	5d                   	pop    ebp
c001183f:	c3                   	ret    

c0011840 <Reg::readString(char*, char*, char*, int)>:
c0011840:	57                   	push   edi
c0011841:	56                   	push   esi
c0011842:	53                   	push   ebx
c0011843:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011849:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011850:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011854:	57                   	push   edi
c0011855:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001185c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011863:	e8 b6 fe ff ff       	call   c001171e <Reg::getLine(char*, char*, char*)>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	89 c6                	mov    esi,eax
c001186d:	84 c0                	test   al,al
c001186f:	74 44                	je     c00118b5 <Reg::readString(char*, char*, char*, int)+0x75>
c0011871:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011878:	31 c0                	xor    eax,eax
c001187a:	4a                   	dec    edx
c001187b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001187e:	84 c9                	test   cl,cl
c0011880:	74 0f                	je     c0011891 <Reg::readString(char*, char*, char*, int)+0x51>
c0011882:	39 c2                	cmp    edx,eax
c0011884:	7e 0b                	jle    c0011891 <Reg::readString(char*, char*, char*, int)+0x51>
c0011886:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011889:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001188e:	40                   	inc    eax
c001188f:	eb ea                	jmp    c001187b <Reg::readString(char*, char*, char*, int)+0x3b>
c0011891:	83 ec 0c             	sub    esp,0xc
c0011894:	53                   	push   ebx
c0011895:	e8 a6 ec fe ff       	call   c0000540 <strlen>
c001189a:	83 c4 10             	add    esp,0x10
c001189d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00118a2:	75 11                	jne    c00118b5 <Reg::readString(char*, char*, char*, int)+0x75>
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	53                   	push   ebx
c00118a8:	e8 93 ec fe ff       	call   c0000540 <strlen>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118b5:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118bb:	89 f0                	mov    eax,esi
c00118bd:	5b                   	pop    ebx
c00118be:	5e                   	pop    esi
c00118bf:	5f                   	pop    edi
c00118c0:	c3                   	ret    

c00118c1 <Reg::readBool(char*, char*, bool*)>:
c00118c1:	83 ec 20             	sub    esp,0x20
c00118c4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118c8:	50                   	push   eax
c00118c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118d1:	e8 7f fe ff ff       	call   c0011755 <Reg::readInt(char*, char*, int*)>
c00118d6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118df:	0f 95 02             	setne  BYTE PTR [edx]
c00118e2:	83 c4 2c             	add    esp,0x2c
c00118e5:	c3                   	ret    

c00118e6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118e6:	53                   	push   ebx
c00118e7:	83 ec 1c             	sub    esp,0x1c
c00118ea:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118ee:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118f2:	50                   	push   eax
c00118f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118fb:	e8 c1 ff ff ff       	call   c00118c1 <Reg::readBool(char*, char*, bool*)>
c0011900:	83 c4 10             	add    esp,0x10
c0011903:	84 c0                	test   al,al
c0011905:	74 04                	je     c001190b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011907:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001190b:	88 d8                	mov    al,bl
c001190d:	83 c4 18             	add    esp,0x18
c0011910:	5b                   	pop    ebx
c0011911:	c3                   	ret    

c0011912 <Reg::readIntWithDefault(char*, char*, int)>:
c0011912:	53                   	push   ebx
c0011913:	83 ec 1c             	sub    esp,0x1c
c0011916:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001191a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001191e:	50                   	push   eax
c001191f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011927:	e8 29 fe ff ff       	call   c0011755 <Reg::readInt(char*, char*, int*)>
c001192c:	83 c4 10             	add    esp,0x10
c001192f:	84 c0                	test   al,al
c0011931:	74 04                	je     c0011937 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011933:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011937:	89 d8                	mov    eax,ebx
c0011939:	83 c4 18             	add    esp,0x18
c001193c:	5b                   	pop    ebx
c001193d:	c3                   	ret    

c001193e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001193e:	57                   	push   edi
c001193f:	56                   	push   esi
c0011940:	56                   	push   esi
c0011941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011945:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011949:	56                   	push   esi
c001194a:	57                   	push   edi
c001194b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001194f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011953:	e8 e8 fe ff ff       	call   c0011840 <Reg::readString(char*, char*, char*, int)>
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	84 c0                	test   al,al
c001195d:	75 1a                	jne    c0011979 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001195f:	51                   	push   ecx
c0011960:	56                   	push   esi
c0011961:	6a 00                	push   0x0
c0011963:	57                   	push   edi
c0011964:	e8 67 eb fe ff       	call   c00004d0 <memset>
c0011969:	8d 4e ff             	lea    ecx,[esi-0x1]
c001196c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011970:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011972:	83 c4 10             	add    esp,0x10
c0011975:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011979:	89 f8                	mov    eax,edi
c001197b:	5a                   	pop    edx
c001197c:	5e                   	pop    esi
c001197d:	5f                   	pop    edi
c001197e:	c3                   	ret    

c001197f <SysEject(regs*)>:
c001197f:	83 ec 0c             	sub    esp,0xc
c0011982:	83 ca ff             	or     edx,0xffffffff
c0011985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011989:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001198c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011991:	83 e9 41             	sub    ecx,0x41
c0011994:	83 f9 19             	cmp    ecx,0x19
c0011997:	77 18                	ja     c00119b1 <SysEject(regs*)+0x32>
c0011999:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c00119a0:	85 c9                	test   ecx,ecx
c00119a2:	74 0d                	je     c00119b1 <SysEject(regs*)+0x32>
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	51                   	push   ecx
c00119a8:	e8 e1 b1 ff ff       	call   c000cb8e <LogicalDisk::eject()>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	99                   	cdq    
c00119b1:	83 c4 0c             	add    esp,0xc
c00119b4:	c3                   	ret    

c00119b5 <SysExit(regs*)>:
c00119b5:	83 ec 18             	sub    esp,0x18
c00119b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119bc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119bf:	e8 6c 28 00 00       	call   c0014230 <terminateTask(int)>
c00119c4:	83 c8 ff             	or     eax,0xffffffff
c00119c7:	83 c4 1c             	add    esp,0x1c
c00119ca:	89 c2                	mov    edx,eax
c00119cc:	c3                   	ret    

c00119cd <SysGetCwd(regs*)>:
c00119cd:	83 ec 10             	sub    esp,0x10
c00119d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119d4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119d7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119df:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119e2:	e8 79 8e ff ff       	call   c000a860 <Fs::getcwd(Process*, char*, int)>
c00119e7:	83 c4 1c             	add    esp,0x1c
c00119ea:	99                   	cdq    
c00119eb:	c3                   	ret    

c00119ec <SysGetPID(regs*)>:
c00119ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119f6:	99                   	cdq    
c00119f7:	c3                   	ret    

c00119f8 <SysGetRAMData(regs*)>:
c00119f8:	8b 0d 68 0d 02 c0    	mov    ecx,DWORD PTR ds:0xc0020d68
c00119fe:	69 05 64 0d 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020d64,0xc8
c0011a08:	99                   	cdq    
c0011a09:	f7 f9                	idiv   ecx
c0011a0b:	c1 e0 18             	shl    eax,0x18
c0011a0e:	09 c8                	or     eax,ecx
c0011a10:	99                   	cdq    
c0011a11:	c3                   	ret    

c0011a12 <SysGetVGAPtr(regs*)>:
c0011a12:	55                   	push   ebp
c0011a13:	57                   	push   edi
c0011a14:	56                   	push   esi
c0011a15:	53                   	push   ebx
c0011a16:	83 ec 18             	sub    esp,0x18
c0011a19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a1d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a20:	e8 0b 23 00 00       	call   c0013d30 <Thr::processFromPID(int)>
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	89 c1                	mov    ecx,eax
c0011a2a:	b8 01 00 00 00       	mov    eax,0x1
c0011a2f:	85 c9                	test   ecx,ecx
c0011a31:	74 57                	je     c0011a8a <SysGetVGAPtr(regs*)+0x78>
c0011a33:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a39:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a3d:	74 0c                	je     c0011a4b <SysGetVGAPtr(regs*)+0x39>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	55                   	push   ebp
c0011a43:	e8 bf 69 ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a4e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a51:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a58:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a5b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a5e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a67:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a6a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a70:	50                   	push   eax
c0011a71:	50                   	push   eax
c0011a72:	68 26 eb 01 c0       	push   0xc001eb26
c0011a77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a7a:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a7f:	50                   	push   eax
c0011a80:	e8 7b eb fe ff       	call   c0000600 <strcpy>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	31 c0                	xor    eax,eax
c0011a8a:	83 c4 0c             	add    esp,0xc
c0011a8d:	31 d2                	xor    edx,edx
c0011a8f:	5b                   	pop    ebx
c0011a90:	5e                   	pop    esi
c0011a91:	5f                   	pop    edi
c0011a92:	5d                   	pop    ebp
c0011a93:	c3                   	ret    

c0011a94 <SysLoadDLL(regs*)>:
c0011a94:	56                   	push   esi
c0011a95:	53                   	push   ebx
c0011a96:	31 d2                	xor    edx,edx
c0011a98:	51                   	push   ecx
c0011a99:	b8 01 00 00 00       	mov    eax,0x1
c0011a9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011aa2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011aa6:	0f 84 8c 00 00 00    	je     c0011b38 <SysLoadDLL(regs*)+0xa4>
c0011aac:	83 ec 0c             	sub    esp,0xc
c0011aaf:	68 14 01 00 00       	push   0x114
c0011ab4:	e8 00 5d ff ff       	call   c00077b9 <malloc>
c0011ab9:	83 c4 0c             	add    esp,0xc
c0011abc:	89 c3                	mov    ebx,eax
c0011abe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ac6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ac9:	53                   	push   ebx
c0011aca:	e8 8f 8f ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	31 d2                	xor    edx,edx
c0011ad4:	b8 02 00 00 00       	mov    eax,0x2
c0011ad9:	85 db                	test   ebx,ebx
c0011adb:	74 5b                	je     c0011b38 <SysLoadDLL(regs*)+0xa4>
c0011add:	83 ec 0c             	sub    esp,0xc
c0011ae0:	53                   	push   ebx
c0011ae1:	e8 a6 92 ff ff       	call   c000ad8c <File::exists()>
c0011ae6:	83 c4 10             	add    esp,0x10
c0011ae9:	84 c0                	test   al,al
c0011aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aed:	75 11                	jne    c0011b00 <SysLoadDLL(regs*)+0x6c>
c0011aef:	83 ec 0c             	sub    esp,0xc
c0011af2:	53                   	push   ebx
c0011af3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	b8 03 00 00 00       	mov    eax,0x3
c0011afe:	eb 36                	jmp    c0011b36 <SysLoadDLL(regs*)+0xa2>
c0011b00:	83 ec 0c             	sub    esp,0xc
c0011b03:	53                   	push   ebx
c0011b04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b07:	58                   	pop    eax
c0011b08:	5a                   	pop    edx
c0011b09:	6a 00                	push   0x0
c0011b0b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b0e:	e8 86 12 00 00       	call   c0012d99 <Thr::loadDLL(char const*, bool)>
c0011b13:	83 c4 10             	add    esp,0x10
c0011b16:	89 c1                	mov    ecx,eax
c0011b18:	31 d2                	xor    edx,edx
c0011b1a:	b8 04 00 00 00       	mov    eax,0x4
c0011b1f:	85 c9                	test   ecx,ecx
c0011b21:	74 15                	je     c0011b38 <SysLoadDLL(regs*)+0xa4>
c0011b23:	53                   	push   ebx
c0011b24:	53                   	push   ebx
c0011b25:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0011b2b:	51                   	push   ecx
c0011b2c:	e8 99 14 00 00       	call   c0012fca <Thr::executeDLL(unsigned long, void*)>
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	31 c0                	xor    eax,eax
c0011b36:	31 d2                	xor    edx,edx
c0011b38:	59                   	pop    ecx
c0011b39:	5b                   	pop    ebx
c0011b3a:	5e                   	pop    esi
c0011b3b:	c3                   	ret    

c0011b3c <SysRead(regs*)>:
c0011b3c:	57                   	push   edi
c0011b3d:	56                   	push   esi
c0011b3e:	53                   	push   ebx
c0011b3f:	83 ec 10             	sub    esp,0x10
c0011b42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b46:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b49:	83 f8 02             	cmp    eax,0x2
c0011b4c:	77 10                	ja     c0011b5e <SysRead(regs*)+0x22>
c0011b4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b56:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b5c:	eb 0e                	jmp    c0011b6c <SysRead(regs*)+0x30>
c0011b5e:	83 ec 0c             	sub    esp,0xc
c0011b61:	50                   	push   eax
c0011b62:	e8 d8 75 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011b67:	83 c4 10             	add    esp,0x10
c0011b6a:	89 c1                	mov    ecx,eax
c0011b6c:	83 c8 ff             	or     eax,0xffffffff
c0011b6f:	85 c9                	test   ecx,ecx
c0011b71:	89 c2                	mov    edx,eax
c0011b73:	74 28                	je     c0011b9d <SysRead(regs*)+0x61>
c0011b75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b7d:	31 ff                	xor    edi,edi
c0011b7f:	83 ec 0c             	sub    esp,0xc
c0011b82:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b84:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b88:	52                   	push   edx
c0011b89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b8c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b8f:	57                   	push   edi
c0011b90:	56                   	push   esi
c0011b91:	51                   	push   ecx
c0011b92:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b99:	83 c4 20             	add    esp,0x20
c0011b9c:	99                   	cdq    
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	5b                   	pop    ebx
c0011ba1:	5e                   	pop    esi
c0011ba2:	5f                   	pop    edi
c0011ba3:	c3                   	ret    

c0011ba4 <SysRegisterSignal(regs*)>:
c0011ba4:	83 ec 18             	sub    esp,0x18
c0011ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011bab:	6a 00                	push   0x0
c0011bad:	6a 00                	push   0x0
c0011baf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011bb2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bbd:	05 20 07 00 00       	add    eax,0x720
c0011bc2:	50                   	push   eax
c0011bc3:	e8 09 e9 ff ff       	call   c00104d1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bc8:	83 c4 2c             	add    esp,0x2c
c0011bcb:	99                   	cdq    
c0011bcc:	c3                   	ret    

c0011bcd <SysSbrk(regs*)>:
c0011bcd:	56                   	push   esi
c0011bce:	53                   	push   ebx
c0011bcf:	83 ec 0c             	sub    esp,0xc
c0011bd2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bd6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bd9:	68 30 eb 01 c0       	push   0xc001eb30
c0011bde:	e8 05 89 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be8:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011beb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bf7:	85 db                	test   ebx,ebx
c0011bf9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bfc:	74 02                	je     c0011c00 <SysSbrk(regs*)+0x33>
c0011bfe:	79 06                	jns    c0011c06 <SysSbrk(regs*)+0x39>
c0011c00:	89 f0                	mov    eax,esi
c0011c02:	31 d2                	xor    edx,edx
c0011c04:	eb 2a                	jmp    c0011c30 <SysSbrk(regs*)+0x63>
c0011c06:	83 c8 ff             	or     eax,0xffffffff
c0011c09:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c0f:	89 c2                	mov    edx,eax
c0011c11:	77 1d                	ja     c0011c30 <SysSbrk(regs*)+0x63>
c0011c13:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c19:	50                   	push   eax
c0011c1a:	c1 ea 0c             	shr    edx,0xc
c0011c1d:	68 07 0c 00 00       	push   0xc07
c0011c22:	52                   	push   edx
c0011c23:	51                   	push   ecx
c0011c24:	e8 05 7e ff ff       	call   c0009a2e <VAS::allocatePages(int, int)>
c0011c29:	89 f0                	mov    eax,esi
c0011c2b:	31 d2                	xor    edx,edx
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	59                   	pop    ecx
c0011c31:	5b                   	pop    ebx
c0011c32:	5e                   	pop    esi
c0011c33:	c3                   	ret    

c0011c34 <SysSetCwd(regs*)>:
c0011c34:	83 ec 14             	sub    esp,0x14
c0011c37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c43:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c46:	e8 e0 91 ff ff       	call   c000ae2b <Fs::setcwd(Process*, char*)>
c0011c4b:	83 c4 1c             	add    esp,0x1c
c0011c4e:	99                   	cdq    
c0011c4f:	c3                   	ret    

c0011c50 <SysSetTime(regs*)>:
c0011c50:	55                   	push   ebp
c0011c51:	31 c9                	xor    ecx,ecx
c0011c53:	57                   	push   edi
c0011c54:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c59:	56                   	push   esi
c0011c5a:	53                   	push   ebx
c0011c5b:	31 db                	xor    ebx,ebx
c0011c5d:	83 ec 10             	sub    esp,0x10
c0011c60:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c64:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c67:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c6a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c6d:	89 c2                	mov    edx,eax
c0011c6f:	66 81 ef 6c 07       	sub    di,0x76c
c0011c74:	83 e2 1f             	and    edx,0x1f
c0011c77:	c1 e7 10             	shl    edi,0x10
c0011c7a:	42                   	inc    edx
c0011c7b:	c1 e8 05             	shr    eax,0x5
c0011c7e:	88 d1                	mov    cl,dl
c0011c80:	31 d2                	xor    edx,edx
c0011c82:	f7 f5                	div    ebp
c0011c84:	89 dd                	mov    ebp,ebx
c0011c86:	88 d5                	mov    ch,dl
c0011c88:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c8e:	0f b7 c1             	movzx  eax,cx
c0011c91:	31 d2                	xor    edx,edx
c0011c93:	09 f8                	or     eax,edi
c0011c95:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c9a:	89 c1                	mov    ecx,eax
c0011c9c:	89 f0                	mov    eax,esi
c0011c9e:	f7 f7                	div    edi
c0011ca0:	c1 e2 10             	shl    edx,0x10
c0011ca3:	09 d5                	or     ebp,edx
c0011ca5:	31 d2                	xor    edx,edx
c0011ca7:	89 eb                	mov    ebx,ebp
c0011ca9:	f7 f7                	div    edi
c0011cab:	bf 10 0e 00 00       	mov    edi,0xe10
c0011cb0:	88 d7                	mov    bh,dl
c0011cb2:	89 f0                	mov    eax,esi
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	f7 f7                	div    edi
c0011cb8:	bf 18 00 00 00       	mov    edi,0x18
c0011cbd:	31 d2                	xor    edx,edx
c0011cbf:	f7 f7                	div    edi
c0011cc1:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0011cc6:	88 d3                	mov    bl,dl
c0011cc8:	53                   	push   ebx
c0011cc9:	51                   	push   ecx
c0011cca:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cd0:	e8 67 99 ff ff       	call   c000b63c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cd5:	83 c4 1c             	add    esp,0x1c
c0011cd8:	83 f0 01             	xor    eax,0x1
c0011cdb:	5b                   	pop    ebx
c0011cdc:	0f b6 c0             	movzx  eax,al
c0011cdf:	5e                   	pop    esi
c0011ce0:	31 d2                	xor    edx,edx
c0011ce2:	5f                   	pop    edi
c0011ce3:	5d                   	pop    ebp
c0011ce4:	c3                   	ret    

c0011ce5 <SysTimezone(regs*)>:
c0011ce5:	53                   	push   ebx
c0011ce6:	83 ec 08             	sub    esp,0x8
c0011ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ced:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cf1:	75 17                	jne    c0011d0a <SysTimezone(regs*)+0x25>
c0011cf3:	83 ec 0c             	sub    esp,0xc
c0011cf6:	68 3c eb 01 c0       	push   0xc001eb3c
c0011cfb:	e8 e8 87 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011d00:	83 c8 ff             	or     eax,0xffffffff
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	89 c2                	mov    edx,eax
c0011d08:	eb 20                	jmp    c0011d2a <SysTimezone(regs*)+0x45>
c0011d0a:	83 ec 0c             	sub    esp,0xc
c0011d0d:	68 51 eb 01 c0       	push   0xc001eb51
c0011d12:	e8 d1 87 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011d17:	58                   	pop    eax
c0011d18:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d1b:	e8 78 96 ff ff       	call   c000b398 <User::loadClockSettings(int)>
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	b8 01 00 00 00       	mov    eax,0x1
c0011d28:	31 d2                	xor    edx,edx
c0011d2a:	83 c4 08             	add    esp,0x8
c0011d2d:	5b                   	pop    ebx
c0011d2e:	c3                   	ret    

c0011d2f <SysWrite(regs*)>:
c0011d2f:	57                   	push   edi
c0011d30:	56                   	push   esi
c0011d31:	53                   	push   ebx
c0011d32:	83 ec 10             	sub    esp,0x10
c0011d35:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d3c:	83 f8 02             	cmp    eax,0x2
c0011d3f:	77 10                	ja     c0011d51 <SysWrite(regs*)+0x22>
c0011d41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d46:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d49:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d4f:	eb 0e                	jmp    c0011d5f <SysWrite(regs*)+0x30>
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	50                   	push   eax
c0011d55:	e8 e5 73 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	89 c1                	mov    ecx,eax
c0011d5f:	83 c8 ff             	or     eax,0xffffffff
c0011d62:	85 c9                	test   ecx,ecx
c0011d64:	89 c2                	mov    edx,eax
c0011d66:	74 28                	je     c0011d90 <SysWrite(regs*)+0x61>
c0011d68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d70:	31 ff                	xor    edi,edi
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d77:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d7b:	52                   	push   edx
c0011d7c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d7f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d82:	57                   	push   edi
c0011d83:	56                   	push   esi
c0011d84:	51                   	push   ecx
c0011d85:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d8c:	83 c4 20             	add    esp,0x20
c0011d8f:	99                   	cdq    
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	5b                   	pop    ebx
c0011d94:	5e                   	pop    esi
c0011d95:	5f                   	pop    edi
c0011d96:	c3                   	ret    

c0011d97 <SysWsbe(regs*)>:
c0011d97:	57                   	push   edi
c0011d98:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d9d:	56                   	push   esi
c0011d9e:	be 90 eb 01 c0       	mov    esi,0xc001eb90
c0011da3:	53                   	push   ebx
c0011da4:	83 ec 30             	sub    esp,0x30
c0011da7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011dab:	fc                   	cld    
c0011dac:	83 ec 0c             	sub    esp,0xc
c0011daf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011db1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011db5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dbd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011dc3:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dc5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dc8:	57                   	push   edi
c0011dc9:	e8 72 e7 fe ff       	call   c0000540 <strlen>
c0011dce:	5a                   	pop    edx
c0011dcf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011dd3:	52                   	push   edx
c0011dd4:	31 d2                	xor    edx,edx
c0011dd6:	57                   	push   edi
c0011dd7:	52                   	push   edx
c0011dd8:	50                   	push   eax
c0011dd9:	56                   	push   esi
c0011dda:	ff d3                	call   ebx
c0011ddc:	83 c4 14             	add    esp,0x14
c0011ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011de3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011de6:	e8 45 24 00 00       	call   c0014230 <terminateTask(int)>
c0011deb:	83 c4 40             	add    esp,0x40
c0011dee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011df3:	5b                   	pop    ebx
c0011df4:	31 d2                	xor    edx,edx
c0011df6:	5e                   	pop    esi
c0011df7:	5f                   	pop    edi
c0011df8:	c3                   	ret    

c0011df9 <SysYield(regs*)>:
c0011df9:	83 ec 0c             	sub    esp,0xc
c0011dfc:	fa                   	cli    
c0011dfd:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0011e03:	e8 04 1b 00 00       	call   c001390c <schedule()>
c0011e08:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0011e0d:	48                   	dec    eax
c0011e0e:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0011e13:	75 01                	jne    c0011e16 <SysYield(regs*)+0x1d>
c0011e15:	fb                   	sti    
c0011e16:	31 c0                	xor    eax,eax
c0011e18:	31 d2                	xor    edx,edx
c0011e1a:	83 c4 0c             	add    esp,0xc
c0011e1d:	c3                   	ret    

c0011e1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e1e:	55                   	push   ebp
c0011e1f:	57                   	push   edi
c0011e20:	56                   	push   esi
c0011e21:	53                   	push   ebx
c0011e22:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e28:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e30:	0f 95 c2             	setne  dl
c0011e33:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e3b:	0f 94 c0             	sete   al
c0011e3e:	84 c2                	test   dl,al
c0011e40:	74 34                	je     c0011e76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e42:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e4d:	74 27                	je     c0011e76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e4f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e56:	05 00 10 00 00       	add    eax,0x1000
c0011e5b:	89 c1                	mov    ecx,eax
c0011e5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e62:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e68:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e6f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e76:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e7d:	83 ec 0c             	sub    esp,0xc
c0011e80:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e86:	6a 01                	push   0x1
c0011e88:	e8 08 74 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	89 c3                	mov    ebx,eax
c0011e92:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e98:	0f 86 25 01 00 00    	jbe    c0011fc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e9e:	c1 ee 0c             	shr    esi,0xc
c0011ea1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ea8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011eac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011eb4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ebb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ebf:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ec6:	29 ef                	sub    edi,ebp
c0011ec8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ecc:	0f 83 f8 00 00 00    	jae    c0011fca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ed2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ed8:	76 05                	jbe    c0011edf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eda:	bf 00 10 00 00       	mov    edi,0x1000
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	31 d2                	xor    edx,edx
c0011ee4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011eeb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011eed:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ef1:	50                   	push   eax
c0011ef2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ef6:	56                   	push   esi
c0011ef7:	52                   	push   edx
c0011ef8:	57                   	push   edi
c0011ef9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011f00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f03:	83 c4 20             	add    esp,0x20
c0011f06:	85 c0                	test   eax,eax
c0011f08:	75 06                	jne    c0011f10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f0a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f0e:	74 13                	je     c0011f23 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f10:	83 ec 0c             	sub    esp,0xc
c0011f13:	53                   	push   ebx
c0011f14:	e8 ac 76 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	31 c0                	xor    eax,eax
c0011f1e:	e9 7c 01 00 00       	jmp    c001209f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f23:	fa                   	cli    
c0011f24:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0011f2a:	e8 76 5b ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0011f2f:	6a 07                	push   0x7
c0011f31:	89 c7                	mov    edi,eax
c0011f33:	53                   	push   ebx
c0011f34:	50                   	push   eax
c0011f35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f3a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f3d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f43:	e8 e2 79 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f48:	83 c4 0c             	add    esp,0xc
c0011f4b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f52:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f58:	6a 00                	push   0x0
c0011f5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f62:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f68:	e8 2f 78 ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f6d:	58                   	pop    eax
c0011f6e:	5a                   	pop    edx
c0011f6f:	68 07 0c 00 00       	push   0xc07
c0011f74:	55                   	push   ebp
c0011f75:	57                   	push   edi
c0011f76:	89 df                	mov    edi,ebx
c0011f78:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f7f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f85:	6a 00                	push   0x0
c0011f87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f95:	e8 50 7d ff ff       	call   c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f9a:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011fa1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0011fa6:	83 c4 20             	add    esp,0x20
c0011fa9:	48                   	dec    eax
c0011faa:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0011faf:	85 c0                	test   eax,eax
c0011fb1:	75 01                	jne    c0011fb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fb3:	fb                   	sti    
c0011fb4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fba:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fbe:	e9 f1 fe ff ff       	jmp    c0011eb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fc3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fd1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fd7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fdd:	0f 86 ae 00 00 00    	jbe    c0012091 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fe3:	fa                   	cli    
c0011fe4:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0011fea:	c1 ee 0c             	shr    esi,0xc
c0011fed:	51                   	push   ecx
c0011fee:	31 ff                	xor    edi,edi
c0011ff0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011ff7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ffd:	6a 00                	push   0x0
c0011fff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012004:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012007:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001200d:	e8 8a 77 ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c0012012:	83 c4 10             	add    esp,0x10
c0012015:	e8 8b 5a ff ff       	call   c0007aa5 <Phys::allocatePage()>
c001201a:	47                   	inc    edi
c001201b:	6a 07                	push   0x7
c001201d:	53                   	push   ebx
c001201e:	50                   	push   eax
c001201f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012023:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012029:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001202c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012032:	e8 f3 78 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012037:	58                   	pop    eax
c0012038:	5a                   	pop    edx
c0012039:	68 07 0c 00 00       	push   0xc07
c001203e:	55                   	push   ebp
c001203f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012045:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012049:	50                   	push   eax
c001204a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012051:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012057:	6a 00                	push   0x0
c0012059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001205e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012061:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012067:	e8 7e 7c ff ff       	call   c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001206c:	83 c4 1c             	add    esp,0x1c
c001206f:	68 00 10 00 00       	push   0x1000
c0012074:	6a 00                	push   0x0
c0012076:	53                   	push   ebx
c0012077:	e8 54 e4 fe ff       	call   c00004d0 <memset>
c001207c:	83 c4 10             	add    esp,0x10
c001207f:	39 fe                	cmp    esi,edi
c0012081:	77 92                	ja     c0012015 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012083:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0012088:	48                   	dec    eax
c0012089:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001208e:	75 01                	jne    c0012091 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012090:	fb                   	sti    
c0012091:	83 ec 0c             	sub    esp,0xc
c0012094:	53                   	push   ebx
c0012095:	e8 2b 75 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	b0 01                	mov    al,0x1
c001209f:	81 c4 2c 10 00 00    	add    esp,0x102c
c00120a5:	5b                   	pop    ebx
c00120a6:	5e                   	pop    esi
c00120a7:	5f                   	pop    edi
c00120a8:	5d                   	pop    ebp
c00120a9:	c3                   	ret    

c00120aa <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120aa:	55                   	push   ebp
c00120ab:	57                   	push   edi
c00120ac:	56                   	push   esi
c00120ad:	53                   	push   ebx
c00120ae:	83 ec 48             	sub    esp,0x48
c00120b1:	68 14 01 00 00       	push   0x114
c00120b6:	e8 fe 56 ff ff       	call   c00077b9 <malloc>
c00120bb:	83 c4 0c             	add    esp,0xc
c00120be:	89 c6                	mov    esi,eax
c00120c0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120c8:	50                   	push   eax
c00120c9:	e8 90 89 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c00120ce:	58                   	pop    eax
c00120cf:	5a                   	pop    edx
c00120d0:	6a 01                	push   0x1
c00120d2:	56                   	push   esi
c00120d3:	e8 46 8a ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c00120d8:	83 c4 10             	add    esp,0x10
c00120db:	85 c0                	test   eax,eax
c00120dd:	0f 85 47 01 00 00    	jne    c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120e3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120eb:	83 ec 0c             	sub    esp,0xc
c00120ee:	6a 34                	push   0x34
c00120f0:	e8 c4 56 ff ff       	call   c00077b9 <malloc>
c00120f5:	89 c3                	mov    ebx,eax
c00120f7:	58                   	pop    eax
c00120f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00120fa:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120fe:	57                   	push   edi
c00120ff:	53                   	push   ebx
c0012100:	6a 00                	push   0x0
c0012102:	6a 34                	push   0x34
c0012104:	56                   	push   esi
c0012105:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012108:	83 c4 20             	add    esp,0x20
c001210b:	85 c0                	test   eax,eax
c001210d:	0f 85 17 01 00 00    	jne    c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012113:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012119:	0f 85 0b 01 00 00    	jne    c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001211f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012122:	85 c0                	test   eax,eax
c0012124:	0f 84 00 01 00 00    	je     c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001212a:	31 d2                	xor    edx,edx
c001212c:	55                   	push   ebp
c001212d:	52                   	push   edx
c001212e:	50                   	push   eax
c001212f:	56                   	push   esi
c0012130:	e8 a7 8a ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	85 c0                	test   eax,eax
c001213a:	0f 85 ea 00 00 00    	jne    c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012140:	83 ec 0c             	sub    esp,0xc
c0012143:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012146:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001214a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001214e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012152:	0f af c2             	imul   eax,edx
c0012155:	50                   	push   eax
c0012156:	e8 5e 56 ff ff       	call   c00077b9 <malloc>
c001215b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001215d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012161:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012168:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001216c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012170:	0f af c2             	imul   eax,edx
c0012173:	99                   	cdq    
c0012174:	52                   	push   edx
c0012175:	50                   	push   eax
c0012176:	56                   	push   esi
c0012177:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001217a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001217d:	83 c4 20             	add    esp,0x20
c0012180:	85 c0                	test   eax,eax
c0012182:	0f 84 a2 00 00 00    	je     c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012188:	31 d2                	xor    edx,edx
c001218a:	51                   	push   ecx
c001218b:	52                   	push   edx
c001218c:	50                   	push   eax
c001218d:	56                   	push   esi
c001218e:	e8 49 8a ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012193:	83 c4 10             	add    esp,0x10
c0012196:	85 c0                	test   eax,eax
c0012198:	0f 85 8c 00 00 00    	jne    c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121a5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121a9:	31 ed                	xor    ebp,ebp
c00121ab:	0f af c2             	imul   eax,edx
c00121ae:	50                   	push   eax
c00121af:	e8 05 56 ff ff       	call   c00077b9 <malloc>
c00121b4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121c1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121c5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121c9:	0f af c2             	imul   eax,edx
c00121cc:	99                   	cdq    
c00121cd:	52                   	push   edx
c00121ce:	50                   	push   eax
c00121cf:	56                   	push   esi
c00121d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121d3:	83 c4 20             	add    esp,0x20
c00121d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121de:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121e2:	0f 86 80 00 00 00    	jbe    c0012268 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121e8:	0f b7 fd             	movzx  edi,bp
c00121eb:	c1 e7 05             	shl    edi,0x5
c00121ee:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121f2:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121f5:	75 6b                	jne    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121f7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121fe:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012201:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012205:	52                   	push   edx
c0012206:	31 d2                	xor    edx,edx
c0012208:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001220b:	52                   	push   edx
c001220c:	50                   	push   eax
c001220d:	56                   	push   esi
c001220e:	e8 c9 89 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	85 c0                	test   eax,eax
c0012218:	74 17                	je     c0012231 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001221a:	83 ec 0c             	sub    esp,0xc
c001221d:	68 bc eb 01 c0       	push   0xc001ebbc
c0012222:	e8 c1 82 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012227:	83 c4 10             	add    esp,0x10
c001222a:	31 c0                	xor    eax,eax
c001222c:	e9 87 00 00 00       	jmp    c00122b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012231:	83 ec 0c             	sub    esp,0xc
c0012234:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012237:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001223a:	50                   	push   eax
c001223b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001223f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012243:	56                   	push   esi
c0012244:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012248:	e8 d1 fb ff ff       	call   c0011e1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001224d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012251:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012255:	83 c4 20             	add    esp,0x20
c0012258:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001225c:	73 04                	jae    c0012262 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001225e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012262:	45                   	inc    ebp
c0012263:	e9 76 ff ff ff       	jmp    c00121de <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012268:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001226c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012274:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001227a:	83 ec 0c             	sub    esp,0xc
c001227d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012283:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012288:	05 00 10 00 00       	add    eax,0x1000
c001228d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012294:	e8 40 55 ff ff       	call   c00077d9 <free>
c0012299:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001229c:	e8 38 55 ff ff       	call   c00077d9 <free>
c00122a1:	58                   	pop    eax
c00122a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122a6:	e8 2e 55 ff ff       	call   c00077d9 <free>
c00122ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00122ae:	e8 c9 88 ff ff       	call   c000ab7c <File::close()>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	b0 01                	mov    al,0x1
c00122b8:	83 c4 3c             	add    esp,0x3c
c00122bb:	5b                   	pop    ebx
c00122bc:	5e                   	pop    esi
c00122bd:	5f                   	pop    edi
c00122be:	5d                   	pop    ebp
c00122bf:	c3                   	ret    

c00122c0 <Thr::runtimeReferenceHelper()>:
c00122c0:	83 ec 18             	sub    esp,0x18
c00122c3:	68 c4 eb 01 c0       	push   0xc001ebc4
c00122c8:	e8 1b 82 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00122cd:	fa                   	cli    
c00122ce:	83 c4 10             	add    esp,0x10
c00122d1:	eb fe                	jmp    c00122d1 <Thr::runtimeReferenceHelper()+0x11>

c00122d3 <Thr::getAddressOfKernelSymbol(char const*)>:
c00122d3:	57                   	push   edi
c00122d4:	56                   	push   esi
c00122d5:	53                   	push   ebx
c00122d6:	31 db                	xor    ebx,ebx
c00122d8:	39 1d c0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fc0,ebx
c00122de:	7e 3c                	jle    c001231c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122e0:	8b 34 9d 40 3f 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc0c0]
c00122e7:	31 ff                	xor    edi,edi
c00122e9:	39 3c 9d 40 3e 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc1c0],edi
c00122f0:	7e 27                	jle    c0012319 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122f2:	50                   	push   eax
c00122f3:	50                   	push   eax
c00122f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00122fa:	03 04 9d c0 3e 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc140]
c0012301:	50                   	push   eax
c0012302:	e8 d9 e3 fe ff       	call   c00006e0 <strcmp>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	85 c0                	test   eax,eax
c001230c:	75 05                	jne    c0012313 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001230e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012311:	eb 0b                	jmp    c001231e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012313:	83 c6 10             	add    esi,0x10
c0012316:	47                   	inc    edi
c0012317:	eb d0                	jmp    c00122e9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012319:	43                   	inc    ebx
c001231a:	eb bc                	jmp    c00122d8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001231c:	31 c0                	xor    eax,eax
c001231e:	5b                   	pop    ebx
c001231f:	5e                   	pop    esi
c0012320:	5f                   	pop    edi
c0012321:	c3                   	ret    

c0012322 <Thr::loadKernelSymbolTable(char const*)>:
c0012322:	55                   	push   ebp
c0012323:	57                   	push   edi
c0012324:	56                   	push   esi
c0012325:	53                   	push   ebx
c0012326:	83 ec 68             	sub    esp,0x68
c0012329:	8b 35 10 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024010
c001232f:	68 14 01 00 00       	push   0x114
c0012334:	e8 80 54 ff ff       	call   c00077b9 <malloc>
c0012339:	83 c4 0c             	add    esp,0xc
c001233c:	89 c3                	mov    ebx,eax
c001233e:	56                   	push   esi
c001233f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012343:	50                   	push   eax
c0012344:	e8 15 87 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012349:	5e                   	pop    esi
c001234a:	5f                   	pop    edi
c001234b:	6a 01                	push   0x1
c001234d:	53                   	push   ebx
c001234e:	e8 cb 87 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	85 c0                	test   eax,eax
c0012358:	74 0a                	je     c0012364 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001235a:	83 ec 0c             	sub    esp,0xc
c001235d:	68 e6 eb 01 c0       	push   0xc001ebe6
c0012362:	eb 34                	jmp    c0012398 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012364:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001236c:	83 ec 0c             	sub    esp,0xc
c001236f:	6a 34                	push   0x34
c0012371:	e8 43 54 ff ff       	call   c00077b9 <malloc>
c0012376:	59                   	pop    ecx
c0012377:	89 c7                	mov    edi,eax
c0012379:	8d 74 24 34          	lea    esi,[esp+0x34]
c001237d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001237f:	56                   	push   esi
c0012380:	57                   	push   edi
c0012381:	6a 00                	push   0x0
c0012383:	6a 34                	push   0x34
c0012385:	53                   	push   ebx
c0012386:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012389:	83 c4 20             	add    esp,0x20
c001238c:	85 c0                	test   eax,eax
c001238e:	74 17                	je     c00123a7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012390:	83 ec 0c             	sub    esp,0xc
c0012393:	68 fd eb 01 c0       	push   0xc001ebfd
c0012398:	e8 b6 dd ff ff       	call   c0010153 <KePanic(char const*)>
c001239d:	83 c4 10             	add    esp,0x10
c00123a0:	31 c0                	xor    eax,eax
c00123a2:	e9 31 02 00 00       	jmp    c00125d8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123a7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123ad:	75 e1                	jne    c0012390 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123af:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123b2:	85 c0                	test   eax,eax
c00123b4:	74 da                	je     c0012390 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123b6:	52                   	push   edx
c00123b7:	31 d2                	xor    edx,edx
c00123b9:	52                   	push   edx
c00123ba:	50                   	push   eax
c00123bb:	53                   	push   ebx
c00123bc:	e8 1b 88 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00123c1:	83 c4 10             	add    esp,0x10
c00123c4:	85 c0                	test   eax,eax
c00123c6:	75 c8                	jne    c0012390 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123cf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123d3:	31 ed                	xor    ebp,ebp
c00123d5:	0f af c2             	imul   eax,edx
c00123d8:	50                   	push   eax
c00123d9:	e8 db 53 ff ff       	call   c00077b9 <malloc>
c00123de:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00123e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123eb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123f3:	0f af c2             	imul   eax,edx
c00123f6:	99                   	cdq    
c00123f7:	52                   	push   edx
c00123f8:	50                   	push   eax
c00123f9:	53                   	push   ebx
c00123fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123fd:	83 c4 20             	add    esp,0x20
c0012400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012408:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012410:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012418:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012420:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012424:	0f 86 aa 00 00 00    	jbe    c00124d4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001242a:	0f b7 f5             	movzx  esi,bp
c001242d:	6b f6 28             	imul   esi,esi,0x28
c0012430:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012434:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012437:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001243b:	50                   	push   eax
c001243c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012440:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012444:	8b 16                	mov    edx,DWORD PTR [esi]
c0012446:	6b c0 28             	imul   eax,eax,0x28
c0012449:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001244d:	89 d0                	mov    eax,edx
c001244f:	31 d2                	xor    edx,edx
c0012451:	52                   	push   edx
c0012452:	50                   	push   eax
c0012453:	53                   	push   ebx
c0012454:	e8 83 87 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012459:	83 c4 0c             	add    esp,0xc
c001245c:	6a 20                	push   0x20
c001245e:	6a 00                	push   0x0
c0012460:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012464:	52                   	push   edx
c0012465:	e8 66 e0 fe ff       	call   c00004d0 <memset>
c001246a:	58                   	pop    eax
c001246b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001246d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012471:	51                   	push   ecx
c0012472:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012476:	52                   	push   edx
c0012477:	6a 00                	push   0x0
c0012479:	6a 1f                	push   0x1f
c001247b:	53                   	push   ebx
c001247c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001247f:	83 c4 18             	add    esp,0x18
c0012482:	68 14 ec 01 c0       	push   0xc001ec14
c0012487:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001248b:	52                   	push   edx
c001248c:	e8 4f e2 fe ff       	call   c00006e0 <strcmp>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	85 c0                	test   eax,eax
c0012496:	75 0f                	jne    c00124a7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012498:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001249b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001249f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a7:	50                   	push   eax
c00124a8:	50                   	push   eax
c00124a9:	68 1c ec 01 c0       	push   0xc001ec1c
c00124ae:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124b2:	50                   	push   eax
c00124b3:	e8 28 e2 fe ff       	call   c00006e0 <strcmp>
c00124b8:	83 c4 10             	add    esp,0x10
c00124bb:	85 c0                	test   eax,eax
c00124bd:	75 0f                	jne    c00124ce <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124ce:	45                   	inc    ebp
c00124cf:	e9 4c ff ff ff       	jmp    c0012420 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124d9:	75 10                	jne    c00124eb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	68 24 ec 01 c0       	push   0xc001ec24
c00124e3:	e8 6b dc ff ff       	call   c0010153 <KePanic(char const*)>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124f0:	75 10                	jne    c0012502 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	68 24 ec 01 c0       	push   0xc001ec24
c00124fa:	e8 54 dc ff ff       	call   c0010153 <KePanic(char const*)>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	31 d2                	xor    edx,edx
c0012504:	50                   	push   eax
c0012505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012509:	52                   	push   edx
c001250a:	50                   	push   eax
c001250b:	53                   	push   ebx
c001250c:	e8 cb 86 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012511:	5a                   	pop    edx
c0012512:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012516:	e8 9e 52 ff ff       	call   c00077b9 <malloc>
c001251b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001251f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012523:	31 c9                	xor    ecx,ecx
c0012525:	5e                   	pop    esi
c0012526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012528:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001252c:	55                   	push   ebp
c001252d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012531:	51                   	push   ecx
c0012532:	52                   	push   edx
c0012533:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012537:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001253b:	53                   	push   ebx
c001253c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001253f:	83 c4 14             	add    esp,0x14
c0012542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012546:	e8 6e 52 ff ff       	call   c00077b9 <malloc>
c001254b:	89 c6                	mov    esi,eax
c001254d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001254f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012552:	56                   	push   esi
c0012553:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012557:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001255b:	51                   	push   ecx
c001255c:	52                   	push   edx
c001255d:	53                   	push   ebx
c001255e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012561:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012565:	8b 15 c0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fc0
c001256b:	83 c4 1c             	add    esp,0x1c
c001256e:	c1 e8 04             	shr    eax,0x4
c0012571:	89 04 95 40 3e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc1c0],eax
c0012578:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001257c:	31 d2                	xor    edx,edx
c001257e:	52                   	push   edx
c001257f:	50                   	push   eax
c0012580:	53                   	push   ebx
c0012581:	e8 56 86 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012586:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012588:	31 d2                	xor    edx,edx
c001258a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001258d:	56                   	push   esi
c001258e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012592:	52                   	push   edx
c0012593:	50                   	push   eax
c0012594:	53                   	push   ebx
c0012595:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012598:	83 c4 14             	add    esp,0x14
c001259b:	53                   	push   ebx
c001259c:	e8 db 85 ff ff       	call   c000ab7c <File::close()>
c00125a1:	5d                   	pop    ebp
c00125a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125a6:	e8 2e 52 ff ff       	call   c00077d9 <free>
c00125ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125ae:	e8 26 52 ff ff       	call   c00077d9 <free>
c00125b3:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c00125b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125bc:	8d 50 01             	lea    edx,[eax+0x1]
c00125bf:	89 0c 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],ecx
c00125c6:	89 34 85 c0 3e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc140],esi
c00125cd:	89 15 c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,edx
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	b0 01                	mov    al,0x1
c00125d8:	83 c4 5c             	add    esp,0x5c
c00125db:	5b                   	pop    ebx
c00125dc:	5e                   	pop    esi
c00125dd:	5f                   	pop    edi
c00125de:	5d                   	pop    ebp
c00125df:	c3                   	ret    

c00125e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125e0:	55                   	push   ebp
c00125e1:	57                   	push   edi
c00125e2:	56                   	push   esi
c00125e3:	53                   	push   ebx
c00125e4:	81 ec 68 03 00 00    	sub    esp,0x368
c00125ea:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125f1:	8b 1d 10 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024010
c00125f7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125fb:	68 14 01 00 00       	push   0x114
c0012600:	e8 b4 51 ff ff       	call   c00077b9 <malloc>
c0012605:	83 c4 0c             	add    esp,0xc
c0012608:	89 c5                	mov    ebp,eax
c001260a:	53                   	push   ebx
c001260b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012612:	50                   	push   eax
c0012613:	e8 46 84 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012618:	5e                   	pop    esi
c0012619:	5f                   	pop    edi
c001261a:	6a 01                	push   0x1
c001261c:	55                   	push   ebp
c001261d:	e8 fc 84 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	85 c0                	test   eax,eax
c0012627:	0f 85 a7 06 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001262d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	6a 34                	push   0x34
c001263a:	e8 7a 51 ff ff       	call   c00077b9 <malloc>
c001263f:	5b                   	pop    ebx
c0012640:	89 c7                	mov    edi,eax
c0012642:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012646:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012649:	53                   	push   ebx
c001264a:	57                   	push   edi
c001264b:	6a 00                	push   0x0
c001264d:	6a 34                	push   0x34
c001264f:	55                   	push   ebp
c0012650:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012653:	83 c4 20             	add    esp,0x20
c0012656:	85 c0                	test   eax,eax
c0012658:	0f 85 76 06 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001265e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012664:	0f 85 6a 06 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001266d:	85 c0                	test   eax,eax
c001266f:	0f 84 5f 06 00 00    	je     c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012675:	31 d2                	xor    edx,edx
c0012677:	51                   	push   ecx
c0012678:	52                   	push   edx
c0012679:	50                   	push   eax
c001267a:	55                   	push   ebp
c001267b:	e8 5c 85 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012680:	83 c4 10             	add    esp,0x10
c0012683:	85 c0                	test   eax,eax
c0012685:	0f 85 49 06 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012691:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012695:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012699:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001269d:	0f af c2             	imul   eax,edx
c00126a0:	50                   	push   eax
c00126a1:	e8 13 51 ff ff       	call   c00077b9 <malloc>
c00126a6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126b4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126b8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126bc:	0f af c2             	imul   eax,edx
c00126bf:	99                   	cdq    
c00126c0:	52                   	push   edx
c00126c1:	50                   	push   eax
c00126c2:	55                   	push   ebp
c00126c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126c6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126c9:	83 c4 20             	add    esp,0x20
c00126cc:	85 c0                	test   eax,eax
c00126ce:	0f 84 00 06 00 00    	je     c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126d4:	52                   	push   edx
c00126d5:	31 d2                	xor    edx,edx
c00126d7:	52                   	push   edx
c00126d8:	50                   	push   eax
c00126d9:	55                   	push   ebp
c00126da:	e8 fd 84 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	85 c0                	test   eax,eax
c00126e4:	0f 85 ea 05 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ea:	83 ec 0c             	sub    esp,0xc
c00126ed:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126f1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126f5:	31 f6                	xor    esi,esi
c00126f7:	0f af c2             	imul   eax,edx
c00126fa:	50                   	push   eax
c00126fb:	e8 b9 50 ff ff       	call   c00077b9 <malloc>
c0012700:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012703:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001270a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001270e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012712:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012716:	0f af c2             	imul   eax,edx
c0012719:	99                   	cdq    
c001271a:	52                   	push   edx
c001271b:	50                   	push   eax
c001271c:	55                   	push   ebp
c001271d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012720:	83 c4 20             	add    esp,0x20
c0012723:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012727:	0f 86 8a 00 00 00    	jbe    c00127b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001272d:	0f b7 de             	movzx  ebx,si
c0012730:	c1 e3 05             	shl    ebx,0x5
c0012733:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012737:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001273a:	75 75                	jne    c00127b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001273c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001273f:	31 d2                	xor    edx,edx
c0012741:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012745:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012748:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001274c:	50                   	push   eax
c001274d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012750:	52                   	push   edx
c0012751:	50                   	push   eax
c0012752:	55                   	push   ebp
c0012753:	e8 84 84 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	85 c0                	test   eax,eax
c001275d:	0f 85 71 05 00 00    	jne    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012763:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001276a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001276d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012771:	31 d2                	xor    edx,edx
c0012773:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012777:	83 ec 0c             	sub    esp,0xc
c001277a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001277e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012785:	50                   	push   eax
c0012786:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001278a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001278e:	52                   	push   edx
c001278f:	50                   	push   eax
c0012790:	55                   	push   ebp
c0012791:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012794:	83 c4 1c             	add    esp,0x1c
c0012797:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001279a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001279d:	50                   	push   eax
c001279e:	6a 00                	push   0x0
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127a8:	50                   	push   eax
c00127a9:	e8 22 dd fe ff       	call   c00004d0 <memset>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	46                   	inc    esi
c00127b2:	e9 6c ff ff ff       	jmp    c0012723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127b7:	53                   	push   ebx
c00127b8:	31 db                	xor    ebx,ebx
c00127ba:	68 00 01 00 00       	push   0x100
c00127bf:	6a 00                	push   0x0
c00127c1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127c5:	50                   	push   eax
c00127c6:	e8 05 dd fe ff       	call   c00004d0 <memset>
c00127cb:	83 c4 0c             	add    esp,0xc
c00127ce:	68 00 01 00 00       	push   0x100
c00127d3:	6a 00                	push   0x0
c00127d5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127dc:	50                   	push   eax
c00127dd:	e8 ee dc fe ff       	call   c00004d0 <memset>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127ed:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127f5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012805:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001280d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012811:	0f 86 30 01 00 00    	jbe    c0012947 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012817:	0f b7 f3             	movzx  esi,bx
c001281a:	6b f6 28             	imul   esi,esi,0x28
c001281d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012821:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012828:	52                   	push   edx
c0012829:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001282d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012831:	8b 06                	mov    eax,DWORD PTR [esi]
c0012833:	6b d2 28             	imul   edx,edx,0x28
c0012836:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001283a:	31 d2                	xor    edx,edx
c001283c:	52                   	push   edx
c001283d:	50                   	push   eax
c001283e:	55                   	push   ebp
c001283f:	e8 98 83 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012844:	83 c4 0c             	add    esp,0xc
c0012847:	6a 20                	push   0x20
c0012849:	6a 00                	push   0x0
c001284b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012852:	51                   	push   ecx
c0012853:	e8 78 dc fe ff       	call   c00004d0 <memset>
c0012858:	59                   	pop    ecx
c0012859:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001285c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012860:	52                   	push   edx
c0012861:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012868:	51                   	push   ecx
c0012869:	6a 00                	push   0x0
c001286b:	6a 1f                	push   0x1f
c001286d:	55                   	push   ebp
c001286e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012871:	83 c4 1c             	add    esp,0x1c
c0012874:	6a 09                	push   0x9
c0012876:	68 3e ec 01 c0       	push   0xc001ec3e
c001287b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012882:	51                   	push   ecx
c0012883:	e8 08 db fe ff       	call   c0000390 <memcmp>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	85 c0                	test   eax,eax
c001288d:	75 21                	jne    c00128b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001288f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012893:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012897:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001289b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001289f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128a2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128a9:	89 d0                	mov    eax,edx
c00128ab:	40                   	inc    eax
c00128ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128b0:	50                   	push   eax
c00128b1:	6a 09                	push   0x9
c00128b3:	68 48 ec 01 c0       	push   0xc001ec48
c00128b8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128bf:	50                   	push   eax
c00128c0:	e8 cb da fe ff       	call   c0000390 <memcmp>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	85 c0                	test   eax,eax
c00128ca:	75 21                	jne    c00128ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128e6:	89 d0                	mov    eax,edx
c00128e8:	40                   	inc    eax
c00128e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128ed:	50                   	push   eax
c00128ee:	50                   	push   eax
c00128ef:	68 14 ec 01 c0       	push   0xc001ec14
c00128f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128fb:	50                   	push   eax
c00128fc:	e8 df dd fe ff       	call   c00006e0 <strcmp>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	85 c0                	test   eax,eax
c0012906:	75 0f                	jne    c0012917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012908:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001290b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001290f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012917:	50                   	push   eax
c0012918:	50                   	push   eax
c0012919:	68 1c ec 01 c0       	push   0xc001ec1c
c001291e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012925:	50                   	push   eax
c0012926:	e8 b5 dd fe ff       	call   c00006e0 <strcmp>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	85 c0                	test   eax,eax
c0012930:	75 0f                	jne    c0012941 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012932:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012935:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001293d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012941:	43                   	inc    ebx
c0012942:	e9 c6 fe ff ff       	jmp    c001280d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012947:	31 d2                	xor    edx,edx
c0012949:	50                   	push   eax
c001294a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001294e:	52                   	push   edx
c001294f:	50                   	push   eax
c0012950:	55                   	push   ebp
c0012951:	e8 86 82 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012956:	58                   	pop    eax
c0012957:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001295b:	e8 59 4e ff ff       	call   c00077b9 <malloc>
c0012960:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012963:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012967:	31 d2                	xor    edx,edx
c0012969:	58                   	pop    eax
c001296a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001296e:	53                   	push   ebx
c001296f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012973:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012977:	52                   	push   edx
c0012978:	50                   	push   eax
c0012979:	55                   	push   ebp
c001297a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001297d:	83 c4 14             	add    esp,0x14
c0012980:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012984:	e8 30 4e ff ff       	call   c00077b9 <malloc>
c0012989:	31 d2                	xor    edx,edx
c001298b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001298f:	83 c4 0c             	add    esp,0xc
c0012992:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012996:	52                   	push   edx
c0012997:	50                   	push   eax
c0012998:	55                   	push   ebp
c0012999:	e8 3e 82 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001299e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129a1:	31 d2                	xor    edx,edx
c00129a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129ae:	52                   	push   edx
c00129af:	50                   	push   eax
c00129b0:	55                   	push   ebp
c00129b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129b4:	83 c4 20             	add    esp,0x20
c00129b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129c3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129c7:	0f 84 0b 03 00 00    	je     c0012cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129cd:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129d4:	31 d2                	xor    edx,edx
c00129d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129da:	c1 e8 03             	shr    eax,0x3
c00129dd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129e1:	51                   	push   ecx
c00129e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129e6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129ea:	52                   	push   edx
c00129eb:	50                   	push   eax
c00129ec:	55                   	push   ebp
c00129ed:	e8 ea 81 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00129f2:	5b                   	pop    ebx
c00129f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129f7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129fe:	e8 b6 4d ff ff       	call   c00077b9 <malloc>
c0012a03:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a0a:	31 d2                	xor    edx,edx
c0012a0c:	5e                   	pop    esi
c0012a0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a11:	50                   	push   eax
c0012a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a1a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a21:	52                   	push   edx
c0012a22:	50                   	push   eax
c0012a23:	55                   	push   ebp
c0012a24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a27:	83 c4 20             	add    esp,0x20
c0012a2a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a36:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a3a:	0f 8d 7c 02 00 00    	jge    c0012cbc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a48:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a4d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a58:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a5c:	89 d8                	mov    eax,ebx
c0012a5e:	c1 e8 08             	shr    eax,0x8
c0012a61:	89 c6                	mov    esi,eax
c0012a63:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a67:	c1 e6 04             	shl    esi,0x4
c0012a6a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a6e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a71:	85 d2                	test   edx,edx
c0012a73:	0f 85 bf 00 00 00    	jne    c0012b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a79:	83 ec 0c             	sub    esp,0xc
c0012a7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a80:	03 06                	add    eax,DWORD PTR [esi]
c0012a82:	50                   	push   eax
c0012a83:	e8 4b f8 ff ff       	call   c00122d3 <Thr::getAddressOfKernelSymbol(char const*)>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	89 c2                	mov    edx,eax
c0012a8d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a92:	85 c0                	test   eax,eax
c0012a94:	0f 85 9e 00 00 00    	jne    c0012b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012aa1:	03 06                	add    eax,DWORD PTR [esi]
c0012aa3:	50                   	push   eax
c0012aa4:	e8 fb d7 ff ff       	call   c00102a4 <KeResolveCompatibilitySymbol(char*)>
c0012aa9:	83 c4 10             	add    esp,0x10
c0012aac:	89 c2                	mov    edx,eax
c0012aae:	85 c0                	test   eax,eax
c0012ab0:	0f 85 82 00 00 00    	jne    c0012b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012ab6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012aba:	50                   	push   eax
c0012abb:	50                   	push   eax
c0012abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ac0:	03 06                	add    eax,DWORD PTR [esi]
c0012ac2:	50                   	push   eax
c0012ac3:	68 52 ec 01 c0       	push   0xc001ec52
c0012ac8:	e8 1b 7a ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012acd:	58                   	pop    eax
c0012ace:	5a                   	pop    edx
c0012acf:	68 6c ec 01 c0       	push   0xc001ec6c
c0012ad4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012adb:	50                   	push   eax
c0012adc:	e8 1f db fe ff       	call   c0000600 <strcpy>
c0012ae1:	59                   	pop    ecx
c0012ae2:	58                   	pop    eax
c0012ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae7:	03 06                	add    eax,DWORD PTR [esi]
c0012ae9:	50                   	push   eax
c0012aea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012af1:	50                   	push   eax
c0012af2:	e8 c9 dc fe ff       	call   c00007c0 <strcat>
c0012af7:	58                   	pop    eax
c0012af8:	5a                   	pop    edx
c0012af9:	68 02 ed 01 c0       	push   0xc001ed02
c0012afe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b05:	50                   	push   eax
c0012b06:	e8 b5 dc fe ff       	call   c00007c0 <strcat>
c0012b0b:	83 c4 10             	add    esp,0x10
c0012b0e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b13:	0f 84 5d 01 00 00    	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b23:	50                   	push   eax
c0012b24:	e8 2a d6 ff ff       	call   c0010153 <KePanic(char const*)>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b34:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b38:	80 fb 01             	cmp    bl,0x1
c0012b3b:	0f 85 88 00 00 00    	jne    c0012bc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b41:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b48:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b4c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b50:	01 ce                	add    esi,ecx
c0012b52:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b58:	0f 94 c0             	sete   al
c0012b5b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b61:	0f 94 c3             	sete   bl
c0012b64:	09 c3                	or     ebx,eax
c0012b66:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b68:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b6d:	74 41                	je     c0012bb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b6f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b72:	84 db                	test   bl,bl
c0012b74:	75 15                	jne    c0012b8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b76:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b7a:	66 83 f8 0c          	cmp    ax,0xc
c0012b7e:	76 05                	jbe    c0012b85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b80:	b8 0c 00 00 00       	mov    eax,0xc
c0012b85:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b89:	76 37                	jbe    c0012bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b8b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b8f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b94:	0f 84 dc 00 00 00    	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	68 83 ec 01 c0       	push   0xc001ec83
c0012ba2:	e8 ac d5 ff ff       	call   c0010153 <KePanic(char const*)>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012bae:	eb 12                	jmp    c0012bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb0:	01 c1                	add    ecx,eax
c0012bb2:	84 db                	test   bl,bl
c0012bb4:	75 0c                	jne    c0012bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bba:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bbe:	77 02                	ja     c0012bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bc0:	01 d1                	add    ecx,edx
c0012bc2:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bc4:	e9 ea 00 00 00       	jmp    c0012cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bc9:	80 fb 02             	cmp    bl,0x2
c0012bcc:	75 7c                	jne    c0012c4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bce:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bd5:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bd9:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bdd:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012be3:	74 20                	je     c0012c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012be5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012beb:	74 18                	je     c0012c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bf1:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bf6:	66 83 f8 0e          	cmp    ax,0xe
c0012bfa:	77 03                	ja     c0012bff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bfc:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bff:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012c03:	76 1f                	jbe    c0012c24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012c05:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c09:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c0e:	74 66                	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	68 9f ec 01 c0       	push   0xc001ec9f
c0012c18:	e8 36 d5 ff ff       	call   c0010153 <KePanic(char const*)>
c0012c1d:	83 c4 10             	add    esp,0x10
c0012c20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c24:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c26:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c2b:	74 13                	je     c0012c40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c2d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c31:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c38:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c3c:	01 c8                	add    eax,ecx
c0012c3e:	eb 04                	jmp    c0012c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c40:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c44:	01 c2                	add    edx,eax
c0012c46:	89 16                	mov    DWORD PTR [esi],edx
c0012c48:	eb 69                	jmp    c0012cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c4a:	0f b6 db             	movzx  ebx,bl
c0012c4d:	50                   	push   eax
c0012c4e:	50                   	push   eax
c0012c4f:	53                   	push   ebx
c0012c50:	68 bb ec 01 c0       	push   0xc001ecbb
c0012c55:	e8 8e 78 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c62:	74 12                	je     c0012c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c64:	83 ec 0c             	sub    esp,0xc
c0012c67:	68 c6 ec 01 c0       	push   0xc001ecc6
c0012c6c:	e8 e2 d4 ff ff       	call   c0010153 <KePanic(char const*)>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	eb 3d                	jmp    c0012cb3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c76:	83 ec 0c             	sub    esp,0xc
c0012c79:	55                   	push   ebp
c0012c7a:	e8 fd 7e ff ff       	call   c000ab7c <File::close()>
c0012c7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c82:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c88:	59                   	pop    ecx
c0012c89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c8d:	e8 47 4b ff ff       	call   c00077d9 <free>
c0012c92:	5b                   	pop    ebx
c0012c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c97:	e8 3d 4b ff ff       	call   c00077d9 <free>
c0012c9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c9f:	e8 35 4b ff ff       	call   c00077d9 <free>
c0012ca4:	5e                   	pop    esi
c0012ca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca9:	e8 2b 4b ff ff       	call   c00077d9 <free>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	eb 21                	jmp    c0012cd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012cb3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cb7:	e9 76 fd ff ff       	jmp    c0012a32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cc3:	e8 11 4b ff ff       	call   c00077d9 <free>
c0012cc8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012ccc:	83 c4 10             	add    esp,0x10
c0012ccf:	e9 eb fc ff ff       	jmp    c00129bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cd4:	31 c0                	xor    eax,eax
c0012cd6:	eb 33                	jmp    c0012d0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cd8:	83 ec 0c             	sub    esp,0xc
c0012cdb:	55                   	push   ebp
c0012cdc:	e8 9b 7e ff ff       	call   c000ab7c <File::close()>
c0012ce1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ce4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ce7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cea:	58                   	pop    eax
c0012ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cef:	e8 e5 4a ff ff       	call   c00077d9 <free>
c0012cf4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cf7:	e8 dd 4a ff ff       	call   c00077d9 <free>
c0012cfc:	5a                   	pop    edx
c0012cfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d01:	e8 d3 4a ff ff       	call   c00077d9 <free>
c0012d06:	83 c4 10             	add    esp,0x10
c0012d09:	b0 01                	mov    al,0x1
c0012d0b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d11:	5b                   	pop    ebx
c0012d12:	5e                   	pop    esi
c0012d13:	5f                   	pop    edi
c0012d14:	5d                   	pop    ebp
c0012d15:	c3                   	ret    

c0012d16 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d16:	56                   	push   esi
c0012d17:	31 d2                	xor    edx,edx
c0012d19:	53                   	push   ebx
c0012d1a:	8b 1d 20 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023820
c0012d20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d24:	39 d3                	cmp    ebx,edx
c0012d26:	7e 1b                	jle    c0012d43 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d28:	8b 04 95 40 3a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc5c0]
c0012d2f:	39 c8                	cmp    eax,ecx
c0012d31:	77 0d                	ja     c0012d40 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d33:	8b 34 95 40 38 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc7c0]
c0012d3a:	01 c6                	add    esi,eax
c0012d3c:	39 ce                	cmp    esi,ecx
c0012d3e:	77 05                	ja     c0012d45 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d40:	42                   	inc    edx
c0012d41:	eb e1                	jmp    c0012d24 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d43:	31 c0                	xor    eax,eax
c0012d45:	5b                   	pop    ebx
c0012d46:	5e                   	pop    esi
c0012d47:	c3                   	ret    

c0012d48 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d48:	53                   	push   ebx
c0012d49:	31 c0                	xor    eax,eax
c0012d4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d4f:	8b 1d 20 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023820
c0012d55:	39 c3                	cmp    ebx,eax
c0012d57:	7e 22                	jle    c0012d7b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d59:	8b 14 85 40 3a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc5c0]
c0012d60:	39 ca                	cmp    edx,ecx
c0012d62:	77 14                	ja     c0012d78 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d64:	03 14 85 40 38 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc7c0]
c0012d6b:	39 ca                	cmp    edx,ecx
c0012d6d:	76 09                	jbe    c0012d78 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d6f:	8b 04 85 40 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc3c0]
c0012d76:	eb 05                	jmp    c0012d7d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d78:	40                   	inc    eax
c0012d79:	eb da                	jmp    c0012d55 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d7b:	31 c0                	xor    eax,eax
c0012d7d:	5b                   	pop    ebx
c0012d7e:	c3                   	ret    

c0012d7f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d7f:	53                   	push   ebx
c0012d80:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d84:	53                   	push   ebx
c0012d85:	e8 8c ff ff ff       	call   c0012d16 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d8a:	5a                   	pop    edx
c0012d8b:	31 d2                	xor    edx,edx
c0012d8d:	85 c0                	test   eax,eax
c0012d8f:	74 04                	je     c0012d95 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d91:	89 da                	mov    edx,ebx
c0012d93:	29 c2                	sub    edx,eax
c0012d95:	89 d0                	mov    eax,edx
c0012d97:	5b                   	pop    ebx
c0012d98:	c3                   	ret    

c0012d99 <Thr::loadDLL(char const*, bool)>:
c0012d99:	55                   	push   ebp
c0012d9a:	57                   	push   edi
c0012d9b:	56                   	push   esi
c0012d9c:	53                   	push   ebx
c0012d9d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012da3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012daa:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012db1:	56                   	push   esi
c0012db2:	68 de ec 01 c0       	push   0xc001ecde
c0012db7:	e8 2c 77 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012dbc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012dc3:	e8 f1 49 ff ff       	call   c00077b9 <malloc>
c0012dc8:	83 c4 0c             	add    esp,0xc
c0012dcb:	89 c3                	mov    ebx,eax
c0012dcd:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c0012dd3:	56                   	push   esi
c0012dd4:	50                   	push   eax
c0012dd5:	e8 84 7c ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012dda:	83 c4 10             	add    esp,0x10
c0012ddd:	85 db                	test   ebx,ebx
c0012ddf:	75 3c                	jne    c0012e1d <Thr::loadDLL(char const*, bool)+0x84>
c0012de1:	89 f8                	mov    eax,edi
c0012de3:	84 c0                	test   al,al
c0012de5:	0f 84 d2 01 00 00    	je     c0012fbd <Thr::loadDLL(char const*, bool)+0x224>
c0012deb:	55                   	push   ebp
c0012dec:	55                   	push   ebp
c0012ded:	68 ef ec 01 c0       	push   0xc001ecef
c0012df2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012df6:	55                   	push   ebp
c0012df7:	e8 04 d8 fe ff       	call   c0000600 <strcpy>
c0012dfc:	58                   	pop    eax
c0012dfd:	5a                   	pop    edx
c0012dfe:	56                   	push   esi
c0012dff:	55                   	push   ebp
c0012e00:	e8 bb d9 fe ff       	call   c00007c0 <strcat>
c0012e05:	59                   	pop    ecx
c0012e06:	58                   	pop    eax
c0012e07:	68 02 ed 01 c0       	push   0xc001ed02
c0012e0c:	55                   	push   ebp
c0012e0d:	e8 ae d9 fe ff       	call   c00007c0 <strcat>
c0012e12:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e15:	e8 39 d3 ff ff       	call   c0010153 <KePanic(char const*)>
c0012e1a:	83 c4 10             	add    esp,0x10
c0012e1d:	51                   	push   ecx
c0012e1e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e22:	50                   	push   eax
c0012e23:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e27:	50                   	push   eax
c0012e28:	53                   	push   ebx
c0012e29:	e8 9c 7f ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0012e2e:	83 c4 10             	add    esp,0x10
c0012e31:	85 db                	test   ebx,ebx
c0012e33:	74 0c                	je     c0012e41 <Thr::loadDLL(char const*, bool)+0xa8>
c0012e35:	83 ec 0c             	sub    esp,0xc
c0012e38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e3a:	53                   	push   ebx
c0012e3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e46:	75 0a                	jne    c0012e52 <Thr::loadDLL(char const*, bool)+0xb9>
c0012e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e4c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e50:	75 3c                	jne    c0012e8e <Thr::loadDLL(char const*, bool)+0xf5>
c0012e52:	89 f8                	mov    eax,edi
c0012e54:	84 c0                	test   al,al
c0012e56:	0f 84 49 01 00 00    	je     c0012fa5 <Thr::loadDLL(char const*, bool)+0x20c>
c0012e5c:	51                   	push   ecx
c0012e5d:	51                   	push   ecx
c0012e5e:	68 ef ec 01 c0       	push   0xc001ecef
c0012e63:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e67:	53                   	push   ebx
c0012e68:	e8 93 d7 fe ff       	call   c0000600 <strcpy>
c0012e6d:	5d                   	pop    ebp
c0012e6e:	58                   	pop    eax
c0012e6f:	56                   	push   esi
c0012e70:	53                   	push   ebx
c0012e71:	e8 4a d9 fe ff       	call   c00007c0 <strcat>
c0012e76:	58                   	pop    eax
c0012e77:	5a                   	pop    edx
c0012e78:	68 02 ed 01 c0       	push   0xc001ed02
c0012e7d:	53                   	push   ebx
c0012e7e:	e8 3d d9 fe ff       	call   c00007c0 <strcat>
c0012e83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e86:	e8 c8 d2 ff ff       	call   c0010153 <KePanic(char const*)>
c0012e8b:	83 c4 10             	add    esp,0x10
c0012e8e:	52                   	push   edx
c0012e8f:	6a 03                	push   0x3
c0012e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e99:	05 ff 0f 00 00       	add    eax,0xfff
c0012e9e:	83 d2 00             	adc    edx,0x0
c0012ea1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ea5:	50                   	push   eax
c0012ea6:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c0012eac:	e8 7d 6b ff ff       	call   c0009a2e <VAS::allocatePages(int, int)>
c0012eb1:	59                   	pop    ecx
c0012eb2:	89 c3                	mov    ebx,eax
c0012eb4:	5d                   	pop    ebp
c0012eb5:	50                   	push   eax
c0012eb6:	68 42 d8 01 c0       	push   0xc001d842
c0012ebb:	e8 28 76 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012ec0:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ec3:	e8 78 d6 fe ff       	call   c0000540 <strlen>
c0012ec8:	8b 2d 20 38 02 c0    	mov    ebp,DWORD PTR ds:0xc0023820
c0012ece:	40                   	inc    eax
c0012ecf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ed2:	e8 e2 48 ff ff       	call   c00077b9 <malloc>
c0012ed7:	89 04 ad 40 3c 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc3c0],eax
c0012ede:	58                   	pop    eax
c0012edf:	a1 20 38 02 c0       	mov    eax,ds:0xc0023820
c0012ee4:	5a                   	pop    edx
c0012ee5:	56                   	push   esi
c0012ee6:	ff 34 85 40 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3c0]
c0012eed:	e8 0e d7 fe ff       	call   c0000600 <strcpy>
c0012ef2:	a1 20 38 02 c0       	mov    eax,ds:0xc0023820
c0012ef7:	8d 50 01             	lea    edx,[eax+0x1]
c0012efa:	89 1c 85 40 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc5c0],ebx
c0012f01:	89 15 20 38 02 c0    	mov    DWORD PTR ds:0xc0023820,edx
c0012f07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f0b:	83 c4 0c             	add    esp,0xc
c0012f0e:	89 14 85 40 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7c0],edx
c0012f15:	6a 01                	push   0x1
c0012f17:	53                   	push   ebx
c0012f18:	56                   	push   esi
c0012f19:	e8 c2 f6 ff ff       	call   c00125e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f1e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f22:	83 c4 10             	add    esp,0x10
c0012f25:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f2a:	0f 85 89 00 00 00    	jne    c0012fb9 <Thr::loadDLL(char const*, bool)+0x220>
c0012f30:	89 f8                	mov    eax,edi
c0012f32:	84 c0                	test   al,al
c0012f34:	74 73                	je     c0012fa9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f36:	83 ec 0c             	sub    esp,0xc
c0012f39:	68 04 ed 01 c0       	push   0xc001ed04
c0012f3e:	e8 10 d2 ff ff       	call   c0010153 <KePanic(char const*)>
c0012f43:	83 c4 10             	add    esp,0x10
c0012f46:	eb 61                	jmp    c0012fa9 <Thr::loadDLL(char const*, bool)+0x210>
c0012f48:	50                   	push   eax
c0012f49:	50                   	push   eax
c0012f4a:	89 e8                	mov    eax,ebp
c0012f4c:	c1 e0 0c             	shl    eax,0xc
c0012f4f:	01 d8                	add    eax,ebx
c0012f51:	50                   	push   eax
c0012f52:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c0012f58:	e8 49 66 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0012f5d:	83 c4 10             	add    esp,0x10
c0012f60:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f62:	a8 60                	test   al,0x60
c0012f64:	75 11                	jne    c0012f77 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f66:	83 ec 0c             	sub    esp,0xc
c0012f69:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f6e:	50                   	push   eax
c0012f6f:	e8 cf 4a ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0012f74:	83 c4 10             	add    esp,0x10
c0012f77:	45                   	inc    ebp
c0012f78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f80:	05 ff 0f 00 00       	add    eax,0xfff
c0012f85:	bf 00 00 00 00       	mov    edi,0x0
c0012f8a:	83 d2 00             	adc    edx,0x0
c0012f8d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f91:	c1 ea 0c             	shr    edx,0xc
c0012f94:	39 c5                	cmp    ebp,eax
c0012f96:	89 d1                	mov    ecx,edx
c0012f98:	89 f8                	mov    eax,edi
c0012f9a:	19 c8                	sbb    eax,ecx
c0012f9c:	72 aa                	jb     c0012f48 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f9e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fa3:	75 18                	jne    c0012fbd <Thr::loadDLL(char const*, bool)+0x224>
c0012fa5:	31 db                	xor    ebx,ebx
c0012fa7:	eb 14                	jmp    c0012fbd <Thr::loadDLL(char const*, bool)+0x224>
c0012fa9:	83 ec 0c             	sub    esp,0xc
c0012fac:	68 23 ed 01 c0       	push   0xc001ed23
c0012fb1:	e8 9d d1 ff ff       	call   c0010153 <KePanic(char const*)>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	31 ed                	xor    ebp,ebp
c0012fbb:	eb bb                	jmp    c0012f78 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fbd:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fc3:	89 d8                	mov    eax,ebx
c0012fc5:	5b                   	pop    ebx
c0012fc6:	5e                   	pop    esi
c0012fc7:	5f                   	pop    edi
c0012fc8:	5d                   	pop    ebp
c0012fc9:	c3                   	ret    

c0012fca <Thr::executeDLL(unsigned long, void*)>:
c0012fca:	56                   	push   esi
c0012fcb:	53                   	push   ebx
c0012fcc:	52                   	push   edx
c0012fcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fd5:	85 db                	test   ebx,ebx
c0012fd7:	75 10                	jne    c0012fe9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fd9:	83 ec 0c             	sub    esp,0xc
c0012fdc:	68 3f ed 01 c0       	push   0xc001ed3f
c0012fe1:	e8 6d d1 ff ff       	call   c0010153 <KePanic(char const*)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	50                   	push   eax
c0012fea:	50                   	push   eax
c0012feb:	53                   	push   ebx
c0012fec:	68 69 ed 01 c0       	push   0xc001ed69
c0012ff1:	e8 f2 74 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012ff6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012ffa:	89 d8                	mov    eax,ebx
c0012ffc:	83 c4 14             	add    esp,0x14
c0012fff:	5b                   	pop    ebx
c0013000:	5e                   	pop    esi
c0013001:	ff e0                	jmp    eax
c0013003:	90                   	nop

c0013004 <userModeEntryPoint(void*)>:
c0013004:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013009:	48                   	dec    eax
c001300a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001300f:	75 03                	jne    c0013014 <userModeEntryPoint(void*)+0x10>
c0013011:	fb                   	sti    
c0013012:	66 90                	xchg   ax,ax
c0013014:	fb                   	sti    
c0013015:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001301a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001301d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013027:	e9 13 d2 fe ff       	jmp    c000023f <goToUsermode>

c001302c <changeTSS>:
c001302c:	83 ec 14             	sub    esp,0x14
c001302f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013034:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013037:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001303c:	c1 e2 15             	shl    edx,0x15
c001303f:	29 d0                	sub    eax,edx
c0013041:	50                   	push   eax
c0013042:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0013047:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001304d:	05 7c 11 00 00       	add    eax,0x117c
c0013052:	50                   	push   eax
c0013053:	e8 90 5b ff ff       	call   c0008be8 <TSS::setESP(unsigned long)>
c0013058:	83 c4 1c             	add    esp,0x1c
c001305b:	c3                   	ret    

c001305c <switchToThread(ThreadControlBlock*)>:
c001305c:	57                   	push   edi
c001305d:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013062:	56                   	push   esi
c0013063:	85 c0                	test   eax,eax
c0013065:	53                   	push   ebx
c0013066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001306a:	0f 85 90 00 00 00    	jne    c0013100 <switchToThread(ThreadControlBlock*)+0xa4>
c0013070:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013073:	80 fa ff             	cmp    dl,0xff
c0013076:	0f 84 80 00 00 00    	je     c00130fc <switchToThread(ThreadControlBlock*)+0xa0>
c001307c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013082:	b8 00 04 00 00       	mov    eax,0x400
c0013087:	29 d0                	sub    eax,edx
c0013089:	d1 f8                	sar    eax,1
c001308b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001308e:	66 90                	xchg   ax,ax
c0013090:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013093:	e8 65 27 00 00       	call   c00157fd <HalQueryPerformanceCounter()>
c0013098:	a3 28 40 02 c0       	mov    ds:0xc0024028,eax
c001309d:	89 15 2c 40 02 c0    	mov    DWORD PTR ds:0xc002402c,edx
c00130a3:	89 c6                	mov    esi,eax
c00130a5:	89 d7                	mov    edi,edx
c00130a7:	2b 35 18 40 02 c0    	sub    esi,DWORD PTR ds:0xc0024018
c00130ad:	a3 18 40 02 c0       	mov    ds:0xc0024018,eax
c00130b2:	1b 3d 1c 40 02 c0    	sbb    edi,DWORD PTR ds:0xc002401c
c00130b8:	89 35 20 40 02 c0    	mov    DWORD PTR ds:0xc0024020,esi
c00130be:	89 3d 24 40 02 c0    	mov    DWORD PTR ds:0xc0024024,edi
c00130c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130ca:	89 15 1c 40 02 c0    	mov    DWORD PTR ds:0xc002401c,edx
c00130d0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130d3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130d6:	01 c6                	add    esi,eax
c00130d8:	11 d7                	adc    edi,edx
c00130da:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130e3:	53                   	push   ebx
c00130e4:	e8 8e d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130e9:	0f 20 c0             	mov    eax,cr0
c00130ec:	83 c8 08             	or     eax,0x8
c00130ef:	0f 22 c0             	mov    cr0,eax
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	5b                   	pop    ebx
c00130f6:	5e                   	pop    esi
c00130f7:	5f                   	pop    edi
c00130f8:	c3                   	ret    
c00130f9:	8d 76 00             	lea    esi,[esi+0x0]
c00130fc:	31 c0                	xor    eax,eax
c00130fe:	eb 90                	jmp    c0013090 <switchToThread(ThreadControlBlock*)+0x34>
c0013100:	5b                   	pop    ebx
c0013101:	c7 05 e0 3f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x1
c001310b:	5e                   	pop    esi
c001310c:	5f                   	pop    edi
c001310d:	c3                   	ret    
c001310e:	66 90                	xchg   ax,ax

c0013110 <Process::addArgs(char**)>:
c0013110:	57                   	push   edi
c0013111:	56                   	push   esi
c0013112:	53                   	push   ebx
c0013113:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013117:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001311b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013125:	85 ff                	test   edi,edi
c0013127:	74 43                	je     c001316c <Process::addArgs(char**)+0x5c>
c0013129:	8b 07                	mov    eax,DWORD PTR [edi]
c001312b:	85 c0                	test   eax,eax
c001312d:	74 3d                	je     c001316c <Process::addArgs(char**)+0x5c>
c001312f:	31 db                	xor    ebx,ebx
c0013131:	8d 76 00             	lea    esi,[esi+0x0]
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	50                   	push   eax
c0013138:	e8 03 d4 fe ff       	call   c0000540 <strlen>
c001313d:	40                   	inc    eax
c001313e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013141:	e8 73 46 ff ff       	call   c00077b9 <malloc>
c0013146:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001314d:	5a                   	pop    edx
c001314e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013151:	59                   	pop    ecx
c0013152:	43                   	inc    ebx
c0013153:	52                   	push   edx
c0013154:	50                   	push   eax
c0013155:	e8 a6 d4 fe ff       	call   c0000600 <strcpy>
c001315a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013166:	85 c0                	test   eax,eax
c0013168:	75 ca                	jne    c0013134 <Process::addArgs(char**)+0x24>
c001316a:	66 90                	xchg   ax,ax
c001316c:	5b                   	pop    ebx
c001316d:	5e                   	pop    esi
c001316e:	5f                   	pop    edi
c001316f:	c3                   	ret    

c0013170 <Process::Process(char const*, Process*, char**)>:
c0013170:	57                   	push   edi
c0013171:	56                   	push   esi
c0013172:	53                   	push   ebx
c0013173:	81 ec e0 00 00 00    	sub    esp,0xe0
c0013179:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013180:	05 0c 02 00 00       	add    eax,0x20c
c0013185:	bb 07 00 00 00       	mov    ebx,0x7
c001318a:	89 c6                	mov    esi,eax
c001318c:	85 db                	test   ebx,ebx
c001318e:	78 14                	js     c00131a4 <Process::Process(char const*, Process*, char**)+0x34>
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	56                   	push   esi
c0013194:	e8 83 99 00 00       	call   c001cb1c <ThreadControlBlock::ThreadControlBlock()>
c0013199:	83 c4 10             	add    esp,0x10
c001319c:	83 c6 5f             	add    esi,0x5f
c001319f:	4b                   	dec    ebx
c00131a0:	eb ea                	jmp    c001318c <Process::Process(char const*, Process*, char**)+0x1c>
c00131a2:	66 90                	xchg   ax,ax
c00131a4:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131ab:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131b2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131b9:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131c0:	83 ec 0c             	sub    esp,0xc
c00131c3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00131ca:	e8 79 cd ff ff       	call   c000ff48 <Krnl::newProcessEnv(Process*)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	89 c2                	mov    edx,eax
c00131d4:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131db:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131e1:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00131e8:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131f1:	a1 0c fd 01 c0       	mov    eax,ds:0xc001fd0c
c00131f6:	8d 50 01             	lea    edx,[eax+0x1]
c00131f9:	89 15 0c fd 01 c0    	mov    DWORD PTR ds:0xc001fd0c,edx
c00131ff:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0013206:	89 02                	mov    DWORD PTR [edx],eax
c0013208:	c7 84 24 d8 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xd8],0x14
c0013213:	83 ec 0c             	sub    esp,0xc
c0013216:	ff b4 24 e4 00 00 00 	push   DWORD PTR [esp+0xe4]
c001321d:	e8 97 45 ff ff       	call   c00077b9 <malloc>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	89 c3                	mov    ebx,eax
c0013227:	83 ec 08             	sub    esp,0x8
c001322a:	6a 00                	push   0x0
c001322c:	53                   	push   ebx
c001322d:	e8 a6 6b ff ff       	call   c0009dd8 <VAS::VAS(bool)>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001323c:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013242:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013249:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013253:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001325a:	8b 94 24 f8 00 00 00 	mov    edx,DWORD PTR [esp+0xf8]
c0013261:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013267:	8b 9c 24 f0 00 00 00 	mov    ebx,DWORD PTR [esp+0xf0]
c001326e:	89 e0                	mov    eax,esp
c0013270:	83 ec 0c             	sub    esp,0xc
c0013273:	50                   	push   eax
c0013274:	e8 fd d1 ff ff       	call   c0010476 <KeInitSignals()>
c0013279:	83 c4 0c             	add    esp,0xc
c001327c:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013282:	89 e0                	mov    eax,esp
c0013284:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013289:	8b 18                	mov    ebx,DWORD PTR [eax]
c001328b:	89 1a                	mov    DWORD PTR [edx],ebx
c001328d:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013291:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c0013295:	8d 5a 04             	lea    ebx,[edx+0x4]
c0013298:	83 e3 fc             	and    ebx,0xfffffffc
c001329b:	29 da                	sub    edx,ebx
c001329d:	29 d0                	sub    eax,edx
c001329f:	01 d1                	add    ecx,edx
c00132a1:	83 e1 fc             	and    ecx,0xfffffffc
c00132a4:	c1 e9 02             	shr    ecx,0x2
c00132a7:	89 ca                	mov    edx,ecx
c00132a9:	fc                   	cld    
c00132aa:	89 df                	mov    edi,ebx
c00132ac:	89 c6                	mov    esi,eax
c00132ae:	89 d1                	mov    ecx,edx
c00132b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00132b2:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132b9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132bf:	85 c0                	test   eax,eax
c00132c1:	74 51                	je     c0013314 <Process::Process(char const*, Process*, char**)+0x1a4>
c00132c3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132ca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132d0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00132d6:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132dd:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00132e3:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132f0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132f6:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00132fd:	05 0c 01 00 00       	add    eax,0x10c
c0013302:	83 ec 08             	sub    esp,0x8
c0013305:	52                   	push   edx
c0013306:	50                   	push   eax
c0013307:	e8 f4 d2 fe ff       	call   c0000600 <strcpy>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	eb 7b                	jmp    c001338c <Process::Process(char const*, Process*, char**)+0x21c>
c0013311:	8d 76 00             	lea    esi,[esi+0x0]
c0013314:	c7 84 24 d4 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xd4],0x134
c001331f:	83 ec 0c             	sub    esp,0xc
c0013322:	ff b4 24 e0 00 00 00 	push   DWORD PTR [esp+0xe0]
c0013329:	e8 8b 44 ff ff       	call   c00077b9 <malloc>
c001332e:	83 c4 10             	add    esp,0x10
c0013331:	89 c3                	mov    ebx,eax
c0013333:	83 ec 08             	sub    esp,0x8
c0013336:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c001333d:	53                   	push   ebx
c001333e:	e8 c7 55 ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001334d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013353:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c001335a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013360:	83 ec 0c             	sub    esp,0xc
c0013363:	50                   	push   eax
c0013364:	e8 41 4e ff ff       	call   c00081aa <addToTerminalCycle(VgaText*)>
c0013369:	83 c4 10             	add    esp,0x10
c001336c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013373:	05 0c 01 00 00       	add    eax,0x10c
c0013378:	83 ec 08             	sub    esp,0x8
c001337b:	68 88 ed 01 c0       	push   0xc001ed88
c0013380:	50                   	push   eax
c0013381:	e8 7a d2 fe ff       	call   c0000600 <strcpy>
c0013386:	83 c4 10             	add    esp,0x10
c0013389:	8d 76 00             	lea    esi,[esi+0x0]
c001338c:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c0013393:	83 c0 0c             	add    eax,0xc
c0013396:	83 ec 08             	sub    esp,0x8
c0013399:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133a0:	50                   	push   eax
c00133a1:	e8 5a d2 fe ff       	call   c0000600 <strcpy>
c00133a6:	83 c4 10             	add    esp,0x10
c00133a9:	83 ec 08             	sub    esp,0x8
c00133ac:	ff b4 24 04 01 00 00 	push   DWORD PTR [esp+0x104]
c00133b3:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133ba:	e8 51 fd ff ff       	call   c0013110 <Process::addArgs(char**)>
c00133bf:	83 c4 10             	add    esp,0x10
c00133c2:	83 ec 08             	sub    esp,0x8
c00133c5:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133cc:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c00133d3:	e8 d2 ec ff ff       	call   c00120aa <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	88 84 24 df 00 00 00 	mov    BYTE PTR [esp+0xdf],al
c00133e2:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c00133e9:	83 f0 01             	xor    eax,0x1
c00133ec:	88 c2                	mov    dl,al
c00133ee:	8b 84 24 f0 00 00 00 	mov    eax,DWORD PTR [esp+0xf0]
c00133f5:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00133fb:	8a 84 24 df 00 00 00 	mov    al,BYTE PTR [esp+0xdf]
c0013402:	25 ff 00 00 00       	and    eax,0xff
c0013407:	83 ec 08             	sub    esp,0x8
c001340a:	50                   	push   eax
c001340b:	68 e0 ed 01 c0       	push   0xc001ede0
c0013410:	e8 d3 70 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013415:	83 c4 10             	add    esp,0x10
c0013418:	90                   	nop
c0013419:	81 c4 e0 00 00 00    	add    esp,0xe0
c001341f:	5b                   	pop    ebx
c0013420:	5e                   	pop    esi
c0013421:	5f                   	pop    edi
c0013422:	c3                   	ret    
c0013423:	90                   	nop

c0013424 <Process::Process(bool, char const*, Process*, char**)>:
c0013424:	57                   	push   edi
c0013425:	56                   	push   esi
c0013426:	53                   	push   ebx
c0013427:	81 ec f0 00 00 00    	sub    esp,0xf0
c001342d:	8b 84 24 04 01 00 00 	mov    eax,DWORD PTR [esp+0x104]
c0013434:	88 84 24 dc 00 00 00 	mov    BYTE PTR [esp+0xdc],al
c001343b:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013442:	05 0c 02 00 00       	add    eax,0x20c
c0013447:	bb 07 00 00 00       	mov    ebx,0x7
c001344c:	89 c6                	mov    esi,eax
c001344e:	66 90                	xchg   ax,ax
c0013450:	85 db                	test   ebx,ebx
c0013452:	78 14                	js     c0013468 <Process::Process(bool, char const*, Process*, char**)+0x44>
c0013454:	83 ec 0c             	sub    esp,0xc
c0013457:	56                   	push   esi
c0013458:	e8 bf 96 00 00       	call   c001cb1c <ThreadControlBlock::ThreadControlBlock()>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	83 c6 5f             	add    esi,0x5f
c0013463:	4b                   	dec    ebx
c0013464:	eb ea                	jmp    c0013450 <Process::Process(bool, char const*, Process*, char**)+0x2c>
c0013466:	66 90                	xchg   ax,ax
c0013468:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001346f:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013476:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001347d:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013484:	83 ec 0c             	sub    esp,0xc
c0013487:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001348e:	e8 b5 ca ff ff       	call   c000ff48 <Krnl::newProcessEnv(Process*)>
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	89 c2                	mov    edx,eax
c0013498:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001349f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00134a5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00134ac:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00134b5:	a1 0c fd 01 c0       	mov    eax,ds:0xc001fd0c
c00134ba:	8d 50 01             	lea    edx,[eax+0x1]
c00134bd:	89 15 0c fd 01 c0    	mov    DWORD PTR ds:0xc001fd0c,edx
c00134c3:	8b 94 24 00 01 00 00 	mov    edx,DWORD PTR [esp+0x100]
c00134ca:	89 02                	mov    DWORD PTR [edx],eax
c00134cc:	c7 84 24 ec 00 00 00 14 00 00 00 	mov    DWORD PTR [esp+0xec],0x14
c00134d7:	83 ec 0c             	sub    esp,0xc
c00134da:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
c00134e1:	e8 d3 42 ff ff       	call   c00077b9 <malloc>
c00134e6:	83 c4 10             	add    esp,0x10
c00134e9:	89 c3                	mov    ebx,eax
c00134eb:	8a 84 24 dc 00 00 00 	mov    al,BYTE PTR [esp+0xdc]
c00134f2:	25 ff 00 00 00       	and    eax,0xff
c00134f7:	83 ec 08             	sub    esp,0x8
c00134fa:	50                   	push   eax
c00134fb:	53                   	push   ebx
c00134fc:	e8 d7 68 ff ff       	call   c0009dd8 <VAS::VAS(bool)>
c0013501:	83 c4 10             	add    esp,0x10
c0013504:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001350b:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013511:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013518:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013522:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013529:	8b 94 24 0c 01 00 00 	mov    edx,DWORD PTR [esp+0x10c]
c0013530:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013536:	8b 9c 24 00 01 00 00 	mov    ebx,DWORD PTR [esp+0x100]
c001353d:	89 e0                	mov    eax,esp
c001353f:	83 ec 0c             	sub    esp,0xc
c0013542:	50                   	push   eax
c0013543:	e8 2e cf ff ff       	call   c0010476 <KeInitSignals()>
c0013548:	83 c4 0c             	add    esp,0xc
c001354b:	8d 93 20 07 00 00    	lea    edx,[ebx+0x720]
c0013551:	89 e0                	mov    eax,esp
c0013553:	b9 c8 00 00 00       	mov    ecx,0xc8
c0013558:	8b 18                	mov    ebx,DWORD PTR [eax]
c001355a:	89 1a                	mov    DWORD PTR [edx],ebx
c001355c:	8b 5c 08 fc          	mov    ebx,DWORD PTR [eax+ecx*1-0x4]
c0013560:	89 5c 0a fc          	mov    DWORD PTR [edx+ecx*1-0x4],ebx
c0013564:	8d 5a 04             	lea    ebx,[edx+0x4]
c0013567:	83 e3 fc             	and    ebx,0xfffffffc
c001356a:	29 da                	sub    edx,ebx
c001356c:	29 d0                	sub    eax,edx
c001356e:	01 d1                	add    ecx,edx
c0013570:	83 e1 fc             	and    ecx,0xfffffffc
c0013573:	c1 e9 02             	shr    ecx,0x2
c0013576:	89 ca                	mov    edx,ecx
c0013578:	fc                   	cld    
c0013579:	89 df                	mov    edi,ebx
c001357b:	89 c6                	mov    esi,eax
c001357d:	89 d1                	mov    ecx,edx
c001357f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013581:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013588:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001358e:	85 c0                	test   eax,eax
c0013590:	74 4e                	je     c00135e0 <Process::Process(bool, char const*, Process*, char**)+0x1bc>
c0013592:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013599:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001359f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00135a5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135ac:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135b2:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135b9:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135bf:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135c5:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c00135cc:	05 0c 01 00 00       	add    eax,0x10c
c00135d1:	83 ec 08             	sub    esp,0x8
c00135d4:	52                   	push   edx
c00135d5:	50                   	push   eax
c00135d6:	e8 25 d0 fe ff       	call   c0000600 <strcpy>
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	eb 78                	jmp    c0013658 <Process::Process(bool, char const*, Process*, char**)+0x234>
c00135e0:	c7 84 24 e8 00 00 00 34 01 00 00 	mov    DWORD PTR [esp+0xe8],0x134
c00135eb:	83 ec 0c             	sub    esp,0xc
c00135ee:	ff b4 24 f4 00 00 00 	push   DWORD PTR [esp+0xf4]
c00135f5:	e8 bf 41 ff ff       	call   c00077b9 <malloc>
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	89 c3                	mov    ebx,eax
c00135ff:	83 ec 08             	sub    esp,0x8
c0013602:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c0013609:	53                   	push   ebx
c001360a:	e8 fb 52 ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c001360f:	83 c4 10             	add    esp,0x10
c0013612:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013619:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001361f:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c0013626:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	50                   	push   eax
c0013630:	e8 75 4b ff ff       	call   c00081aa <addToTerminalCycle(VgaText*)>
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001363f:	05 0c 01 00 00       	add    eax,0x10c
c0013644:	83 ec 08             	sub    esp,0x8
c0013647:	68 88 ed 01 c0       	push   0xc001ed88
c001364c:	50                   	push   eax
c001364d:	e8 ae cf fe ff       	call   c0000600 <strcpy>
c0013652:	83 c4 10             	add    esp,0x10
c0013655:	8d 76 00             	lea    esi,[esi+0x0]
c0013658:	8b 84 24 00 01 00 00 	mov    eax,DWORD PTR [esp+0x100]
c001365f:	83 c0 0c             	add    eax,0xc
c0013662:	83 ec 08             	sub    esp,0x8
c0013665:	ff b4 24 10 01 00 00 	push   DWORD PTR [esp+0x110]
c001366c:	50                   	push   eax
c001366d:	e8 8e cf fe ff       	call   c0000600 <strcpy>
c0013672:	83 c4 10             	add    esp,0x10
c0013675:	83 ec 08             	sub    esp,0x8
c0013678:	ff b4 24 18 01 00 00 	push   DWORD PTR [esp+0x118]
c001367f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013686:	e8 85 fa ff ff       	call   c0013110 <Process::addArgs(char**)>
c001368b:	83 c4 10             	add    esp,0x10
c001368e:	90                   	nop
c001368f:	81 c4 f0 00 00 00    	add    esp,0xf0
c0013695:	5b                   	pop    ebx
c0013696:	5e                   	pop    esi
c0013697:	5f                   	pop    edi
c0013698:	c3                   	ret    
c0013699:	8d 76 00             	lea    esi,[esi+0x0]

c001369c <taskStartupFunction>:
c001369c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136a1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop
c00136a6:	66 90                	xchg   ax,ax

c00136a8 <Semaphore::Semaphore(int)>:
c00136a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136b0:	89 10                	mov    DWORD PTR [eax],edx
c00136b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136b6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136d3:	90                   	nop
c00136d4:	c3                   	ret    
c00136d5:	90                   	nop
c00136d6:	66 90                	xchg   ax,ax

c00136d8 <Mutex::Mutex()>:
c00136d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136dc:	6a 01                	push   0x1
c00136de:	50                   	push   eax
c00136df:	e8 c4 ff ff ff       	call   c00136a8 <Semaphore::Semaphore(int)>
c00136e4:	83 c4 08             	add    esp,0x8
c00136e7:	90                   	nop
c00136e8:	c3                   	ret    
c00136e9:	90                   	nop
c00136ea:	66 90                	xchg   ax,ax

c00136ec <Process::createThread(void (*)(void*), void*, int)>:
c00136ec:	57                   	push   edi
c00136ed:	31 c9                	xor    ecx,ecx
c00136ef:	56                   	push   esi
c00136f0:	53                   	push   ebx
c00136f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136f5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00136fc:	89 f2                	mov    edx,esi
c00136fe:	66 90                	xchg   ax,ax
c0013700:	31 c0                	xor    eax,eax
c0013702:	66 89 d0             	mov    ax,dx
c0013705:	83 e2 01             	and    edx,0x1
c0013708:	74 12                	je     c001371c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001370a:	d1 f8                	sar    eax,1
c001370c:	41                   	inc    ecx
c001370d:	89 c2                	mov    edx,eax
c001370f:	83 f9 10             	cmp    ecx,0x10
c0013712:	75 ec                	jne    c0013700 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013714:	31 db                	xor    ebx,ebx
c0013716:	89 d8                	mov    eax,ebx
c0013718:	5b                   	pop    ebx
c0013719:	5e                   	pop    esi
c001371a:	5f                   	pop    edi
c001371b:	c3                   	ret    
c001371c:	b8 01 00 00 00       	mov    eax,0x1
c0013721:	d3 e0                	shl    eax,cl
c0013723:	09 c6                	or     esi,eax
c0013725:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013728:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001372f:	01 c0                	add    eax,eax
c0013731:	01 c8                	add    eax,ecx
c0013733:	8d 04 80             	lea    eax,[eax+eax*4]
c0013736:	01 d8                	add    eax,ebx
c0013738:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001373f:	75 0b                	jne    c001374c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013741:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001374b:	90                   	nop
c001374c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013752:	83 ec 08             	sub    esp,0x8
c0013755:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013758:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001375b:	01 c0                	add    eax,eax
c001375d:	01 c8                	add    eax,ecx
c001375f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013762:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013765:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001376b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013771:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013775:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001377b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013781:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013788:	89 ca                	mov    edx,ecx
c001378a:	f7 da                	neg    edx
c001378c:	c1 e2 15             	shl    edx,0x15
c001378f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013795:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001379b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001379f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00137a9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00137af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137b3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137b9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137c3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137cd:	53                   	push   ebx
c00137ce:	68 04 40 02 c0       	push   0xc0024004
c00137d3:	e8 e4 90 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	89 d8                	mov    eax,ebx
c00137dd:	5b                   	pop    ebx
c00137de:	5e                   	pop    esi
c00137df:	5f                   	pop    edi
c00137e0:	c3                   	ret    
c00137e1:	90                   	nop
c00137e2:	66 90                	xchg   ax,ax

c00137e4 <Process::createUserThread()>:
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	68 80 00 00 00       	push   0x80
c00137ec:	6a 00                	push   0x0
c00137ee:	68 04 30 01 c0       	push   0xc0013004
c00137f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137f7:	50                   	push   eax
c00137f8:	e8 ef fe ff ff       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c00137fd:	83 c4 1c             	add    esp,0x1c
c0013800:	c3                   	ret    
c0013801:	8d 76 00             	lea    esi,[esi+0x0]

c0013804 <setupMultitasking(void (*)())>:
c0013804:	56                   	push   esi
c0013805:	53                   	push   ebx
c0013806:	53                   	push   ebx
c0013807:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001380b:	eb 13                	jmp    c0013820 <setupMultitasking(void (*)())+0x1c>
c001380d:	8d 76 00             	lea    esi,[esi+0x0]
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	68 04 40 02 c0       	push   0xc0024004
c0013818:	e8 e7 8f 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001381d:	83 c4 10             	add    esp,0x10
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	68 04 40 02 c0       	push   0xc0024004
c0013828:	e8 b3 8f 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	84 c0                	test   al,al
c0013832:	74 dc                	je     c0013810 <setupMultitasking(void (*)())+0xc>
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	68 e8 07 00 00       	push   0x7e8
c001383c:	e8 78 3f ff ff       	call   c00077b9 <malloc>
c0013841:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013848:	89 c3                	mov    ebx,eax
c001384a:	6a 00                	push   0x0
c001384c:	68 8c ed 01 c0       	push   0xc001ed8c
c0013851:	6a 01                	push   0x1
c0013853:	50                   	push   eax
c0013854:	e8 cb fb ff ff       	call   c0013424 <Process::Process(bool, char const*, Process*, char**)>
c0013859:	83 c4 14             	add    esp,0x14
c001385c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013862:	89 1d 10 40 02 c0    	mov    DWORD PTR ds:0xc0024010,ebx
c0013868:	50                   	push   eax
c0013869:	e8 99 4b ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c001386e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013876:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013880:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013886:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013889:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013893:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013899:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001389f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00138a9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138b3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138bd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138c3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138c9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138d3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138d9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00138e3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00138e9:	5a                   	pop    edx
c00138ea:	59                   	pop    ecx
c00138eb:	68 88 ed 01 c0       	push   0xc001ed88
c00138f0:	50                   	push   eax
c00138f1:	e8 0a cd fe ff       	call   c0000600 <strcpy>
c00138f6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00138fd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013901:	83 c4 14             	add    esp,0x14
c0013904:	5b                   	pop    ebx
c0013905:	5e                   	pop    esi
c0013906:	e9 5e c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001390b:	90                   	nop

c001390c <schedule()>:
c001390c:	8b 15 e4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fe4
c0013912:	85 d2                	test   edx,edx
c0013914:	74 0e                	je     c0013924 <schedule()+0x18>
c0013916:	c7 05 e0 3f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x1
c0013920:	c3                   	ret    
c0013921:	8d 76 00             	lea    esi,[esi+0x0]
c0013924:	53                   	push   ebx
c0013925:	83 ec 14             	sub    esp,0x14
c0013928:	68 04 40 02 c0       	push   0xc0024004
c001392d:	e8 ae 8e 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	84 c0                	test   al,al
c0013937:	75 3b                	jne    c0013974 <schedule()+0x68>
c0013939:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001393e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013941:	4a                   	dec    edx
c0013942:	74 38                	je     c001397c <schedule()+0x70>
c0013944:	83 ec 0c             	sub    esp,0xc
c0013947:	68 04 40 02 c0       	push   0xc0024004
c001394c:	e8 ab 8e 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013951:	c7 04 24 04 40 02 c0 	mov    DWORD PTR [esp],0xc0024004
c0013958:	89 c3                	mov    ebx,eax
c001395a:	e8 a5 8e 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001395f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013966:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013969:	e8 ee f6 ff ff       	call   c001305c <switchToThread(ThreadControlBlock*)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	8d 76 00             	lea    esi,[esi+0x0]
c0013974:	83 c4 08             	add    esp,0x8
c0013977:	5b                   	pop    ebx
c0013978:	c3                   	ret    
c0013979:	8d 76 00             	lea    esi,[esi+0x0]
c001397c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013983:	83 ec 08             	sub    esp,0x8
c0013986:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001398b:	50                   	push   eax
c001398c:	68 04 40 02 c0       	push   0xc0024004
c0013991:	e8 26 8f 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013996:	83 c4 10             	add    esp,0x10
c0013999:	eb a9                	jmp    c0013944 <schedule()+0x38>
c001399b:	90                   	nop

c001399c <Semaphore::tryAcquire()>:
c001399c:	53                   	push   ebx
c001399d:	83 ec 08             	sub    esp,0x8
c00139a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139a4:	fa                   	cli    
c00139a5:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00139aa:	8d 50 01             	lea    edx,[eax+0x1]
c00139ad:	89 15 e8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe8,edx
c00139b3:	8b 15 e4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fe4
c00139b9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139bc:	89 1d e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,ebx
c00139c2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139c5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139c7:	7c 33                	jl     c00139fc <Semaphore::tryAcquire()+0x60>
c00139c9:	89 15 e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,edx
c00139cf:	85 d2                	test   edx,edx
c00139d1:	75 0d                	jne    c00139e0 <Semaphore::tryAcquire()+0x44>
c00139d3:	8b 15 e0 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fe0
c00139d9:	85 d2                	test   edx,edx
c00139db:	75 6b                	jne    c0013a48 <Semaphore::tryAcquire()+0xac>
c00139dd:	8d 76 00             	lea    esi,[esi+0x0]
c00139e0:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00139e5:	85 c0                	test   eax,eax
c00139e7:	74 0b                	je     c00139f4 <Semaphore::tryAcquire()+0x58>
c00139e9:	8d 76 00             	lea    esi,[esi+0x0]
c00139ec:	31 c0                	xor    eax,eax
c00139ee:	83 c4 08             	add    esp,0x8
c00139f1:	5b                   	pop    ebx
c00139f2:	c3                   	ret    
c00139f3:	90                   	nop
c00139f4:	fb                   	sti    
c00139f5:	83 c4 08             	add    esp,0x8
c00139f8:	5b                   	pop    ebx
c00139f9:	c3                   	ret    
c00139fa:	66 90                	xchg   ax,ax
c00139fc:	43                   	inc    ebx
c00139fd:	89 15 e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,edx
c0013a03:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013a06:	85 d2                	test   edx,edx
c0013a08:	75 22                	jne    c0013a2c <Semaphore::tryAcquire()+0x90>
c0013a0a:	8b 0d e0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fe0
c0013a10:	85 c9                	test   ecx,ecx
c0013a12:	74 18                	je     c0013a2c <Semaphore::tryAcquire()+0x90>
c0013a14:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0013a1e:	e8 e9 fe ff ff       	call   c001390c <schedule()>
c0013a23:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013a28:	48                   	dec    eax
c0013a29:	8d 76 00             	lea    esi,[esi+0x0]
c0013a2c:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013a31:	85 c0                	test   eax,eax
c0013a33:	75 0b                	jne    c0013a40 <Semaphore::tryAcquire()+0xa4>
c0013a35:	fb                   	sti    
c0013a36:	b0 01                	mov    al,0x1
c0013a38:	83 c4 08             	add    esp,0x8
c0013a3b:	5b                   	pop    ebx
c0013a3c:	c3                   	ret    
c0013a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a40:	b0 01                	mov    al,0x1
c0013a42:	83 c4 08             	add    esp,0x8
c0013a45:	5b                   	pop    ebx
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop
c0013a48:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0013a52:	e8 b5 fe ff ff       	call   c001390c <schedule()>
c0013a57:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013a5c:	48                   	dec    eax
c0013a5d:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013a62:	85 c0                	test   eax,eax
c0013a64:	75 86                	jne    c00139ec <Semaphore::tryAcquire()+0x50>
c0013a66:	eb 8c                	jmp    c00139f4 <Semaphore::tryAcquire()+0x58>

c0013a68 <Semaphore::assertLocked(char const*)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a6f:	fa                   	cli    
c0013a70:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013a76:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013a7b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a7e:	89 0d e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,ecx
c0013a84:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013a86:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013a89:	7c 29                	jl     c0013ab4 <Semaphore::assertLocked(char const*)+0x4c>
c0013a8b:	90                   	nop
c0013a8c:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c0013a91:	85 c0                	test   eax,eax
c0013a93:	75 0b                	jne    c0013aa0 <Semaphore::assertLocked(char const*)+0x38>
c0013a95:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c0013a9a:	85 c0                	test   eax,eax
c0013a9c:	75 2e                	jne    c0013acc <Semaphore::assertLocked(char const*)+0x64>
c0013a9e:	66 90                	xchg   ax,ax
c0013aa0:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013aa5:	48                   	dec    eax
c0013aa6:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013aab:	75 03                	jne    c0013ab0 <Semaphore::assertLocked(char const*)+0x48>
c0013aad:	fb                   	sti    
c0013aae:	66 90                	xchg   ax,ax
c0013ab0:	83 c4 0c             	add    esp,0xc
c0013ab3:	c3                   	ret    
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013abb:	52                   	push   edx
c0013abc:	e8 92 c6 ff ff       	call   c0010153 <KePanic(char const*)>
c0013ac1:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013ac6:	83 c4 10             	add    esp,0x10
c0013ac9:	48                   	dec    eax
c0013aca:	eb c0                	jmp    c0013a8c <Semaphore::assertLocked(char const*)+0x24>
c0013acc:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0013ad6:	e8 31 fe ff ff       	call   c001390c <schedule()>
c0013adb:	eb c3                	jmp    c0013aa0 <Semaphore::assertLocked(char const*)+0x38>
c0013add:	8d 76 00             	lea    esi,[esi+0x0]

c0013ae0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013aef:	e8 18 fe ff ff       	call   c001390c <schedule()>
c0013af4:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013af9:	48                   	dec    eax
c0013afa:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013aff:	75 03                	jne    c0013b04 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013b01:	fb                   	sti    
c0013b02:	66 90                	xchg   ax,ax
c0013b04:	83 c4 0c             	add    esp,0xc
c0013b07:	c3                   	ret    

c0013b08 <blockTask(TaskState)>:
c0013b08:	83 ec 0c             	sub    esp,0xc
c0013b0b:	fa                   	cli    
c0013b0c:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013b12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b1b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b1e:	e8 e9 fd ff ff       	call   c001390c <schedule()>
c0013b23:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013b28:	48                   	dec    eax
c0013b29:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013b2e:	75 04                	jne    c0013b34 <blockTask(TaskState)+0x2c>
c0013b30:	fb                   	sti    
c0013b31:	8d 76 00             	lea    esi,[esi+0x0]
c0013b34:	83 c4 0c             	add    esp,0xc
c0013b37:	c3                   	ret    

c0013b38 <waitTask(int, int*, int)>:
c0013b38:	83 ec 18             	sub    esp,0x18
c0013b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b44:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b50:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b53:	6a 07                	push   0x7
c0013b55:	e8 ae ff ff ff       	call   c0013b08 <blockTask(TaskState)>
c0013b5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b65:	85 d2                	test   edx,edx
c0013b67:	74 0b                	je     c0013b74 <waitTask(int, int*, int)+0x3c>
c0013b69:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b6c:	89 02                	mov    DWORD PTR [edx],eax
c0013b6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b73:	90                   	nop
c0013b74:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop

c0013b7c <milliTenthSleepUntil(unsigned int)>:
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b83:	39 05 0c 33 02 c0    	cmp    DWORD PTR ds:0xc002330c,eax
c0013b89:	76 05                	jbe    c0013b90 <milliTenthSleepUntil(unsigned int)+0x14>
c0013b8b:	90                   	nop
c0013b8c:	83 c4 0c             	add    esp,0xc
c0013b8f:	c3                   	ret    
c0013b90:	fa                   	cli    
c0013b91:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013b97:	83 ec 08             	sub    esp,0x8
c0013b9a:	ff 05 e4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe4
c0013ba0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ba6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013ba9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013baf:	52                   	push   edx
c0013bb0:	68 f8 3f 02 c0       	push   0xc0023ff8
c0013bb5:	e8 02 8d 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013bba:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013bc1:	e8 42 ff ff ff       	call   c0013b08 <blockTask(TaskState)>
c0013bc6:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	48                   	dec    eax
c0013bcf:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c0013bd4:	85 c0                	test   eax,eax
c0013bd6:	75 0c                	jne    c0013be4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013bd8:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c0013bdd:	85 c0                	test   eax,eax
c0013bdf:	75 17                	jne    c0013bf8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013be1:	8d 76 00             	lea    esi,[esi+0x0]
c0013be4:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013be9:	48                   	dec    eax
c0013bea:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013bef:	75 9b                	jne    c0013b8c <milliTenthSleepUntil(unsigned int)+0x10>
c0013bf1:	fb                   	sti    
c0013bf2:	83 c4 0c             	add    esp,0xc
c0013bf5:	c3                   	ret    
c0013bf6:	66 90                	xchg   ax,ax
c0013bf8:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0013c02:	e8 05 fd ff ff       	call   c001390c <schedule()>
c0013c07:	eb db                	jmp    c0013be4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013c09:	8d 76 00             	lea    esi,[esi+0x0]

c0013c0c <milliTenthSleep(unsigned int)>:
c0013c0c:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c0013c11:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c15:	e9 62 ff ff ff       	jmp    c0013b7c <milliTenthSleepUntil(unsigned int)>
c0013c1a:	66 90                	xchg   ax,ax

c0013c1c <sleep(unsigned int)>:
c0013c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c20:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c23:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c26:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c29:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c2c:	c1 e0 04             	shl    eax,0x4
c0013c2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c33:	eb d7                	jmp    c0013c0c <milliTenthSleep(unsigned int)>
c0013c35:	90                   	nop
c0013c36:	66 90                	xchg   ax,ax

c0013c38 <Semaphore::acquire()>:
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c3f:	fa                   	cli    
c0013c40:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013c45:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013c4b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c4e:	89 0d e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,ecx
c0013c54:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c57:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c59:	7d 2d                	jge    c0013c88 <Semaphore::acquire()+0x50>
c0013c5b:	41                   	inc    ecx
c0013c5c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c5f:	90                   	nop
c0013c60:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c0013c65:	85 c0                	test   eax,eax
c0013c67:	75 0b                	jne    c0013c74 <Semaphore::acquire()+0x3c>
c0013c69:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c0013c6e:	85 c0                	test   eax,eax
c0013c70:	75 62                	jne    c0013cd4 <Semaphore::acquire()+0x9c>
c0013c72:	66 90                	xchg   ax,ax
c0013c74:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013c79:	48                   	dec    eax
c0013c7a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013c7f:	75 03                	jne    c0013c84 <Semaphore::acquire()+0x4c>
c0013c81:	fb                   	sti    
c0013c82:	66 90                	xchg   ax,ax
c0013c84:	83 c4 0c             	add    esp,0xc
c0013c87:	c3                   	ret    
c0013c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013c94:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013c97:	85 c9                	test   ecx,ecx
c0013c99:	74 4d                	je     c0013ce8 <Semaphore::acquire()+0xb0>
c0013c9b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013c9e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013ca4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013ca7:	90                   	nop
c0013ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cad:	83 ec 0c             	sub    esp,0xc
c0013cb0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013cb3:	68 08 ee 01 c0       	push   0xc001ee08
c0013cb8:	e8 2b 68 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013cbd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013cc4:	e8 3f fe ff ff       	call   c0013b08 <blockTask(TaskState)>
c0013cc9:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	48                   	dec    eax
c0013cd2:	eb 8c                	jmp    c0013c60 <Semaphore::acquire()+0x28>
c0013cd4:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0013cde:	e8 29 fc ff ff       	call   c001390c <schedule()>
c0013ce3:	eb 8f                	jmp    c0013c74 <Semaphore::acquire()+0x3c>
c0013ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ced:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013cf0:	eb b6                	jmp    c0013ca8 <Semaphore::acquire()+0x70>
c0013cf2:	66 90                	xchg   ax,ax

c0013cf4 <taskReturned>:
c0013cf4:	83 ec 18             	sub    esp,0x18
c0013cf7:	68 28 ee 01 c0       	push   0xc001ee28
c0013cfc:	e8 52 c4 ff ff       	call   c0010153 <KePanic(char const*)>
c0013d01:	83 c4 10             	add    esp,0x10
c0013d04:	83 ec 0c             	sub    esp,0xc
c0013d07:	6a 02                	push   0x2
c0013d09:	e8 fa fd ff ff       	call   c0013b08 <blockTask(TaskState)>
c0013d0e:	fa                   	cli    
c0013d0f:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013d15:	e8 f2 fb ff ff       	call   c001390c <schedule()>
c0013d1a:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	48                   	dec    eax
c0013d23:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013d28:	85 c0                	test   eax,eax
c0013d2a:	75 d8                	jne    c0013d04 <taskReturned+0x10>
c0013d2c:	fb                   	sti    
c0013d2d:	eb d5                	jmp    c0013d04 <taskReturned+0x10>
c0013d2f:	90                   	nop

c0013d30 <Thr::processFromPID(int)>:
c0013d30:	57                   	push   edi
c0013d31:	56                   	push   esi
c0013d32:	53                   	push   ebx
c0013d33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d37:	fa                   	cli    
c0013d38:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	68 04 40 02 c0       	push   0xc0024004
c0013d46:	e8 b1 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	89 c7                	mov    edi,eax
c0013d50:	eb 16                	jmp    c0013d68 <Thr::processFromPID(int)+0x38>
c0013d52:	66 90                	xchg   ax,ax
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	68 04 40 02 c0       	push   0xc0024004
c0013d5c:	e8 9b 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	39 f8                	cmp    eax,edi
c0013d66:	74 4c                	je     c0013db4 <Thr::processFromPID(int)+0x84>
c0013d68:	83 ec 0c             	sub    esp,0xc
c0013d6b:	68 04 40 02 c0       	push   0xc0024004
c0013d70:	e8 87 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d75:	c7 04 24 04 40 02 c0 	mov    DWORD PTR [esp],0xc0024004
c0013d7c:	89 c3                	mov    ebx,eax
c0013d7e:	e8 81 8a 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d83:	58                   	pop    eax
c0013d84:	5a                   	pop    edx
c0013d85:	53                   	push   ebx
c0013d86:	68 04 40 02 c0       	push   0xc0024004
c0013d8b:	e8 2c 8b 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d93:	83 c4 10             	add    esp,0x10
c0013d96:	39 30                	cmp    DWORD PTR [eax],esi
c0013d98:	75 ba                	jne    c0013d54 <Thr::processFromPID(int)+0x24>
c0013d9a:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013d9f:	48                   	dec    eax
c0013da0:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013da5:	74 09                	je     c0013db0 <Thr::processFromPID(int)+0x80>
c0013da7:	90                   	nop
c0013da8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dab:	5b                   	pop    ebx
c0013dac:	5e                   	pop    esi
c0013dad:	5f                   	pop    edi
c0013dae:	c3                   	ret    
c0013daf:	90                   	nop
c0013db0:	fb                   	sti    
c0013db1:	eb f5                	jmp    c0013da8 <Thr::processFromPID(int)+0x78>
c0013db3:	90                   	nop
c0013db4:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013db9:	48                   	dec    eax
c0013dba:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013dbf:	75 07                	jne    c0013dc8 <Thr::processFromPID(int)+0x98>
c0013dc1:	fb                   	sti    
c0013dc2:	5b                   	pop    ebx
c0013dc3:	5e                   	pop    esi
c0013dc4:	5f                   	pop    edi
c0013dc5:	c3                   	ret    
c0013dc6:	66 90                	xchg   ax,ax
c0013dc8:	5b                   	pop    ebx
c0013dc9:	31 c0                	xor    eax,eax
c0013dcb:	5e                   	pop    esi
c0013dcc:	5f                   	pop    edi
c0013dcd:	c3                   	ret    
c0013dce:	66 90                	xchg   ax,ax

c0013dd0 <unblockTask(ThreadControlBlock*)>:
c0013dd0:	53                   	push   ebx
c0013dd1:	83 ec 08             	sub    esp,0x8
c0013dd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd8:	fa                   	cli    
c0013dd9:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0013ddf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013de2:	85 c0                	test   eax,eax
c0013de4:	74 66                	je     c0013e4c <unblockTask(ThreadControlBlock*)+0x7c>
c0013de6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013de9:	48                   	dec    eax
c0013dea:	74 38                	je     c0013e24 <unblockTask(ThreadControlBlock*)+0x54>
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	68 04 40 02 c0       	push   0xc0024004
c0013df4:	e8 03 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013df9:	83 c4 10             	add    esp,0x10
c0013dfc:	85 c0                	test   eax,eax
c0013dfe:	75 1c                	jne    c0013e1c <unblockTask(ThreadControlBlock*)+0x4c>
c0013e00:	eb 5e                	jmp    c0013e60 <unblockTask(ThreadControlBlock*)+0x90>
c0013e02:	66 90                	xchg   ax,ax
c0013e04:	83 ec 08             	sub    esp,0x8
c0013e07:	50                   	push   eax
c0013e08:	68 04 40 02 c0       	push   0xc0024004
c0013e0d:	e8 9a 8d 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e12:	83 c4 10             	add    esp,0x10
c0013e15:	85 c0                	test   eax,eax
c0013e17:	74 47                	je     c0013e60 <unblockTask(ThreadControlBlock*)+0x90>
c0013e19:	8d 76 00             	lea    esi,[esi+0x0]
c0013e1c:	39 c3                	cmp    ebx,eax
c0013e1e:	75 e4                	jne    c0013e04 <unblockTask(ThreadControlBlock*)+0x34>
c0013e20:	eb 12                	jmp    c0013e34 <unblockTask(ThreadControlBlock*)+0x64>
c0013e22:	66 90                	xchg   ax,ax
c0013e24:	83 ec 0c             	sub    esp,0xc
c0013e27:	68 aa ed 01 c0       	push   0xc001edaa
c0013e2c:	e8 b7 66 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0013e39:	48                   	dec    eax
c0013e3a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0013e3f:	75 03                	jne    c0013e44 <unblockTask(ThreadControlBlock*)+0x74>
c0013e41:	fb                   	sti    
c0013e42:	66 90                	xchg   ax,ax
c0013e44:	83 c4 08             	add    esp,0x8
c0013e47:	5b                   	pop    ebx
c0013e48:	c3                   	ret    
c0013e49:	8d 76 00             	lea    esi,[esi+0x0]
c0013e4c:	83 ec 0c             	sub    esp,0xc
c0013e4f:	68 93 ed 01 c0       	push   0xc001ed93
c0013e54:	e8 8f 66 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	eb d6                	jmp    c0013e34 <unblockTask(ThreadControlBlock*)+0x64>
c0013e5e:	66 90                	xchg   ax,ax
c0013e60:	83 ec 08             	sub    esp,0x8
c0013e63:	53                   	push   ebx
c0013e64:	68 04 40 02 c0       	push   0xc0024004
c0013e69:	e8 4e 8a 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e6e:	83 c4 10             	add    esp,0x10
c0013e71:	eb c1                	jmp    c0013e34 <unblockTask(ThreadControlBlock*)+0x64>
c0013e73:	90                   	nop

c0013e74 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e74:	55                   	push   ebp
c0013e75:	57                   	push   edi
c0013e76:	56                   	push   esi
c0013e77:	53                   	push   ebx
c0013e78:	83 ec 1c             	sub    esp,0x1c
c0013e7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e7f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e82:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013e88:	85 ed                	test   ebp,ebp
c0013e8a:	7e 24                	jle    c0013eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013e8c:	31 f6                	xor    esi,esi
c0013e8e:	66 90                	xchg   ax,ax
c0013e90:	83 ec 0c             	sub    esp,0xc
c0013e93:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013e9a:	46                   	inc    esi
c0013e9b:	57                   	push   edi
c0013e9c:	e8 38 39 ff ff       	call   c00077d9 <free>
c0013ea1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ea4:	83 c4 10             	add    esp,0x10
c0013ea7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013ead:	7f e1                	jg     c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013eaf:	90                   	nop
c0013eb0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013eba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013ebf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ec2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ec5:	d3 c0                	rol    eax,cl
c0013ec7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ece:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ed1:	89 f7                	mov    edi,esi
c0013ed3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013edb:	0f 85 77 01 00 00    	jne    c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ee1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ee7:	85 ed                	test   ebp,ebp
c0013ee9:	74 1d                	je     c0013f08 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013eeb:	83 ec 0c             	sub    esp,0xc
c0013eee:	55                   	push   ebp
c0013eef:	e8 70 bf ff ff       	call   c000fe64 <EnvVarContainer::~EnvVarContainer()>
c0013ef4:	59                   	pop    ecx
c0013ef5:	5e                   	pop    esi
c0013ef6:	6a 0c                	push   0xc
c0013ef8:	55                   	push   ebp
c0013ef9:	e8 f4 64 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0013efe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f01:	83 c4 10             	add    esp,0x10
c0013f04:	89 f7                	mov    edi,esi
c0013f06:	66 90                	xchg   ax,ax
c0013f08:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f0e:	85 c0                	test   eax,eax
c0013f10:	0f 84 b6 00 00 00    	je     c0013fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f16:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f19:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f1d:	31 c9                	xor    ecx,ecx
c0013f1f:	eb 17                	jmp    c0013f38 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f21:	8d 76 00             	lea    esi,[esi+0x0]
c0013f24:	41                   	inc    ecx
c0013f25:	83 f9 10             	cmp    ecx,0x10
c0013f28:	0f 84 9e 00 00 00    	je     c0013fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f2e:	66 90                	xchg   ax,ax
c0013f30:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f36:	66 90                	xchg   ax,ax
c0013f38:	31 d2                	xor    edx,edx
c0013f3a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f41:	d3 fa                	sar    edx,cl
c0013f43:	83 e2 01             	and    edx,0x1
c0013f46:	74 dc                	je     c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f48:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f4b:	01 d2                	add    edx,edx
c0013f4d:	01 ca                	add    edx,ecx
c0013f4f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f52:	01 d0                	add    eax,edx
c0013f54:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f5a:	83 fd 07             	cmp    ebp,0x7
c0013f5d:	75 c5                	jne    c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f5f:	05 40 02 00 00       	add    eax,0x240
c0013f64:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f67:	83 fd ff             	cmp    ebp,0xffffffff
c0013f6a:	0f 8c f0 00 00 00    	jl     c0014060 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f70:	0f 84 ae 01 00 00    	je     c0014124 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f76:	85 ed                	test   ebp,ebp
c0013f78:	0f 84 92 01 00 00    	je     c0014110 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f7e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013f80:	75 a2                	jne    c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f82:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f8c:	01 d0                	add    eax,edx
c0013f8e:	66 90                	xchg   ax,ax
c0013f90:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013f94:	83 ec 0c             	sub    esp,0xc
c0013f97:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013f9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fa0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013fa6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013fad:	50                   	push   eax
c0013fae:	e8 1d fe ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fbd:	89 f7                	mov    edi,esi
c0013fbf:	41                   	inc    ecx
c0013fc0:	83 f9 10             	cmp    ecx,0x10
c0013fc3:	0f 85 67 ff ff ff    	jne    c0013f30 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fcc:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013fd2:	85 c0                	test   eax,eax
c0013fd4:	74 62                	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fd6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013fdc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013fe2:	74 54                	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013fe4:	83 ec 0c             	sub    esp,0xc
c0013fe7:	68 04 40 02 c0       	push   0xc0024004
c0013fec:	e8 0b 88 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ff1:	c7 04 24 04 40 02 c0 	mov    DWORD PTR [esp],0xc0024004
c0013ff8:	89 c7                	mov    edi,eax
c0013ffa:	e8 e1 87 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	84 c0                	test   al,al
c0014004:	0f 84 ce 00 00 00    	je     c00140d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001400a:	66 90                	xchg   ax,ax
c001400c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001400f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014015:	85 d2                	test   edx,edx
c0014017:	74 0f                	je     c0014028 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	8b 02                	mov    eax,DWORD PTR [edx]
c001401e:	52                   	push   edx
c001401f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014022:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014025:	83 c4 10             	add    esp,0x10
c0014028:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014032:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001403e:	85 db                	test   ebx,ebx
c0014040:	74 16                	je     c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	53                   	push   ebx
c0014046:	e8 7b 57 ff ff       	call   c00097c6 <VAS::~VAS()>
c001404b:	58                   	pop    eax
c001404c:	5a                   	pop    edx
c001404d:	6a 14                	push   0x14
c001404f:	53                   	push   ebx
c0014050:	e8 9d 63 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	83 c4 1c             	add    esp,0x1c
c001405b:	5b                   	pop    ebx
c001405c:	5e                   	pop    esi
c001405d:	5f                   	pop    edi
c001405e:	5d                   	pop    ebp
c001405f:	c3                   	ret    
c0014060:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	68 5c ee 01 c0       	push   0xc001ee5c
c001406c:	e8 e2 c0 ff ff       	call   c0010153 <KePanic(char const*)>
c0014071:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014074:	83 c4 10             	add    esp,0x10
c0014077:	89 f7                	mov    edi,esi
c0014079:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001407d:	e9 a2 fe ff ff       	jmp    c0013f24 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014082:	66 90                	xchg   ax,ax
c0014084:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001408a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014090:	75 1e                	jne    c00140b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014092:	83 ec 0c             	sub    esp,0xc
c0014095:	68 c4 ee 01 c0       	push   0xc001eec4
c001409a:	e8 49 64 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001409f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00140a6:	e8 5d fa ff ff       	call   c0013b08 <blockTask(TaskState)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	66 90                	xchg   ax,ax
c00140b0:	83 ec 08             	sub    esp,0x8
c00140b3:	56                   	push   esi
c00140b4:	68 04 40 02 c0       	push   0xc0024004
c00140b9:	e8 fe 87 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140be:	c7 04 24 04 40 02 c0 	mov    DWORD PTR [esp],0xc0024004
c00140c5:	e8 32 87 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ca:	83 c4 10             	add    esp,0x10
c00140cd:	39 f8                	cmp    eax,edi
c00140cf:	0f 84 37 ff ff ff    	je     c001400c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140d5:	8d 76 00             	lea    esi,[esi+0x0]
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	68 04 40 02 c0       	push   0xc0024004
c00140e0:	e8 17 87 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140e5:	c7 04 24 04 40 02 c0 	mov    DWORD PTR [esp],0xc0024004
c00140ec:	89 c6                	mov    esi,eax
c00140ee:	e8 11 87 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	39 f3                	cmp    ebx,esi
c00140f8:	74 b6                	je     c00140b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140fa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00140fd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014100:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014106:	75 a8                	jne    c00140b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014108:	e9 77 ff ff ff       	jmp    c0014084 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001410d:	8d 76 00             	lea    esi,[esi+0x0]
c0014110:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014114:	83 ec 0c             	sub    esp,0xc
c0014117:	68 90 ee 01 c0       	push   0xc001ee90
c001411c:	e9 4b ff ff ff       	jmp    c001406c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014121:	8d 76 00             	lea    esi,[esi+0x0]
c0014124:	8b 36                	mov    esi,DWORD PTR [esi]
c0014126:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001412a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001412d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014130:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014136:	01 d7                	add    edi,edx
c0014138:	89 f8                	mov    eax,edi
c001413a:	e9 51 fe ff ff       	jmp    c0013f90 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001413f:	90                   	nop

c0014140 <cleanerTaskFunction(void*)>:
c0014140:	53                   	push   ebx
c0014141:	83 ec 08             	sub    esp,0x8
c0014144:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014149:	48                   	dec    eax
c001414a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001414f:	75 03                	jne    c0014154 <cleanerTaskFunction(void*)+0x14>
c0014151:	fb                   	sti    
c0014152:	66 90                	xchg   ax,ax
c0014154:	fa                   	cli    
c0014155:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001415a:	80 3d cc 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fcc,0x0
c0014161:	8d 50 01             	lea    edx,[eax+0x1]
c0014164:	89 15 e8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe8,edx
c001416a:	0f 84 ac 00 00 00    	je     c001421c <cleanerTaskFunction(void*)+0xdc>
c0014170:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0014175:	85 c0                	test   eax,eax
c0014177:	75 03                	jne    c001417c <cleanerTaskFunction(void*)+0x3c>
c0014179:	fb                   	sti    
c001417a:	66 90                	xchg   ax,ax
c001417c:	c6 05 cc 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fcc,0x0
c0014183:	fa                   	cli    
c0014184:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c001418a:	ff 05 e4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe4
c0014190:	fa                   	cli    
c0014191:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0014197:	eb 2b                	jmp    c00141c4 <cleanerTaskFunction(void*)+0x84>
c0014199:	8d 76 00             	lea    esi,[esi+0x0]
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	68 ec 3f 02 c0       	push   0xc0023fec
c00141a4:	e8 53 86 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141a9:	c7 04 24 ec 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fec
c00141b0:	89 c3                	mov    ebx,eax
c00141b2:	e8 4d 86 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141ba:	e8 b5 fc ff ff       	call   c0013e74 <cleanupTerminatedTask(ThreadControlBlock*)>
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	66 90                	xchg   ax,ax
c00141c4:	83 ec 0c             	sub    esp,0xc
c00141c7:	68 ec 3f 02 c0       	push   0xc0023fec
c00141cc:	e8 0f 86 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	84 c0                	test   al,al
c00141d6:	74 c4                	je     c001419c <cleanerTaskFunction(void*)+0x5c>
c00141d8:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00141dd:	48                   	dec    eax
c00141de:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00141e3:	75 03                	jne    c00141e8 <cleanerTaskFunction(void*)+0xa8>
c00141e5:	fb                   	sti    
c00141e6:	66 90                	xchg   ax,ax
c00141e8:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c00141ed:	48                   	dec    eax
c00141ee:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c00141f3:	0f 85 4b ff ff ff    	jne    c0014144 <cleanerTaskFunction(void*)+0x4>
c00141f9:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c00141fe:	85 c0                	test   eax,eax
c0014200:	0f 84 3e ff ff ff    	je     c0014144 <cleanerTaskFunction(void*)+0x4>
c0014206:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0014210:	e8 f7 f6 ff ff       	call   c001390c <schedule()>
c0014215:	e9 2a ff ff ff       	jmp    c0014144 <cleanerTaskFunction(void*)+0x4>
c001421a:	66 90                	xchg   ax,ax
c001421c:	83 ec 0c             	sub    esp,0xc
c001421f:	6a 02                	push   0x2
c0014221:	e8 ba f8 ff ff       	call   c0013ae0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	e9 4e ff ff ff       	jmp    c001417c <cleanerTaskFunction(void*)+0x3c>
c001422e:	66 90                	xchg   ax,ax

c0014230 <terminateTask(int)>:
c0014230:	83 ec 14             	sub    esp,0x14
c0014233:	fa                   	cli    
c0014234:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c001423a:	ff 05 e4 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe4
c0014240:	fa                   	cli    
c0014241:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0014247:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001424b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014250:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014253:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014258:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001425b:	50                   	push   eax
c001425c:	68 ec 3f 02 c0       	push   0xc0023fec
c0014261:	e8 56 86 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014275:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c001427a:	85 c0                	test   eax,eax
c001427c:	74 5e                	je     c00142dc <terminateTask(int)+0xac>
c001427e:	83 ec 0c             	sub    esp,0xc
c0014281:	c6 05 cc 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fcc,0x1
c0014288:	50                   	push   eax
c0014289:	e8 42 fb ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c001428e:	83 c4 10             	add    esp,0x10
c0014291:	8d 76 00             	lea    esi,[esi+0x0]
c0014294:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014299:	48                   	dec    eax
c001429a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001429f:	75 03                	jne    c00142a4 <terminateTask(int)+0x74>
c00142a1:	fb                   	sti    
c00142a2:	66 90                	xchg   ax,ax
c00142a4:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c00142a9:	48                   	dec    eax
c00142aa:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c00142af:	75 0b                	jne    c00142bc <terminateTask(int)+0x8c>
c00142b1:	83 3d e0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fe0,0x0
c00142b8:	75 36                	jne    c00142f0 <terminateTask(int)+0xc0>
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00142c1:	48                   	dec    eax
c00142c2:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00142c7:	75 03                	jne    c00142cc <terminateTask(int)+0x9c>
c00142c9:	fb                   	sti    
c00142ca:	66 90                	xchg   ax,ax
c00142cc:	fa                   	cli    
c00142cd:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c00142d3:	90                   	nop
c00142d4:	e8 33 f6 ff ff       	call   c001390c <schedule()>
c00142d9:	eb e1                	jmp    c00142bc <terminateTask(int)+0x8c>
c00142db:	90                   	nop
c00142dc:	83 ec 0c             	sub    esp,0xc
c00142df:	68 c1 ed 01 c0       	push   0xc001edc1
c00142e4:	e8 ff 61 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00142e9:	83 c4 10             	add    esp,0x10
c00142ec:	eb a6                	jmp    c0014294 <terminateTask(int)+0x64>
c00142ee:	66 90                	xchg   ax,ax
c00142f0:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c00142fa:	eb d8                	jmp    c00142d4 <terminateTask(int)+0xa4>

c00142fc <Thr::terminateFromIRQ(int)>:
c00142fc:	83 ec 18             	sub    esp,0x18
c00142ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014303:	50                   	push   eax
c0014304:	e8 27 ff ff ff       	call   c0014230 <terminateTask(int)>
c0014309:	90                   	nop
c001430a:	66 90                	xchg   ax,ax

c001430c <Semaphore::release()>:
c001430c:	83 ec 0c             	sub    esp,0xc
c001430f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014313:	fa                   	cli    
c0014314:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0014319:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c001431f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014322:	89 0d e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,ecx
c0014328:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001432b:	85 c9                	test   ecx,ecx
c001432d:	74 41                	je     c0014370 <Semaphore::release()+0x64>
c001432f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014332:	83 ec 0c             	sub    esp,0xc
c0014335:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014338:	51                   	push   ecx
c0014339:	e8 92 fa ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c001433e:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0014343:	83 c4 10             	add    esp,0x10
c0014346:	48                   	dec    eax
c0014347:	90                   	nop
c0014348:	a3 e4 3f 02 c0       	mov    ds:0xc0023fe4,eax
c001434d:	85 c0                	test   eax,eax
c001434f:	75 0b                	jne    c001435c <Semaphore::release()+0x50>
c0014351:	a1 e0 3f 02 c0       	mov    eax,ds:0xc0023fe0
c0014356:	85 c0                	test   eax,eax
c0014358:	75 1e                	jne    c0014378 <Semaphore::release()+0x6c>
c001435a:	66 90                	xchg   ax,ax
c001435c:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014361:	48                   	dec    eax
c0014362:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0014367:	75 03                	jne    c001436c <Semaphore::release()+0x60>
c0014369:	fb                   	sti    
c001436a:	66 90                	xchg   ax,ax
c001436c:	83 c4 0c             	add    esp,0xc
c001436f:	c3                   	ret    
c0014370:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014373:	eb d3                	jmp    c0014348 <Semaphore::release()+0x3c>
c0014375:	8d 76 00             	lea    esi,[esi+0x0]
c0014378:	c7 05 e0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fe0,0x0
c0014382:	e8 85 f5 ff ff       	call   c001390c <schedule()>
c0014387:	eb d3                	jmp    c001435c <Semaphore::release()+0x50>
c0014389:	8d 76 00             	lea    esi,[esi+0x0]

c001438c <__static_initialization_and_destruction_0(int, int)>:
c001438c:	83 ec 0c             	sub    esp,0xc
c001438f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014394:	0f 85 8e 00 00 00    	jne    c0014428 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001439a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00143a2:	0f 85 80 00 00 00    	jne    c0014428 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143a8:	83 ec 0c             	sub    esp,0xc
c00143ab:	68 04 40 02 c0       	push   0xc0024004
c00143b0:	e8 b3 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143b5:	83 c4 10             	add    esp,0x10
c00143b8:	83 ec 04             	sub    esp,0x4
c00143bb:	68 74 f9 01 c0       	push   0xc001f974
c00143c0:	68 04 40 02 c0       	push   0xc0024004
c00143c5:	68 18 cb 01 c0       	push   0xc001cb18
c00143ca:	e8 d3 5f ff ff       	call   c000a3a2 <__cxa_atexit>
c00143cf:	83 c4 10             	add    esp,0x10
c00143d2:	83 ec 0c             	sub    esp,0xc
c00143d5:	68 f8 3f 02 c0       	push   0xc0023ff8
c00143da:	e8 89 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	83 ec 04             	sub    esp,0x4
c00143e5:	68 74 f9 01 c0       	push   0xc001f974
c00143ea:	68 f8 3f 02 c0       	push   0xc0023ff8
c00143ef:	68 18 cb 01 c0       	push   0xc001cb18
c00143f4:	e8 a9 5f ff ff       	call   c000a3a2 <__cxa_atexit>
c00143f9:	83 c4 10             	add    esp,0x10
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	68 ec 3f 02 c0       	push   0xc0023fec
c0014404:	e8 5f 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	83 ec 04             	sub    esp,0x4
c001440f:	68 74 f9 01 c0       	push   0xc001f974
c0014414:	68 ec 3f 02 c0       	push   0xc0023fec
c0014419:	68 18 cb 01 c0       	push   0xc001cb18
c001441e:	e8 7f 5f ff ff       	call   c000a3a2 <__cxa_atexit>
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	66 90                	xchg   ax,ax
c0014428:	90                   	nop
c0014429:	83 c4 0c             	add    esp,0xc
c001442c:	c3                   	ret    
c001442d:	8d 76 00             	lea    esi,[esi+0x0]

c0014430 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014430:	83 ec 0c             	sub    esp,0xc
c0014433:	83 ec 08             	sub    esp,0x8
c0014436:	68 ff ff 00 00       	push   0xffff
c001443b:	6a 01                	push   0x1
c001443d:	e8 4a ff ff ff       	call   c001438c <__static_initialization_and_destruction_0(int, int)>
c0014442:	83 c4 10             	add    esp,0x10
c0014445:	83 c4 0c             	add    esp,0xc
c0014448:	c3                   	ret    

c0014449 <Vm::inbv(unsigned short)>:
c0014449:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001444d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014452:	75 06                	jne    c001445a <Vm::inbv(unsigned short)+0x11>
c0014454:	a0 4c 40 02 c0       	mov    al,ds:0xc002404c
c0014459:	c3                   	ret    
c001445a:	ec                   	in     al,dx
c001445b:	c3                   	ret    

c001445c <Vm::outbv(unsigned short, unsigned char)>:
c001445c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014460:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014464:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014469:	75 25                	jne    c0014490 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001446b:	8b 0d 4c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002404c
c0014471:	8d 51 01             	lea    edx,[ecx+0x1]
c0014474:	88 81 60 40 02 c0    	mov    BYTE PTR [ecx-0x3ffdbfa0],al
c001447a:	89 15 4c 40 02 c0    	mov    DWORD PTR ds:0xc002404c,edx
c0014480:	83 fa 20             	cmp    edx,0x20
c0014483:	75 0c                	jne    c0014491 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014485:	c7 05 4c 40 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002404c,0x1f
c001448f:	c3                   	ret    
c0014490:	ee                   	out    dx,al
c0014491:	c3                   	ret    

c0014492 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014492:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014497:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001449c:	c1 e0 04             	shl    eax,0x4
c001449f:	01 d0                	add    eax,edx
c00144a1:	c3                   	ret    

c00144a2 <Vm::getSegment(unsigned int)>:
c00144a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144a6:	c1 e8 10             	shr    eax,0x10
c00144a9:	c3                   	ret    

c00144aa <Vm::getOffset(unsigned int)>:
c00144aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ae:	c3                   	ret    

c00144af <Vm::mainloop2()>:
c00144af:	83 ec 18             	sub    esp,0x18
c00144b2:	fa                   	cli    
c00144b3:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c00144b9:	6a 02                	push   0x2
c00144bb:	c6 05 45 40 02 c0 01 	mov    BYTE PTR ds:0xc0024045,0x1
c00144c2:	e8 19 f6 ff ff       	call   c0013ae0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144cc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144d0:	52                   	push   edx
c00144d1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144d5:	52                   	push   edx
c00144d6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144da:	52                   	push   edx
c00144db:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144df:	50                   	push   eax
c00144e0:	e8 2a bd fe ff       	call   c000020f <goToVM86>
c00144e5:	83 c4 2c             	add    esp,0x2c
c00144e8:	c3                   	ret    

c00144e9 <Vm::mainVm8086Loop(void*)>:
c00144e9:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00144ee:	48                   	dec    eax
c00144ef:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00144f4:	75 01                	jne    c00144f7 <Vm::mainVm8086Loop(void*)+0xe>
c00144f6:	fb                   	sti    
c00144f7:	eb b6                	jmp    c00144af <Vm::mainloop2()>

c00144f9 <Vm::mainloop3(unsigned long)>:
c00144f9:	83 ec 18             	sub    esp,0x18
c00144fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014500:	fa                   	cli    
c0014501:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0014507:	6a 02                	push   0x2
c0014509:	c6 05 44 40 02 c0 01 	mov    BYTE PTR ds:0xc0024044,0x1
c0014510:	a3 40 40 02 c0       	mov    ds:0xc0024040,eax
c0014515:	e8 c6 f5 ff ff       	call   c0013ae0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001451a:	83 c4 1c             	add    esp,0x1c
c001451d:	eb 90                	jmp    c00144af <Vm::mainloop2()>

c001451f <Vm::initialise8086()>:
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	68 80 00 00 00       	push   0x80
c0014527:	6a 00                	push   0x0
c0014529:	68 e9 44 01 c0       	push   0xc00144e9
c001452e:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c0014534:	e8 b3 f1 ff ff       	call   c00136ec <Process::createThread(void (*)(void*), void*, int)>
c0014539:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014540:	a3 48 40 02 c0       	mov    ds:0xc0024048,eax
c0014545:	68 00 01 00 00       	push   0x100
c001454a:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c001454f:	6a 00                	push   0x0
c0014551:	6a 00                	push   0x0
c0014553:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014559:	e8 c6 56 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001455e:	83 c4 2c             	add    esp,0x2c
c0014561:	c3                   	ret    

c0014562 <Vm::finish8086()>:
c0014562:	53                   	push   ebx
c0014563:	83 ec 08             	sub    esp,0x8
c0014566:	fa                   	cli    
c0014567:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c001456d:	80 3d 44 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024044,0x0
c0014574:	75 15                	jne    c001458b <Vm::finish8086()+0x29>
c0014576:	e8 91 f3 ff ff       	call   c001390c <schedule()>
c001457b:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014580:	48                   	dec    eax
c0014581:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0014586:	75 de                	jne    c0014566 <Vm::finish8086()+0x4>
c0014588:	fb                   	sti    
c0014589:	eb db                	jmp    c0014566 <Vm::finish8086()+0x4>
c001458b:	83 ec 0c             	sub    esp,0xc
c001458e:	8b 1d 40 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024040
c0014594:	ff 35 48 40 02 c0    	push   DWORD PTR ds:0xc0024048
c001459a:	c6 05 44 40 02 c0 00 	mov    BYTE PTR ds:0xc0024044,0x0
c00145a1:	e8 2a f8 ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c00145a6:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00145ab:	83 c4 10             	add    esp,0x10
c00145ae:	8d 50 ff             	lea    edx,[eax-0x1]
c00145b1:	89 15 e8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe8,edx
c00145b7:	85 d2                	test   edx,edx
c00145b9:	75 01                	jne    c00145bc <Vm::finish8086()+0x5a>
c00145bb:	fb                   	sti    
c00145bc:	89 d8                	mov    eax,ebx
c00145be:	83 c4 08             	add    esp,0x8
c00145c1:	5b                   	pop    ebx
c00145c2:	c3                   	ret    

c00145c3 <Vm::getOutput8086(unsigned char*)>:
c00145c3:	57                   	push   edi
c00145c4:	8b 0d 4c 40 02 c0    	mov    ecx,DWORD PTR ds:0xc002404c
c00145ca:	56                   	push   esi
c00145cb:	be 60 40 02 c0       	mov    esi,0xc0024060
c00145d0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145d6:	a1 4c 40 02 c0       	mov    eax,ds:0xc002404c
c00145db:	5e                   	pop    esi
c00145dc:	c7 05 4c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002404c,0x0
c00145e6:	5f                   	pop    edi
c00145e7:	c3                   	ret    

c00145e8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00145e8:	55                   	push   ebp
c00145e9:	57                   	push   edi
c00145ea:	56                   	push   esi
c00145eb:	53                   	push   ebx
c00145ec:	83 ec 0c             	sub    esp,0xc
c00145ef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00145f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00145fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00145ff:	fa                   	cli    
c0014600:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c0014606:	80 3d 45 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024045,0x0
c001460d:	75 15                	jne    c0014624 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001460f:	e8 f8 f2 ff ff       	call   c001390c <schedule()>
c0014614:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014619:	48                   	dec    eax
c001461a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001461f:	75 de                	jne    c00145ff <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014621:	fb                   	sti    
c0014622:	eb db                	jmp    c00145ff <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014624:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c0014629:	c7 05 4c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002404c,0x0
c0014633:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014637:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001463b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001463f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014643:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014647:	0f b7 ff             	movzx  edi,di
c001464a:	0f b7 f6             	movzx  esi,si
c001464d:	50                   	push   eax
c001464e:	6a 20                	push   0x20
c0014650:	6a 00                	push   0x0
c0014652:	68 60 40 02 c0       	push   0xc0024060
c0014657:	e8 74 be fe ff       	call   c00004d0 <memset>
c001465c:	5a                   	pop    edx
c001465d:	59                   	pop    ecx
c001465e:	57                   	push   edi
c001465f:	56                   	push   esi
c0014660:	e8 2d fe ff ff       	call   c0014492 <Vm::realToLinear(unsigned short, unsigned short)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	89 c7                	mov    edi,eax
c001466a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001466e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014672:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014674:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014679:	c6 05 45 40 02 c0 00 	mov    BYTE PTR ds:0xc0024045,0x0
c0014680:	48                   	dec    eax
c0014681:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0014686:	75 01                	jne    c0014689 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014688:	fb                   	sti    
c0014689:	83 ec 0c             	sub    esp,0xc
c001468c:	ff 35 48 40 02 c0    	push   DWORD PTR ds:0xc0024048
c0014692:	e8 39 f7 ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c0014697:	83 c4 1c             	add    esp,0x1c
c001469a:	b0 01                	mov    al,0x1
c001469c:	5b                   	pop    ebx
c001469d:	5e                   	pop    esi
c001469e:	5f                   	pop    edi
c001469f:	5d                   	pop    ebp
c00146a0:	c3                   	ret    

c00146a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00146a1:	55                   	push   ebp
c00146a2:	57                   	push   edi
c00146a3:	56                   	push   esi
c00146a4:	53                   	push   ebx
c00146a5:	83 ec 2c             	sub    esp,0x2c
c00146a8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00146ac:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146b0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146b4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146b8:	fa                   	cli    
c00146b9:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c00146bf:	0f b6 35 45 40 02 c0 	movzx  esi,BYTE PTR ds:0xc0024045
c00146c6:	89 f0                	mov    eax,esi
c00146c8:	84 c0                	test   al,al
c00146ca:	75 1d                	jne    c00146e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146d0:	e8 37 f2 ff ff       	call   c001390c <schedule()>
c00146d5:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00146da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146de:	48                   	dec    eax
c00146df:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00146e4:	75 d2                	jne    c00146b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146e6:	fb                   	sti    
c00146e7:	eb cf                	jmp    c00146b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00146e9:	a1 48 40 02 c0       	mov    eax,ds:0xc0024048
c00146ee:	c7 05 4c 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002404c,0x0
c00146f8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00146fc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014700:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014704:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014708:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001470c:	50                   	push   eax
c001470d:	6a 20                	push   0x20
c001470f:	6a 00                	push   0x0
c0014711:	68 60 40 02 c0       	push   0xc0024060
c0014716:	e8 b5 bd fe ff       	call   c00004d0 <memset>
c001471b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014722:	e8 92 30 ff ff       	call   c00077b9 <malloc>
c0014727:	83 c4 0c             	add    esp,0xc
c001472a:	89 c3                	mov    ebx,eax
c001472c:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c0014732:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014736:	50                   	push   eax
c0014737:	e8 22 63 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c001473c:	83 c4 10             	add    esp,0x10
c001473f:	85 db                	test   ebx,ebx
c0014741:	75 0a                	jne    c001474d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014743:	83 ec 0c             	sub    esp,0xc
c0014746:	68 ec ee 01 c0       	push   0xc001eeec
c001474b:	eb 3e                	jmp    c001478b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001474d:	50                   	push   eax
c001474e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014752:	50                   	push   eax
c0014753:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014757:	50                   	push   eax
c0014758:	53                   	push   ebx
c0014759:	e8 6c 66 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c001475e:	83 c4 10             	add    esp,0x10
c0014761:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014766:	74 0a                	je     c0014772 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014768:	83 ec 0c             	sub    esp,0xc
c001476b:	68 00 ef 01 c0       	push   0xc001ef00
c0014770:	eb 19                	jmp    c001478b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014772:	51                   	push   ecx
c0014773:	51                   	push   ecx
c0014774:	6a 01                	push   0x1
c0014776:	53                   	push   ebx
c0014777:	e8 a2 63 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c001477c:	83 c4 10             	add    esp,0x10
c001477f:	85 c0                	test   eax,eax
c0014781:	74 24                	je     c00147a7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014783:	83 ec 0c             	sub    esp,0xc
c0014786:	68 19 ef 01 c0       	push   0xc001ef19
c001478b:	e8 c3 b9 ff ff       	call   c0010153 <KePanic(char const*)>
c0014790:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	48                   	dec    eax
c0014799:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001479e:	85 c0                	test   eax,eax
c00147a0:	75 01                	jne    c00147a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00147a2:	fb                   	sti    
c00147a3:	31 f6                	xor    esi,esi
c00147a5:	eb 58                	jmp    c00147ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00147a7:	0f b7 ed             	movzx  ebp,bp
c00147aa:	50                   	push   eax
c00147ab:	0f b7 ff             	movzx  edi,di
c00147ae:	50                   	push   eax
c00147af:	55                   	push   ebp
c00147b0:	57                   	push   edi
c00147b1:	e8 dc fc ff ff       	call   c0014492 <Vm::realToLinear(unsigned short, unsigned short)>
c00147b6:	5a                   	pop    edx
c00147b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147b9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147bd:	51                   	push   ecx
c00147be:	50                   	push   eax
c00147bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147c7:	53                   	push   ebx
c00147c8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147cb:	83 c4 14             	add    esp,0x14
c00147ce:	53                   	push   ebx
c00147cf:	e8 a8 63 ff ff       	call   c000ab7c <File::close()>
c00147d4:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00147d9:	83 c4 10             	add    esp,0x10
c00147dc:	48                   	dec    eax
c00147dd:	c6 05 45 40 02 c0 00 	mov    BYTE PTR ds:0xc0024045,0x0
c00147e4:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c00147e9:	85 c0                	test   eax,eax
c00147eb:	75 01                	jne    c00147ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00147ed:	fb                   	sti    
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	ff 35 48 40 02 c0    	push   DWORD PTR ds:0xc0024048
c00147f7:	e8 d4 f5 ff ff       	call   c0013dd0 <unblockTask(ThreadControlBlock*)>
c00147fc:	83 c4 10             	add    esp,0x10
c00147ff:	83 c4 2c             	add    esp,0x2c
c0014802:	89 f0                	mov    eax,esi
c0014804:	5b                   	pop    ebx
c0014805:	5e                   	pop    esi
c0014806:	5f                   	pop    edi
c0014807:	5d                   	pop    ebp
c0014808:	c3                   	ret    

c0014809 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014809:	57                   	push   edi
c001480a:	56                   	push   esi
c001480b:	53                   	push   ebx
c001480c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014814:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014818:	83 e8 06             	sub    eax,0x6
c001481b:	0f b7 c0             	movzx  eax,ax
c001481e:	50                   	push   eax
c001481f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014824:	50                   	push   eax
c0014825:	e8 68 fc ff ff       	call   c0014492 <Vm::realToLinear(unsigned short, unsigned short)>
c001482a:	5a                   	pop    edx
c001482b:	5e                   	pop    esi
c001482c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001482f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014832:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014838:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001483b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001483e:	83 c2 02             	add    edx,0x2
c0014841:	66 89 10             	mov    WORD PTR [eax],dx
c0014844:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014847:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001484b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001484e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014852:	89 d6                	mov    esi,edx
c0014854:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001485a:	66 81 e6 ff fd       	and    si,0xfdff
c001485f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014863:	74 07                	je     c001486c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014865:	89 d6                	mov    esi,edx
c0014867:	66 81 ce 00 02       	or     si,0x200
c001486c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014875:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014879:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014881:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014884:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001488c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001488f:	5b                   	pop    ebx
c0014890:	5e                   	pop    esi
c0014891:	5f                   	pop    edi
c0014892:	c3                   	ret    

c0014893 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014893:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014898:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001489d:	c1 e0 04             	shl    eax,0x4
c00148a0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00148a3:	c3                   	ret    

c00148a4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00148a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148ae:	c1 e0 04             	shl    eax,0x4
c00148b1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148b5:	c3                   	ret    

c00148b6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148c0:	c1 e0 04             	shl    eax,0x4
c00148c3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148c6:	c3                   	ret    

c00148c7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148d1:	c1 e0 04             	shl    eax,0x4
c00148d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148d8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148db:	c3                   	ret    

c00148dc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148e6:	c1 e0 04             	shl    eax,0x4
c00148e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148ed:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00148f1:	c3                   	ret    

c00148f2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00148f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148fc:	c1 e0 04             	shl    eax,0x4
c00148ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014903:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014906:	c3                   	ret    

c0014907 <Vm::faultHandler(regs*)>:
c0014907:	55                   	push   ebp
c0014908:	57                   	push   edi
c0014909:	56                   	push   esi
c001490a:	53                   	push   ebx
c001490b:	83 ec 1c             	sub    esp,0x1c
c001490e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014912:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014915:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014919:	0f b7 f8             	movzx  edi,ax
c001491c:	52                   	push   edx
c001491d:	0f b7 c0             	movzx  eax,ax
c0014920:	50                   	push   eax
c0014921:	e8 6c fb ff ff       	call   c0014492 <Vm::realToLinear(unsigned short, unsigned short)>
c0014926:	5a                   	pop    edx
c0014927:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001492a:	59                   	pop    ecx
c001492b:	89 c1                	mov    ecx,eax
c001492d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014930:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014934:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014939:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001493d:	0f b7 c5             	movzx  eax,bp
c0014940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014944:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014948:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001494c:	e8 41 fb ff ff       	call   c0014492 <Vm::realToLinear(unsigned short, unsigned short)>
c0014951:	5e                   	pop    esi
c0014952:	be 06 00 00 00       	mov    esi,0x6
c0014957:	5a                   	pop    edx
c0014958:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001495d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014962:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014965:	80 fa 9d             	cmp    dl,0x9d
c0014968:	0f 84 2c 02 00 00    	je     c0014b9a <Vm::faultHandler(regs*)+0x293>
c001496e:	0f 87 91 00 00 00    	ja     c0014a05 <Vm::faultHandler(regs*)+0xfe>
c0014974:	80 fa 66             	cmp    dl,0x66
c0014977:	0f 84 98 01 00 00    	je     c0014b15 <Vm::faultHandler(regs*)+0x20e>
c001497d:	77 47                	ja     c00149c6 <Vm::faultHandler(regs*)+0xbf>
c001497f:	80 fa 36             	cmp    dl,0x36
c0014982:	0f 84 80 01 00 00    	je     c0014b08 <Vm::faultHandler(regs*)+0x201>
c0014988:	77 1a                	ja     c00149a4 <Vm::faultHandler(regs*)+0x9d>
c001498a:	80 fa 26             	cmp    dl,0x26
c001498d:	0f 84 4e 01 00 00    	je     c0014ae1 <Vm::faultHandler(regs*)+0x1da>
c0014993:	80 fa 2e             	cmp    dl,0x2e
c0014996:	0f 85 e2 05 00 00    	jne    c0014f7e <Vm::faultHandler(regs*)+0x677>
c001499c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499f:	31 f6                	xor    esi,esi
c00149a1:	41                   	inc    ecx
c00149a2:	eb be                	jmp    c0014962 <Vm::faultHandler(regs*)+0x5b>
c00149a4:	80 fa 64             	cmp    dl,0x64
c00149a7:	0f 84 41 01 00 00    	je     c0014aee <Vm::faultHandler(regs*)+0x1e7>
c00149ad:	0f 87 48 01 00 00    	ja     c0014afb <Vm::faultHandler(regs*)+0x1f4>
c00149b3:	80 fa 3e             	cmp    dl,0x3e
c00149b6:	0f 85 c2 05 00 00    	jne    c0014f7e <Vm::faultHandler(regs*)+0x677>
c00149bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149bf:	be 01 00 00 00       	mov    esi,0x1
c00149c4:	eb db                	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c00149c6:	80 fa 6d             	cmp    dl,0x6d
c00149c9:	0f 84 ec 02 00 00    	je     c0014cbb <Vm::faultHandler(regs*)+0x3b4>
c00149cf:	77 17                	ja     c00149e8 <Vm::faultHandler(regs*)+0xe1>
c00149d1:	80 fa 67             	cmp    dl,0x67
c00149d4:	0f 84 48 01 00 00    	je     c0014b22 <Vm::faultHandler(regs*)+0x21b>
c00149da:	80 fa 6c             	cmp    dl,0x6c
c00149dd:	0f 84 69 02 00 00    	je     c0014c4c <Vm::faultHandler(regs*)+0x345>
c00149e3:	e9 96 05 00 00       	jmp    c0014f7e <Vm::faultHandler(regs*)+0x677>
c00149e8:	80 fa 6f             	cmp    dl,0x6f
c00149eb:	0f 84 f4 03 00 00    	je     c0014de5 <Vm::faultHandler(regs*)+0x4de>
c00149f1:	0f 82 59 03 00 00    	jb     c0014d50 <Vm::faultHandler(regs*)+0x449>
c00149f7:	80 fa 9c             	cmp    dl,0x9c
c00149fa:	0f 84 2f 01 00 00    	je     c0014b2f <Vm::faultHandler(regs*)+0x228>
c0014a00:	e9 79 05 00 00       	jmp    c0014f7e <Vm::faultHandler(regs*)+0x677>
c0014a05:	80 fa ec             	cmp    dl,0xec
c0014a08:	0f 84 14 05 00 00    	je     c0014f22 <Vm::faultHandler(regs*)+0x61b>
c0014a0e:	77 7b                	ja     c0014a8b <Vm::faultHandler(regs*)+0x184>
c0014a10:	80 fa e4             	cmp    dl,0xe4
c0014a13:	0f 84 93 04 00 00    	je     c0014eac <Vm::faultHandler(regs*)+0x5a5>
c0014a19:	77 53                	ja     c0014a6e <Vm::faultHandler(regs*)+0x167>
c0014a1b:	80 fa cd             	cmp    dl,0xcd
c0014a1e:	0f 84 d9 01 00 00    	je     c0014bfd <Vm::faultHandler(regs*)+0x2f6>
c0014a24:	80 fa cf             	cmp    dl,0xcf
c0014a27:	0f 85 51 05 00 00    	jne    c0014f7e <Vm::faultHandler(regs*)+0x677>
c0014a2d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a30:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a33:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a37:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a3a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a3e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a44:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a47:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a51:	66 c1 e8 09          	shr    ax,0x9
c0014a55:	83 e0 01             	and    eax,0x1
c0014a58:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a5b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a5e:	83 c0 06             	add    eax,0x6
c0014a61:	25 ff ff 00 00       	and    eax,0xffff
c0014a66:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a69:	e9 0c 05 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x673>
c0014a6e:	80 fa e6             	cmp    dl,0xe6
c0014a71:	0f 84 7f 04 00 00    	je     c0014ef6 <Vm::faultHandler(regs*)+0x5ef>
c0014a77:	0f 82 4b 04 00 00    	jb     c0014ec8 <Vm::faultHandler(regs*)+0x5c1>
c0014a7d:	80 fa e7             	cmp    dl,0xe7
c0014a80:	0f 84 87 04 00 00    	je     c0014f0d <Vm::faultHandler(regs*)+0x606>
c0014a86:	e9 f3 04 00 00       	jmp    c0014f7e <Vm::faultHandler(regs*)+0x677>
c0014a8b:	80 fa ef             	cmp    dl,0xef
c0014a8e:	0f 84 d1 04 00 00    	je     c0014f65 <Vm::faultHandler(regs*)+0x65e>
c0014a94:	77 28                	ja     c0014abe <Vm::faultHandler(regs*)+0x1b7>
c0014a96:	80 fa ed             	cmp    dl,0xed
c0014a99:	0f 84 9f 04 00 00    	je     c0014f3e <Vm::faultHandler(regs*)+0x637>
c0014a9f:	80 fa ee             	cmp    dl,0xee
c0014aa2:	0f 85 d6 04 00 00    	jne    c0014f7e <Vm::faultHandler(regs*)+0x677>
c0014aa8:	50                   	push   eax
c0014aa9:	50                   	push   eax
c0014aaa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014aae:	50                   	push   eax
c0014aaf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ab3:	50                   	push   eax
c0014ab4:	e8 a3 f9 ff ff       	call   c001445c <Vm::outbv(unsigned short, unsigned char)>
c0014ab9:	e9 9f 04 00 00       	jmp    c0014f5d <Vm::faultHandler(regs*)+0x656>
c0014abe:	80 fa fa             	cmp    dl,0xfa
c0014ac1:	0f 84 69 01 00 00    	je     c0014c30 <Vm::faultHandler(regs*)+0x329>
c0014ac7:	80 fa fb             	cmp    dl,0xfb
c0014aca:	0f 84 6e 01 00 00    	je     c0014c3e <Vm::faultHandler(regs*)+0x337>
c0014ad0:	80 fa f3             	cmp    dl,0xf3
c0014ad3:	0f 85 a5 04 00 00    	jne    c0014f7e <Vm::faultHandler(regs*)+0x677>
c0014ad9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014adc:	e9 c0 fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014ae1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ae4:	be 02 00 00 00       	mov    esi,0x2
c0014ae9:	e9 b3 fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014aee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014af1:	be 03 00 00 00       	mov    esi,0x3
c0014af6:	e9 a6 fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014afb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014afe:	be 04 00 00 00       	mov    esi,0x4
c0014b03:	e9 99 fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014b08:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b0b:	be 05 00 00 00       	mov    esi,0x5
c0014b10:	e9 8c fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014b15:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b18:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b1d:	e9 7f fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014b22:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b25:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b2a:	e9 72 fe ff ff       	jmp    c00149a1 <Vm::faultHandler(regs*)+0x9a>
c0014b2f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b3b:	74 30                	je     c0014b6d <Vm::faultHandler(regs*)+0x266>
c0014b3d:	83 e9 04             	sub    ecx,0x4
c0014b40:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b46:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b4c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b4f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b52:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b58:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b5c:	0f 84 15 04 00 00    	je     c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014b62:	80 ce 02             	or     dh,0x2
c0014b65:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b68:	e9 0a 04 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014b6d:	83 e9 02             	sub    ecx,0x2
c0014b70:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b76:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b79:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b7d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b83:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b87:	74 05                	je     c0014b8e <Vm::faultHandler(regs*)+0x287>
c0014b89:	80 ce 02             	or     dh,0x2
c0014b8c:	eb 03                	jmp    c0014b91 <Vm::faultHandler(regs*)+0x28a>
c0014b8e:	80 e6 fd             	and    dh,0xfd
c0014b91:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b95:	e9 dd 03 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014b9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b9f:	74 2a                	je     c0014bcb <Vm::faultHandler(regs*)+0x2c4>
c0014ba1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ba3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014ba9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014baf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bba:	c1 e8 09             	shr    eax,0x9
c0014bbd:	83 e0 01             	and    eax,0x1
c0014bc0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bc3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bc6:	83 c0 04             	add    eax,0x4
c0014bc9:	eb 25                	jmp    c0014bf0 <Vm::faultHandler(regs*)+0x2e9>
c0014bcb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bce:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bd4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bd7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014be0:	66 c1 e8 09          	shr    ax,0x9
c0014be4:	83 e0 01             	and    eax,0x1
c0014be7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014bea:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014bed:	83 c0 02             	add    eax,0x2
c0014bf0:	25 ff ff 00 00       	and    eax,0xffff
c0014bf5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014bf8:	e9 7a 03 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014bfd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c01:	3c ee                	cmp    al,0xee
c0014c03:	75 10                	jne    c0014c15 <Vm::faultHandler(regs*)+0x30e>
c0014c05:	83 ec 0c             	sub    esp,0xc
c0014c08:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c0b:	e8 e9 f8 ff ff       	call   c00144f9 <Vm::mainloop3(unsigned long)>
c0014c10:	e9 4b 03 00 00       	jmp    c0014f60 <Vm::faultHandler(regs*)+0x659>
c0014c15:	83 ec 0c             	sub    esp,0xc
c0014c18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c20:	51                   	push   ecx
c0014c21:	50                   	push   eax
c0014c22:	53                   	push   ebx
c0014c23:	e8 e1 fb ff ff       	call   c0014809 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c28:	83 c4 20             	add    esp,0x20
c0014c2b:	e9 4a 03 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x673>
c0014c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c35:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c39:	e9 39 03 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c43:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c47:	e9 2b 03 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014c4c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c4f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c54:	74 2b                	je     c0014c81 <Vm::faultHandler(regs*)+0x37a>
c0014c56:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c5d:	76 22                	jbe    c0014c81 <Vm::faultHandler(regs*)+0x37a>
c0014c5f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c63:	50                   	push   eax
c0014c64:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c68:	50                   	push   eax
c0014c69:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c6d:	50                   	push   eax
c0014c6e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c72:	50                   	push   eax
c0014c73:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c77:	50                   	push   eax
c0014c78:	6a 6c                	push   0x6c
c0014c7a:	6a 6c                	push   0x6c
c0014c7c:	e9 b9 01 00 00       	jmp    c0014e3a <Vm::faultHandler(regs*)+0x533>
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c88:	0f b7 f6             	movzx  esi,si
c0014c8b:	50                   	push   eax
c0014c8c:	e8 b8 f7 ff ff       	call   c0014449 <Vm::inbv(unsigned short)>
c0014c91:	83 c4 0c             	add    esp,0xc
c0014c94:	0f b6 c0             	movzx  eax,al
c0014c97:	50                   	push   eax
c0014c98:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014c9c:	50                   	push   eax
c0014c9d:	56                   	push   esi
c0014c9e:	e8 24 fc ff ff       	call   c00148c7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014ca3:	83 c4 10             	add    esp,0x10
c0014ca6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ca9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014cad:	74 03                	je     c0014cb2 <Vm::faultHandler(regs*)+0x3ab>
c0014caf:	48                   	dec    eax
c0014cb0:	eb 01                	jmp    c0014cb3 <Vm::faultHandler(regs*)+0x3ac>
c0014cb2:	40                   	inc    eax
c0014cb3:	0f b7 c0             	movzx  eax,ax
c0014cb6:	e9 8d 00 00 00       	jmp    c0014d48 <Vm::faultHandler(regs*)+0x441>
c0014cbb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cc1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cc6:	74 29                	je     c0014cf1 <Vm::faultHandler(regs*)+0x3ea>
c0014cc8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ccd:	76 22                	jbe    c0014cf1 <Vm::faultHandler(regs*)+0x3ea>
c0014ccf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cd3:	50                   	push   eax
c0014cd4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cd8:	50                   	push   eax
c0014cd9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cdd:	50                   	push   eax
c0014cde:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ce2:	50                   	push   eax
c0014ce3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ce7:	50                   	push   eax
c0014ce8:	6a 6d                	push   0x6d
c0014cea:	6a 6d                	push   0x6d
c0014cec:	e9 49 01 00 00       	jmp    c0014e3a <Vm::faultHandler(regs*)+0x533>
c0014cf1:	0f b7 c8             	movzx  ecx,ax
c0014cf4:	0f b7 f6             	movzx  esi,si
c0014cf7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014cfa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cff:	74 20                	je     c0014d21 <Vm::faultHandler(regs*)+0x41a>
c0014d01:	ed                   	in     eax,dx
c0014d02:	55                   	push   ebp
c0014d03:	50                   	push   eax
c0014d04:	51                   	push   ecx
c0014d05:	56                   	push   esi
c0014d06:	e8 e7 fb ff ff       	call   c00148f2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014d0b:	83 c4 10             	add    esp,0x10
c0014d0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d11:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d15:	74 05                	je     c0014d1c <Vm::faultHandler(regs*)+0x415>
c0014d17:	83 e8 04             	sub    eax,0x4
c0014d1a:	eb 27                	jmp    c0014d43 <Vm::faultHandler(regs*)+0x43c>
c0014d1c:	83 c0 04             	add    eax,0x4
c0014d1f:	eb 22                	jmp    c0014d43 <Vm::faultHandler(regs*)+0x43c>
c0014d21:	66 ed                	in     ax,dx
c0014d23:	0f b7 c0             	movzx  eax,ax
c0014d26:	57                   	push   edi
c0014d27:	50                   	push   eax
c0014d28:	51                   	push   ecx
c0014d29:	56                   	push   esi
c0014d2a:	e8 ad fb ff ff       	call   c00148dc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d2f:	83 c4 10             	add    esp,0x10
c0014d32:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d35:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d39:	74 05                	je     c0014d40 <Vm::faultHandler(regs*)+0x439>
c0014d3b:	83 e8 02             	sub    eax,0x2
c0014d3e:	eb 03                	jmp    c0014d43 <Vm::faultHandler(regs*)+0x43c>
c0014d40:	83 c0 02             	add    eax,0x2
c0014d43:	25 ff ff 00 00       	and    eax,0xffff
c0014d48:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d4b:	e9 27 02 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014d50:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d53:	3c 05                	cmp    al,0x5
c0014d55:	77 24                	ja     c0014d7b <Vm::faultHandler(regs*)+0x474>
c0014d57:	0f b6 c0             	movzx  eax,al
c0014d5a:	ff 24 85 8c ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1074]
c0014d61:	0f b7 fd             	movzx  edi,bp
c0014d64:	eb 15                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x474>
c0014d66:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d6a:	eb 0f                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x474>
c0014d6c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d70:	eb 09                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x474>
c0014d72:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d76:	eb 03                	jmp    c0014d7b <Vm::faultHandler(regs*)+0x474>
c0014d78:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d7b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d7e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d83:	74 29                	je     c0014dae <Vm::faultHandler(regs*)+0x4a7>
c0014d85:	3d ff ff 00 00       	cmp    eax,0xffff
c0014d8a:	76 22                	jbe    c0014dae <Vm::faultHandler(regs*)+0x4a7>
c0014d8c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d90:	50                   	push   eax
c0014d91:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d95:	50                   	push   eax
c0014d96:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d9a:	50                   	push   eax
c0014d9b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d9f:	50                   	push   eax
c0014da0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014da4:	50                   	push   eax
c0014da5:	6a 6e                	push   0x6e
c0014da7:	6a 6e                	push   0x6e
c0014da9:	e9 8c 00 00 00       	jmp    c0014e3a <Vm::faultHandler(regs*)+0x533>
c0014dae:	0f b7 c0             	movzx  eax,ax
c0014db1:	52                   	push   edx
c0014db2:	52                   	push   edx
c0014db3:	50                   	push   eax
c0014db4:	57                   	push   edi
c0014db5:	e8 d9 fa ff ff       	call   c0014893 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014dba:	59                   	pop    ecx
c0014dbb:	0f b6 c0             	movzx  eax,al
c0014dbe:	5e                   	pop    esi
c0014dbf:	50                   	push   eax
c0014dc0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dc4:	50                   	push   eax
c0014dc5:	e8 92 f6 ff ff       	call   c001445c <Vm::outbv(unsigned short, unsigned char)>
c0014dca:	83 c4 10             	add    esp,0x10
c0014dcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014dd0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014dd4:	74 03                	je     c0014dd9 <Vm::faultHandler(regs*)+0x4d2>
c0014dd6:	48                   	dec    eax
c0014dd7:	eb 01                	jmp    c0014dda <Vm::faultHandler(regs*)+0x4d3>
c0014dd9:	40                   	inc    eax
c0014dda:	0f b7 c0             	movzx  eax,ax
c0014ddd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014de0:	e9 92 01 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014de5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014de8:	3c 05                	cmp    al,0x5
c0014dea:	77 1f                	ja     c0014e0b <Vm::faultHandler(regs*)+0x504>
c0014dec:	0f b6 c0             	movzx  eax,al
c0014def:	ff 24 85 a4 ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe105c]
c0014df6:	89 ef                	mov    edi,ebp
c0014df8:	eb 11                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x504>
c0014dfa:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014dfd:	eb 0c                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x504>
c0014dff:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014e02:	eb 07                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x504>
c0014e04:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014e07:	eb 02                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x504>
c0014e09:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014e0b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014e0e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e13:	74 37                	je     c0014e4c <Vm::faultHandler(regs*)+0x545>
c0014e15:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e1b:	76 2f                	jbe    c0014e4c <Vm::faultHandler(regs*)+0x545>
c0014e1d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e21:	50                   	push   eax
c0014e22:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e26:	50                   	push   eax
c0014e27:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e2b:	50                   	push   eax
c0014e2c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e30:	50                   	push   eax
c0014e31:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e35:	50                   	push   eax
c0014e36:	6a 6f                	push   0x6f
c0014e38:	6a 6f                	push   0x6f
c0014e3a:	68 32 ef 01 c0       	push   0xc001ef32
c0014e3f:	e8 a4 56 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014e44:	83 c4 20             	add    esp,0x20
c0014e47:	e9 86 01 00 00       	jmp    c0014fd2 <Vm::faultHandler(regs*)+0x6cb>
c0014e4c:	0f b7 d7             	movzx  edx,di
c0014e4f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e52:	0f b7 c6             	movzx  eax,si
c0014e55:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e5b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e5e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e63:	74 1d                	je     c0014e82 <Vm::faultHandler(regs*)+0x57b>
c0014e65:	55                   	push   ebp
c0014e66:	55                   	push   ebp
c0014e67:	50                   	push   eax
c0014e68:	52                   	push   edx
c0014e69:	e8 48 fa ff ff       	call   c00148b6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	89 fa                	mov    edx,edi
c0014e73:	ef                   	out    dx,eax
c0014e74:	85 c9                	test   ecx,ecx
c0014e76:	74 05                	je     c0014e7d <Vm::faultHandler(regs*)+0x576>
c0014e78:	83 ee 04             	sub    esi,0x4
c0014e7b:	eb 21                	jmp    c0014e9e <Vm::faultHandler(regs*)+0x597>
c0014e7d:	83 c6 04             	add    esi,0x4
c0014e80:	eb 1c                	jmp    c0014e9e <Vm::faultHandler(regs*)+0x597>
c0014e82:	55                   	push   ebp
c0014e83:	55                   	push   ebp
c0014e84:	50                   	push   eax
c0014e85:	52                   	push   edx
c0014e86:	e8 19 fa ff ff       	call   c00148a4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014e8b:	83 c4 10             	add    esp,0x10
c0014e8e:	89 fa                	mov    edx,edi
c0014e90:	66 ef                	out    dx,ax
c0014e92:	85 c9                	test   ecx,ecx
c0014e94:	74 05                	je     c0014e9b <Vm::faultHandler(regs*)+0x594>
c0014e96:	83 ee 02             	sub    esi,0x2
c0014e99:	eb 03                	jmp    c0014e9e <Vm::faultHandler(regs*)+0x597>
c0014e9b:	83 c6 02             	add    esi,0x2
c0014e9e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014ea4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014ea7:	e9 cb 00 00 00       	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014eac:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014eb3:	83 ec 0c             	sub    esp,0xc
c0014eb6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eba:	50                   	push   eax
c0014ebb:	e8 89 f5 ff ff       	call   c0014449 <Vm::inbv(unsigned short)>
c0014ec0:	0f b6 c0             	movzx  eax,al
c0014ec3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ec6:	eb 3f                	jmp    c0014f07 <Vm::faultHandler(regs*)+0x600>
c0014ec8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ecd:	74 07                	je     c0014ed6 <Vm::faultHandler(regs*)+0x5cf>
c0014ecf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ed3:	ed                   	in     eax,dx
c0014ed4:	eb 14                	jmp    c0014eea <Vm::faultHandler(regs*)+0x5e3>
c0014ed6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ed9:	66 31 f6             	xor    si,si
c0014edc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014edf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ee3:	66 ed                	in     ax,dx
c0014ee5:	0f b7 c0             	movzx  eax,ax
c0014ee8:	09 f0                	or     eax,esi
c0014eea:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014eed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ef1:	e9 84 00 00 00       	jmp    c0014f7a <Vm::faultHandler(regs*)+0x673>
c0014ef6:	52                   	push   edx
c0014ef7:	52                   	push   edx
c0014ef8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014efc:	50                   	push   eax
c0014efd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f01:	50                   	push   eax
c0014f02:	e8 55 f5 ff ff       	call   c001445c <Vm::outbv(unsigned short, unsigned char)>
c0014f07:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f0b:	eb 53                	jmp    c0014f60 <Vm::faultHandler(regs*)+0x659>
c0014f0d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f10:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f14:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f19:	74 03                	je     c0014f1e <Vm::faultHandler(regs*)+0x617>
c0014f1b:	ef                   	out    dx,eax
c0014f1c:	eb cf                	jmp    c0014eed <Vm::faultHandler(regs*)+0x5e6>
c0014f1e:	66 ef                	out    dx,ax
c0014f20:	eb cb                	jmp    c0014eed <Vm::faultHandler(regs*)+0x5e6>
c0014f22:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f30:	50                   	push   eax
c0014f31:	e8 13 f5 ff ff       	call   c0014449 <Vm::inbv(unsigned short)>
c0014f36:	0f b6 c0             	movzx  eax,al
c0014f39:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f3c:	eb 1f                	jmp    c0014f5d <Vm::faultHandler(regs*)+0x656>
c0014f3e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f41:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f46:	74 03                	je     c0014f4b <Vm::faultHandler(regs*)+0x644>
c0014f48:	ed                   	in     eax,dx
c0014f49:	eb 0d                	jmp    c0014f58 <Vm::faultHandler(regs*)+0x651>
c0014f4b:	66 ed                	in     ax,dx
c0014f4d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f50:	0f b7 c0             	movzx  eax,ax
c0014f53:	66 31 d2             	xor    dx,dx
c0014f56:	09 d0                	or     eax,edx
c0014f58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f5b:	eb 1a                	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014f5d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	eb 15                	jmp    c0014f7a <Vm::faultHandler(regs*)+0x673>
c0014f65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f68:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f6b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f70:	74 03                	je     c0014f75 <Vm::faultHandler(regs*)+0x66e>
c0014f72:	ef                   	out    dx,eax
c0014f73:	eb 02                	jmp    c0014f77 <Vm::faultHandler(regs*)+0x670>
c0014f75:	66 ef                	out    dx,ax
c0014f77:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f7a:	b0 01                	mov    al,0x1
c0014f7c:	eb 56                	jmp    c0014fd4 <Vm::faultHandler(regs*)+0x6cd>
c0014f7e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014f82:	50                   	push   eax
c0014f83:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014f87:	50                   	push   eax
c0014f88:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014f8c:	50                   	push   eax
c0014f8d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014f91:	50                   	push   eax
c0014f92:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f96:	50                   	push   eax
c0014f97:	52                   	push   edx
c0014f98:	52                   	push   edx
c0014f99:	68 5f ef 01 c0       	push   0xc001ef5f
c0014f9e:	e8 45 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014fa3:	83 c4 20             	add    esp,0x20
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	6a 60                	push   0x60
c0014fab:	e8 99 f4 ff ff       	call   c0014449 <Vm::inbv(unsigned short)>
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	3c 1c                	cmp    al,0x1c
c0014fb5:	74 04                	je     c0014fbb <Vm::faultHandler(regs*)+0x6b4>
c0014fb7:	3c 5a                	cmp    al,0x5a
c0014fb9:	75 eb                	jne    c0014fa6 <Vm::faultHandler(regs*)+0x69f>
c0014fbb:	3c 5a                	cmp    al,0x5a
c0014fbd:	74 04                	je     c0014fc3 <Vm::faultHandler(regs*)+0x6bc>
c0014fbf:	3c 1c                	cmp    al,0x1c
c0014fc1:	75 0f                	jne    c0014fd2 <Vm::faultHandler(regs*)+0x6cb>
c0014fc3:	83 ec 0c             	sub    esp,0xc
c0014fc6:	6a 60                	push   0x60
c0014fc8:	e8 7c f4 ff ff       	call   c0014449 <Vm::inbv(unsigned short)>
c0014fcd:	83 c4 10             	add    esp,0x10
c0014fd0:	eb e9                	jmp    c0014fbb <Vm::faultHandler(regs*)+0x6b4>
c0014fd2:	31 c0                	xor    eax,eax
c0014fd4:	83 c4 1c             	add    esp,0x1c
c0014fd7:	5b                   	pop    ebx
c0014fd8:	5e                   	pop    esi
c0014fd9:	5f                   	pop    edi
c0014fda:	5d                   	pop    ebp
c0014fdb:	c3                   	ret    

c0014fdc <noCopro(unsigned long)>:
c0014fdc:	c3                   	ret    

c0014fdd <nmiHandler(regs*, void*)>:
c0014fdd:	83 ec 0c             	sub    esp,0xc
c0014fe0:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0014fe5:	83 ec 0c             	sub    esp,0xc
c0014fe8:	50                   	push   eax
c0014fe9:	e8 ec 1f ff ff       	call   c0006fda <Computer::handleNMI()>
c0014fee:	83 c4 10             	add    esp,0x10
c0014ff1:	90                   	nop
c0014ff2:	83 c4 0c             	add    esp,0xc
c0014ff5:	c3                   	ret    

c0014ff6 <doubleFault(regs*, void*)>:
c0014ff6:	55                   	push   ebp
c0014ff7:	89 e5                	mov    ebp,esp
c0014ff9:	83 ec 08             	sub    esp,0x8
c0014ffc:	83 ec 0c             	sub    esp,0xc
c0014fff:	68 bc ef 01 c0       	push   0xc001efbc
c0015004:	e8 4a b1 ff ff       	call   c0010153 <KePanic(char const*)>
c0015009:	83 c4 10             	add    esp,0x10
c001500c:	90                   	nop
c001500d:	c9                   	leave  
c001500e:	c3                   	ret    

c001500f <displayDebugInfo(regs*)>:
c001500f:	83 ec 1c             	sub    esp,0x1c
c0015012:	0f 20 c0             	mov    eax,cr0
c0015015:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015019:	0f 20 d0             	mov    eax,cr2
c001501c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015020:	0f 20 d8             	mov    eax,cr3
c0015023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015027:	0f 20 e0             	mov    eax,cr4
c001502a:	89 04 24             	mov    DWORD PTR [esp],eax
c001502d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015031:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015034:	83 ec 08             	sub    esp,0x8
c0015037:	50                   	push   eax
c0015038:	68 d8 ef 01 c0       	push   0xc001efd8
c001503d:	e8 a6 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015042:	83 c4 10             	add    esp,0x10
c0015045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015049:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001504c:	83 ec 08             	sub    esp,0x8
c001504f:	50                   	push   eax
c0015050:	68 c9 ef 01 c0       	push   0xc001efc9
c0015055:	e8 8e 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001505a:	83 c4 10             	add    esp,0x10
c001505d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015061:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015064:	83 ec 08             	sub    esp,0x8
c0015067:	50                   	push   eax
c0015068:	68 d4 ef 01 c0       	push   0xc001efd4
c001506d:	e8 76 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015072:	83 c4 10             	add    esp,0x10
c0015075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015079:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507c:	83 ec 08             	sub    esp,0x8
c001507f:	50                   	push   eax
c0015080:	68 e3 ef 01 c0       	push   0xc001efe3
c0015085:	e8 5e 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015091:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015094:	83 ec 08             	sub    esp,0x8
c0015097:	50                   	push   eax
c0015098:	68 ee ef 01 c0       	push   0xc001efee
c001509d:	e8 46 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	83 ec 08             	sub    esp,0x8
c00150a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150ac:	68 f9 ef 01 c0       	push   0xc001eff9
c00150b1:	e8 32 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	83 ec 08             	sub    esp,0x8
c00150bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150c0:	68 04 f0 01 c0       	push   0xc001f004
c00150c5:	e8 1e 54 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00150d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d8:	83 ec 0c             	sub    esp,0xc
c00150db:	50                   	push   eax
c00150dc:	e8 26 33 ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00150e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ef:	83 ec 08             	sub    esp,0x8
c00150f2:	68 0f f0 01 c0       	push   0xc001f00f
c00150f7:	50                   	push   eax
c00150f8:	e8 49 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015105:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015110:	8b 12                	mov    edx,DWORD PTR [edx]
c0015112:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015115:	83 c2 0c             	add    edx,0xc
c0015118:	83 ec 08             	sub    esp,0x8
c001511b:	52                   	push   edx
c001511c:	50                   	push   eax
c001511d:	e8 24 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015122:	83 c4 10             	add    esp,0x10
c0015125:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c001512a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015130:	83 ec 08             	sub    esp,0x8
c0015133:	68 18 f0 01 c0       	push   0xc001f018
c0015138:	50                   	push   eax
c0015139:	e8 08 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001513e:	83 c4 10             	add    esp,0x10
c0015141:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015146:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001514c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015150:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015153:	83 ec 08             	sub    esp,0x8
c0015156:	52                   	push   edx
c0015157:	50                   	push   eax
c0015158:	e8 a3 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c001515d:	83 c4 10             	add    esp,0x10
c0015160:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015165:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001516b:	83 ec 08             	sub    esp,0x8
c001516e:	68 20 f0 01 c0       	push   0xc001f020
c0015173:	50                   	push   eax
c0015174:	e8 cd 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015181:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015187:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001518b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001518e:	83 ec 08             	sub    esp,0x8
c0015191:	52                   	push   edx
c0015192:	50                   	push   eax
c0015193:	e8 68 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00151a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a6:	83 ec 08             	sub    esp,0x8
c00151a9:	68 28 f0 01 c0       	push   0xc001f028
c00151ae:	50                   	push   eax
c00151af:	e8 92 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00151bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151c6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151c9:	83 ec 08             	sub    esp,0x8
c00151cc:	52                   	push   edx
c00151cd:	50                   	push   eax
c00151ce:	e8 2d 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00151d3:	83 c4 10             	add    esp,0x10
c00151d6:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00151db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e1:	83 ec 08             	sub    esp,0x8
c00151e4:	68 30 f0 01 c0       	push   0xc001f030
c00151e9:	50                   	push   eax
c00151ea:	e8 57 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00151f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015201:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015204:	83 ec 08             	sub    esp,0x8
c0015207:	52                   	push   edx
c0015208:	50                   	push   eax
c0015209:	e8 f2 34 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015216:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001521c:	83 ec 08             	sub    esp,0x8
c001521f:	68 38 f0 01 c0       	push   0xc001f038
c0015224:	50                   	push   eax
c0015225:	e8 1c 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015232:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015238:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001523c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001523f:	83 ec 08             	sub    esp,0x8
c0015242:	52                   	push   edx
c0015243:	50                   	push   eax
c0015244:	e8 b7 34 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015251:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015257:	83 ec 08             	sub    esp,0x8
c001525a:	68 40 f0 01 c0       	push   0xc001f040
c001525f:	50                   	push   eax
c0015260:	e8 e1 34 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c001526d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015273:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015277:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001527a:	83 ec 08             	sub    esp,0x8
c001527d:	52                   	push   edx
c001527e:	50                   	push   eax
c001527f:	e8 7c 34 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c001528c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015292:	83 ec 08             	sub    esp,0x8
c0015295:	68 48 f0 01 c0       	push   0xc001f048
c001529a:	50                   	push   eax
c001529b:	e8 a6 34 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00152a0:	83 c4 10             	add    esp,0x10
c00152a3:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00152a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ae:	83 ec 08             	sub    esp,0x8
c00152b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152b5:	50                   	push   eax
c00152b6:	e8 45 34 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00152bb:	83 c4 10             	add    esp,0x10
c00152be:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00152c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152c9:	83 ec 08             	sub    esp,0x8
c00152cc:	68 51 f0 01 c0       	push   0xc001f051
c00152d1:	50                   	push   eax
c00152d2:	e8 6f 34 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00152df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e5:	83 ec 08             	sub    esp,0x8
c00152e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00152ec:	50                   	push   eax
c00152ed:	e8 0e 34 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00152f2:	83 c4 10             	add    esp,0x10
c00152f5:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c00152fa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015300:	83 ec 08             	sub    esp,0x8
c0015303:	68 59 f0 01 c0       	push   0xc001f059
c0015308:	50                   	push   eax
c0015309:	e8 38 34 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0015316:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001531c:	83 ec 08             	sub    esp,0x8
c001531f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015323:	50                   	push   eax
c0015324:	e8 d7 33 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015329:	83 c4 10             	add    esp,0x10
c001532c:	fa                   	cli    
c001532d:	f4                   	hlt    
c001532e:	eb fe                	jmp    c001532e <displayDebugInfo(regs*)+0x31f>

c0015330 <HalSystemIdle()>:
c0015330:	56                   	push   esi
c0015331:	53                   	push   ebx
c0015332:	83 ec 14             	sub    esp,0x14
c0015335:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001533a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015340:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015346:	83 e0 04             	and    eax,0x4
c0015349:	84 c0                	test   al,al
c001534b:	0f 95 c0             	setne  al
c001534e:	84 c0                	test   al,al
c0015350:	74 4c                	je     c001539e <HalSystemIdle()+0x6e>
c0015352:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0015357:	83 ec 08             	sub    esp,0x8
c001535a:	68 e1 00 00 00       	push   0xe1
c001535f:	50                   	push   eax
c0015360:	e8 8d 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001536c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015370:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0015375:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015379:	83 e2 02             	and    edx,0x2
c001537c:	89 d3                	mov    ebx,edx
c001537e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015382:	83 e2 00             	and    edx,0x0
c0015385:	89 d6                	mov    esi,edx
c0015387:	56                   	push   esi
c0015388:	53                   	push   ebx
c0015389:	68 e1 00 00 00       	push   0xe1
c001538e:	50                   	push   eax
c001538f:	e8 8a 1a ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015394:	83 c4 10             	add    esp,0x10
c0015397:	e8 f8 ad fe ff       	call   c0000194 <doTPAUSE>
c001539c:	eb 01                	jmp    c001539f <HalSystemIdle()+0x6f>
c001539e:	f4                   	hlt    
c001539f:	90                   	nop
c00153a0:	83 c4 14             	add    esp,0x14
c00153a3:	5b                   	pop    ebx
c00153a4:	5e                   	pop    esi
c00153a5:	c3                   	ret    

c00153a6 <displayProgramFault(char const*)>:
c00153a6:	83 ec 0c             	sub    esp,0xc
c00153a9:	83 ec 0c             	sub    esp,0xc
c00153ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153b0:	e8 33 51 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00153b5:	83 c4 10             	add    esp,0x10
c00153b8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153c8:	85 c0                	test   eax,eax
c00153ca:	74 21                	je     c00153ed <displayProgramFault(char const*)+0x47>
c00153cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153dc:	6a 04                	push   0x4
c00153de:	6a 0f                	push   0xf
c00153e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153e4:	50                   	push   eax
c00153e5:	e8 ce 33 ff ff       	call   c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	90                   	nop
c00153ee:	83 c4 0c             	add    esp,0xc
c00153f1:	c3                   	ret    

c00153f2 <gpFault(regs*, void*)>:
c00153f2:	83 ec 1c             	sub    esp,0x1c
c00153f5:	c7 05 90 40 02 c0 07 49 01 c0 	mov    DWORD PTR ds:0xc0024090,0xc0014907
c00153ff:	a1 90 40 02 c0       	mov    eax,ds:0xc0024090
c0015404:	85 c0                	test   eax,eax
c0015406:	74 1c                	je     c0015424 <gpFault(regs*, void*)+0x32>
c0015408:	a1 90 40 02 c0       	mov    eax,ds:0xc0024090
c001540d:	83 ec 0c             	sub    esp,0xc
c0015410:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015414:	ff d0                	call   eax
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001541d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015422:	75 2e                	jne    c0015452 <gpFault(regs*, void*)+0x60>
c0015424:	83 ec 0c             	sub    esp,0xc
c0015427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001542b:	e8 df fb ff ff       	call   c001500f <displayDebugInfo(regs*)>
c0015430:	83 c4 10             	add    esp,0x10
c0015433:	83 ec 0c             	sub    esp,0xc
c0015436:	68 61 f0 01 c0       	push   0xc001f061
c001543b:	e8 66 ff ff ff       	call   c00153a6 <displayProgramFault(char const*)>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	83 ec 0c             	sub    esp,0xc
c0015446:	6a 00                	push   0x0
c0015448:	e8 af ee ff ff       	call   c00142fc <Thr::terminateFromIRQ(int)>
c001544d:	83 c4 10             	add    esp,0x10
c0015450:	eb 01                	jmp    c0015453 <gpFault(regs*, void*)+0x61>
c0015452:	90                   	nop
c0015453:	83 c4 1c             	add    esp,0x1c
c0015456:	c3                   	ret    

c0015457 <pgFault(regs*, void*)>:
c0015457:	83 ec 1c             	sub    esp,0x1c
c001545a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001545e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015461:	0f 20 d0             	mov    eax,cr2
c0015464:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001546c:	83 ec 04             	sub    esp,0x4
c001546f:	52                   	push   edx
c0015470:	50                   	push   eax
c0015471:	68 40 f1 01 c0       	push   0xc001f140
c0015476:	e8 6d 50 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015483:	8b 00                	mov    eax,DWORD PTR [eax]
c0015485:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015488:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001548e:	0f 20 d2             	mov    edx,cr2
c0015491:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015495:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015499:	83 ec 08             	sub    esp,0x8
c001549c:	52                   	push   edx
c001549d:	50                   	push   eax
c001549e:	e8 77 4c ff ff       	call   c000a11a <VAS::tryLoadBackOffDisk(unsigned long)>
c00154a3:	83 c4 10             	add    esp,0x10
c00154a6:	84 c0                	test   al,al
c00154a8:	75 2e                	jne    c00154d8 <pgFault(regs*, void*)+0x81>
c00154aa:	83 ec 0c             	sub    esp,0xc
c00154ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154b1:	e8 59 fb ff ff       	call   c001500f <displayDebugInfo(regs*)>
c00154b6:	83 c4 10             	add    esp,0x10
c00154b9:	83 ec 0c             	sub    esp,0xc
c00154bc:	68 7a f0 01 c0       	push   0xc001f07a
c00154c1:	e8 e0 fe ff ff       	call   c00153a6 <displayProgramFault(char const*)>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	83 ec 0c             	sub    esp,0xc
c00154cc:	6a 00                	push   0x0
c00154ce:	e8 29 ee ff ff       	call   c00142fc <Thr::terminateFromIRQ(int)>
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	eb 01                	jmp    c00154d9 <pgFault(regs*, void*)+0x82>
c00154d8:	90                   	nop
c00154d9:	83 c4 1c             	add    esp,0x1c
c00154dc:	c3                   	ret    

c00154dd <otherISRHandler(regs*, void*)>:
c00154dd:	83 ec 0c             	sub    esp,0xc
c00154e0:	83 ec 0c             	sub    esp,0xc
c00154e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154e7:	e8 23 fb ff ff       	call   c001500f <displayDebugInfo(regs*)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	83 ec 0c             	sub    esp,0xc
c00154f2:	68 68 f1 01 c0       	push   0xc001f168
c00154f7:	e8 aa fe ff ff       	call   c00153a6 <displayProgramFault(char const*)>
c00154fc:	83 c4 10             	add    esp,0x10
c00154ff:	83 ec 0c             	sub    esp,0xc
c0015502:	6a 00                	push   0x0
c0015504:	e8 f3 ed ff ff       	call   c00142fc <Thr::terminateFromIRQ(int)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	90                   	nop
c001550d:	83 c4 0c             	add    esp,0xc
c0015510:	c3                   	ret    

c0015511 <opcodeFault(regs*, void*)>:
c0015511:	55                   	push   ebp
c0015512:	89 e5                	mov    ebp,esp
c0015514:	83 ec 08             	sub    esp,0x8
c0015517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	50                   	push   eax
c0015521:	68 85 f0 01 c0       	push   0xc001f085
c0015526:	e8 bd 4f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0015533:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015539:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001553f:	84 c0                	test   al,al
c0015541:	74 21                	je     c0015564 <opcodeFault(regs*, void*)+0x53>
c0015543:	83 ec 0c             	sub    esp,0xc
c0015546:	68 90 f1 01 c0       	push   0xc001f190
c001554b:	e8 98 4f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015550:	83 c4 10             	add    esp,0x10
c0015553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015556:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015559:	8d 50 19             	lea    edx,[eax+0x19]
c001555c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015562:	eb 2b                	jmp    c001558f <opcodeFault(regs*, void*)+0x7e>
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001556a:	e8 a0 fa ff ff       	call   c001500f <displayDebugInfo(regs*)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	83 ec 0c             	sub    esp,0xc
c0015575:	68 93 f0 01 c0       	push   0xc001f093
c001557a:	e8 27 fe ff ff       	call   c00153a6 <displayProgramFault(char const*)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	6a 00                	push   0x0
c0015587:	e8 70 ed ff ff       	call   c00142fc <Thr::terminateFromIRQ(int)>
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	c9                   	leave  
c0015590:	c3                   	ret    

c0015591 <i386SaveCoprocessor(void*)>:
c0015591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015595:	83 c0 3f             	add    eax,0x3f
c0015598:	83 e0 c0             	and    eax,0xffffffc0
c001559b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001559f:	ff 25 8c 40 02 c0    	jmp    DWORD PTR ds:0xc002408c

c00155a5 <i386LoadCoprocessor(void*)>:
c00155a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155a9:	83 c0 3f             	add    eax,0x3f
c00155ac:	83 e0 c0             	and    eax,0xffffffc0
c00155af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155b3:	ff 25 88 40 02 c0    	jmp    DWORD PTR ds:0xc0024088

c00155b9 <x87EmulHandler(regs*, void*)>:
c00155b9:	53                   	push   ebx
c00155ba:	83 ec 08             	sub    esp,0x8
c00155bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155c6:	74 10                	je     c00155d8 <x87EmulHandler(regs*, void*)+0x1f>
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	68 a0 f0 01 c0       	push   0xc001f0a0
c00155d0:	e8 7e ab ff ff       	call   c0010153 <KePanic(char const*)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	0f 20 c0             	mov    eax,cr0
c00155db:	a8 08                	test   al,0x8
c00155dd:	74 59                	je     c0015638 <x87EmulHandler(regs*, void*)+0x7f>
c00155df:	0f 06                	clts   
c00155e1:	a1 84 40 02 c0       	mov    eax,ds:0xc0024084
c00155e6:	85 c0                	test   eax,eax
c00155e8:	74 0e                	je     c00155f8 <x87EmulHandler(regs*, void*)+0x3f>
c00155ea:	83 ec 0c             	sub    esp,0xc
c00155ed:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00155f0:	e8 9c ff ff ff       	call   c0015591 <i386SaveCoprocessor(void*)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00155fe:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015602:	75 12                	jne    c0015616 <x87EmulHandler(regs*, void*)+0x5d>
c0015604:	83 ec 0c             	sub    esp,0xc
c0015607:	68 40 02 00 00       	push   0x240
c001560c:	e8 a8 21 ff ff       	call   c00077b9 <malloc>
c0015611:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015614:	eb 10                	jmp    c0015626 <x87EmulHandler(regs*, void*)+0x6d>
c0015616:	83 ec 0c             	sub    esp,0xc
c0015619:	a1 84 40 02 c0       	mov    eax,ds:0xc0024084
c001561e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015621:	e8 7f ff ff ff       	call   c00155a5 <i386LoadCoprocessor(void*)>
c0015626:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	a3 84 40 02 c0       	mov    ds:0xc0024084,eax
c0015633:	83 c4 08             	add    esp,0x8
c0015636:	5b                   	pop    ebx
c0015637:	c3                   	ret    
c0015638:	83 ec 0c             	sub    esp,0xc
c001563b:	68 b4 f0 01 c0       	push   0xc001f0b4
c0015640:	e8 a3 4e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015645:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001564d:	83 c4 18             	add    esp,0x18
c0015650:	5b                   	pop    ebx
c0015651:	e9 a6 ec ff ff       	jmp    c00142fc <Thr::terminateFromIRQ(int)>

c0015656 <HalInitialiseCoprocessor()>:
c0015656:	83 ec 10             	sub    esp,0x10
c0015659:	c7 05 84 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024084,0x0
c0015663:	6a 00                	push   0x0
c0015665:	68 b9 55 01 c0       	push   0xc00155b9
c001566a:	6a 07                	push   0x7
c001566c:	e8 eb 67 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015671:	e8 9a 65 00 00       	call   c001bc10 <avxDetect>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	85 c0                	test   eax,eax
c001567b:	74 1c                	je     c0015699 <HalInitialiseCoprocessor()+0x43>
c001567d:	c7 05 8c 40 02 c0 3a bc 01 c0 	mov    DWORD PTR ds:0xc002408c,0xc001bc3a
c0015687:	c7 05 88 40 02 c0 4b bc 01 c0 	mov    DWORD PTR ds:0xc0024088,0xc001bc4b
c0015691:	83 c4 0c             	add    esp,0xc
c0015694:	e9 c3 65 00 00       	jmp    c001bc5c <avxInit>
c0015699:	e8 f2 67 00 00       	call   c001be90 <absolutelyNoChanceInHell>
c001569e:	85 c0                	test   eax,eax
c00156a0:	74 1c                	je     c00156be <HalInitialiseCoprocessor()+0x68>
c00156a2:	c7 05 8c 40 02 c0 a8 be 01 c0 	mov    DWORD PTR ds:0xc002408c,0xc001bea8
c00156ac:	c7 05 88 40 02 c0 b0 be 01 c0 	mov    DWORD PTR ds:0xc0024088,0xc001beb0
c00156b6:	83 c4 0c             	add    esp,0xc
c00156b9:	e9 fa 67 00 00       	jmp    c001beb8 <sseInit>
c00156be:	e8 13 68 00 00       	call   c001bed6 <x87Detect>
c00156c3:	85 c0                	test   eax,eax
c00156c5:	74 1c                	je     c00156e3 <HalInitialiseCoprocessor()+0x8d>
c00156c7:	c7 05 8c 40 02 c0 f1 be 01 c0 	mov    DWORD PTR ds:0xc002408c,0xc001bef1
c00156d1:	c7 05 88 40 02 c0 f8 be 01 c0 	mov    DWORD PTR ds:0xc0024088,0xc001bef8
c00156db:	83 c4 0c             	add    esp,0xc
c00156de:	e9 1c 68 00 00       	jmp    c001beff <x87Init>
c00156e3:	c7 05 8c 40 02 c0 dc 4f 01 c0 	mov    DWORD PTR ds:0xc002408c,0xc0014fdc
c00156ed:	c7 05 88 40 02 c0 dc 4f 01 c0 	mov    DWORD PTR ds:0xc0024088,0xc0014fdc
c00156f7:	0f 20 c0             	mov    eax,cr0
c00156fa:	83 c8 04             	or     eax,0x4
c00156fd:	0f 22 c0             	mov    cr0,eax
c0015700:	83 c4 0c             	add    esp,0xc
c0015703:	c3                   	ret    

c0015704 <HalPanic(char const*)>:
c0015704:	53                   	push   ebx
c0015705:	83 ec 10             	sub    esp,0x10
c0015708:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001570c:	fa                   	cli    
c001570d:	53                   	push   ebx
c001570e:	68 ca f0 01 c0       	push   0xc001f0ca
c0015713:	e8 d0 4d ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015718:	83 c4 0c             	add    esp,0xc
c001571b:	6a 01                	push   0x1
c001571d:	6a 0f                	push   0xf
c001571f:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015725:	e8 30 2b ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001572a:	58                   	pop    eax
c001572b:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015731:	e8 1c 2d ff ff       	call   c0008452 <VgaText::clearScreen()>
c0015736:	5a                   	pop    edx
c0015737:	59                   	pop    ecx
c0015738:	68 f4 d8 01 c0       	push   0xc001d8f4
c001573d:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015743:	e8 4a 2b ff ff       	call   c0008292 <VgaText::setTitle(char*)>
c0015748:	83 c4 0c             	add    esp,0xc
c001574b:	6a 01                	push   0x1
c001574d:	6a 0f                	push   0xf
c001574f:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015755:	e8 00 2b ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001575a:	58                   	pop    eax
c001575b:	5a                   	pop    edx
c001575c:	68 e3 f0 01 c0       	push   0xc001f0e3
c0015761:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015767:	e8 da 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001576c:	83 c4 0c             	add    esp,0xc
c001576f:	6a 0f                	push   0xf
c0015771:	6a 01                	push   0x1
c0015773:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c0015779:	e8 dc 2a ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001577e:	59                   	pop    ecx
c001577f:	58                   	pop    eax
c0015780:	68 ec f0 01 c0       	push   0xc001f0ec
c0015785:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c001578b:	e8 b6 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015790:	83 c4 0c             	add    esp,0xc
c0015793:	6a 01                	push   0x1
c0015795:	6a 0f                	push   0xf
c0015797:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c001579d:	e8 b8 2a ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157a2:	58                   	pop    eax
c00157a3:	5a                   	pop    edx
c00157a4:	68 30 f1 01 c0       	push   0xc001f130
c00157a9:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c00157af:	e8 92 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00157b4:	59                   	pop    ecx
c00157b5:	58                   	pop    eax
c00157b6:	68 f9 f0 01 c0       	push   0xc001f0f9
c00157bb:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c00157c1:	e8 80 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00157c6:	58                   	pop    eax
c00157c7:	5a                   	pop    edx
c00157c8:	68 33 f1 01 c0       	push   0xc001f133
c00157cd:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c00157d3:	e8 6e 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00157d8:	59                   	pop    ecx
c00157d9:	58                   	pop    eax
c00157da:	53                   	push   ebx
c00157db:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c00157e1:	e8 60 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00157e6:	58                   	pop    eax
c00157e7:	5a                   	pop    edx
c00157e8:	68 30 f1 01 c0       	push   0xc001f130
c00157ed:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c00157f3:	e8 4e 2f ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00157f8:	83 c4 10             	add    esp,0x10
c00157fb:	eb fe                	jmp    c00157fb <HalPanic(char const*)+0xf7>

c00157fd <HalQueryPerformanceCounter()>:
c00157fd:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0015802:	31 d2                	xor    edx,edx
c0015804:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001580a:	31 c0                	xor    eax,eax
c001580c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015813:	74 02                	je     c0015817 <HalQueryPerformanceCounter()+0x1a>
c0015815:	0f 31                	rdtsc  
c0015817:	c3                   	ret    

c0015818 <HalInitialise()>:
c0015818:	53                   	push   ebx
c0015819:	83 ec 08             	sub    esp,0x8
c001581c:	e8 6e 68 ff ff       	call   c000c08f <setupINTS()>
c0015821:	80 3d 00 36 02 c0 00 	cmp    BYTE PTR ds:0xc0023600,0x0
c0015828:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001582d:	75 07                	jne    c0015836 <HalInitialise()+0x1e>
c001582f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015836:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001583c:	83 e0 01             	and    eax,0x1
c001583f:	a2 80 40 02 c0       	mov    ds:0xc0024080,al
c0015844:	e8 a7 02 00 00       	call   c0015af0 <picOpen()>
c0015849:	80 3d 80 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024080,0x0
c0015850:	74 0a                	je     c001585c <HalInitialise()+0x44>
c0015852:	e8 e1 01 00 00       	call   c0015a38 <picDisable()>
c0015857:	e8 26 5d 00 00       	call   c001b582 <apicOpen()>
c001585c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015861:	50                   	push   eax
c0015862:	6a 00                	push   0x0
c0015864:	68 dd 54 01 c0       	push   0xc00154dd
c0015869:	6a 00                	push   0x0
c001586b:	e8 ec 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015870:	83 c4 0c             	add    esp,0xc
c0015873:	6a 00                	push   0x0
c0015875:	68 dd 54 01 c0       	push   0xc00154dd
c001587a:	6a 01                	push   0x1
c001587c:	e8 db 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015881:	83 c4 0c             	add    esp,0xc
c0015884:	6a 00                	push   0x0
c0015886:	68 dd 4f 01 c0       	push   0xc0014fdd
c001588b:	6a 02                	push   0x2
c001588d:	e8 ca 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015892:	83 c4 0c             	add    esp,0xc
c0015895:	6a 00                	push   0x0
c0015897:	68 dd 54 01 c0       	push   0xc00154dd
c001589c:	6a 03                	push   0x3
c001589e:	e8 b9 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a3:	83 c4 0c             	add    esp,0xc
c00158a6:	6a 00                	push   0x0
c00158a8:	68 dd 54 01 c0       	push   0xc00154dd
c00158ad:	6a 04                	push   0x4
c00158af:	e8 a8 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b4:	83 c4 0c             	add    esp,0xc
c00158b7:	6a 00                	push   0x0
c00158b9:	68 dd 54 01 c0       	push   0xc00154dd
c00158be:	6a 05                	push   0x5
c00158c0:	e8 97 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c5:	83 c4 0c             	add    esp,0xc
c00158c8:	6a 00                	push   0x0
c00158ca:	68 11 55 01 c0       	push   0xc0015511
c00158cf:	6a 06                	push   0x6
c00158d1:	e8 86 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d6:	83 c4 0c             	add    esp,0xc
c00158d9:	6a 00                	push   0x0
c00158db:	68 f6 4f 01 c0       	push   0xc0014ff6
c00158e0:	6a 08                	push   0x8
c00158e2:	e8 75 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e7:	83 c4 0c             	add    esp,0xc
c00158ea:	6a 00                	push   0x0
c00158ec:	68 dd 54 01 c0       	push   0xc00154dd
c00158f1:	6a 09                	push   0x9
c00158f3:	e8 64 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f8:	83 c4 0c             	add    esp,0xc
c00158fb:	6a 00                	push   0x0
c00158fd:	68 dd 54 01 c0       	push   0xc00154dd
c0015902:	6a 0a                	push   0xa
c0015904:	e8 53 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015909:	83 c4 0c             	add    esp,0xc
c001590c:	6a 00                	push   0x0
c001590e:	68 dd 54 01 c0       	push   0xc00154dd
c0015913:	6a 0b                	push   0xb
c0015915:	e8 42 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001591a:	83 c4 0c             	add    esp,0xc
c001591d:	6a 00                	push   0x0
c001591f:	68 f2 53 01 c0       	push   0xc00153f2
c0015924:	6a 0d                	push   0xd
c0015926:	e8 31 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001592b:	83 c4 0c             	add    esp,0xc
c001592e:	6a 00                	push   0x0
c0015930:	68 57 54 01 c0       	push   0xc0015457
c0015935:	6a 0e                	push   0xe
c0015937:	e8 20 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	50                   	push   eax
c0015940:	6a 00                	push   0x0
c0015942:	68 dd 54 01 c0       	push   0xc00154dd
c0015947:	53                   	push   ebx
c0015948:	43                   	inc    ebx
c0015949:	e8 0e 65 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594e:	83 c4 10             	add    esp,0x10
c0015951:	83 fb 1e             	cmp    ebx,0x1e
c0015954:	75 e9                	jne    c001593f <HalInitialise()+0x127>
c0015956:	50                   	push   eax
c0015957:	6a 00                	push   0x0
c0015959:	68 1f 14 01 c0       	push   0xc001141f
c001595e:	6a 60                	push   0x60
c0015960:	e8 f7 64 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015965:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001596a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015974:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001597b:	e8 39 1e ff ff       	call   c00077b9 <malloc>
c0015980:	89 04 24             	mov    DWORD PTR [esp],eax
c0015983:	89 c3                	mov    ebx,eax
c0015985:	e8 2e 09 00 00       	call   c00162b8 <RTC::RTC()>
c001598a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015994:	5a                   	pop    edx
c0015995:	59                   	pop    ecx
c0015996:	53                   	push   ebx
c0015997:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c001599d:	e8 86 5f ff ff       	call   c000b928 <Device::addChild(Device*)>
c00159a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159a4:	6a 00                	push   0x0
c00159a6:	6a 00                	push   0x0
c00159a8:	6a 00                	push   0x0
c00159aa:	53                   	push   ebx
c00159ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ae:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c00159b3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159b9:	83 c4 28             	add    esp,0x28
c00159bc:	5b                   	pop    ebx
c00159bd:	c3                   	ret    

c00159be <HalMakeBeep(int)>:
c00159be:	53                   	push   ebx
c00159bf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159c3:	85 db                	test   ebx,ebx
c00159c5:	75 07                	jne    c00159ce <HalMakeBeep(int)+0x10>
c00159c7:	e4 61                	in     al,0x61
c00159c9:	83 e0 fc             	and    eax,0xfffffffc
c00159cc:	eb 26                	jmp    c00159f4 <HalMakeBeep(int)+0x36>
c00159ce:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159d3:	99                   	cdq    
c00159d4:	f7 fb                	idiv   ebx
c00159d6:	89 c1                	mov    ecx,eax
c00159d8:	b0 b6                	mov    al,0xb6
c00159da:	e6 43                	out    0x43,al
c00159dc:	88 c8                	mov    al,cl
c00159de:	e6 42                	out    0x42,al
c00159e0:	89 c8                	mov    eax,ecx
c00159e2:	c1 e8 08             	shr    eax,0x8
c00159e5:	e6 42                	out    0x42,al
c00159e7:	e4 61                	in     al,0x61
c00159e9:	88 c2                	mov    dl,al
c00159eb:	83 ca 03             	or     edx,0x3
c00159ee:	38 c2                	cmp    dl,al
c00159f0:	74 04                	je     c00159f6 <HalMakeBeep(int)+0x38>
c00159f2:	88 d0                	mov    al,dl
c00159f4:	e6 61                	out    0x61,al
c00159f6:	5b                   	pop    ebx
c00159f7:	c3                   	ret    

c00159f8 <HalGetRand()>:
c00159f8:	31 c0                	xor    eax,eax
c00159fa:	c3                   	ret    

c00159fb <HalEndOfInterrupt(int)>:
c00159fb:	80 3d 80 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024080,0x0
c0015a02:	74 23                	je     c0015a27 <HalEndOfInterrupt(int)+0x2c>
c0015a04:	83 ec 14             	sub    esp,0x14
c0015a07:	6a 1b                	push   0x1b
c0015a09:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015a0f:	e8 de 13 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015a14:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a19:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a23:	83 c4 1c             	add    esp,0x1c
c0015a26:	c3                   	ret    
c0015a27:	e9 54 02 00 00       	jmp    c0015c80 <picEOI(int)>

c0015a2c <HalRestart()>:
c0015a2c:	c3                   	ret    

c0015a2d <HalShutdown()>:
c0015a2d:	c3                   	ret    

c0015a2e <HalSleep()>:
c0015a2e:	c3                   	ret    
c0015a2f:	90                   	nop

c0015a30 <picIoWait()>:
c0015a30:	eb 00                	jmp    c0015a32 <picIoWait()+0x2>
c0015a32:	eb 00                	jmp    c0015a34 <picIoWait()+0x4>
c0015a34:	90                   	nop
c0015a35:	c3                   	ret    
c0015a36:	66 90                	xchg   ax,ax

c0015a38 <picDisable()>:
c0015a38:	83 ec 10             	sub    esp,0x10
c0015a3b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a42:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a50:	ee                   	out    dx,al
c0015a51:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a58:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a5d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a61:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a66:	ee                   	out    dx,al
c0015a67:	90                   	nop
c0015a68:	83 c4 10             	add    esp,0x10
c0015a6b:	c3                   	ret    

c0015a6c <picGetIRQReg(int)>:
c0015a6c:	83 ec 10             	sub    esp,0x10
c0015a6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a73:	25 ff 00 00 00       	and    eax,0xff
c0015a78:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a7f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015a83:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015a87:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015a8c:	ee                   	out    dx,al
c0015a8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a91:	25 ff 00 00 00       	and    eax,0xff
c0015a96:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015a9d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015aa1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015aa5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aaa:	ee                   	out    dx,al
c0015aab:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ab2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ab7:	89 c2                	mov    edx,eax
c0015ab9:	ec                   	in     al,dx
c0015aba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015abe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ac2:	25 ff 00 00 00       	and    eax,0xff
c0015ac7:	c1 e0 08             	shl    eax,0x8
c0015aca:	89 c1                	mov    ecx,eax
c0015acc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015ad3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015ad8:	89 c2                	mov    edx,eax
c0015ada:	ec                   	in     al,dx
c0015adb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015adf:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015ae3:	25 ff 00 00 00       	and    eax,0xff
c0015ae8:	09 c8                	or     eax,ecx
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	c3                   	ret    
c0015aee:	66 90                	xchg   ax,ax

c0015af0 <picOpen()>:
c0015af0:	83 ec 50             	sub    esp,0x50
c0015af3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015afa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015aff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b07:	ee                   	out    dx,al
c0015b08:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b14:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b1c:	ee                   	out    dx,al
c0015b1d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b25:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b2d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b38:	89 c2                	mov    edx,eax
c0015b3a:	ec                   	in     al,dx
c0015b3b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b3f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b43:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b47:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b52:	89 c2                	mov    edx,eax
c0015b54:	ec                   	in     al,dx
c0015b55:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b5d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b61:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b68:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b6d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b75:	ee                   	out    dx,al
c0015b76:	e8 b5 fe ff ff       	call   c0015a30 <picIoWait()>
c0015b7b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015b82:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015b87:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015b8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b8f:	ee                   	out    dx,al
c0015b90:	e8 9b fe ff ff       	call   c0015a30 <picIoWait()>
c0015b95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b99:	25 ff 00 00 00       	and    eax,0xff
c0015b9e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015ba5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015ba9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bb1:	ee                   	out    dx,al
c0015bb2:	e8 79 fe ff ff       	call   c0015a30 <picIoWait()>
c0015bb7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bbb:	25 ff 00 00 00       	and    eax,0xff
c0015bc0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015bc7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015bcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bcf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bd3:	ee                   	out    dx,al
c0015bd4:	e8 57 fe ff ff       	call   c0015a30 <picIoWait()>
c0015bd9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015be0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015be5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015be9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015bed:	ee                   	out    dx,al
c0015bee:	e8 3d fe ff ff       	call   c0015a30 <picIoWait()>
c0015bf3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015bfa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015bff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c07:	ee                   	out    dx,al
c0015c08:	e8 23 fe ff ff       	call   c0015a30 <picIoWait()>
c0015c0d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c14:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c19:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c21:	ee                   	out    dx,al
c0015c22:	e8 09 fe ff ff       	call   c0015a30 <picIoWait()>
c0015c27:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c2e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c33:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c37:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c3b:	ee                   	out    dx,al
c0015c3c:	e8 ef fd ff ff       	call   c0015a30 <picIoWait()>
c0015c41:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c45:	25 ff 00 00 00       	and    eax,0xff
c0015c4a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c51:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c55:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c5d:	ee                   	out    dx,al
c0015c5e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c62:	25 ff 00 00 00       	and    eax,0xff
c0015c67:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c6e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c72:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c76:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c7a:	ee                   	out    dx,al
c0015c7b:	90                   	nop
c0015c7c:	83 c4 50             	add    esp,0x50
c0015c7f:	c3                   	ret    

c0015c80 <picEOI(int)>:
c0015c80:	83 ec 10             	sub    esp,0x10
c0015c83:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c88:	75 22                	jne    c0015cac <picEOI(int)+0x2c>
c0015c8a:	6a 0b                	push   0xb
c0015c8c:	e8 db fd ff ff       	call   c0015a6c <picGetIRQReg(int)>
c0015c91:	83 c4 04             	add    esp,0x4
c0015c94:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015c99:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015c9e:	25 ff ff 00 00       	and    eax,0xffff
c0015ca3:	25 80 00 00 00       	and    eax,0x80
c0015ca8:	74 72                	je     c0015d1c <picEOI(int)+0x9c>
c0015caa:	66 90                	xchg   ax,ax
c0015cac:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cb1:	75 31                	jne    c0015ce4 <picEOI(int)+0x64>
c0015cb3:	6a 0b                	push   0xb
c0015cb5:	e8 b2 fd ff ff       	call   c0015a6c <picGetIRQReg(int)>
c0015cba:	83 c4 04             	add    esp,0x4
c0015cbd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cc6:	66 85 c0             	test   ax,ax
c0015cc9:	78 19                	js     c0015ce4 <picEOI(int)+0x64>
c0015ccb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cd2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015cd7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cdb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015ce0:	ee                   	out    dx,al
c0015ce1:	eb 3d                	jmp    c0015d20 <picEOI(int)+0xa0>
c0015ce3:	90                   	nop
c0015ce4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ce9:	7e 19                	jle    c0015d04 <picEOI(int)+0x84>
c0015ceb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015cf2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015cf7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015cfb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d00:	ee                   	out    dx,al
c0015d01:	8d 76 00             	lea    esi,[esi+0x0]
c0015d04:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d0b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d10:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d14:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d19:	ee                   	out    dx,al
c0015d1a:	eb 04                	jmp    c0015d20 <picEOI(int)+0xa0>
c0015d1c:	90                   	nop
c0015d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	c3                   	ret    

c0015d24 <RTC::open(int, int, void*)>:
c0015d24:	31 c0                	xor    eax,eax
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <RTC::close(int, int, void*)>:
c0015d28:	31 c0                	xor    eax,eax
c0015d2a:	c3                   	ret    
c0015d2b:	90                   	nop

c0015d2c <RTC::timeInSecondsUTC()>:
c0015d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d3c:	c3                   	ret    
c0015d3d:	90                   	nop

c0015d3e <RTC::timeInDatetimeUTC()>:
c0015d3e:	53                   	push   ebx
c0015d3f:	83 ec 14             	sub    esp,0x14
c0015d42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d4c:	50                   	push   eax
c0015d4d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d50:	83 c4 0c             	add    esp,0xc
c0015d53:	52                   	push   edx
c0015d54:	50                   	push   eax
c0015d55:	53                   	push   ebx
c0015d56:	e8 41 59 ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c0015d5b:	89 d8                	mov    eax,ebx
c0015d5d:	83 c4 14             	add    esp,0x14
c0015d60:	5b                   	pop    ebx
c0015d61:	c2 04 00             	ret    0x4

c0015d64 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d64:	56                   	push   esi
c0015d65:	53                   	push   ebx
c0015d66:	83 ec 14             	sub    esp,0x14
c0015d69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d6f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d76:	52                   	push   edx
c0015d77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d7f:	50                   	push   eax
c0015d80:	e8 17 59 ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c0015d85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015d91:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015d95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015d99:	89 f0                	mov    eax,esi
c0015d9b:	83 c4 20             	add    esp,0x20
c0015d9e:	5b                   	pop    ebx
c0015d9f:	5e                   	pop    esi
c0015da0:	ff e0                	jmp    eax

c0015da2 <RTC::~RTC()>:
c0015da2:	83 ec 0c             	sub    esp,0xc
c0015da5:	ba d0 f1 01 c0       	mov    edx,0xc001f1d0
c0015daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dae:	89 10                	mov    DWORD PTR [eax],edx
c0015db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	50                   	push   eax
c0015db8:	e8 63 56 ff ff       	call   c000b420 <Clock::~Clock()>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	90                   	nop
c0015dc1:	83 c4 0c             	add    esp,0xc
c0015dc4:	c3                   	ret    
c0015dc5:	90                   	nop

c0015dc6 <RTC::~RTC()>:
c0015dc6:	83 ec 0c             	sub    esp,0xc
c0015dc9:	83 ec 0c             	sub    esp,0xc
c0015dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dd0:	e8 cd ff ff ff       	call   c0015da2 <RTC::~RTC()>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	83 ec 08             	sub    esp,0x8
c0015ddb:	68 60 01 00 00       	push   0x160
c0015de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de4:	e8 09 46 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	83 c4 0c             	add    esp,0xc
c0015def:	c3                   	ret    

c0015df0 <RTC::get_update_in_progress_flag()>:
c0015df0:	83 ec 14             	sub    esp,0x14
c0015df3:	6a 0a                	push   0xa
c0015df5:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015dfb:	e8 a6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e00:	83 c4 1c             	add    esp,0x1c
c0015e03:	c0 e8 07             	shr    al,0x7
c0015e06:	c3                   	ret    
c0015e07:	90                   	nop

c0015e08 <RTC::completeRTCRefresh()>:
c0015e08:	55                   	push   ebp
c0015e09:	57                   	push   edi
c0015e0a:	56                   	push   esi
c0015e0b:	53                   	push   ebx
c0015e0c:	83 ec 2c             	sub    esp,0x2c
c0015e0f:	8b 1d 0c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002330c
c0015e15:	83 ec 0c             	sub    esp,0xc
c0015e18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e1c:	e8 cf ff ff ff       	call   c0015df0 <RTC::get_update_in_progress_flag()>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	84 c0                	test   al,al
c0015e26:	74 0e                	je     c0015e36 <RTC::completeRTCRefresh()+0x2e>
c0015e28:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e2e:	3b 05 0c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002330c
c0015e34:	73 df                	jae    c0015e15 <RTC::completeRTCRefresh()+0xd>
c0015e36:	55                   	push   ebp
c0015e37:	55                   	push   ebp
c0015e38:	6a 00                	push   0x0
c0015e3a:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e40:	e8 61 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e45:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e49:	58                   	pop    eax
c0015e4a:	5a                   	pop    edx
c0015e4b:	6a 02                	push   0x2
c0015e4d:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e53:	e8 4e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e58:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e5c:	59                   	pop    ecx
c0015e5d:	5b                   	pop    ebx
c0015e5e:	6a 04                	push   0x4
c0015e60:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e66:	e8 3b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e6b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e6f:	5e                   	pop    esi
c0015e70:	5f                   	pop    edi
c0015e71:	6a 07                	push   0x7
c0015e73:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e79:	e8 28 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e7e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e82:	5d                   	pop    ebp
c0015e83:	58                   	pop    eax
c0015e84:	6a 08                	push   0x8
c0015e86:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e8c:	e8 15 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e91:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015e95:	58                   	pop    eax
c0015e96:	5a                   	pop    edx
c0015e97:	6a 09                	push   0x9
c0015e99:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015e9f:	e8 02 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ea4:	83 c4 10             	add    esp,0x10
c0015ea7:	0f b6 e8             	movzx  ebp,al
c0015eaa:	8b 1d 0c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002330c
c0015eb0:	83 ec 0c             	sub    esp,0xc
c0015eb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015eb7:	e8 34 ff ff ff       	call   c0015df0 <RTC::get_update_in_progress_flag()>
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	84 c0                	test   al,al
c0015ec1:	74 0e                	je     c0015ed1 <RTC::completeRTCRefresh()+0xc9>
c0015ec3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ec9:	3b 05 0c 33 02 c0    	cmp    eax,DWORD PTR ds:0xc002330c
c0015ecf:	73 df                	jae    c0015eb0 <RTC::completeRTCRefresh()+0xa8>
c0015ed1:	50                   	push   eax
c0015ed2:	50                   	push   eax
c0015ed3:	6a 00                	push   0x0
c0015ed5:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015edb:	e8 c6 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ee0:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ee4:	58                   	pop    eax
c0015ee5:	5a                   	pop    edx
c0015ee6:	6a 02                	push   0x2
c0015ee8:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015eee:	e8 b3 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015ef3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015ef7:	59                   	pop    ecx
c0015ef8:	5b                   	pop    ebx
c0015ef9:	6a 04                	push   0x4
c0015efb:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015f01:	e8 a0 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f06:	5e                   	pop    esi
c0015f07:	88 c3                	mov    bl,al
c0015f09:	5f                   	pop    edi
c0015f0a:	6a 07                	push   0x7
c0015f0c:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015f12:	e8 8f 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f17:	89 c6                	mov    esi,eax
c0015f19:	58                   	pop    eax
c0015f1a:	5a                   	pop    edx
c0015f1b:	6a 08                	push   0x8
c0015f1d:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015f23:	e8 7e 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f28:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f2c:	59                   	pop    ecx
c0015f2d:	5f                   	pop    edi
c0015f2e:	6a 09                	push   0x9
c0015f30:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015f36:	e8 6b 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f3b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f3f:	0f b6 f8             	movzx  edi,al
c0015f42:	83 c4 10             	add    esp,0x10
c0015f45:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f49:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f4d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f51:	89 f1                	mov    ecx,esi
c0015f53:	0f 94 c0             	sete   al
c0015f56:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f5a:	0f 94 c2             	sete   dl
c0015f5d:	21 d0                	and    eax,edx
c0015f5f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f63:	0f 94 c2             	sete   dl
c0015f66:	21 c2                	and    edx,eax
c0015f68:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f6c:	0f 94 c0             	sete   al
c0015f6f:	21 d0                	and    eax,edx
c0015f71:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f75:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f79:	0f 94 c1             	sete   cl
c0015f7c:	84 c8                	test   al,cl
c0015f7e:	75 29                	jne    c0015fa9 <RTC::completeRTCRefresh()+0x1a1>
c0015f80:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f84:	89 fd                	mov    ebp,edi
c0015f86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015f8a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015f8e:	89 f0                	mov    eax,esi
c0015f90:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015f94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f98:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f9c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fa0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fa4:	e9 01 ff ff ff       	jmp    c0015eaa <RTC::completeRTCRefresh()+0xa2>
c0015fa9:	39 fd                	cmp    ebp,edi
c0015fab:	75 d3                	jne    c0015f80 <RTC::completeRTCRefresh()+0x178>
c0015fad:	55                   	push   ebp
c0015fae:	55                   	push   ebp
c0015faf:	6a 0b                	push   0xb
c0015fb1:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0015fb7:	e8 ea 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fbc:	83 c4 10             	add    esp,0x10
c0015fbf:	89 c5                	mov    ebp,eax
c0015fc1:	a8 04                	test   al,0x4
c0015fc3:	75 78                	jne    c001603d <RTC::completeRTCRefresh()+0x235>
c0015fc5:	b1 0a                	mov    cl,0xa
c0015fc7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015fcb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fcf:	83 e2 0f             	and    edx,0xf
c0015fd2:	c0 e8 04             	shr    al,0x4
c0015fd5:	c1 ef 04             	shr    edi,0x4
c0015fd8:	f6 e1                	mul    cl
c0015fda:	6b ff 0a             	imul   edi,edi,0xa
c0015fdd:	01 d0                	add    eax,edx
c0015fdf:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015fe3:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015fe7:	83 e2 0f             	and    edx,0xf
c0015fea:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fee:	c0 e8 04             	shr    al,0x4
c0015ff1:	f6 e1                	mul    cl
c0015ff3:	01 d0                	add    eax,edx
c0015ff5:	88 da                	mov    dl,bl
c0015ff7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015ffb:	83 e2 0f             	and    edx,0xf
c0015ffe:	88 d8                	mov    al,bl
c0016000:	83 e3 80             	and    ebx,0xffffff80
c0016003:	c0 e8 04             	shr    al,0x4
c0016006:	83 e0 07             	and    eax,0x7
c0016009:	f6 e1                	mul    cl
c001600b:	01 d0                	add    eax,edx
c001600d:	89 f2                	mov    edx,esi
c001600f:	09 c3                	or     ebx,eax
c0016011:	83 e2 0f             	and    edx,0xf
c0016014:	89 f0                	mov    eax,esi
c0016016:	c0 e8 04             	shr    al,0x4
c0016019:	f6 e1                	mul    cl
c001601b:	8d 34 02             	lea    esi,[edx+eax*1]
c001601e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016022:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016026:	83 e2 0f             	and    edx,0xf
c0016029:	c0 e8 04             	shr    al,0x4
c001602c:	f6 e1                	mul    cl
c001602e:	01 d0                	add    eax,edx
c0016030:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016038:	83 e0 0f             	and    eax,0xf
c001603b:	01 c7                	add    edi,eax
c001603d:	83 e5 02             	and    ebp,0x2
c0016040:	75 14                	jne    c0016056 <RTC::completeRTCRefresh()+0x24e>
c0016042:	84 db                	test   bl,bl
c0016044:	79 10                	jns    c0016056 <RTC::completeRTCRefresh()+0x24e>
c0016046:	83 e3 7f             	and    ebx,0x7f
c0016049:	b9 18 00 00 00       	mov    ecx,0x18
c001604e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016051:	99                   	cdq    
c0016052:	f7 f9                	idiv   ecx
c0016054:	88 d3                	mov    bl,dl
c0016056:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001605c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016062:	77 06                	ja     c001606a <RTC::completeRTCRefresh()+0x262>
c0016064:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001606a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001606f:	31 d2                	xor    edx,edx
c0016071:	c1 e1 10             	shl    ecx,0x10
c0016074:	89 d7                	mov    edi,edx
c0016076:	c1 e5 10             	shl    ebp,0x10
c0016079:	31 c0                	xor    eax,eax
c001607b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016081:	09 cf                	or     edi,ecx
c0016083:	89 fa                	mov    edx,edi
c0016085:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016089:	88 da                	mov    dl,bl
c001608b:	89 f3                	mov    ebx,esi
c001608d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016091:	88 d8                	mov    al,bl
c0016093:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016097:	0f b7 c8             	movzx  ecx,ax
c001609a:	09 e9                	or     ecx,ebp
c001609c:	89 c8                	mov    eax,ecx
c001609e:	51                   	push   ecx
c001609f:	51                   	push   ecx
c00160a0:	52                   	push   edx
c00160a1:	50                   	push   eax
c00160a2:	e8 68 54 ff ff       	call   c000b50f <datetimeToSeconds(datetime_t)>
c00160a7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160ab:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160b1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160b7:	83 c4 3c             	add    esp,0x3c
c00160ba:	5b                   	pop    ebx
c00160bb:	5e                   	pop    esi
c00160bc:	5f                   	pop    edi
c00160bd:	5d                   	pop    ebp
c00160be:	c3                   	ret    
c00160bf:	90                   	nop

c00160c0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160c0:	55                   	push   ebp
c00160c1:	57                   	push   edi
c00160c2:	56                   	push   esi
c00160c3:	53                   	push   ebx
c00160c4:	83 ec 30             	sub    esp,0x30
c00160c7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160cb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160cf:	6a 00                	push   0x0
c00160d1:	6a 00                	push   0x0
c00160d3:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00160d9:	e8 de 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160de:	83 c4 0c             	add    esp,0xc
c00160e1:	6a 00                	push   0x0
c00160e3:	6a 02                	push   0x2
c00160e5:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00160eb:	e8 cc 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f0:	31 d2                	xor    edx,edx
c00160f2:	89 f9                	mov    ecx,edi
c00160f4:	89 f8                	mov    eax,edi
c00160f6:	c1 e9 10             	shr    ecx,0x10
c00160f9:	0f b6 c4             	movzx  eax,ah
c00160fc:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016100:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016104:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016108:	b9 64 00 00 00       	mov    ecx,0x64
c001610d:	89 f0                	mov    eax,esi
c001610f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016113:	89 f0                	mov    eax,esi
c0016115:	0f b6 c4             	movzx  eax,ah
c0016118:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001611c:	89 f0                	mov    eax,esi
c001611e:	c1 e8 10             	shr    eax,0x10
c0016121:	66 f7 f1             	div    cx
c0016124:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016129:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001612e:	59                   	pop    ecx
c001612f:	5b                   	pop    ebx
c0016130:	89 fb                	mov    ebx,edi
c0016132:	6a 0b                	push   0xb
c0016134:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c001613a:	e8 67 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001613f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016143:	83 c4 10             	add    esp,0x10
c0016146:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001614b:	75 74                	jne    c00161c1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001614d:	b2 0a                	mov    dl,0xa
c001614f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016153:	0f b6 c1             	movzx  eax,cl
c0016156:	f6 f2                	div    dl
c0016158:	88 c3                	mov    bl,al
c001615a:	88 e0                	mov    al,ah
c001615c:	c1 e3 04             	shl    ebx,0x4
c001615f:	09 c3                	or     ebx,eax
c0016161:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016166:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001616a:	f6 f2                	div    dl
c001616c:	88 c1                	mov    cl,al
c001616e:	88 e0                	mov    al,ah
c0016170:	c1 e1 04             	shl    ecx,0x4
c0016173:	09 c1                	or     ecx,eax
c0016175:	89 f8                	mov    eax,edi
c0016177:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001617b:	0f b6 c0             	movzx  eax,al
c001617e:	f6 f2                	div    dl
c0016180:	88 c3                	mov    bl,al
c0016182:	88 e0                	mov    al,ah
c0016184:	c1 e3 04             	shl    ebx,0x4
c0016187:	09 c3                	or     ebx,eax
c0016189:	89 f0                	mov    eax,esi
c001618b:	0f b6 c0             	movzx  eax,al
c001618e:	f6 f2                	div    dl
c0016190:	88 c1                	mov    cl,al
c0016192:	88 e0                	mov    al,ah
c0016194:	c1 e1 04             	shl    ecx,0x4
c0016197:	09 c1                	or     ecx,eax
c0016199:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001619e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161a2:	f6 f2                	div    dl
c00161a4:	88 c1                	mov    cl,al
c00161a6:	88 e0                	mov    al,ah
c00161a8:	c1 e1 04             	shl    ecx,0x4
c00161ab:	09 c1                	or     ecx,eax
c00161ad:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161b2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161b6:	f6 f2                	div    dl
c00161b8:	89 c5                	mov    ebp,eax
c00161ba:	88 e0                	mov    al,ah
c00161bc:	c1 e5 04             	shl    ebp,0x4
c00161bf:	09 c5                	or     ebp,eax
c00161c1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161c6:	75 17                	jne    c00161df <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161c8:	80 fb 0b             	cmp    bl,0xb
c00161cb:	76 0c                	jbe    c00161d9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161cd:	80 eb 0c             	sub    bl,0xc
c00161d0:	75 02                	jne    c00161d4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161d2:	b3 0c                	mov    bl,0xc
c00161d4:	83 cb 80             	or     ebx,0xffffff80
c00161d7:	eb 06                	jmp    c00161df <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161d9:	84 db                	test   bl,bl
c00161db:	75 02                	jne    c00161df <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161dd:	b3 0c                	mov    bl,0xc
c00161df:	0f b6 db             	movzx  ebx,bl
c00161e2:	50                   	push   eax
c00161e3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00161e8:	50                   	push   eax
c00161e9:	6a 00                	push   0x0
c00161eb:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c00161f1:	e8 c6 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161f6:	83 c4 0c             	add    esp,0xc
c00161f9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161fe:	50                   	push   eax
c00161ff:	6a 02                	push   0x2
c0016201:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0016207:	e8 b0 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001620c:	83 c4 0c             	add    esp,0xc
c001620f:	53                   	push   ebx
c0016210:	6a 04                	push   0x4
c0016212:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0016218:	e8 9f 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001621d:	83 c4 0c             	add    esp,0xc
c0016220:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016225:	50                   	push   eax
c0016226:	6a 07                	push   0x7
c0016228:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c001622e:	e8 89 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016233:	83 c4 0c             	add    esp,0xc
c0016236:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001623b:	50                   	push   eax
c001623c:	6a 08                	push   0x8
c001623e:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0016244:	e8 73 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016249:	83 c4 0c             	add    esp,0xc
c001624c:	89 e8                	mov    eax,ebp
c001624e:	0f b6 e8             	movzx  ebp,al
c0016251:	55                   	push   ebp
c0016252:	6a 09                	push   0x9
c0016254:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c001625a:	e8 5d 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001625f:	5a                   	pop    edx
c0016260:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016264:	e8 9f fb ff ff       	call   c0015e08 <RTC::completeRTCRefresh()>
c0016269:	83 c4 3c             	add    esp,0x3c
c001626c:	b0 01                	mov    al,0x1
c001626e:	5b                   	pop    ebx
c001626f:	5e                   	pop    esi
c0016270:	5f                   	pop    edi
c0016271:	5d                   	pop    ebp
c0016272:	c3                   	ret    

c0016273 <rtcIRQHandler(regs*, void*)>:
c0016273:	53                   	push   ebx
c0016274:	83 ec 10             	sub    esp,0x10
c0016277:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001627b:	6a 0c                	push   0xc
c001627d:	ff 35 38 0d 02 c0    	push   DWORD PTR ds:0xc0020d38
c0016283:	e8 1e 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	84 c0                	test   al,al
c001628d:	79 24                	jns    c00162b3 <rtcIRQHandler(regs*, void*)+0x40>
c001628f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016296:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001629d:	66 ff 05 94 40 02 c0 	inc    WORD PTR ds:0xc0024094
c00162a4:	75 0d                	jne    c00162b3 <rtcIRQHandler(regs*, void*)+0x40>
c00162a6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162aa:	83 c4 08             	add    esp,0x8
c00162ad:	5b                   	pop    ebx
c00162ae:	e9 55 fb ff ff       	jmp    c0015e08 <RTC::completeRTCRefresh()>
c00162b3:	83 c4 08             	add    esp,0x8
c00162b6:	5b                   	pop    ebx
c00162b7:	c3                   	ret    

c00162b8 <RTC::RTC()>:
c00162b8:	83 ec 1c             	sub    esp,0x1c
c00162bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162bf:	83 ec 08             	sub    esp,0x8
c00162c2:	68 b3 f1 01 c0       	push   0xc001f1b3
c00162c7:	50                   	push   eax
c00162c8:	e8 1d 51 ff ff       	call   c000b3ea <Clock::Clock(char const*)>
c00162cd:	83 c4 10             	add    esp,0x10
c00162d0:	ba d0 f1 01 c0       	mov    edx,0xc001f1d0
c00162d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d9:	89 10                	mov    DWORD PTR [eax],edx
c00162db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162df:	83 ec 0c             	sub    esp,0xc
c00162e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162e6:	6a 01                	push   0x1
c00162e8:	68 73 62 01 c0       	push   0xc0016273
c00162ed:	6a 08                	push   0x8
c00162ef:	50                   	push   eax
c00162f0:	e8 df 55 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00162f5:	83 c4 20             	add    esp,0x20
c00162f8:	89 c2                	mov    edx,eax
c00162fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162fe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016304:	fa                   	cli    
c0016305:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001630a:	40                   	inc    eax
c001630b:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0016310:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0016315:	83 ec 08             	sub    esp,0x8
c0016318:	6a 0b                	push   0xb
c001631a:	50                   	push   eax
c001631b:	e8 86 0b ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016327:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001632c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016330:	83 ca 10             	or     edx,0x10
c0016333:	81 e2 ff 00 00 00    	and    edx,0xff
c0016339:	83 ec 04             	sub    esp,0x4
c001633c:	52                   	push   edx
c001633d:	6a 0b                	push   0xb
c001633f:	50                   	push   eax
c0016340:	e8 77 0c ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016345:	83 c4 10             	add    esp,0x10
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001634f:	e8 b4 fa ff ff       	call   c0015e08 <RTC::completeRTCRefresh()>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001635c:	48                   	dec    eax
c001635d:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c0016362:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c0016367:	85 c0                	test   eax,eax
c0016369:	75 01                	jne    c001636c <RTC::RTC()+0xb4>
c001636b:	fb                   	sti    
c001636c:	90                   	nop
c001636d:	83 c4 1c             	add    esp,0x1c
c0016370:	c3                   	ret    
c0016371:	66 90                	xchg   ax,ax
c0016373:	90                   	nop

c0016374 <HalConsoleScroll(int, int)>:
c0016374:	83 ec 10             	sub    esp,0x10
c0016377:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001637f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016387:	90                   	nop
c0016388:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001638d:	0f 8f e1 00 00 00    	jg     c0016474 <HalConsoleScroll(int, int)+0x100>
c0016393:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001639b:	90                   	nop
c001639c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163a4:	0f 8f be 00 00 00    	jg     c0016468 <HalConsoleScroll(int, int)+0xf4>
c00163aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ae:	89 d0                	mov    eax,edx
c00163b0:	c1 e0 02             	shl    eax,0x2
c00163b3:	01 d0                	add    eax,edx
c00163b5:	c1 e0 05             	shl    eax,0x5
c00163b8:	89 c2                	mov    edx,eax
c00163ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163be:	01 d0                	add    eax,edx
c00163c0:	89 c2                	mov    edx,eax
c00163c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163c6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163cd:	89 d0                	mov    eax,edx
c00163cf:	c1 e0 02             	shl    eax,0x2
c00163d2:	01 d0                	add    eax,edx
c00163d4:	c1 e0 05             	shl    eax,0x5
c00163d7:	89 c2                	mov    edx,eax
c00163d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163dd:	01 d0                	add    eax,edx
c00163df:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00163e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e9:	01 c2                	add    edx,eax
c00163eb:	8a 01                	mov    al,BYTE PTR [ecx]
c00163ed:	88 02                	mov    BYTE PTR [edx],al
c00163ef:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163f4:	75 66                	jne    c001645c <HalConsoleScroll(int, int)+0xe8>
c00163f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fa:	83 e0 01             	and    eax,0x1
c00163fd:	74 39                	je     c0016438 <HalConsoleScroll(int, int)+0xc4>
c00163ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016403:	83 e0 0f             	and    eax,0xf
c0016406:	88 c2                	mov    dl,al
c0016408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001640c:	c1 e0 04             	shl    eax,0x4
c001640f:	88 d1                	mov    cl,dl
c0016411:	09 c1                	or     ecx,eax
c0016413:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016417:	89 d0                	mov    eax,edx
c0016419:	c1 e0 02             	shl    eax,0x2
c001641c:	01 d0                	add    eax,edx
c001641e:	c1 e0 05             	shl    eax,0x5
c0016421:	89 c2                	mov    edx,eax
c0016423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016427:	01 d0                	add    eax,edx
c0016429:	89 c2                	mov    edx,eax
c001642b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001642f:	01 d0                	add    eax,edx
c0016431:	88 ca                	mov    dl,cl
c0016433:	88 10                	mov    BYTE PTR [eax],dl
c0016435:	eb 25                	jmp    c001645c <HalConsoleScroll(int, int)+0xe8>
c0016437:	90                   	nop
c0016438:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001643c:	89 d0                	mov    eax,edx
c001643e:	c1 e0 02             	shl    eax,0x2
c0016441:	01 d0                	add    eax,edx
c0016443:	c1 e0 05             	shl    eax,0x5
c0016446:	89 c2                	mov    edx,eax
c0016448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001644c:	01 d0                	add    eax,edx
c001644e:	89 c2                	mov    edx,eax
c0016450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016454:	01 d0                	add    eax,edx
c0016456:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016459:	8d 76 00             	lea    esi,[esi+0x0]
c001645c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016460:	e9 37 ff ff ff       	jmp    c001639c <HalConsoleScroll(int, int)+0x28>
c0016465:	8d 76 00             	lea    esi,[esi+0x0]
c0016468:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001646c:	e9 17 ff ff ff       	jmp    c0016388 <HalConsoleScroll(int, int)+0x14>
c0016471:	8d 76 00             	lea    esi,[esi+0x0]
c0016474:	90                   	nop
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	c3                   	ret    
c0016479:	8d 76 00             	lea    esi,[esi+0x0]

c001647c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001647c:	83 ec 14             	sub    esp,0x14
c001647f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016483:	88 04 24             	mov    BYTE PTR [esp],al
c0016486:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016489:	25 ff 00 00 00       	and    eax,0xff
c001648e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016492:	89 d1                	mov    ecx,edx
c0016494:	83 e1 0f             	and    ecx,0xf
c0016497:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001649b:	c1 e2 04             	shl    edx,0x4
c001649e:	81 e2 ff 00 00 00    	and    edx,0xff
c00164a4:	09 ca                	or     edx,ecx
c00164a6:	c1 e2 08             	shl    edx,0x8
c00164a9:	09 d0                	or     eax,edx
c00164ab:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164b0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164bc:	89 d0                	mov    eax,edx
c00164be:	c1 e0 02             	shl    eax,0x2
c00164c1:	01 d0                	add    eax,edx
c00164c3:	c1 e0 04             	shl    eax,0x4
c00164c6:	89 c2                	mov    edx,eax
c00164c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164cc:	01 d0                	add    eax,edx
c00164ce:	01 c0                	add    eax,eax
c00164d0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164dd:	66 89 02             	mov    WORD PTR [edx],ax
c00164e0:	90                   	nop
c00164e1:	83 c4 14             	add    esp,0x14
c00164e4:	c3                   	ret    
c00164e5:	8d 76 00             	lea    esi,[esi+0x0]

c00164e8 <HalConsoleCursorUpdate(int, int)>:
c00164e8:	83 ec 20             	sub    esp,0x20
c00164eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164ef:	89 c2                	mov    edx,eax
c00164f1:	89 d0                	mov    eax,edx
c00164f3:	c1 e0 02             	shl    eax,0x2
c00164f6:	01 d0                	add    eax,edx
c00164f8:	c1 e0 04             	shl    eax,0x4
c00164fb:	89 c2                	mov    edx,eax
c00164fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016501:	01 d0                	add    eax,edx
c0016503:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016508:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001650f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016514:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016518:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001651c:	ee                   	out    dx,al
c001651d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016522:	25 ff 00 00 00       	and    eax,0xff
c0016527:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001652e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016532:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016536:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001653a:	ee                   	out    dx,al
c001653b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016542:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016547:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001654b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001654f:	ee                   	out    dx,al
c0016550:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016555:	66 c1 e8 08          	shr    ax,0x8
c0016559:	25 ff 00 00 00       	and    eax,0xff
c001655e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016565:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016569:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001656d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016571:	ee                   	out    dx,al
c0016572:	90                   	nop
c0016573:	83 c4 20             	add    esp,0x20
c0016576:	c3                   	ret    
c0016577:	90                   	nop

c0016578 <FAT::getName()>:
c0016578:	b8 04 f2 01 c0       	mov    eax,0xc001f204
c001657d:	c3                   	ret    
c001657e:	66 90                	xchg   ax,ax

c0016580 <FAT::tell(void*, unsigned long long*)>:
c0016580:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016585:	75 09                	jne    c0016590 <FAT::tell(void*, unsigned long long*)+0x10>
c0016587:	b8 04 00 00 00       	mov    eax,0x4
c001658c:	c3                   	ret    
c001658d:	8d 76 00             	lea    esi,[esi+0x0]
c0016590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016595:	75 09                	jne    c00165a0 <FAT::tell(void*, unsigned long long*)+0x20>
c0016597:	b8 04 00 00 00       	mov    eax,0x4
c001659c:	c3                   	ret    
c001659d:	8d 76 00             	lea    esi,[esi+0x0]
c00165a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165a7:	ba 00 00 00 00       	mov    edx,0x0
c00165ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b0:	89 01                	mov    DWORD PTR [ecx],eax
c00165b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165b5:	b8 00 00 00 00       	mov    eax,0x0
c00165ba:	c3                   	ret    
c00165bb:	90                   	nop

c00165bc <FAT::stat(void*, unsigned long long*)>:
c00165bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165c1:	75 09                	jne    c00165cc <FAT::stat(void*, unsigned long long*)+0x10>
c00165c3:	b8 04 00 00 00       	mov    eax,0x4
c00165c8:	c3                   	ret    
c00165c9:	8d 76 00             	lea    esi,[esi+0x0]
c00165cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165d1:	75 09                	jne    c00165dc <FAT::stat(void*, unsigned long long*)+0x20>
c00165d3:	b8 04 00 00 00       	mov    eax,0x4
c00165d8:	c3                   	ret    
c00165d9:	8d 76 00             	lea    esi,[esi+0x0]
c00165dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00165e3:	ba 00 00 00 00       	mov    edx,0x0
c00165e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165ec:	89 01                	mov    DWORD PTR [ecx],eax
c00165ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165f1:	b8 00 00 00 00       	mov    eax,0x0
c00165f6:	c3                   	ret    
c00165f7:	90                   	nop

c00165f8 <FAT::~FAT()>:
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	ba 50 f2 01 c0       	mov    edx,0xc001f250
c0016600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016604:	89 10                	mov    DWORD PTR [eax],edx
c0016606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001660a:	83 ec 0c             	sub    esp,0xc
c001660d:	50                   	push   eax
c001660e:	e8 1b 42 ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c0016613:	83 c4 10             	add    esp,0x10
c0016616:	90                   	nop
c0016617:	83 c4 0c             	add    esp,0xc
c001661a:	c3                   	ret    
c001661b:	90                   	nop

c001661c <FAT::~FAT()>:
c001661c:	83 ec 0c             	sub    esp,0xc
c001661f:	83 ec 0c             	sub    esp,0xc
c0016622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016626:	e8 cd ff ff ff       	call   c00165f8 <FAT::~FAT()>
c001662b:	83 c4 10             	add    esp,0x10
c001662e:	83 ec 08             	sub    esp,0x8
c0016631:	6a 08                	push   0x8
c0016633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016637:	e8 b6 3d ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001663c:	83 c4 10             	add    esp,0x10
c001663f:	83 c4 0c             	add    esp,0xc
c0016642:	c3                   	ret    
c0016643:	90                   	nop

c0016644 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016644:	83 ec 1c             	sub    esp,0x1c
c0016647:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001664e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016657:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c001665e:	83 f8 ff             	cmp    eax,0xffffffff
c0016661:	75 35                	jne    c0016698 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016663:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016667:	88 c2                	mov    dl,al
c0016669:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c001666e:	01 d0                	add    eax,edx
c0016670:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016674:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c001667a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001667e:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0016685:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c001668a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001668e:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0016695:	eb 19                	jmp    c00166b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016697:	90                   	nop
c0016698:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001669c:	88 c2                	mov    dl,al
c001669e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166a2:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c00166a9:	01 d0                	add    eax,edx
c00166ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166af:	90                   	nop
c00166b0:	83 ec 04             	sub    esp,0x4
c00166b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166bb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166bf:	50                   	push   eax
c00166c0:	e8 8f e7 fe ff       	call   c0004e54 <f_getlabel>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166d1:	75 09                	jne    c00166dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166d3:	b8 00 00 00 00       	mov    eax,0x0
c00166d8:	eb 0a                	jmp    c00166e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166da:	66 90                	xchg   ax,ax
c00166dc:	b8 01 00 00 00       	mov    eax,0x1
c00166e1:	8d 76 00             	lea    esi,[esi+0x0]
c00166e4:	83 c4 1c             	add    esp,0x1c
c00166e7:	c3                   	ret    

c00166e8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00166e8:	57                   	push   edi
c00166e9:	83 ec 58             	sub    esp,0x58
c00166ec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00166f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00166f8:	b8 00 00 00 00       	mov    eax,0x0
c00166fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0016702:	fc                   	cld    
c0016703:	89 d7                	mov    edi,edx
c0016705:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016707:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001670b:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c0016712:	83 f8 ff             	cmp    eax,0xffffffff
c0016715:	75 35                	jne    c001674c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016717:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001671b:	88 c2                	mov    dl,al
c001671d:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0016722:	01 d0                	add    eax,edx
c0016724:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016728:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c001672e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016732:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0016739:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c001673e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016742:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0016749:	eb 19                	jmp    c0016764 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001674b:	90                   	nop
c001674c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016750:	88 c2                	mov    dl,al
c0016752:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016756:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c001675d:	01 d0                	add    eax,edx
c001675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016763:	90                   	nop
c0016764:	83 ec 08             	sub    esp,0x8
c0016767:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001676b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001676f:	50                   	push   eax
c0016770:	e8 4b a0 fe ff       	call   c00007c0 <strcat>
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001677f:	50                   	push   eax
c0016780:	e8 20 e8 fe ff       	call   c0004fa5 <f_setlabel>
c0016785:	83 c4 10             	add    esp,0x10
c0016788:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001678c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016791:	75 09                	jne    c001679c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016793:	b8 00 00 00 00       	mov    eax,0x0
c0016798:	eb 0a                	jmp    c00167a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001679a:	66 90                	xchg   ax,ax
c001679c:	b8 01 00 00 00       	mov    eax,0x1
c00167a1:	8d 76 00             	lea    esi,[esi+0x0]
c00167a4:	83 c4 58             	add    esp,0x58
c00167a7:	5f                   	pop    edi
c00167a8:	c3                   	ret    
c00167a9:	90                   	nop
c00167aa:	66 90                	xchg   ax,ax

c00167ac <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167ac:	83 ec 2c             	sub    esp,0x2c
c00167af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167b7:	83 ec 08             	sub    esp,0x8
c00167ba:	68 28 f2 01 c0       	push   0xc001f228
c00167bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167c3:	e8 18 9f fe ff       	call   c00006e0 <strcmp>
c00167c8:	83 c4 10             	add    esp,0x10
c00167cb:	85 c0                	test   eax,eax
c00167cd:	0f 94 c0             	sete   al
c00167d0:	84 c0                	test   al,al
c00167d2:	74 10                	je     c00167e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167d4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167dc:	e9 b3 00 00 00       	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167e1:	8d 76 00             	lea    esi,[esi+0x0]
c00167e4:	83 ec 08             	sub    esp,0x8
c00167e7:	68 1a f2 01 c0       	push   0xc001f21a
c00167ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167f0:	e8 eb 9e fe ff       	call   c00006e0 <strcmp>
c00167f5:	83 c4 10             	add    esp,0x10
c00167f8:	85 c0                	test   eax,eax
c00167fa:	0f 94 c0             	sete   al
c00167fd:	84 c0                	test   al,al
c00167ff:	74 0f                	je     c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016801:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016809:	e9 86 00 00 00       	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001680e:	66 90                	xchg   ax,ax
c0016810:	83 ec 08             	sub    esp,0x8
c0016813:	68 20 f2 01 c0       	push   0xc001f220
c0016818:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681c:	e8 bf 9e fe ff       	call   c00006e0 <strcmp>
c0016821:	83 c4 10             	add    esp,0x10
c0016824:	85 c0                	test   eax,eax
c0016826:	0f 94 c0             	sete   al
c0016829:	84 c0                	test   al,al
c001682b:	74 0b                	je     c0016838 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001682d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016835:	eb 5d                	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016837:	90                   	nop
c0016838:	83 ec 08             	sub    esp,0x8
c001683b:	68 fc cf 01 c0       	push   0xc001cffc
c0016840:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016844:	e8 97 9e fe ff       	call   c00006e0 <strcmp>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	85 c0                	test   eax,eax
c001684e:	0f 94 c0             	sete   al
c0016851:	84 c0                	test   al,al
c0016853:	74 0b                	je     c0016860 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016855:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001685d:	eb 35                	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001685f:	90                   	nop
c0016860:	83 ec 08             	sub    esp,0x8
c0016863:	68 26 f2 01 c0       	push   0xc001f226
c0016868:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001686c:	e8 6f 9e fe ff       	call   c00006e0 <strcmp>
c0016871:	83 c4 10             	add    esp,0x10
c0016874:	85 c0                	test   eax,eax
c0016876:	0f 94 c0             	sete   al
c0016879:	84 c0                	test   al,al
c001687b:	74 0b                	je     c0016888 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001687d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016885:	eb 0d                	jmp    c0016894 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016887:	90                   	nop
c0016888:	b8 08 00 00 00       	mov    eax,0x8
c001688d:	e9 ea 00 00 00       	jmp    c001697c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016892:	66 90                	xchg   ax,ax
c0016894:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001689b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168a4:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c00168ab:	83 f8 ff             	cmp    eax,0xffffffff
c00168ae:	75 34                	jne    c00168e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168b0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168b4:	88 c2                	mov    dl,al
c00168b6:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c00168bb:	01 d0                	add    eax,edx
c00168bd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168c1:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c00168c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168cb:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c00168d2:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c00168d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168db:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c00168e2:	eb 18                	jmp    c00168fc <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00168e4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168e8:	88 c2                	mov    dl,al
c00168ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168ee:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c00168f5:	01 d0                	add    eax,edx
c00168f7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168fb:	90                   	nop
c00168fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016900:	88 04 24             	mov    BYTE PTR [esp],al
c0016903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001690b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016913:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016918:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	68 00 20 00 00       	push   0x2000
c0016928:	e8 8c 0e ff ff       	call   c00077b9 <malloc>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016934:	68 00 20 00 00       	push   0x2000
c0016939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001693d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016941:	50                   	push   eax
c0016942:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016946:	50                   	push   eax
c0016947:	e8 49 e9 fe ff       	call   c0005295 <f_mkfs>
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016953:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016958:	75 0a                	jne    c0016964 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001695a:	b8 00 00 00 00       	mov    eax,0x0
c001695f:	eb 1b                	jmp    c001697c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016961:	8d 76 00             	lea    esi,[esi+0x0]
c0016964:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016969:	75 09                	jne    c0016974 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001696b:	b8 09 00 00 00       	mov    eax,0x9
c0016970:	eb 0a                	jmp    c001697c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016972:	66 90                	xchg   ax,ax
c0016974:	b8 01 00 00 00       	mov    eax,0x1
c0016979:	8d 76 00             	lea    esi,[esi+0x0]
c001697c:	83 c4 2c             	add    esp,0x2c
c001697f:	c3                   	ret    

c0016980 <FAT::tryMount(LogicalDisk*, int)>:
c0016980:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016986:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c001698b:	83 f8 14             	cmp    eax,0x14
c001698e:	75 18                	jne    c00169a8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	68 2c f2 01 c0       	push   0xc001f22c
c0016998:	e8 b6 97 ff ff       	call   c0010153 <KePanic(char const*)>
c001699d:	83 c4 10             	add    esp,0x10
c00169a0:	b0 00                	mov    al,0x0
c00169a2:	e9 e9 01 00 00       	jmp    c0016b90 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169a7:	90                   	nop
c00169a8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169bb:	3d 00 02 00 00       	cmp    eax,0x200
c00169c0:	74 0a                	je     c00169cc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169c2:	b0 00                	mov    al,0x0
c00169c4:	e9 c7 01 00 00       	jmp    c0016b90 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c9:	8d 76 00             	lea    esi,[esi+0x0]
c00169cc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169d4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169db:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c00169e2:	83 f8 ff             	cmp    eax,0xffffffff
c00169e5:	74 09                	je     c00169f0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00169e7:	b0 01                	mov    al,0x1
c00169e9:	e9 a2 01 00 00       	jmp    c0016b90 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169ee:	66 90                	xchg   ax,ax
c00169f0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00169fa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a02:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a09:	88 c2                	mov    dl,al
c0016a0b:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0016a10:	01 d0                	add    eax,edx
c0016a12:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a19:	8b 15 a0 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a0
c0016a1f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a26:	89 14 85 c0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf40],edx
c0016a2d:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0016a32:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a39:	89 14 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],edx
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	68 34 02 00 00       	push   0x234
c0016a48:	e8 6c 0d ff ff       	call   c00077b9 <malloc>
c0016a4d:	83 c4 10             	add    esp,0x10
c0016a50:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a57:	83 ec 04             	sub    esp,0x4
c0016a5a:	6a 00                	push   0x0
c0016a5c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a63:	50                   	push   eax
c0016a64:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a6b:	e8 4b d0 fe ff       	call   c0003abb <f_mount>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a7a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016a82:	74 1c                	je     c0016aa0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a8e:	e8 56 0d ff ff       	call   c00077e9 <rfree>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	b0 00                	mov    al,0x0
c0016a98:	e9 f3 00 00 00       	jmp    c0016b90 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa0:	83 ec 04             	sub    esp,0x4
c0016aa3:	68 00 01 00 00       	push   0x100
c0016aa8:	6a 00                	push   0x0
c0016aaa:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ab1:	50                   	push   eax
c0016ab2:	e8 19 9a fe ff       	call   c00004d0 <memset>
c0016ab7:	83 c4 10             	add    esp,0x10
c0016aba:	83 ec 08             	sub    esp,0x8
c0016abd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ac4:	50                   	push   eax
c0016ac5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016acc:	50                   	push   eax
c0016acd:	e8 ee 9c fe ff       	call   c00007c0 <strcat>
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	83 ec 08             	sub    esp,0x8
c0016ad8:	68 3a f2 01 c0       	push   0xc001f23a
c0016add:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ae4:	50                   	push   eax
c0016ae5:	e8 d6 9c fe ff       	call   c00007c0 <strcat>
c0016aea:	83 c4 10             	add    esp,0x10
c0016aed:	83 ec 04             	sub    esp,0x4
c0016af0:	6a 01                	push   0x1
c0016af2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016af9:	50                   	push   eax
c0016afa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016afe:	50                   	push   eax
c0016aff:	e8 19 d0 fe ff       	call   c0003b1d <f_open>
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b0e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b15:	85 c0                	test   eax,eax
c0016b17:	74 0b                	je     c0016b24 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b19:	78 31                	js     c0016b4c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b1b:	83 e8 04             	sub    eax,0x4
c0016b1e:	83 f8 01             	cmp    eax,0x1
c0016b21:	77 29                	ja     c0016b4c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b23:	90                   	nop
c0016b24:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b33:	50                   	push   eax
c0016b34:	e8 97 d7 fe ff       	call   c00042d0 <f_close>
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	90                   	nop
c0016b3d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b45:	74 41                	je     c0016b88 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b47:	eb 33                	jmp    c0016b7c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b49:	8d 76 00             	lea    esi,[esi+0x0]
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b56:	e8 8e 0c ff ff       	call   c00077e9 <rfree>
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	83 ec 04             	sub    esp,0x4
c0016b61:	6a 00                	push   0x0
c0016b63:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b6a:	50                   	push   eax
c0016b6b:	6a 00                	push   0x0
c0016b6d:	e8 49 cf fe ff       	call   c0003abb <f_mount>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	b0 00                	mov    al,0x0
c0016b77:	eb 17                	jmp    c0016b90 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b79:	8d 76 00             	lea    esi,[esi+0x0]
c0016b7c:	a1 a0 40 02 c0       	mov    eax,ds:0xc00240a0
c0016b81:	40                   	inc    eax
c0016b82:	a3 a0 40 02 c0       	mov    ds:0xc00240a0,eax
c0016b87:	90                   	nop
c0016b88:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016b8f:	90                   	nop
c0016b90:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016b96:	c3                   	ret    
c0016b97:	90                   	nop

c0016b98 <FAT::allocateSwapfile(char const*, int)>:
c0016b98:	55                   	push   ebp
c0016b99:	57                   	push   edi
c0016b9a:	56                   	push   esi
c0016b9b:	53                   	push   ebx
c0016b9c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016ba2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bad:	83 ec 0c             	sub    esp,0xc
c0016bb0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bb7:	e8 fd 0b ff ff       	call   c00077b9 <malloc>
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	89 c7                	mov    edi,eax
c0016bc1:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c0016bc6:	83 ec 04             	sub    esp,0x4
c0016bc9:	50                   	push   eax
c0016bca:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bd1:	57                   	push   edi
c0016bd2:	e8 87 3e ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016be1:	83 ec 04             	sub    esp,0x4
c0016be4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016be8:	50                   	push   eax
c0016be9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bed:	50                   	push   eax
c0016bee:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bf5:	e8 d0 41 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c04:	c1 e0 14             	shl    eax,0x14
c0016c07:	89 c7                	mov    edi,eax
c0016c09:	89 c5                	mov    ebp,eax
c0016c0b:	c1 fd 1f             	sar    ebp,0x1f
c0016c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c16:	89 f9                	mov    ecx,edi
c0016c18:	31 c1                	xor    ecx,eax
c0016c1a:	89 cb                	mov    ebx,ecx
c0016c1c:	89 e9                	mov    ecx,ebp
c0016c1e:	31 d1                	xor    ecx,edx
c0016c20:	89 ce                	mov    esi,ecx
c0016c22:	89 f0                	mov    eax,esi
c0016c24:	09 d8                	or     eax,ebx
c0016c26:	0f 84 9c 00 00 00    	je     c0016cc8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c2c:	83 ec 0c             	sub    esp,0xc
c0016c2f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c36:	e8 5b 40 ff ff       	call   c000ac96 <File::unlink()>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	83 ec 08             	sub    esp,0x8
c0016c41:	6a 12                	push   0x12
c0016c43:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c4a:	e8 cf 3e ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c59:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c5f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c66:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c6d:	c1 e0 14             	shl    eax,0x14
c0016c70:	83 ec 04             	sub    esp,0x4
c0016c73:	6a 01                	push   0x1
c0016c75:	50                   	push   eax
c0016c76:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c7d:	e8 b3 e4 fe ff       	call   c0005135 <f_expand>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c8e:	83 c0 10             	add    eax,0x10
c0016c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c93:	83 ec 0c             	sub    esp,0xc
c0016c96:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c9a:	52                   	push   edx
c0016c9b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016c9f:	52                   	push   edx
c0016ca0:	6a 00                	push   0x0
c0016ca2:	68 00 04 00 00       	push   0x400
c0016ca7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cae:	ff d0                	call   eax
c0016cb0:	83 c4 20             	add    esp,0x20
c0016cb3:	83 ec 0c             	sub    esp,0xc
c0016cb6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cbd:	e8 ba 3e ff ff       	call   c000ab7c <File::close()>
c0016cc2:	83 c4 10             	add    esp,0x10
c0016cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cc8:	83 ec 08             	sub    esp,0x8
c0016ccb:	6a 01                	push   0x1
c0016ccd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cd4:	e8 45 3e ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce5:	83 c0 0c             	add    eax,0xc
c0016ce8:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cf1:	52                   	push   edx
c0016cf2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016cf6:	52                   	push   edx
c0016cf7:	6a 00                	push   0x0
c0016cf9:	6a 04                	push   0x4
c0016cfb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d02:	ff d0                	call   eax
c0016d04:	83 c4 20             	add    esp,0x20
c0016d07:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d0e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d14:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d1b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d22:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d25:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d36:	e8 41 3e ff ff       	call   c000ab7c <File::close()>
c0016d3b:	83 c4 10             	add    esp,0x10
c0016d3e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d45:	ba 00 00 00 00       	mov    edx,0x0
c0016d4a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d50:	5b                   	pop    ebx
c0016d51:	5e                   	pop    esi
c0016d52:	5f                   	pop    edi
c0016d53:	5d                   	pop    ebp
c0016d54:	c3                   	ret    
c0016d55:	90                   	nop
c0016d56:	66 90                	xchg   ax,ax

c0016d58 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d58:	57                   	push   edi
c0016d59:	56                   	push   esi
c0016d5a:	53                   	push   ebx
c0016d5b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d61:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d69:	74 0d                	je     c0016d78 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d6b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d73:	75 0f                	jne    c0016d84 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d75:	8d 76 00             	lea    esi,[esi+0x0]
c0016d78:	b8 04 00 00 00       	mov    eax,0x4
c0016d7d:	e9 36 01 00 00       	jmp    c0016eb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d82:	66 90                	xchg   ax,ax
c0016d84:	83 ec 08             	sub    esp,0x8
c0016d87:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d8e:	50                   	push   eax
c0016d8f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016d96:	e8 f8 d7 fe ff       	call   c0004593 <f_readdir>
c0016d9b:	83 c4 10             	add    esp,0x10
c0016d9e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016da5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dac:	83 ec 0c             	sub    esp,0xc
c0016daf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016db6:	83 c0 16             	add    eax,0x16
c0016db9:	50                   	push   eax
c0016dba:	e8 81 97 fe ff       	call   c0000540 <strlen>
c0016dbf:	83 c4 10             	add    esp,0x10
c0016dc2:	ba 00 00 00 00       	mov    edx,0x0
c0016dc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dcb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016dcf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016dd6:	25 ff 00 00 00       	and    eax,0xff
c0016ddb:	83 e0 10             	and    eax,0x10
c0016dde:	74 08                	je     c0016de8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016de0:	b8 02 00 00 00       	mov    eax,0x2
c0016de5:	eb 09                	jmp    c0016df0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016de7:	90                   	nop
c0016de8:	b8 01 00 00 00       	mov    eax,0x1
c0016ded:	8d 76 00             	lea    esi,[esi+0x0]
c0016df0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016df4:	83 ec 08             	sub    esp,0x8
c0016df7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dfe:	83 c0 16             	add    eax,0x16
c0016e01:	50                   	push   eax
c0016e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e06:	83 c0 10             	add    eax,0x10
c0016e09:	50                   	push   eax
c0016e0a:	e8 f1 97 fe ff       	call   c0000600 <strcpy>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e19:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e24:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e2b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e32:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e39:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e40:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e47:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e4e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e55:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e5c:	89 c6                	mov    esi,eax
c0016e5e:	89 d7                	mov    edi,edx
c0016e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e62:	89 c8                	mov    eax,ecx
c0016e64:	89 fa                	mov    edx,edi
c0016e66:	89 f3                	mov    ebx,esi
c0016e68:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e6f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e76:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e7d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016e84:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016e8a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016e91:	84 c0                	test   al,al
c0016e93:	75 07                	jne    c0016e9c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016e95:	b8 07 00 00 00       	mov    eax,0x7
c0016e9a:	eb 1c                	jmp    c0016eb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e9c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ea3:	85 c0                	test   eax,eax
c0016ea5:	75 09                	jne    c0016eb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ea7:	b8 00 00 00 00       	mov    eax,0x0
c0016eac:	eb 0a                	jmp    c0016eb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016eae:	66 90                	xchg   ax,ax
c0016eb0:	b8 01 00 00 00       	mov    eax,0x1
c0016eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ebe:	5b                   	pop    ebx
c0016ebf:	5e                   	pop    esi
c0016ec0:	5f                   	pop    edi
c0016ec1:	c3                   	ret    
c0016ec2:	66 90                	xchg   ax,ax

c0016ec4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ec4:	83 ec 1c             	sub    esp,0x1c
c0016ec7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ecc:	74 0a                	je     c0016ed8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ece:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ed3:	75 0b                	jne    c0016ee0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	b8 04 00 00 00       	mov    eax,0x4
c0016edd:	eb 41                	jmp    c0016f20 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016edf:	90                   	nop
c0016ee0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ee4:	50                   	push   eax
c0016ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ee9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016eed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ef1:	e8 f2 ce fe ff       	call   c0003de8 <f_read>
c0016ef6:	83 c4 10             	add    esp,0x10
c0016ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f01:	89 c2                	mov    edx,eax
c0016f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f07:	89 10                	mov    DWORD PTR [eax],edx
c0016f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f0d:	85 c0                	test   eax,eax
c0016f0f:	75 07                	jne    c0016f18 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f11:	b8 00 00 00 00       	mov    eax,0x0
c0016f16:	eb 08                	jmp    c0016f20 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f18:	b8 01 00 00 00       	mov    eax,0x1
c0016f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f20:	83 c4 1c             	add    esp,0x1c
c0016f23:	c3                   	ret    

c0016f24 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f24:	83 ec 1c             	sub    esp,0x1c
c0016f27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f2c:	74 0a                	je     c0016f38 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f33:	75 0b                	jne    c0016f40 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	b8 04 00 00 00       	mov    eax,0x4
c0016f3d:	eb 41                	jmp    c0016f80 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f3f:	90                   	nop
c0016f40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f44:	50                   	push   eax
c0016f45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f51:	e8 91 d0 fe ff       	call   c0003fe7 <f_write>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f61:	89 c2                	mov    edx,eax
c0016f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f67:	89 10                	mov    DWORD PTR [eax],edx
c0016f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f6d:	85 c0                	test   eax,eax
c0016f6f:	75 07                	jne    c0016f78 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f71:	b8 00 00 00 00       	mov    eax,0x0
c0016f76:	eb 08                	jmp    c0016f80 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f78:	b8 01 00 00 00       	mov    eax,0x1
c0016f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f80:	83 c4 1c             	add    esp,0x1c
c0016f83:	c3                   	ret    

c0016f84 <FAT::close(void*)>:
c0016f84:	83 ec 1c             	sub    esp,0x1c
c0016f87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f8c:	75 0a                	jne    c0016f98 <FAT::close(void*)+0x14>
c0016f8e:	b8 04 00 00 00       	mov    eax,0x4
c0016f93:	eb 3f                	jmp    c0016fd4 <FAT::close(void*)+0x50>
c0016f95:	8d 76 00             	lea    esi,[esi+0x0]
c0016f98:	83 ec 0c             	sub    esp,0xc
c0016f9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f9f:	e8 2c d3 fe ff       	call   c00042d0 <f_close>
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fab:	83 ec 0c             	sub    esp,0xc
c0016fae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fb2:	e8 22 08 ff ff       	call   c00077d9 <free>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fbe:	85 c0                	test   eax,eax
c0016fc0:	75 0a                	jne    c0016fcc <FAT::close(void*)+0x48>
c0016fc2:	b8 00 00 00 00       	mov    eax,0x0
c0016fc7:	eb 0b                	jmp    c0016fd4 <FAT::close(void*)+0x50>
c0016fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fcc:	b8 01 00 00 00       	mov    eax,0x1
c0016fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd4:	83 c4 1c             	add    esp,0x1c
c0016fd7:	c3                   	ret    

c0016fd8 <FAT::closeDir(void*)>:
c0016fd8:	83 ec 1c             	sub    esp,0x1c
c0016fdb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fe0:	75 0a                	jne    c0016fec <FAT::closeDir(void*)+0x14>
c0016fe2:	b8 04 00 00 00       	mov    eax,0x4
c0016fe7:	eb 3f                	jmp    c0017028 <FAT::closeDir(void*)+0x50>
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	83 ec 0c             	sub    esp,0xc
c0016fef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ff3:	e8 79 d5 fe ff       	call   c0004571 <f_closedir>
c0016ff8:	83 c4 10             	add    esp,0x10
c0016ffb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fff:	83 ec 0c             	sub    esp,0xc
c0017002:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017006:	e8 ce 07 ff ff       	call   c00077d9 <free>
c001700b:	83 c4 10             	add    esp,0x10
c001700e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017012:	85 c0                	test   eax,eax
c0017014:	75 0a                	jne    c0017020 <FAT::closeDir(void*)+0x48>
c0017016:	b8 00 00 00 00       	mov    eax,0x0
c001701b:	eb 0b                	jmp    c0017028 <FAT::closeDir(void*)+0x50>
c001701d:	8d 76 00             	lea    esi,[esi+0x0]
c0017020:	b8 01 00 00 00       	mov    eax,0x1
c0017025:	8d 76 00             	lea    esi,[esi+0x0]
c0017028:	83 c4 1c             	add    esp,0x1c
c001702b:	c3                   	ret    

c001702c <FAT::seek(void*, unsigned long long)>:
c001702c:	83 ec 2c             	sub    esp,0x2c
c001702f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017033:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017037:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001703b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001703f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017044:	75 0a                	jne    c0017050 <FAT::seek(void*, unsigned long long)+0x24>
c0017046:	b8 04 00 00 00       	mov    eax,0x4
c001704b:	eb 33                	jmp    c0017080 <FAT::seek(void*, unsigned long long)+0x54>
c001704d:	8d 76 00             	lea    esi,[esi+0x0]
c0017050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017054:	83 ec 08             	sub    esp,0x8
c0017057:	50                   	push   eax
c0017058:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001705c:	e8 9e d2 fe ff       	call   c00042ff <f_lseek>
c0017061:	83 c4 10             	add    esp,0x10
c0017064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017068:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001706c:	85 c0                	test   eax,eax
c001706e:	75 08                	jne    c0017078 <FAT::seek(void*, unsigned long long)+0x4c>
c0017070:	b8 00 00 00 00       	mov    eax,0x0
c0017075:	eb 09                	jmp    c0017080 <FAT::seek(void*, unsigned long long)+0x54>
c0017077:	90                   	nop
c0017078:	b8 01 00 00 00       	mov    eax,0x1
c001707d:	8d 76 00             	lea    esi,[esi+0x0]
c0017080:	83 c4 2c             	add    esp,0x2c
c0017083:	c3                   	ret    

c0017084 <fatWrapperReadDisk>:
c0017084:	53                   	push   ebx
c0017085:	83 ec 18             	sub    esp,0x18
c0017088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017090:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017094:	25 ff 00 00 00       	and    eax,0xff
c0017099:	8b 0c 85 a0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd60]
c00170a0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170a8:	ba 00 00 00 00       	mov    edx,0x0
c00170ad:	83 ec 0c             	sub    esp,0xc
c00170b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170b4:	53                   	push   ebx
c00170b5:	52                   	push   edx
c00170b6:	50                   	push   eax
c00170b7:	51                   	push   ecx
c00170b8:	e8 3b 5b ff ff       	call   c000cbf8 <LogicalDisk::read(unsigned long long, int, void*)>
c00170bd:	83 c4 20             	add    esp,0x20
c00170c0:	83 c4 18             	add    esp,0x18
c00170c3:	5b                   	pop    ebx
c00170c4:	c3                   	ret    
c00170c5:	8d 76 00             	lea    esi,[esi+0x0]

c00170c8 <fatWrapperWriteDisk>:
c00170c8:	53                   	push   ebx
c00170c9:	83 ec 18             	sub    esp,0x18
c00170cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170d8:	25 ff 00 00 00       	and    eax,0xff
c00170dd:	8b 0c 85 a0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd60]
c00170e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170ec:	ba 00 00 00 00       	mov    edx,0x0
c00170f1:	83 ec 0c             	sub    esp,0xc
c00170f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170f8:	53                   	push   ebx
c00170f9:	52                   	push   edx
c00170fa:	50                   	push   eax
c00170fb:	51                   	push   ecx
c00170fc:	e8 63 5b ff ff       	call   c000cc64 <LogicalDisk::write(unsigned long long, int, void*)>
c0017101:	83 c4 20             	add    esp,0x20
c0017104:	83 c4 18             	add    esp,0x18
c0017107:	5b                   	pop    ebx
c0017108:	c3                   	ret    
c0017109:	8d 76 00             	lea    esi,[esi+0x0]

c001710c <fatWrapperIoctl>:
c001710c:	53                   	push   ebx
c001710d:	83 ec 28             	sub    esp,0x28
c0017110:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017114:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017118:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001711c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017120:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017125:	75 35                	jne    c001715c <fatWrapperIoctl+0x50>
c0017127:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001712b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001712f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017133:	25 ff 00 00 00       	and    eax,0xff
c0017138:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c001713f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017145:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001714f:	66 89 02             	mov    WORD PTR [edx],ax
c0017152:	b8 00 00 00 00       	mov    eax,0x0
c0017157:	e9 c4 00 00 00       	jmp    c0017220 <fatWrapperIoctl+0x114>
c001715c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017161:	75 75                	jne    c00171d8 <fatWrapperIoctl+0xcc>
c0017163:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001716b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001716f:	25 ff 00 00 00       	and    eax,0xff
c0017174:	8b 04 85 a0 32 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcd60]
c001717b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017181:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017187:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001718d:	89 c8                	mov    eax,ecx
c001718f:	89 da                	mov    edx,ebx
c0017191:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017195:	c1 e0 0a             	shl    eax,0xa
c0017198:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001719c:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171a2:	8b 0c 8d a0 32 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcd60]
c00171a9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171af:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171b5:	89 cb                	mov    ebx,ecx
c00171b7:	c1 fb 1f             	sar    ebx,0x1f
c00171ba:	53                   	push   ebx
c00171bb:	51                   	push   ecx
c00171bc:	52                   	push   edx
c00171bd:	50                   	push   eax
c00171be:	e8 4d 50 00 00       	call   c001c210 <__udivdi3>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	89 c2                	mov    edx,eax
c00171c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171cc:	89 10                	mov    DWORD PTR [eax],edx
c00171ce:	b8 00 00 00 00       	mov    eax,0x0
c00171d3:	eb 4b                	jmp    c0017220 <fatWrapperIoctl+0x114>
c00171d5:	8d 76 00             	lea    esi,[esi+0x0]
c00171d8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171dd:	75 09                	jne    c00171e8 <fatWrapperIoctl+0xdc>
c00171df:	b8 00 00 00 00       	mov    eax,0x0
c00171e4:	eb 3a                	jmp    c0017220 <fatWrapperIoctl+0x114>
c00171e6:	66 90                	xchg   ax,ax
c00171e8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00171ed:	75 19                	jne    c0017208 <fatWrapperIoctl+0xfc>
c00171ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171fb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017201:	b8 00 00 00 00       	mov    eax,0x0
c0017206:	eb 18                	jmp    c0017220 <fatWrapperIoctl+0x114>
c0017208:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001720d:	75 09                	jne    c0017218 <fatWrapperIoctl+0x10c>
c001720f:	b8 00 00 00 00       	mov    eax,0x0
c0017214:	eb 0a                	jmp    c0017220 <fatWrapperIoctl+0x114>
c0017216:	66 90                	xchg   ax,ax
c0017218:	b8 04 00 00 00       	mov    eax,0x4
c001721d:	8d 76 00             	lea    esi,[esi+0x0]
c0017220:	83 c4 28             	add    esp,0x28
c0017223:	5b                   	pop    ebx
c0017224:	c3                   	ret    
c0017225:	90                   	nop
c0017226:	66 90                	xchg   ax,ax

c0017228 <FAT::FAT()>:
c0017228:	83 ec 1c             	sub    esp,0x1c
c001722b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	50                   	push   eax
c0017233:	e8 d2 35 ff ff       	call   c000a80a <Filesystem::Filesystem()>
c0017238:	83 c4 10             	add    esp,0x10
c001723b:	ba 50 f2 01 c0       	mov    edx,0xc001f250
c0017240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017244:	89 10                	mov    DWORD PTR [eax],edx
c0017246:	c7 05 a0 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00240a0,0x0
c0017250:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017258:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001725d:	7f 15                	jg     c0017274 <FAT::FAT()+0x4c>
c001725f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017263:	c7 04 85 c0 40 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbf40],0xffffffff
c001726e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017272:	eb e4                	jmp    c0017258 <FAT::FAT()+0x30>
c0017274:	90                   	nop
c0017275:	83 c4 1c             	add    esp,0x1c
c0017278:	c3                   	ret    
c0017279:	90                   	nop
c001727a:	66 90                	xchg   ax,ax

c001727c <FAT::fixFilepath(char*)>:
c001727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017280:	8a 00                	mov    al,BYTE PTR [eax]
c0017282:	3c 40                	cmp    al,0x40
c0017284:	7e 2e                	jle    c00172b4 <FAT::fixFilepath(char*)+0x38>
c0017286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001728a:	8a 00                	mov    al,BYTE PTR [eax]
c001728c:	83 e8 41             	sub    eax,0x41
c001728f:	88 c2                	mov    dl,al
c0017291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017295:	88 10                	mov    BYTE PTR [eax],dl
c0017297:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729b:	8a 00                	mov    al,BYTE PTR [eax]
c001729d:	0f be c0             	movsx  eax,al
c00172a0:	8b 04 85 c0 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf40]
c00172a7:	83 c0 30             	add    eax,0x30
c00172aa:	88 c2                	mov    dl,al
c00172ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b0:	88 10                	mov    BYTE PTR [eax],dl
c00172b2:	66 90                	xchg   ax,ax
c00172b4:	90                   	nop
c00172b5:	c3                   	ret    
c00172b6:	66 90                	xchg   ax,ax

c00172b8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172c6:	74 0c                	je     c00172d4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172d0:	75 0e                	jne    c00172e0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172d2:	66 90                	xchg   ax,ax
c00172d4:	b8 04 00 00 00       	mov    eax,0x4
c00172d9:	e9 0a 01 00 00       	jmp    c00173e8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172de:	66 90                	xchg   ax,ax
c00172e0:	83 ec 08             	sub    esp,0x8
c00172e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ee:	50                   	push   eax
c00172ef:	e8 0c 93 fe ff       	call   c0000600 <strcpy>
c00172f4:	83 c4 10             	add    esp,0x10
c00172f7:	83 ec 08             	sub    esp,0x8
c00172fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172fe:	50                   	push   eax
c00172ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017306:	e8 71 ff ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c001730b:	83 c4 10             	add    esp,0x10
c001730e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017316:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001731d:	83 e0 01             	and    eax,0x1
c0017320:	74 0a                	je     c001732c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017322:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001732a:	66 90                	xchg   ax,ax
c001732c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017333:	83 e0 04             	and    eax,0x4
c0017336:	74 10                	je     c0017348 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017338:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017340:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017348:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001734f:	83 e0 02             	and    eax,0x2
c0017352:	74 08                	je     c001735c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017354:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001735c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017363:	83 e0 08             	and    eax,0x8
c0017366:	74 08                	je     c0017370 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017368:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017370:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017377:	83 e0 10             	and    eax,0x10
c001737a:	74 08                	je     c0017384 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001737c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017384:	83 ec 0c             	sub    esp,0xc
c0017387:	68 28 02 00 00       	push   0x228
c001738c:	e8 28 04 ff ff       	call   c00077b9 <malloc>
c0017391:	83 c4 10             	add    esp,0x10
c0017394:	89 c2                	mov    edx,eax
c0017396:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001739d:	89 10                	mov    DWORD PTR [eax],edx
c001739f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173a6:	31 d2                	xor    edx,edx
c00173a8:	88 c2                	mov    dl,al
c00173aa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173b3:	83 ec 04             	sub    esp,0x4
c00173b6:	52                   	push   edx
c00173b7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173bb:	52                   	push   edx
c00173bc:	50                   	push   eax
c00173bd:	e8 5b c7 fe ff       	call   c0003b1d <f_open>
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173cc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173d4:	74 0a                	je     c00173e0 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173d6:	b8 01 00 00 00       	mov    eax,0x1
c00173db:	eb 0b                	jmp    c00173e8 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173dd:	8d 76 00             	lea    esi,[esi+0x0]
c00173e0:	b8 00 00 00 00       	mov    eax,0x0
c00173e5:	8d 76 00             	lea    esi,[esi+0x0]
c00173e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173ee:	c3                   	ret    
c00173ef:	90                   	nop

c00173f0 <FAT::openDir(char const*, void**)>:
c00173f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173fe:	74 0c                	je     c001740c <FAT::openDir(char const*, void**)+0x1c>
c0017400:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017408:	75 0e                	jne    c0017418 <FAT::openDir(char const*, void**)+0x28>
c001740a:	66 90                	xchg   ax,ax
c001740c:	b8 04 00 00 00       	mov    eax,0x4
c0017411:	e9 82 00 00 00       	jmp    c0017498 <FAT::openDir(char const*, void**)+0xa8>
c0017416:	66 90                	xchg   ax,ax
c0017418:	83 ec 08             	sub    esp,0x8
c001741b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017422:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017426:	50                   	push   eax
c0017427:	e8 d4 91 fe ff       	call   c0000600 <strcpy>
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	83 ec 08             	sub    esp,0x8
c0017432:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017436:	50                   	push   eax
c0017437:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001743e:	e8 39 fe ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c0017443:	83 c4 10             	add    esp,0x10
c0017446:	83 ec 0c             	sub    esp,0xc
c0017449:	6a 30                	push   0x30
c001744b:	e8 69 03 ff ff       	call   c00077b9 <malloc>
c0017450:	83 c4 10             	add    esp,0x10
c0017453:	89 c2                	mov    edx,eax
c0017455:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001745c:	89 10                	mov    DWORD PTR [eax],edx
c001745e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017465:	8b 00                	mov    eax,DWORD PTR [eax]
c0017467:	83 ec 08             	sub    esp,0x8
c001746a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001746e:	52                   	push   edx
c001746f:	50                   	push   eax
c0017470:	e8 31 d0 fe ff       	call   c00044a6 <f_opendir>
c0017475:	83 c4 10             	add    esp,0x10
c0017478:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001747f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017487:	74 07                	je     c0017490 <FAT::openDir(char const*, void**)+0xa0>
c0017489:	b8 01 00 00 00       	mov    eax,0x1
c001748e:	eb 08                	jmp    c0017498 <FAT::openDir(char const*, void**)+0xa8>
c0017490:	b8 00 00 00 00       	mov    eax,0x0
c0017495:	8d 76 00             	lea    esi,[esi+0x0]
c0017498:	81 c4 1c 01 00 00    	add    esp,0x11c
c001749e:	c3                   	ret    
c001749f:	90                   	nop

c00174a0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174a6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174ae:	75 0c                	jne    c00174bc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174b0:	b8 04 00 00 00       	mov    eax,0x4
c00174b5:	e9 d6 00 00 00       	jmp    c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174ba:	66 90                	xchg   ax,ax
c00174bc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174c4:	75 0a                	jne    c00174d0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174c6:	b8 04 00 00 00       	mov    eax,0x4
c00174cb:	e9 c0 00 00 00       	jmp    c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174d0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174d8:	75 0a                	jne    c00174e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174da:	b8 04 00 00 00       	mov    eax,0x4
c00174df:	e9 ac 00 00 00       	jmp    c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00174f5:	50                   	push   eax
c00174f6:	e8 05 91 fe ff       	call   c0000600 <strcpy>
c00174fb:	83 c4 10             	add    esp,0x10
c00174fe:	83 ec 08             	sub    esp,0x8
c0017501:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017508:	50                   	push   eax
c0017509:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017510:	e8 67 fd ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	83 ec 08             	sub    esp,0x8
c001751b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001751f:	50                   	push   eax
c0017520:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017527:	50                   	push   eax
c0017528:	e8 f8 d0 fe ff       	call   c0004625 <f_stat>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017537:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001753e:	85 c0                	test   eax,eax
c0017540:	74 0a                	je     c001754c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017542:	83 f8 04             	cmp    eax,0x4
c0017545:	74 39                	je     c0017580 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017547:	eb 3f                	jmp    c0017588 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017549:	8d 76 00             	lea    esi,[esi+0x0]
c001754c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017550:	25 ff 00 00 00       	and    eax,0xff
c0017555:	83 e0 10             	and    eax,0x10
c0017558:	0f 95 c2             	setne  dl
c001755b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017562:	88 10                	mov    BYTE PTR [eax],dl
c0017564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017568:	ba 00 00 00 00       	mov    edx,0x0
c001756d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017574:	89 01                	mov    DWORD PTR [ecx],eax
c0017576:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017579:	b8 00 00 00 00       	mov    eax,0x0
c001757e:	eb 10                	jmp    c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017580:	b8 02 00 00 00       	mov    eax,0x2
c0017585:	eb 09                	jmp    c0017590 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017587:	90                   	nop
c0017588:	b8 01 00 00 00       	mov    eax,0x1
c001758d:	8d 76 00             	lea    esi,[esi+0x0]
c0017590:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017596:	c3                   	ret    
c0017597:	90                   	nop

c0017598 <FAT::unlink(char const*)>:
c0017598:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001759e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175a6:	75 08                	jne    c00175b0 <FAT::unlink(char const*)+0x18>
c00175a8:	b8 04 00 00 00       	mov    eax,0x4
c00175ad:	eb 61                	jmp    c0017610 <FAT::unlink(char const*)+0x78>
c00175af:	90                   	nop
c00175b0:	83 ec 08             	sub    esp,0x8
c00175b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175be:	50                   	push   eax
c00175bf:	e8 3c 90 fe ff       	call   c0000600 <strcpy>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	83 ec 08             	sub    esp,0x8
c00175ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175ce:	50                   	push   eax
c00175cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175d6:	e8 a1 fc ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c00175db:	83 c4 10             	add    esp,0x10
c00175de:	83 ec 0c             	sub    esp,0xc
c00175e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175e5:	50                   	push   eax
c00175e6:	e8 9f d2 fe ff       	call   c000488a <f_unlink>
c00175eb:	83 c4 10             	add    esp,0x10
c00175ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00175f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00175fc:	85 c0                	test   eax,eax
c00175fe:	75 08                	jne    c0017608 <FAT::unlink(char const*)+0x70>
c0017600:	b8 00 00 00 00       	mov    eax,0x0
c0017605:	eb 09                	jmp    c0017610 <FAT::unlink(char const*)+0x78>
c0017607:	90                   	nop
c0017608:	b8 01 00 00 00       	mov    eax,0x1
c001760d:	8d 76 00             	lea    esi,[esi+0x0]
c0017610:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017616:	c3                   	ret    
c0017617:	90                   	nop

c0017618 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017618:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001761e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017625:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001762c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017630:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017634:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001763c:	75 0a                	jne    c0017648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001763e:	b8 04 00 00 00       	mov    eax,0x4
c0017643:	e9 54 01 00 00       	jmp    c001779c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017652:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017656:	50                   	push   eax
c0017657:	e8 a4 8f fe ff       	call   c0000600 <strcpy>
c001765c:	83 c4 10             	add    esp,0x10
c001765f:	83 ec 08             	sub    esp,0x8
c0017662:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017666:	50                   	push   eax
c0017667:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001766e:	e8 09 fc ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001767e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017686:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001768a:	25 ff 00 00 00       	and    eax,0xff
c001768f:	83 e0 01             	and    eax,0x1
c0017692:	74 08                	je     c001769c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017694:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001769c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176a0:	25 ff 00 00 00       	and    eax,0xff
c00176a5:	83 e0 02             	and    eax,0x2
c00176a8:	74 0a                	je     c00176b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176aa:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176b2:	66 90                	xchg   ax,ax
c00176b4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176b8:	25 ff 00 00 00       	and    eax,0xff
c00176bd:	83 e0 04             	and    eax,0x4
c00176c0:	74 0a                	je     c00176cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176c2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176ca:	66 90                	xchg   ax,ax
c00176cc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176d0:	25 ff 00 00 00       	and    eax,0xff
c00176d5:	83 e0 08             	and    eax,0x8
c00176d8:	74 0a                	je     c00176e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176da:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00176e2:	66 90                	xchg   ax,ax
c00176e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00176e8:	25 ff 00 00 00       	and    eax,0xff
c00176ed:	83 e0 01             	and    eax,0x1
c00176f0:	74 0a                	je     c00176fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00176f2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00176fa:	66 90                	xchg   ax,ax
c00176fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017700:	25 ff 00 00 00       	and    eax,0xff
c0017705:	83 e0 02             	and    eax,0x2
c0017708:	74 0a                	je     c0017714 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001770a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017712:	66 90                	xchg   ax,ax
c0017714:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017718:	25 ff 00 00 00       	and    eax,0xff
c001771d:	83 e0 04             	and    eax,0x4
c0017720:	74 0a                	je     c001772c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017722:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001772a:	66 90                	xchg   ax,ax
c001772c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017730:	25 ff 00 00 00       	and    eax,0xff
c0017735:	83 e0 08             	and    eax,0x8
c0017738:	74 0a                	je     c0017744 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001773a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017742:	66 90                	xchg   ax,ax
c0017744:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001774b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017752:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017759:	31 d2                	xor    edx,edx
c001775b:	88 c2                	mov    dl,al
c001775d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017764:	25 ff 00 00 00       	and    eax,0xff
c0017769:	83 ec 04             	sub    esp,0x4
c001776c:	52                   	push   edx
c001776d:	50                   	push   eax
c001776e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017772:	50                   	push   eax
c0017773:	e8 85 d5 fe ff       	call   c0004cfd <f_chmod>
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017782:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017789:	85 c0                	test   eax,eax
c001778b:	75 07                	jne    c0017794 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001778d:	b8 00 00 00 00       	mov    eax,0x0
c0017792:	eb 08                	jmp    c001779c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017794:	b8 01 00 00 00       	mov    eax,0x1
c0017799:	8d 76 00             	lea    esi,[esi+0x0]
c001779c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177a2:	c3                   	ret    
c00177a3:	90                   	nop

c00177a4 <FAT::rename(char const*, char const*)>:
c00177a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177b2:	74 0c                	je     c00177c0 <FAT::rename(char const*, char const*)+0x1c>
c00177b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177bc:	75 0e                	jne    c00177cc <FAT::rename(char const*, char const*)+0x28>
c00177be:	66 90                	xchg   ax,ax
c00177c0:	b8 04 00 00 00       	mov    eax,0x4
c00177c5:	e9 9e 00 00 00       	jmp    c0017868 <FAT::rename(char const*, char const*)+0xc4>
c00177ca:	66 90                	xchg   ax,ax
c00177cc:	83 ec 08             	sub    esp,0x8
c00177cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177dd:	50                   	push   eax
c00177de:	e8 1d 8e fe ff       	call   c0000600 <strcpy>
c00177e3:	83 c4 10             	add    esp,0x10
c00177e6:	83 ec 08             	sub    esp,0x8
c00177e9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00177f0:	50                   	push   eax
c00177f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177f8:	e8 7f fa ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c00177fd:	83 c4 10             	add    esp,0x10
c0017800:	83 ec 08             	sub    esp,0x8
c0017803:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001780a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001780e:	50                   	push   eax
c001780f:	e8 ec 8d fe ff       	call   c0000600 <strcpy>
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	83 ec 08             	sub    esp,0x8
c001781a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001781e:	50                   	push   eax
c001781f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017826:	e8 51 fa ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	83 ec 08             	sub    esp,0x8
c0017831:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017835:	50                   	push   eax
c0017836:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001783d:	50                   	push   eax
c001783e:	e8 04 d3 fe ff       	call   c0004b47 <f_rename>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001784d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017854:	85 c0                	test   eax,eax
c0017856:	75 08                	jne    c0017860 <FAT::rename(char const*, char const*)+0xbc>
c0017858:	b8 00 00 00 00       	mov    eax,0x0
c001785d:	eb 09                	jmp    c0017868 <FAT::rename(char const*, char const*)+0xc4>
c001785f:	90                   	nop
c0017860:	b8 01 00 00 00       	mov    eax,0x1
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	81 c4 1c 02 00 00    	add    esp,0x21c
c001786e:	c3                   	ret    
c001786f:	90                   	nop

c0017870 <FAT::mkdir(char const*)>:
c0017870:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017876:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001787e:	75 08                	jne    c0017888 <FAT::mkdir(char const*)+0x18>
c0017880:	b8 04 00 00 00       	mov    eax,0x4
c0017885:	eb 61                	jmp    c00178e8 <FAT::mkdir(char const*)+0x78>
c0017887:	90                   	nop
c0017888:	83 ec 08             	sub    esp,0x8
c001788b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017892:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017896:	50                   	push   eax
c0017897:	e8 64 8d fe ff       	call   c0000600 <strcpy>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	83 ec 08             	sub    esp,0x8
c00178a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178a6:	50                   	push   eax
c00178a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ae:	e8 c9 f9 ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c00178b3:	83 c4 10             	add    esp,0x10
c00178b6:	83 ec 0c             	sub    esp,0xc
c00178b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178bd:	50                   	push   eax
c00178be:	e8 e9 d0 fe ff       	call   c00049ac <f_mkdir>
c00178c3:	83 c4 10             	add    esp,0x10
c00178c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178d4:	85 c0                	test   eax,eax
c00178d6:	75 08                	jne    c00178e0 <FAT::mkdir(char const*)+0x70>
c00178d8:	b8 00 00 00 00       	mov    eax,0x0
c00178dd:	eb 09                	jmp    c00178e8 <FAT::mkdir(char const*)+0x78>
c00178df:	90                   	nop
c00178e0:	b8 01 00 00 00       	mov    eax,0x1
c00178e5:	8d 76 00             	lea    esi,[esi+0x0]
c00178e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00178ee:	c3                   	ret    
c00178ef:	90                   	nop

c00178f0 <FAT::exists(char const*)>:
c00178f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017900:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017904:	50                   	push   eax
c0017905:	e8 f6 8c fe ff       	call   c0000600 <strcpy>
c001790a:	83 c4 10             	add    esp,0x10
c001790d:	83 ec 08             	sub    esp,0x8
c0017910:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017914:	50                   	push   eax
c0017915:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001791c:	e8 5b f9 ff ff       	call   c001727c <FAT::fixFilepath(char*)>
c0017921:	83 c4 10             	add    esp,0x10
c0017924:	83 ec 08             	sub    esp,0x8
c0017927:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001792e:	50                   	push   eax
c001792f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017933:	50                   	push   eax
c0017934:	e8 ec cc fe ff       	call   c0004625 <f_stat>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017943:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001794a:	85 c0                	test   eax,eax
c001794c:	75 06                	jne    c0017954 <FAT::exists(char const*)+0x64>
c001794e:	b0 01                	mov    al,0x1
c0017950:	eb 06                	jmp    c0017958 <FAT::exists(char const*)+0x68>
c0017952:	66 90                	xchg   ax,ax
c0017954:	b0 00                	mov    al,0x0
c0017956:	66 90                	xchg   ax,ax
c0017958:	81 c4 2c 02 00 00    	add    esp,0x22c
c001795e:	c3                   	ret    
c001795f:	90                   	nop

c0017960 <isoReadDiscSectorHelper>:
c0017960:	83 ec 2c             	sub    esp,0x2c
c0017963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017967:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001796b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017970:	83 e8 41             	sub    eax,0x41
c0017973:	8b 0c 85 a0 32 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcd60]
c001797a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797e:	ba 00 00 00 00       	mov    edx,0x0
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001798a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001798e:	52                   	push   edx
c001798f:	50                   	push   eax
c0017990:	51                   	push   ecx
c0017991:	e8 62 52 ff ff       	call   c000cbf8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017996:	83 c4 20             	add    esp,0x20
c0017999:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001799d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179a2:	74 0c                	je     c00179b0 <isoReadDiscSectorHelper+0x50>
c00179a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179a8:	c1 e0 0b             	shl    eax,0xb
c00179ab:	eb 0b                	jmp    c00179b8 <isoReadDiscSectorHelper+0x58>
c00179ad:	8d 76 00             	lea    esi,[esi+0x0]
c00179b0:	b8 00 00 00 00       	mov    eax,0x0
c00179b5:	8d 76 00             	lea    esi,[esi+0x0]
c00179b8:	83 c4 2c             	add    esp,0x2c
c00179bb:	c3                   	ret    

c00179bc <iso_kprintf>:
c00179bc:	83 ec 0c             	sub    esp,0xc
c00179bf:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c00179c4:	83 ec 08             	sub    esp,0x8
c00179c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179cb:	50                   	push   eax
c00179cc:	e8 75 0d ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	90                   	nop
c00179d5:	83 c4 0c             	add    esp,0xc
c00179d8:	c3                   	ret    
c00179d9:	8d 76 00             	lea    esi,[esi+0x0]

c00179dc <iso_kprintfd>:
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c00179e4:	83 ec 08             	sub    esp,0x8
c00179e7:	68 b0 f2 01 c0       	push   0xc001f2b0
c00179ec:	50                   	push   eax
c00179ed:	e8 54 0d ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00179f2:	83 c4 10             	add    esp,0x10
c00179f5:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c00179fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00179fe:	83 ec 08             	sub    esp,0x8
c0017a01:	52                   	push   edx
c0017a02:	50                   	push   eax
c0017a03:	e8 f8 0c ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0017a08:	83 c4 10             	add    esp,0x10
c0017a0b:	a1 84 0d 02 c0       	mov    eax,ds:0xc0020d84
c0017a10:	83 ec 08             	sub    esp,0x8
c0017a13:	68 31 f1 01 c0       	push   0xc001f131
c0017a18:	50                   	push   eax
c0017a19:	e8 28 0d ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	90                   	nop
c0017a22:	83 c4 0c             	add    esp,0xc
c0017a25:	c3                   	ret    

c0017a26 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017a26:	b8 08 00 00 00       	mov    eax,0x8
c0017a2b:	c3                   	ret    

c0017a2c <ISO9660::getName()>:
c0017a2c:	b8 b3 f2 01 c0       	mov    eax,0xc001f2b3
c0017a31:	c3                   	ret    

c0017a32 <ISO9660::closeDir(void*)>:
c0017a32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a38:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017a3b:	90                   	nop

c0017a3c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017a3c:	b8 01 00 00 00       	mov    eax,0x1
c0017a41:	c3                   	ret    

c0017a42 <ISO9660::unlink(char const*)>:
c0017a42:	b8 01 00 00 00       	mov    eax,0x1
c0017a47:	c3                   	ret    

c0017a48 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017a48:	b8 03 00 00 00       	mov    eax,0x3
c0017a4d:	c3                   	ret    

c0017a4e <ISO9660::rename(char const*, char const*)>:
c0017a4e:	b8 01 00 00 00       	mov    eax,0x1
c0017a53:	c3                   	ret    

c0017a54 <ISO9660::mkdir(char const*)>:
c0017a54:	b8 01 00 00 00       	mov    eax,0x1
c0017a59:	c3                   	ret    

c0017a5a <ISO9660::~ISO9660()>:
c0017a5a:	83 ec 0c             	sub    esp,0xc
c0017a5d:	ba 04 f3 01 c0       	mov    edx,0xc001f304
c0017a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a66:	89 10                	mov    DWORD PTR [eax],edx
c0017a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a6c:	83 ec 0c             	sub    esp,0xc
c0017a6f:	50                   	push   eax
c0017a70:	e8 b9 2d ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	90                   	nop
c0017a79:	83 c4 0c             	add    esp,0xc
c0017a7c:	c3                   	ret    
c0017a7d:	90                   	nop

c0017a7e <ISO9660::~ISO9660()>:
c0017a7e:	83 ec 0c             	sub    esp,0xc
c0017a81:	83 ec 0c             	sub    esp,0xc
c0017a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a88:	e8 cd ff ff ff       	call   c0017a5a <ISO9660::~ISO9660()>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	83 ec 08             	sub    esp,0x8
c0017a93:	6a 08                	push   0x8
c0017a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a99:	e8 54 29 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0017a9e:	83 c4 10             	add    esp,0x10
c0017aa1:	83 c4 0c             	add    esp,0xc
c0017aa4:	c3                   	ret    
c0017aa5:	90                   	nop

c0017aa6 <ISO9660::exists(char const*)>:
c0017aa6:	83 ec 18             	sub    esp,0x18
c0017aa9:	68 ce f2 01 c0       	push   0xc001f2ce
c0017aae:	e8 a0 86 ff ff       	call   c0010153 <KePanic(char const*)>
c0017ab3:	31 c0                	xor    eax,eax
c0017ab5:	83 c4 1c             	add    esp,0x1c
c0017ab8:	c3                   	ret    
c0017ab9:	90                   	nop

c0017aba <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017aba:	56                   	push   esi
c0017abb:	53                   	push   ebx
c0017abc:	50                   	push   eax
c0017abd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ac1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ac5:	85 db                	test   ebx,ebx
c0017ac7:	0f 84 82 00 00 00    	je     c0017b4f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017acd:	85 f6                	test   esi,esi
c0017acf:	74 7e                	je     c0017b4f <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017ad1:	ba 03 00 00 00       	mov    edx,0x3
c0017ad6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017adb:	75 77                	jne    c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017add:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ae0:	3a 05 a0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241a0
c0017ae6:	74 34                	je     c0017b1c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017ae8:	83 ec 0c             	sub    esp,0xc
c0017aeb:	50                   	push   eax
c0017aec:	e8 ce ec fe ff       	call   c00067bf <init_percd>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	ba 0b 00 00 00       	mov    edx,0xb
c0017af9:	40                   	inc    eax
c0017afa:	74 58                	je     c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017afc:	80 3d a0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241a0,0x0
c0017b03:	74 10                	je     c0017b15 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017b05:	83 ec 0c             	sub    esp,0xc
c0017b08:	68 ec f2 01 c0       	push   0xc001f2ec
c0017b0d:	e8 41 86 ff ff       	call   c0010153 <KePanic(char const*)>
c0017b12:	83 c4 10             	add    esp,0x10
c0017b15:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b17:	a2 a0 41 02 c0       	mov    ds:0xc00241a0,al
c0017b1c:	83 ec 0c             	sub    esp,0xc
c0017b1f:	0f be 05 a0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241a0
c0017b26:	83 c3 03             	add    ebx,0x3
c0017b29:	50                   	push   eax
c0017b2a:	e8 90 ec fe ff       	call   c00067bf <init_percd>
c0017b2f:	59                   	pop    ecx
c0017b30:	58                   	pop    eax
c0017b31:	6a 00                	push   0x0
c0017b33:	53                   	push   ebx
c0017b34:	e8 c4 e7 fe ff       	call   c00062fd <iso_open>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	ba 01 00 00 00       	mov    edx,0x1
c0017b41:	83 f8 ff             	cmp    eax,0xffffffff
c0017b44:	74 0e                	je     c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b46:	83 c0 64             	add    eax,0x64
c0017b49:	31 d2                	xor    edx,edx
c0017b4b:	89 06                	mov    DWORD PTR [esi],eax
c0017b4d:	eb 05                	jmp    c0017b54 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017b4f:	ba 04 00 00 00       	mov    edx,0x4
c0017b54:	89 d0                	mov    eax,edx
c0017b56:	5a                   	pop    edx
c0017b57:	5b                   	pop    ebx
c0017b58:	5e                   	pop    esi
c0017b59:	c3                   	ret    

c0017b5a <ISO9660::openDir(char const*, void**)>:
c0017b5a:	56                   	push   esi
c0017b5b:	53                   	push   ebx
c0017b5c:	50                   	push   eax
c0017b5d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b61:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b65:	85 db                	test   ebx,ebx
c0017b67:	74 76                	je     c0017bdf <ISO9660::openDir(char const*, void**)+0x85>
c0017b69:	85 f6                	test   esi,esi
c0017b6b:	74 72                	je     c0017bdf <ISO9660::openDir(char const*, void**)+0x85>
c0017b6d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b70:	3a 05 a0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241a0
c0017b76:	74 34                	je     c0017bac <ISO9660::openDir(char const*, void**)+0x52>
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	50                   	push   eax
c0017b7c:	e8 3e ec fe ff       	call   c00067bf <init_percd>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	ba 0b 00 00 00       	mov    edx,0xb
c0017b89:	40                   	inc    eax
c0017b8a:	74 58                	je     c0017be4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b8c:	80 3d a0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241a0,0x0
c0017b93:	74 10                	je     c0017ba5 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b95:	83 ec 0c             	sub    esp,0xc
c0017b98:	68 ec f2 01 c0       	push   0xc001f2ec
c0017b9d:	e8 b1 85 ff ff       	call   c0010153 <KePanic(char const*)>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ba7:	a2 a0 41 02 c0       	mov    ds:0xc00241a0,al
c0017bac:	83 ec 0c             	sub    esp,0xc
c0017baf:	0f be 05 a0 41 02 c0 	movsx  eax,BYTE PTR ds:0xc00241a0
c0017bb6:	83 c3 03             	add    ebx,0x3
c0017bb9:	50                   	push   eax
c0017bba:	e8 00 ec fe ff       	call   c00067bf <init_percd>
c0017bbf:	59                   	pop    ecx
c0017bc0:	58                   	pop    eax
c0017bc1:	6a 01                	push   0x1
c0017bc3:	53                   	push   ebx
c0017bc4:	e8 34 e7 fe ff       	call   c00062fd <iso_open>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	ba 01 00 00 00       	mov    edx,0x1
c0017bd1:	83 f8 ff             	cmp    eax,0xffffffff
c0017bd4:	74 0e                	je     c0017be4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017bd6:	83 c0 64             	add    eax,0x64
c0017bd9:	31 d2                	xor    edx,edx
c0017bdb:	89 06                	mov    DWORD PTR [esi],eax
c0017bdd:	eb 05                	jmp    c0017be4 <ISO9660::openDir(char const*, void**)+0x8a>
c0017bdf:	ba 04 00 00 00       	mov    edx,0x4
c0017be4:	89 d0                	mov    eax,edx
c0017be6:	5a                   	pop    edx
c0017be7:	5b                   	pop    ebx
c0017be8:	5e                   	pop    esi
c0017be9:	c3                   	ret    

c0017bea <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017bea:	53                   	push   ebx
c0017beb:	83 ec 08             	sub    esp,0x8
c0017bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bf2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017bf6:	85 c0                	test   eax,eax
c0017bf8:	74 25                	je     c0017c1f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bfa:	85 db                	test   ebx,ebx
c0017bfc:	74 21                	je     c0017c1f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017bfe:	83 e8 64             	sub    eax,0x64
c0017c01:	52                   	push   edx
c0017c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c0a:	50                   	push   eax
c0017c0b:	e8 95 e7 fe ff       	call   c00063a5 <iso_read>
c0017c10:	83 c4 10             	add    esp,0x10
c0017c13:	89 03                	mov    DWORD PTR [ebx],eax
c0017c15:	09 d0                	or     eax,edx
c0017c17:	0f 94 c0             	sete   al
c0017c1a:	0f b6 c0             	movzx  eax,al
c0017c1d:	eb 05                	jmp    c0017c24 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017c1f:	b8 04 00 00 00       	mov    eax,0x4
c0017c24:	83 c4 08             	add    esp,0x8
c0017c27:	5b                   	pop    ebx
c0017c28:	c3                   	ret    
c0017c29:	90                   	nop

c0017c2a <ISO9660::seek(void*, unsigned long long)>:
c0017c2a:	57                   	push   edi
c0017c2b:	56                   	push   esi
c0017c2c:	b8 04 00 00 00       	mov    eax,0x4
c0017c31:	51                   	push   ecx
c0017c32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c36:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017c3a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017c3e:	85 d2                	test   edx,edx
c0017c40:	74 1c                	je     c0017c5e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017c42:	6a 00                	push   0x0
c0017c44:	83 ea 64             	sub    edx,0x64
c0017c47:	57                   	push   edi
c0017c48:	56                   	push   esi
c0017c49:	52                   	push   edx
c0017c4a:	e8 6c e8 fe ff       	call   c00064bb <iso_seek>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	31 f0                	xor    eax,esi
c0017c54:	31 fa                	xor    edx,edi
c0017c56:	09 d0                	or     eax,edx
c0017c58:	0f 95 c0             	setne  al
c0017c5b:	0f b6 c0             	movzx  eax,al
c0017c5e:	5a                   	pop    edx
c0017c5f:	5e                   	pop    esi
c0017c60:	5f                   	pop    edi
c0017c61:	c3                   	ret    

c0017c62 <ISO9660::tell(void*, unsigned long long*)>:
c0017c62:	53                   	push   ebx
c0017c63:	83 ec 08             	sub    esp,0x8
c0017c66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c6e:	85 c0                	test   eax,eax
c0017c70:	74 1c                	je     c0017c8e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c72:	85 db                	test   ebx,ebx
c0017c74:	74 18                	je     c0017c8e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	83 e8 64             	sub    eax,0x64
c0017c7c:	50                   	push   eax
c0017c7d:	e8 bd e8 fe ff       	call   c000653f <iso_tell>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	89 03                	mov    DWORD PTR [ebx],eax
c0017c87:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c8a:	31 c0                	xor    eax,eax
c0017c8c:	eb 05                	jmp    c0017c93 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c8e:	b8 04 00 00 00       	mov    eax,0x4
c0017c93:	83 c4 08             	add    esp,0x8
c0017c96:	5b                   	pop    ebx
c0017c97:	c3                   	ret    

c0017c98 <ISO9660::stat(void*, unsigned long long*)>:
c0017c98:	53                   	push   ebx
c0017c99:	83 ec 08             	sub    esp,0x8
c0017c9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ca0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ca4:	85 c0                	test   eax,eax
c0017ca6:	74 20                	je     c0017cc8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017ca8:	85 db                	test   ebx,ebx
c0017caa:	74 1c                	je     c0017cc8 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	83 e8 64             	sub    eax,0x64
c0017cb2:	50                   	push   eax
c0017cb3:	e8 b8 e8 fe ff       	call   c0006570 <iso_total>
c0017cb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017cbf:	89 03                	mov    DWORD PTR [ebx],eax
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	31 c0                	xor    eax,eax
c0017cc6:	eb 05                	jmp    c0017ccd <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017cc8:	b8 04 00 00 00       	mov    eax,0x4
c0017ccd:	83 c4 08             	add    esp,0x8
c0017cd0:	5b                   	pop    ebx
c0017cd1:	c3                   	ret    

c0017cd2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017cd2:	55                   	push   ebp
c0017cd3:	57                   	push   edi
c0017cd4:	56                   	push   esi
c0017cd5:	53                   	push   ebx
c0017cd6:	83 ec 0c             	sub    esp,0xc
c0017cd9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017cdd:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017ce1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017ce5:	85 ff                	test   edi,edi
c0017ce7:	0f 94 c2             	sete   dl
c0017cea:	85 f6                	test   esi,esi
c0017cec:	0f 94 c0             	sete   al
c0017cef:	08 c2                	or     dl,al
c0017cf1:	0f 85 9e 00 00 00    	jne    c0017d95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017cf7:	85 db                	test   ebx,ebx
c0017cf9:	0f 84 96 00 00 00    	je     c0017d95 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017cff:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017d02:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017d08:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d0f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017d12:	3a 05 a0 41 02 c0    	cmp    al,BYTE PTR ds:0xc00241a0
c0017d18:	74 34                	je     c0017d4e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017d1a:	83 ec 0c             	sub    esp,0xc
c0017d1d:	50                   	push   eax
c0017d1e:	e8 9c ea fe ff       	call   c00067bf <init_percd>
c0017d23:	83 c4 10             	add    esp,0x10
c0017d26:	ba 0b 00 00 00       	mov    edx,0xb
c0017d2b:	40                   	inc    eax
c0017d2c:	74 6c                	je     c0017d9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d2e:	80 3d a0 41 02 c0 00 	cmp    BYTE PTR ds:0xc00241a0,0x0
c0017d35:	74 10                	je     c0017d47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017d37:	83 ec 0c             	sub    esp,0xc
c0017d3a:	68 ec f2 01 c0       	push   0xc001f2ec
c0017d3f:	e8 0f 84 ff ff       	call   c0010153 <KePanic(char const*)>
c0017d44:	83 c4 10             	add    esp,0x10
c0017d47:	8a 03                	mov    al,BYTE PTR [ebx]
c0017d49:	a2 a0 41 02 c0       	mov    ds:0xc00241a0,al
c0017d4e:	83 c3 03             	add    ebx,0x3
c0017d51:	52                   	push   edx
c0017d52:	52                   	push   edx
c0017d53:	6a 00                	push   0x0
c0017d55:	53                   	push   ebx
c0017d56:	e8 a2 e5 fe ff       	call   c00062fd <iso_open>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	89 c5                	mov    ebp,eax
c0017d60:	83 f8 ff             	cmp    eax,0xffffffff
c0017d63:	75 0f                	jne    c0017d74 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017d65:	50                   	push   eax
c0017d66:	50                   	push   eax
c0017d67:	6a 01                	push   0x1
c0017d69:	53                   	push   ebx
c0017d6a:	e8 8e e5 fe ff       	call   c00062fd <iso_open>
c0017d6f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d72:	eb 1a                	jmp    c0017d8e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017d74:	83 ec 0c             	sub    esp,0xc
c0017d77:	50                   	push   eax
c0017d78:	e8 f3 e7 fe ff       	call   c0006570 <iso_total>
c0017d7d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d84:	89 06                	mov    DWORD PTR [esi],eax
c0017d86:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d89:	e8 f9 e5 fe ff       	call   c0006387 <iso_close>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	31 d2                	xor    edx,edx
c0017d93:	eb 05                	jmp    c0017d9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017d95:	ba 04 00 00 00       	mov    edx,0x4
c0017d9a:	83 c4 0c             	add    esp,0xc
c0017d9d:	89 d0                	mov    eax,edx
c0017d9f:	5b                   	pop    ebx
c0017da0:	5e                   	pop    esi
c0017da1:	5f                   	pop    edi
c0017da2:	5d                   	pop    ebp
c0017da3:	c3                   	ret    

c0017da4 <ISO9660::close(void*)>:
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	b8 04 00 00 00       	mov    eax,0x4
c0017dac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017db0:	85 d2                	test   edx,edx
c0017db2:	74 11                	je     c0017dc5 <ISO9660::close(void*)+0x21>
c0017db4:	83 ec 0c             	sub    esp,0xc
c0017db7:	83 ea 64             	sub    edx,0x64
c0017dba:	52                   	push   edx
c0017dbb:	e8 c7 e5 fe ff       	call   c0006387 <iso_close>
c0017dc0:	83 c4 10             	add    esp,0x10
c0017dc3:	31 c0                	xor    eax,eax
c0017dc5:	83 c4 0c             	add    esp,0xc
c0017dc8:	c3                   	ret    
c0017dc9:	90                   	nop

c0017dca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017dca:	55                   	push   ebp
c0017dcb:	57                   	push   edi
c0017dcc:	56                   	push   esi
c0017dcd:	53                   	push   ebx
c0017dce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017dd4:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017ddb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017de2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017de9:	85 c0                	test   eax,eax
c0017deb:	0f 84 96 00 00 00    	je     c0017e87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017df1:	85 db                	test   ebx,ebx
c0017df3:	0f 84 8e 00 00 00    	je     c0017e87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017df9:	83 ec 0c             	sub    esp,0xc
c0017dfc:	83 e8 64             	sub    eax,0x64
c0017dff:	50                   	push   eax
c0017e00:	e8 bc e7 fe ff       	call   c00065c1 <iso_readdir>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	89 c6                	mov    esi,eax
c0017e0a:	85 c0                	test   eax,eax
c0017e0c:	75 18                	jne    c0017e26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017e0e:	52                   	push   edx
c0017e0f:	68 10 01 00 00       	push   0x110
c0017e14:	6a 00                	push   0x0
c0017e16:	57                   	push   edi
c0017e17:	e8 b4 86 fe ff       	call   c00004d0 <memset>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	b8 01 00 00 00       	mov    eax,0x1
c0017e24:	eb 66                	jmp    c0017e8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e26:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017e2c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017e2f:	83 ec 0c             	sub    esp,0xc
c0017e32:	55                   	push   ebp
c0017e33:	e8 08 87 fe ff       	call   c0000540 <strlen>
c0017e38:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017e4b:	75 0a                	jne    c0017e57 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017e4d:	b8 02 00 00 00       	mov    eax,0x2
c0017e52:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e55:	74 05                	je     c0017e5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e57:	b8 01 00 00 00       	mov    eax,0x1
c0017e5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e60:	50                   	push   eax
c0017e61:	50                   	push   eax
c0017e62:	55                   	push   ebp
c0017e63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e67:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e6b:	50                   	push   eax
c0017e6c:	e8 8f 87 fe ff       	call   c0000600 <strcpy>
c0017e71:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e7a:	31 c0                	xor    eax,eax
c0017e7c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	eb 05                	jmp    c0017e8c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e87:	b8 04 00 00 00       	mov    eax,0x4
c0017e8c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e92:	5b                   	pop    ebx
c0017e93:	5e                   	pop    esi
c0017e94:	5f                   	pop    edi
c0017e95:	5d                   	pop    ebp
c0017e96:	c3                   	ret    

c0017e97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e97:	57                   	push   edi
c0017e98:	56                   	push   esi
c0017e99:	53                   	push   ebx
c0017e9a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e9e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017ea2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ea6:	39 35 a4 41 02 c0    	cmp    DWORD PTR ds:0xc00241a4,esi
c0017eac:	75 08                	jne    c0017eb6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017eae:	38 1d 10 fd 01 c0    	cmp    BYTE PTR ds:0xc001fd10,bl
c0017eb4:	74 4a                	je     c0017f00 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017eb6:	83 ec 0c             	sub    esp,0xc
c0017eb9:	31 d2                	xor    edx,edx
c0017ebb:	68 c0 41 02 c0       	push   0xc00241c0
c0017ec0:	0f be c3             	movsx  eax,bl
c0017ec3:	6a 01                	push   0x1
c0017ec5:	52                   	push   edx
c0017ec6:	56                   	push   esi
c0017ec7:	ff 34 85 9c 31 02 c0 	push   DWORD PTR [eax*4-0x3ffdce64]
c0017ece:	e8 25 4d ff ff       	call   c000cbf8 <LogicalDisk::read(unsigned long long, int, void*)>
c0017ed3:	83 c4 20             	add    esp,0x20
c0017ed6:	85 c0                	test   eax,eax
c0017ed8:	75 0e                	jne    c0017ee8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017eda:	89 35 a4 41 02 c0    	mov    DWORD PTR ds:0xc00241a4,esi
c0017ee0:	88 1d 10 fd 01 c0    	mov    BYTE PTR ds:0xc001fd10,bl
c0017ee6:	eb 18                	jmp    c0017f00 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017ee8:	50                   	push   eax
c0017ee9:	68 00 08 00 00       	push   0x800
c0017eee:	6a 00                	push   0x0
c0017ef0:	57                   	push   edi
c0017ef1:	e8 da 85 fe ff       	call   c00004d0 <memset>
c0017ef6:	83 c4 10             	add    esp,0x10
c0017ef9:	b8 01 00 00 00       	mov    eax,0x1
c0017efe:	eb 0e                	jmp    c0017f0e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017f00:	be c0 41 02 c0       	mov    esi,0xc00241c0
c0017f05:	b9 00 08 00 00       	mov    ecx,0x800
c0017f0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017f0c:	31 c0                	xor    eax,eax
c0017f0e:	5b                   	pop    ebx
c0017f0f:	5e                   	pop    esi
c0017f10:	5f                   	pop    edi
c0017f11:	c3                   	ret    

c0017f12 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017f12:	53                   	push   ebx
c0017f13:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017f19:	c7 05 a4 41 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00241a4,0xdeadbeef
c0017f23:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017f2a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017f2d:	0f be db             	movsx  ebx,bl
c0017f30:	53                   	push   ebx
c0017f31:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017f35:	50                   	push   eax
c0017f36:	6a 10                	push   0x10
c0017f38:	e8 5a ff ff ff       	call   c0017e97 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017f3d:	83 c4 10             	add    esp,0x10
c0017f40:	31 d2                	xor    edx,edx
c0017f42:	85 c0                	test   eax,eax
c0017f44:	75 33                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f46:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f4b:	75 2c                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f4d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f52:	75 25                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f54:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f59:	75 1e                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f5b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f60:	75 17                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f62:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f67:	75 10                	jne    c0017f79 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f69:	83 ec 0c             	sub    esp,0xc
c0017f6c:	53                   	push   ebx
c0017f6d:	e8 4d e8 fe ff       	call   c00067bf <init_percd>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	40                   	inc    eax
c0017f76:	0f 95 c2             	setne  dl
c0017f79:	88 d0                	mov    al,dl
c0017f7b:	81 c4 08 08 00 00    	add    esp,0x808
c0017f81:	5b                   	pop    ebx
c0017f82:	c3                   	ret    
c0017f83:	90                   	nop

c0017f84 <ISO9660::ISO9660()>:
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8b:	83 ec 0c             	sub    esp,0xc
c0017f8e:	50                   	push   eax
c0017f8f:	e8 76 28 ff ff       	call   c000a80a <Filesystem::Filesystem()>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	ba 04 f3 01 c0       	mov    edx,0xc001f304
c0017f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa0:	89 10                	mov    DWORD PTR [eax],edx
c0017fa2:	e8 1a e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017fa7:	90                   	nop
c0017fa8:	83 c4 0c             	add    esp,0xc
c0017fab:	c3                   	ret    

c0017fac <SoundCard::beginPlayback()>:
c0017fac:	c7 44 24 04 64 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f364
c0017fb4:	e9 9a 81 ff ff       	jmp    c0010153 <KePanic(char const*)>
c0017fb9:	90                   	nop

c0017fba <SoundCard::stopPlayback()>:
c0017fba:	c7 44 24 04 64 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f364
c0017fc2:	e9 8c 81 ff ff       	jmp    c0010153 <KePanic(char const*)>
c0017fc7:	90                   	nop

c0017fc8 <SoundCard::SoundCard(char const*)>:
c0017fc8:	83 ec 1c             	sub    esp,0x1c
c0017fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcf:	83 ec 08             	sub    esp,0x8
c0017fd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fd6:	50                   	push   eax
c0017fd7:	e8 e4 3a ff ff       	call   c000bac0 <Device::Device(char const*)>
c0017fdc:	83 c4 10             	add    esp,0x10
c0017fdf:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c0017fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe8:	89 10                	mov    DWORD PTR [eax],edx
c0017fea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fee:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0018003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018007:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018015:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001801f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018023:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001802d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018035:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001803a:	7f 19                	jg     c0018055 <SoundCard::SoundCard(char const*)+0x8d>
c001803c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018040:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018044:	83 c2 54             	add    edx,0x54
c0018047:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001804f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018053:	eb e0                	jmp    c0018035 <SoundCard::SoundCard(char const*)+0x6d>
c0018055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018059:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018060:	90                   	nop
c0018061:	83 c4 1c             	add    esp,0x1c
c0018064:	c3                   	ret    
c0018065:	90                   	nop

c0018066 <SoundCard::~SoundCard()>:
c0018066:	83 ec 0c             	sub    esp,0xc
c0018069:	ba b0 f3 01 c0       	mov    edx,0xc001f3b0
c001806e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018072:	89 10                	mov    DWORD PTR [eax],edx
c0018074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018078:	83 ec 0c             	sub    esp,0xc
c001807b:	50                   	push   eax
c001807c:	e8 a9 37 ff ff       	call   c000b82a <Device::~Device()>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	90                   	nop
c0018085:	83 c4 0c             	add    esp,0xc
c0018088:	c3                   	ret    
c0018089:	90                   	nop

c001808a <SoundCard::~SoundCard()>:
c001808a:	83 ec 0c             	sub    esp,0xc
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018094:	e8 cd ff ff ff       	call   c0018066 <SoundCard::~SoundCard()>
c0018099:	83 c4 10             	add    esp,0x10
c001809c:	83 ec 08             	sub    esp,0x8
c001809f:	68 e8 01 00 00       	push   0x1e8
c00180a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180a8:	e8 45 23 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c00180ad:	83 c4 10             	add    esp,0x10
c00180b0:	83 c4 0c             	add    esp,0xc
c00180b3:	c3                   	ret    

c00180b4 <SoundCard::configureRates(int, int, int)>:
c00180b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180b8:	31 c0                	xor    eax,eax
c00180ba:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00180c1:	75 20                	jne    c00180e3 <SoundCard::configureRates(int, int, int)+0x2f>
c00180c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180c7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00180cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180d1:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00180d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180db:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00180e1:	b0 01                	mov    al,0x1
c00180e3:	c3                   	ret    

c00180e4 <SoundCard::getSamples16(int, short*)>:
c00180e4:	55                   	push   ebp
c00180e5:	57                   	push   edi
c00180e6:	31 ff                	xor    edi,edi
c00180e8:	56                   	push   esi
c00180e9:	53                   	push   ebx
c00180ea:	31 db                	xor    ebx,ebx
c00180ec:	83 ec 10             	sub    esp,0x10
c00180ef:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180f3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180f7:	8d 04 36             	lea    eax,[esi+esi*1]
c00180fa:	50                   	push   eax
c00180fb:	6a 00                	push   0x0
c00180fd:	55                   	push   ebp
c00180fe:	e8 cd 83 fe ff       	call   c00004d0 <memset>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018111:	85 c0                	test   eax,eax
c0018113:	74 1b                	je     c0018130 <SoundCard::getSamples16(int, short*)+0x4c>
c0018115:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018119:	75 15                	jne    c0018130 <SoundCard::getSamples16(int, short*)+0x4c>
c001811b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001811f:	55                   	push   ebp
c0018120:	56                   	push   esi
c0018121:	50                   	push   eax
c0018122:	e8 ed 02 00 00       	call   c0018414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018127:	83 c4 10             	add    esp,0x10
c001812a:	39 c7                	cmp    edi,eax
c001812c:	7d 02                	jge    c0018130 <SoundCard::getSamples16(int, short*)+0x4c>
c001812e:	89 c7                	mov    edi,eax
c0018130:	43                   	inc    ebx
c0018131:	83 fb 20             	cmp    ebx,0x20
c0018134:	75 d0                	jne    c0018106 <SoundCard::getSamples16(int, short*)+0x22>
c0018136:	83 c4 0c             	add    esp,0xc
c0018139:	89 f8                	mov    eax,edi
c001813b:	5b                   	pop    ebx
c001813c:	5e                   	pop    esi
c001813d:	5f                   	pop    edi
c001813e:	5d                   	pop    ebp
c001813f:	c3                   	ret    

c0018140 <SoundCard::getSamples32(int, int*)>:
c0018140:	55                   	push   ebp
c0018141:	57                   	push   edi
c0018142:	31 ff                	xor    edi,edi
c0018144:	56                   	push   esi
c0018145:	31 f6                	xor    esi,esi
c0018147:	53                   	push   ebx
c0018148:	83 ec 10             	sub    esp,0x10
c001814b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018153:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018157:	c1 e0 02             	shl    eax,0x2
c001815a:	50                   	push   eax
c001815b:	6a 00                	push   0x0
c001815d:	55                   	push   ebp
c001815e:	e8 6d 83 fe ff       	call   c00004d0 <memset>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001816d:	85 c0                	test   eax,eax
c001816f:	74 1b                	je     c001818c <SoundCard::getSamples32(int, int*)+0x4c>
c0018171:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018175:	75 15                	jne    c001818c <SoundCard::getSamples32(int, int*)+0x4c>
c0018177:	53                   	push   ebx
c0018178:	55                   	push   ebp
c0018179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001817d:	50                   	push   eax
c001817e:	e8 55 03 00 00       	call   c00184d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018183:	83 c4 10             	add    esp,0x10
c0018186:	39 c6                	cmp    esi,eax
c0018188:	7d 02                	jge    c001818c <SoundCard::getSamples32(int, int*)+0x4c>
c001818a:	89 c6                	mov    esi,eax
c001818c:	47                   	inc    edi
c001818d:	83 ff 20             	cmp    edi,0x20
c0018190:	75 d4                	jne    c0018166 <SoundCard::getSamples32(int, int*)+0x26>
c0018192:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018198:	85 f6                	test   esi,esi
c001819a:	75 0f                	jne    c00181ab <SoundCard::getSamples32(int, int*)+0x6b>
c001819c:	84 c0                	test   al,al
c001819e:	74 1b                	je     c00181bb <SoundCard::getSamples32(int, int*)+0x7b>
c00181a0:	83 ec 0c             	sub    esp,0xc
c00181a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181a5:	53                   	push   ebx
c00181a6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00181a9:	eb 0d                	jmp    c00181b8 <SoundCard::getSamples32(int, int*)+0x78>
c00181ab:	84 c0                	test   al,al
c00181ad:	75 0c                	jne    c00181bb <SoundCard::getSamples32(int, int*)+0x7b>
c00181af:	83 ec 0c             	sub    esp,0xc
c00181b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181b4:	53                   	push   ebx
c00181b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00181b8:	83 c4 10             	add    esp,0x10
c00181bb:	83 c4 0c             	add    esp,0xc
c00181be:	89 f0                	mov    eax,esi
c00181c0:	5b                   	pop    ebx
c00181c1:	5e                   	pop    esi
c00181c2:	5f                   	pop    edi
c00181c3:	5d                   	pop    ebp
c00181c4:	c3                   	ret    
c00181c5:	90                   	nop

c00181c6 <SoundCard::addChannel(SoundPort*)>:
c00181c6:	83 ec 0c             	sub    esp,0xc
c00181c9:	31 c0                	xor    eax,eax
c00181cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181cf:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00181d7:	74 1b                	je     c00181f4 <SoundCard::addChannel(SoundPort*)+0x2e>
c00181d9:	40                   	inc    eax
c00181da:	83 f8 20             	cmp    eax,0x20
c00181dd:	75 f0                	jne    c00181cf <SoundCard::addChannel(SoundPort*)+0x9>
c00181df:	83 ec 0c             	sub    esp,0xc
c00181e2:	68 89 f3 01 c0       	push   0xc001f389
c00181e7:	e8 67 7f ff ff       	call   c0010153 <KePanic(char const*)>
c00181ec:	83 c4 10             	add    esp,0x10
c00181ef:	83 c8 ff             	or     eax,0xffffffff
c00181f2:	eb 0b                	jmp    c00181ff <SoundCard::addChannel(SoundPort*)+0x39>
c00181f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181f8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181ff:	83 c4 0c             	add    esp,0xc
c0018202:	c3                   	ret    
c0018203:	90                   	nop

c0018204 <SoundCard::removeChannel(int)>:
c0018204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018208:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001820c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018217:	c3                   	ret    

c0018218 <SoundPort::SoundPort(int, int, int, int)>:
c0018218:	83 ec 0c             	sub    esp,0xc
c001821b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001822a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018232:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018236:	89 10                	mov    DWORD PTR [eax],edx
c0018238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018240:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018247:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001824b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001824e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018253:	75 13                	jne    c0018268 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018259:	8b 00                	mov    eax,DWORD PTR [eax]
c001825b:	05 a0 0f 00 00       	add    eax,0xfa0
c0018260:	01 c0                	add    eax,eax
c0018262:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018266:	66 90                	xchg   ax,ax
c0018268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018270:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018277:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001827e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018282:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018285:	c1 e0 02             	shl    eax,0x2
c0018288:	83 ec 0c             	sub    esp,0xc
c001828b:	50                   	push   eax
c001828c:	e8 28 f5 fe ff       	call   c00077b9 <malloc>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	89 c2                	mov    edx,eax
c0018296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001829d:	90                   	nop
c001829e:	83 c4 0c             	add    esp,0xc
c00182a1:	c3                   	ret    
c00182a2:	66 90                	xchg   ax,ax

c00182a4 <SoundPort::~SoundPort()>:
c00182a4:	83 ec 0c             	sub    esp,0xc
c00182a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182ae:	85 c0                	test   eax,eax
c00182b0:	74 1e                	je     c00182d0 <SoundPort::~SoundPort()+0x2c>
c00182b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00182b9:	83 ec 0c             	sub    esp,0xc
c00182bc:	50                   	push   eax
c00182bd:	e8 17 f5 fe ff       	call   c00077d9 <free>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00182d0:	90                   	nop
c00182d1:	83 c4 0c             	add    esp,0xc
c00182d4:	c3                   	ret    
c00182d5:	90                   	nop
c00182d6:	66 90                	xchg   ax,ax

c00182d8 <SoundPort::unpause()>:
c00182d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182dc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00182e0:	c3                   	ret    
c00182e1:	90                   	nop
c00182e2:	66 90                	xchg   ax,ax

c00182e4 <SoundPort::pause()>:
c00182e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182e8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182ec:	c3                   	ret    
c00182ed:	90                   	nop
c00182ee:	66 90                	xchg   ax,ax

c00182f0 <SoundPort::getBufferUsed()>:
c00182f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182f4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182f7:	c3                   	ret    

c00182f8 <SoundPort::getBufferSize()>:
c00182f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182ff:	c3                   	ret    

c0018300 <SoundPort::buffer16(short*, int)>:
c0018300:	55                   	push   ebp
c0018301:	57                   	push   edi
c0018302:	56                   	push   esi
c0018303:	53                   	push   ebx
c0018304:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018308:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001830c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001830f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018312:	74 68                	je     c001837c <SoundPort::buffer16(short*, int)+0x7c>
c0018314:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018318:	85 c9                	test   ecx,ecx
c001831a:	7e 60                	jle    c001837c <SoundPort::buffer16(short*, int)+0x7c>
c001831c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018320:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018323:	c1 e1 0f             	shl    ecx,0xf
c0018326:	8d 70 01             	lea    esi,[eax+0x1]
c0018329:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001832c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001832f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018332:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018335:	74 4d                	je     c0018384 <SoundPort::buffer16(short*, int)+0x84>
c0018337:	31 f6                	xor    esi,esi
c0018339:	eb 21                	jmp    c001835c <SoundPort::buffer16(short*, int)+0x5c>
c001833b:	90                   	nop
c001833c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0018341:	8d 79 01             	lea    edi,[ecx+0x1]
c0018344:	c1 e3 0f             	shl    ebx,0xf
c0018347:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001834a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001834d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018350:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018353:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018356:	74 1c                	je     c0018374 <SoundPort::buffer16(short*, int)+0x74>
c0018358:	89 c6                	mov    esi,eax
c001835a:	66 90                	xchg   ax,ax
c001835c:	8d 46 01             	lea    eax,[esi+0x1]
c001835f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018363:	75 d7                	jne    c001833c <SoundPort::buffer16(short*, int)+0x3c>
c0018365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018369:	8d 76 00             	lea    esi,[esi+0x0]
c001836c:	5b                   	pop    ebx
c001836d:	5e                   	pop    esi
c001836e:	5f                   	pop    edi
c001836f:	5d                   	pop    ebp
c0018370:	c3                   	ret    
c0018371:	8d 76 00             	lea    esi,[esi+0x0]
c0018374:	5b                   	pop    ebx
c0018375:	8d 46 02             	lea    eax,[esi+0x2]
c0018378:	5e                   	pop    esi
c0018379:	5f                   	pop    edi
c001837a:	5d                   	pop    ebp
c001837b:	c3                   	ret    
c001837c:	5b                   	pop    ebx
c001837d:	31 c0                	xor    eax,eax
c001837f:	5e                   	pop    esi
c0018380:	5f                   	pop    edi
c0018381:	5d                   	pop    ebp
c0018382:	c3                   	ret    
c0018383:	90                   	nop
c0018384:	b8 01 00 00 00       	mov    eax,0x1
c0018389:	eb e1                	jmp    c001836c <SoundPort::buffer16(short*, int)+0x6c>
c001838b:	90                   	nop

c001838c <SoundPort::buffer32(int*, int)>:
c001838c:	55                   	push   ebp
c001838d:	57                   	push   edi
c001838e:	56                   	push   esi
c001838f:	53                   	push   ebx
c0018390:	51                   	push   ecx
c0018391:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018399:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001839c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00183a3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183a6:	74 5c                	je     c0018404 <SoundPort::buffer32(int*, int)+0x78>
c00183a8:	85 c0                	test   eax,eax
c00183aa:	7e 58                	jle    c0018404 <SoundPort::buffer32(int*, int)+0x78>
c00183ac:	8d 71 01             	lea    esi,[ecx+0x1]
c00183af:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00183b2:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00183b5:	8b 37                	mov    esi,DWORD PTR [edi]
c00183b7:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00183ba:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183bd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183c0:	74 4a                	je     c001840c <SoundPort::buffer32(int*, int)+0x80>
c00183c2:	31 f6                	xor    esi,esi
c00183c4:	eb 1e                	jmp    c00183e4 <SoundPort::buffer32(int*, int)+0x58>
c00183c6:	66 90                	xchg   ax,ax
c00183c8:	8d 69 01             	lea    ebp,[ecx+0x1]
c00183cb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00183ce:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00183d1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00183d4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00183d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00183db:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00183de:	74 18                	je     c00183f8 <SoundPort::buffer32(int*, int)+0x6c>
c00183e0:	89 de                	mov    esi,ebx
c00183e2:	66 90                	xchg   ax,ax
c00183e4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183e7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183ea:	75 dc                	jne    c00183c8 <SoundPort::buffer32(int*, int)+0x3c>
c00183ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183ef:	90                   	nop
c00183f0:	5a                   	pop    edx
c00183f1:	5b                   	pop    ebx
c00183f2:	5e                   	pop    esi
c00183f3:	5f                   	pop    edi
c00183f4:	5d                   	pop    ebp
c00183f5:	c3                   	ret    
c00183f6:	66 90                	xchg   ax,ax
c00183f8:	5a                   	pop    edx
c00183f9:	8d 46 02             	lea    eax,[esi+0x2]
c00183fc:	5b                   	pop    ebx
c00183fd:	5e                   	pop    esi
c00183fe:	5f                   	pop    edi
c00183ff:	5d                   	pop    ebp
c0018400:	c3                   	ret    
c0018401:	8d 76 00             	lea    esi,[esi+0x0]
c0018404:	5a                   	pop    edx
c0018405:	31 c0                	xor    eax,eax
c0018407:	5b                   	pop    ebx
c0018408:	5e                   	pop    esi
c0018409:	5f                   	pop    edi
c001840a:	5d                   	pop    ebp
c001840b:	c3                   	ret    
c001840c:	b8 01 00 00 00       	mov    eax,0x1
c0018411:	eb dd                	jmp    c00183f0 <SoundPort::buffer32(int*, int)+0x64>
c0018413:	90                   	nop

c0018414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018414:	57                   	push   edi
c0018415:	56                   	push   esi
c0018416:	53                   	push   ebx
c0018417:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001841b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001841f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018425:	39 03                	cmp    DWORD PTR [ebx],eax
c0018427:	74 13                	je     c001843c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018429:	83 ec 0c             	sub    esp,0xc
c001842c:	68 dc f3 01 c0       	push   0xc001f3dc
c0018431:	e8 1d 7d ff ff       	call   c0010153 <KePanic(char const*)>
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	8d 76 00             	lea    esi,[esi+0x0]
c001843c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0018442:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018445:	74 11                	je     c0018458 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018447:	83 ec 0c             	sub    esp,0xc
c001844a:	68 1b f4 01 c0       	push   0xc001f41b
c001844f:	e8 ff 7c ff ff       	call   c0010153 <KePanic(char const*)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	90                   	nop
c0018458:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001845e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018461:	74 11                	je     c0018474 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018463:	83 ec 0c             	sub    esp,0xc
c0018466:	68 1b f4 01 c0       	push   0xc001f41b
c001846b:	e8 e3 7c ff ff       	call   c0010153 <KePanic(char const*)>
c0018470:	83 c4 10             	add    esp,0x10
c0018473:	90                   	nop
c0018474:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018477:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001847b:	7e 07                	jle    c0018484 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001847d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018481:	8d 76 00             	lea    esi,[esi+0x0]
c0018484:	85 f6                	test   esi,esi
c0018486:	7e 2c                	jle    c00184b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018488:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001848c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001848f:	31 c9                	xor    ecx,ecx
c0018491:	01 d7                	add    edi,edx
c0018493:	90                   	nop
c0018494:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018497:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001849a:	85 c0                	test   eax,eax
c001849c:	79 06                	jns    c00184a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001849e:	05 ff 7f 00 00       	add    eax,0x7fff
c00184a3:	90                   	nop
c00184a4:	c1 f8 0f             	sar    eax,0xf
c00184a7:	83 c1 04             	add    ecx,0x4
c00184aa:	66 01 02             	add    WORD PTR [edx],ax
c00184ad:	83 c2 02             	add    edx,0x2
c00184b0:	39 d7                	cmp    edi,edx
c00184b2:	75 e0                	jne    c0018494 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00184b4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00184b7:	50                   	push   eax
c00184b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00184bb:	29 f0                	sub    eax,esi
c00184bd:	c1 e0 02             	shl    eax,0x2
c00184c0:	50                   	push   eax
c00184c1:	8d 04 b2             	lea    eax,[edx+esi*4]
c00184c4:	50                   	push   eax
c00184c5:	52                   	push   edx
c00184c6:	e8 15 7f fe ff       	call   c00003e0 <memmove>
c00184cb:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	89 f0                	mov    eax,esi
c00184d3:	5b                   	pop    ebx
c00184d4:	5e                   	pop    esi
c00184d5:	5f                   	pop    edi
c00184d6:	c3                   	ret    
c00184d7:	90                   	nop

c00184d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00184d8:	57                   	push   edi
c00184d9:	56                   	push   esi
c00184da:	53                   	push   ebx
c00184db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184df:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00184e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184e7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184ed:	39 06                	cmp    DWORD PTR [esi],eax
c00184ef:	74 13                	je     c0018504 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184f1:	83 ec 0c             	sub    esp,0xc
c00184f4:	68 fc f3 01 c0       	push   0xc001f3fc
c00184f9:	e8 55 7c ff ff       	call   c0010153 <KePanic(char const*)>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	8d 76 00             	lea    esi,[esi+0x0]
c0018504:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001850a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001850d:	74 11                	je     c0018520 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001850f:	83 ec 0c             	sub    esp,0xc
c0018512:	68 37 f4 01 c0       	push   0xc001f437
c0018517:	e8 37 7c ff ff       	call   c0010153 <KePanic(char const*)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	90                   	nop
c0018520:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018526:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018529:	74 11                	je     c001853c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001852b:	83 ec 0c             	sub    esp,0xc
c001852e:	68 37 f4 01 c0       	push   0xc001f437
c0018533:	e8 1b 7c ff ff       	call   c0010153 <KePanic(char const*)>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	90                   	nop
c001853c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001853f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0018543:	7e 07                	jle    c001854c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018545:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018549:	8d 76 00             	lea    esi,[esi+0x0]
c001854c:	85 ff                	test   edi,edi
c001854e:	7e 1c                	jle    c001856c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018550:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018557:	31 c0                	xor    eax,eax
c0018559:	8d 76 00             	lea    esi,[esi+0x0]
c001855c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001855f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018562:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018565:	83 c0 04             	add    eax,0x4
c0018568:	39 c1                	cmp    ecx,eax
c001856a:	75 f0                	jne    c001855c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001856c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001856f:	50                   	push   eax
c0018570:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018573:	29 f8                	sub    eax,edi
c0018575:	c1 e0 02             	shl    eax,0x2
c0018578:	50                   	push   eax
c0018579:	8d 04 ba             	lea    eax,[edx+edi*4]
c001857c:	50                   	push   eax
c001857d:	52                   	push   edx
c001857e:	e8 5d 7e fe ff       	call   c00003e0 <memmove>
c0018583:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018586:	83 c4 10             	add    esp,0x10
c0018589:	89 f8                	mov    eax,edi
c001858b:	5b                   	pop    ebx
c001858c:	5e                   	pop    esi
c001858d:	5f                   	pop    edi
c001858e:	c3                   	ret    
c001858f:	90                   	nop

c0018590 <PCI::open(int, int, void*)>:
c0018590:	83 ec 18             	sub    esp,0x18
c0018593:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018597:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001859b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00185a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00185a3:	50                   	push   eax
c00185a4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00185a7:	31 c0                	xor    eax,eax
c00185a9:	83 c4 1c             	add    esp,0x1c
c00185ac:	c3                   	ret    
c00185ad:	90                   	nop

c00185ae <PCI::close(int, int, void*)>:
c00185ae:	31 c0                	xor    eax,eax
c00185b0:	c3                   	ret    
c00185b1:	90                   	nop

c00185b2 <PCI::PCI()>:
c00185b2:	83 ec 0c             	sub    esp,0xc
c00185b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185b9:	83 ec 08             	sub    esp,0x8
c00185bc:	68 53 f4 01 c0       	push   0xc001f453
c00185c1:	50                   	push   eax
c00185c2:	e8 b5 2c ff ff       	call   c000b27c <Bus::Bus(char const*)>
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	ba fc f4 01 c0       	mov    edx,0xc001f4fc
c00185cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d3:	89 10                	mov    DWORD PTR [eax],edx
c00185d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00185e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e7:	a3 c0 49 02 c0       	mov    ds:0xc00249c0,eax
c00185ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185f6:	31 d2                	xor    edx,edx
c00185f8:	88 c2                	mov    dl,al
c00185fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185fe:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018609:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001860f:	31 d2                	xor    edx,edx
c0018611:	88 c2                	mov    dl,al
c0018613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018617:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001861c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018620:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018626:	8d 50 01             	lea    edx,[eax+0x1]
c0018629:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001862d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018633:	31 d2                	xor    edx,edx
c0018635:	88 c2                	mov    dl,al
c0018637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001863b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001863f:	83 c9 c0             	or     ecx,0xffffffc0
c0018642:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018646:	90                   	nop
c0018647:	83 c4 0c             	add    esp,0xc
c001864a:	c3                   	ret    
c001864b:	90                   	nop

c001864c <PCI::readBAR8(unsigned int, int)>:
c001864c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018654:	f6 c2 01             	test   dl,0x1
c0018657:	74 07                	je     c0018660 <PCI::readBAR8(unsigned int, int)+0x14>
c0018659:	83 e2 fc             	and    edx,0xfffffffc
c001865c:	01 c2                	add    edx,eax
c001865e:	ec                   	in     al,dx
c001865f:	c3                   	ret    
c0018660:	83 e2 f0             	and    edx,0xfffffff0
c0018663:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018666:	c3                   	ret    
c0018667:	90                   	nop

c0018668 <PCI::readBAR16(unsigned int, int)>:
c0018668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001866c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018670:	f6 c2 01             	test   dl,0x1
c0018673:	74 08                	je     c001867d <PCI::readBAR16(unsigned int, int)+0x15>
c0018675:	83 e2 fc             	and    edx,0xfffffffc
c0018678:	01 c2                	add    edx,eax
c001867a:	66 ed                	in     ax,dx
c001867c:	c3                   	ret    
c001867d:	83 e2 f0             	and    edx,0xfffffff0
c0018680:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018684:	c3                   	ret    
c0018685:	90                   	nop

c0018686 <PCI::readBAR32(unsigned int, int)>:
c0018686:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001868a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001868e:	f6 c2 01             	test   dl,0x1
c0018691:	74 07                	je     c001869a <PCI::readBAR32(unsigned int, int)+0x14>
c0018693:	83 e2 fc             	and    edx,0xfffffffc
c0018696:	01 c2                	add    edx,eax
c0018698:	ed                   	in     eax,dx
c0018699:	c3                   	ret    
c001869a:	83 e2 f0             	and    edx,0xfffffff0
c001869d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00186a0:	c3                   	ret    
c00186a1:	90                   	nop

c00186a2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00186a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186ae:	f6 c2 01             	test   dl,0x1
c00186b1:	74 07                	je     c00186ba <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00186b3:	83 e2 fc             	and    edx,0xfffffffc
c00186b6:	01 ca                	add    edx,ecx
c00186b8:	ee                   	out    dx,al
c00186b9:	c3                   	ret    
c00186ba:	83 e2 f0             	and    edx,0xfffffff0
c00186bd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00186c0:	c3                   	ret    
c00186c1:	90                   	nop

c00186c2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00186c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186ce:	f6 c2 01             	test   dl,0x1
c00186d1:	74 08                	je     c00186db <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00186d3:	83 e2 fc             	and    edx,0xfffffffc
c00186d6:	01 ca                	add    edx,ecx
c00186d8:	66 ef                	out    dx,ax
c00186da:	c3                   	ret    
c00186db:	83 e2 f0             	and    edx,0xfffffff0
c00186de:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00186e2:	c3                   	ret    
c00186e3:	90                   	nop

c00186e4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186f0:	f6 c2 01             	test   dl,0x1
c00186f3:	74 07                	je     c00186fc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186f5:	83 e2 fc             	and    edx,0xfffffffc
c00186f8:	01 ca                	add    edx,ecx
c00186fa:	ef                   	out    dx,eax
c00186fb:	c3                   	ret    
c00186fc:	83 e2 f0             	and    edx,0xfffffff0
c00186ff:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018702:	c3                   	ret    
c0018703:	90                   	nop

c0018704 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018704:	55                   	push   ebp
c0018705:	57                   	push   edi
c0018706:	56                   	push   esi
c0018707:	53                   	push   ebx
c0018708:	83 ec 0c             	sub    esp,0xc
c001870b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001870f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018713:	89 f0                	mov    eax,esi
c0018715:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018719:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001871d:	3c 07                	cmp    al,0x7
c001871f:	76 10                	jbe    c0018731 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018721:	83 ec 0c             	sub    esp,0xc
c0018724:	68 5b f4 01 c0       	push   0xc001f45b
c0018729:	e8 25 7a ff ff       	call   c0010153 <KePanic(char const*)>
c001872e:	83 c4 10             	add    esp,0x10
c0018731:	80 fb 0f             	cmp    bl,0xf
c0018734:	76 10                	jbe    c0018746 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018736:	83 ec 0c             	sub    esp,0xc
c0018739:	68 8b f4 01 c0       	push   0xc001f48b
c001873e:	e8 10 7a ff ff       	call   c0010153 <KePanic(char const*)>
c0018743:	83 c4 10             	add    esp,0x10
c0018746:	8d 04 36             	lea    eax,[esi+esi*1]
c0018749:	ba f8 0c 00 00       	mov    edx,0xcf8
c001874e:	83 c8 f0             	or     eax,0xfffffff0
c0018751:	ee                   	out    dx,al
c0018752:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018757:	89 e8                	mov    eax,ebp
c0018759:	ee                   	out    dx,al
c001875a:	83 c4 0c             	add    esp,0xc
c001875d:	89 d8                	mov    eax,ebx
c001875f:	66 81 e7 fc 00       	and    di,0xfc
c0018764:	5b                   	pop    ebx
c0018765:	c1 e0 08             	shl    eax,0x8
c0018768:	5e                   	pop    esi
c0018769:	09 f8                	or     eax,edi
c001876b:	5f                   	pop    edi
c001876c:	66 0d 00 c0          	or     ax,0xc000
c0018770:	5d                   	pop    ebp
c0018771:	c3                   	ret    

c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018772:	57                   	push   edi
c0018773:	56                   	push   esi
c0018774:	53                   	push   ebx
c0018775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018779:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001877d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018783:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018787:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001878b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001878f:	83 ff 01             	cmp    edi,0x1
c0018792:	75 3e                	jne    c00187d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018794:	89 de                	mov    esi,ebx
c0018796:	0f b6 c0             	movzx  eax,al
c0018799:	81 e6 fc 00 00 00    	and    esi,0xfc
c001879f:	c1 e0 10             	shl    eax,0x10
c00187a2:	0f b6 c9             	movzx  ecx,cl
c00187a5:	09 f0                	or     eax,esi
c00187a7:	c1 e1 08             	shl    ecx,0x8
c00187aa:	0f b6 d2             	movzx  edx,dl
c00187ad:	09 c8                	or     eax,ecx
c00187af:	c1 e2 0b             	shl    edx,0xb
c00187b2:	09 d0                	or     eax,edx
c00187b4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00187b9:	0d 00 00 00 80       	or     eax,0x80000000
c00187be:	ef                   	out    dx,eax
c00187bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c00187c4:	ed                   	in     eax,dx
c00187c5:	83 e3 02             	and    ebx,0x2
c00187c8:	0f b6 cb             	movzx  ecx,bl
c00187cb:	c1 e1 03             	shl    ecx,0x3
c00187ce:	d3 e8                	shr    eax,cl
c00187d0:	eb 43                	jmp    c0018815 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187d2:	83 ff 02             	cmp    edi,0x2
c00187d5:	75 2c                	jne    c0018803 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00187d7:	83 ec 0c             	sub    esp,0xc
c00187da:	0f b6 c9             	movzx  ecx,cl
c00187dd:	0f b6 d2             	movzx  edx,dl
c00187e0:	0f b6 fb             	movzx  edi,bl
c00187e3:	0f b6 c0             	movzx  eax,al
c00187e6:	57                   	push   edi
c00187e7:	51                   	push   ecx
c00187e8:	52                   	push   edx
c00187e9:	50                   	push   eax
c00187ea:	56                   	push   esi
c00187eb:	e8 14 ff ff ff       	call   c0018704 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f0:	89 c2                	mov    edx,eax
c00187f2:	ed                   	in     eax,dx
c00187f3:	83 e3 02             	and    ebx,0x2
c00187f6:	83 c4 20             	add    esp,0x20
c00187f9:	0f b6 cb             	movzx  ecx,bl
c00187fc:	c1 e1 03             	shl    ecx,0x3
c00187ff:	d3 e8                	shr    eax,cl
c0018801:	eb 12                	jmp    c0018815 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018803:	83 ec 0c             	sub    esp,0xc
c0018806:	68 bb f4 01 c0       	push   0xc001f4bb
c001880b:	e8 43 79 ff ff       	call   c0010153 <KePanic(char const*)>
c0018810:	83 c4 10             	add    esp,0x10
c0018813:	31 c0                	xor    eax,eax
c0018815:	5b                   	pop    ebx
c0018816:	5e                   	pop    esi
c0018817:	5f                   	pop    edi
c0018818:	c3                   	ret    
c0018819:	90                   	nop

c001881a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001881a:	83 ec 18             	sub    esp,0x18
c001881d:	6a 00                	push   0x0
c001881f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018824:	50                   	push   eax
c0018825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001882a:	50                   	push   eax
c001882b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018830:	50                   	push   eax
c0018831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018835:	e8 38 ff ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001883a:	83 c4 2c             	add    esp,0x2c
c001883d:	c3                   	ret    

c001883e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001883e:	83 ec 18             	sub    esp,0x18
c0018841:	6a 0e                	push   0xe
c0018843:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018848:	50                   	push   eax
c0018849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884e:	50                   	push   eax
c001884f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018854:	50                   	push   eax
c0018855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018859:	e8 14 ff ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001885e:	83 c4 2c             	add    esp,0x2c
c0018861:	0f b6 c0             	movzx  eax,al
c0018864:	c3                   	ret    
c0018865:	90                   	nop

c0018866 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018866:	55                   	push   ebp
c0018867:	57                   	push   edi
c0018868:	56                   	push   esi
c0018869:	53                   	push   ebx
c001886a:	83 ec 18             	sub    esp,0x18
c001886d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018872:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018877:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001887c:	6a 0a                	push   0xa
c001887e:	56                   	push   esi
c001887f:	55                   	push   ebp
c0018880:	57                   	push   edi
c0018881:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018885:	e8 e8 fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001888a:	83 c4 14             	add    esp,0x14
c001888d:	89 c3                	mov    ebx,eax
c001888f:	6a 0a                	push   0xa
c0018891:	0f b6 db             	movzx  ebx,bl
c0018894:	56                   	push   esi
c0018895:	55                   	push   ebp
c0018896:	57                   	push   edi
c0018897:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001889b:	e8 d2 fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a0:	83 c4 2c             	add    esp,0x2c
c00188a3:	25 00 ff 00 00       	and    eax,0xff00
c00188a8:	09 d8                	or     eax,ebx
c00188aa:	5b                   	pop    ebx
c00188ab:	5e                   	pop    esi
c00188ac:	5f                   	pop    edi
c00188ad:	5d                   	pop    ebp
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00188b0:	83 ec 18             	sub    esp,0x18
c00188b3:	6a 08                	push   0x8
c00188b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ba:	50                   	push   eax
c00188bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c0:	50                   	push   eax
c00188c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c6:	50                   	push   eax
c00188c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188cb:	e8 a2 fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d0:	83 c4 2c             	add    esp,0x2c
c00188d3:	0f b6 c4             	movzx  eax,ah
c00188d6:	c3                   	ret    
c00188d7:	90                   	nop

c00188d8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00188d8:	83 ec 18             	sub    esp,0x18
c00188db:	6a 08                	push   0x8
c00188dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e2:	50                   	push   eax
c00188e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e8:	50                   	push   eax
c00188e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ee:	50                   	push   eax
c00188ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188f3:	e8 7a fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188f8:	83 c4 2c             	add    esp,0x2c
c00188fb:	c3                   	ret    

c00188fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188fc:	83 ec 18             	sub    esp,0x18
c00188ff:	6a 3c                	push   0x3c
c0018901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018906:	50                   	push   eax
c0018907:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001890c:	50                   	push   eax
c001890d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018912:	50                   	push   eax
c0018913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018917:	e8 56 fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001891c:	83 c4 2c             	add    esp,0x2c
c001891f:	c3                   	ret    

c0018920 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018920:	83 ec 18             	sub    esp,0x18
c0018923:	6a 18                	push   0x18
c0018925:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001892a:	50                   	push   eax
c001892b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018930:	50                   	push   eax
c0018931:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018936:	50                   	push   eax
c0018937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001893b:	e8 32 fe ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018940:	83 c4 2c             	add    esp,0x2c
c0018943:	0f b6 c4             	movzx  eax,ah
c0018946:	c3                   	ret    
c0018947:	90                   	nop

c0018948 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018948:	55                   	push   ebp
c0018949:	57                   	push   edi
c001894a:	56                   	push   esi
c001894b:	53                   	push   ebx
c001894c:	83 ec 28             	sub    esp,0x28
c001894f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018953:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018958:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001895d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018962:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018969:	8d 43 12             	lea    eax,[ebx+0x12]
c001896c:	83 c3 10             	add    ebx,0x10
c001896f:	0f b6 c0             	movzx  eax,al
c0018972:	0f b6 db             	movzx  ebx,bl
c0018975:	50                   	push   eax
c0018976:	51                   	push   ecx
c0018977:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001897b:	57                   	push   edi
c001897c:	55                   	push   ebp
c001897d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018981:	e8 ec fd ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018986:	83 c4 14             	add    esp,0x14
c0018989:	89 c6                	mov    esi,eax
c001898b:	53                   	push   ebx
c001898c:	c1 e6 10             	shl    esi,0x10
c001898f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018993:	51                   	push   ecx
c0018994:	57                   	push   edi
c0018995:	55                   	push   ebp
c0018996:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001899a:	e8 d3 fd ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001899f:	83 c4 3c             	add    esp,0x3c
c00189a2:	0f b7 c0             	movzx  eax,ax
c00189a5:	5b                   	pop    ebx
c00189a6:	09 f0                	or     eax,esi
c00189a8:	5e                   	pop    esi
c00189a9:	5f                   	pop    edi
c00189aa:	5d                   	pop    ebp
c00189ab:	c3                   	ret    

c00189ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00189ac:	55                   	push   ebp
c00189ad:	57                   	push   edi
c00189ae:	56                   	push   esi
c00189af:	53                   	push   ebx
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00189b7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00189bb:	89 f5                	mov    ebp,esi
c00189bd:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00189c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00189cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00189d3:	83 f9 01             	cmp    ecx,0x1
c00189d6:	75 5d                	jne    c0018a35 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00189d8:	0f b6 c8             	movzx  ecx,al
c00189db:	0f b6 d2             	movzx  edx,dl
c00189de:	c1 e1 10             	shl    ecx,0x10
c00189e1:	c1 e2 0b             	shl    edx,0xb
c00189e4:	89 f0                	mov    eax,esi
c00189e6:	25 fc 00 00 00       	and    eax,0xfc
c00189eb:	09 c1                	or     ecx,eax
c00189ed:	89 e8                	mov    eax,ebp
c00189ef:	0f b6 c0             	movzx  eax,al
c00189f2:	c1 e0 08             	shl    eax,0x8
c00189f5:	09 c1                	or     ecx,eax
c00189f7:	09 d1                	or     ecx,edx
c00189f9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189fe:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018a04:	89 c8                	mov    eax,ecx
c0018a06:	ef                   	out    dx,eax
c0018a07:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a0c:	ed                   	in     eax,dx
c0018a0d:	0f b7 db             	movzx  ebx,bx
c0018a10:	83 e6 02             	and    esi,0x2
c0018a13:	74 0a                	je     c0018a1f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018a15:	0f b7 d0             	movzx  edx,ax
c0018a18:	c1 e3 10             	shl    ebx,0x10
c0018a1b:	09 d3                	or     ebx,edx
c0018a1d:	eb 05                	jmp    c0018a24 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018a1f:	66 31 c0             	xor    ax,ax
c0018a22:	09 c3                	or     ebx,eax
c0018a24:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018a29:	89 c8                	mov    eax,ecx
c0018a2b:	ef                   	out    dx,eax
c0018a2c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018a31:	89 d8                	mov    eax,ebx
c0018a33:	eb 41                	jmp    c0018a76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a35:	83 f9 02             	cmp    ecx,0x2
c0018a38:	75 45                	jne    c0018a7f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018a3a:	83 ec 0c             	sub    esp,0xc
c0018a3d:	0f b6 d2             	movzx  edx,dl
c0018a40:	89 f1                	mov    ecx,esi
c0018a42:	0f b6 c0             	movzx  eax,al
c0018a45:	0f b6 f1             	movzx  esi,cl
c0018a48:	89 e9                	mov    ecx,ebp
c0018a4a:	56                   	push   esi
c0018a4b:	0f b6 c9             	movzx  ecx,cl
c0018a4e:	51                   	push   ecx
c0018a4f:	52                   	push   edx
c0018a50:	50                   	push   eax
c0018a51:	57                   	push   edi
c0018a52:	e8 ad fc ff ff       	call   c0018704 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a57:	89 c2                	mov    edx,eax
c0018a59:	ed                   	in     eax,dx
c0018a5a:	83 c4 20             	add    esp,0x20
c0018a5d:	0f b7 db             	movzx  ebx,bx
c0018a60:	f6 c2 02             	test   dl,0x2
c0018a63:	74 0c                	je     c0018a71 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a65:	0f b7 c8             	movzx  ecx,ax
c0018a68:	89 d8                	mov    eax,ebx
c0018a6a:	c1 e0 10             	shl    eax,0x10
c0018a6d:	09 c8                	or     eax,ecx
c0018a6f:	eb 05                	jmp    c0018a76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a71:	66 31 c0             	xor    ax,ax
c0018a74:	09 d8                	or     eax,ebx
c0018a76:	ef                   	out    dx,eax
c0018a77:	83 c4 0c             	add    esp,0xc
c0018a7a:	5b                   	pop    ebx
c0018a7b:	5e                   	pop    esi
c0018a7c:	5f                   	pop    edi
c0018a7d:	5d                   	pop    ebp
c0018a7e:	c3                   	ret    
c0018a7f:	c7 44 24 20 bb f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f4bb
c0018a87:	83 c4 0c             	add    esp,0xc
c0018a8a:	5b                   	pop    ebx
c0018a8b:	5e                   	pop    esi
c0018a8c:	5f                   	pop    edi
c0018a8d:	5d                   	pop    ebp
c0018a8e:	e9 c0 76 ff ff       	jmp    c0010153 <KePanic(char const*)>
c0018a93:	90                   	nop

c0018a94 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a94:	55                   	push   ebp
c0018a95:	57                   	push   edi
c0018a96:	56                   	push   esi
c0018a97:	53                   	push   ebx
c0018a98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a9e:	80 3d cc 49 02 c0 00 	cmp    BYTE PTR ds:0xc00249cc,0x0
c0018aa5:	0f 85 84 00 00 00    	jne    c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018aab:	83 ec 0c             	sub    esp,0xc
c0018aae:	68 14 01 00 00       	push   0x114
c0018ab3:	e8 01 ed fe ff       	call   c00077b9 <malloc>
c0018ab8:	83 c4 0c             	add    esp,0xc
c0018abb:	89 c3                	mov    ebx,eax
c0018abd:	ff 35 10 40 02 c0    	push   DWORD PTR ds:0xc0024010
c0018ac3:	68 c1 f4 01 c0       	push   0xc001f4c1
c0018ac8:	50                   	push   eax
c0018ac9:	e8 90 1f ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0018ace:	5a                   	pop    edx
c0018acf:	59                   	pop    ecx
c0018ad0:	6a 01                	push   0x1
c0018ad2:	53                   	push   ebx
c0018ad3:	e8 46 20 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0018ad8:	83 c4 0c             	add    esp,0xc
c0018adb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018adf:	50                   	push   eax
c0018ae0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ae4:	50                   	push   eax
c0018ae5:	53                   	push   ebx
c0018ae6:	e8 df 22 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0018aeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aef:	40                   	inc    eax
c0018af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0018af3:	e8 c1 ec fe ff       	call   c00077b9 <malloc>
c0018af8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018afc:	a3 c8 49 02 c0       	mov    ds:0xc00249c8,eax
c0018b01:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018b05:	5e                   	pop    esi
c0018b06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018b08:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018b0c:	51                   	push   ecx
c0018b0d:	50                   	push   eax
c0018b0e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b12:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018b16:	53                   	push   ebx
c0018b17:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b1a:	83 c4 14             	add    esp,0x14
c0018b1d:	53                   	push   ebx
c0018b1e:	e8 59 20 ff ff       	call   c000ab7c <File::close()>
c0018b23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	a3 c4 49 02 c0       	mov    ds:0xc00249c4,eax
c0018b2f:	a1 c4 49 02 c0       	mov    eax,ds:0xc00249c4
c0018b34:	8b 15 c8 49 02 c0    	mov    edx,DWORD PTR ds:0xc00249c8
c0018b3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b3d:	31 ff                	xor    edi,edi
c0018b3f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b47:	31 f6                	xor    esi,esi
c0018b49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b4e:	31 db                	xor    ebx,ebx
c0018b50:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b58:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b5d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b64:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b68:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b73:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b76:	0f 8e 6b 01 00 00    	jle    c0018ce7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b7c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b7f:	d4 40                	aam    0x40
c0018b81:	d5 39                	aad    0x39
c0018b83:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b87:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b8b:	d4 40                	aam    0x40
c0018b8d:	d5 39                	aad    0x39
c0018b8f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b93:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b97:	d4 40                	aam    0x40
c0018b99:	d5 39                	aad    0x39
c0018b9b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b9f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018ba3:	d4 40                	aam    0x40
c0018ba5:	d5 39                	aad    0x39
c0018ba7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018bab:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018baf:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018bb3:	3c 56                	cmp    al,0x56
c0018bb5:	74 45                	je     c0018bfc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018bb7:	d4 40                	aam    0x40
c0018bb9:	d5 39                	aad    0x39
c0018bbb:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018bbe:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018bc2:	0f b6 c9             	movzx  ecx,cl
c0018bc5:	c1 e1 04             	shl    ecx,0x4
c0018bc8:	d4 40                	aam    0x40
c0018bca:	d5 39                	aad    0x39
c0018bcc:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bcf:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018bd3:	0f b6 db             	movzx  ebx,bl
c0018bd6:	09 cb                	or     ebx,ecx
c0018bd8:	c1 e3 04             	shl    ebx,0x4
c0018bdb:	d4 40                	aam    0x40
c0018bdd:	d5 39                	aad    0x39
c0018bdf:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018be2:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018be6:	0f b6 c9             	movzx  ecx,cl
c0018be9:	09 cb                	or     ebx,ecx
c0018beb:	c1 e3 04             	shl    ebx,0x4
c0018bee:	89 d9                	mov    ecx,ebx
c0018bf0:	d4 40                	aam    0x40
c0018bf2:	d5 39                	aad    0x39
c0018bf4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bf7:	0f b6 db             	movzx  ebx,bl
c0018bfa:	09 cb                	or     ebx,ecx
c0018bfc:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018c00:	80 f9 44             	cmp    cl,0x44
c0018c03:	74 47                	je     c0018c4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018c05:	88 c8                	mov    al,cl
c0018c07:	d4 40                	aam    0x40
c0018c09:	d5 39                	aad    0x39
c0018c0b:	83 e8 30             	sub    eax,0x30
c0018c0e:	0f b6 e8             	movzx  ebp,al
c0018c11:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018c15:	c1 e5 04             	shl    ebp,0x4
c0018c18:	d4 40                	aam    0x40
c0018c1a:	d5 39                	aad    0x39
c0018c1c:	83 e8 30             	sub    eax,0x30
c0018c1f:	0f b6 f0             	movzx  esi,al
c0018c22:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018c26:	09 ee                	or     esi,ebp
c0018c28:	c1 e6 04             	shl    esi,0x4
c0018c2b:	d4 40                	aam    0x40
c0018c2d:	d5 39                	aad    0x39
c0018c2f:	83 e8 30             	sub    eax,0x30
c0018c32:	0f b6 e8             	movzx  ebp,al
c0018c35:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018c39:	09 ee                	or     esi,ebp
c0018c3b:	c1 e6 04             	shl    esi,0x4
c0018c3e:	89 f5                	mov    ebp,esi
c0018c40:	d4 40                	aam    0x40
c0018c42:	d5 39                	aad    0x39
c0018c44:	83 e8 30             	sub    eax,0x30
c0018c47:	0f b6 f0             	movzx  esi,al
c0018c4a:	09 ee                	or     esi,ebp
c0018c4c:	83 c7 10             	add    edi,0x10
c0018c4f:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c53:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c56:	3c 0a                	cmp    al,0xa
c0018c58:	74 09                	je     c0018c63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c5a:	45                   	inc    ebp
c0018c5b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c5e:	75 16                	jne    c0018c76 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c63:	3c 0a                	cmp    al,0xa
c0018c65:	0f 94 c0             	sete   al
c0018c68:	0f b6 c0             	movzx  eax,al
c0018c6b:	01 c7                	add    edi,eax
c0018c6d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c72:	75 0c                	jne    c0018c80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c74:	eb 15                	jmp    c0018c8b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c76:	47                   	inc    edi
c0018c77:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c7a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c7e:	eb d3                	jmp    c0018c53 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c80:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c85:	0f 85 e8 fe ff ff    	jne    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c8b:	80 f9 44             	cmp    cl,0x44
c0018c8e:	74 0b                	je     c0018c9b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c90:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c95:	0f 85 d8 fe ff ff    	jne    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c9b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c9f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018ca3:	c1 e1 04             	shl    ecx,0x4
c0018ca6:	83 e8 30             	sub    eax,0x30
c0018ca9:	09 c8                	or     eax,ecx
c0018cab:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018caf:	0f 85 be fe ff ff    	jne    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018cb5:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018cb9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cbd:	c1 e1 04             	shl    ecx,0x4
c0018cc0:	83 e8 30             	sub    eax,0x30
c0018cc3:	09 c8                	or     eax,ecx
c0018cc5:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018cc9:	0f 85 a4 fe ff ff    	jne    c0018b73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018ccf:	50                   	push   eax
c0018cd0:	50                   	push   eax
c0018cd1:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cd5:	50                   	push   eax
c0018cd6:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018cdd:	e8 1e 79 fe ff       	call   c0000600 <strcpy>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	eb 15                	jmp    c0018cfc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018ce7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cee:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018cf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cfc:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018d03:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018d09:	5b                   	pop    ebx
c0018d0a:	5e                   	pop    esi
c0018d0b:	5f                   	pop    edi
c0018d0c:	5d                   	pop    ebp
c0018d0d:	c3                   	ret    

c0018d0e <PCI::checkBus(unsigned char)>:
c0018d0e:	56                   	push   esi
c0018d0f:	53                   	push   ebx
c0018d10:	31 f6                	xor    esi,esi
c0018d12:	51                   	push   ecx
c0018d13:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018d17:	0f b6 c3             	movzx  eax,bl
c0018d1a:	52                   	push   edx
c0018d1b:	56                   	push   esi
c0018d1c:	46                   	inc    esi
c0018d1d:	50                   	push   eax
c0018d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d22:	e8 f3 02 00 00       	call   c001901a <PCI::checkDevice(unsigned char, unsigned char)>
c0018d27:	83 c4 10             	add    esp,0x10
c0018d2a:	83 fe 20             	cmp    esi,0x20
c0018d2d:	75 e8                	jne    c0018d17 <PCI::checkBus(unsigned char)+0x9>
c0018d2f:	58                   	pop    eax
c0018d30:	5b                   	pop    ebx
c0018d31:	5e                   	pop    esi
c0018d32:	c3                   	ret    
c0018d33:	90                   	nop

c0018d34 <PCI::foundDevice(PCIDeviceInfo)>:
c0018d34:	55                   	push   ebp
c0018d35:	57                   	push   edi
c0018d36:	56                   	push   esi
c0018d37:	53                   	push   ebx
c0018d38:	83 ec 1c             	sub    esp,0x1c
c0018d3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018d3f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d45:	0f 84 52 01 00 00    	je     c0018e9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d4b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d4f:	66 81 f9 06 04       	cmp    cx,0x406
c0018d54:	75 2c                	jne    c0018d82 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d56:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d5b:	50                   	push   eax
c0018d5c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d61:	50                   	push   eax
c0018d62:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d67:	50                   	push   eax
c0018d68:	56                   	push   esi
c0018d69:	e8 b2 fb ff ff       	call   c0018920 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d72:	0f b6 c0             	movzx  eax,al
c0018d75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d79:	83 c4 2c             	add    esp,0x2c
c0018d7c:	5b                   	pop    ebx
c0018d7d:	5e                   	pop    esi
c0018d7e:	5f                   	pop    edi
c0018d7f:	5d                   	pop    ebp
c0018d80:	eb 8c                	jmp    c0018d0e <PCI::checkBus(unsigned char)>
c0018d82:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d86:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d94:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d98:	88 d3                	mov    bl,dl
c0018d9a:	85 c0                	test   eax,eax
c0018d9c:	74 33                	je     c0018dd1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d9e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018da1:	85 d2                	test   edx,edx
c0018da3:	74 28                	je     c0018dcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018da5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018dab:	31 ef                	xor    edi,ebp
c0018dad:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018db3:	75 18                	jne    c0018dcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018db5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018db9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018dbf:	75 0c                	jne    c0018dcd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018dc1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018dc7:	0f 84 d0 00 00 00    	je     c0018e9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0018dcf:	eb c9                	jmp    c0018d9a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018dd1:	66 81 f9 01 06       	cmp    cx,0x601
c0018dd6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018dda:	75 19                	jne    c0018df5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018ddc:	83 ec 0c             	sub    esp,0xc
c0018ddf:	68 64 01 00 00       	push   0x164
c0018de4:	e8 d0 e9 fe ff       	call   c00077b9 <malloc>
c0018de9:	89 c5                	mov    ebp,eax
c0018deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dee:	e8 47 0e 00 00       	call   c0019c3a <SATABus::SATABus()>
c0018df3:	eb 1e                	jmp    c0018e13 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018df5:	66 81 f9 01 01       	cmp    cx,0x101
c0018dfa:	75 60                	jne    c0018e5c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018dfc:	83 ec 0c             	sub    esp,0xc
c0018dff:	68 70 02 00 00       	push   0x270
c0018e04:	e8 b0 e9 fe ff       	call   c00077b9 <malloc>
c0018e09:	89 c5                	mov    ebp,eax
c0018e0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e0e:	e8 cb 02 00 00       	call   c00190de <IDE::IDE()>
c0018e13:	58                   	pop    eax
c0018e14:	5a                   	pop    edx
c0018e15:	55                   	push   ebp
c0018e16:	56                   	push   esi
c0018e17:	e8 0c 2b ff ff       	call   c000b928 <Device::addChild(Device*)>
c0018e1c:	83 ec 1c             	sub    esp,0x1c
c0018e1f:	b9 09 00 00 00       	mov    ecx,0x9
c0018e24:	fc                   	cld    
c0018e25:	89 e7                	mov    edi,esp
c0018e27:	89 de                	mov    esi,ebx
c0018e29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e2b:	55                   	push   ebp
c0018e2c:	e8 3d 2a ff ff       	call   c000b86e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018e34:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018e38:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018e40:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e48:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e53:	83 c4 4c             	add    esp,0x4c
c0018e56:	5b                   	pop    ebx
c0018e57:	5e                   	pop    esi
c0018e58:	5f                   	pop    edi
c0018e59:	5d                   	pop    ebp
c0018e5a:	ff e0                	jmp    eax
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	68 58 01 00 00       	push   0x158
c0018e64:	e8 50 e9 fe ff       	call   c00077b9 <malloc>
c0018e69:	89 c5                	mov    ebp,eax
c0018e6b:	58                   	pop    eax
c0018e6c:	5a                   	pop    edx
c0018e6d:	68 da f4 01 c0       	push   0xc001f4da
c0018e72:	55                   	push   ebp
c0018e73:	e8 4e 2d ff ff       	call   c000bbc6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018e78:	59                   	pop    ecx
c0018e79:	5f                   	pop    edi
c0018e7a:	55                   	push   ebp
c0018e7b:	56                   	push   esi
c0018e7c:	e8 a7 2a ff ff       	call   c000b928 <Device::addChild(Device*)>
c0018e81:	b9 09 00 00 00       	mov    ecx,0x9
c0018e86:	fc                   	cld    
c0018e87:	89 df                	mov    edi,ebx
c0018e89:	89 de                	mov    esi,ebx
c0018e8b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e8d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e91:	83 c4 2c             	add    esp,0x2c
c0018e94:	5b                   	pop    ebx
c0018e95:	5e                   	pop    esi
c0018e96:	5f                   	pop    edi
c0018e97:	5d                   	pop    ebp
c0018e98:	e9 d1 29 ff ff       	jmp    c000b86e <Device::preOpenPCI(PCIDeviceInfo)>
c0018e9d:	83 c4 1c             	add    esp,0x1c
c0018ea0:	5b                   	pop    ebx
c0018ea1:	5e                   	pop    esi
c0018ea2:	5f                   	pop    edi
c0018ea3:	5d                   	pop    ebp
c0018ea4:	c3                   	ret    
c0018ea5:	90                   	nop

c0018ea6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018ea6:	55                   	push   ebp
c0018ea7:	57                   	push   edi
c0018ea8:	56                   	push   esi
c0018ea9:	53                   	push   ebx
c0018eaa:	83 ec 68             	sub    esp,0x68
c0018ead:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018eb1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018eb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018ebc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018ec3:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ec8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ecc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018ed3:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ed8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018edc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ee1:	6a 0c                	push   0xc
c0018ee3:	57                   	push   edi
c0018ee4:	53                   	push   ebx
c0018ee5:	56                   	push   esi
c0018ee6:	55                   	push   ebp
c0018ee7:	e8 86 f8 ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018eec:	83 c4 20             	add    esp,0x20
c0018eef:	57                   	push   edi
c0018ef0:	53                   	push   ebx
c0018ef1:	56                   	push   esi
c0018ef2:	55                   	push   ebp
c0018ef3:	e8 6e f9 ff ff       	call   c0018866 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ef8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018efd:	57                   	push   edi
c0018efe:	53                   	push   ebx
c0018eff:	56                   	push   esi
c0018f00:	55                   	push   ebp
c0018f01:	e8 f6 f9 ff ff       	call   c00188fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018f06:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018f0a:	83 c4 14             	add    esp,0x14
c0018f0d:	6a 3c                	push   0x3c
c0018f0f:	57                   	push   edi
c0018f10:	53                   	push   ebx
c0018f11:	56                   	push   esi
c0018f12:	55                   	push   ebp
c0018f13:	e8 5a f8 ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f18:	0f b6 c4             	movzx  eax,ah
c0018f1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018f1f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018f23:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018f27:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c0018f2c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018f32:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018f38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018f3c:	83 c4 20             	add    esp,0x20
c0018f3f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f44:	74 30                	je     c0018f76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f46:	31 c0                	xor    eax,eax
c0018f48:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f4c:	7e 28                	jle    c0018f76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f4e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f56:	39 cb                	cmp    ebx,ecx
c0018f58:	75 19                	jne    c0018f73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f5a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f62:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f66:	75 0b                	jne    c0018f73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f68:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f6f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f73:	40                   	inc    eax
c0018f74:	eb d2                	jmp    c0018f48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f76:	31 d2                	xor    edx,edx
c0018f78:	83 ec 0c             	sub    esp,0xc
c0018f7b:	57                   	push   edi
c0018f7c:	53                   	push   ebx
c0018f7d:	56                   	push   esi
c0018f7e:	52                   	push   edx
c0018f7f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f83:	55                   	push   ebp
c0018f84:	e8 bf f9 ff ff       	call   c0018948 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f8d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f91:	42                   	inc    edx
c0018f92:	83 c4 20             	add    esp,0x20
c0018f95:	83 fa 06             	cmp    edx,0x6
c0018f98:	75 de                	jne    c0018f78 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f9a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f9f:	83 ec 0c             	sub    esp,0xc
c0018fa2:	86 e0                	xchg   al,ah
c0018fa4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018fa9:	6a 02                	push   0x2
c0018fab:	57                   	push   edi
c0018fac:	53                   	push   ebx
c0018fad:	56                   	push   esi
c0018fae:	55                   	push   ebp
c0018faf:	e8 be f7 ff ff       	call   c0018772 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018fb4:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018fb9:	83 c4 20             	add    esp,0x20
c0018fbc:	57                   	push   edi
c0018fbd:	53                   	push   ebx
c0018fbe:	56                   	push   esi
c0018fbf:	55                   	push   ebp
c0018fc0:	e8 eb f8 ff ff       	call   c00188b0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018fc5:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018fc9:	57                   	push   edi
c0018fca:	53                   	push   ebx
c0018fcb:	56                   	push   esi
c0018fcc:	55                   	push   ebp
c0018fcd:	e8 48 f8 ff ff       	call   c001881a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fd2:	b9 09 00 00 00       	mov    ecx,0x9
c0018fd7:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018fdc:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018fe0:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fe4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fe8:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fec:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018ff0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018ff4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ff8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018ffc:	83 ec 0c             	sub    esp,0xc
c0018fff:	fc                   	cld    
c0019000:	89 e7                	mov    edi,esp
c0019002:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019006:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019008:	55                   	push   ebp
c0019009:	e8 26 fd ff ff       	call   c0018d34 <PCI::foundDevice(PCIDeviceInfo)>
c001900e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019014:	5b                   	pop    ebx
c0019015:	5e                   	pop    esi
c0019016:	5f                   	pop    edi
c0019017:	5d                   	pop    ebp
c0019018:	c3                   	ret    
c0019019:	90                   	nop

c001901a <PCI::checkDevice(unsigned char, unsigned char)>:
c001901a:	55                   	push   ebp
c001901b:	57                   	push   edi
c001901c:	56                   	push   esi
c001901d:	53                   	push   ebx
c001901e:	83 ec 0c             	sub    esp,0xc
c0019021:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019025:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001902a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001902f:	6a 00                	push   0x0
c0019031:	56                   	push   esi
c0019032:	57                   	push   edi
c0019033:	55                   	push   ebp
c0019034:	e8 e1 f7 ff ff       	call   c001881a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019039:	6a 00                	push   0x0
c001903b:	56                   	push   esi
c001903c:	57                   	push   edi
c001903d:	55                   	push   ebp
c001903e:	e8 63 fe ff ff       	call   c0018ea6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019043:	83 c4 20             	add    esp,0x20
c0019046:	6a 00                	push   0x0
c0019048:	56                   	push   esi
c0019049:	57                   	push   edi
c001904a:	55                   	push   ebp
c001904b:	e8 ee f7 ff ff       	call   c001883e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	84 c0                	test   al,al
c0019055:	79 27                	jns    c001907e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019057:	bb 01 00 00 00       	mov    ebx,0x1
c001905c:	53                   	push   ebx
c001905d:	56                   	push   esi
c001905e:	57                   	push   edi
c001905f:	55                   	push   ebp
c0019060:	e8 b5 f7 ff ff       	call   c001881a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019065:	83 c4 10             	add    esp,0x10
c0019068:	66 40                	inc    ax
c001906a:	74 0c                	je     c0019078 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001906c:	53                   	push   ebx
c001906d:	56                   	push   esi
c001906e:	57                   	push   edi
c001906f:	55                   	push   ebp
c0019070:	e8 31 fe ff ff       	call   c0018ea6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019075:	83 c4 10             	add    esp,0x10
c0019078:	43                   	inc    ebx
c0019079:	83 fb 08             	cmp    ebx,0x8
c001907c:	75 de                	jne    c001905c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001907e:	83 c4 0c             	add    esp,0xc
c0019081:	5b                   	pop    ebx
c0019082:	5e                   	pop    esi
c0019083:	5f                   	pop    edi
c0019084:	5d                   	pop    ebp
c0019085:	c3                   	ret    

c0019086 <PCI::detect()>:
c0019086:	56                   	push   esi
c0019087:	53                   	push   ebx
c0019088:	53                   	push   ebx
c0019089:	31 db                	xor    ebx,ebx
c001908b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001908f:	6a 00                	push   0x0
c0019091:	6a 00                	push   0x0
c0019093:	6a 00                	push   0x0
c0019095:	56                   	push   esi
c0019096:	e8 a3 f7 ff ff       	call   c001883e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	a8 80                	test   al,0x80
c00190a0:	75 21                	jne    c00190c3 <PCI::detect()+0x3d>
c00190a2:	51                   	push   ecx
c00190a3:	51                   	push   ecx
c00190a4:	6a 00                	push   0x0
c00190a6:	56                   	push   esi
c00190a7:	e8 62 fc ff ff       	call   c0018d0e <PCI::checkBus(unsigned char)>
c00190ac:	83 c4 10             	add    esp,0x10
c00190af:	eb 24                	jmp    c00190d5 <PCI::detect()+0x4f>
c00190b1:	52                   	push   edx
c00190b2:	52                   	push   edx
c00190b3:	53                   	push   ebx
c00190b4:	43                   	inc    ebx
c00190b5:	56                   	push   esi
c00190b6:	e8 53 fc ff ff       	call   c0018d0e <PCI::checkBus(unsigned char)>
c00190bb:	83 c4 10             	add    esp,0x10
c00190be:	83 fb 08             	cmp    ebx,0x8
c00190c1:	74 12                	je     c00190d5 <PCI::detect()+0x4f>
c00190c3:	53                   	push   ebx
c00190c4:	6a 00                	push   0x0
c00190c6:	6a 00                	push   0x0
c00190c8:	56                   	push   esi
c00190c9:	e8 4c f7 ff ff       	call   c001881a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00190ce:	83 c4 10             	add    esp,0x10
c00190d1:	66 40                	inc    ax
c00190d3:	74 dc                	je     c00190b1 <PCI::detect()+0x2b>
c00190d5:	58                   	pop    eax
c00190d6:	5b                   	pop    ebx
c00190d7:	5e                   	pop    esi
c00190d8:	c3                   	ret    
c00190d9:	90                   	nop

c00190da <IDE::close(int, int, void*)>:
c00190da:	83 c8 ff             	or     eax,0xffffffff
c00190dd:	c3                   	ret    

c00190de <IDE::IDE()>:
c00190de:	83 ec 0c             	sub    esp,0xc
c00190e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e5:	83 ec 08             	sub    esp,0x8
c00190e8:	68 20 f5 01 c0       	push   0xc001f520
c00190ed:	50                   	push   eax
c00190ee:	e8 79 2b ff ff       	call   c000bc6c <HardDiskController::HardDiskController(char const*)>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	ba b0 f5 01 c0       	mov    edx,0xc001f5b0
c00190fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ff:	89 10                	mov    DWORD PTR [eax],edx
c0019101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019105:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001910c:	90                   	nop
c001910d:	83 c4 0c             	add    esp,0xc
c0019110:	c3                   	ret    
c0019111:	90                   	nop

c0019112 <IDE::prepareInterrupt(unsigned char)>:
c0019112:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019117:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001911b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019123:	c3                   	ret    

c0019124 <selectDrive(unsigned char, unsigned char)>:
c0019124:	c3                   	ret    
c0019125:	90                   	nop

c0019126 <IDE::getBase(unsigned char)>:
c0019126:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001912b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001912f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019137:	c3                   	ret    

c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019138:	55                   	push   ebp
c0019139:	57                   	push   edi
c001913a:	56                   	push   esi
c001913b:	53                   	push   ebx
c001913c:	83 ec 1c             	sub    esp,0x1c
c001913f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019143:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019147:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001914a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001914e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019152:	80 f9 03             	cmp    cl,0x3
c0019155:	77 51                	ja     c00191a8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001915b:	0f b6 f2             	movzx  esi,dl
c001915e:	0f b6 db             	movzx  ebx,bl
c0019161:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019164:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019168:	83 ca 80             	or     edx,0xffffff80
c001916b:	0f b6 d2             	movzx  edx,dl
c001916e:	52                   	push   edx
c001916f:	6a 0c                	push   0xc
c0019171:	56                   	push   esi
c0019172:	57                   	push   edi
c0019173:	e8 c0 ff ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019178:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001917d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019181:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019185:	ee                   	out    dx,al
c0019186:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001918b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001918f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019193:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019197:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001919f:	83 c4 2c             	add    esp,0x2c
c00191a2:	5b                   	pop    ebx
c00191a3:	5e                   	pop    esi
c00191a4:	5f                   	pop    edi
c00191a5:	5d                   	pop    ebp
c00191a6:	eb 90                	jmp    c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191a8:	80 fb 07             	cmp    bl,0x7
c00191ab:	77 12                	ja     c00191bf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00191ad:	0f b6 d2             	movzx  edx,dl
c00191b0:	0f b6 db             	movzx  ebx,bl
c00191b3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00191bb:	89 da                	mov    edx,ebx
c00191bd:	eb 2f                	jmp    c00191ee <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191bf:	80 fb 0d             	cmp    bl,0xd
c00191c2:	77 13                	ja     c00191d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00191c4:	0f b6 d2             	movzx  edx,dl
c00191c7:	0f b6 db             	movzx  ebx,bl
c00191ca:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00191d1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00191d5:	eb 17                	jmp    c00191ee <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00191d7:	80 fb 15             	cmp    bl,0x15
c00191da:	77 13                	ja     c00191ef <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00191dc:	0f b6 d2             	movzx  edx,dl
c00191df:	0f b6 db             	movzx  ebx,bl
c00191e2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191ea:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191ee:	ee                   	out    dx,al
c00191ef:	83 c4 1c             	add    esp,0x1c
c00191f2:	5b                   	pop    ebx
c00191f3:	5e                   	pop    esi
c00191f4:	5f                   	pop    edi
c00191f5:	5d                   	pop    ebp
c00191f6:	c3                   	ret    
c00191f7:	90                   	nop

c00191f8 <IDE::read(unsigned char, unsigned char)>:
c00191f8:	55                   	push   ebp
c00191f9:	57                   	push   edi
c00191fa:	56                   	push   esi
c00191fb:	53                   	push   ebx
c00191fc:	83 ec 1c             	sub    esp,0x1c
c00191ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019203:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019207:	8d 43 f8             	lea    eax,[ebx-0x8]
c001920a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001920e:	3c 03                	cmp    al,0x3
c0019210:	77 43                	ja     c0019255 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019212:	0f b6 f2             	movzx  esi,dl
c0019215:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019218:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001921c:	83 c8 80             	or     eax,0xffffff80
c001921f:	0f b6 c0             	movzx  eax,al
c0019222:	50                   	push   eax
c0019223:	6a 0c                	push   0xc
c0019225:	56                   	push   esi
c0019226:	57                   	push   edi
c0019227:	e8 0c ff ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001922c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019231:	0f b6 c3             	movzx  eax,bl
c0019234:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019238:	ec                   	in     al,dx
c0019239:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001923d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0019242:	52                   	push   edx
c0019243:	6a 0c                	push   0xc
c0019245:	56                   	push   esi
c0019246:	57                   	push   edi
c0019247:	e8 ec fe ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001924c:	83 c4 20             	add    esp,0x20
c001924f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019253:	eb 49                	jmp    c001929e <IDE::read(unsigned char, unsigned char)+0xa6>
c0019255:	80 fb 07             	cmp    bl,0x7
c0019258:	77 12                	ja     c001926c <IDE::read(unsigned char, unsigned char)+0x74>
c001925a:	0f b6 d2             	movzx  edx,dl
c001925d:	0f b6 c3             	movzx  eax,bl
c0019260:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019268:	89 c2                	mov    edx,eax
c001926a:	eb 31                	jmp    c001929d <IDE::read(unsigned char, unsigned char)+0xa5>
c001926c:	80 fb 0d             	cmp    bl,0xd
c001926f:	77 13                	ja     c0019284 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019271:	0f b6 d2             	movzx  edx,dl
c0019274:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001927b:	0f b6 d3             	movzx  edx,bl
c001927e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019282:	eb 19                	jmp    c001929d <IDE::read(unsigned char, unsigned char)+0xa5>
c0019284:	31 c0                	xor    eax,eax
c0019286:	80 fb 15             	cmp    bl,0x15
c0019289:	77 13                	ja     c001929e <IDE::read(unsigned char, unsigned char)+0xa6>
c001928b:	0f b6 d2             	movzx  edx,dl
c001928e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019296:	0f b6 d3             	movzx  edx,bl
c0019299:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001929d:	ec                   	in     al,dx
c001929e:	83 c4 1c             	add    esp,0x1c
c00192a1:	5b                   	pop    ebx
c00192a2:	5e                   	pop    esi
c00192a3:	5f                   	pop    edi
c00192a4:	5d                   	pop    ebp
c00192a5:	c3                   	ret    

c00192a6 <IDE::waitInterrupt(unsigned char)>:
c00192a6:	57                   	push   edi
c00192a7:	56                   	push   esi
c00192a8:	31 f6                	xor    esi,esi
c00192aa:	53                   	push   ebx
c00192ab:	83 ec 10             	sub    esp,0x10
c00192ae:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00192b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00192b6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00192ba:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00192bf:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c00192c6:	84 db                	test   bl,bl
c00192c8:	75 33                	jne    c00192fd <IDE::waitInterrupt(unsigned char)+0x57>
c00192ca:	52                   	push   edx
c00192cb:	6a 0c                	push   0xc
c00192cd:	50                   	push   eax
c00192ce:	57                   	push   edi
c00192cf:	e8 24 ff ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	a8 01                	test   al,0x1
c00192d9:	75 2a                	jne    c0019305 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192db:	f7 c6 04 00 00 00    	test   esi,0x4
c00192e1:	75 12                	jne    c00192f5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192e3:	83 fe 32             	cmp    esi,0x32
c00192e6:	7e 0d                	jle    c00192f5 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	6a 64                	push   0x64
c00192ed:	e8 1a a9 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	83 fe 3c             	cmp    esi,0x3c
c00192f8:	74 0b                	je     c0019305 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192fa:	46                   	inc    esi
c00192fb:	eb bd                	jmp    c00192ba <IDE::waitInterrupt(unsigned char)+0x14>
c00192fd:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019305:	83 c4 10             	add    esp,0x10
c0019308:	88 d8                	mov    al,bl
c001930a:	5b                   	pop    ebx
c001930b:	5e                   	pop    esi
c001930c:	5f                   	pop    edi
c001930d:	c3                   	ret    

c001930e <ideChannel0IRQHandler(regs*, void*)>:
c001930e:	83 ec 10             	sub    esp,0x10
c0019311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019315:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001931c:	6a 07                	push   0x7
c001931e:	6a 00                	push   0x0
c0019320:	50                   	push   eax
c0019321:	e8 d2 fe ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019326:	83 c4 1c             	add    esp,0x1c
c0019329:	c3                   	ret    

c001932a <ideChannel1IRQHandler(regs*, void*)>:
c001932a:	83 ec 10             	sub    esp,0x10
c001932d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019331:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019338:	6a 07                	push   0x7
c001933a:	6a 01                	push   0x1
c001933c:	50                   	push   eax
c001933d:	e8 b6 fe ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019342:	83 c4 1c             	add    esp,0x1c
c0019345:	c3                   	ret    

c0019346 <IDE::enableIRQs(unsigned char, bool)>:
c0019346:	57                   	push   edi
c0019347:	56                   	push   esi
c0019348:	be 04 00 00 00       	mov    esi,0x4
c001934d:	53                   	push   ebx
c001934e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019353:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019357:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001935c:	0f 94 c0             	sete   al
c001935f:	01 c0                	add    eax,eax
c0019361:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019368:	0f b6 c0             	movzx  eax,al
c001936b:	50                   	push   eax
c001936c:	6a 0c                	push   0xc
c001936e:	57                   	push   edi
c001936f:	53                   	push   ebx
c0019370:	e8 c3 fd ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019375:	83 c4 10             	add    esp,0x10
c0019378:	50                   	push   eax
c0019379:	6a 0c                	push   0xc
c001937b:	57                   	push   edi
c001937c:	53                   	push   ebx
c001937d:	e8 76 fe ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019382:	83 c4 10             	add    esp,0x10
c0019385:	4e                   	dec    esi
c0019386:	75 f0                	jne    c0019378 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019388:	5b                   	pop    ebx
c0019389:	5e                   	pop    esi
c001938a:	5f                   	pop    edi
c001938b:	c3                   	ret    

c001938c <IDE::open(int, int, void*)>:
c001938c:	55                   	push   ebp
c001938d:	57                   	push   edi
c001938e:	56                   	push   esi
c001938f:	53                   	push   ebx
c0019390:	83 ec 1c             	sub    esp,0x1c
c0019393:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019397:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00193a0:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00193a9:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00193b0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00193b7:	0f 85 b0 02 00 00    	jne    c001966d <IDE::open(int, int, void*)+0x2e1>
c00193bd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00193c3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00193c7:	83 e0 7f             	and    eax,0x7f
c00193ca:	3c 05                	cmp    al,0x5
c00193cc:	74 04                	je     c00193d2 <IDE::open(int, int, void*)+0x46>
c00193ce:	3c 0f                	cmp    al,0xf
c00193d0:	75 32                	jne    c0019404 <IDE::open(int, int, void*)+0x78>
c00193d2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00193d8:	83 e0 fc             	and    eax,0xfffffffc
c00193db:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00193e2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193e8:	83 e0 fc             	and    eax,0xfffffffc
c00193eb:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193f2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193f8:	83 e0 fc             	and    eax,0xfffffffc
c00193fb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019402:	eb 14                	jmp    c0019418 <IDE::open(int, int, void*)+0x8c>
c0019404:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001940e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019418:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001941f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019426:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001942a:	89 c6                	mov    esi,eax
c001942c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019431:	c1 e6 10             	shl    esi,0x10
c0019434:	89 e8                	mov    eax,ebp
c0019436:	89 fa                	mov    edx,edi
c0019438:	c1 e0 0b             	shl    eax,0xb
c001943b:	09 f0                	or     eax,esi
c001943d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019444:	c1 e6 08             	shl    esi,0x8
c0019447:	09 c6                	or     esi,eax
c0019449:	89 f0                	mov    eax,esi
c001944b:	0d 08 00 00 80       	or     eax,0x80000008
c0019450:	ef                   	out    dx,eax
c0019451:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019456:	89 ca                	mov    edx,ecx
c0019458:	ed                   	in     eax,dx
c0019459:	c1 e8 10             	shr    eax,0x10
c001945c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019461:	0f 84 f5 00 00 00    	je     c001955c <IDE::open(int, int, void*)+0x1d0>
c0019467:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001946d:	89 fa                	mov    edx,edi
c001946f:	89 f0                	mov    eax,esi
c0019471:	ef                   	out    dx,eax
c0019472:	b0 fe                	mov    al,0xfe
c0019474:	89 ca                	mov    edx,ecx
c0019476:	ee                   	out    dx,al
c0019477:	89 f0                	mov    eax,esi
c0019479:	89 fa                	mov    edx,edi
c001947b:	ef                   	out    dx,eax
c001947c:	89 ca                	mov    edx,ecx
c001947e:	ed                   	in     eax,dx
c001947f:	3c fe                	cmp    al,0xfe
c0019481:	0f 85 a9 00 00 00    	jne    c0019530 <IDE::open(int, int, void*)+0x1a4>
c0019487:	8b 15 38 0d 02 c0    	mov    edx,DWORD PTR ds:0xc0020d38
c001948d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019494:	74 33                	je     c00194c9 <IDE::open(int, int, void*)+0x13d>
c0019496:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001949c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00194a0:	40                   	inc    eax
c00194a1:	83 ec 0c             	sub    esp,0xc
c00194a4:	0f b6 c0             	movzx  eax,al
c00194a7:	50                   	push   eax
c00194a8:	55                   	push   ebp
c00194a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194ad:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c00194b3:	51                   	push   ecx
c00194b4:	e8 b3 51 ff ff       	call   c000e66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00194b9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00194be:	83 c4 1c             	add    esp,0x1c
c00194c1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00194c7:	eb 0a                	jmp    c00194d3 <IDE::open(int, int, void*)+0x147>
c00194c9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00194d3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00194da:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00194e1:	c1 e1 10             	shl    ecx,0x10
c00194e4:	c1 e0 08             	shl    eax,0x8
c00194e7:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194ec:	09 c1                	or     ecx,eax
c00194ee:	89 fa                	mov    edx,edi
c00194f0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194f7:	c1 e0 0b             	shl    eax,0xb
c00194fa:	09 c1                	or     ecx,eax
c00194fc:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019502:	89 c8                	mov    eax,ecx
c0019504:	ef                   	out    dx,eax
c0019505:	be fc 0c 00 00       	mov    esi,0xcfc
c001950a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019510:	89 f2                	mov    edx,esi
c0019512:	ee                   	out    dx,al
c0019513:	89 c8                	mov    eax,ecx
c0019515:	89 fa                	mov    edx,edi
c0019517:	ef                   	out    dx,eax
c0019518:	89 f2                	mov    edx,esi
c001951a:	ed                   	in     eax,dx
c001951b:	0f b6 c0             	movzx  eax,al
c001951e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019524:	74 46                	je     c001956c <IDE::open(int, int, void*)+0x1e0>
c0019526:	83 ec 0c             	sub    esp,0xc
c0019529:	68 38 f5 01 c0       	push   0xc001f538
c001952e:	eb 34                	jmp    c0019564 <IDE::open(int, int, void*)+0x1d8>
c0019530:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019539:	75 17                	jne    c0019552 <IDE::open(int, int, void*)+0x1c6>
c001953b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0019540:	74 07                	je     c0019549 <IDE::open(int, int, void*)+0x1bd>
c0019542:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019547:	75 09                	jne    c0019552 <IDE::open(int, int, void*)+0x1c6>
c0019549:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019550:	eb 1a                	jmp    c001956c <IDE::open(int, int, void*)+0x1e0>
c0019552:	83 ec 0c             	sub    esp,0xc
c0019555:	68 40 f5 01 c0       	push   0xc001f540
c001955a:	eb 08                	jmp    c0019564 <IDE::open(int, int, void*)+0x1d8>
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	68 71 f5 01 c0       	push   0xc001f571
c0019564:	e8 ea 6b ff ff       	call   c0010153 <KePanic(char const*)>
c0019569:	83 c4 10             	add    esp,0x10
c001956c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019573:	79 1a                	jns    c001958f <IDE::open(int, int, void*)+0x203>
c0019575:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001957b:	83 e0 fc             	and    eax,0xfffffffc
c001957e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019585:	83 c0 08             	add    eax,0x8
c0019588:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001958f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019595:	89 c2                	mov    edx,eax
c0019597:	83 e2 0f             	and    edx,0xf
c001959a:	66 83 fa 08          	cmp    dx,0x8
c001959e:	75 0a                	jne    c00195aa <IDE::open(int, int, void*)+0x21e>
c00195a0:	83 e8 02             	sub    eax,0x2
c00195a3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195aa:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00195b0:	89 c2                	mov    edx,eax
c00195b2:	83 e2 0f             	and    edx,0xf
c00195b5:	66 83 fa 08          	cmp    dx,0x8
c00195b9:	75 0a                	jne    c00195c5 <IDE::open(int, int, void*)+0x239>
c00195bb:	83 e8 02             	sub    eax,0x2
c00195be:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00195c5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00195cc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00195d3:	89 d0                	mov    eax,edx
c00195d5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195d8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195dc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00195e0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00195e3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195e8:	0f b6 c9             	movzx  ecx,cl
c00195eb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195f2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195f5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195f9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195fd:	8d 50 02             	lea    edx,[eax+0x2]
c0019600:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019605:	0f b6 d2             	movzx  edx,dl
c0019608:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001960e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019611:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019615:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019619:	8d 48 03             	lea    ecx,[eax+0x3]
c001961c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019621:	0f b6 c9             	movzx  ecx,cl
c0019624:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001962a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001962d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019631:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019635:	8d 50 04             	lea    edx,[eax+0x4]
c0019638:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001963e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019643:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001964a:	66 85 f6             	test   si,si
c001964d:	74 5b                	je     c00196aa <IDE::open(int, int, void*)+0x31e>
c001964f:	0f b6 d2             	movzx  edx,dl
c0019652:	83 c0 05             	add    eax,0x5
c0019655:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019658:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001965c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019660:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019666:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001966b:	eb 3d                	jmp    c00196aa <IDE::open(int, int, void*)+0x31e>
c001966d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019673:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001967a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019681:	66 05 06 02          	add    ax,0x206
c0019685:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001968c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019693:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001969a:	66 05 06 02          	add    ax,0x206
c001969e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00196a5:	e9 e5 fe ff ff       	jmp    c001958f <IDE::open(int, int, void*)+0x203>
c00196aa:	50                   	push   eax
c00196ab:	50                   	push   eax
c00196ac:	6a 00                	push   0x0
c00196ae:	53                   	push   ebx
c00196af:	e8 5e fa ff ff       	call   c0019112 <IDE::prepareInterrupt(unsigned char)>
c00196b4:	5a                   	pop    edx
c00196b5:	59                   	pop    ecx
c00196b6:	6a 01                	push   0x1
c00196b8:	53                   	push   ebx
c00196b9:	e8 54 fa ff ff       	call   c0019112 <IDE::prepareInterrupt(unsigned char)>
c00196be:	83 c4 0c             	add    esp,0xc
c00196c1:	6a 00                	push   0x0
c00196c3:	6a 00                	push   0x0
c00196c5:	53                   	push   ebx
c00196c6:	e8 7b fc ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c00196cb:	83 c4 0c             	add    esp,0xc
c00196ce:	6a 00                	push   0x0
c00196d0:	6a 01                	push   0x1
c00196d2:	53                   	push   ebx
c00196d3:	e8 6e fc ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00196e2:	74 34                	je     c0019718 <IDE::open(int, int, void*)+0x38c>
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	53                   	push   ebx
c00196e8:	6a 01                	push   0x1
c00196ea:	68 0e 93 01 c0       	push   0xc001930e
c00196ef:	6a 0e                	push   0xe
c00196f1:	53                   	push   ebx
c00196f2:	e8 dd 21 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196f7:	83 c4 14             	add    esp,0x14
c00196fa:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019700:	53                   	push   ebx
c0019701:	6a 01                	push   0x1
c0019703:	68 2a 93 01 c0       	push   0xc001932a
c0019708:	6a 0f                	push   0xf
c001970a:	53                   	push   ebx
c001970b:	e8 c4 21 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019710:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019716:	eb 38                	jmp    c0019750 <IDE::open(int, int, void*)+0x3c4>
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019725:	53                   	push   ebx
c0019726:	6a 00                	push   0x0
c0019728:	68 0e 93 01 c0       	push   0xc001930e
c001972d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019733:	53                   	push   ebx
c0019734:	e8 9b 21 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019739:	83 c4 14             	add    esp,0x14
c001973c:	53                   	push   ebx
c001973d:	6a 00                	push   0x0
c001973f:	68 2a 93 01 c0       	push   0xc001932a
c0019744:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001974a:	53                   	push   ebx
c001974b:	e8 84 21 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019750:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019752:	83 c4 20             	add    esp,0x20
c0019755:	83 ec 0c             	sub    esp,0xc
c0019758:	53                   	push   ebx
c0019759:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001975c:	83 c4 0c             	add    esp,0xc
c001975f:	6a 07                	push   0x7
c0019761:	6a 00                	push   0x0
c0019763:	53                   	push   ebx
c0019764:	e8 8f fa ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019769:	83 c4 0c             	add    esp,0xc
c001976c:	6a 07                	push   0x7
c001976e:	6a 01                	push   0x1
c0019770:	53                   	push   ebx
c0019771:	e8 82 fa ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019776:	83 c4 0c             	add    esp,0xc
c0019779:	6a 01                	push   0x1
c001977b:	6a 00                	push   0x0
c001977d:	53                   	push   ebx
c001977e:	e8 c3 fb ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c0019783:	83 c4 0c             	add    esp,0xc
c0019786:	6a 01                	push   0x1
c0019788:	6a 01                	push   0x1
c001978a:	53                   	push   ebx
c001978b:	e8 b6 fb ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c0019790:	83 c4 2c             	add    esp,0x2c
c0019793:	31 c0                	xor    eax,eax
c0019795:	5b                   	pop    ebx
c0019796:	5e                   	pop    esi
c0019797:	5f                   	pop    edi
c0019798:	5d                   	pop    ebp
c0019799:	c3                   	ret    

c001979a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001979a:	55                   	push   ebp
c001979b:	57                   	push   edi
c001979c:	56                   	push   esi
c001979d:	53                   	push   ebx
c001979e:	83 ec 1c             	sub    esp,0x1c
c00197a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00197a9:	8d 50 f8             	lea    edx,[eax-0x8]
c00197ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00197b0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00197b4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00197b8:	80 fa 03             	cmp    dl,0x3
c00197bb:	77 5d                	ja     c001981a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00197bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197c5:	0f b6 db             	movzx  ebx,bl
c00197c8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00197cb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00197cf:	83 ca 80             	or     edx,0xffffff80
c00197d2:	0f b6 d2             	movzx  edx,dl
c00197d5:	52                   	push   edx
c00197d6:	6a 0c                	push   0xc
c00197d8:	53                   	push   ebx
c00197d9:	56                   	push   esi
c00197da:	e8 59 f9 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197df:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197ec:	0f b6 c0             	movzx  eax,al
c00197ef:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197f5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197fa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019802:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019806:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001980e:	83 c4 2c             	add    esp,0x2c
c0019811:	5b                   	pop    ebx
c0019812:	5e                   	pop    esi
c0019813:	5f                   	pop    edi
c0019814:	5d                   	pop    ebp
c0019815:	e9 1e f9 ff ff       	jmp    c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001981a:	3c 07                	cmp    al,0x7
c001981c:	77 10                	ja     c001982e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001981e:	0f b6 db             	movzx  ebx,bl
c0019821:	0f b6 d0             	movzx  edx,al
c0019824:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001982c:	eb 2d                	jmp    c001985b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001982e:	3c 0d                	cmp    al,0xd
c0019830:	77 13                	ja     c0019845 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019832:	0f b6 db             	movzx  ebx,bl
c0019835:	0f b6 c0             	movzx  eax,al
c0019838:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001983f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0019843:	eb 16                	jmp    c001985b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019845:	3c 15                	cmp    al,0x15
c0019847:	77 14                	ja     c001985d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019849:	0f b6 db             	movzx  ebx,bl
c001984c:	0f b6 c0             	movzx  eax,al
c001984f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019857:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001985b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001985d:	83 c4 1c             	add    esp,0x1c
c0019860:	5b                   	pop    ebx
c0019861:	5e                   	pop    esi
c0019862:	5f                   	pop    edi
c0019863:	5d                   	pop    ebp
c0019864:	c3                   	ret    
c0019865:	90                   	nop

c0019866 <IDE::detect()>:
c0019866:	55                   	push   ebp
c0019867:	57                   	push   edi
c0019868:	56                   	push   esi
c0019869:	53                   	push   ebx
c001986a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019870:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019877:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001987e:	0f 85 97 02 00 00    	jne    c0019b1b <IDE::detect()+0x2b5>
c0019884:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001988b:	31 f6                	xor    esi,esi
c001988d:	31 ed                	xor    ebp,ebp
c001988f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019897:	89 e8                	mov    eax,ebp
c0019899:	c1 e0 06             	shl    eax,0x6
c001989c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00198a4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00198a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00198ac:	c1 e0 04             	shl    eax,0x4
c00198af:	83 c8 a0             	or     eax,0xffffffa0
c00198b2:	0f b6 c0             	movzx  eax,al
c00198b5:	50                   	push   eax
c00198b6:	6a 06                	push   0x6
c00198b8:	56                   	push   esi
c00198b9:	53                   	push   ebx
c00198ba:	e8 79 f8 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198bf:	83 c4 0c             	add    esp,0xc
c00198c2:	6a 0c                	push   0xc
c00198c4:	56                   	push   esi
c00198c5:	53                   	push   ebx
c00198c6:	e8 2d f9 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c00198cb:	83 c4 0c             	add    esp,0xc
c00198ce:	6a 0c                	push   0xc
c00198d0:	56                   	push   esi
c00198d1:	53                   	push   ebx
c00198d2:	e8 21 f9 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c00198d7:	83 c4 0c             	add    esp,0xc
c00198da:	6a 0c                	push   0xc
c00198dc:	56                   	push   esi
c00198dd:	53                   	push   ebx
c00198de:	e8 15 f9 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c00198e3:	83 c4 0c             	add    esp,0xc
c00198e6:	6a 0c                	push   0xc
c00198e8:	56                   	push   esi
c00198e9:	53                   	push   ebx
c00198ea:	e8 09 f9 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c00198ef:	68 ec 00 00 00       	push   0xec
c00198f4:	6a 07                	push   0x7
c00198f6:	56                   	push   esi
c00198f7:	53                   	push   ebx
c00198f8:	e8 3b f8 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198fd:	83 c4 1c             	add    esp,0x1c
c0019900:	6a 0c                	push   0xc
c0019902:	56                   	push   esi
c0019903:	53                   	push   ebx
c0019904:	e8 ef f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019909:	83 c4 0c             	add    esp,0xc
c001990c:	6a 0c                	push   0xc
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	e8 e3 f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019915:	83 c4 0c             	add    esp,0xc
c0019918:	6a 0c                	push   0xc
c001991a:	56                   	push   esi
c001991b:	53                   	push   ebx
c001991c:	e8 d7 f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019921:	83 c4 0c             	add    esp,0xc
c0019924:	6a 0c                	push   0xc
c0019926:	56                   	push   esi
c0019927:	53                   	push   ebx
c0019928:	e8 cb f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c001992d:	83 c4 0c             	add    esp,0xc
c0019930:	6a 0c                	push   0xc
c0019932:	56                   	push   esi
c0019933:	53                   	push   ebx
c0019934:	e8 bf f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019939:	83 c4 10             	add    esp,0x10
c001993c:	84 c0                	test   al,al
c001993e:	0f 84 5f 01 00 00    	je     c0019aa3 <IDE::detect()+0x23d>
c0019944:	31 ff                	xor    edi,edi
c0019946:	50                   	push   eax
c0019947:	6a 0c                	push   0xc
c0019949:	56                   	push   esi
c001994a:	53                   	push   ebx
c001994b:	e8 a8 f8 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	a8 01                	test   al,0x1
c0019955:	0f 85 69 01 00 00    	jne    c0019ac4 <IDE::detect()+0x25e>
c001995b:	84 c0                	test   al,al
c001995d:	78 04                	js     c0019963 <IDE::detect()+0xfd>
c001995f:	a8 08                	test   al,0x8
c0019961:	75 23                	jne    c0019986 <IDE::detect()+0x120>
c0019963:	47                   	inc    edi
c0019964:	81 ff 17 01 00 00    	cmp    edi,0x117
c001996a:	7e da                	jle    c0019946 <IDE::detect()+0xe0>
c001996c:	83 ec 0c             	sub    esp,0xc
c001996f:	6a 32                	push   0x32
c0019971:	e8 96 a2 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c0019976:	83 c4 10             	add    esp,0x10
c0019979:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001997f:	75 c5                	jne    c0019946 <IDE::detect()+0xe0>
c0019981:	e9 3e 01 00 00       	jmp    c0019ac4 <IDE::detect()+0x25e>
c0019986:	31 c9                	xor    ecx,ecx
c0019988:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001998c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	68 80 00 00 00       	push   0x80
c0019998:	57                   	push   edi
c0019999:	6a 00                	push   0x0
c001999b:	56                   	push   esi
c001999c:	53                   	push   ebx
c001999d:	e8 f8 fd ff ff       	call   c001979a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00199a2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00199a7:	89 e8                	mov    eax,ebp
c00199a9:	89 d1                	mov    ecx,edx
c00199ab:	c1 e0 06             	shl    eax,0x6
c00199ae:	01 d8                	add    eax,ebx
c00199b0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00199b7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00199be:	89 f2                	mov    edx,esi
c00199c0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00199c6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00199ca:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00199d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00199d4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00199db:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00199e3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199ea:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199f2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199f8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199ff:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019a05:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019a09:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019a0d:	83 c4 20             	add    esp,0x20
c0019a10:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019a13:	83 c0 02             	add    eax,0x2
c0019a16:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019a1c:	83 c7 02             	add    edi,0x2
c0019a1f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019a22:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019a28:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019a2c:	75 e2                	jne    c0019a10 <IDE::detect()+0x1aa>
c0019a2e:	89 e8                	mov    eax,ebp
c0019a30:	c1 e0 06             	shl    eax,0x6
c0019a33:	01 d8                	add    eax,ebx
c0019a35:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019a3b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0019a42:	66 c1 ea 09          	shr    dx,0x9
c0019a46:	83 e2 01             	and    edx,0x1
c0019a49:	84 c9                	test   cl,cl
c0019a4b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a51:	75 22                	jne    c0019a75 <IDE::detect()+0x20f>
c0019a53:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a5a:	74 46                	je     c0019aa2 <IDE::detect()+0x23c>
c0019a5c:	83 ec 0c             	sub    esp,0xc
c0019a5f:	68 7c 01 00 00       	push   0x17c
c0019a64:	e8 50 dd fe ff       	call   c00077b9 <malloc>
c0019a69:	89 c7                	mov    edi,eax
c0019a6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a6e:	e8 11 05 00 00       	call   c0019f84 <ATA::ATA()>
c0019a73:	eb 17                	jmp    c0019a8c <IDE::detect()+0x226>
c0019a75:	83 ec 0c             	sub    esp,0xc
c0019a78:	68 84 01 00 00       	push   0x184
c0019a7d:	e8 37 dd fe ff       	call   c00077b9 <malloc>
c0019a82:	89 c7                	mov    edi,eax
c0019a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a87:	e8 f0 0a 00 00       	call   c001a57c <ATAPI::ATAPI()>
c0019a8c:	5a                   	pop    edx
c0019a8d:	59                   	pop    ecx
c0019a8e:	57                   	push   edi
c0019a8f:	53                   	push   ebx
c0019a90:	e8 93 1e ff ff       	call   c000b928 <Device::addChild(Device*)>
c0019a95:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a97:	53                   	push   ebx
c0019a98:	55                   	push   ebp
c0019a99:	6a 00                	push   0x0
c0019a9b:	57                   	push   edi
c0019a9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a9f:	83 c4 20             	add    esp,0x20
c0019aa2:	45                   	inc    ebp
c0019aa3:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019aa8:	74 0d                	je     c0019ab7 <IDE::detect()+0x251>
c0019aaa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019ab2:	e9 e0 fd ff ff       	jmp    c0019897 <IDE::detect()+0x31>
c0019ab7:	4e                   	dec    esi
c0019ab8:	74 61                	je     c0019b1b <IDE::detect()+0x2b5>
c0019aba:	be 01 00 00 00       	mov    esi,0x1
c0019abf:	e9 cb fd ff ff       	jmp    c001988f <IDE::detect()+0x29>
c0019ac4:	50                   	push   eax
c0019ac5:	6a 04                	push   0x4
c0019ac7:	56                   	push   esi
c0019ac8:	53                   	push   ebx
c0019ac9:	e8 2a f7 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019ace:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019ad2:	83 c4 0c             	add    esp,0xc
c0019ad5:	6a 05                	push   0x5
c0019ad7:	56                   	push   esi
c0019ad8:	53                   	push   ebx
c0019ad9:	e8 1a f7 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019ade:	83 c4 10             	add    esp,0x10
c0019ae1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019ae5:	80 fa 14             	cmp    dl,0x14
c0019ae8:	75 04                	jne    c0019aee <IDE::detect()+0x288>
c0019aea:	3c eb                	cmp    al,0xeb
c0019aec:	eb 07                	jmp    c0019af5 <IDE::detect()+0x28f>
c0019aee:	3c 96                	cmp    al,0x96
c0019af0:	75 b1                	jne    c0019aa3 <IDE::detect()+0x23d>
c0019af2:	80 fa 69             	cmp    dl,0x69
c0019af5:	75 ac                	jne    c0019aa3 <IDE::detect()+0x23d>
c0019af7:	68 a1 00 00 00       	push   0xa1
c0019afc:	6a 07                	push   0x7
c0019afe:	56                   	push   esi
c0019aff:	53                   	push   ebx
c0019b00:	e8 33 f6 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b05:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019b0c:	e8 fb a0 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	b1 01                	mov    cl,0x1
c0019b16:	e9 6d fe ff ff       	jmp    c0019988 <IDE::detect()+0x122>
c0019b1b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019b21:	5b                   	pop    ebx
c0019b22:	5e                   	pop    esi
c0019b23:	5f                   	pop    edi
c0019b24:	5d                   	pop    ebp
c0019b25:	c3                   	ret    

c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019b26:	55                   	push   ebp
c0019b27:	57                   	push   edi
c0019b28:	56                   	push   esi
c0019b29:	53                   	push   ebx
c0019b2a:	83 ec 1c             	sub    esp,0x1c
c0019b2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b35:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019b39:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019b3d:	88 c3                	mov    bl,al
c0019b3f:	84 c0                	test   al,al
c0019b41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b45:	0f 84 81 00 00 00    	je     c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	68 9b f5 01 c0       	push   0xc001f59b
c0019b53:	e8 90 09 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0019b58:	83 c4 10             	add    esp,0x10
c0019b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b5f:	3c 01                	cmp    al,0x1
c0019b61:	74 63                	je     c0019bc6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b63:	3c 02                	cmp    al,0x2
c0019b65:	75 53                	jne    c0019bba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b67:	01 f6                	add    esi,esi
c0019b69:	09 ee                	or     esi,ebp
c0019b6b:	50                   	push   eax
c0019b6c:	89 f0                	mov    eax,esi
c0019b6e:	6a 01                	push   0x1
c0019b70:	0f b6 f0             	movzx  esi,al
c0019b73:	c1 e6 06             	shl    esi,0x6
c0019b76:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b7e:	50                   	push   eax
c0019b7f:	57                   	push   edi
c0019b80:	e8 73 f6 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	a8 01                	test   al,0x1
c0019b8a:	74 02                	je     c0019b8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b8c:	b3 07                	mov    bl,0x7
c0019b8e:	a8 02                	test   al,0x2
c0019b90:	74 02                	je     c0019b94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b92:	b3 03                	mov    bl,0x3
c0019b94:	a8 04                	test   al,0x4
c0019b96:	74 02                	je     c0019b9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b98:	b3 14                	mov    bl,0x14
c0019b9a:	a8 08                	test   al,0x8
c0019b9c:	74 02                	je     c0019ba0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b9e:	b3 03                	mov    bl,0x3
c0019ba0:	a8 10                	test   al,0x10
c0019ba2:	74 02                	je     c0019ba6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019ba4:	b3 15                	mov    bl,0x15
c0019ba6:	a8 20                	test   al,0x20
c0019ba8:	74 02                	je     c0019bac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019baa:	b3 03                	mov    bl,0x3
c0019bac:	a8 40                	test   al,0x40
c0019bae:	74 02                	je     c0019bb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019bb0:	b3 16                	mov    bl,0x16
c0019bb2:	84 c0                	test   al,al
c0019bb4:	79 16                	jns    c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bb6:	b3 0d                	mov    bl,0xd
c0019bb8:	eb 12                	jmp    c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bba:	3c 03                	cmp    al,0x3
c0019bbc:	74 0c                	je     c0019bca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019bbe:	3c 04                	cmp    al,0x4
c0019bc0:	75 0a                	jne    c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bc2:	b3 08                	mov    bl,0x8
c0019bc4:	eb 06                	jmp    c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bc6:	b3 13                	mov    bl,0x13
c0019bc8:	eb 02                	jmp    c0019bcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019bca:	b3 17                	mov    bl,0x17
c0019bcc:	83 c4 1c             	add    esp,0x1c
c0019bcf:	88 d8                	mov    al,bl
c0019bd1:	5b                   	pop    ebx
c0019bd2:	5e                   	pop    esi
c0019bd3:	5f                   	pop    edi
c0019bd4:	5d                   	pop    ebp
c0019bd5:	c3                   	ret    

c0019bd6 <IDE::polling(unsigned char, unsigned int)>:
c0019bd6:	55                   	push   ebp
c0019bd7:	bd 04 00 00 00       	mov    ebp,0x4
c0019bdc:	57                   	push   edi
c0019bdd:	56                   	push   esi
c0019bde:	53                   	push   ebx
c0019bdf:	83 ec 0c             	sub    esp,0xc
c0019be2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019be6:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019bea:	0f b6 f3             	movzx  esi,bl
c0019bed:	52                   	push   edx
c0019bee:	6a 0c                	push   0xc
c0019bf0:	56                   	push   esi
c0019bf1:	57                   	push   edi
c0019bf2:	e8 01 f6 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019bf7:	83 c4 10             	add    esp,0x10
c0019bfa:	4d                   	dec    ebp
c0019bfb:	75 ed                	jne    c0019bea <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bfd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019c02:	50                   	push   eax
c0019c03:	6a 0c                	push   0xc
c0019c05:	56                   	push   esi
c0019c06:	57                   	push   edi
c0019c07:	e8 ec f5 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c0019c0c:	83 c4 10             	add    esp,0x10
c0019c0f:	a8 01                	test   al,0x1
c0019c11:	75 17                	jne    c0019c2a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c13:	a8 20                	test   al,0x20
c0019c15:	75 0f                	jne    c0019c26 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019c17:	4b                   	dec    ebx
c0019c18:	74 10                	je     c0019c2a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019c1a:	84 c0                	test   al,al
c0019c1c:	78 e4                	js     c0019c02 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c1e:	a8 08                	test   al,0x8
c0019c20:	74 e0                	je     c0019c02 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019c22:	31 c0                	xor    eax,eax
c0019c24:	eb 06                	jmp    c0019c2c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c26:	b0 01                	mov    al,0x1
c0019c28:	eb 02                	jmp    c0019c2c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019c2a:	b0 02                	mov    al,0x2
c0019c2c:	83 c4 0c             	add    esp,0xc
c0019c2f:	5b                   	pop    ebx
c0019c30:	5e                   	pop    esi
c0019c31:	5f                   	pop    edi
c0019c32:	5d                   	pop    ebp
c0019c33:	c3                   	ret    

c0019c34 <SATABus::close(int, int, void*)>:
c0019c34:	31 c0                	xor    eax,eax
c0019c36:	c3                   	ret    
c0019c37:	90                   	nop

c0019c38 <SATABus::detect()>:
c0019c38:	c3                   	ret    
c0019c39:	90                   	nop

c0019c3a <SATABus::SATABus()>:
c0019c3a:	83 ec 0c             	sub    esp,0xc
c0019c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c41:	83 ec 08             	sub    esp,0x8
c0019c44:	68 d4 f5 01 c0       	push   0xc001f5d4
c0019c49:	50                   	push   eax
c0019c4a:	e8 1d 20 ff ff       	call   c000bc6c <HardDiskController::HardDiskController(char const*)>
c0019c4f:	83 c4 10             	add    esp,0x10
c0019c52:	ba 00 f6 01 c0       	mov    edx,0xc001f600
c0019c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c5b:	89 10                	mov    DWORD PTR [eax],edx
c0019c5d:	83 ec 0c             	sub    esp,0xc
c0019c60:	6a 50                	push   0x50
c0019c62:	e8 fc de fe ff       	call   c0007b63 <Phys::allocateContiguousPages(int)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	89 c2                	mov    edx,eax
c0019c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c76:	83 ec 0c             	sub    esp,0xc
c0019c79:	6a 50                	push   0x50
c0019c7b:	e8 15 f6 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0019c80:	83 c4 10             	add    esp,0x10
c0019c83:	89 c2                	mov    edx,eax
c0019c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c8f:	a1 30 0e 02 c0       	mov    eax,ds:0xc0020e30
c0019c94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c98:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ca2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019ca8:	83 ec 0c             	sub    esp,0xc
c0019cab:	6a 03                	push   0x3
c0019cad:	6a 50                	push   0x50
c0019caf:	51                   	push   ecx
c0019cb0:	52                   	push   edx
c0019cb1:	50                   	push   eax
c0019cb2:	e8 6d ff fe ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019cb7:	83 c4 20             	add    esp,0x20
c0019cba:	90                   	nop
c0019cbb:	83 c4 0c             	add    esp,0xc
c0019cbe:	c3                   	ret    
c0019cbf:	90                   	nop

c0019cc0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cc4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019cca:	09 c2                	or     edx,eax
c0019ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019cd6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019cd8:	31 c0                	xor    eax,eax
c0019cda:	c1 e9 08             	shr    ecx,0x8
c0019cdd:	83 e1 0f             	and    ecx,0xf
c0019ce0:	39 c8                	cmp    eax,ecx
c0019ce2:	74 0a                	je     c0019cee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019ce4:	f6 c2 01             	test   dl,0x1
c0019ce7:	74 08                	je     c0019cf1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019ce9:	d1 ea                	shr    edx,1
c0019ceb:	40                   	inc    eax
c0019cec:	eb f2                	jmp    c0019ce0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019cee:	83 c8 ff             	or     eax,0xffffffff
c0019cf1:	c3                   	ret    

c0019cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cf6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019cf9:	89 c2                	mov    edx,eax
c0019cfb:	c1 ea 08             	shr    edx,0x8
c0019cfe:	83 e2 0f             	and    edx,0xf
c0019d01:	fe ca                	dec    dl
c0019d03:	75 31                	jne    c0019d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d05:	83 e0 0f             	and    eax,0xf
c0019d08:	3c 03                	cmp    al,0x3
c0019d0a:	75 2a                	jne    c0019d36 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019d0c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019d0f:	b8 02 00 00 00       	mov    eax,0x2
c0019d14:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019d1a:	74 1c                	je     c0019d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d1c:	b8 04 00 00 00       	mov    eax,0x4
c0019d21:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019d27:	74 0f                	je     c0019d38 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019d29:	31 c0                	xor    eax,eax
c0019d2b:	83 fa 03             	cmp    edx,0x3
c0019d2e:	0f 94 c0             	sete   al
c0019d31:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019d35:	c3                   	ret    
c0019d36:	31 c0                	xor    eax,eax
c0019d38:	c3                   	ret    
c0019d39:	90                   	nop

c0019d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d3e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d41:	0f ba e2 0f          	bt     edx,0xf
c0019d45:	72 f7                	jb     c0019d3e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d47:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d4a:	83 ca 10             	or     edx,0x10
c0019d4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d53:	83 ca 01             	or     edx,0x1
c0019d56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d59:	c3                   	ret    

c0019d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d61:	83 e2 fe             	and    edx,0xfffffffe
c0019d64:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d67:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d6a:	83 e2 ef             	and    edx,0xffffffef
c0019d6d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d73:	0f ba e2 0e          	bt     edx,0xe
c0019d77:	72 f7                	jb     c0019d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d79:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d7c:	0f ba e2 0f          	bt     edx,0xf
c0019d80:	72 ee                	jb     c0019d70 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d82:	c3                   	ret    
c0019d83:	90                   	nop

c0019d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d84:	55                   	push   ebp
c0019d85:	57                   	push   edi
c0019d86:	56                   	push   esi
c0019d87:	53                   	push   ebx
c0019d88:	83 ec 1c             	sub    esp,0x1c
c0019d8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d8f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d93:	53                   	push   ebx
c0019d94:	56                   	push   esi
c0019d95:	e8 c0 ff ff ff       	call   c0019d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d9a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d9e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019da4:	83 ec 0c             	sub    esp,0xc
c0019da7:	c1 e5 0a             	shl    ebp,0xa
c0019daa:	01 e8                	add    eax,ebp
c0019dac:	89 03                	mov    DWORD PTR [ebx],eax
c0019dae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019db0:	68 00 04 00 00       	push   0x400
c0019db5:	6a 00                	push   0x0
c0019db7:	50                   	push   eax
c0019db8:	e8 13 67 fe ff       	call   c00004d0 <memset>
c0019dbd:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019dc3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019dc7:	01 e8                	add    eax,ebp
c0019dc9:	83 c4 1c             	add    esp,0x1c
c0019dcc:	89 03                	mov    DWORD PTR [ebx],eax
c0019dce:	c1 e2 08             	shl    edx,0x8
c0019dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019dd8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019dde:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019de4:	01 f8                	add    eax,edi
c0019de6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019de9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019dec:	68 00 01 00 00       	push   0x100
c0019df1:	6a 00                	push   0x0
c0019df3:	50                   	push   eax
c0019df4:	e8 d7 66 fe ff       	call   c00004d0 <memset>
c0019df9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019dff:	01 fa                	add    edx,edi
c0019e01:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019e05:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019e08:	c1 e7 0d             	shl    edi,0xd
c0019e0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019e12:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019e18:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019e1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e22:	31 ff                	xor    edi,edi
c0019e24:	83 c4 10             	add    esp,0x10
c0019e27:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019e2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e31:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019e37:	83 c5 20             	add    ebp,0x20
c0019e3a:	01 f8                	add    eax,edi
c0019e3c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e3f:	52                   	push   edx
c0019e40:	68 00 01 00 00       	push   0x100
c0019e45:	6a 00                	push   0x0
c0019e47:	50                   	push   eax
c0019e48:	e8 83 66 fe ff       	call   c00004d0 <memset>
c0019e4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e51:	83 c4 10             	add    esp,0x10
c0019e54:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e5a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e61:	01 f8                	add    eax,edi
c0019e63:	81 c7 00 01 00 00    	add    edi,0x100
c0019e69:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e6c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e72:	75 b3                	jne    c0019e27 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e74:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e7b:	50                   	push   eax
c0019e7c:	50                   	push   eax
c0019e7d:	53                   	push   ebx
c0019e7e:	56                   	push   esi
c0019e7f:	e8 b6 fe ff ff       	call   c0019d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e84:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e8b:	83 c4 2c             	add    esp,0x2c
c0019e8e:	5b                   	pop    ebx
c0019e8f:	5e                   	pop    esi
c0019e90:	5f                   	pop    edi
c0019e91:	5d                   	pop    ebp
c0019e92:	c3                   	ret    
c0019e93:	90                   	nop

c0019e94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e94:	55                   	push   ebp
c0019e95:	57                   	push   edi
c0019e96:	56                   	push   esi
c0019e97:	53                   	push   ebx
c0019e98:	31 db                	xor    ebx,ebx
c0019e9a:	83 ec 0c             	sub    esp,0xc
c0019e9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019ea1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ea5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019ea8:	f7 c7 01 00 00 00    	test   edi,0x1
c0019eae:	74 7a                	je     c0019f2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019eb0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019eb4:	89 d8                	mov    eax,ebx
c0019eb6:	c1 e0 07             	shl    eax,0x7
c0019eb9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019ec0:	55                   	push   ebp
c0019ec1:	56                   	push   esi
c0019ec2:	e8 2b fe ff ff       	call   c0019cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ec7:	5a                   	pop    edx
c0019ec8:	83 f8 01             	cmp    eax,0x1
c0019ecb:	59                   	pop    ecx
c0019ecc:	75 21                	jne    c0019eef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019ece:	50                   	push   eax
c0019ecf:	53                   	push   ebx
c0019ed0:	55                   	push   ebp
c0019ed1:	56                   	push   esi
c0019ed2:	e8 ad fe ff ff       	call   c0019d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ed7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019ede:	e8 d6 d8 fe ff       	call   c00077b9 <malloc>
c0019ee3:	89 c5                	mov    ebp,eax
c0019ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee8:	e8 43 0d 00 00       	call   c001ac30 <SATA::SATA()>
c0019eed:	eb 24                	jmp    c0019f13 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019eef:	83 f8 04             	cmp    eax,0x4
c0019ef2:	75 36                	jne    c0019f2a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ef4:	51                   	push   ecx
c0019ef5:	53                   	push   ebx
c0019ef6:	55                   	push   ebp
c0019ef7:	56                   	push   esi
c0019ef8:	e8 87 fe ff ff       	call   c0019d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019efd:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019f04:	e8 b0 d8 fe ff       	call   c00077b9 <malloc>
c0019f09:	89 c5                	mov    ebp,eax
c0019f0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f0e:	e8 79 10 00 00       	call   c001af8c <SATAPI::SATAPI()>
c0019f13:	58                   	pop    eax
c0019f14:	5a                   	pop    edx
c0019f15:	55                   	push   ebp
c0019f16:	56                   	push   esi
c0019f17:	e8 0c 1a ff ff       	call   c000b928 <Device::addChild(Device*)>
c0019f1c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f1f:	56                   	push   esi
c0019f20:	6a 00                	push   0x0
c0019f22:	53                   	push   ebx
c0019f23:	55                   	push   ebp
c0019f24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019f27:	83 c4 20             	add    esp,0x20
c0019f2a:	d1 ef                	shr    edi,1
c0019f2c:	43                   	inc    ebx
c0019f2d:	83 fb 20             	cmp    ebx,0x20
c0019f30:	0f 85 72 ff ff ff    	jne    c0019ea8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019f36:	83 c4 0c             	add    esp,0xc
c0019f39:	5b                   	pop    ebx
c0019f3a:	5e                   	pop    esi
c0019f3b:	5f                   	pop    edi
c0019f3c:	5d                   	pop    ebp
c0019f3d:	c3                   	ret    

c0019f3e <SATABus::open(int, int, void*)>:
c0019f3e:	83 ec 14             	sub    esp,0x14
c0019f41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f45:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f4b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f51:	52                   	push   edx
c0019f52:	50                   	push   eax
c0019f53:	e8 3c ff ff ff       	call   c0019e94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f58:	31 c0                	xor    eax,eax
c0019f5a:	83 c4 1c             	add    esp,0x1c
c0019f5d:	c3                   	ret    

c0019f5e <ATA::close(int, int, void*)>:
c0019f5e:	83 ec 0c             	sub    esp,0xc
c0019f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f6b:	85 c0                	test   eax,eax
c0019f6d:	74 0c                	je     c0019f7b <ATA::close(int, int, void*)+0x1d>
c0019f6f:	83 ec 0c             	sub    esp,0xc
c0019f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f74:	50                   	push   eax
c0019f75:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	31 c0                	xor    eax,eax
c0019f7d:	83 c4 0c             	add    esp,0xc
c0019f80:	c3                   	ret    
c0019f81:	90                   	nop

c0019f82 <ATA::powerSaving(PowerSavingLevel)>:
c0019f82:	c3                   	ret    
c0019f83:	90                   	nop

c0019f84 <ATA::ATA()>:
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8b:	83 ec 04             	sub    esp,0x4
c0019f8e:	68 00 02 00 00       	push   0x200
c0019f93:	68 cd f6 01 c0       	push   0xc001f6cd
c0019f98:	50                   	push   eax
c0019f99:	e8 58 1d ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c0019fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019faa:	89 10                	mov    DWORD PTR [eax],edx
c0019fac:	90                   	nop
c0019fad:	83 c4 0c             	add    esp,0xc
c0019fb0:	c3                   	ret    
c0019fb1:	90                   	nop

c0019fb2 <ATA::flush(bool)>:
c0019fb2:	53                   	push   ebx
c0019fb3:	83 ec 08             	sub    esp,0x8
c0019fb6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019fbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019fbf:	19 c0                	sbb    eax,eax
c0019fc1:	83 e0 fd             	and    eax,0xfffffffd
c0019fc4:	05 ea 00 00 00       	add    eax,0xea
c0019fc9:	50                   	push   eax
c0019fca:	6a 07                	push   0x7
c0019fcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fd3:	50                   	push   eax
c0019fd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fda:	e8 59 f1 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fdf:	83 c4 0c             	add    esp,0xc
c0019fe2:	6a 00                	push   0x0
c0019fe4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019feb:	50                   	push   eax
c0019fec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ff2:	e8 df fb ff ff       	call   c0019bd6 <IDE::polling(unsigned char, unsigned int)>
c0019ff7:	83 c4 18             	add    esp,0x18
c0019ffa:	5b                   	pop    ebx
c0019ffb:	c3                   	ret    

c0019ffc <ATA::readyForCommand()>:
c0019ffc:	56                   	push   esi
c0019ffd:	53                   	push   ebx
c0019ffe:	53                   	push   ebx
c0019fff:	31 db                	xor    ebx,ebx
c001a001:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a005:	51                   	push   ecx
c001a006:	6a 0c                	push   0xc
c001a008:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a00f:	50                   	push   eax
c001a010:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a016:	e8 dd f1 ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c001a01b:	83 c4 10             	add    esp,0x10
c001a01e:	a8 88                	test   al,0x88
c001a020:	74 1f                	je     c001a041 <ATA::readyForCommand()+0x45>
c001a022:	43                   	inc    ebx
c001a023:	83 fb 63             	cmp    ebx,0x63
c001a026:	7e dd                	jle    c001a005 <ATA::readyForCommand()+0x9>
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	6a 0a                	push   0xa
c001a02d:	e8 da 9b ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001a03b:	75 c8                	jne    c001a005 <ATA::readyForCommand()+0x9>
c001a03d:	31 c0                	xor    eax,eax
c001a03f:	eb 02                	jmp    c001a043 <ATA::readyForCommand()+0x47>
c001a041:	b0 01                	mov    al,0x1
c001a043:	5a                   	pop    edx
c001a044:	5b                   	pop    ebx
c001a045:	5e                   	pop    esi
c001a046:	c3                   	ret    
c001a047:	90                   	nop

c001a048 <ATA::access(unsigned long long, int, void*, bool)>:
c001a048:	55                   	push   ebp
c001a049:	57                   	push   edi
c001a04a:	56                   	push   esi
c001a04b:	53                   	push   ebx
c001a04c:	83 ec 2c             	sub    esp,0x2c
c001a04f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a053:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a057:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a05b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a05f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a063:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a067:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a06b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a071:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a075:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a07b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a07f:	c1 e0 06             	shl    eax,0x6
c001a082:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a08a:	74 5d                	je     c001a0e9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a08c:	89 fa                	mov    edx,edi
c001a08e:	89 f0                	mov    eax,esi
c001a090:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a094:	c1 ea 1c             	shr    edx,0x1c
c001a097:	89 d1                	mov    ecx,edx
c001a099:	09 c1                	or     ecx,eax
c001a09b:	74 25                	je     c001a0c2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a09d:	31 ed                	xor    ebp,ebp
c001a09f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a0a6:	89 fa                	mov    edx,edi
c001a0a8:	89 f0                	mov    eax,esi
c001a0aa:	0f ad d0             	shrd   eax,edx,cl
c001a0ad:	d3 ea                	shr    edx,cl
c001a0af:	f6 c1 20             	test   cl,0x20
c001a0b2:	74 02                	je     c001a0b6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a0b4:	89 d0                	mov    eax,edx
c001a0b6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a0ba:	45                   	inc    ebp
c001a0bb:	83 fd 06             	cmp    ebp,0x6
c001a0be:	75 df                	jne    c001a09f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a0c0:	eb 76                	jmp    c001a138 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a0c2:	89 f0                	mov    eax,esi
c001a0c4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a0c9:	89 fa                	mov    edx,edi
c001a0cb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0d2:	0f ac d0 10          	shrd   eax,edx,0x10
c001a0d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a0df:	c1 ee 18             	shr    esi,0x18
c001a0e2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0e7:	eb 56                	jmp    c001a13f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0e9:	6a 00                	push   0x0
c001a0eb:	6a 3f                	push   0x3f
c001a0ed:	57                   	push   edi
c001a0ee:	56                   	push   esi
c001a0ef:	e8 1c 22 00 00       	call   c001c310 <__umoddi3>
c001a0f4:	83 c4 10             	add    esp,0x10
c001a0f7:	40                   	inc    eax
c001a0f8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0fc:	6a 00                	push   0x0
c001a0fe:	68 f0 03 00 00       	push   0x3f0
c001a103:	57                   	push   edi
c001a104:	56                   	push   esi
c001a105:	e8 06 21 00 00       	call   c001c210 <__udivdi3>
c001a10a:	83 c4 10             	add    esp,0x10
c001a10d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a112:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a119:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a11e:	6a 00                	push   0x0
c001a120:	6a 3f                	push   0x3f
c001a122:	57                   	push   edi
c001a123:	56                   	push   esi
c001a124:	e8 e7 20 00 00       	call   c001c210 <__udivdi3>
c001a129:	83 c4 10             	add    esp,0x10
c001a12c:	89 c6                	mov    esi,eax
c001a12e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a133:	83 e6 0f             	and    esi,0xf
c001a136:	eb 07                	jmp    c001a13f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a138:	31 f6                	xor    esi,esi
c001a13a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a13f:	bf 01 00 00 00       	mov    edi,0x1
c001a144:	50                   	push   eax
c001a145:	6a 00                	push   0x0
c001a147:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a14e:	50                   	push   eax
c001a14f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a153:	e8 ee f1 ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c001a158:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a15b:	e8 9c fe ff ff       	call   c0019ffc <ATA::readyForCommand()>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	84 c0                	test   al,al
c001a165:	0f 84 4e 02 00 00    	je     c001a3b9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a16b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a171:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a177:	c1 e0 04             	shl    eax,0x4
c001a17a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a181:	09 c6                	or     esi,eax
c001a183:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a188:	75 05                	jne    c001a18f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a18a:	83 ce a0             	or     esi,0xffffffa0
c001a18d:	eb 03                	jmp    c001a192 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a18f:	83 ce e0             	or     esi,0xffffffe0
c001a192:	89 f0                	mov    eax,esi
c001a194:	0f b6 f0             	movzx  esi,al
c001a197:	56                   	push   esi
c001a198:	6a 06                	push   0x6
c001a19a:	51                   	push   ecx
c001a19b:	52                   	push   edx
c001a19c:	e8 97 ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1a1:	83 c4 10             	add    esp,0x10
c001a1a4:	6a 00                	push   0x0
c001a1a6:	6a 01                	push   0x1
c001a1a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1af:	50                   	push   eax
c001a1b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b6:	e8 7d ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1bb:	83 c4 10             	add    esp,0x10
c001a1be:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a1c3:	75 6e                	jne    c001a233 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a1c5:	6a 00                	push   0x0
c001a1c7:	6a 08                	push   0x8
c001a1c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1d0:	50                   	push   eax
c001a1d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d7:	e8 5c ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1dc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a1e1:	50                   	push   eax
c001a1e2:	6a 09                	push   0x9
c001a1e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1eb:	50                   	push   eax
c001a1ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1f2:	e8 41 ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f7:	83 c4 20             	add    esp,0x20
c001a1fa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1ff:	50                   	push   eax
c001a200:	6a 0a                	push   0xa
c001a202:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a209:	50                   	push   eax
c001a20a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a210:	e8 23 ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a215:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a21a:	50                   	push   eax
c001a21b:	6a 0b                	push   0xb
c001a21d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a224:	50                   	push   eax
c001a225:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a22b:	e8 08 ef ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a230:	83 c4 20             	add    esp,0x20
c001a233:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a238:	50                   	push   eax
c001a239:	6a 02                	push   0x2
c001a23b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a242:	50                   	push   eax
c001a243:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a249:	e8 ea ee ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a24e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a253:	50                   	push   eax
c001a254:	6a 03                	push   0x3
c001a256:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a25d:	50                   	push   eax
c001a25e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a264:	e8 cf ee ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a269:	83 c4 20             	add    esp,0x20
c001a26c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a271:	50                   	push   eax
c001a272:	6a 04                	push   0x4
c001a274:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a27b:	50                   	push   eax
c001a27c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a282:	e8 b1 ee ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a287:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a28c:	50                   	push   eax
c001a28d:	6a 05                	push   0x5
c001a28f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a296:	50                   	push   eax
c001a297:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a29d:	e8 96 ee ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2a2:	83 c4 20             	add    esp,0x20
c001a2a5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a2aa:	0f 94 c0             	sete   al
c001a2ad:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a2b2:	74 09                	je     c001a2bd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a2b4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a2bb:	eb 07                	jmp    c001a2c4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a2bd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a2c4:	0f b6 c0             	movzx  eax,al
c001a2c7:	50                   	push   eax
c001a2c8:	6a 07                	push   0x7
c001a2ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2d1:	50                   	push   eax
c001a2d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d8:	e8 5b ee ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2dd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	85 f6                	test   esi,esi
c001a2e6:	0f 84 ae 00 00 00    	je     c001a39a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2ec:	50                   	push   eax
c001a2ed:	6a 01                	push   0x1
c001a2ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2f6:	50                   	push   eax
c001a2f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2fd:	e8 d4 f8 ff ff       	call   c0019bd6 <IDE::polling(unsigned char, unsigned int)>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a30b:	84 c0                	test   al,al
c001a30d:	74 20                	je     c001a32f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a30f:	0f b6 f8             	movzx  edi,al
c001a312:	0f b6 d2             	movzx  edx,dl
c001a315:	57                   	push   edi
c001a316:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a31d:	50                   	push   eax
c001a31e:	52                   	push   edx
c001a31f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a325:	e8 fc f7 ff ff       	call   c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a32a:	e9 87 00 00 00       	jmp    c001a3b6 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a32f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a334:	74 33                	je     c001a369 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a336:	31 ed                	xor    ebp,ebp
c001a338:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a33c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a340:	50                   	push   eax
c001a341:	50                   	push   eax
c001a342:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a349:	50                   	push   eax
c001a34a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a350:	e8 d1 ed ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a355:	89 c2                	mov    edx,eax
c001a357:	89 f8                	mov    eax,edi
c001a359:	66 ef                	out    dx,ax
c001a35b:	45                   	inc    ebp
c001a35c:	83 c4 10             	add    esp,0x10
c001a35f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a365:	75 d1                	jne    c001a338 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a367:	eb 23                	jmp    c001a38c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a369:	0f b6 d2             	movzx  edx,dl
c001a36c:	51                   	push   ecx
c001a36d:	51                   	push   ecx
c001a36e:	52                   	push   edx
c001a36f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a375:	e8 ac ed ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a37a:	b9 00 01 00 00       	mov    ecx,0x100
c001a37f:	89 c2                	mov    edx,eax
c001a381:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a385:	fc                   	cld    
c001a386:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a389:	83 c4 10             	add    esp,0x10
c001a38c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a394:	4e                   	dec    esi
c001a395:	e9 4a ff ff ff       	jmp    c001a2e4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a39a:	31 ff                	xor    edi,edi
c001a39c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a3a1:	74 16                	je     c001a3b9 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a3a3:	50                   	push   eax
c001a3a4:	50                   	push   eax
c001a3a5:	31 c0                	xor    eax,eax
c001a3a7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a3ac:	0f 94 c0             	sete   al
c001a3af:	50                   	push   eax
c001a3b0:	53                   	push   ebx
c001a3b1:	e8 fc fb ff ff       	call   c0019fb2 <ATA::flush(bool)>
c001a3b6:	83 c4 10             	add    esp,0x10
c001a3b9:	83 c4 2c             	add    esp,0x2c
c001a3bc:	89 f8                	mov    eax,edi
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	5f                   	pop    edi
c001a3c1:	5d                   	pop    ebp
c001a3c2:	c3                   	ret    
c001a3c3:	90                   	nop

c001a3c4 <ATA::read(unsigned long long, int, void*)>:
c001a3c4:	57                   	push   edi
c001a3c5:	b8 04 00 00 00       	mov    eax,0x4
c001a3ca:	56                   	push   esi
c001a3cb:	53                   	push   ebx
c001a3cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3d4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3db:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3e5:	77 25                	ja     c001a40c <ATA::read(unsigned long long, int, void*)+0x48>
c001a3e7:	b8 06 00 00 00       	mov    eax,0x6
c001a3ec:	85 f6                	test   esi,esi
c001a3ee:	74 1c                	je     c001a40c <ATA::read(unsigned long long, int, void*)+0x48>
c001a3f0:	50                   	push   eax
c001a3f1:	50                   	push   eax
c001a3f2:	6a 00                	push   0x0
c001a3f4:	56                   	push   esi
c001a3f5:	52                   	push   edx
c001a3f6:	53                   	push   ebx
c001a3f7:	51                   	push   ecx
c001a3f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3fc:	e8 47 fc ff ff       	call   c001a048 <ATA::access(unsigned long long, int, void*, bool)>
c001a401:	83 c4 20             	add    esp,0x20
c001a404:	85 c0                	test   eax,eax
c001a406:	0f 95 c0             	setne  al
c001a409:	0f b6 c0             	movzx  eax,al
c001a40c:	5b                   	pop    ebx
c001a40d:	5e                   	pop    esi
c001a40e:	5f                   	pop    edi
c001a40f:	c3                   	ret    

c001a410 <ATA::write(unsigned long long, int, void*)>:
c001a410:	57                   	push   edi
c001a411:	b8 04 00 00 00       	mov    eax,0x4
c001a416:	56                   	push   esi
c001a417:	53                   	push   ebx
c001a418:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a41c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a420:	8d 7a ff             	lea    edi,[edx-0x1]
c001a423:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a427:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a42b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a431:	77 25                	ja     c001a458 <ATA::write(unsigned long long, int, void*)+0x48>
c001a433:	b8 06 00 00 00       	mov    eax,0x6
c001a438:	85 f6                	test   esi,esi
c001a43a:	74 1c                	je     c001a458 <ATA::write(unsigned long long, int, void*)+0x48>
c001a43c:	50                   	push   eax
c001a43d:	50                   	push   eax
c001a43e:	6a 01                	push   0x1
c001a440:	56                   	push   esi
c001a441:	52                   	push   edx
c001a442:	53                   	push   ebx
c001a443:	51                   	push   ecx
c001a444:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a448:	e8 fb fb ff ff       	call   c001a048 <ATA::access(unsigned long long, int, void*, bool)>
c001a44d:	83 c4 20             	add    esp,0x20
c001a450:	85 c0                	test   eax,eax
c001a452:	0f 95 c0             	setne  al
c001a455:	0f b6 c0             	movzx  eax,al
c001a458:	5b                   	pop    ebx
c001a459:	5e                   	pop    esi
c001a45a:	5f                   	pop    edi
c001a45b:	c3                   	ret    

c001a45c <ATA::detectCHS()>:
c001a45c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a460:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a466:	c1 e0 06             	shl    eax,0x6
c001a469:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a46f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a479:	c7 44 24 04 24 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f624
c001a481:	e9 cd 5c ff ff       	jmp    c0010153 <KePanic(char const*)>

c001a486 <ATA::open(int, int, void*)>:
c001a486:	53                   	push   ebx
c001a487:	83 ec 08             	sub    esp,0x8
c001a48a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a48e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a496:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a49c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a4a2:	c1 e0 06             	shl    eax,0x6
c001a4a5:	01 d0                	add    eax,edx
c001a4a7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a4ae:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a4b4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a4bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a4c5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a4cb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a4d2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a4d9:	75 0c                	jne    c001a4e7 <ATA::open(int, int, void*)+0x61>
c001a4db:	83 ec 0c             	sub    esp,0xc
c001a4de:	53                   	push   ebx
c001a4df:	e8 78 ff ff ff       	call   c001a45c <ATA::detectCHS()>
c001a4e4:	83 c4 10             	add    esp,0x10
c001a4e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4ed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4f3:	c1 e0 06             	shl    eax,0x6
c001a4f6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a507:	d1 e8                	shr    eax,1
c001a509:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a50f:	6a 04                	push   0x4
c001a511:	6a 0c                	push   0xc
c001a513:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a51a:	50                   	push   eax
c001a51b:	52                   	push   edx
c001a51c:	e8 17 ec ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a521:	90                   	nop
c001a522:	90                   	nop
c001a523:	6a 00                	push   0x0
c001a525:	6a 0c                	push   0xc
c001a527:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a52e:	50                   	push   eax
c001a52f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a535:	e8 fe eb ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a53a:	83 c4 14             	add    esp,0x14
c001a53d:	53                   	push   ebx
c001a53e:	e8 1b 18 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001a543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a546:	e8 b3 28 ff ff       	call   c000cdfe <createPartitionsForDisk(PhysicalDisk*)>
c001a54b:	31 c0                	xor    eax,eax
c001a54d:	83 c4 18             	add    esp,0x18
c001a550:	5b                   	pop    ebx
c001a551:	c3                   	ret    

c001a552 <ATAPI::write(unsigned long long, int, void*)>:
c001a552:	b8 03 00 00 00       	mov    eax,0x3
c001a557:	c3                   	ret    

c001a558 <ATAPI::close(int, int, void*)>:
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a565:	85 c0                	test   eax,eax
c001a567:	74 0c                	je     c001a575 <ATAPI::close(int, int, void*)+0x1d>
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a56e:	50                   	push   eax
c001a56f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	31 c0                	xor    eax,eax
c001a577:	83 c4 0c             	add    esp,0xc
c001a57a:	c3                   	ret    
c001a57b:	90                   	nop

c001a57c <ATAPI::ATAPI()>:
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a583:	83 ec 04             	sub    esp,0x4
c001a586:	68 00 08 00 00       	push   0x800
c001a58b:	68 6d f7 01 c0       	push   0xc001f76d
c001a590:	50                   	push   eax
c001a591:	e8 60 17 ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	ba 88 f6 01 c0       	mov    edx,0xc001f688
c001a59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a2:	89 10                	mov    DWORD PTR [eax],edx
c001a5a4:	90                   	nop
c001a5a5:	83 c4 0c             	add    esp,0xc
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop

c001a5aa <ATAPI::readyForCommand()>:
c001a5aa:	56                   	push   esi
c001a5ab:	53                   	push   ebx
c001a5ac:	53                   	push   ebx
c001a5ad:	31 db                	xor    ebx,ebx
c001a5af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5b3:	51                   	push   ecx
c001a5b4:	6a 0c                	push   0xc
c001a5b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a5bd:	50                   	push   eax
c001a5be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a5c4:	e8 2f ec ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c001a5c9:	83 c4 10             	add    esp,0x10
c001a5cc:	a8 88                	test   al,0x88
c001a5ce:	74 25                	je     c001a5f5 <ATAPI::readyForCommand()+0x4b>
c001a5d0:	43                   	inc    ebx
c001a5d1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a5d7:	7e da                	jle    c001a5b3 <ATAPI::readyForCommand()+0x9>
c001a5d9:	83 ec 0c             	sub    esp,0xc
c001a5dc:	68 5e 01 00 00       	push   0x15e
c001a5e1:	e8 26 96 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5ef:	75 c2                	jne    c001a5b3 <ATAPI::readyForCommand()+0x9>
c001a5f1:	31 c0                	xor    eax,eax
c001a5f3:	eb 02                	jmp    c001a5f7 <ATAPI::readyForCommand()+0x4d>
c001a5f5:	b0 01                	mov    al,0x1
c001a5f7:	5a                   	pop    edx
c001a5f8:	5b                   	pop    ebx
c001a5f9:	5e                   	pop    esi
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5fc:	55                   	push   ebp
c001a5fd:	57                   	push   edi
c001a5fe:	56                   	push   esi
c001a5ff:	53                   	push   ebx
c001a600:	83 ec 20             	sub    esp,0x20
c001a603:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a607:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a60b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a60f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a613:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a617:	6a 01                	push   0x1
c001a619:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a620:	50                   	push   eax
c001a621:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a627:	e8 1a ed ff ff       	call   c0019346 <IDE::enableIRQs(unsigned char, bool)>
c001a62c:	5e                   	pop    esi
c001a62d:	58                   	pop    eax
c001a62e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a635:	50                   	push   eax
c001a636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a63c:	e8 d1 ea ff ff       	call   c0019112 <IDE::prepareInterrupt(unsigned char)>
c001a641:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a644:	e8 61 ff ff ff       	call   c001a5aa <ATAPI::readyForCommand()>
c001a649:	83 c4 10             	add    esp,0x10
c001a64c:	84 c0                	test   al,al
c001a64e:	75 0a                	jne    c001a65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a650:	bb 01 00 00 00       	mov    ebx,0x1
c001a655:	e9 57 02 00 00       	jmp    c001a8b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a65a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a660:	c1 e0 04             	shl    eax,0x4
c001a663:	0f b6 c0             	movzx  eax,al
c001a666:	50                   	push   eax
c001a667:	6a 06                	push   0x6
c001a669:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a670:	50                   	push   eax
c001a671:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a677:	e8 bc ea ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a67c:	6a 00                	push   0x0
c001a67e:	6a 01                	push   0x1
c001a680:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a687:	50                   	push   eax
c001a688:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a68e:	e8 a5 ea ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a693:	83 c4 20             	add    esp,0x20
c001a696:	0f b6 c3             	movzx  eax,bl
c001a699:	0f b6 df             	movzx  ebx,bh
c001a69c:	50                   	push   eax
c001a69d:	6a 04                	push   0x4
c001a69f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6a6:	50                   	push   eax
c001a6a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6ad:	e8 86 ea ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6b2:	53                   	push   ebx
c001a6b3:	6a 05                	push   0x5
c001a6b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6bc:	50                   	push   eax
c001a6bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6c3:	e8 70 ea ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6c8:	83 c4 20             	add    esp,0x20
c001a6cb:	68 a0 00 00 00       	push   0xa0
c001a6d0:	6a 07                	push   0x7
c001a6d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6d9:	50                   	push   eax
c001a6da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6e0:	e8 53 ea ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6e5:	83 c4 0c             	add    esp,0xc
c001a6e8:	6a 01                	push   0x1
c001a6ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6f1:	50                   	push   eax
c001a6f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f8:	e8 d9 f4 ff ff       	call   c0019bd6 <IDE::polling(unsigned char, unsigned int)>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a706:	84 c0                	test   al,al
c001a708:	74 23                	je     c001a72d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a70a:	0f b6 d8             	movzx  ebx,al
c001a70d:	0f b6 d2             	movzx  edx,dl
c001a710:	53                   	push   ebx
c001a711:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a718:	50                   	push   eax
c001a719:	52                   	push   edx
c001a71a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a720:	e8 01 f4 ff ff       	call   c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a725:	83 c4 10             	add    esp,0x10
c001a728:	e9 84 01 00 00       	jmp    c001a8b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a72d:	0f b6 d2             	movzx  edx,dl
c001a730:	53                   	push   ebx
c001a731:	53                   	push   ebx
c001a732:	52                   	push   edx
c001a733:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a739:	e8 e8 e9 ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a73e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a742:	b9 06 00 00 00       	mov    ecx,0x6
c001a747:	89 c2                	mov    edx,eax
c001a749:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a74c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a759:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a760:	85 db                	test   ebx,ebx
c001a762:	0f 84 ec 00 00 00    	je     c001a854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a768:	51                   	push   ecx
c001a769:	51                   	push   ecx
c001a76a:	52                   	push   edx
c001a76b:	50                   	push   eax
c001a76c:	e8 35 eb ff ff       	call   c00192a6 <IDE::waitInterrupt(unsigned char)>
c001a771:	83 c4 10             	add    esp,0x10
c001a774:	84 c0                	test   al,al
c001a776:	0f 84 d4 fe ff ff    	je     c001a650 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a77c:	56                   	push   esi
c001a77d:	56                   	push   esi
c001a77e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a785:	50                   	push   eax
c001a786:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a78c:	e8 81 e9 ff ff       	call   c0019112 <IDE::prepareInterrupt(unsigned char)>
c001a791:	83 c4 0c             	add    esp,0xc
c001a794:	6a 04                	push   0x4
c001a796:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a79d:	50                   	push   eax
c001a79e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7a4:	e8 4f ea ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c001a7a9:	83 c4 0c             	add    esp,0xc
c001a7ac:	89 c6                	mov    esi,eax
c001a7ae:	6a 05                	push   0x5
c001a7b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7b7:	50                   	push   eax
c001a7b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7be:	e8 35 ea ff ff       	call   c00191f8 <IDE::read(unsigned char, unsigned char)>
c001a7c3:	89 f1                	mov    ecx,esi
c001a7c5:	0f b6 c0             	movzx  eax,al
c001a7c8:	0f b6 f1             	movzx  esi,cl
c001a7cb:	c1 e0 08             	shl    eax,0x8
c001a7ce:	09 c6                	or     esi,eax
c001a7d0:	d1 fe                	sar    esi,1
c001a7d2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a7d6:	83 c4 10             	add    esp,0x10
c001a7d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a7de:	74 41                	je     c001a821 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a7e0:	31 c9                	xor    ecx,ecx
c001a7e2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7e8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7ef:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7f3:	75 0a                	jne    c001a7ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7f5:	01 c9                	add    ecx,ecx
c001a7f7:	01 cd                	add    ebp,ecx
c001a7f9:	4b                   	dec    ebx
c001a7fa:	e9 54 ff ff ff       	jmp    c001a753 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7ff:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a804:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a808:	51                   	push   ecx
c001a809:	51                   	push   ecx
c001a80a:	52                   	push   edx
c001a80b:	50                   	push   eax
c001a80c:	e8 15 e9 ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a811:	89 c2                	mov    edx,eax
c001a813:	89 f0                	mov    eax,esi
c001a815:	66 ef                	out    dx,ax
c001a817:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a81b:	83 c4 10             	add    esp,0x10
c001a81e:	41                   	inc    ecx
c001a81f:	eb c1                	jmp    c001a7e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a821:	31 f6                	xor    esi,esi
c001a823:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a829:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a830:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a834:	75 06                	jne    c001a83c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a836:	01 f6                	add    esi,esi
c001a838:	01 f5                	add    ebp,esi
c001a83a:	eb bd                	jmp    c001a7f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a83c:	51                   	push   ecx
c001a83d:	51                   	push   ecx
c001a83e:	52                   	push   edx
c001a83f:	50                   	push   eax
c001a840:	e8 e1 e8 ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a845:	89 c2                	mov    edx,eax
c001a847:	66 ed                	in     ax,dx
c001a849:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a84e:	83 c4 10             	add    esp,0x10
c001a851:	46                   	inc    esi
c001a852:	eb cf                	jmp    c001a823 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a854:	51                   	push   ecx
c001a855:	51                   	push   ecx
c001a856:	52                   	push   edx
c001a857:	50                   	push   eax
c001a858:	e8 49 ea ff ff       	call   c00192a6 <IDE::waitInterrupt(unsigned char)>
c001a85d:	83 c4 10             	add    esp,0x10
c001a860:	84 c0                	test   al,al
c001a862:	0f 84 e8 fd ff ff    	je     c001a650 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a868:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a86d:	52                   	push   edx
c001a86e:	52                   	push   edx
c001a86f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a876:	50                   	push   eax
c001a877:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a87d:	e8 90 e8 ff ff       	call   c0019112 <IDE::prepareInterrupt(unsigned char)>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	50                   	push   eax
c001a886:	50                   	push   eax
c001a887:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a88e:	50                   	push   eax
c001a88f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a895:	e8 8c e8 ff ff       	call   c0019126 <IDE::getBase(unsigned char)>
c001a89a:	8d 50 07             	lea    edx,[eax+0x7]
c001a89d:	ec                   	in     al,dx
c001a89e:	83 c4 10             	add    esp,0x10
c001a8a1:	a8 88                	test   al,0x88
c001a8a3:	74 0a                	je     c001a8af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a8a5:	4b                   	dec    ebx
c001a8a6:	75 dd                	jne    c001a885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a8a8:	bb 02 00 00 00       	mov    ebx,0x2
c001a8ad:	eb 02                	jmp    c001a8b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a8af:	31 db                	xor    ebx,ebx
c001a8b1:	83 c4 1c             	add    esp,0x1c
c001a8b4:	89 d8                	mov    eax,ebx
c001a8b6:	5b                   	pop    ebx
c001a8b7:	5e                   	pop    esi
c001a8b8:	5f                   	pop    edi
c001a8b9:	5d                   	pop    ebp
c001a8ba:	c3                   	ret    
c001a8bb:	90                   	nop

c001a8bc <ATAPI::diskRemoved()>:
c001a8bc:	53                   	push   ebx
c001a8bd:	83 ec 14             	sub    esp,0x14
c001a8c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a8c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a8cb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a8d1:	e8 a8 22 ff ff       	call   c000cb7e <LogicalDisk::unmount()>
c001a8d6:	58                   	pop    eax
c001a8d7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a8dd:	e8 e2 2b ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c001a8e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8ec:	83 c4 18             	add    esp,0x18
c001a8ef:	5b                   	pop    ebx
c001a8f0:	e9 bf 2b ff ff       	jmp    c000d4b4 <VCache::invalidateReadBuffer()>
c001a8f5:	90                   	nop

c001a8f6 <ATAPI::eject()>:
c001a8f6:	57                   	push   edi
c001a8f7:	b9 03 00 00 00       	mov    ecx,0x3
c001a8fc:	53                   	push   ebx
c001a8fd:	83 ec 14             	sub    esp,0x14
c001a900:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a904:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a908:	fc                   	cld    
c001a909:	31 c0                	xor    eax,eax
c001a90b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a90d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a912:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a917:	50                   	push   eax
c001a918:	50                   	push   eax
c001a919:	6a 00                	push   0x0
c001a91b:	6a 00                	push   0x0
c001a91d:	6a 00                	push   0x0
c001a91f:	6a 02                	push   0x2
c001a921:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a925:	50                   	push   eax
c001a926:	53                   	push   ebx
c001a927:	e8 d0 fc ff ff       	call   c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a92c:	83 c4 14             	add    esp,0x14
c001a92f:	53                   	push   ebx
c001a930:	e8 87 ff ff ff       	call   c001a8bc <ATAPI::diskRemoved()>
c001a935:	83 c4 24             	add    esp,0x24
c001a938:	31 c0                	xor    eax,eax
c001a93a:	5b                   	pop    ebx
c001a93b:	5f                   	pop    edi
c001a93c:	c3                   	ret    
c001a93d:	90                   	nop

c001a93e <ATAPI::diskInserted()>:
c001a93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a942:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a949:	c3                   	ret    

c001a94a <ATAPI::detectMedia()>:
c001a94a:	56                   	push   esi
c001a94b:	53                   	push   ebx
c001a94c:	83 ec 28             	sub    esp,0x28
c001a94f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a953:	6a 0c                	push   0xc
c001a955:	6a 00                	push   0x0
c001a957:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a95b:	56                   	push   esi
c001a95c:	e8 6f 5b fe ff       	call   c00004d0 <memset>
c001a961:	58                   	pop    eax
c001a962:	5a                   	pop    edx
c001a963:	6a 00                	push   0x0
c001a965:	6a 00                	push   0x0
c001a967:	6a 00                	push   0x0
c001a969:	6a 00                	push   0x0
c001a96b:	56                   	push   esi
c001a96c:	53                   	push   ebx
c001a96d:	e8 8a fc ff ff       	call   c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a972:	83 c4 1c             	add    esp,0x1c
c001a975:	6a 0c                	push   0xc
c001a977:	6a 00                	push   0x0
c001a979:	56                   	push   esi
c001a97a:	e8 51 5b fe ff       	call   c00004d0 <memset>
c001a97f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a984:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a989:	59                   	pop    ecx
c001a98a:	58                   	pop    eax
c001a98b:	6a 01                	push   0x1
c001a98d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a991:	50                   	push   eax
c001a992:	6a 00                	push   0x0
c001a994:	6a 12                	push   0x12
c001a996:	56                   	push   esi
c001a997:	53                   	push   ebx
c001a998:	e8 5f fc ff ff       	call   c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a99d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a9a1:	83 c4 20             	add    esp,0x20
c001a9a4:	83 e0 7f             	and    eax,0x7f
c001a9a7:	3c 70                	cmp    al,0x70
c001a9a9:	74 15                	je     c001a9c0 <ATAPI::detectMedia()+0x76>
c001a9ab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9b2:	75 0c                	jne    c001a9c0 <ATAPI::detectMedia()+0x76>
c001a9b4:	83 ec 0c             	sub    esp,0xc
c001a9b7:	53                   	push   ebx
c001a9b8:	e8 81 ff ff ff       	call   c001a93e <ATAPI::diskInserted()>
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a9c4:	83 e0 0f             	and    eax,0xf
c001a9c7:	3c 02                	cmp    al,0x2
c001a9c9:	75 1b                	jne    c001a9e6 <ATAPI::detectMedia()+0x9c>
c001a9cb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a9d0:	75 2d                	jne    c001a9ff <ATAPI::detectMedia()+0xb5>
c001a9d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9d9:	74 24                	je     c001a9ff <ATAPI::detectMedia()+0xb5>
c001a9db:	83 ec 0c             	sub    esp,0xc
c001a9de:	53                   	push   ebx
c001a9df:	e8 d8 fe ff ff       	call   c001a8bc <ATAPI::diskRemoved()>
c001a9e4:	eb 16                	jmp    c001a9fc <ATAPI::detectMedia()+0xb2>
c001a9e6:	84 c0                	test   al,al
c001a9e8:	75 15                	jne    c001a9ff <ATAPI::detectMedia()+0xb5>
c001a9ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9f1:	75 0c                	jne    c001a9ff <ATAPI::detectMedia()+0xb5>
c001a9f3:	83 ec 0c             	sub    esp,0xc
c001a9f6:	53                   	push   ebx
c001a9f7:	e8 42 ff ff ff       	call   c001a93e <ATAPI::diskInserted()>
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	83 c4 24             	add    esp,0x24
c001aa02:	5b                   	pop    ebx
c001aa03:	5e                   	pop    esi
c001aa04:	c3                   	ret    
c001aa05:	90                   	nop

c001aa06 <ATAPI::open(int, int, void*)>:
c001aa06:	56                   	push   esi
c001aa07:	53                   	push   ebx
c001aa08:	50                   	push   eax
c001aa09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aa15:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa1b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001aa21:	c1 e0 06             	shl    eax,0x6
c001aa24:	01 d0                	add    eax,edx
c001aa26:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001aa2d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001aa33:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001aa3a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa44:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa4a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa51:	6a 04                	push   0x4
c001aa53:	6a 0c                	push   0xc
c001aa55:	51                   	push   ecx
c001aa56:	52                   	push   edx
c001aa57:	e8 dc e6 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa5c:	90                   	nop
c001aa5d:	90                   	nop
c001aa5e:	6a 00                	push   0x0
c001aa60:	6a 0c                	push   0xc
c001aa62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa69:	50                   	push   eax
c001aa6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa70:	e8 c3 e6 ff ff       	call   c0019138 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa75:	83 c4 14             	add    esp,0x14
c001aa78:	68 74 01 00 00       	push   0x174
c001aa7d:	e8 37 cd fe ff       	call   c00077b9 <malloc>
c001aa82:	83 c4 0c             	add    esp,0xc
c001aa85:	89 c6                	mov    esi,eax
c001aa87:	6a 00                	push   0x0
c001aa89:	68 ff ff ff 7f       	push   0x7fffffff
c001aa8e:	6a 00                	push   0x0
c001aa90:	6a 00                	push   0x0
c001aa92:	53                   	push   ebx
c001aa93:	68 24 f8 01 c0       	push   0xc001f824
c001aa98:	50                   	push   eax
c001aa99:	e8 2c 1f ff ff       	call   c000c9ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa9e:	83 c4 14             	add    esp,0x14
c001aaa1:	56                   	push   esi
c001aaa2:	e8 d9 1f ff ff       	call   c000ca80 <LogicalDisk::assignDriveLetter()>
c001aaa7:	5a                   	pop    edx
c001aaa8:	0f be c0             	movsx  eax,al
c001aaab:	59                   	pop    ecx
c001aaac:	50                   	push   eax
c001aaad:	68 70 f6 01 c0       	push   0xc001f670
c001aab2:	e8 31 fa fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001aab7:	58                   	pop    eax
c001aab8:	5a                   	pop    edx
c001aab9:	56                   	push   esi
c001aaba:	53                   	push   ebx
c001aabb:	e8 68 0e ff ff       	call   c000b928 <Device::addChild(Device*)>
c001aac0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aac6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aac9:	e8 90 12 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001aace:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aad5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aad8:	e8 6d fe ff ff       	call   c001a94a <ATAPI::detectMedia()>
c001aadd:	83 c4 14             	add    esp,0x14
c001aae0:	31 c0                	xor    eax,eax
c001aae2:	5b                   	pop    ebx
c001aae3:	5e                   	pop    esi
c001aae4:	c3                   	ret    
c001aae5:	90                   	nop

c001aae6 <ATAPI::read(unsigned long long, int, void*)>:
c001aae6:	55                   	push   ebp
c001aae7:	57                   	push   edi
c001aae8:	56                   	push   esi
c001aae9:	53                   	push   ebx
c001aaea:	83 ec 1c             	sub    esp,0x1c
c001aaed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aaf1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aaf5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aaf9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab00:	74 3c                	je     c001ab3e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001ab02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ab06:	b9 03 00 00 00       	mov    ecx,0x3
c001ab0b:	fc                   	cld    
c001ab0c:	31 c0                	xor    eax,eax
c001ab0e:	0f ce                	bswap  esi
c001ab10:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab12:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ab17:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001ab1b:	89 e8                	mov    eax,ebp
c001ab1d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ab21:	50                   	push   eax
c001ab22:	50                   	push   eax
c001ab23:	55                   	push   ebp
c001ab24:	c1 e5 0b             	shl    ebp,0xb
c001ab27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab2b:	6a 00                	push   0x0
c001ab2d:	55                   	push   ebp
c001ab2e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ab32:	50                   	push   eax
c001ab33:	53                   	push   ebx
c001ab34:	e8 c3 fa ff ff       	call   c001a5fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ab39:	83 c4 20             	add    esp,0x20
c001ab3c:	eb 1a                	jmp    c001ab58 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001ab3e:	83 ec 0c             	sub    esp,0xc
c001ab41:	53                   	push   ebx
c001ab42:	e8 03 fe ff ff       	call   c001a94a <ATAPI::detectMedia()>
c001ab47:	83 c4 10             	add    esp,0x10
c001ab4a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab51:	75 af                	jne    c001ab02 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab53:	b8 02 00 00 00       	mov    eax,0x2
c001ab58:	83 c4 1c             	add    esp,0x1c
c001ab5b:	5b                   	pop    ebx
c001ab5c:	5e                   	pop    esi
c001ab5d:	5f                   	pop    edi
c001ab5e:	5d                   	pop    ebp
c001ab5f:	c3                   	ret    

c001ab60 <SATA::close(int, int, void*)>:
c001ab60:	83 ec 0c             	sub    esp,0xc
c001ab63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab67:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab6d:	85 c0                	test   eax,eax
c001ab6f:	74 0c                	je     c001ab7d <SATA::close(int, int, void*)+0x1d>
c001ab71:	83 ec 0c             	sub    esp,0xc
c001ab74:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab76:	50                   	push   eax
c001ab77:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab7a:	83 c4 10             	add    esp,0x10
c001ab7d:	31 c0                	xor    eax,eax
c001ab7f:	83 c4 0c             	add    esp,0xc
c001ab82:	c3                   	ret    
c001ab83:	90                   	nop

c001ab84 <SATA::powerSaving(PowerSavingLevel)>:
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop

c001ab86 <SATA::open(int, int, void*)>:
c001ab86:	56                   	push   esi
c001ab87:	53                   	push   ebx
c001ab88:	50                   	push   eax
c001ab89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab91:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab9b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aba1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001abab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abaf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001abb9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001abbf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001abc6:	e8 da ce fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001abcb:	89 c6                	mov    esi,eax
c001abcd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001abd3:	81 c6 00 10 00 00    	add    esi,0x1000
c001abd9:	e8 c7 ce fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001abde:	39 c6                	cmp    esi,eax
c001abe0:	74 10                	je     c001abf2 <SATA::open(int, int, void*)+0x6c>
c001abe2:	83 ec 0c             	sub    esp,0xc
c001abe5:	68 b8 f6 01 c0       	push   0xc001f6b8
c001abea:	e8 64 55 ff ff       	call   c0010153 <KePanic(char const*)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	83 ec 0c             	sub    esp,0xc
c001abf5:	6a 02                	push   0x2
c001abf7:	e8 99 e6 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001abfc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ac02:	6a 03                	push   0x3
c001ac04:	50                   	push   eax
c001ac05:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ac0b:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c001ac11:	e8 14 ed fe ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ac16:	83 c4 14             	add    esp,0x14
c001ac19:	53                   	push   ebx
c001ac1a:	e8 3f 11 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001ac1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac22:	e8 d7 21 ff ff       	call   c000cdfe <createPartitionsForDisk(PhysicalDisk*)>
c001ac27:	83 c4 14             	add    esp,0x14
c001ac2a:	31 c0                	xor    eax,eax
c001ac2c:	5b                   	pop    ebx
c001ac2d:	5e                   	pop    esi
c001ac2e:	c3                   	ret    
c001ac2f:	90                   	nop

c001ac30 <SATA::SATA()>:
c001ac30:	83 ec 0c             	sub    esp,0xc
c001ac33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac37:	83 ec 04             	sub    esp,0x4
c001ac3a:	68 00 02 00 00       	push   0x200
c001ac3f:	68 cc f6 01 c0       	push   0xc001f6cc
c001ac44:	50                   	push   eax
c001ac45:	e8 ac 10 ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac4a:	83 c4 10             	add    esp,0x10
c001ac4d:	ba 3c f7 01 c0       	mov    edx,0xc001f73c
c001ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac56:	89 10                	mov    DWORD PTR [eax],edx
c001ac58:	90                   	nop
c001ac59:	83 c4 0c             	add    esp,0xc
c001ac5c:	c3                   	ret    
c001ac5d:	90                   	nop

c001ac5e <SATA::access(unsigned long long, int, void*, bool)>:
c001ac5e:	55                   	push   ebp
c001ac5f:	57                   	push   edi
c001ac60:	56                   	push   esi
c001ac61:	53                   	push   ebx
c001ac62:	83 ec 2c             	sub    esp,0x2c
c001ac65:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac69:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac71:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac75:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac79:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac82:	7e 10                	jle    c001ac94 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac84:	83 ec 0c             	sub    esp,0xc
c001ac87:	68 dc f6 01 c0       	push   0xc001f6dc
c001ac8c:	e8 c2 54 ff ff       	call   c0010153 <KePanic(char const*)>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac9a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001aca0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aca6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acaa:	89 d0                	mov    eax,edx
c001acac:	c1 e0 07             	shl    eax,0x7
c001acaf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acb3:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001acbd:	51                   	push   ecx
c001acbe:	8d 42 02             	lea    eax,[edx+0x2]
c001acc1:	51                   	push   ecx
c001acc2:	c1 e0 07             	shl    eax,0x7
c001acc5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001acc9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001accd:	50                   	push   eax
c001acce:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001acd4:	e8 e7 ef ff ff       	call   c0019cc0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001acd9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ace5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ace9:	0f 84 4f 01 00 00    	je     c001ae3e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acf3:	c1 e0 09             	shl    eax,0x9
c001acf6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acff:	74 0e                	je     c001ad0f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ad01:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ad07:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ad0b:	89 c1                	mov    ecx,eax
c001ad0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ad13:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad19:	8d 42 02             	lea    eax,[edx+0x2]
c001ad1c:	c1 e0 07             	shl    eax,0x7
c001ad1f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ad23:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad25:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ad2b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ad31:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad35:	c1 e1 05             	shl    ecx,0x5
c001ad38:	01 c8                	add    eax,ecx
c001ad3a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ad3e:	83 e1 01             	and    ecx,0x1
c001ad41:	89 ce                	mov    esi,ecx
c001ad43:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad45:	c1 e6 06             	shl    esi,0x6
c001ad48:	83 e1 bf             	and    ecx,0xffffffbf
c001ad4b:	09 f1                	or     ecx,esi
c001ad4d:	88 08                	mov    BYTE PTR [eax],cl
c001ad4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad51:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad57:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad5d:	89 08                	mov    DWORD PTR [eax],ecx
c001ad5f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad65:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad6b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad71:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad74:	50                   	push   eax
c001ad75:	68 90 00 00 00       	push   0x90
c001ad7a:	6a 00                	push   0x0
c001ad7c:	56                   	push   esi
c001ad7d:	e8 4e 57 fe ff       	call   c00004d0 <memset>
c001ad82:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad88:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad8c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad92:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad9a:	83 c4 10             	add    esp,0x10
c001ad9d:	48                   	dec    eax
c001ad9e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ada3:	89 c1                	mov    ecx,eax
c001ada5:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001adab:	25 00 00 c0 ff       	and    eax,0xffc00000
c001adb0:	09 c8                	or     eax,ecx
c001adb2:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001adb8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001adbb:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001adc2:	66 25 00 7f          	and    ax,0x7f00
c001adc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adca:	66 0d 27 80          	or     ax,0x8027
c001adce:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001add3:	66 89 06             	mov    WORD PTR [esi],ax
c001add6:	19 c0                	sbb    eax,eax
c001add8:	83 e0 f0             	and    eax,0xfffffff0
c001addb:	83 c0 35             	add    eax,0x35
c001adde:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ade1:	89 e8                	mov    eax,ebp
c001ade3:	c1 e8 10             	shr    eax,0x10
c001ade6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ade9:	89 e8                	mov    eax,ebp
c001adeb:	c1 e8 18             	shr    eax,0x18
c001adee:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001adf1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001adf5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001adf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adfc:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001adff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae03:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ae07:	89 d6                	mov    esi,edx
c001ae09:	31 c0                	xor    eax,eax
c001ae0b:	c1 e6 07             	shl    esi,0x7
c001ae0e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ae12:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ae18:	80 e1 88             	and    cl,0x88
c001ae1b:	74 0a                	je     c001ae27 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ae1d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae22:	74 0a                	je     c001ae2e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ae24:	40                   	inc    eax
c001ae25:	eb eb                	jmp    c001ae12 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ae27:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ae2c:	75 17                	jne    c001ae45 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ae2e:	83 ec 0c             	sub    esp,0xc
c001ae31:	68 15 f7 01 c0       	push   0xc001f715
c001ae36:	e8 ad f6 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	b8 01 00 00 00       	mov    eax,0x1
c001ae43:	eb 5d                	jmp    c001aea2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae45:	b8 01 00 00 00       	mov    eax,0x1
c001ae4a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae4e:	c1 e2 07             	shl    edx,0x7
c001ae51:	d3 e0                	shl    eax,cl
c001ae53:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae57:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae5d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae63:	85 c8                	test   eax,ecx
c001ae65:	74 16                	je     c001ae7d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae67:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae6d:	0f ba e1 1e          	bt     ecx,0x1e
c001ae71:	73 ea                	jae    c001ae5d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae73:	83 ec 0c             	sub    esp,0xc
c001ae76:	68 23 f7 01 c0       	push   0xc001f723
c001ae7b:	eb b9                	jmp    c001ae36 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae7d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae83:	0f ba e0 1e          	bt     eax,0x1e
c001ae87:	72 b5                	jb     c001ae3e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae89:	31 c0                	xor    eax,eax
c001ae8b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae90:	75 10                	jne    c001aea2 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae92:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae98:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aea0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aea2:	83 c4 2c             	add    esp,0x2c
c001aea5:	5b                   	pop    ebx
c001aea6:	5e                   	pop    esi
c001aea7:	5f                   	pop    edi
c001aea8:	5d                   	pop    ebp
c001aea9:	c3                   	ret    

c001aeaa <SATA::read(unsigned long long, int, void*)>:
c001aeaa:	57                   	push   edi
c001aeab:	b8 04 00 00 00       	mov    eax,0x4
c001aeb0:	56                   	push   esi
c001aeb1:	53                   	push   ebx
c001aeb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aeb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aeba:	8d 7a ff             	lea    edi,[edx-0x1]
c001aebd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aec1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aec5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aecb:	77 25                	ja     c001aef2 <SATA::read(unsigned long long, int, void*)+0x48>
c001aecd:	b8 06 00 00 00       	mov    eax,0x6
c001aed2:	85 f6                	test   esi,esi
c001aed4:	74 1c                	je     c001aef2 <SATA::read(unsigned long long, int, void*)+0x48>
c001aed6:	50                   	push   eax
c001aed7:	50                   	push   eax
c001aed8:	6a 00                	push   0x0
c001aeda:	56                   	push   esi
c001aedb:	52                   	push   edx
c001aedc:	53                   	push   ebx
c001aedd:	51                   	push   ecx
c001aede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aee2:	e8 77 fd ff ff       	call   c001ac5e <SATA::access(unsigned long long, int, void*, bool)>
c001aee7:	83 c4 20             	add    esp,0x20
c001aeea:	85 c0                	test   eax,eax
c001aeec:	0f 95 c0             	setne  al
c001aeef:	0f b6 c0             	movzx  eax,al
c001aef2:	5b                   	pop    ebx
c001aef3:	5e                   	pop    esi
c001aef4:	5f                   	pop    edi
c001aef5:	c3                   	ret    

c001aef6 <SATA::write(unsigned long long, int, void*)>:
c001aef6:	55                   	push   ebp
c001aef7:	b8 04 00 00 00       	mov    eax,0x4
c001aefc:	57                   	push   edi
c001aefd:	56                   	push   esi
c001aefe:	53                   	push   ebx
c001aeff:	83 ec 0c             	sub    esp,0xc
c001af02:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001af06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001af0a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001af0d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001af11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001af15:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001af1b:	77 3d                	ja     c001af5a <SATA::write(unsigned long long, int, void*)+0x64>
c001af1d:	b8 06 00 00 00       	mov    eax,0x6
c001af22:	85 ed                	test   ebp,ebp
c001af24:	74 34                	je     c001af5a <SATA::write(unsigned long long, int, void*)+0x64>
c001af26:	c1 e3 09             	shl    ebx,0x9
c001af29:	01 eb                	add    ebx,ebp
c001af2b:	89 d6                	mov    esi,edx
c001af2d:	89 cf                	mov    edi,ecx
c001af2f:	83 c6 01             	add    esi,0x1
c001af32:	83 d7 00             	adc    edi,0x0
c001af35:	50                   	push   eax
c001af36:	50                   	push   eax
c001af37:	6a 01                	push   0x1
c001af39:	55                   	push   ebp
c001af3a:	81 c5 00 02 00 00    	add    ebp,0x200
c001af40:	6a 01                	push   0x1
c001af42:	51                   	push   ecx
c001af43:	52                   	push   edx
c001af44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af48:	e8 11 fd ff ff       	call   c001ac5e <SATA::access(unsigned long long, int, void*, bool)>
c001af4d:	83 c4 20             	add    esp,0x20
c001af50:	89 f2                	mov    edx,esi
c001af52:	89 f9                	mov    ecx,edi
c001af54:	39 dd                	cmp    ebp,ebx
c001af56:	75 d3                	jne    c001af2b <SATA::write(unsigned long long, int, void*)+0x35>
c001af58:	31 c0                	xor    eax,eax
c001af5a:	83 c4 0c             	add    esp,0xc
c001af5d:	5b                   	pop    ebx
c001af5e:	5e                   	pop    esi
c001af5f:	5f                   	pop    edi
c001af60:	5d                   	pop    ebp
c001af61:	c3                   	ret    

c001af62 <SATAPI::write(unsigned long long, int, void*)>:
c001af62:	b8 03 00 00 00       	mov    eax,0x3
c001af67:	c3                   	ret    

c001af68 <SATAPI::close(int, int, void*)>:
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af75:	85 c0                	test   eax,eax
c001af77:	74 0c                	je     c001af85 <SATAPI::close(int, int, void*)+0x1d>
c001af79:	83 ec 0c             	sub    esp,0xc
c001af7c:	8b 10                	mov    edx,DWORD PTR [eax]
c001af7e:	50                   	push   eax
c001af7f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	31 c0                	xor    eax,eax
c001af87:	83 c4 0c             	add    esp,0xc
c001af8a:	c3                   	ret    
c001af8b:	90                   	nop

c001af8c <SATAPI::SATAPI()>:
c001af8c:	83 ec 0c             	sub    esp,0xc
c001af8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af93:	83 ec 04             	sub    esp,0x4
c001af96:	68 00 08 00 00       	push   0x800
c001af9b:	68 6c f7 01 c0       	push   0xc001f76c
c001afa0:	50                   	push   eax
c001afa1:	e8 50 0d ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	ba 74 f8 01 c0       	mov    edx,0xc001f874
c001afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb2:	89 10                	mov    DWORD PTR [eax],edx
c001afb4:	90                   	nop
c001afb5:	83 c4 0c             	add    esp,0xc
c001afb8:	c3                   	ret    
c001afb9:	90                   	nop

c001afba <SATAPI::diskRemoved()>:
c001afba:	c3                   	ret    
c001afbb:	90                   	nop

c001afbc <SATAPI::diskInserted()>:
c001afbc:	83 ec 18             	sub    esp,0x18
c001afbf:	68 78 f7 01 c0       	push   0xc001f778
c001afc4:	e8 1f f5 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001afc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afcd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001afd4:	83 c4 1c             	add    esp,0x1c
c001afd7:	c3                   	ret    

c001afd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001afd8:	55                   	push   ebp
c001afd9:	57                   	push   edi
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	83 ec 38             	sub    esp,0x38
c001afdf:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001afe3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afe7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afef:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aff3:	68 90 f7 01 c0       	push   0xc001f790
c001aff8:	e8 eb f4 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001affd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001b003:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b009:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b00d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001b013:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b017:	83 c0 02             	add    eax,0x2
c001b01a:	c1 e0 07             	shl    eax,0x7
c001b01d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b021:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b029:	c1 e0 07             	shl    eax,0x7
c001b02c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001b030:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b034:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001b03e:	58                   	pop    eax
c001b03f:	5a                   	pop    edx
c001b040:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b044:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b04a:	e8 71 ec ff ff       	call   c0019cc0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b053:	83 c4 10             	add    esp,0x10
c001b056:	b8 01 00 00 00       	mov    eax,0x1
c001b05b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b060:	0f 84 49 02 00 00    	je     c001b2af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b066:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b070:	8b 00                	mov    eax,DWORD PTR [eax]
c001b072:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b078:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b07e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b082:	c1 e1 05             	shl    ecx,0x5
c001b085:	01 c8                	add    eax,ecx
c001b087:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b089:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b08f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b095:	89 08                	mov    DWORD PTR [eax],ecx
c001b097:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b09d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b0a3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b0a9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b0ac:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b0af:	50                   	push   eax
c001b0b0:	68 90 00 00 00       	push   0x90
c001b0b5:	6a 00                	push   0x0
c001b0b7:	53                   	push   ebx
c001b0b8:	e8 13 54 fe ff       	call   c00004d0 <memset>
c001b0bd:	b9 0c 00 00 00       	mov    ecx,0xc
c001b0c2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b0c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0c8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b0ce:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b0d2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b0d8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b0dc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b0e0:	48                   	dec    eax
c001b0e1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b0e6:	89 c1                	mov    ecx,eax
c001b0e8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b0ee:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0f3:	09 c8                	or     eax,ecx
c001b0f5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0fb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0fe:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b105:	66 25 00 7f          	and    ax,0x7f00
c001b109:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b10d:	66 0d 27 80          	or     ax,0x8027
c001b111:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b115:	66 89 03             	mov    WORD PTR [ebx],ax
c001b118:	89 d0                	mov    eax,edx
c001b11a:	c1 ea 18             	shr    edx,0x18
c001b11d:	c1 e8 10             	shr    eax,0x10
c001b120:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b123:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b126:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b12a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b12d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b131:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b134:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b13f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b143:	31 c0                	xor    eax,eax
c001b145:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b14b:	80 e1 88             	and    cl,0x88
c001b14e:	74 0a                	je     c001b15a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b150:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b155:	74 0a                	je     c001b161 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b157:	40                   	inc    eax
c001b158:	eb eb                	jmp    c001b145 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b15a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b15f:	75 43                	jne    c001b1a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b161:	83 ec 0c             	sub    esp,0xc
c001b164:	68 aa f7 01 c0       	push   0xc001f7aa
c001b169:	e8 7a f3 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b16e:	58                   	pop    eax
c001b16f:	5a                   	pop    edx
c001b170:	68 bf f7 01 c0       	push   0xc001f7bf
c001b175:	ff 35 84 0d 02 c0    	push   DWORD PTR ds:0xc0020d84
c001b17b:	e8 c6 d5 fe ff       	call   c0008746 <VgaText::puts(char const*)>
c001b180:	59                   	pop    ecx
c001b181:	5b                   	pop    ebx
c001b182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b186:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b18c:	e8 c9 eb ff ff       	call   c0019d5a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b191:	5e                   	pop    esi
c001b192:	5f                   	pop    edi
c001b193:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b197:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b19d:	e8 98 eb ff ff       	call   c0019d3a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b1a2:	eb 48                	jmp    c001b1ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b1a4:	be 01 00 00 00       	mov    esi,0x1
c001b1a9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b1ad:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b1b1:	d3 e6                	shl    esi,cl
c001b1b3:	c1 e7 07             	shl    edi,0x7
c001b1b6:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b1bc:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b1c1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b1c5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b1cb:	85 c6                	test   esi,eax
c001b1cd:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b1d3:	0f 84 a3 00 00 00    	je     c001b27c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b1d9:	0f ba e0 1e          	bt     eax,0x1e
c001b1dd:	73 1a                	jae    c001b1f9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	68 d1 f7 01 c0       	push   0xc001f7d1
c001b1e7:	e8 fc f2 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b1ec:	83 c4 10             	add    esp,0x10
c001b1ef:	b8 01 00 00 00       	mov    eax,0x1
c001b1f4:	e9 b6 00 00 00       	jmp    c001b2af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b1f9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b1ff:	83 f8 0d             	cmp    eax,0xd
c001b202:	77 0a                	ja     c001b20e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b204:	83 ec 0c             	sub    esp,0xc
c001b207:	68 c8 00 00 00       	push   0xc8
c001b20c:	eb 28                	jmp    c001b236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b20e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b214:	83 f8 0d             	cmp    eax,0xd
c001b217:	77 0a                	ja     c001b223 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b219:	83 ec 0c             	sub    esp,0xc
c001b21c:	68 58 02 00 00       	push   0x258
c001b221:	eb 13                	jmp    c001b236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b223:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b229:	83 f8 06             	cmp    eax,0x6
c001b22c:	77 10                	ja     c001b23e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b22e:	83 ec 0c             	sub    esp,0xc
c001b231:	68 dc 05 00 00       	push   0x5dc
c001b236:	e8 d1 89 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c001b23b:	83 c4 10             	add    esp,0x10
c001b23e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b242:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b245:	75 06                	jne    c001b24d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b247:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b24b:	74 15                	je     c001b262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b24d:	83 fb 06             	cmp    ebx,0x6
c001b250:	77 10                	ja     c001b262 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b252:	83 ec 0c             	sub    esp,0xc
c001b255:	68 c4 09 00 00       	push   0x9c4
c001b25a:	e8 ad 89 ff ff       	call   c0013c0c <milliTenthSleep(unsigned int)>
c001b25f:	83 c4 10             	add    esp,0x10
c001b262:	43                   	inc    ebx
c001b263:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b269:	0f 85 56 ff ff ff    	jne    c001b1c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b26f:	83 ec 0c             	sub    esp,0xc
c001b272:	68 e4 f7 01 c0       	push   0xc001f7e4
c001b277:	e9 6b ff ff ff       	jmp    c001b1e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b27c:	0f ba e0 1e          	bt     eax,0x1e
c001b280:	73 0d                	jae    c001b28f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b282:	83 ec 0c             	sub    esp,0xc
c001b285:	68 f8 f7 01 c0       	push   0xc001f7f8
c001b28a:	e9 58 ff ff ff       	jmp    c001b1e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b28f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b294:	74 17                	je     c001b2ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b296:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b29b:	74 10                	je     c001b2ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b29d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b2a3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b2a7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b2ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2ad:	31 c0                	xor    eax,eax
c001b2af:	83 c4 2c             	add    esp,0x2c
c001b2b2:	5b                   	pop    ebx
c001b2b3:	5e                   	pop    esi
c001b2b4:	5f                   	pop    edi
c001b2b5:	5d                   	pop    ebp
c001b2b6:	c3                   	ret    
c001b2b7:	90                   	nop

c001b2b8 <SATAPI::eject()>:
c001b2b8:	57                   	push   edi
c001b2b9:	b9 03 00 00 00       	mov    ecx,0x3
c001b2be:	83 ec 18             	sub    esp,0x18
c001b2c1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b2c5:	fc                   	cld    
c001b2c6:	31 c0                	xor    eax,eax
c001b2c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b2ca:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b2cf:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b2d4:	50                   	push   eax
c001b2d5:	6a 00                	push   0x0
c001b2d7:	6a 00                	push   0x0
c001b2d9:	6a 00                	push   0x0
c001b2db:	6a 00                	push   0x0
c001b2dd:	6a 02                	push   0x2
c001b2df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b2e3:	50                   	push   eax
c001b2e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2e8:	e8 eb fc ff ff       	call   c001afd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2ed:	31 c0                	xor    eax,eax
c001b2ef:	83 c4 38             	add    esp,0x38
c001b2f2:	5f                   	pop    edi
c001b2f3:	c3                   	ret    

c001b2f4 <SATAPI::detectMedia()>:
c001b2f4:	53                   	push   ebx
c001b2f5:	83 ec 14             	sub    esp,0x14
c001b2f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2fc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b302:	e8 bd 21 ff ff       	call   c000d4c4 <VCache::writeWriteBuffer()>
c001b307:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b30d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b311:	83 c4 18             	add    esp,0x18
c001b314:	5b                   	pop    ebx
c001b315:	e9 9a 21 ff ff       	jmp    c000d4b4 <VCache::invalidateReadBuffer()>

c001b31a <SATAPI::open(int, int, void*)>:
c001b31a:	56                   	push   esi
c001b31b:	53                   	push   ebx
c001b31c:	51                   	push   ecx
c001b31d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b325:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b32f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b335:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b33f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b343:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b34d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b353:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b35a:	e8 46 c7 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001b35f:	89 c6                	mov    esi,eax
c001b361:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b367:	81 c6 00 10 00 00    	add    esi,0x1000
c001b36d:	e8 33 c7 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001b372:	39 c6                	cmp    esi,eax
c001b374:	74 10                	je     c001b386 <SATAPI::open(int, int, void*)+0x6c>
c001b376:	83 ec 0c             	sub    esp,0xc
c001b379:	68 0d f8 01 c0       	push   0xc001f80d
c001b37e:	e8 d0 4d ff ff       	call   c0010153 <KePanic(char const*)>
c001b383:	83 c4 10             	add    esp,0x10
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	6a 02                	push   0x2
c001b38b:	e8 05 df fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001b390:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b396:	6a 03                	push   0x3
c001b398:	50                   	push   eax
c001b399:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b39f:	ff 35 30 0e 02 c0    	push   DWORD PTR ds:0xc0020e30
c001b3a5:	e8 80 e5 fe ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b3aa:	83 c4 14             	add    esp,0x14
c001b3ad:	68 74 01 00 00       	push   0x174
c001b3b2:	e8 02 c4 fe ff       	call   c00077b9 <malloc>
c001b3b7:	83 c4 0c             	add    esp,0xc
c001b3ba:	89 c6                	mov    esi,eax
c001b3bc:	6a 00                	push   0x0
c001b3be:	68 ff ff ff 7f       	push   0x7fffffff
c001b3c3:	6a 00                	push   0x0
c001b3c5:	6a 00                	push   0x0
c001b3c7:	53                   	push   ebx
c001b3c8:	68 23 f8 01 c0       	push   0xc001f823
c001b3cd:	50                   	push   eax
c001b3ce:	e8 f7 15 ff ff       	call   c000c9ca <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b3d3:	83 c4 14             	add    esp,0x14
c001b3d6:	56                   	push   esi
c001b3d7:	e8 a4 16 ff ff       	call   c000ca80 <LogicalDisk::assignDriveLetter()>
c001b3dc:	5a                   	pop    edx
c001b3dd:	0f be c0             	movsx  eax,al
c001b3e0:	59                   	pop    ecx
c001b3e1:	50                   	push   eax
c001b3e2:	68 70 f6 01 c0       	push   0xc001f670
c001b3e7:	e8 fc f0 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b3ec:	58                   	pop    eax
c001b3ed:	5a                   	pop    edx
c001b3ee:	56                   	push   esi
c001b3ef:	53                   	push   ebx
c001b3f0:	e8 33 05 ff ff       	call   c000b928 <Device::addChild(Device*)>
c001b3f5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3fe:	e8 5b 09 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001b403:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b40a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b40d:	e8 e2 fe ff ff       	call   c001b2f4 <SATAPI::detectMedia()>
c001b412:	83 c4 14             	add    esp,0x14
c001b415:	31 c0                	xor    eax,eax
c001b417:	5b                   	pop    ebx
c001b418:	5e                   	pop    esi
c001b419:	c3                   	ret    

c001b41a <SATAPI::read(unsigned long long, int, void*)>:
c001b41a:	57                   	push   edi
c001b41b:	56                   	push   esi
c001b41c:	53                   	push   ebx
c001b41d:	83 ec 3c             	sub    esp,0x3c
c001b420:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b424:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b428:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b42c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b430:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b434:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b438:	68 31 f8 01 c0       	push   0xc001f831
c001b43d:	e8 a6 f0 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b442:	83 c4 10             	add    esp,0x10
c001b445:	83 fe 04             	cmp    esi,0x4
c001b448:	7e 10                	jle    c001b45a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b44a:	83 ec 0c             	sub    esp,0xc
c001b44d:	68 42 f8 01 c0       	push   0xc001f842
c001b452:	e8 fc 4c ff ff       	call   c0010153 <KePanic(char const*)>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b460:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b466:	51                   	push   ecx
c001b467:	50                   	push   eax
c001b468:	83 c0 02             	add    eax,0x2
c001b46b:	c1 e0 07             	shl    eax,0x7
c001b46e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b474:	50                   	push   eax
c001b475:	52                   	push   edx
c001b476:	e8 09 e9 ff ff       	call   c0019d84 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b47b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b47f:	b9 03 00 00 00       	mov    ecx,0x3
c001b484:	fc                   	cld    
c001b485:	31 c0                	xor    eax,eax
c001b487:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b489:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b48e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b493:	83 c4 0c             	add    esp,0xc
c001b496:	6a 00                	push   0x0
c001b498:	6a 00                	push   0x0
c001b49a:	6a 00                	push   0x0
c001b49c:	6a 00                	push   0x0
c001b49e:	6a 02                	push   0x2
c001b4a0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b4a4:	50                   	push   eax
c001b4a5:	53                   	push   ebx
c001b4a6:	e8 2d fb ff ff       	call   c001afd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4ab:	83 c4 20             	add    esp,0x20
c001b4ae:	85 c0                	test   eax,eax
c001b4b0:	75 44                	jne    c001b4f6 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b4b2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b4b6:	b9 03 00 00 00       	mov    ecx,0x3
c001b4bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b4bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4c1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4c6:	0f c8                	bswap  eax
c001b4c8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4cc:	89 f0                	mov    eax,esi
c001b4ce:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4d2:	50                   	push   eax
c001b4d3:	56                   	push   esi
c001b4d4:	c1 e6 0b             	shl    esi,0xb
c001b4d7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4e3:	56                   	push   esi
c001b4e4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4e8:	50                   	push   eax
c001b4e9:	53                   	push   ebx
c001b4ea:	e8 e9 fa ff ff       	call   c001afd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4ef:	83 c4 20             	add    esp,0x20
c001b4f2:	85 c0                	test   eax,eax
c001b4f4:	74 14                	je     c001b50a <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4fa:	83 ec 0c             	sub    esp,0xc
c001b4fd:	53                   	push   ebx
c001b4fe:	e8 f1 fd ff ff       	call   c001b2f4 <SATAPI::detectMedia()>
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b50a:	83 c4 30             	add    esp,0x30
c001b50d:	5b                   	pop    ebx
c001b50e:	5e                   	pop    esi
c001b50f:	5f                   	pop    edi
c001b510:	c3                   	ret    
c001b511:	90                   	nop

c001b512 <IOAPIC::close(int, int, void*)>:
c001b512:	b8 00 00 00 00       	mov    eax,0x0
c001b517:	c3                   	ret    

c001b518 <apicGetBase()>:
c001b518:	55                   	push   ebp
c001b519:	89 e5                	mov    ebp,esp
c001b51b:	83 ec 18             	sub    esp,0x18
c001b51e:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001b523:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b529:	83 e0 08             	and    eax,0x8
c001b52c:	84 c0                	test   al,al
c001b52e:	75 07                	jne    c001b537 <apicGetBase()+0x1f>
c001b530:	b8 00 00 00 00       	mov    eax,0x0
c001b535:	eb 21                	jmp    c001b558 <apicGetBase()+0x40>
c001b537:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001b53c:	83 ec 08             	sub    esp,0x8
c001b53f:	6a 1b                	push   0x1b
c001b541:	50                   	push   eax
c001b542:	e8 ab b8 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b54d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b550:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b553:	25 00 00 ff ff       	and    eax,0xffff0000
c001b558:	c9                   	leave  
c001b559:	c3                   	ret    

c001b55a <IOAPIC::IOAPIC()>:
c001b55a:	83 ec 0c             	sub    esp,0xc
c001b55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b561:	83 ec 08             	sub    esp,0x8
c001b564:	68 a4 f8 01 c0       	push   0xc001f8a4
c001b569:	50                   	push   eax
c001b56a:	e8 51 05 ff ff       	call   c000bac0 <Device::Device(char const*)>
c001b56f:	83 c4 10             	add    esp,0x10
c001b572:	ba b4 f8 01 c0       	mov    edx,0xc001f8b4
c001b577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57b:	89 10                	mov    DWORD PTR [eax],edx
c001b57d:	90                   	nop
c001b57e:	83 c4 0c             	add    esp,0xc
c001b581:	c3                   	ret    

c001b582 <apicOpen()>:
c001b582:	55                   	push   ebp
c001b583:	89 e5                	mov    ebp,esp
c001b585:	53                   	push   ebx
c001b586:	83 ec 34             	sub    esp,0x34
c001b589:	a0 20 4a 02 c0       	mov    al,ds:0xc0024a20
c001b58e:	83 f0 01             	xor    eax,0x1
c001b591:	84 c0                	test   al,al
c001b593:	0f 84 9d 00 00 00    	je     c001b636 <apicOpen()+0xb4>
c001b599:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b59d:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c001b5a2:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5a5:	0f 83 84 00 00 00    	jae    c001b62f <apicOpen()+0xad>
c001b5ab:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5b2:	83 ec 0c             	sub    esp,0xc
c001b5b5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5b8:	e8 fc c1 fe ff       	call   c00077b9 <malloc>
c001b5bd:	83 c4 10             	add    esp,0x10
c001b5c0:	89 c3                	mov    ebx,eax
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	53                   	push   ebx
c001b5c6:	e8 8f ff ff ff       	call   c001b55a <IOAPIC::IOAPIC()>
c001b5cb:	83 c4 10             	add    esp,0x10
c001b5ce:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5d1:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5d4:	25 ff 00 00 00       	and    eax,0xff
c001b5d9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5dc:	89 14 85 00 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb600],edx
c001b5e3:	a1 e0 49 02 c0       	mov    eax,ds:0xc00249e0
c001b5e8:	40                   	inc    eax
c001b5e9:	a3 e0 49 02 c0       	mov    ds:0xc00249e0,eax
c001b5ee:	a1 38 0d 02 c0       	mov    eax,ds:0xc0020d38
c001b5f3:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5f9:	83 ec 08             	sub    esp,0x8
c001b5fc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b5ff:	50                   	push   eax
c001b600:	e8 23 03 ff ff       	call   c000b928 <Device::addChild(Device*)>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b60b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b60d:	83 c0 08             	add    eax,0x8
c001b610:	8b 10                	mov    edx,DWORD PTR [eax]
c001b612:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b615:	25 ff 00 00 00       	and    eax,0xff
c001b61a:	6a 00                	push   0x0
c001b61c:	6a 00                	push   0x0
c001b61e:	50                   	push   eax
c001b61f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b622:	ff d2                	call   edx
c001b624:	83 c4 10             	add    esp,0x10
c001b627:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b62a:	e9 6e ff ff ff       	jmp    c001b59d <apicOpen()+0x1b>
c001b62f:	c6 05 20 4a 02 c0 01 	mov    BYTE PTR ds:0xc0024a20,0x1
c001b636:	e8 dd fe ff ff       	call   c001b518 <apicGetBase()>
c001b63b:	05 f0 00 00 00       	add    eax,0xf0
c001b640:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b643:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b646:	8b 00                	mov    eax,DWORD PTR [eax]
c001b648:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b64b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b652:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b659:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b65c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b65f:	89 10                	mov    DWORD PTR [eax],edx
c001b661:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b668:	a1 50 35 02 c0       	mov    eax,ds:0xc0023550
c001b66d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b670:	7d 70                	jge    c001b6e2 <apicOpen()+0x160>
c001b672:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b675:	8b 04 85 60 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcaa0]
c001b67c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b67f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b682:	8b 04 85 60 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcaa0]
c001b689:	c1 e8 08             	shr    eax,0x8
c001b68c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b690:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b693:	8b 04 85 60 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcaa0]
c001b69a:	c1 e8 18             	shr    eax,0x18
c001b69d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6a0:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6a4:	75 37                	jne    c001b6dd <apicOpen()+0x15b>
c001b6a6:	e8 6d fe ff ff       	call   c001b518 <apicGetBase()>
c001b6ab:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6af:	75 07                	jne    c001b6b8 <apicOpen()+0x136>
c001b6b1:	ba 60 03 00 00       	mov    edx,0x360
c001b6b6:	eb 05                	jmp    c001b6bd <apicOpen()+0x13b>
c001b6b8:	ba 50 03 00 00       	mov    edx,0x350
c001b6bd:	01 d0                	add    eax,edx
c001b6bf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6c7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6ca:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6d1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6d8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6db:	89 10                	mov    DWORD PTR [eax],edx
c001b6dd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6e0:	eb 86                	jmp    c001b668 <apicOpen()+0xe6>
c001b6e2:	90                   	nop
c001b6e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6e6:	c9                   	leave  
c001b6e7:	c3                   	ret    

c001b6e8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6e8:	55                   	push   ebp
c001b6e9:	89 e5                	mov    ebp,esp
c001b6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6f4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6f7:	72 1d                	jb     c001b716 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6fc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b705:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b70b:	01 d0                	add    eax,edx
c001b70d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b710:	73 04                	jae    c001b716 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b712:	b0 01                	mov    al,0x1
c001b714:	eb 02                	jmp    c001b718 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b716:	b0 00                	mov    al,0x0
c001b718:	5d                   	pop    ebp
c001b719:	c3                   	ret    

c001b71a <IOAPIC::read(int)>:
c001b71a:	55                   	push   ebp
c001b71b:	89 e5                	mov    ebp,esp
c001b71d:	83 ec 10             	sub    esp,0x10
c001b720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b723:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b729:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b72c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b72f:	31 d2                	xor    edx,edx
c001b731:	88 c2                	mov    dl,al
c001b733:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b736:	89 10                	mov    DWORD PTR [eax],edx
c001b738:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b73b:	83 c0 10             	add    eax,0x10
c001b73e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b740:	c9                   	leave  
c001b741:	c3                   	ret    

c001b742 <IOAPIC::open(int, int, void*)>:
c001b742:	55                   	push   ebp
c001b743:	89 e5                	mov    ebp,esp
c001b745:	57                   	push   edi
c001b746:	56                   	push   esi
c001b747:	53                   	push   ebx
c001b748:	83 ec 04             	sub    esp,0x4
c001b74b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b74e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b751:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b760:	8b 14 85 40 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc9c0]
c001b767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b76a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b773:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b779:	8b 14 85 c0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc940]
c001b780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b783:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b78c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b795:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b79b:	89 c6                	mov    esi,eax
c001b79d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7a3:	89 d0                	mov    eax,edx
c001b7a5:	ba 00 00 00 00       	mov    edx,0x0
c001b7aa:	89 c7                	mov    edi,eax
c001b7ac:	83 e7 ff             	and    edi,0xffffffff
c001b7af:	89 f9                	mov    ecx,edi
c001b7b1:	89 d0                	mov    eax,edx
c001b7b3:	25 ff 00 00 00       	and    eax,0xff
c001b7b8:	89 c3                	mov    ebx,eax
c001b7ba:	89 c8                	mov    eax,ecx
c001b7bc:	89 da                	mov    edx,ebx
c001b7be:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7c1:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7c4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7c8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7cc:	83 e0 00             	and    eax,0x0
c001b7cf:	09 d0                	or     eax,edx
c001b7d1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7d8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7de:	8d 50 01             	lea    edx,[eax+0x1]
c001b7e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7e4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7ea:	31 d2                	xor    edx,edx
c001b7ec:	88 c2                	mov    dl,al
c001b7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7f1:	83 c2 08             	add    edx,0x8
c001b7f4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7f8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b7fe:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b804:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b808:	6a 01                	push   0x1
c001b80a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b80d:	e8 08 ff ff ff       	call   c001b71a <IOAPIC::read(int)>
c001b812:	83 c4 08             	add    esp,0x8
c001b815:	c1 f8 10             	sar    eax,0x10
c001b818:	25 ff 00 00 00       	and    eax,0xff
c001b81d:	8d 50 01             	lea    edx,[eax+0x1]
c001b820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b823:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b829:	b8 00 00 00 00       	mov    eax,0x0
c001b82e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b831:	5b                   	pop    ebx
c001b832:	5e                   	pop    esi
c001b833:	5f                   	pop    edi
c001b834:	5d                   	pop    ebp
c001b835:	c3                   	ret    

c001b836 <IOAPIC::write(int, int)>:
c001b836:	55                   	push   ebp
c001b837:	89 e5                	mov    ebp,esp
c001b839:	83 ec 10             	sub    esp,0x10
c001b83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b83f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b845:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b848:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b84b:	31 d2                	xor    edx,edx
c001b84d:	88 c2                	mov    dl,al
c001b84f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b852:	89 10                	mov    DWORD PTR [eax],edx
c001b854:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b857:	8d 50 10             	lea    edx,[eax+0x10]
c001b85a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b85d:	89 02                	mov    DWORD PTR [edx],eax
c001b85f:	90                   	nop
c001b860:	c9                   	leave  
c001b861:	c3                   	ret    

c001b862 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b862:	55                   	push   ebp
c001b863:	89 e5                	mov    ebp,esp
c001b865:	53                   	push   ebx
c001b866:	83 ec 2c             	sub    esp,0x2c
c001b869:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b86c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b86f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b872:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b875:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b878:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b87b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b87e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b881:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b884:	88 d8                	mov    al,bl
c001b886:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b889:	88 c8                	mov    al,cl
c001b88b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b88e:	88 d0                	mov    al,dl
c001b890:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b893:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b896:	25 ff 00 00 00       	and    eax,0xff
c001b89b:	83 c0 08             	add    eax,0x8
c001b89e:	01 c0                	add    eax,eax
c001b8a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8a3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8a6:	25 ff 00 00 00       	and    eax,0xff
c001b8ab:	83 c0 08             	add    eax,0x8
c001b8ae:	01 c0                	add    eax,eax
c001b8b0:	40                   	inc    eax
c001b8b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8b7:	50                   	push   eax
c001b8b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8bb:	e8 5a fe ff ff       	call   c001b71a <IOAPIC::read(int)>
c001b8c0:	83 c4 08             	add    esp,0x8
c001b8c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8c6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8cd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8d0:	c1 e0 18             	shl    eax,0x18
c001b8d3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8d6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8dc:	52                   	push   edx
c001b8dd:	50                   	push   eax
c001b8de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8e1:	e8 50 ff ff ff       	call   c001b836 <IOAPIC::write(int, int)>
c001b8e6:	83 c4 0c             	add    esp,0xc
c001b8e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8ec:	50                   	push   eax
c001b8ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8f0:	e8 25 fe ff ff       	call   c001b71a <IOAPIC::read(int)>
c001b8f5:	83 c4 08             	add    esp,0x8
c001b8f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8fb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b902:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b909:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b910:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b914:	74 09                	je     c001b91f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b916:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b91d:	eb 07                	jmp    c001b926 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b91f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b926:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b92a:	74 09                	je     c001b935 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b92c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b933:	eb 07                	jmp    c001b93c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b935:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b93c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b943:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b946:	25 ff 00 00 00       	and    eax,0xff
c001b94b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b94e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b954:	52                   	push   edx
c001b955:	50                   	push   eax
c001b956:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b959:	e8 d8 fe ff ff       	call   c001b836 <IOAPIC::write(int, int)>
c001b95e:	83 c4 0c             	add    esp,0xc
c001b961:	90                   	nop
c001b962:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b965:	c9                   	leave  
c001b966:	c3                   	ret    
c001b967:	90                   	nop

c001b968 <APICTimer::close(int, int, void*)>:
c001b968:	b8 00 00 00 00       	mov    eax,0x0
c001b96d:	c3                   	ret    
c001b96e:	66 90                	xchg   ax,ax

c001b970 <apicTimerHandler(regs*, void*)>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b977:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b979:	b8 10 27 00 00       	mov    eax,0x2710
c001b97e:	ba 00 00 00 00       	mov    edx,0x0
c001b983:	f7 f1                	div    ecx
c001b985:	83 ec 0c             	sub    esp,0xc
c001b988:	50                   	push   eax
c001b989:	e8 56 18 ff ff       	call   c000d1e4 <timerHandler(unsigned int)>
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	90                   	nop
c001b992:	83 c4 0c             	add    esp,0xc
c001b995:	c3                   	ret    
c001b996:	66 90                	xchg   ax,ax

c001b998 <APICTimer::open(int, int, void*)>:
c001b998:	83 ec 0c             	sub    esp,0xc
c001b99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a1:	83 c0 24             	add    eax,0x24
c001b9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a6:	83 ec 08             	sub    esp,0x8
c001b9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b1:	ff d0                	call   eax
c001b9b3:	83 c4 10             	add    esp,0x10
c001b9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9cc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	51                   	push   ecx
c001b9e0:	6a 01                	push   0x1
c001b9e2:	68 70 b9 01 c0       	push   0xc001b970
c001b9e7:	52                   	push   edx
c001b9e8:	50                   	push   eax
c001b9e9:	e8 e6 fe fe ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ee:	83 c4 20             	add    esp,0x20
c001b9f1:	89 c2                	mov    edx,eax
c001b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9fd:	b8 00 00 00 00       	mov    eax,0x0
c001ba02:	83 c4 0c             	add    esp,0xc
c001ba05:	c3                   	ret    
c001ba06:	66 90                	xchg   ax,ax

c001ba08 <APICTimer::write(int)>:
c001ba08:	83 ec 0c             	sub    esp,0xc
c001ba0b:	83 ec 0c             	sub    esp,0xc
c001ba0e:	68 d8 f8 01 c0       	push   0xc001f8d8
c001ba13:	e8 3b 47 ff ff       	call   c0010153 <KePanic(char const*)>
c001ba18:	83 c4 10             	add    esp,0x10
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba23:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba29:	90                   	nop
c001ba2a:	83 c4 0c             	add    esp,0xc
c001ba2d:	c3                   	ret    
c001ba2e:	66 90                	xchg   ax,ax

c001ba30 <APICTimer::APICTimer()>:
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba37:	83 ec 08             	sub    esp,0x8
c001ba3a:	68 e8 f8 01 c0       	push   0xc001f8e8
c001ba3f:	50                   	push   eax
c001ba40:	e8 d3 16 ff ff       	call   c000d118 <Timer::Timer(char const*)>
c001ba45:	83 c4 10             	add    esp,0x10
c001ba48:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c001ba4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba51:	89 10                	mov    DWORD PTR [eax],edx
c001ba53:	90                   	nop
c001ba54:	83 c4 0c             	add    esp,0xc
c001ba57:	c3                   	ret    

c001ba58 <PIT::write(int)>:
c001ba58:	83 ec 10             	sub    esp,0x10
c001ba5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba63:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba6d:	a3 24 4a 02 c0       	mov    ds:0xc0024a24,eax
c001ba72:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba77:	99                   	cdq    
c001ba78:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba80:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba87:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba8c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba90:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba95:	ee                   	out    dx,al
c001ba96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba9a:	25 ff 00 00 00       	and    eax,0xff
c001ba9f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001baa6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001baaa:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001baae:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bab3:	ee                   	out    dx,al
c001bab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bab8:	c1 f8 08             	sar    eax,0x8
c001babb:	25 ff 00 00 00       	and    eax,0xff
c001bac0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bac7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bacb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bacf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bad4:	ee                   	out    dx,al
c001bad5:	90                   	nop
c001bad6:	83 c4 10             	add    esp,0x10
c001bad9:	c3                   	ret    
c001bada:	66 90                	xchg   ax,ax

c001badc <pitHandler(regs*, void*)>:
c001badc:	83 ec 0c             	sub    esp,0xc
c001badf:	8b 0d 24 4a 02 c0    	mov    ecx,DWORD PTR ds:0xc0024a24
c001bae5:	b8 10 27 00 00       	mov    eax,0x2710
c001baea:	99                   	cdq    
c001baeb:	f7 f9                	idiv   ecx
c001baed:	83 ec 0c             	sub    esp,0xc
c001baf0:	50                   	push   eax
c001baf1:	e8 ee 16 ff ff       	call   c000d1e4 <timerHandler(unsigned int)>
c001baf6:	83 c4 10             	add    esp,0x10
c001baf9:	90                   	nop
c001bafa:	83 c4 0c             	add    esp,0xc
c001bafd:	c3                   	ret    
c001bafe:	66 90                	xchg   ax,ax

c001bb00 <PIT::open(int, int, void*)>:
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb07:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb09:	83 c0 24             	add    eax,0x24
c001bb0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb0e:	83 ec 08             	sub    esp,0x8
c001bb11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb19:	ff d0                	call   eax
c001bb1b:	83 c4 10             	add    esp,0x10
c001bb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	6a 00                	push   0x0
c001bb27:	6a 01                	push   0x1
c001bb29:	68 dc ba 01 c0       	push   0xc001badc
c001bb2e:	6a 00                	push   0x0
c001bb30:	50                   	push   eax
c001bb31:	e8 9e fd fe ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb36:	83 c4 20             	add    esp,0x20
c001bb39:	89 c2                	mov    edx,eax
c001bb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb45:	b8 00 00 00 00       	mov    eax,0x0
c001bb4a:	83 c4 0c             	add    esp,0xc
c001bb4d:	c3                   	ret    
c001bb4e:	66 90                	xchg   ax,ax

c001bb50 <PIT::close(int, int, void*)>:
c001bb50:	83 ec 0c             	sub    esp,0xc
c001bb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb57:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb65:	6a 01                	push   0x1
c001bb67:	68 dc ba 01 c0       	push   0xc001badc
c001bb6c:	6a 00                	push   0x0
c001bb6e:	50                   	push   eax
c001bb6f:	e8 96 fd fe ff       	call   c000b90a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb74:	83 c4 10             	add    esp,0x10
c001bb77:	b8 00 00 00 00       	mov    eax,0x0
c001bb7c:	83 c4 0c             	add    esp,0xc
c001bb7f:	c3                   	ret    

c001bb80 <PIT::PIT()>:
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb87:	83 ec 08             	sub    esp,0x8
c001bb8a:	68 24 f9 01 c0       	push   0xc001f924
c001bb8f:	50                   	push   eax
c001bb90:	e8 83 15 ff ff       	call   c000d118 <Timer::Timer(char const*)>
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	ba 4c f9 01 c0       	mov    edx,0xc001f94c
c001bb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba1:	89 10                	mov    DWORD PTR [eax],edx
c001bba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbad:	31 d2                	xor    edx,edx
c001bbaf:	88 c2                	mov    dl,al
c001bbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb5:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbc6:	31 d2                	xor    edx,edx
c001bbc8:	88 c2                	mov    dl,al
c001bbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbce:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbdd:	8d 50 01             	lea    edx,[eax+0x1]
c001bbe0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbe4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbea:	31 d2                	xor    edx,edx
c001bbec:	88 c2                	mov    dl,al
c001bbee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbf6:	83 e1 3f             	and    ecx,0x3f
c001bbf9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bbfd:	90                   	nop
c001bbfe:	83 c4 0c             	add    esp,0xc
c001bc01:	c3                   	ret    
c001bc02:	66 90                	xchg   ax,ax
c001bc04:	66 90                	xchg   ax,ax
c001bc06:	66 90                	xchg   ax,ax
c001bc08:	66 90                	xchg   ax,ax
c001bc0a:	66 90                	xchg   ax,ax
c001bc0c:	66 90                	xchg   ax,ax
c001bc0e:	66 90                	xchg   ax,ax

c001bc10 <avxDetect>:
c001bc10:	b8 01 00 00 00       	mov    eax,0x1
c001bc15:	0f a2                	cpuid  
c001bc17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc1d:	74 15                	je     c001bc34 <avxDetect.noAVX>
c001bc1f:	b8 01 00 00 00       	mov    eax,0x1
c001bc24:	0f a2                	cpuid  
c001bc26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc2c:	74 06                	je     c001bc34 <avxDetect.noAVX>
c001bc2e:	b8 01 00 00 00       	mov    eax,0x1
c001bc33:	c3                   	ret    

c001bc34 <avxDetect.noAVX>:
c001bc34:	b8 00 00 00 00       	mov    eax,0x0
c001bc39:	c3                   	ret    

c001bc3a <avxSave>:
c001bc3a:	53                   	push   ebx
c001bc3b:	52                   	push   edx
c001bc3c:	31 c0                	xor    eax,eax
c001bc3e:	48                   	dec    eax
c001bc3f:	89 c2                	mov    edx,eax
c001bc41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc45:	0f ae 23             	xsave  [ebx]
c001bc48:	5a                   	pop    edx
c001bc49:	5b                   	pop    ebx
c001bc4a:	c3                   	ret    

c001bc4b <avxLoad>:
c001bc4b:	53                   	push   ebx
c001bc4c:	52                   	push   edx
c001bc4d:	31 c0                	xor    eax,eax
c001bc4f:	48                   	dec    eax
c001bc50:	89 c2                	mov    edx,eax
c001bc52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc56:	0f ae 2b             	xrstor [ebx]
c001bc59:	5a                   	pop    edx
c001bc5a:	5b                   	pop    ebx
c001bc5b:	c3                   	ret    

c001bc5c <avxInit>:
c001bc5c:	e8 57 02 00 00       	call   c001beb8 <sseInit>
c001bc61:	50                   	push   eax
c001bc62:	51                   	push   ecx
c001bc63:	0f 20 e0             	mov    eax,cr4
c001bc66:	0d 00 00 04 00       	or     eax,0x40000
c001bc6b:	0f 22 e0             	mov    cr4,eax
c001bc6e:	31 c9                	xor    ecx,ecx
c001bc70:	0f 01 d0             	xgetbv 
c001bc73:	0d 07 00 00 00       	or     eax,0x7
c001bc78:	0f 01 d1             	xsetbv 
c001bc7b:	59                   	pop    ecx
c001bc7c:	58                   	pop    eax
c001bc7d:	c3                   	ret    

c001bc7e <avxClose>:
c001bc7e:	c3                   	ret    

c001bc7f <wouldSheSayYes>:
c001bc7f:	c3                   	ret    
c001bc80:	49                   	dec    ecx
c001bc81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc89:	75 20                	jne    c001bcab <isr0+0xb>
c001bc8b:	4e                   	dec    esi
c001bc8c:	79 61                	jns    c001bcef <isr7+0x3>
c001bc8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc93:	66 90                	xchg   ax,ax
c001bc95:	66 90                	xchg   ax,ax
c001bc97:	66 90                	xchg   ax,ax
c001bc99:	66 90                	xchg   ax,ax
c001bc9b:	66 90                	xchg   ax,ax
c001bc9d:	66 90                	xchg   ax,ax
c001bc9f:	90                   	nop

c001bca0 <isr0>:
c001bca0:	fa                   	cli    
c001bca1:	68 00 00 00 00       	push   0x0
c001bca6:	68 00 00 00 00       	push   0x0
c001bcab:	e9 44 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcb0 <isr1>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 01                	push   0x1
c001bcb5:	e9 3a 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcba <isr2>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 02                	push   0x2
c001bcbf:	e9 30 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcc4 <isr3>:
c001bcc4:	fa                   	cli    
c001bcc5:	6a 00                	push   0x0
c001bcc7:	6a 03                	push   0x3
c001bcc9:	e9 26 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcce <isr4>:
c001bcce:	fa                   	cli    
c001bccf:	6a 00                	push   0x0
c001bcd1:	6a 04                	push   0x4
c001bcd3:	e9 1c 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcd8 <isr5>:
c001bcd8:	fa                   	cli    
c001bcd9:	6a 00                	push   0x0
c001bcdb:	6a 05                	push   0x5
c001bcdd:	e9 12 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bce2 <isr6>:
c001bce2:	fa                   	cli    
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 06                	push   0x6
c001bce7:	e9 08 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcec <isr7>:
c001bcec:	fa                   	cli    
c001bced:	6a 00                	push   0x0
c001bcef:	6a 07                	push   0x7
c001bcf1:	e9 fe 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcf6 <isr8>:
c001bcf6:	fa                   	cli    
c001bcf7:	6a 08                	push   0x8
c001bcf9:	e9 f6 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcfe <isr9>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 09                	push   0x9
c001bd03:	e9 ec 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd08 <isr10>:
c001bd08:	fa                   	cli    
c001bd09:	6a 0a                	push   0xa
c001bd0b:	e9 e4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd10 <isr11>:
c001bd10:	fa                   	cli    
c001bd11:	6a 0b                	push   0xb
c001bd13:	e9 dc 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd18 <isr12>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0c                	push   0xc
c001bd1b:	e9 d4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd20 <isr13>:
c001bd20:	fa                   	cli    
c001bd21:	6a 0d                	push   0xd
c001bd23:	e9 cc 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd28 <isr14>:
c001bd28:	fa                   	cli    
c001bd29:	6a 0e                	push   0xe
c001bd2b:	e9 c4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd30 <isr15>:
c001bd30:	fa                   	cli    
c001bd31:	6a 00                	push   0x0
c001bd33:	6a 0f                	push   0xf
c001bd35:	e9 ba 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd3a <isr16>:
c001bd3a:	fa                   	cli    
c001bd3b:	6a 00                	push   0x0
c001bd3d:	6a 10                	push   0x10
c001bd3f:	e9 b0 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd44 <isr17>:
c001bd44:	fa                   	cli    
c001bd45:	6a 00                	push   0x0
c001bd47:	6a 11                	push   0x11
c001bd49:	e9 a6 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd4e <isr18>:
c001bd4e:	fa                   	cli    
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 12                	push   0x12
c001bd53:	e9 9c 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd58 <irq3>:
c001bd58:	fa                   	cli    
c001bd59:	6a 00                	push   0x0
c001bd5b:	6a 23                	push   0x23
c001bd5d:	e9 92 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd62 <irq4>:
c001bd62:	fa                   	cli    
c001bd63:	6a 00                	push   0x0
c001bd65:	6a 24                	push   0x24
c001bd67:	e9 88 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd6c <irq5>:
c001bd6c:	fa                   	cli    
c001bd6d:	6a 00                	push   0x0
c001bd6f:	6a 25                	push   0x25
c001bd71:	e9 7e 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd76 <irq6>:
c001bd76:	fa                   	cli    
c001bd77:	6a 00                	push   0x0
c001bd79:	6a 26                	push   0x26
c001bd7b:	e9 74 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd80 <irq7>:
c001bd80:	fa                   	cli    
c001bd81:	6a 00                	push   0x0
c001bd83:	6a 27                	push   0x27
c001bd85:	e9 6a 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd8a <irq8>:
c001bd8a:	fa                   	cli    
c001bd8b:	6a 00                	push   0x0
c001bd8d:	6a 28                	push   0x28
c001bd8f:	e9 60 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd94 <irq9>:
c001bd94:	fa                   	cli    
c001bd95:	6a 00                	push   0x0
c001bd97:	6a 29                	push   0x29
c001bd99:	e9 56 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd9e <irq10>:
c001bd9e:	fa                   	cli    
c001bd9f:	6a 00                	push   0x0
c001bda1:	6a 2a                	push   0x2a
c001bda3:	e9 4c 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bda8 <irq11>:
c001bda8:	fa                   	cli    
c001bda9:	6a 00                	push   0x0
c001bdab:	6a 2b                	push   0x2b
c001bdad:	e9 42 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdb2 <irq12>:
c001bdb2:	fa                   	cli    
c001bdb3:	6a 00                	push   0x0
c001bdb5:	6a 2c                	push   0x2c
c001bdb7:	e9 38 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdbc <irq13>:
c001bdbc:	fa                   	cli    
c001bdbd:	6a 00                	push   0x0
c001bdbf:	6a 2d                	push   0x2d
c001bdc1:	e9 2e 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdc6 <irq14>:
c001bdc6:	fa                   	cli    
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 2e                	push   0x2e
c001bdcb:	e9 24 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdd0 <irq15>:
c001bdd0:	fa                   	cli    
c001bdd1:	6a 00                	push   0x0
c001bdd3:	6a 2f                	push   0x2f
c001bdd5:	e9 1a 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdda <irq1>:
c001bdda:	fa                   	cli    
c001bddb:	6a 00                	push   0x0
c001bddd:	6a 21                	push   0x21
c001bddf:	eb 13                	jmp    c001bdf4 <int_common_stub>

c001bde1 <irq2>:
c001bde1:	fa                   	cli    
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 22                	push   0x22
c001bde6:	eb 0c                	jmp    c001bdf4 <int_common_stub>

c001bde8 <isr96>:
c001bde8:	6a 00                	push   0x0
c001bdea:	6a 60                	push   0x60
c001bdec:	fb                   	sti    
c001bded:	eb 05                	jmp    c001bdf4 <int_common_stub>

c001bdef <irq0>:
c001bdef:	fa                   	cli    
c001bdf0:	6a 00                	push   0x0
c001bdf2:	6a 20                	push   0x20

c001bdf4 <int_common_stub>:
c001bdf4:	60                   	pusha  
c001bdf5:	1e                   	push   ds
c001bdf6:	06                   	push   es
c001bdf7:	0f a0                	push   fs
c001bdf9:	0f a8                	push   gs
c001bdfb:	66 b8 10 00          	mov    ax,0x10
c001bdff:	66 8e d8             	mov    ds,ax
c001be02:	66 8e c0             	mov    es,ax
c001be05:	66 8e e0             	mov    fs,ax
c001be08:	66 8e e8             	mov    gs,ax
c001be0b:	54                   	push   esp
c001be0c:	fc                   	cld    
c001be0d:	e8 c2 ff fe ff       	call   c000bdd4 <int_handler>
c001be12:	81 c4 04 00 00 00    	add    esp,0x4
c001be18:	0f a9                	pop    gs
c001be1a:	0f a1                	pop    fs
c001be1c:	07                   	pop    es
c001be1d:	1f                   	pop    ds
c001be1e:	61                   	popa   
c001be1f:	81 c4 08 00 00 00    	add    esp,0x8
c001be25:	cf                   	iret   

c001be26 <irq16>:
c001be26:	fa                   	cli    
c001be27:	6a 00                	push   0x0
c001be29:	6a 30                	push   0x30
c001be2b:	e9 c4 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be30 <irq17>:
c001be30:	fa                   	cli    
c001be31:	6a 00                	push   0x0
c001be33:	6a 31                	push   0x31
c001be35:	e9 ba ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be3a <irq18>:
c001be3a:	fa                   	cli    
c001be3b:	6a 00                	push   0x0
c001be3d:	6a 32                	push   0x32
c001be3f:	e9 b0 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be44 <irq19>:
c001be44:	fa                   	cli    
c001be45:	6a 00                	push   0x0
c001be47:	6a 33                	push   0x33
c001be49:	e9 a6 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be4e <irq20>:
c001be4e:	fa                   	cli    
c001be4f:	6a 00                	push   0x0
c001be51:	6a 34                	push   0x34
c001be53:	e9 9c ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be58 <irq21>:
c001be58:	fa                   	cli    
c001be59:	6a 00                	push   0x0
c001be5b:	6a 35                	push   0x35
c001be5d:	e9 92 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be62 <irq22>:
c001be62:	fa                   	cli    
c001be63:	6a 00                	push   0x0
c001be65:	6a 36                	push   0x36
c001be67:	e9 88 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be6c <irq23>:
c001be6c:	fa                   	cli    
c001be6d:	6a 00                	push   0x0
c001be6f:	6a 37                	push   0x37
c001be71:	e9 7e ff ff ff       	jmp    c001bdf4 <int_common_stub>
c001be76:	66 90                	xchg   ax,ax
c001be78:	66 90                	xchg   ax,ax
c001be7a:	66 90                	xchg   ax,ax
c001be7c:	66 90                	xchg   ax,ax
c001be7e:	66 90                	xchg   ax,ax

c001be80 <i386GetRDRAND>:
c001be80:	b9 64 00 00 00       	mov    ecx,0x64

c001be85 <retry>:
c001be85:	0f c7 f0             	rdrand eax
c001be88:	72 05                	jb     c001be8f <retry.done>
c001be8a:	e2 f9                	loop   c001be85 <retry>

c001be8c <retry.fail>:
c001be8c:	31 c0                	xor    eax,eax
c001be8e:	c3                   	ret    

c001be8f <retry.done>:
c001be8f:	c3                   	ret    

c001be90 <absolutelyNoChanceInHell>:
c001be90:	b8 01 00 00 00       	mov    eax,0x1
c001be95:	0f a2                	cpuid  
c001be97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be9d:	74 06                	je     c001bea5 <sseDetect.noSSE>
c001be9f:	b8 01 00 00 00       	mov    eax,0x1
c001bea4:	c3                   	ret    

c001bea5 <sseDetect.noSSE>:
c001bea5:	31 c0                	xor    eax,eax
c001bea7:	c3                   	ret    

c001bea8 <sseSave>:
c001bea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beac:	0f ae 00             	fxsave [eax]
c001beaf:	c3                   	ret    

c001beb0 <sseLoad>:
c001beb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb4:	0f ae 08             	fxrstor [eax]
c001beb7:	c3                   	ret    

c001beb8 <sseInit>:
c001beb8:	e8 42 00 00 00       	call   c001beff <x87Init>
c001bebd:	0f 20 e0             	mov    eax,cr4
c001bec0:	66 0d 00 06          	or     ax,0x600
c001bec4:	0f 22 e0             	mov    cr4,eax
c001bec7:	c3                   	ret    

c001bec8 <sseClose>:
c001bec8:	c3                   	ret    
c001bec9:	66 90                	xchg   ax,ax
c001becb:	66 90                	xchg   ax,ax
c001becd:	66 90                	xchg   ax,ax
c001becf:	90                   	nop

c001bed0 <value_37F>:
c001bed0:	7f 03                	jg     c001bed5 <value_37A+0x1>

c001bed2 <value_37E>:
c001bed2:	7e 03                	jle    c001bed7 <x87Detect+0x1>

c001bed4 <value_37A>:
c001bed4:	7a 03                	jp     c001bed9 <x87Detect+0x3>

c001bed6 <x87Detect>:
c001bed6:	b8 01 00 00 00       	mov    eax,0x1
c001bedb:	0f a2                	cpuid  
c001bedd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bee3:	74 06                	je     c001beeb <x87Detect.nox87>
c001bee5:	b8 01 00 00 00       	mov    eax,0x1
c001beea:	c3                   	ret    

c001beeb <x87Detect.nox87>:
c001beeb:	b8 00 00 00 00       	mov    eax,0x0
c001bef0:	c3                   	ret    

c001bef1 <x87Save>:
c001bef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef5:	dd 30                	fnsave [eax]
c001bef7:	c3                   	ret    

c001bef8 <x87Load>:
c001bef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befc:	dd 20                	frstor [eax]
c001befe:	c3                   	ret    

c001beff <x87Init>:
c001beff:	0f 20 c0             	mov    eax,cr0
c001bf02:	66 25 fb ff          	and    ax,0xfffb
c001bf06:	66 0d 22 00          	or     ax,0x22
c001bf0a:	0f 22 c0             	mov    cr0,eax
c001bf0d:	db e3                	fninit 
c001bf0f:	0f 06                	clts   
c001bf11:	d9 2d d4 be 01 c0    	fldcw  WORD PTR ds:0xc001bed4
c001bf17:	c3                   	ret    

c001bf18 <x87Close>:
c001bf18:	c3                   	ret    
c001bf19:	66 90                	xchg   ax,ax
c001bf1b:	90                   	nop

c001bf1c <__do_global_ctors_aux>:
c001bf1c:	a1 cc ce 01 c0       	mov    eax,ds:0xc001cecc
c001bf21:	83 f8 ff             	cmp    eax,0xffffffff
c001bf24:	74 1a                	je     c001bf40 <__do_global_ctors_aux+0x24>
c001bf26:	55                   	push   ebp
c001bf27:	89 e5                	mov    ebp,esp
c001bf29:	53                   	push   ebx
c001bf2a:	52                   	push   edx
c001bf2b:	bb cc ce 01 c0       	mov    ebx,0xc001cecc
c001bf30:	ff d0                	call   eax
c001bf32:	83 eb 04             	sub    ebx,0x4
c001bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf37:	83 f8 ff             	cmp    eax,0xffffffff
c001bf3a:	75 f4                	jne    c001bf30 <__do_global_ctors_aux+0x14>
c001bf3c:	58                   	pop    eax
c001bf3d:	5b                   	pop    ebx
c001bf3e:	5d                   	pop    ebp
c001bf3f:	c3                   	ret    
c001bf40:	c3                   	ret    
c001bf41:	66 90                	xchg   ax,ax
c001bf43:	90                   	nop

c001bf44 <__divdi3>:
c001bf44:	55                   	push   ebp
c001bf45:	57                   	push   edi
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	83 ec 1c             	sub    esp,0x1c
c001bf4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf62:	85 db                	test   ebx,ebx
c001bf64:	0f 88 8e 00 00 00    	js     c001bff8 <__divdi3+0xb4>
c001bf6a:	89 dd                	mov    ebp,ebx
c001bf6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf74:	89 d3                	mov    ebx,edx
c001bf76:	85 d2                	test   edx,edx
c001bf78:	79 0d                	jns    c001bf87 <__divdi3+0x43>
c001bf7a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf7e:	f7 d8                	neg    eax
c001bf80:	83 d2 00             	adc    edx,0x0
c001bf83:	f7 da                	neg    edx
c001bf85:	89 d3                	mov    ebx,edx
c001bf87:	89 c7                	mov    edi,eax
c001bf89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf8c:	85 db                	test   ebx,ebx
c001bf8e:	75 48                	jne    c001bfd8 <__divdi3+0x94>
c001bf90:	39 ef                	cmp    edi,ebp
c001bf92:	76 24                	jbe    c001bfb8 <__divdi3+0x74>
c001bf94:	89 ea                	mov    edx,ebp
c001bf96:	f7 f7                	div    edi
c001bf98:	89 c1                	mov    ecx,eax
c001bf9a:	31 f6                	xor    esi,esi
c001bf9c:	89 c8                	mov    eax,ecx
c001bf9e:	89 f2                	mov    edx,esi
c001bfa0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfa4:	85 c9                	test   ecx,ecx
c001bfa6:	74 07                	je     c001bfaf <__divdi3+0x6b>
c001bfa8:	f7 d8                	neg    eax
c001bfaa:	83 d2 00             	adc    edx,0x0
c001bfad:	f7 da                	neg    edx
c001bfaf:	83 c4 1c             	add    esp,0x1c
c001bfb2:	5b                   	pop    ebx
c001bfb3:	5e                   	pop    esi
c001bfb4:	5f                   	pop    edi
c001bfb5:	5d                   	pop    ebp
c001bfb6:	c3                   	ret    
c001bfb7:	90                   	nop
c001bfb8:	85 ff                	test   edi,edi
c001bfba:	75 0b                	jne    c001bfc7 <__divdi3+0x83>
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	31 d2                	xor    edx,edx
c001bfc3:	f7 f3                	div    ebx
c001bfc5:	89 c7                	mov    edi,eax
c001bfc7:	31 d2                	xor    edx,edx
c001bfc9:	89 e8                	mov    eax,ebp
c001bfcb:	f7 f7                	div    edi
c001bfcd:	89 c6                	mov    esi,eax
c001bfcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfd2:	f7 f7                	div    edi
c001bfd4:	89 c1                	mov    ecx,eax
c001bfd6:	eb c4                	jmp    c001bf9c <__divdi3+0x58>
c001bfd8:	39 eb                	cmp    ebx,ebp
c001bfda:	77 3c                	ja     c001c018 <__divdi3+0xd4>
c001bfdc:	0f bd f3             	bsr    esi,ebx
c001bfdf:	83 f6 1f             	xor    esi,0x1f
c001bfe2:	75 40                	jne    c001c024 <__divdi3+0xe0>
c001bfe4:	39 eb                	cmp    ebx,ebp
c001bfe6:	72 09                	jb     c001bff1 <__divdi3+0xad>
c001bfe8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfeb:	0f 87 97 00 00 00    	ja     c001c088 <__divdi3+0x144>
c001bff1:	b9 01 00 00 00       	mov    ecx,0x1
c001bff6:	eb a4                	jmp    c001bf9c <__divdi3+0x58>
c001bff8:	f7 d9                	neg    ecx
c001bffa:	83 d3 00             	adc    ebx,0x0
c001bffd:	f7 db                	neg    ebx
c001bfff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c002:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c006:	89 dd                	mov    ebp,ebx
c001c008:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c010:	e9 5f ff ff ff       	jmp    c001bf74 <__divdi3+0x30>
c001c015:	8d 76 00             	lea    esi,[esi+0x0]
c001c018:	31 f6                	xor    esi,esi
c001c01a:	31 c9                	xor    ecx,ecx
c001c01c:	e9 7b ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c021:	8d 76 00             	lea    esi,[esi+0x0]
c001c024:	b8 20 00 00 00       	mov    eax,0x20
c001c029:	29 f0                	sub    eax,esi
c001c02b:	89 f1                	mov    ecx,esi
c001c02d:	d3 e3                	shl    ebx,cl
c001c02f:	89 fa                	mov    edx,edi
c001c031:	88 c1                	mov    cl,al
c001c033:	d3 ea                	shr    edx,cl
c001c035:	09 da                	or     edx,ebx
c001c037:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c03b:	89 f1                	mov    ecx,esi
c001c03d:	d3 e7                	shl    edi,cl
c001c03f:	89 eb                	mov    ebx,ebp
c001c041:	88 c1                	mov    cl,al
c001c043:	d3 eb                	shr    ebx,cl
c001c045:	89 f1                	mov    ecx,esi
c001c047:	d3 e5                	shl    ebp,cl
c001c049:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c04c:	88 c1                	mov    cl,al
c001c04e:	d3 ea                	shr    edx,cl
c001c050:	09 d5                	or     ebp,edx
c001c052:	89 e8                	mov    eax,ebp
c001c054:	89 da                	mov    edx,ebx
c001c056:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c05a:	89 d3                	mov    ebx,edx
c001c05c:	89 c5                	mov    ebp,eax
c001c05e:	f7 e7                	mul    edi
c001c060:	39 d3                	cmp    ebx,edx
c001c062:	72 18                	jb     c001c07c <__divdi3+0x138>
c001c064:	74 0a                	je     c001c070 <__divdi3+0x12c>
c001c066:	89 e9                	mov    ecx,ebp
c001c068:	31 f6                	xor    esi,esi
c001c06a:	e9 2d ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c06f:	90                   	nop
c001c070:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c073:	89 f1                	mov    ecx,esi
c001c075:	d3 e7                	shl    edi,cl
c001c077:	39 c7                	cmp    edi,eax
c001c079:	73 eb                	jae    c001c066 <__divdi3+0x122>
c001c07b:	90                   	nop
c001c07c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c07f:	31 f6                	xor    esi,esi
c001c081:	e9 16 ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c086:	66 90                	xchg   ax,ax
c001c088:	31 c9                	xor    ecx,ecx
c001c08a:	e9 0d ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c08f:	90                   	nop

c001c090 <__moddi3>:
c001c090:	55                   	push   ebp
c001c091:	57                   	push   edi
c001c092:	56                   	push   esi
c001c093:	53                   	push   ebx
c001c094:	83 ec 2c             	sub    esp,0x2c
c001c097:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c09b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c09f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0a7:	85 db                	test   ebx,ebx
c001c0a9:	0f 88 85 00 00 00    	js     c001c134 <__moddi3+0xa4>
c001c0af:	89 de                	mov    esi,ebx
c001c0b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0b9:	89 d7                	mov    edi,edx
c001c0bb:	85 d2                	test   edx,edx
c001c0bd:	79 09                	jns    c001c0c8 <__moddi3+0x38>
c001c0bf:	f7 d8                	neg    eax
c001c0c1:	83 d2 00             	adc    edx,0x0
c001c0c4:	f7 da                	neg    edx
c001c0c6:	89 d7                	mov    edi,edx
c001c0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0cc:	89 cd                	mov    ebp,ecx
c001c0ce:	85 ff                	test   edi,edi
c001c0d0:	75 52                	jne    c001c124 <__moddi3+0x94>
c001c0d2:	89 c3                	mov    ebx,eax
c001c0d4:	39 f0                	cmp    eax,esi
c001c0d6:	76 24                	jbe    c001c0fc <__moddi3+0x6c>
c001c0d8:	89 c8                	mov    eax,ecx
c001c0da:	89 f2                	mov    edx,esi
c001c0dc:	f7 f3                	div    ebx
c001c0de:	89 d6                	mov    esi,edx
c001c0e0:	89 f0                	mov    eax,esi
c001c0e2:	31 d2                	xor    edx,edx
c001c0e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0e8:	85 c9                	test   ecx,ecx
c001c0ea:	74 07                	je     c001c0f3 <__moddi3+0x63>
c001c0ec:	f7 d8                	neg    eax
c001c0ee:	83 d2 00             	adc    edx,0x0
c001c0f1:	f7 da                	neg    edx
c001c0f3:	83 c4 2c             	add    esp,0x2c
c001c0f6:	5b                   	pop    ebx
c001c0f7:	5e                   	pop    esi
c001c0f8:	5f                   	pop    edi
c001c0f9:	5d                   	pop    ebp
c001c0fa:	c3                   	ret    
c001c0fb:	90                   	nop
c001c0fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c100:	85 db                	test   ebx,ebx
c001c102:	75 0d                	jne    c001c111 <__moddi3+0x81>
c001c104:	b8 01 00 00 00       	mov    eax,0x1
c001c109:	31 d2                	xor    edx,edx
c001c10b:	f7 f7                	div    edi
c001c10d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c111:	89 f0                	mov    eax,esi
c001c113:	31 d2                	xor    edx,edx
c001c115:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c119:	f7 f7                	div    edi
c001c11b:	89 e8                	mov    eax,ebp
c001c11d:	f7 f7                	div    edi
c001c11f:	89 d6                	mov    esi,edx
c001c121:	eb bd                	jmp    c001c0e0 <__moddi3+0x50>
c001c123:	90                   	nop
c001c124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c128:	39 f7                	cmp    edi,esi
c001c12a:	76 20                	jbe    c001c14c <__moddi3+0xbc>
c001c12c:	89 c8                	mov    eax,ecx
c001c12e:	89 f2                	mov    edx,esi
c001c130:	eb b2                	jmp    c001c0e4 <__moddi3+0x54>
c001c132:	66 90                	xchg   ax,ax
c001c134:	f7 d9                	neg    ecx
c001c136:	83 d3 00             	adc    ebx,0x0
c001c139:	f7 db                	neg    ebx
c001c13b:	89 de                	mov    esi,ebx
c001c13d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c145:	e9 6f ff ff ff       	jmp    c001c0b9 <__moddi3+0x29>
c001c14a:	66 90                	xchg   ax,ax
c001c14c:	0f bd c7             	bsr    eax,edi
c001c14f:	83 f0 1f             	xor    eax,0x1f
c001c152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c156:	75 24                	jne    c001c17c <__moddi3+0xec>
c001c158:	39 f7                	cmp    edi,esi
c001c15a:	72 06                	jb     c001c162 <__moddi3+0xd2>
c001c15c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c160:	77 0c                	ja     c001c16e <__moddi3+0xde>
c001c162:	89 e9                	mov    ecx,ebp
c001c164:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c168:	19 fe                	sbb    esi,edi
c001c16a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c172:	89 f2                	mov    edx,esi
c001c174:	e9 6b ff ff ff       	jmp    c001c0e4 <__moddi3+0x54>
c001c179:	8d 76 00             	lea    esi,[esi+0x0]
c001c17c:	b8 20 00 00 00       	mov    eax,0x20
c001c181:	89 c2                	mov    edx,eax
c001c183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c187:	29 da                	sub    edx,ebx
c001c189:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c18d:	88 d9                	mov    cl,bl
c001c18f:	d3 e7                	shl    edi,cl
c001c191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c195:	88 d1                	mov    cl,dl
c001c197:	d3 e8                	shr    eax,cl
c001c199:	09 c7                	or     edi,eax
c001c19b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c19f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1a3:	89 d8                	mov    eax,ebx
c001c1a5:	88 d9                	mov    cl,bl
c001c1a7:	d3 e7                	shl    edi,cl
c001c1a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1ad:	89 f3                	mov    ebx,esi
c001c1af:	88 d1                	mov    cl,dl
c001c1b1:	d3 eb                	shr    ebx,cl
c001c1b3:	89 c7                	mov    edi,eax
c001c1b5:	88 c1                	mov    cl,al
c001c1b7:	d3 e6                	shl    esi,cl
c001c1b9:	89 e8                	mov    eax,ebp
c001c1bb:	88 d1                	mov    cl,dl
c001c1bd:	d3 e8                	shr    eax,cl
c001c1bf:	09 f0                	or     eax,esi
c001c1c1:	89 f9                	mov    ecx,edi
c001c1c3:	d3 e5                	shl    ebp,cl
c001c1c5:	89 da                	mov    edx,ebx
c001c1c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1cb:	89 d3                	mov    ebx,edx
c001c1cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1d1:	89 c6                	mov    esi,eax
c001c1d3:	89 d1                	mov    ecx,edx
c001c1d5:	39 d3                	cmp    ebx,edx
c001c1d7:	72 27                	jb     c001c200 <__moddi3+0x170>
c001c1d9:	74 21                	je     c001c1fc <__moddi3+0x16c>
c001c1db:	29 f5                	sub    ebp,esi
c001c1dd:	19 cb                	sbb    ebx,ecx
c001c1df:	89 de                	mov    esi,ebx
c001c1e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1e5:	d3 e6                	shl    esi,cl
c001c1e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1eb:	89 f9                	mov    ecx,edi
c001c1ed:	d3 ed                	shr    ebp,cl
c001c1ef:	09 ee                	or     esi,ebp
c001c1f1:	89 f0                	mov    eax,esi
c001c1f3:	d3 eb                	shr    ebx,cl
c001c1f5:	89 da                	mov    edx,ebx
c001c1f7:	e9 e8 fe ff ff       	jmp    c001c0e4 <__moddi3+0x54>
c001c1fc:	39 c5                	cmp    ebp,eax
c001c1fe:	73 db                	jae    c001c1db <__moddi3+0x14b>
c001c200:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c204:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c208:	89 d1                	mov    ecx,edx
c001c20a:	89 c6                	mov    esi,eax
c001c20c:	eb cd                	jmp    c001c1db <__moddi3+0x14b>
c001c20e:	66 90                	xchg   ax,ax

c001c210 <__udivdi3>:
c001c210:	55                   	push   ebp
c001c211:	57                   	push   edi
c001c212:	56                   	push   esi
c001c213:	53                   	push   ebx
c001c214:	83 ec 1c             	sub    esp,0x1c
c001c217:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c21b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c21f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c223:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c227:	85 d2                	test   edx,edx
c001c229:	75 41                	jne    c001c26c <__udivdi3+0x5c>
c001c22b:	39 f7                	cmp    edi,esi
c001c22d:	76 15                	jbe    c001c244 <__udivdi3+0x34>
c001c22f:	89 e8                	mov    eax,ebp
c001c231:	89 f2                	mov    edx,esi
c001c233:	f7 f7                	div    edi
c001c235:	31 db                	xor    ebx,ebx
c001c237:	89 da                	mov    edx,ebx
c001c239:	83 c4 1c             	add    esp,0x1c
c001c23c:	5b                   	pop    ebx
c001c23d:	5e                   	pop    esi
c001c23e:	5f                   	pop    edi
c001c23f:	5d                   	pop    ebp
c001c240:	c3                   	ret    
c001c241:	8d 76 00             	lea    esi,[esi+0x0]
c001c244:	89 f9                	mov    ecx,edi
c001c246:	85 ff                	test   edi,edi
c001c248:	75 0b                	jne    c001c255 <__udivdi3+0x45>
c001c24a:	b8 01 00 00 00       	mov    eax,0x1
c001c24f:	31 d2                	xor    edx,edx
c001c251:	f7 f7                	div    edi
c001c253:	89 c1                	mov    ecx,eax
c001c255:	31 d2                	xor    edx,edx
c001c257:	89 f0                	mov    eax,esi
c001c259:	f7 f1                	div    ecx
c001c25b:	89 c3                	mov    ebx,eax
c001c25d:	89 e8                	mov    eax,ebp
c001c25f:	f7 f1                	div    ecx
c001c261:	89 da                	mov    edx,ebx
c001c263:	83 c4 1c             	add    esp,0x1c
c001c266:	5b                   	pop    ebx
c001c267:	5e                   	pop    esi
c001c268:	5f                   	pop    edi
c001c269:	5d                   	pop    ebp
c001c26a:	c3                   	ret    
c001c26b:	90                   	nop
c001c26c:	39 f2                	cmp    edx,esi
c001c26e:	77 1c                	ja     c001c28c <__udivdi3+0x7c>
c001c270:	0f bd da             	bsr    ebx,edx
c001c273:	83 f3 1f             	xor    ebx,0x1f
c001c276:	75 24                	jne    c001c29c <__udivdi3+0x8c>
c001c278:	39 f2                	cmp    edx,esi
c001c27a:	72 08                	jb     c001c284 <__udivdi3+0x74>
c001c27c:	39 ef                	cmp    edi,ebp
c001c27e:	0f 87 84 00 00 00    	ja     c001c308 <__udivdi3+0xf8>
c001c284:	b8 01 00 00 00       	mov    eax,0x1
c001c289:	eb ac                	jmp    c001c237 <__udivdi3+0x27>
c001c28b:	90                   	nop
c001c28c:	31 db                	xor    ebx,ebx
c001c28e:	31 c0                	xor    eax,eax
c001c290:	89 da                	mov    edx,ebx
c001c292:	83 c4 1c             	add    esp,0x1c
c001c295:	5b                   	pop    ebx
c001c296:	5e                   	pop    esi
c001c297:	5f                   	pop    edi
c001c298:	5d                   	pop    ebp
c001c299:	c3                   	ret    
c001c29a:	66 90                	xchg   ax,ax
c001c29c:	b8 20 00 00 00       	mov    eax,0x20
c001c2a1:	29 d8                	sub    eax,ebx
c001c2a3:	88 d9                	mov    cl,bl
c001c2a5:	d3 e2                	shl    edx,cl
c001c2a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2ab:	89 fa                	mov    edx,edi
c001c2ad:	88 c1                	mov    cl,al
c001c2af:	d3 ea                	shr    edx,cl
c001c2b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2b5:	09 d1                	or     ecx,edx
c001c2b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2bb:	88 d9                	mov    cl,bl
c001c2bd:	d3 e7                	shl    edi,cl
c001c2bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2c3:	89 f7                	mov    edi,esi
c001c2c5:	88 c1                	mov    cl,al
c001c2c7:	d3 ef                	shr    edi,cl
c001c2c9:	88 d9                	mov    cl,bl
c001c2cb:	d3 e6                	shl    esi,cl
c001c2cd:	89 ea                	mov    edx,ebp
c001c2cf:	88 c1                	mov    cl,al
c001c2d1:	d3 ea                	shr    edx,cl
c001c2d3:	09 d6                	or     esi,edx
c001c2d5:	89 f0                	mov    eax,esi
c001c2d7:	89 fa                	mov    edx,edi
c001c2d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2dd:	89 d7                	mov    edi,edx
c001c2df:	89 c6                	mov    esi,eax
c001c2e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2e5:	39 d7                	cmp    edi,edx
c001c2e7:	72 13                	jb     c001c2fc <__udivdi3+0xec>
c001c2e9:	74 09                	je     c001c2f4 <__udivdi3+0xe4>
c001c2eb:	89 f0                	mov    eax,esi
c001c2ed:	31 db                	xor    ebx,ebx
c001c2ef:	e9 43 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c2f4:	88 d9                	mov    cl,bl
c001c2f6:	d3 e5                	shl    ebp,cl
c001c2f8:	39 c5                	cmp    ebp,eax
c001c2fa:	73 ef                	jae    c001c2eb <__udivdi3+0xdb>
c001c2fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2ff:	31 db                	xor    ebx,ebx
c001c301:	e9 31 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c306:	66 90                	xchg   ax,ax
c001c308:	31 c0                	xor    eax,eax
c001c30a:	e9 28 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c30f:	90                   	nop

c001c310 <__umoddi3>:
c001c310:	55                   	push   ebp
c001c311:	57                   	push   edi
c001c312:	56                   	push   esi
c001c313:	53                   	push   ebx
c001c314:	83 ec 1c             	sub    esp,0x1c
c001c317:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c31b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c31f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c327:	89 da                	mov    edx,ebx
c001c329:	85 c0                	test   eax,eax
c001c32b:	75 37                	jne    c001c364 <__umoddi3+0x54>
c001c32d:	39 df                	cmp    edi,ebx
c001c32f:	76 13                	jbe    c001c344 <__umoddi3+0x34>
c001c331:	89 f0                	mov    eax,esi
c001c333:	f7 f7                	div    edi
c001c335:	89 d0                	mov    eax,edx
c001c337:	31 d2                	xor    edx,edx
c001c339:	83 c4 1c             	add    esp,0x1c
c001c33c:	5b                   	pop    ebx
c001c33d:	5e                   	pop    esi
c001c33e:	5f                   	pop    edi
c001c33f:	5d                   	pop    ebp
c001c340:	c3                   	ret    
c001c341:	8d 76 00             	lea    esi,[esi+0x0]
c001c344:	89 fd                	mov    ebp,edi
c001c346:	85 ff                	test   edi,edi
c001c348:	75 0b                	jne    c001c355 <__umoddi3+0x45>
c001c34a:	b8 01 00 00 00       	mov    eax,0x1
c001c34f:	31 d2                	xor    edx,edx
c001c351:	f7 f7                	div    edi
c001c353:	89 c5                	mov    ebp,eax
c001c355:	89 d8                	mov    eax,ebx
c001c357:	31 d2                	xor    edx,edx
c001c359:	f7 f5                	div    ebp
c001c35b:	89 f0                	mov    eax,esi
c001c35d:	f7 f5                	div    ebp
c001c35f:	89 d0                	mov    eax,edx
c001c361:	eb d4                	jmp    c001c337 <__umoddi3+0x27>
c001c363:	90                   	nop
c001c364:	89 f1                	mov    ecx,esi
c001c366:	39 d8                	cmp    eax,ebx
c001c368:	76 0a                	jbe    c001c374 <__umoddi3+0x64>
c001c36a:	89 f0                	mov    eax,esi
c001c36c:	83 c4 1c             	add    esp,0x1c
c001c36f:	5b                   	pop    ebx
c001c370:	5e                   	pop    esi
c001c371:	5f                   	pop    edi
c001c372:	5d                   	pop    ebp
c001c373:	c3                   	ret    
c001c374:	0f bd e8             	bsr    ebp,eax
c001c377:	83 f5 1f             	xor    ebp,0x1f
c001c37a:	75 1c                	jne    c001c398 <__umoddi3+0x88>
c001c37c:	39 d8                	cmp    eax,ebx
c001c37e:	72 04                	jb     c001c384 <__umoddi3+0x74>
c001c380:	39 f7                	cmp    edi,esi
c001c382:	77 08                	ja     c001c38c <__umoddi3+0x7c>
c001c384:	89 da                	mov    edx,ebx
c001c386:	29 fe                	sub    esi,edi
c001c388:	19 c2                	sbb    edx,eax
c001c38a:	89 f1                	mov    ecx,esi
c001c38c:	89 c8                	mov    eax,ecx
c001c38e:	83 c4 1c             	add    esp,0x1c
c001c391:	5b                   	pop    ebx
c001c392:	5e                   	pop    esi
c001c393:	5f                   	pop    edi
c001c394:	5d                   	pop    ebp
c001c395:	c3                   	ret    
c001c396:	66 90                	xchg   ax,ax
c001c398:	ba 20 00 00 00       	mov    edx,0x20
c001c39d:	29 ea                	sub    edx,ebp
c001c39f:	89 e9                	mov    ecx,ebp
c001c3a1:	d3 e0                	shl    eax,cl
c001c3a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3a7:	89 f8                	mov    eax,edi
c001c3a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3ad:	88 d1                	mov    cl,dl
c001c3af:	d3 e8                	shr    eax,cl
c001c3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3b5:	09 c1                	or     ecx,eax
c001c3b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3bb:	89 e9                	mov    ecx,ebp
c001c3bd:	d3 e7                	shl    edi,cl
c001c3bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3c3:	89 d8                	mov    eax,ebx
c001c3c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3c9:	88 d1                	mov    cl,dl
c001c3cb:	d3 e8                	shr    eax,cl
c001c3cd:	89 c7                	mov    edi,eax
c001c3cf:	89 e9                	mov    ecx,ebp
c001c3d1:	d3 e3                	shl    ebx,cl
c001c3d3:	89 f0                	mov    eax,esi
c001c3d5:	88 d1                	mov    cl,dl
c001c3d7:	d3 e8                	shr    eax,cl
c001c3d9:	09 d8                	or     eax,ebx
c001c3db:	89 e9                	mov    ecx,ebp
c001c3dd:	d3 e6                	shl    esi,cl
c001c3df:	89 f3                	mov    ebx,esi
c001c3e1:	89 fa                	mov    edx,edi
c001c3e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3e7:	89 d1                	mov    ecx,edx
c001c3e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3ed:	89 c6                	mov    esi,eax
c001c3ef:	89 d7                	mov    edi,edx
c001c3f1:	39 d1                	cmp    ecx,edx
c001c3f3:	72 27                	jb     c001c41c <__umoddi3+0x10c>
c001c3f5:	74 21                	je     c001c418 <__umoddi3+0x108>
c001c3f7:	89 ca                	mov    edx,ecx
c001c3f9:	29 f3                	sub    ebx,esi
c001c3fb:	19 fa                	sbb    edx,edi
c001c3fd:	89 d0                	mov    eax,edx
c001c3ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c403:	d3 e0                	shl    eax,cl
c001c405:	89 e9                	mov    ecx,ebp
c001c407:	d3 eb                	shr    ebx,cl
c001c409:	09 d8                	or     eax,ebx
c001c40b:	d3 ea                	shr    edx,cl
c001c40d:	83 c4 1c             	add    esp,0x1c
c001c410:	5b                   	pop    ebx
c001c411:	5e                   	pop    esi
c001c412:	5f                   	pop    edi
c001c413:	5d                   	pop    ebp
c001c414:	c3                   	ret    
c001c415:	8d 76 00             	lea    esi,[esi+0x0]
c001c418:	39 c3                	cmp    ebx,eax
c001c41a:	73 db                	jae    c001c3f7 <__umoddi3+0xe7>
c001c41c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c420:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c424:	89 d7                	mov    edi,edx
c001c426:	89 c6                	mov    esi,eax
c001c428:	eb cd                	jmp    c001c3f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c42a <_init>:
c001c42a:	55                   	push   ebp
c001c42b:	89 e5                	mov    ebp,esp
c001c42d:	e8 c2 3c fe ff       	call   c00000f4 <frame_dummy>
c001c432:	e8 e5 fa ff ff       	call   c001bf1c <__do_global_ctors_aux>
c001c437:	5d                   	pop    ebp
c001c438:	c3                   	ret    

Disassembly of section .fini:

c001c439 <_fini>:
c001c439:	55                   	push   ebp
c001c43a:	89 e5                	mov    ebp,esp
c001c43c:	e8 43 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c441:	5d                   	pop    ebp
c001c442:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c444 <Computer::~Computer()>:
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	89 10                	mov    DWORD PTR [eax],edx
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	50                   	push   eax
c001c45a:	e8 cb f3 fe ff       	call   c000b82a <Device::~Device()>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	90                   	nop
c001c463:	83 c4 0c             	add    esp,0xc
c001c466:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c468 <Computer::~Computer()>:
c001c468:	83 ec 0c             	sub    esp,0xc
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c472:	e8 cd ff ff ff       	call   c001c444 <Computer::~Computer()>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	83 ec 08             	sub    esp,0x8
c001c47d:	68 70 01 00 00       	push   0x170
c001c482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c486:	e8 67 df fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	83 c4 0c             	add    esp,0xc
c001c491:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c492 <idleCommon()>:
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	fa                   	cli    
c001c496:	ff 05 e8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fe8
c001c49c:	e8 6b 74 ff ff       	call   c001390c <schedule()>
c001c4a1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c001c4a6:	48                   	dec    eax
c001c4a7:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001c4ac:	75 01                	jne    c001c4af <idleCommon()+0x1d>
c001c4ae:	fb                   	sti    
c001c4af:	83 c4 0c             	add    esp,0xc
c001c4b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4b4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4b4:	90                   	nop
c001c4b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4b6 <LinkedList<UnixFile>::LinkedList()>:
c001c4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4f6:	90                   	nop
c001c4f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4f8:	83 ec 0c             	sub    esp,0xc
c001c4fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c500:	75 10                	jne    c001c512 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	68 64 d9 01 c0       	push   0xc001d964
c001c50a:	e8 44 3c ff ff       	call   c0010153 <KePanic(char const*)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c516:	8b 00                	mov    eax,DWORD PTR [eax]
c001c518:	85 c0                	test   eax,eax
c001c51a:	74 34                	je     c001c550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c523:	85 c0                	test   eax,eax
c001c525:	74 29                	je     c001c550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c52e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c532:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c539:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c53d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c547:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c54e:	eb 65                	jmp    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 00                	mov    eax,DWORD PTR [eax]
c001c556:	85 c0                	test   eax,eax
c001c558:	75 4b                	jne    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c561:	85 c0                	test   eax,eax
c001c563:	75 40                	jne    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56d:	89 10                	mov    DWORD PTR [eax],edx
c001c56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c573:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c577:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c581:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c58f:	85 c0                	test   eax,eax
c001c591:	74 22                	je     c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c593:	83 ec 0c             	sub    esp,0xc
c001c596:	68 86 d9 01 c0       	push   0xc001d986
c001c59b:	e8 b3 3b ff ff       	call   c0010153 <KePanic(char const*)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	eb 10                	jmp    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5a5:	83 ec 0c             	sub    esp,0xc
c001c5a8:	68 90 d9 01 c0       	push   0xc001d990
c001c5ad:	e8 a1 3b ff ff       	call   c0010153 <KePanic(char const*)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bc:	8d 50 01             	lea    edx,[eax+0x1]
c001c5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5c6:	90                   	nop
c001c5c7:	83 c4 0c             	add    esp,0xc
c001c5ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5cc <LinkedList<UnixFile>::getFirstElement()>:
c001c5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5d4 <LinkedList<UnixFile>::removeFirst()>:
c001c5d4:	83 ec 0c             	sub    esp,0xc
c001c5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5db:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	75 12                	jne    c001c5f3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5e1:	83 ec 0c             	sub    esp,0xc
c001c5e4:	68 9c d9 01 c0       	push   0xc001d99c
c001c5e9:	e8 65 3b ff ff       	call   c0010153 <KePanic(char const*)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	eb 7e                	jmp    c001c671 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	74 10                	je     c001c611 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c601:	83 ec 0c             	sub    esp,0xc
c001c604:	68 e7 d9 01 c0       	push   0xc001d9e7
c001c609:	e8 45 3b ff ff       	call   c0010153 <KePanic(char const*)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c615:	8b 00                	mov    eax,DWORD PTR [eax]
c001c617:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61a:	85 c0                	test   eax,eax
c001c61c:	75 33                	jne    c001c651 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63a:	83 f8 01             	cmp    eax,0x1
c001c63d:	74 21                	je     c001c660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c63f:	83 ec 0c             	sub    esp,0xc
c001c642:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c647:	e8 07 3b ff ff       	call   c0010153 <KePanic(char const*)>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	eb 0f                	jmp    c001c660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c655:	8b 00                	mov    eax,DWORD PTR [eax]
c001c657:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	89 10                	mov    DWORD PTR [eax],edx
c001c660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c667:	8d 50 ff             	lea    edx,[eax-0x1]
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c671:	83 c4 0c             	add    esp,0xc
c001c674:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c676 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c67a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c67d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c67e <DriverlessDevice::~DriverlessDevice()>:
c001c67e:	ba 3c e0 01 c0       	mov    edx,0xc001e03c
c001c683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c687:	89 10                	mov    DWORD PTR [eax],edx
c001c689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c68d:	50                   	push   eax
c001c68e:	e8 97 f1 fe ff       	call   c000b82a <Device::~Device()>
c001c693:	83 c4 04             	add    esp,0x4
c001c696:	90                   	nop
c001c697:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c698 <DriverlessDevice::~DriverlessDevice()>:
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a2:	e8 d7 ff ff ff       	call   c001c67e <DriverlessDevice::~DriverlessDevice()>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	83 ec 08             	sub    esp,0x8
c001c6ad:	68 58 01 00 00       	push   0x158
c001c6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b6:	e8 37 dd fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	83 c4 0c             	add    esp,0xc
c001c6c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6c2 <LinkedList<Device>::addElement(Device*)>:
c001c6c2:	83 ec 0c             	sub    esp,0xc
c001c6c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6ca:	75 10                	jne    c001c6dc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	68 64 d9 01 c0       	push   0xc001d964
c001c6d4:	e8 7a 3a ff ff       	call   c0010153 <KePanic(char const*)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e2:	85 c0                	test   eax,eax
c001c6e4:	74 3a                	je     c001c720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ed:	85 c0                	test   eax,eax
c001c6ef:	74 2f                	je     c001c720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c714:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c71e:	eb 68                	jmp    c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c724:	8b 00                	mov    eax,DWORD PTR [eax]
c001c726:	85 c0                	test   eax,eax
c001c728:	75 4e                	jne    c001c778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c731:	85 c0                	test   eax,eax
c001c733:	75 43                	jne    c001c778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c739:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c73d:	89 10                	mov    DWORD PTR [eax],edx
c001c73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c743:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c747:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c751:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c762:	85 c0                	test   eax,eax
c001c764:	74 22                	je     c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c766:	83 ec 0c             	sub    esp,0xc
c001c769:	68 86 d9 01 c0       	push   0xc001d986
c001c76e:	e8 e0 39 ff ff       	call   c0010153 <KePanic(char const*)>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	eb 10                	jmp    c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	68 90 d9 01 c0       	push   0xc001d990
c001c780:	e8 ce 39 ff ff       	call   c0010153 <KePanic(char const*)>
c001c785:	83 c4 10             	add    esp,0x10
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c78f:	8d 50 01             	lea    edx,[eax+0x1]
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c799:	90                   	nop
c001c79a:	83 c4 0c             	add    esp,0xc
c001c79d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c79e <LinkedList<Device>::LinkedList()>:
c001c79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7de:	90                   	nop
c001c7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e6:	85 c0                	test   eax,eax
c001c7e8:	75 0e                	jne    c001c7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f1:	85 c0                	test   eax,eax
c001c7f3:	75 03                	jne    c001c7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7f5:	b0 01                	mov    al,0x1
c001c7f7:	c3                   	ret    
c001c7f8:	b0 00                	mov    al,0x0
c001c7fa:	90                   	nop
c001c7fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c800:	8b 00                	mov    eax,DWORD PTR [eax]
c001c802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80d:	85 c0                	test   eax,eax
c001c80f:	75 17                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c811:	83 ec 0c             	sub    esp,0xc
c001c814:	68 9c d9 01 c0       	push   0xc001d99c
c001c819:	e8 35 39 ff ff       	call   c0010153 <KePanic(char const*)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	e9 92 00 00 00       	jmp    c001c8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c826:	66 90                	xchg   ax,ax
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c82f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c832:	85 c0                	test   eax,eax
c001c834:	0f 95 c0             	setne  al
c001c837:	84 c0                	test   al,al
c001c839:	74 11                	je     c001c84c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	68 e7 d9 01 c0       	push   0xc001d9e7
c001c843:	e8 0b 39 ff ff       	call   c0010153 <KePanic(char const*)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	90                   	nop
c001c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c850:	8b 00                	mov    eax,DWORD PTR [eax]
c001c852:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c855:	85 c0                	test   eax,eax
c001c857:	0f 94 c0             	sete   al
c001c85a:	84 c0                	test   al,al
c001c85c:	74 36                	je     c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c862:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c87a:	83 f8 01             	cmp    eax,0x1
c001c87d:	74 25                	je     c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	68 c0 d9 01 c0       	push   0xc001d9c0
c001c887:	e8 c7 38 ff ff       	call   c0010153 <KePanic(char const*)>
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	eb 13                	jmp    c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c891:	8d 76 00             	lea    esi,[esi+0x0]
c001c894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c898:	8b 00                	mov    eax,DWORD PTR [eax]
c001c89a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a1:	89 10                	mov    DWORD PTR [eax],edx
c001c8a3:	90                   	nop
c001c8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8ab:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b8:	83 c4 0c             	add    esp,0xc
c001c8bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8c4:	75 12                	jne    c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	68 64 d9 01 c0       	push   0xc001d964
c001c8ce:	e8 80 38 ff ff       	call   c0010153 <KePanic(char const*)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	66 90                	xchg   ax,ax
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8de:	85 c0                	test   eax,eax
c001c8e0:	74 36                	je     c001c918 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	74 2b                	je     c001c918 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c903:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c90d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c914:	eb 6a                	jmp    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c916:	66 90                	xchg   ax,ax
c001c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c91e:	85 c0                	test   eax,eax
c001c920:	75 4e                	jne    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c929:	85 c0                	test   eax,eax
c001c92b:	75 43                	jne    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c931:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c935:	89 10                	mov    DWORD PTR [eax],edx
c001c937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c93f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c949:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c954:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c957:	85 c0                	test   eax,eax
c001c959:	74 25                	je     c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c95b:	83 ec 0c             	sub    esp,0xc
c001c95e:	68 86 d9 01 c0       	push   0xc001d986
c001c963:	e8 eb 37 ff ff       	call   c0010153 <KePanic(char const*)>
c001c968:	83 c4 10             	add    esp,0x10
c001c96b:	eb 13                	jmp    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c96d:	8d 76 00             	lea    esi,[esi+0x0]
c001c970:	83 ec 0c             	sub    esp,0xc
c001c973:	68 90 d9 01 c0       	push   0xc001d990
c001c978:	e8 d6 37 ff ff       	call   c0010153 <KePanic(char const*)>
c001c97d:	83 c4 10             	add    esp,0x10
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c987:	8d 50 01             	lea    edx,[eax+0x1]
c001c98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c991:	90                   	nop
c001c992:	83 c4 0c             	add    esp,0xc
c001c995:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c998 <ACPI::~ACPI()>:
c001c998:	83 ec 0c             	sub    esp,0xc
c001c99b:	ba a4 e5 01 c0       	mov    edx,0xc001e5a4
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	89 10                	mov    DWORD PTR [eax],edx
c001c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	50                   	push   eax
c001c9ae:	e8 77 ee fe ff       	call   c000b82a <Device::~Device()>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	90                   	nop
c001c9b7:	83 c4 0c             	add    esp,0xc
c001c9ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9bc <ACPI::~ACPI()>:
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9c6:	e8 cd ff ff ff       	call   c001c998 <ACPI::~ACPI()>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	83 ec 08             	sub    esp,0x8
c001c9d1:	68 64 12 00 00       	push   0x1264
c001c9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9da:	e8 13 da fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	83 c4 0c             	add    esp,0xc
c001c9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9e8 <LinkedList<Device>::~LinkedList()>:
c001c9e8:	90                   	nop
c001c9e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9ec <LinkedList<Device>::isEmpty()>:
c001c9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9f2:	85 c0                	test   eax,eax
c001c9f4:	75 0e                	jne    c001ca04 <LinkedList<Device>::isEmpty()+0x18>
c001c9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9fd:	85 c0                	test   eax,eax
c001c9ff:	75 03                	jne    c001ca04 <LinkedList<Device>::isEmpty()+0x18>
c001ca01:	b0 01                	mov    al,0x1
c001ca03:	c3                   	ret    
c001ca04:	b0 00                	mov    al,0x0
c001ca06:	90                   	nop
c001ca07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca08 <LinkedList<Device>::getFirstElement()>:
c001ca08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca0e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca10 <LinkedList<Device>::removeFirst()>:
c001ca10:	83 ec 0c             	sub    esp,0xc
c001ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca19:	85 c0                	test   eax,eax
c001ca1b:	75 17                	jne    c001ca34 <LinkedList<Device>::removeFirst()+0x24>
c001ca1d:	83 ec 0c             	sub    esp,0xc
c001ca20:	68 9c d9 01 c0       	push   0xc001d99c
c001ca25:	e8 29 37 ff ff       	call   c0010153 <KePanic(char const*)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	e9 92 00 00 00       	jmp    c001cac4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca32:	66 90                	xchg   ax,ax
c001ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca3b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca41:	85 c0                	test   eax,eax
c001ca43:	74 13                	je     c001ca58 <LinkedList<Device>::removeFirst()+0x48>
c001ca45:	83 ec 0c             	sub    esp,0xc
c001ca48:	68 e7 d9 01 c0       	push   0xc001d9e7
c001ca4d:	e8 01 37 ff ff       	call   c0010153 <KePanic(char const*)>
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	8d 76 00             	lea    esi,[esi+0x0]
c001ca58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca5e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca64:	85 c0                	test   eax,eax
c001ca66:	75 34                	jne    c001ca9c <LinkedList<Device>::removeFirst()+0x8c>
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca84:	83 f8 01             	cmp    eax,0x1
c001ca87:	74 27                	je     c001cab0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca89:	83 ec 0c             	sub    esp,0xc
c001ca8c:	68 c0 d9 01 c0       	push   0xc001d9c0
c001ca91:	e8 bd 36 ff ff       	call   c0010153 <KePanic(char const*)>
c001ca96:	83 c4 10             	add    esp,0x10
c001ca99:	eb 15                	jmp    c001cab0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca9b:	90                   	nop
c001ca9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001caa2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caac:	89 10                	mov    DWORD PTR [eax],edx
c001caae:	66 90                	xchg   ax,ax
c001cab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cab7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cac1:	8d 76 00             	lea    esi,[esi+0x0]
c001cac4:	83 c4 0c             	add    esp,0xc
c001cac7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cac8 <CPU::~CPU()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	ba 40 e7 01 c0       	mov    edx,0xc001e740
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	89 10                	mov    DWORD PTR [eax],edx
c001cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cada:	83 ec 0c             	sub    esp,0xc
c001cadd:	50                   	push   eax
c001cade:	e8 47 ed fe ff       	call   c000b82a <Device::~Device()>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	90                   	nop
c001cae7:	83 c4 0c             	add    esp,0xc
c001caea:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001caec <CPU::~CPU()>:
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf6:	e8 cd ff ff ff       	call   c001cac8 <CPU::~CPU()>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	83 ec 08             	sub    esp,0x8
c001cb01:	68 94 11 00 00       	push   0x1194
c001cb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb0a:	e8 e3 d8 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	83 c4 0c             	add    esp,0xc
c001cb15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb18:	90                   	nop
c001cb19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb1c <ThreadControlBlock::ThreadControlBlock()>:
c001cb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb20:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb57:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb63:	90                   	nop
c001cb64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cba8:	90                   	nop
c001cba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbb3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbb4 <PCI::~PCI()>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	ba fc f4 01 c0       	mov    edx,0xc001f4fc
c001cbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc0:	89 10                	mov    DWORD PTR [eax],edx
c001cbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc6:	83 ec 0c             	sub    esp,0xc
c001cbc9:	50                   	push   eax
c001cbca:	e8 e5 e6 fe ff       	call   c000b2b4 <Bus::~Bus()>
c001cbcf:	83 c4 10             	add    esp,0x10
c001cbd2:	90                   	nop
c001cbd3:	83 c4 0c             	add    esp,0xc
c001cbd6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbd8 <PCI::~PCI()>:
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	83 ec 0c             	sub    esp,0xc
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	e8 cd ff ff ff       	call   c001cbb4 <PCI::~PCI()>
c001cbe7:	83 c4 10             	add    esp,0x10
c001cbea:	83 ec 08             	sub    esp,0x8
c001cbed:	68 5c 01 00 00       	push   0x15c
c001cbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf6:	e8 f7 d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cbfb:	83 c4 10             	add    esp,0x10
c001cbfe:	83 c4 0c             	add    esp,0xc
c001cc01:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc02 <IDE::~IDE()>:
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	ba b0 f5 01 c0       	mov    edx,0xc001f5b0
c001cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0e:	89 10                	mov    DWORD PTR [eax],edx
c001cc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	50                   	push   eax
c001cc18:	e8 87 f0 fe ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	90                   	nop
c001cc21:	83 c4 0c             	add    esp,0xc
c001cc24:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc26 <IDE::~IDE()>:
c001cc26:	83 ec 0c             	sub    esp,0xc
c001cc29:	83 ec 0c             	sub    esp,0xc
c001cc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc30:	e8 cd ff ff ff       	call   c001cc02 <IDE::~IDE()>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	83 ec 08             	sub    esp,0x8
c001cc3b:	68 70 02 00 00       	push   0x270
c001cc40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc44:	e8 a9 d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	83 c4 0c             	add    esp,0xc
c001cc4f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc50 <SATABus::~SATABus()>:
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	ba 00 f6 01 c0       	mov    edx,0xc001f600
c001cc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5c:	89 10                	mov    DWORD PTR [eax],edx
c001cc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	50                   	push   eax
c001cc66:	e8 39 f0 fe ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	90                   	nop
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc74 <SATABus::~SATABus()>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	83 ec 0c             	sub    esp,0xc
c001cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7e:	e8 cd ff ff ff       	call   c001cc50 <SATABus::~SATABus()>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	83 ec 08             	sub    esp,0x8
c001cc89:	68 64 01 00 00       	push   0x164
c001cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc92:	e8 5b d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	83 c4 0c             	add    esp,0xc
c001cc9d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc9e <ATA::~ATA()>:
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	ba 40 f6 01 c0       	mov    edx,0xc001f640
c001cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaa:	89 10                	mov    DWORD PTR [eax],edx
c001ccac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	50                   	push   eax
c001ccb4:	e8 cd f0 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	90                   	nop
c001ccbd:	83 c4 0c             	add    esp,0xc
c001ccc0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccc2 <ATA::~ATA()>:
c001ccc2:	83 ec 0c             	sub    esp,0xc
c001ccc5:	83 ec 0c             	sub    esp,0xc
c001ccc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cccc:	e8 cd ff ff ff       	call   c001cc9e <ATA::~ATA()>
c001ccd1:	83 c4 10             	add    esp,0x10
c001ccd4:	83 ec 08             	sub    esp,0x8
c001ccd7:	68 7c 01 00 00       	push   0x17c
c001ccdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce0:	e8 0d d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cce5:	83 c4 10             	add    esp,0x10
c001cce8:	83 c4 0c             	add    esp,0xc
c001cceb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccec <ATAPI::~ATAPI()>:
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	ba 88 f6 01 c0       	mov    edx,0xc001f688
c001ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf8:	89 10                	mov    DWORD PTR [eax],edx
c001ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	50                   	push   eax
c001cd02:	e8 7f f0 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	90                   	nop
c001cd0b:	83 c4 0c             	add    esp,0xc
c001cd0e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd10 <ATAPI::~ATAPI()>:
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1a:	e8 cd ff ff ff       	call   c001ccec <ATAPI::~ATAPI()>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 ec 08             	sub    esp,0x8
c001cd25:	68 84 01 00 00       	push   0x184
c001cd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2e:	e8 bf d6 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	83 c4 0c             	add    esp,0xc
c001cd39:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd3a <SATA::~SATA()>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	ba 3c f7 01 c0       	mov    edx,0xc001f73c
c001cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd46:	89 10                	mov    DWORD PTR [eax],edx
c001cd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	50                   	push   eax
c001cd50:	e8 31 f0 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cd55:	83 c4 10             	add    esp,0x10
c001cd58:	90                   	nop
c001cd59:	83 c4 0c             	add    esp,0xc
c001cd5c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd5e <SATA::~SATA()>:
c001cd5e:	83 ec 0c             	sub    esp,0xc
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd68:	e8 cd ff ff ff       	call   c001cd3a <SATA::~SATA()>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	83 ec 08             	sub    esp,0x8
c001cd73:	68 7c 01 00 00       	push   0x17c
c001cd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd7c:	e8 71 d6 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	83 c4 0c             	add    esp,0xc
c001cd87:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd88 <SATAPI::~SATAPI()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	ba 74 f8 01 c0       	mov    edx,0xc001f874
c001cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd94:	89 10                	mov    DWORD PTR [eax],edx
c001cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	50                   	push   eax
c001cd9e:	e8 e3 ef fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	90                   	nop
c001cda7:	83 c4 0c             	add    esp,0xc
c001cdaa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cdac <SATAPI::~SATAPI()>:
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	83 ec 0c             	sub    esp,0xc
c001cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb6:	e8 cd ff ff ff       	call   c001cd88 <SATAPI::~SATAPI()>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	83 ec 08             	sub    esp,0x8
c001cdc1:	68 84 01 00 00       	push   0x184
c001cdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdca:	e8 23 d6 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	83 c4 0c             	add    esp,0xc
c001cdd5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdd6 <IOAPIC::~IOAPIC()>:
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	ba b4 f8 01 c0       	mov    edx,0xc001f8b4
c001cdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde2:	89 10                	mov    DWORD PTR [eax],edx
c001cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	50                   	push   eax
c001cdec:	e8 39 ea fe ff       	call   c000b82a <Device::~Device()>
c001cdf1:	83 c4 10             	add    esp,0x10
c001cdf4:	90                   	nop
c001cdf5:	83 c4 0c             	add    esp,0xc
c001cdf8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdfa <IOAPIC::~IOAPIC()>:
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	83 ec 0c             	sub    esp,0xc
c001ce00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce04:	e8 cd ff ff ff       	call   c001cdd6 <IOAPIC::~IOAPIC()>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	83 ec 08             	sub    esp,0x8
c001ce0f:	68 68 01 00 00       	push   0x168
c001ce14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce18:	e8 d5 d5 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	83 c4 0c             	add    esp,0xc
c001ce23:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce24 <APICTimer::~APICTimer()>:
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c001ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce30:	89 10                	mov    DWORD PTR [eax],edx
c001ce32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce36:	83 ec 0c             	sub    esp,0xc
c001ce39:	50                   	push   eax
c001ce3a:	e8 11 03 ff ff       	call   c000d150 <Timer::~Timer()>
c001ce3f:	83 c4 10             	add    esp,0x10
c001ce42:	90                   	nop
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce48 <APICTimer::~APICTimer()>:
c001ce48:	83 ec 0c             	sub    esp,0xc
c001ce4b:	83 ec 0c             	sub    esp,0xc
c001ce4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce52:	e8 cd ff ff ff       	call   c001ce24 <APICTimer::~APICTimer()>
c001ce57:	83 c4 10             	add    esp,0x10
c001ce5a:	83 ec 08             	sub    esp,0x8
c001ce5d:	68 60 01 00 00       	push   0x160
c001ce62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce66:	e8 87 d5 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001ce6b:	83 c4 10             	add    esp,0x10
c001ce6e:	83 c4 0c             	add    esp,0xc
c001ce71:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce74 <PIT::~PIT()>:
c001ce74:	83 ec 0c             	sub    esp,0xc
c001ce77:	ba 4c f9 01 c0       	mov    edx,0xc001f94c
c001ce7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce80:	89 10                	mov    DWORD PTR [eax],edx
c001ce82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce86:	83 ec 0c             	sub    esp,0xc
c001ce89:	50                   	push   eax
c001ce8a:	e8 c1 02 ff ff       	call   c000d150 <Timer::~Timer()>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	90                   	nop
c001ce93:	83 c4 0c             	add    esp,0xc
c001ce96:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce98 <PIT::~PIT()>:
c001ce98:	83 ec 0c             	sub    esp,0xc
c001ce9b:	83 ec 0c             	sub    esp,0xc
c001ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea2:	e8 cd ff ff ff       	call   c001ce74 <PIT::~PIT()>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	83 ec 08             	sub    esp,0x8
c001cead:	68 5c 01 00 00       	push   0x15c
c001ceb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceb6:	e8 37 d5 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	83 c4 0c             	add    esp,0xc
c001cec1:	c3                   	ret    
