
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000025:	3d 64 42 02 c0       	cmp    eax,0xc0024264
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 42 02 c0       	push   0xc0024264
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 42 02 c0       	mov    eax,0xc0024264
c0000051:	2d 64 42 02 c0       	sub    eax,0xc0024264
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 42 02 c0       	push   0xc0024264
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c 04 02 c0       	mov    ebx,0xc002049c
c0000097:	81 eb 98 04 02 c0    	sub    ebx,0xc0020498
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 04 02 c0       	mov    esi,0xc0020498
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 42 02 c0       	push   0xc0024264
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 42 02 c0       	push   0xc0024264
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 e7 56 01 00       	call   c0015994 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 c5 56 01 00       	call   c0015994 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 d2 5b 01 00       	call   c0015ec0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 91 62 01 00       	call   c0016588 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2b 13 01 00       	jmp    c00116aa <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 04 02 c0 02 	test   BYTE PTR [edx-0x3ffdfb60],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 04 02 c0 08 	test   BYTE PTR [edx-0x3ffdfb60],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 04 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfb60],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 04 02 c0 01 	test   BYTE PTR [edx-0x3ffdfb60],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 a4 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa5c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 8e 7d 01 00       	jmp    c0019b30 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 b8 7d 01 00       	jmp    c0019b70 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 d9 7d 01 00       	jmp    c0019bb0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 00 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf900]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 00 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf900]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 84 2e 02 c0       	mov    edx,0xc0022e84
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba bc 05 02 c0       	mov    edx,0xc00205bc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 c2 05 02 c0       	mov    eax,0xc00205c2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 80 06 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf980]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 cb 05 02 c0       	mov    eax,0xc00205cb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 00 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf900]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 06 02 c0       	mov    eax,0xc0020650
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 06 02 c0       	mov    ebx,0xc0020640
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 20 06 02 c0       	mov    eax,0xc0020620
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 30 06 02 c0       	mov    eax,0xc0020630
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba d2 05 02 c0       	mov    edx,0xc00205d2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba de 05 02 c0       	mov    edx,0xc00205de
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba f2 05 02 c0       	mov    edx,0xc00205f2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 20 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020a20
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 20 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a20
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 20 08 02 c0       	mov    eax,0xc0020820
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 20 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8e0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 0b 02 c0       	push   0xc0020b20
c000611b:	e8 ac 43 01 00       	call   c001a4cc <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e 0b 02 c0       	push   0xc0020b2e
c0006153:	e8 74 43 01 00       	call   c001a4cc <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 dd 42 01 00       	call   c001a470 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 3d 0b 02 c0       	push   0xc0020b3d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 40 0b 02 c0       	push   0xc0020b40
c0006812:	e8 b5 3c 01 00       	call   c001a4cc <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 c9 3c 01 00       	call   c001a4e8 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 45 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b45
c000682c:	e8 9b 3c 01 00       	call   c001a4cc <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 ab 3c 01 00       	call   c001a4e8 <iso_kprintfd>
c000683d:	c7 04 24 4b 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b4b
c0006844:	e8 83 3c 01 00       	call   c001a4cc <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 93 3c 01 00       	call   c001a4e8 <iso_kprintfd>
c0006855:	c7 04 24 51 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b51
c000685c:	e8 6b 3c 01 00       	call   c001a4cc <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 7b 3c 01 00       	call   c001a4e8 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 3d 0b 02 c0       	push   0xc0020b3d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 5a 0b 02 c0       	push   0xc0020b5a
c0006a31:	e8 96 3a 01 00       	call   c001a4cc <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 65 0b 02 c0       	push   0xc0020b65
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 6c 0b 02 c0       	push   0xc0020b6c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 73 0b 02 c0       	push   0xc0020b73
c0006b48:	e8 7f 39 01 00       	call   c001a4cc <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 7e 0b 02 c0       	push   0xc0020b7e
c0006b63:	e8 64 39 01 00       	call   c001a4cc <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 6e a2 00 00       	call   c0010ee0 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 03 5f 00 00       	call   c000cb84 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 8f 0b 02 c0       	push   0xc0020b8f
c0006cb2:	e8 08 a3 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 a8 0b 02 c0       	push   0xc0020ba8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 0d f0 00 00       	call   c0015cec <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 1c f2 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 f8 69 01 c0       	push   0xc00169f8
c0006d03:	52                   	push   edx
c0006d04:	e8 07 f2 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 a4 0c 02 c0       	push   0xc0020ca4
c0006d16:	e8 a4 a2 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 51 ab 00 00       	call   c0011878 <KeInitRand()>
c0006d27:	e8 ef 00 01 00       	call   c0016e1b <Vm::initialise8086()>
c0006d2c:	e8 9b 4b 00 00       	call   c000b8cc <Fs::initVFS()>
c0006d31:	c7 04 24 b5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bb5
c0006d38:	e8 82 a2 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 a4 0c 02 c0       	push   0xc0020ca4
c0006d5c:	e8 5e a2 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006d61:	e8 1f 47 00 00       	call   c000b485 <KeInitialiseSymlinks()>
c0006d66:	e8 b7 a7 00 00       	call   c0011522 <KeLoadSystemEnv()>
c0006d6b:	e8 14 aa 00 00       	call   c0011784 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 cf 0b 02 c0       	push   0xc0020bcf
c0006d7a:	68 d8 0b 02 c0       	push   0xc0020bd8
c0006d7f:	e8 84 d1 00 00       	call   c0013f08 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 58 57 00 00       	call   c000c4e4 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 c8 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cc8
c0006d93:	e8 27 a2 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 d8 5d 00 00       	call   c000cb82 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 e0 0b 02 c0 	mov    DWORD PTR [esp],0xc0020be0
c0006db1:	e8 09 a2 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 f1 0b 02 c0       	push   0xc0020bf1
c0006dc5:	e8 35 e9 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 5d eb 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 94 f5 00 00       	call   c0016374 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 0d 0c 02 c0       	push   0xc0020c0d
c0006df5:	50                   	push   eax
c0006df6:	e8 03 5e 00 00       	call   c000cbfe <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 14 0d 02 c0       	mov    edx,0xc0020d14
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 a1 85 01 00       	call   c001f496 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 c5 94 00 00       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 9e 94 00 00       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 7c 94 00 00       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 5a 94 00 00       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 67 93 00 00       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 42 93 00 00       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 00 84 01 00       	call   c001f450 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 4e 80 01 00       	call   c001f0c0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 58 93 00 00       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 16 0c 02 c0       	push   0xc0020c16
c00070e2:	e8 d8 a5 00 00       	call   c00116bf <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 1c 0c 02 c0       	push   0xc0020c1c
c000711e:	e8 9c a5 00 00       	call   c00116bf <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 a5 8c 00 00       	jmp    c000fe10 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 22 0c 02 c0       	push   0xc0020c22
c00071c3:	0f 94 05 c0 36 02 c0 	sete   BYTE PTR ds:0xc00236c0
c00071ca:	e8 f0 9d 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 9f 87 00 00       	call   c000f984 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 72 58 00 00       	call   c000ca66 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 3a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c3a
c000720d:	e8 ad 9d 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 88 92 00 00       	call   c00104b0 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 2f 58 00 00       	call   c000ca66 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 e8 0c 02 c0       	push   0xc0020ce8
c0007254:	e8 66 9d 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0007259:	e8 fa 0d 01 00       	call   c0018058 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 54 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c54
c0007265:	e8 55 9d 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 c6 ed 00 00       	call   c001603c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 6f 0c 02 c0       	push   0xc0020c6f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 80 0c 02 c0       	push   0xc0020c80
c00072ed:	e8 cd a3 00 00       	call   c00116bf <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 8d 0c 02 c0       	push   0xc0020c8d
c0007302:	e8 b8 a3 00 00       	call   c00116bf <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 97 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c97
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 9e a3 00 00       	jmp    c00116bf <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 11 08 01 00       	call   c0017d24 <HalSystemIdle()>
c0007513:	e8 3a 85 01 00       	call   c001fa52 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 50 f1 01 c0       	push   0xc001f150
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 60 f1 01 c0       	push   0xc001f160
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 6a f1 01 c0       	push   0xc001f16a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 74 f1 01 c0       	push   0xc001f174
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 7e f1 01 c0       	push   0xc001f17e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 88 f1 01 c0       	push   0xc001f188
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 92 f1 01 c0       	push   0xc001f192
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 9c f1 01 c0       	push   0xc001f19c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 a6 f1 01 c0       	push   0xc001f1a6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 ae f1 01 c0       	push   0xc001f1ae
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 b8 f1 01 c0       	push   0xc001f1b8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 c0 f1 01 c0       	push   0xc001f1c0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 c8 f1 01 c0       	push   0xc001f1c8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 d0 f1 01 c0       	push   0xc001f1d0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ea f1 01 c0       	push   0xc001f1ea
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 f2 f1 01 c0       	push   0xc001f1f2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 fc f1 01 c0       	push   0xc001f1fc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 06 f2 01 c0       	push   0xc001f206
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 10 f2 01 c0       	push   0xc001f210
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 aa f2 01 c0       	push   0xc001f2aa
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 b1 f2 01 c0       	push   0xc001f2b1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 9c f2 01 c0       	push   0xc001f29c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 a3 f2 01 c0       	push   0xc001f2a3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 1a f2 01 c0       	push   0xc001f21a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 24 f2 01 c0       	push   0xc001f224
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 2e f2 01 c0       	push   0xc001f22e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 38 f2 01 c0       	push   0xc001f238
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 42 f2 01 c0       	push   0xc001f242
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 4c f2 01 c0       	push   0xc001f24c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 56 f2 01 c0       	push   0xc001f256
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 60 f2 01 c0       	push   0xc001f260
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 6a f2 01 c0       	push   0xc001f26a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 74 f2 01 c0       	push   0xc001f274
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 7e f2 01 c0       	push   0xc001f27e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 88 f2 01 c0       	push   0xc001f288
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 92 f2 01 c0       	push   0xc001f292
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 ec f3 01 c0       	push   0xc001f3ec
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 f6 f3 01 c0       	push   0xc001f3f6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 00 f4 01 c0       	push   0xc001f400
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 0a f4 01 c0       	push   0xc001f40a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 14 f4 01 c0       	push   0xc001f414
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 1e f4 01 c0       	push   0xc001f41e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 28 f4 01 c0       	push   0xc001f428
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 32 f4 01 c0       	push   0xc001f432
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 a6 f1 01 c0       	push   0xc001f1a6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 b4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d b4 36 02 c0    	mov    edi,DWORD PTR ds:0xc00236b4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 b4 36 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00236b4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 b4 36 02 c0       	mov    eax,ds:0xc00236b4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 38 0d 02 c0       	push   0xc0020d38
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 68 0d 02 c0       	push   0xc0020d68
c0007a27:	e8 93 9c 00 00       	call   c00116bf <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 6d 0d 02 c0       	push   0xc0020d6d
c0007a3d:	e8 7d 9c 00 00       	call   c00116bf <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 74 0d 02 c0       	push   0xc0020d74
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 da 93 00 00       	call   c0010f43 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 03 93 00 00       	call   c0010e8d <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 4a 7e 01 00       	call   c001f9ea <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 8c 0d 02 c0       	push   0xc0020d8c
c0007c31:	e8 89 9a 00 00       	call   c00116bf <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 8c 0d 02 c0       	push   0xc0020d8c
c0007ca2:	e8 18 9a 00 00       	call   c00116bf <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b8 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b8 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236b8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b8 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236b8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 31 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e31
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 12 99 00 00       	jmp    c00116bf <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 b4 0d 02 c0       	push   0xc0020db4
c0007e31:	e8 89 98 00 00       	call   c00116bf <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 47 0e 02 c0       	push   0xc0020e47
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 e4 0d 02 c0       	push   0xc0020de4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 08 0e 02 c0       	push   0xc0020e08
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 6d 0e 02 c0       	push   0xc0020e6d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 5f 0e 02 c0       	push   0xc0020e5f
c000813c:	e8 7e 95 00 00       	call   c00116bf <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 89 0e 02 c0       	push   0xc0020e89
c0008311:	e8 a9 93 00 00       	call   c00116bf <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 01 de 00 00       	call   c0016160 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 d9 74 01 00       	call   c001f8d0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 a6 0e 02 c0       	push   0xc0020ea6
c000840c:	e8 ae 92 00 00       	call   c00116bf <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba cc 0e 02 c0       	mov    edx,0xc0020ecc
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 4a 54 00 00       	call   c000d940 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 fc 09 01 00       	call   c0018f18 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 36 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc920]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca68]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 35 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdca90]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 2e 07 01 00       	call   c0018dac <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 8b 07 01 00       	jmp    c0018eb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 e0 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ee0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 49 8f 00 00       	jmp    c00116bf <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 b8 3b 00 00       	jmp    c000c48b <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ee 0e 02 c0       	mov    esi,0xc0020eee
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 92 02 01 00       	call   c0018eb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 14 0f 02 c0       	mov    edx,0xc0020f14
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 ff 0e 02 c0       	push   0xc0020eff
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 05 0f 02 c0       	push   0xc0020f05
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 37 02 c0       	mov    eax,ds:0xc0023720
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 37 02 c0    	mov    DWORD PTR ds:0xc0023720,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 b7 68 01 00       	call   c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba dc 0f 02 c0       	mov    edx,0xc0020fdc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 b7 67 01 00       	call   c001fb8c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 ab 67 01 00       	call   c001fb94 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 b1 66 01 00       	call   c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 b4 0f 02 c0       	push   0xc0020fb4
c000942c:	e8 8e 82 00 00       	call   c00116bf <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba f8 0f 02 c0       	mov    edx,0xc0020ff8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 b6 66 01 00       	call   c001fb8c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 43 67 01 00       	call   c001fc36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 01 65 01 00       	call   c001fa76 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 b0 36 02 c0       	push   0xc00236b0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 74 fa 01 c0       	push   0xc001fa74
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023728
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023728
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023724
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 37 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023724,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 0c 10 02 c0       	push   0xc002100c
c0009689:	e8 31 80 00 00       	call   c00116bf <KePanic(char const*)>
c000968e:	8b 35 24 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023724
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 37 02 c0       	mov    eax,ds:0xc0023724
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 37 02 c0    	mov    DWORD PTR ds:0xc0023724,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 37 02 c0       	mov    ds:0xc0023724,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002372c
c000975f:	8b 0d 34 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023734
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002372c
c000977a:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 37 02 c0    	cmp    DWORD PTR ds:0xc0023730,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 a0 12 02 c0       	push   0xc00212a0
c00097c0:	e8 fa 7e 00 00       	call   c00116bf <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 b7 12 02 c0       	push   0xc00212b7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 37 02 c0    	mov    DWORD PTR ds:0xc0023730,ebx
c0009864:	c6 05 38 37 02 c0 43 	mov    BYTE PTR ds:0xc0023738,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 37 02 c0       	mov    ds:0xc0023734,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 37 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 37 02 c0       	mov    eax,ds:0xc0023730
c0009896:	f7 35 2c 37 02 c0    	div    DWORD PTR ds:0xc002372c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 2c 10 02 c0       	push   0xc002102c
c00098d1:	e8 e9 7d 00 00       	call   c00116bf <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ce 12 02 c0       	push   0xc00212ce
c00099a3:	e8 17 7d 00 00       	call   c00116bf <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 50 10 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021050
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 b4 7c 00 00       	jmp    c00116bf <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ea 12 02 c0       	push   0xc00212ea
c0009a18:	e8 a2 7c 00 00       	call   c00116bf <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 06 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021306
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 58 7c 00 00       	jmp    c00116bf <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 74 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021074
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 98 10 02 c0       	push   0xc0021098
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 00 11 02 c0       	push   0xc0021100
c0009dad:	e8 0d 79 00 00       	call   c00116bf <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 24 11 02 c0       	push   0xc0021124
c0009e99:	e8 21 78 00 00       	call   c00116bf <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 50 11 02 c0       	push   0xc0021150
c0009fed:	e8 cd 76 00 00       	call   c00116bf <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 d6 2a 00 00       	call   c000ccfa <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 20 13 02 c0       	push   0xc0021320
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 37 02 c0       	mov    eax,ds:0xc002372c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 aa 3b 00 00       	call   c000deb4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 74 11 02 c0       	push   0xc0021174
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 2e 13 02 c0 	mov    DWORD PTR [esp+0x50],0xc002132e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 51 13 02 c0       	push   0xc0021351
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 3f 13 02 c0       	push   0xc002133f
c000a3db:	e8 df 72 00 00       	call   c00116bf <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 51 13 02 c0       	push   0xc0021351
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 37 02 c0    	mov    edx,DWORD PTR ds:0xc002372c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023738
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 c1 39 00 00       	call   c000de48 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 37 02 c0    	cmp    DWORD PTR ds:0xc002372c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 64 13 02 c0       	push   0xc0021364
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 a4 11 02 c0       	push   0xc00211a4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 c4 11 02 c0       	push   0xc00211c4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 24 12 02 c0 	mov    DWORD PTR [esp],0xc0021224
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 79 13 02 c0       	push   0xc0021379
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 8d 13 02 c0       	push   0xc002138d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 a0 13 02 c0       	push   0xc00213a0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ad 13 02 c0       	push   0xc00213ad
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 c6 13 02 c0       	push   0xc00213c6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 c6 13 02 c0       	push   0xc00213c6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ce 13 02 c0 	mov    DWORD PTR [esp],0xc00213ce
c000a7f8:	e8 c2 6e 00 00       	call   c00116bf <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 e6 13 02 c0       	push   0xc00213e6
c000a80a:	e8 b0 6e 00 00       	call   c00116bf <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be ef 0e 02 c0       	mov    esi,0xc0020eef
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ee 0e 02 c0       	mov    al,ds:0xc0020eee
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 fc 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdec04]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 4c 15 02 c0       	push   0xc002154c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 60 15 02 c0       	push   0xc0021560
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 6a 15 02 c0       	push   0xc002156a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 74 15 02 c0       	push   0xc0021574
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 b8 16 02 c0       	push   0xc00216b8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 7e 15 02 c0       	push   0xc002157e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 d8 16 02 c0       	push   0xc00216d8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 93 15 02 c0       	push   0xc0021593
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ad 15 02 c0       	push   0xc00215ad
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc8c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 00 17 02 c0       	push   0xc0021700
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 b8 16 02 c0       	push   0xc00216b8
c000abb4:	e8 06 6b 00 00       	call   c00116bf <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 48 17 02 c0       	push   0xc0021748
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 48 17 02 c0       	push   0xc0021748
c000abe3:	e8 d7 6a 00 00       	call   c00116bf <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 b8 15 02 c0       	push   0xc00215b8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 b8 15 02 c0       	push   0xc00215b8
c000ac0f:	e8 ab 6a 00 00       	call   c00116bf <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 d5 15 02 c0       	push   0xc00215d5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 d5 15 02 c0       	push   0xc00215d5
c000ac3b:	e8 7f 6a 00 00       	call   c00116bf <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 68 17 02 c0       	push   0xc0021768
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 68 17 02 c0       	push   0xc0021768
c000ac67:	e8 53 6a 00 00       	call   c00116bf <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 8c 17 02 c0       	push   0xc002178c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 8c 17 02 c0       	push   0xc002178c
c000ac93:	e8 27 6a 00 00       	call   c00116bf <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 f1 15 02 c0       	push   0xc00215f1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 f1 15 02 c0       	push   0xc00215f1
c000acbf:	e8 fb 69 00 00       	call   c00116bf <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 0d 16 02 c0       	push   0xc002160d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 0d 16 02 c0       	push   0xc002160d
c000aceb:	e8 cf 69 00 00       	call   c00116bf <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ac 17 02 c0       	push   0xc00217ac
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ac 17 02 c0       	push   0xc00217ac
c000ad17:	e8 a3 69 00 00       	call   c00116bf <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 d0 17 02 c0       	push   0xc00217d0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 d0 17 02 c0       	push   0xc00217d0
c000ad43:	e8 77 69 00 00       	call   c00116bf <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 ef 17 02 c0       	push   0xc00217ef
c000adba:	50                   	push   eax
c000adbb:	e8 2e 0e 00 00       	call   c000bbee <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 0d 18 02 c0       	push   0xc002180d
c000adcf:	e8 eb 68 00 00       	call   c00116bf <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	56                   	push   esi
c000add8:	56                   	push   esi
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 2b 0e 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 27 18 02 c0       	push   0xc0021827
c000adf0:	e8 ca 68 00 00       	call   c00116bf <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 41 18 02 c0       	push   0xc0021841
c000ae37:	e8 83 68 00 00       	call   c00116bf <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 5b 18 02 c0       	push   0xc002185b
c000ae67:	e8 53 68 00 00       	call   c00116bf <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 ef 0d 00 00       	call   c000bc6a <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	83 ec 0c             	sub    esp,0xc
c000ae91:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae9b:	68 75 18 02 c0       	push   0xc0021875
c000aea0:	e8 50 7e 00 00       	call   c0012cf5 <CmOpen(char const*)>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	89 c3                	mov    ebx,eax
c000aeaa:	85 c0                	test   eax,eax
c000aeac:	74 6d                	je     c000af1b <KiFlushSymlinkChanges()+0x181>
c000aeae:	bf 00 00 00 00       	mov    edi,0x0
c000aeb3:	51                   	push   ecx
c000aeb4:	51                   	push   ecx
c000aeb5:	68 9a 18 02 c0       	push   0xc002189a
c000aeba:	50                   	push   eax
c000aebb:	e8 35 8a 00 00       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	8b 35 00 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029400
c000aec9:	40                   	inc    eax
c000aeca:	75 2a                	jne    c000aef6 <KiFlushSymlinkChanges()+0x15c>
c000aecc:	52                   	push   edx
c000aecd:	52                   	push   edx
c000aece:	68 af 18 02 c0       	push   0xc00218af
c000aed3:	53                   	push   ebx
c000aed4:	e8 1c 8a 00 00       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000aed9:	59                   	pop    ecx
c000aeda:	5a                   	pop    edx
c000aedb:	50                   	push   eax
c000aedc:	53                   	push   ebx
c000aedd:	e8 fa 7f 00 00       	call   c0012edc <CmEnterDirectory(Reghive_Tag*, int)>
c000aee2:	59                   	pop    ecx
c000aee3:	5a                   	pop    edx
c000aee4:	6a 6c                	push   0x6c
c000aee6:	57                   	push   edi
c000aee7:	56                   	push   esi
c000aee8:	68 a1 18 02 c0       	push   0xc00218a1
c000aeed:	50                   	push   eax
c000aeee:	53                   	push   ebx
c000aeef:	e8 78 88 00 00       	call   c001376c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000aef4:	eb 16                	jmp    c000af0c <KiFlushSymlinkChanges()+0x172>
c000aef6:	50                   	push   eax
c000aef7:	50                   	push   eax
c000aef8:	68 9a 18 02 c0       	push   0xc002189a
c000aefd:	53                   	push   ebx
c000aefe:	e8 f2 89 00 00       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000af03:	57                   	push   edi
c000af04:	56                   	push   esi
c000af05:	50                   	push   eax
c000af06:	53                   	push   ebx
c000af07:	e8 e9 84 00 00       	call   c00133f5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>
c000af0c:	83 c4 20             	add    esp,0x20
c000af0f:	83 ec 0c             	sub    esp,0xc
c000af12:	53                   	push   ebx
c000af13:	e8 fb 7e 00 00       	call   c0012e13 <CmClose(Reghive_Tag*)>
c000af18:	83 c4 10             	add    esp,0x10
c000af1b:	83 c4 10             	add    esp,0x10
c000af1e:	5b                   	pop    ebx
c000af1f:	5e                   	pop    esi
c000af20:	5f                   	pop    edi
c000af21:	c3                   	ret    

c000af22 <KiDeinitialiseSymlinks(void*)>:
c000af22:	e9 73 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000af27 <KiGetSymlinkHash(char const*)>:
c000af27:	53                   	push   ebx
c000af28:	89 c3                	mov    ebx,eax
c000af2a:	83 ec 14             	sub    esp,0x14
c000af2d:	50                   	push   eax
c000af2e:	e8 3d 56 ff ff       	call   c0000570 <strlen>
c000af33:	5a                   	pop    edx
c000af34:	59                   	pop    ecx
c000af35:	50                   	push   eax
c000af36:	53                   	push   ebx
c000af37:	e8 05 61 00 00       	call   c0011041 <KeCalculateCRC32(unsigned char*, int)>
c000af3c:	83 c4 18             	add    esp,0x18
c000af3f:	89 c2                	mov    edx,eax
c000af41:	5b                   	pop    ebx
c000af42:	c1 ea 10             	shr    edx,0x10
c000af45:	31 d0                	xor    eax,edx
c000af47:	c3                   	ret    

c000af48 <KiCreateSymlinkID()>:
c000af48:	55                   	push   ebp
c000af49:	57                   	push   edi
c000af4a:	56                   	push   esi
c000af4b:	53                   	push   ebx
c000af4c:	31 db                	xor    ebx,ebx
c000af4e:	83 ec 1c             	sub    esp,0x1c
c000af51:	e8 b7 68 00 00       	call   c001180d <KeRand()>
c000af56:	43                   	inc    ebx
c000af57:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000af5d:	31 d2                	xor    edx,edx
c000af5f:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000af62:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000af66:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000af6c:	c1 e0 1f             	shl    eax,0x1f
c000af6f:	89 d7                	mov    edi,edx
c000af71:	89 c6                	mov    esi,eax
c000af73:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000af77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af7f:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af85:	75 10                	jne    c000af97 <KiCreateSymlinkID()+0x4f>
c000af87:	83 ec 0c             	sub    esp,0xc
c000af8a:	68 b6 18 02 c0       	push   0xc00218b6
c000af8f:	e8 2b 67 00 00       	call   c00116bf <KePanic(char const*)>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af9b:	75 04                	jne    c000afa1 <KiCreateSymlinkID()+0x59>
c000af9d:	39 f5                	cmp    ebp,esi
c000af9f:	74 b0                	je     c000af51 <KiCreateSymlinkID()+0x9>
c000afa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000afa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000afa9:	31 f0                	xor    eax,esi
c000afab:	83 c4 1c             	add    esp,0x1c
c000afae:	31 fa                	xor    edx,edi
c000afb0:	5b                   	pop    ebx
c000afb1:	5e                   	pop    esi
c000afb2:	5f                   	pop    edi
c000afb3:	5d                   	pop    ebp
c000afb4:	c3                   	ret    

c000afb5 <KeRegisterSymlink(char const*, unsigned long long)>:
c000afb5:	53                   	push   ebx
c000afb6:	83 ec 0c             	sub    esp,0xc
c000afb9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000afbd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000afc5:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000afca:	68 00 01 00 00       	push   0x100
c000afcf:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000afd6:	6a 00                	push   0x0
c000afd8:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000afdf:	c1 e0 08             	shl    eax,0x8
c000afe2:	05 00 70 02 c0       	add    eax,0xc0027000
c000afe7:	50                   	push   eax
c000afe8:	e8 03 55 ff ff       	call   c00004f0 <memset>
c000afed:	58                   	pop    eax
c000afee:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000aff3:	5a                   	pop    edx
c000aff4:	c1 e0 08             	shl    eax,0x8
c000aff7:	53                   	push   ebx
c000aff8:	05 00 70 02 c0       	add    eax,0xc0027000
c000affd:	50                   	push   eax
c000affe:	e8 3d 56 ff ff       	call   c0000640 <strcpy>
c000b003:	89 d8                	mov    eax,ebx
c000b005:	e8 1d ff ff ff       	call   c000af27 <KiGetSymlinkHash(char const*)>
c000b00a:	ba 01 00 00 00       	mov    edx,0x1
c000b00f:	0f b7 c0             	movzx  eax,ax
c000b012:	e8 53 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b017:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000b01c:	83 c4 10             	add    esp,0x10
c000b01f:	40                   	inc    eax
c000b020:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000b025:	83 f8 03             	cmp    eax,0x3
c000b028:	7e 09                	jle    c000b033 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000b02a:	83 c4 08             	add    esp,0x8
c000b02d:	5b                   	pop    ebx
c000b02e:	e9 67 fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000b033:	83 c4 08             	add    esp,0x8
c000b036:	5b                   	pop    ebx
c000b037:	c3                   	ret    

c000b038 <KiIsSymlinkRegistered(char const*)>:
c000b038:	55                   	push   ebp
c000b039:	57                   	push   edi
c000b03a:	56                   	push   esi
c000b03b:	53                   	push   ebx
c000b03c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b042:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b049:	89 f0                	mov    eax,esi
c000b04b:	e8 d7 fe ff ff       	call   c000af27 <KiGetSymlinkHash(char const*)>
c000b050:	0f b7 c0             	movzx  eax,ax
c000b053:	e8 f8 fc ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000b058:	31 d2                	xor    edx,edx
c000b05a:	88 c1                	mov    cl,al
c000b05c:	31 c0                	xor    eax,eax
c000b05e:	84 c9                	test   cl,cl
c000b060:	0f 84 31 01 00 00    	je     c000b197 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b066:	31 db                	xor    ebx,ebx
c000b068:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b06e:	7e 30                	jle    c000b0a0 <KiIsSymlinkRegistered(char const*)+0x68>
c000b070:	89 d8                	mov    eax,ebx
c000b072:	51                   	push   ecx
c000b073:	c1 e0 08             	shl    eax,0x8
c000b076:	51                   	push   ecx
c000b077:	05 00 70 02 c0       	add    eax,0xc0027000
c000b07c:	50                   	push   eax
c000b07d:	56                   	push   esi
c000b07e:	e8 cd 56 ff ff       	call   c0000750 <strcmp>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	85 c0                	test   eax,eax
c000b088:	75 13                	jne    c000b09d <KiIsSymlinkRegistered(char const*)+0x65>
c000b08a:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b091:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b098:	e9 fa 00 00 00       	jmp    c000b197 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b09d:	43                   	inc    ebx
c000b09e:	eb c8                	jmp    c000b068 <KiIsSymlinkRegistered(char const*)+0x30>
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	68 14 01 00 00       	push   0x114
c000b0a8:	e8 09 ca ff ff       	call   c0007ab6 <malloc>
c000b0ad:	83 c4 0c             	add    esp,0xc
c000b0b0:	89 c3                	mov    ebx,eax
c000b0b2:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b0b8:	68 ef 17 02 c0       	push   0xc00217ef
c000b0bd:	50                   	push   eax
c000b0be:	e8 2b 0b 00 00       	call   c000bbee <File::File(char const*, Process*)>
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	85 db                	test   ebx,ebx
c000b0c8:	75 12                	jne    c000b0dc <KiIsSymlinkRegistered(char const*)+0xa4>
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	68 bf 18 02 c0       	push   0xc00218bf
c000b0d2:	e8 e8 65 00 00       	call   c00116bf <KePanic(char const*)>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	eb 10                	jmp    c000b0ec <KiIsSymlinkRegistered(char const*)+0xb4>
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	53                   	push   ebx
c000b0e0:	e8 eb 0d 00 00       	call   c000bed0 <File::exists()>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	84 c0                	test   al,al
c000b0ea:	74 de                	je     c000b0ca <KiIsSymlinkRegistered(char const*)+0x92>
c000b0ec:	52                   	push   edx
c000b0ed:	52                   	push   edx
c000b0ee:	6a 01                	push   0x1
c000b0f0:	53                   	push   ebx
c000b0f1:	e8 16 0b 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	85 c0                	test   eax,eax
c000b0fb:	74 10                	je     c000b10d <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0fd:	83 ec 0c             	sub    esp,0xc
c000b100:	68 da 18 02 c0       	push   0xc00218da
c000b105:	e8 b5 65 00 00       	call   c00116bf <KePanic(char const*)>
c000b10a:	83 c4 10             	add    esp,0x10
c000b10d:	83 ec 0c             	sub    esp,0xc
c000b110:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b112:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b116:	55                   	push   ebp
c000b117:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b11b:	57                   	push   edi
c000b11c:	6a 00                	push   0x0
c000b11e:	68 00 01 00 00       	push   0x100
c000b123:	53                   	push   ebx
c000b124:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b127:	83 c4 20             	add    esp,0x20
c000b12a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b132:	75 4b                	jne    c000b17f <KiIsSymlinkRegistered(char const*)+0x147>
c000b134:	83 ec 0c             	sub    esp,0xc
c000b137:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b139:	55                   	push   ebp
c000b13a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b13e:	52                   	push   edx
c000b13f:	6a 00                	push   0x0
c000b141:	6a 08                	push   0x8
c000b143:	53                   	push   ebx
c000b144:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b147:	83 c4 20             	add    esp,0x20
c000b14a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b14f:	75 2e                	jne    c000b17f <KiIsSymlinkRegistered(char const*)+0x147>
c000b151:	50                   	push   eax
c000b152:	50                   	push   eax
c000b153:	57                   	push   edi
c000b154:	56                   	push   esi
c000b155:	e8 f6 55 ff ff       	call   c0000750 <strcmp>
c000b15a:	83 c4 10             	add    esp,0x10
c000b15d:	85 c0                	test   eax,eax
c000b15f:	75 ac                	jne    c000b10d <KiIsSymlinkRegistered(char const*)+0xd5>
c000b161:	83 ec 0c             	sub    esp,0xc
c000b164:	53                   	push   ebx
c000b165:	e8 00 0b 00 00       	call   c000bc6a <File::close()>
c000b16a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b16c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b16f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b172:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b176:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b17a:	83 c4 10             	add    esp,0x10
c000b17d:	eb 18                	jmp    c000b197 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b17f:	83 ec 0c             	sub    esp,0xc
c000b182:	53                   	push   ebx
c000b183:	e8 e2 0a 00 00       	call   c000bc6a <File::close()>
c000b188:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b18a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b18d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	31 c0                	xor    eax,eax
c000b195:	31 d2                	xor    edx,edx
c000b197:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b19d:	5b                   	pop    ebx
c000b19e:	5e                   	pop    esi
c000b19f:	5f                   	pop    edi
c000b1a0:	5d                   	pop    ebp
c000b1a1:	c3                   	ret    

c000b1a2 <KeDereferenceSymlink(char const*, char*)>:
c000b1a2:	55                   	push   ebp
c000b1a3:	57                   	push   edi
c000b1a4:	56                   	push   esi
c000b1a5:	53                   	push   ebx
c000b1a6:	83 ec 48             	sub    esp,0x48
c000b1a9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b1ad:	56                   	push   esi
c000b1ae:	e8 85 fe ff ff       	call   c000b038 <KiIsSymlinkRegistered(char const*)>
c000b1b3:	83 c4 10             	add    esp,0x10
c000b1b6:	89 c7                	mov    edi,eax
c000b1b8:	89 d0                	mov    eax,edx
c000b1ba:	09 f8                	or     eax,edi
c000b1bc:	75 07                	jne    c000b1c5 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b1be:	31 c0                	xor    eax,eax
c000b1c0:	e9 7c 01 00 00       	jmp    c000b341 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	89 d5                	mov    ebp,edx
c000b1ca:	68 14 01 00 00       	push   0x114
c000b1cf:	e8 e2 c8 ff ff       	call   c0007ab6 <malloc>
c000b1d4:	83 c4 0c             	add    esp,0xc
c000b1d7:	89 c3                	mov    ebx,eax
c000b1d9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1df:	56                   	push   esi
c000b1e0:	50                   	push   eax
c000b1e1:	e8 08 0a 00 00       	call   c000bbee <File::File(char const*, Process*)>
c000b1e6:	83 c4 10             	add    esp,0x10
c000b1e9:	85 db                	test   ebx,ebx
c000b1eb:	0f 84 32 01 00 00    	je     c000b323 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b1f1:	56                   	push   esi
c000b1f2:	56                   	push   esi
c000b1f3:	6a 01                	push   0x1
c000b1f5:	53                   	push   ebx
c000b1f6:	e8 11 0a 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	85 c0                	test   eax,eax
c000b200:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b202:	74 09                	je     c000b20d <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b204:	83 ec 0c             	sub    esp,0xc
c000b207:	53                   	push   ebx
c000b208:	e9 10 01 00 00       	jmp    c000b31d <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b20d:	83 ec 0c             	sub    esp,0xc
c000b210:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b214:	56                   	push   esi
c000b215:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b219:	52                   	push   edx
c000b21a:	6a 00                	push   0x0
c000b21c:	6a 08                	push   0x8
c000b21e:	53                   	push   ebx
c000b21f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b222:	83 c4 20             	add    esp,0x20
c000b225:	85 c0                	test   eax,eax
c000b227:	0f 85 e2 00 00 00    	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b22d:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b232:	0f 85 d7 00 00 00    	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b238:	83 ec 0c             	sub    esp,0xc
c000b23b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b23d:	56                   	push   esi
c000b23e:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b242:	52                   	push   edx
c000b243:	6a 00                	push   0x0
c000b245:	6a 08                	push   0x8
c000b247:	53                   	push   ebx
c000b248:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b24b:	83 c4 20             	add    esp,0x20
c000b24e:	85 c0                	test   eax,eax
c000b250:	0f 85 b9 00 00 00    	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b256:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b25b:	0f 85 ae 00 00 00    	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b261:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b265:	0f 85 53 ff ff ff    	jne    c000b1be <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b26b:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b26f:	0f 85 49 ff ff ff    	jne    c000b1be <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b275:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b27d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b285:	51                   	push   ecx
c000b286:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b28a:	50                   	push   eax
c000b28b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b28f:	50                   	push   eax
c000b290:	53                   	push   ebx
c000b291:	e8 78 0c 00 00       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b29e:	75 6f                	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2a0:	31 c9                	xor    ecx,ecx
c000b2a2:	bf 0f 00 00 00       	mov    edi,0xf
c000b2a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b2af:	39 c7                	cmp    edi,eax
c000b2b1:	89 cf                	mov    edi,ecx
c000b2b3:	19 d7                	sbb    edi,edx
c000b2b5:	73 58                	jae    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2b7:	83 c0 f0             	add    eax,0xfffffff0
c000b2ba:	bf ff 00 00 00       	mov    edi,0xff
c000b2bf:	83 d2 ff             	adc    edx,0xffffffff
c000b2c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2c6:	39 c7                	cmp    edi,eax
c000b2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b2cc:	19 d1                	sbb    ecx,edx
c000b2ce:	72 53                	jb     c000b323 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2d0:	40                   	inc    eax
c000b2d1:	52                   	push   edx
c000b2d2:	50                   	push   eax
c000b2d3:	6a 00                	push   0x0
c000b2d5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b2d9:	e8 12 52 ff ff       	call   c00004f0 <memset>
c000b2de:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2e3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2ef:	53                   	push   ebx
c000b2f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b2f3:	83 c4 20             	add    esp,0x20
c000b2f6:	85 c0                	test   eax,eax
c000b2f8:	75 15                	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b2fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2fe:	89 c7                	mov    edi,eax
c000b300:	c1 ff 1f             	sar    edi,0x1f
c000b303:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b307:	75 06                	jne    c000b30f <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b309:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b30d:	74 19                	je     c000b328 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	53                   	push   ebx
c000b313:	e8 52 09 00 00       	call   c000bc6a <File::close()>
c000b318:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b31a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b31d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	83 c8 ff             	or     eax,0xffffffff
c000b326:	eb 19                	jmp    c000b341 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b328:	83 ec 0c             	sub    esp,0xc
c000b32b:	53                   	push   ebx
c000b32c:	e8 39 09 00 00       	call   c000bc6a <File::close()>
c000b331:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b333:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b336:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	b8 01 00 00 00       	mov    eax,0x1
c000b341:	83 c4 3c             	add    esp,0x3c
c000b344:	5b                   	pop    ebx
c000b345:	5e                   	pop    esi
c000b346:	5f                   	pop    edi
c000b347:	5d                   	pop    ebp
c000b348:	c3                   	ret    

c000b349 <KeCreateSymlink(char const*, char const*)>:
c000b349:	55                   	push   ebp
c000b34a:	57                   	push   edi
c000b34b:	56                   	push   esi
c000b34c:	53                   	push   ebx
c000b34d:	83 ec 38             	sub    esp,0x38
c000b350:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b354:	68 14 01 00 00       	push   0x114
c000b359:	e8 58 c7 ff ff       	call   c0007ab6 <malloc>
c000b35e:	6a 00                	push   0x0
c000b360:	89 c3                	mov    ebx,eax
c000b362:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b368:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b36c:	50                   	push   eax
c000b36d:	e8 9e 07 00 00       	call   c000bb10 <File::File(char const*, Process*, bool)>
c000b372:	83 c4 20             	add    esp,0x20
c000b375:	b8 01 00 00 00       	mov    eax,0x1
c000b37a:	85 db                	test   ebx,ebx
c000b37c:	0f 84 fb 00 00 00    	je     c000b47d <KeCreateSymlink(char const*, char const*)+0x134>
c000b382:	52                   	push   edx
c000b383:	52                   	push   edx
c000b384:	6a 12                	push   0x12
c000b386:	53                   	push   ebx
c000b387:	e8 80 08 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000b38c:	83 c4 10             	add    esp,0x10
c000b38f:	85 c0                	test   eax,eax
c000b391:	74 0b                	je     c000b39e <KeCreateSymlink(char const*, char const*)+0x55>
c000b393:	83 ec 0c             	sub    esp,0xc
c000b396:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b398:	53                   	push   ebx
c000b399:	e9 d4 00 00 00       	jmp    c000b472 <KeCreateSymlink(char const*, char const*)+0x129>
c000b39e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b3a2:	be f5 18 02 c0       	mov    esi,0xc00218f5
c000b3a7:	b9 09 00 00 00       	mov    ecx,0x9
c000b3ac:	fc                   	cld    
c000b3ad:	83 ec 0c             	sub    esp,0xc
c000b3b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3b2:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b3b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3b8:	56                   	push   esi
c000b3b9:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b3bd:	52                   	push   edx
c000b3be:	6a 00                	push   0x0
c000b3c0:	6a 08                	push   0x8
c000b3c2:	53                   	push   ebx
c000b3c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3c6:	83 c4 20             	add    esp,0x20
c000b3c9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3ce:	0f 85 90 00 00 00    	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3d4:	85 c0                	test   eax,eax
c000b3d6:	0f 85 88 00 00 00    	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3dc:	e8 67 fb ff ff       	call   c000af48 <KiCreateSymlinkID()>
c000b3e1:	83 ec 0c             	sub    esp,0xc
c000b3e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ee:	56                   	push   esi
c000b3ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3f3:	52                   	push   edx
c000b3f4:	6a 00                	push   0x0
c000b3f6:	6a 08                	push   0x8
c000b3f8:	53                   	push   ebx
c000b3f9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3fc:	83 c4 20             	add    esp,0x20
c000b3ff:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b404:	75 5e                	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b406:	85 c0                	test   eax,eax
c000b408:	75 5a                	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b40a:	83 ec 0c             	sub    esp,0xc
c000b40d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b40f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b412:	55                   	push   ebp
c000b413:	e8 58 51 ff ff       	call   c0000570 <strlen>
c000b418:	89 34 24             	mov    DWORD PTR [esp],esi
c000b41b:	31 d2                	xor    edx,edx
c000b41d:	55                   	push   ebp
c000b41e:	52                   	push   edx
c000b41f:	50                   	push   eax
c000b420:	53                   	push   ebx
c000b421:	ff d7                	call   edi
c000b423:	83 c4 14             	add    esp,0x14
c000b426:	89 c6                	mov    esi,eax
c000b428:	55                   	push   ebp
c000b429:	e8 42 51 ff ff       	call   c0000570 <strlen>
c000b42e:	83 c4 10             	add    esp,0x10
c000b431:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b435:	75 2d                	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b437:	85 f6                	test   esi,esi
c000b439:	75 29                	jne    c000b464 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b43b:	50                   	push   eax
c000b43c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b440:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b444:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b448:	e8 68 fb ff ff       	call   c000afb5 <KeRegisterSymlink(char const*, unsigned long long)>
c000b44d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b450:	e8 15 08 00 00       	call   c000bc6a <File::close()>
c000b455:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b45a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	31 c0                	xor    eax,eax
c000b462:	eb 19                	jmp    c000b47d <KeCreateSymlink(char const*, char const*)+0x134>
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	53                   	push   ebx
c000b468:	e8 fd 07 00 00       	call   c000bc6a <File::close()>
c000b46d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b46f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	b8 01 00 00 00       	mov    eax,0x1
c000b47d:	83 c4 2c             	add    esp,0x2c
c000b480:	5b                   	pop    ebx
c000b481:	5e                   	pop    esi
c000b482:	5f                   	pop    edi
c000b483:	5d                   	pop    ebp
c000b484:	c3                   	ret    

c000b485 <KeInitialiseSymlinks()>:
c000b485:	57                   	push   edi
c000b486:	56                   	push   esi
c000b487:	53                   	push   ebx
c000b488:	81 ec 14 01 00 00    	sub    esp,0x114
c000b48e:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b498:	68 00 20 00 00       	push   0x2000
c000b49d:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b4a7:	6a 00                	push   0x0
c000b4a9:	68 00 74 02 c0       	push   0xc0027400
c000b4ae:	e8 3d 50 ff ff       	call   c00004f0 <memset>
c000b4b3:	c7 04 24 75 18 02 c0 	mov    DWORD PTR [esp],0xc0021875
c000b4ba:	e8 36 78 00 00       	call   c0012cf5 <CmOpen(char const*)>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	85 c0                	test   eax,eax
c000b4c4:	74 49                	je     c000b50f <KeInitialiseSymlinks()+0x8a>
c000b4c6:	89 c3                	mov    ebx,eax
c000b4c8:	50                   	push   eax
c000b4c9:	50                   	push   eax
c000b4ca:	68 9a 18 02 c0       	push   0xc002189a
c000b4cf:	53                   	push   ebx
c000b4d0:	e8 20 84 00 00       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b4d5:	83 c4 10             	add    esp,0x10
c000b4d8:	40                   	inc    eax
c000b4d9:	74 28                	je     c000b503 <KeInitialiseSymlinks()+0x7e>
c000b4db:	50                   	push   eax
c000b4dc:	50                   	push   eax
c000b4dd:	68 9a 18 02 c0       	push   0xc002189a
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 0d 84 00 00       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000b4e8:	83 c4 0c             	add    esp,0xc
c000b4eb:	8d 54 24 14          	lea    edx,[esp+0x14]
c000b4ef:	52                   	push   edx
c000b4f0:	50                   	push   eax
c000b4f1:	53                   	push   ebx
c000b4f2:	e8 d4 7e 00 00       	call   c00133cb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c000b4f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	a3 00 94 02 c0       	mov    ds:0xc0029400,eax
c000b503:	83 ec 0c             	sub    esp,0xc
c000b506:	53                   	push   ebx
c000b507:	e8 07 79 00 00       	call   c0012e13 <CmClose(Reghive_Tag*)>
c000b50c:	83 c4 10             	add    esp,0x10
c000b50f:	53                   	push   ebx
c000b510:	53                   	push   ebx
c000b511:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b517:	68 fe 18 02 c0       	push   0xc00218fe
c000b51c:	e8 24 f4 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b521:	5e                   	pop    esi
c000b522:	5f                   	pop    edi
c000b523:	6a 00                	push   0x0
c000b525:	68 22 af 00 c0       	push   0xc000af22
c000b52a:	e8 7d 59 00 00       	call   c0010eac <KeRegisterAtexit(void (*)(void*), void*)>
c000b52f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b536:	e8 7b c5 ff ff       	call   c0007ab6 <malloc>
c000b53b:	83 c4 0c             	add    esp,0xc
c000b53e:	89 c3                	mov    ebx,eax
c000b540:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b546:	68 ef 17 02 c0       	push   0xc00217ef
c000b54b:	50                   	push   eax
c000b54c:	e8 9d 06 00 00       	call   c000bbee <File::File(char const*, Process*)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	85 db                	test   ebx,ebx
c000b556:	75 10                	jne    c000b568 <KeInitialiseSymlinks()+0xe3>
c000b558:	83 ec 0c             	sub    esp,0xc
c000b55b:	68 1b 19 02 c0       	push   0xc002191b
c000b560:	e8 5a 61 00 00       	call   c00116bf <KePanic(char const*)>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	83 ec 0c             	sub    esp,0xc
c000b56b:	53                   	push   ebx
c000b56c:	e8 5f 09 00 00       	call   c000bed0 <File::exists()>
c000b571:	83 c4 10             	add    esp,0x10
c000b574:	84 c0                	test   al,al
c000b576:	75 3a                	jne    c000b5b2 <KeInitialiseSymlinks()+0x12d>
c000b578:	51                   	push   ecx
c000b579:	51                   	push   ecx
c000b57a:	6a 12                	push   0x12
c000b57c:	53                   	push   ebx
c000b57d:	e8 8a 06 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000b582:	83 c4 10             	add    esp,0x10
c000b585:	85 c0                	test   eax,eax
c000b587:	74 10                	je     c000b599 <KeInitialiseSymlinks()+0x114>
c000b589:	83 ec 0c             	sub    esp,0xc
c000b58c:	68 38 19 02 c0       	push   0xc0021938
c000b591:	e8 29 61 00 00       	call   c00116bf <KePanic(char const*)>
c000b596:	83 c4 10             	add    esp,0x10
c000b599:	83 ec 0c             	sub    esp,0xc
c000b59c:	53                   	push   ebx
c000b59d:	e8 c8 06 00 00       	call   c000bc6a <File::close()>
c000b5a2:	83 c4 10             	add    esp,0x10
c000b5a5:	85 db                	test   ebx,ebx
c000b5a7:	0f 84 98 00 00 00    	je     c000b645 <KeInitialiseSymlinks()+0x1c0>
c000b5ad:	e9 87 00 00 00       	jmp    c000b639 <KeInitialiseSymlinks()+0x1b4>
c000b5b2:	52                   	push   edx
c000b5b3:	52                   	push   edx
c000b5b4:	6a 01                	push   0x1
c000b5b6:	53                   	push   ebx
c000b5b7:	e8 50 06 00 00       	call   c000bc0c <File::open(FileOpenMode)>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	85 c0                	test   eax,eax
c000b5c1:	74 10                	je     c000b5d3 <KeInitialiseSymlinks()+0x14e>
c000b5c3:	83 ec 0c             	sub    esp,0xc
c000b5c6:	68 55 19 02 c0       	push   0xc0021955
c000b5cb:	e8 ef 60 00 00       	call   c00116bf <KePanic(char const*)>
c000b5d0:	83 c4 10             	add    esp,0x10
c000b5d3:	83 ec 0c             	sub    esp,0xc
c000b5d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5d8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b5dc:	57                   	push   edi
c000b5dd:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b5e1:	56                   	push   esi
c000b5e2:	6a 00                	push   0x0
c000b5e4:	68 00 01 00 00       	push   0x100
c000b5e9:	53                   	push   ebx
c000b5ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b5ed:	83 c4 20             	add    esp,0x20
c000b5f0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b5f8:	75 33                	jne    c000b62d <KeInitialiseSymlinks()+0x1a8>
c000b5fa:	83 ec 0c             	sub    esp,0xc
c000b5fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5ff:	57                   	push   edi
c000b600:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b604:	52                   	push   edx
c000b605:	6a 00                	push   0x0
c000b607:	6a 08                	push   0x8
c000b609:	53                   	push   ebx
c000b60a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b60d:	83 c4 20             	add    esp,0x20
c000b610:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b615:	75 16                	jne    c000b62d <KeInitialiseSymlinks()+0x1a8>
c000b617:	89 f0                	mov    eax,esi
c000b619:	e8 09 f9 ff ff       	call   c000af27 <KiGetSymlinkHash(char const*)>
c000b61e:	ba 01 00 00 00       	mov    edx,0x1
c000b623:	0f b7 c0             	movzx  eax,ax
c000b626:	e8 3f f7 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b62b:	eb a6                	jmp    c000b5d3 <KeInitialiseSymlinks()+0x14e>
c000b62d:	83 ec 0c             	sub    esp,0xc
c000b630:	53                   	push   ebx
c000b631:	e8 34 06 00 00       	call   c000bc6a <File::close()>
c000b636:	83 c4 10             	add    esp,0x10
c000b639:	83 ec 0c             	sub    esp,0xc
c000b63c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b63e:	53                   	push   ebx
c000b63f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b642:	83 c4 10             	add    esp,0x10
c000b645:	50                   	push   eax
c000b646:	50                   	push   eax
c000b647:	68 70 19 02 c0       	push   0xc0021970
c000b64c:	68 7e 19 02 c0       	push   0xc002197e
c000b651:	e8 f3 fc ff ff       	call   c000b349 <KeCreateSymlink(char const*, char const*)>
c000b656:	81 c4 20 01 00 00    	add    esp,0x120
c000b65c:	5b                   	pop    ebx
c000b65d:	5e                   	pop    esi
c000b65e:	5f                   	pop    edi
c000b65f:	c3                   	ret    

c000b660 <File::read(unsigned long long, void*, int*)>:
c000b660:	53                   	push   ebx
c000b661:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b665:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b669:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b670:	83 f8 19             	cmp    eax,0x19
c000b673:	77 35                	ja     c000b6aa <File::read(unsigned long long, void*, int*)+0x4a>
c000b675:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b67c:	85 c0                	test   eax,eax
c000b67e:	74 2a                	je     c000b6aa <File::read(unsigned long long, void*, int*)+0x4a>
c000b680:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b686:	85 c0                	test   eax,eax
c000b688:	74 20                	je     c000b6aa <File::read(unsigned long long, void*, int*)+0x4a>
c000b68a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68e:	74 21                	je     c000b6b1 <File::read(unsigned long long, void*, int*)+0x51>
c000b690:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b692:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b696:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b69c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a4:	5b                   	pop    ebx
c000b6a5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b6a8:	ff e0                	jmp    eax
c000b6aa:	b8 0b 00 00 00       	mov    eax,0xb
c000b6af:	eb 05                	jmp    c000b6b6 <File::read(unsigned long long, void*, int*)+0x56>
c000b6b1:	b8 05 00 00 00       	mov    eax,0x5
c000b6b6:	5b                   	pop    ebx
c000b6b7:	c3                   	ret    

c000b6b8 <File::write(unsigned long long, void*, int*)>:
c000b6b8:	53                   	push   ebx
c000b6b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b6bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6c1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b6c8:	83 f8 19             	cmp    eax,0x19
c000b6cb:	77 35                	ja     c000b702 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6cd:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6d4:	85 c0                	test   eax,eax
c000b6d6:	74 2a                	je     c000b702 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6d8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6de:	85 c0                	test   eax,eax
c000b6e0:	74 20                	je     c000b702 <File::write(unsigned long long, void*, int*)+0x4a>
c000b6e2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6e6:	74 21                	je     c000b709 <File::write(unsigned long long, void*, int*)+0x51>
c000b6e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6ea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6ee:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6fc:	5b                   	pop    ebx
c000b6fd:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b700:	ff e0                	jmp    eax
c000b702:	b8 0b 00 00 00       	mov    eax,0xb
c000b707:	eb 05                	jmp    c000b70e <File::write(unsigned long long, void*, int*)+0x56>
c000b709:	b8 05 00 00 00       	mov    eax,0x5
c000b70e:	5b                   	pop    ebx
c000b70f:	c3                   	ret    

c000b710 <Directory::read(unsigned long long, void*, int*)>:
c000b710:	53                   	push   ebx
c000b711:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b715:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b719:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b720:	83 f8 19             	cmp    eax,0x19
c000b723:	77 35                	ja     c000b75a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b725:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b72c:	85 c0                	test   eax,eax
c000b72e:	74 2a                	je     c000b75a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b730:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b736:	85 c0                	test   eax,eax
c000b738:	74 20                	je     c000b75a <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b73a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b73e:	74 21                	je     c000b761 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b740:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b742:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b746:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b74c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b754:	5b                   	pop    ebx
c000b755:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b758:	ff e0                	jmp    eax
c000b75a:	b8 0b 00 00 00       	mov    eax,0xb
c000b75f:	eb 05                	jmp    c000b766 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b761:	b8 05 00 00 00       	mov    eax,0x5
c000b766:	5b                   	pop    ebx
c000b767:	c3                   	ret    

c000b768 <Directory::write(unsigned long long, void*, int*)>:
c000b768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b76c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b773:	b8 0b 00 00 00       	mov    eax,0xb
c000b778:	83 fa 19             	cmp    edx,0x19
c000b77b:	77 18                	ja     c000b795 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b77d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b784:	85 d2                	test   edx,edx
c000b786:	74 0d                	je     c000b795 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b788:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b78f:	19 c0                	sbb    eax,eax
c000b791:	83 e0 0a             	and    eax,0xa
c000b794:	40                   	inc    eax
c000b795:	c3                   	ret    

c000b796 <File::isAtty()>:
c000b796:	31 c0                	xor    eax,eax
c000b798:	c3                   	ret    
c000b799:	90                   	nop

c000b79a <Directory::isAtty()>:
c000b79a:	31 c0                	xor    eax,eax
c000b79c:	c3                   	ret    
c000b79d:	90                   	nop

c000b79e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b79e:	b8 0a 00 00 00       	mov    eax,0xa
c000b7a3:	c3                   	ret    

c000b7a4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b7a4:	b8 0a 00 00 00       	mov    eax,0xa
c000b7a9:	c3                   	ret    

c000b7aa <Filesystem::allocateSwapfile(char const*, int)>:
c000b7aa:	31 c0                	xor    eax,eax
c000b7ac:	31 d2                	xor    edx,edx
c000b7ae:	c3                   	ret    
c000b7af:	90                   	nop

c000b7b0 <File::~File()>:
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000b7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7bc:	89 10                	mov    DWORD PTR [eax],edx
c000b7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7c2:	83 ec 0c             	sub    esp,0xc
c000b7c5:	50                   	push   eax
c000b7c6:	e8 d9 db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b7cb:	83 c4 10             	add    esp,0x10
c000b7ce:	90                   	nop
c000b7cf:	83 c4 0c             	add    esp,0xc
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <File::~File()>:
c000b7d4:	83 ec 0c             	sub    esp,0xc
c000b7d7:	83 ec 0c             	sub    esp,0xc
c000b7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7de:	e8 cd ff ff ff       	call   c000b7b0 <File::~File()>
c000b7e3:	83 c4 10             	add    esp,0x10
c000b7e6:	83 ec 08             	sub    esp,0x8
c000b7e9:	68 14 01 00 00       	push   0x114
c000b7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f2:	e8 21 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7f7:	83 c4 10             	add    esp,0x10
c000b7fa:	83 c4 0c             	add    esp,0xc
c000b7fd:	c3                   	ret    

c000b7fe <Directory::~Directory()>:
c000b7fe:	83 ec 0c             	sub    esp,0xc
c000b801:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b80a:	89 10                	mov    DWORD PTR [eax],edx
c000b80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	50                   	push   eax
c000b814:	e8 8b db ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b819:	83 c4 10             	add    esp,0x10
c000b81c:	90                   	nop
c000b81d:	83 c4 0c             	add    esp,0xc
c000b820:	c3                   	ret    
c000b821:	90                   	nop

c000b822 <Directory::~Directory()>:
c000b822:	83 ec 0c             	sub    esp,0xc
c000b825:	83 ec 0c             	sub    esp,0xc
c000b828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82c:	e8 cd ff ff ff       	call   c000b7fe <Directory::~Directory()>
c000b831:	83 c4 10             	add    esp,0x10
c000b834:	83 ec 08             	sub    esp,0x8
c000b837:	68 14 01 00 00       	push   0x114
c000b83c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b840:	e8 d3 ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	83 c4 0c             	add    esp,0xc
c000b84b:	c3                   	ret    

c000b84c <Filesystem::Filesystem()>:
c000b84c:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000b851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b855:	89 10                	mov    DWORD PTR [eax],edx
c000b857:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b85d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b861:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b868:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b86d:	90                   	nop
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <Filesystem::~Filesystem()>:
c000b870:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000b875:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b879:	89 10                	mov    DWORD PTR [eax],edx
c000b87b:	90                   	nop
c000b87c:	c3                   	ret    
c000b87d:	90                   	nop

c000b87e <Filesystem::~Filesystem()>:
c000b87e:	83 ec 0c             	sub    esp,0xc
c000b881:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b885:	e8 e6 ff ff ff       	call   c000b870 <Filesystem::~Filesystem()>
c000b88a:	83 c4 04             	add    esp,0x4
c000b88d:	83 ec 08             	sub    esp,0x8
c000b890:	6a 08                	push   0x8
c000b892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b896:	e8 7d ef ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b89b:	83 c4 10             	add    esp,0x10
c000b89e:	83 c4 0c             	add    esp,0xc
c000b8a1:	c3                   	ret    

c000b8a2 <Fs::getcwd(Process*, char*, int)>:
c000b8a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b8a6:	31 c0                	xor    eax,eax
c000b8a8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b8ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b8af:	7d 15                	jge    c000b8c6 <Fs::getcwd(Process*, char*, int)+0x24>
c000b8b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b8b5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b8bc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b8bf:	84 c9                	test   cl,cl
c000b8c1:	74 06                	je     c000b8c9 <Fs::getcwd(Process*, char*, int)+0x27>
c000b8c3:	40                   	inc    eax
c000b8c4:	eb e2                	jmp    c000b8a8 <Fs::getcwd(Process*, char*, int)+0x6>
c000b8c6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b8c9:	31 c0                	xor    eax,eax
c000b8cb:	c3                   	ret    

c000b8cc <Fs::initVFS()>:
c000b8cc:	83 ec 18             	sub    esp,0x18
c000b8cf:	6a 08                	push   0x8
c000b8d1:	e8 e0 c1 ff ff       	call   c0007ab6 <malloc>
c000b8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8d9:	e8 ee e3 00 00       	call   c0019ccc <FAT::FAT()>
c000b8de:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b8e5:	e8 cc c1 ff ff       	call   c0007ab6 <malloc>
c000b8ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8ed:	e8 06 f3 00 00       	call   c001abf8 <ISO9660::ISO9660()>
c000b8f2:	83 c4 1c             	add    esp,0x1c
c000b8f5:	c3                   	ret    

c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	81 ec 10 04 00 00    	sub    esp,0x410
c000b900:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b907:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b90e:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b916:	68 00 04 00 00       	push   0x400
c000b91b:	6a 00                	push   0x0
c000b91d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b921:	57                   	push   edi
c000b922:	e8 c9 4b ff ff       	call   c00004f0 <memset>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b92e:	75 0b                	jne    c000b93b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b930:	50                   	push   eax
c000b931:	50                   	push   eax
c000b932:	55                   	push   ebp
c000b933:	57                   	push   edi
c000b934:	e8 07 4d ff ff       	call   c0000640 <strcpy>
c000b939:	eb 51                	jmp    c000b98c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b93b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b93f:	83 f8 5c             	cmp    eax,0x5c
c000b942:	74 05                	je     c000b949 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b944:	83 f8 2f             	cmp    eax,0x2f
c000b947:	75 1e                	jne    c000b967 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b949:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b950:	8a 00                	mov    al,BYTE PTR [eax]
c000b952:	3c 60                	cmp    al,0x60
c000b954:	7e 03                	jle    c000b959 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b956:	83 e8 20             	sub    eax,0x20
c000b959:	88 04 24             	mov    BYTE PTR [esp],al
c000b95c:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b963:	50                   	push   eax
c000b964:	50                   	push   eax
c000b965:	eb 1e                	jmp    c000b985 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b967:	50                   	push   eax
c000b968:	50                   	push   eax
c000b969:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b970:	57                   	push   edi
c000b971:	e8 ca 4c ff ff       	call   c0000640 <strcpy>
c000b976:	58                   	pop    eax
c000b977:	5a                   	pop    edx
c000b978:	68 a3 29 02 c0       	push   0xc00229a3
c000b97d:	57                   	push   edi
c000b97e:	e8 bd 4e ff ff       	call   c0000840 <strcat>
c000b983:	59                   	pop    ecx
c000b984:	58                   	pop    eax
c000b985:	55                   	push   ebp
c000b986:	57                   	push   edi
c000b987:	e8 b4 4e ff ff       	call   c0000840 <strcat>
c000b98c:	83 c4 10             	add    esp,0x10
c000b98f:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b992:	3c 60                	cmp    al,0x60
c000b994:	7e 03                	jle    c000b999 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b996:	83 e8 20             	sub    eax,0x20
c000b999:	88 04 24             	mov    BYTE PTR [esp],al
c000b99c:	88 06                	mov    BYTE PTR [esi],al
c000b99e:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b9a5:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b9ab:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b9af:	bf 03 00 00 00       	mov    edi,0x3
c000b9b4:	b8 03 00 00 00       	mov    eax,0x3
c000b9b9:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b9bd:	89 e9                	mov    ecx,ebp
c000b9bf:	85 ed                	test   ebp,ebp
c000b9c1:	0f 84 97 00 00 00    	je     c000ba5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b9c7:	8d 57 01             	lea    edx,[edi+0x1]
c000b9ca:	83 fd 5c             	cmp    ebp,0x5c
c000b9cd:	74 05                	je     c000b9d4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b9cf:	83 fd 2f             	cmp    ebp,0x2f
c000b9d2:	75 12                	jne    c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9d4:	89 c5                	mov    ebp,eax
c000b9d6:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9db:	74 09                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9dd:	40                   	inc    eax
c000b9de:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b9e2:	89 d7                	mov    edi,edx
c000b9e4:	eb d3                	jmp    c000b9b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b9e6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b9eb:	0f be e9             	movsx  ebp,cl
c000b9ee:	75 5e                	jne    c000ba4e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9f0:	83 fd 2e             	cmp    ebp,0x2e
c000b9f3:	75 59                	jne    c000ba4e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b9f5:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b9f9:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b9fe:	74 18                	je     c000ba18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000ba00:	83 fd 2e             	cmp    ebp,0x2e
c000ba03:	74 53                	je     c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000ba05:	89 fa                	mov    edx,edi
c000ba07:	42                   	inc    edx
c000ba08:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000ba0c:	83 f9 2f             	cmp    ecx,0x2f
c000ba0f:	74 f6                	je     c000ba07 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000ba11:	83 f9 5c             	cmp    ecx,0x5c
c000ba14:	74 f1                	je     c000ba07 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000ba16:	eb ca                	jmp    c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba18:	83 fd 2e             	cmp    ebp,0x2e
c000ba1b:	74 3b                	je     c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000ba1d:	83 f8 03             	cmp    eax,0x3
c000ba20:	74 c0                	je     c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba22:	42                   	inc    edx
c000ba23:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000ba27:	83 f9 5c             	cmp    ecx,0x5c
c000ba2a:	74 f6                	je     c000ba22 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba2c:	83 f9 2f             	cmp    ecx,0x2f
c000ba2f:	74 f1                	je     c000ba22 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000ba31:	48                   	dec    eax
c000ba32:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba36:	75 06                	jne    c000ba3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba38:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba3c:	eb f3                	jmp    c000ba31 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000ba3e:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000ba42:	74 07                	je     c000ba4b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000ba44:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba48:	48                   	dec    eax
c000ba49:	eb f3                	jmp    c000ba3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000ba4b:	40                   	inc    eax
c000ba4c:	eb 94                	jmp    c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba4e:	83 fd 5c             	cmp    ebp,0x5c
c000ba51:	74 8f                	je     c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba53:	83 fd 2f             	cmp    ebp,0x2f
c000ba56:	74 8a                	je     c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba58:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000ba5b:	40                   	inc    eax
c000ba5c:	eb 84                	jmp    c000b9e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000ba5e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	56                   	push   esi
c000ba66:	e8 05 4b ff ff       	call   c0000570 <strlen>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000ba73:	74 17                	je     c000ba8c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba75:	83 ec 0c             	sub    esp,0xc
c000ba78:	56                   	push   esi
c000ba79:	e8 f2 4a ff ff       	call   c0000570 <strlen>
c000ba7e:	83 c4 10             	add    esp,0x10
c000ba81:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba86:	74 04                	je     c000ba8c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba88:	31 ff                	xor    edi,edi
c000ba8a:	eb 5c                	jmp    c000bae8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba8c:	83 ec 0c             	sub    esp,0xc
c000ba8f:	56                   	push   esi
c000ba90:	e8 db 4a ff ff       	call   c0000570 <strlen>
c000ba95:	83 c4 10             	add    esp,0x10
c000ba98:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba9d:	74 e9                	je     c000ba88 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba9f:	83 ec 0c             	sub    esp,0xc
c000baa2:	56                   	push   esi
c000baa3:	e8 c8 4a ff ff       	call   c0000570 <strlen>
c000baa8:	83 c4 10             	add    esp,0x10
c000baab:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000bab0:	eb b0                	jmp    c000ba62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000bab2:	52                   	push   edx
c000bab3:	52                   	push   edx
c000bab4:	56                   	push   esi
c000bab5:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000bab9:	55                   	push   ebp
c000baba:	e8 81 4b ff ff       	call   c0000640 <strcpy>
c000babf:	59                   	pop    ecx
c000bac0:	58                   	pop    eax
c000bac1:	56                   	push   esi
c000bac2:	55                   	push   ebp
c000bac3:	e8 da f6 ff ff       	call   c000b1a2 <KeDereferenceSymlink(char const*, char*)>
c000bac8:	83 c4 10             	add    esp,0x10
c000bacb:	48                   	dec    eax
c000bacc:	75 37                	jne    c000bb05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000bace:	50                   	push   eax
c000bacf:	56                   	push   esi
c000bad0:	55                   	push   ebp
c000bad1:	68 9c 19 02 c0       	push   0xc002199c
c000bad6:	e8 6a ee ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000badb:	83 c4 10             	add    esp,0x10
c000bade:	8d 47 01             	lea    eax,[edi+0x1]
c000bae1:	83 ff 14             	cmp    edi,0x14
c000bae4:	74 08                	je     c000baee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000bae6:	89 c7                	mov    edi,eax
c000bae8:	85 db                	test   ebx,ebx
c000baea:	75 c6                	jne    c000bab2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000baec:	eb 17                	jmp    c000bb05 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	bf 15 00 00 00       	mov    edi,0x15
c000baf6:	68 b7 19 02 c0       	push   0xc00219b7
c000bafb:	e8 bf 5b 00 00       	call   c00116bf <KePanic(char const*)>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	eb e3                	jmp    c000bae8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000bb05:	81 c4 0c 04 00 00    	add    esp,0x40c
c000bb0b:	5b                   	pop    ebx
c000bb0c:	5e                   	pop    esi
c000bb0d:	5f                   	pop    edi
c000bb0e:	5d                   	pop    ebp
c000bb0f:	c3                   	ret    

c000bb10 <File::File(char const*, Process*, bool)>:
c000bb10:	83 ec 1c             	sub    esp,0x1c
c000bb13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000bb1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb1f:	83 ec 08             	sub    esp,0x8
c000bb22:	6a 00                	push   0x0
c000bb24:	50                   	push   eax
c000bb25:	e8 94 d6 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bb2a:	83 c4 10             	add    esp,0x10
c000bb2d:	ba 54 1a 02 c0       	mov    edx,0xc0021a54
c000bb32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb36:	89 10                	mov    DWORD PTR [eax],edx
c000bb38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000bb3d:	85 c0                	test   eax,eax
c000bb3f:	74 0f                	je     c000bb50 <File::File(char const*, Process*, bool)+0x40>
c000bb41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bb46:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bb4a:	74 04                	je     c000bb50 <File::File(char const*, Process*, bool)+0x40>
c000bb4c:	b0 01                	mov    al,0x1
c000bb4e:	eb 02                	jmp    c000bb52 <File::File(char const*, Process*, bool)+0x42>
c000bb50:	b0 00                	mov    al,0x0
c000bb52:	0f b6 c0             	movzx  eax,al
c000bb55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb59:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bb5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb63:	83 c2 0d             	add    edx,0xd
c000bb66:	50                   	push   eax
c000bb67:	51                   	push   ecx
c000bb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb6c:	52                   	push   edx
c000bb6d:	e8 84 fd ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb79:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bb7c:	83 e8 41             	sub    eax,0x41
c000bb7f:	88 c2                	mov    dl,al
c000bb81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb85:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bb8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb8f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bb93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb97:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb9d:	0f b6 c0             	movzx  eax,al
c000bba0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bba7:	85 c0                	test   eax,eax
c000bba9:	74 3e                	je     c000bbe9 <File::File(char const*, Process*, bool)+0xd9>
c000bbab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbaf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bbb5:	0f b6 c0             	movzx  eax,al
c000bbb8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbbf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbc5:	85 c0                	test   eax,eax
c000bbc7:	75 20                	jne    c000bbe9 <File::File(char const*, Process*, bool)+0xd9>
c000bbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbcd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bbd3:	0f b6 c0             	movzx  eax,al
c000bbd6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bbdd:	83 ec 0c             	sub    esp,0xc
c000bbe0:	50                   	push   eax
c000bbe1:	e8 a0 21 00 00       	call   c000dd86 <LogicalDisk::mount()>
c000bbe6:	83 c4 10             	add    esp,0x10
c000bbe9:	90                   	nop
c000bbea:	83 c4 1c             	add    esp,0x1c
c000bbed:	c3                   	ret    

c000bbee <File::File(char const*, Process*)>:
c000bbee:	83 ec 0c             	sub    esp,0xc
c000bbf1:	6a 01                	push   0x1
c000bbf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbff:	e8 0c ff ff ff       	call   c000bb10 <File::File(char const*, Process*, bool)>
c000bc04:	83 c4 10             	add    esp,0x10
c000bc07:	90                   	nop
c000bc08:	83 c4 0c             	add    esp,0xc
c000bc0b:	c3                   	ret    

c000bc0c <File::open(FileOpenMode)>:
c000bc0c:	53                   	push   ebx
c000bc0d:	b8 0b 00 00 00       	mov    eax,0xb
c000bc12:	83 ec 08             	sub    esp,0x8
c000bc15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc19:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bc20:	83 fa 19             	cmp    edx,0x19
c000bc23:	77 40                	ja     c000bc65 <File::open(FileOpenMode)+0x59>
c000bc25:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc2c:	85 d2                	test   edx,edx
c000bc2e:	74 35                	je     c000bc65 <File::open(FileOpenMode)+0x59>
c000bc30:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc36:	85 d2                	test   edx,edx
c000bc38:	74 2b                	je     c000bc65 <File::open(FileOpenMode)+0x59>
c000bc3a:	b8 06 00 00 00       	mov    eax,0x6
c000bc3f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bc43:	75 20                	jne    c000bc65 <File::open(FileOpenMode)+0x59>
c000bc45:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc47:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc51:	51                   	push   ecx
c000bc52:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bc55:	51                   	push   ecx
c000bc56:	52                   	push   edx
c000bc57:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	85 c0                	test   eax,eax
c000bc5f:	75 04                	jne    c000bc65 <File::open(FileOpenMode)+0x59>
c000bc61:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bc65:	83 c4 08             	add    esp,0x8
c000bc68:	5b                   	pop    ebx
c000bc69:	c3                   	ret    

c000bc6a <File::close()>:
c000bc6a:	53                   	push   ebx
c000bc6b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc70:	83 ec 08             	sub    esp,0x8
c000bc73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc77:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc7e:	83 f9 19             	cmp    ecx,0x19
c000bc81:	77 41                	ja     c000bcc4 <File::close()+0x5a>
c000bc83:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bc8a:	85 db                	test   ebx,ebx
c000bc8c:	74 36                	je     c000bcc4 <File::close()+0x5a>
c000bc8e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bc95:	74 2d                	je     c000bcc4 <File::close()+0x5a>
c000bc97:	b8 05 00 00 00       	mov    eax,0x5
c000bc9c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bca0:	74 22                	je     c000bcc4 <File::close()+0x5a>
c000bca2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bca6:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bcad:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bcb3:	53                   	push   ebx
c000bcb4:	53                   	push   ebx
c000bcb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bcb7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bcbd:	50                   	push   eax
c000bcbe:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	83 c4 08             	add    esp,0x8
c000bcc7:	5b                   	pop    ebx
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <File::seek(unsigned long long)>:
c000bcca:	56                   	push   esi
c000bccb:	53                   	push   ebx
c000bccc:	b8 0b 00 00 00       	mov    eax,0xb
c000bcd1:	51                   	push   ecx
c000bcd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bcd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bcda:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bce1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bce5:	83 fa 19             	cmp    edx,0x19
c000bce8:	77 31                	ja     c000bd1b <File::seek(unsigned long long)+0x51>
c000bcea:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcf1:	85 d2                	test   edx,edx
c000bcf3:	74 26                	je     c000bd1b <File::seek(unsigned long long)+0x51>
c000bcf5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcfb:	85 d2                	test   edx,edx
c000bcfd:	74 1c                	je     c000bd1b <File::seek(unsigned long long)+0x51>
c000bcff:	b8 05 00 00 00       	mov    eax,0x5
c000bd04:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd08:	74 11                	je     c000bd1b <File::seek(unsigned long long)+0x51>
c000bd0a:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd0c:	53                   	push   ebx
c000bd0d:	51                   	push   ecx
c000bd0e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd14:	52                   	push   edx
c000bd15:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	5a                   	pop    edx
c000bd1c:	5b                   	pop    ebx
c000bd1d:	5e                   	pop    esi
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <File::truncate(unsigned long long)>:
c000bd20:	56                   	push   esi
c000bd21:	53                   	push   ebx
c000bd22:	b8 0b 00 00 00       	mov    eax,0xb
c000bd27:	51                   	push   ecx
c000bd28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd30:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bd37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd3b:	83 fa 19             	cmp    edx,0x19
c000bd3e:	77 31                	ja     c000bd71 <File::truncate(unsigned long long)+0x51>
c000bd40:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd47:	85 d2                	test   edx,edx
c000bd49:	74 26                	je     c000bd71 <File::truncate(unsigned long long)+0x51>
c000bd4b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd51:	85 d2                	test   edx,edx
c000bd53:	74 1c                	je     c000bd71 <File::truncate(unsigned long long)+0x51>
c000bd55:	b8 05 00 00 00       	mov    eax,0x5
c000bd5a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bd5e:	74 11                	je     c000bd71 <File::truncate(unsigned long long)+0x51>
c000bd60:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd62:	53                   	push   ebx
c000bd63:	51                   	push   ecx
c000bd64:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bd6a:	52                   	push   edx
c000bd6b:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bd6e:	83 c4 10             	add    esp,0x10
c000bd71:	5a                   	pop    edx
c000bd72:	5b                   	pop    ebx
c000bd73:	5e                   	pop    esi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <File::tell(unsigned long long*)>:
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	b8 0b 00 00 00       	mov    eax,0xb
c000bd7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd82:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bd89:	83 fa 19             	cmp    edx,0x19
c000bd8c:	77 34                	ja     c000bdc2 <File::tell(unsigned long long*)+0x4c>
c000bd8e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bd95:	85 d2                	test   edx,edx
c000bd97:	74 29                	je     c000bdc2 <File::tell(unsigned long long*)+0x4c>
c000bd99:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd9f:	85 d2                	test   edx,edx
c000bda1:	74 1f                	je     c000bdc2 <File::tell(unsigned long long*)+0x4c>
c000bda3:	b8 05 00 00 00       	mov    eax,0x5
c000bda8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bdac:	74 14                	je     c000bdc2 <File::tell(unsigned long long*)+0x4c>
c000bdae:	50                   	push   eax
c000bdaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdb5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bdbb:	52                   	push   edx
c000bdbc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bdbf:	83 c4 10             	add    esp,0x10
c000bdc2:	83 c4 0c             	add    esp,0xc
c000bdc5:	c3                   	ret    

c000bdc6 <File::rewind()>:
c000bdc6:	83 ec 10             	sub    esp,0x10
c000bdc9:	6a 00                	push   0x0
c000bdcb:	6a 00                	push   0x0
c000bdcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd1:	e8 f4 fe ff ff       	call   c000bcca <File::seek(unsigned long long)>
c000bdd6:	83 c4 1c             	add    esp,0x1c
c000bdd9:	c3                   	ret    

c000bdda <File::unlink()>:
c000bdda:	83 ec 0c             	sub    esp,0xc
c000bddd:	b8 0b 00 00 00       	mov    eax,0xb
c000bde2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bded:	83 f9 19             	cmp    ecx,0x19
c000bdf0:	77 2f                	ja     c000be21 <File::unlink()+0x47>
c000bdf2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdf9:	85 c9                	test   ecx,ecx
c000bdfb:	74 24                	je     c000be21 <File::unlink()+0x47>
c000bdfd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be03:	85 c9                	test   ecx,ecx
c000be05:	74 1a                	je     c000be21 <File::unlink()+0x47>
c000be07:	b8 06 00 00 00       	mov    eax,0x6
c000be0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be10:	75 0f                	jne    c000be21 <File::unlink()+0x47>
c000be12:	83 c2 0d             	add    edx,0xd
c000be15:	50                   	push   eax
c000be16:	50                   	push   eax
c000be17:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be19:	52                   	push   edx
c000be1a:	51                   	push   ecx
c000be1b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be1e:	83 c4 10             	add    esp,0x10
c000be21:	83 c4 0c             	add    esp,0xc
c000be24:	c3                   	ret    
c000be25:	90                   	nop

c000be26 <File::rename(char const*)>:
c000be26:	83 ec 0c             	sub    esp,0xc
c000be29:	b8 0b 00 00 00       	mov    eax,0xb
c000be2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be39:	83 f9 19             	cmp    ecx,0x19
c000be3c:	77 32                	ja     c000be70 <File::rename(char const*)+0x4a>
c000be3e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be45:	85 c9                	test   ecx,ecx
c000be47:	74 27                	je     c000be70 <File::rename(char const*)+0x4a>
c000be49:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be4f:	85 c9                	test   ecx,ecx
c000be51:	74 1d                	je     c000be70 <File::rename(char const*)+0x4a>
c000be53:	b8 06 00 00 00       	mov    eax,0x6
c000be58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be5c:	75 12                	jne    c000be70 <File::rename(char const*)+0x4a>
c000be5e:	83 c2 0d             	add    edx,0xd
c000be61:	50                   	push   eax
c000be62:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be68:	52                   	push   edx
c000be69:	51                   	push   ecx
c000be6a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be6d:	83 c4 10             	add    esp,0x10
c000be70:	83 c4 0c             	add    esp,0xc
c000be73:	c3                   	ret    

c000be74 <File::chfatattr(unsigned char, unsigned char)>:
c000be74:	57                   	push   edi
c000be75:	b8 0b 00 00 00       	mov    eax,0xb
c000be7a:	56                   	push   esi
c000be7b:	53                   	push   ebx
c000be7c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be84:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be8b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be8f:	83 f9 19             	cmp    ecx,0x19
c000be92:	77 37                	ja     c000becb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be94:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be9b:	85 c9                	test   ecx,ecx
c000be9d:	74 2c                	je     c000becb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be9f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea5:	85 c9                	test   ecx,ecx
c000bea7:	74 22                	je     c000becb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bea9:	b8 06 00 00 00       	mov    eax,0x6
c000beae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beb2:	75 17                	jne    c000becb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000beb4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000beb6:	89 f0                	mov    eax,esi
c000beb8:	83 c2 0d             	add    edx,0xd
c000bebb:	0f b6 f0             	movzx  esi,al
c000bebe:	0f b6 db             	movzx  ebx,bl
c000bec1:	56                   	push   esi
c000bec2:	53                   	push   ebx
c000bec3:	52                   	push   edx
c000bec4:	51                   	push   ecx
c000bec5:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bec8:	83 c4 10             	add    esp,0x10
c000becb:	5b                   	pop    ebx
c000becc:	5e                   	pop    esi
c000becd:	5f                   	pop    edi
c000bece:	c3                   	ret    
c000becf:	90                   	nop

c000bed0 <File::exists()>:
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	31 c0                	xor    eax,eax
c000bed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bee0:	83 f9 19             	cmp    ecx,0x19
c000bee3:	77 24                	ja     c000bf09 <File::exists()+0x39>
c000bee5:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000beec:	85 c9                	test   ecx,ecx
c000beee:	74 19                	je     c000bf09 <File::exists()+0x39>
c000bef0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bef6:	85 c9                	test   ecx,ecx
c000bef8:	74 0f                	je     c000bf09 <File::exists()+0x39>
c000befa:	83 c2 0d             	add    edx,0xd
c000befd:	50                   	push   eax
c000befe:	50                   	push   eax
c000beff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf01:	52                   	push   edx
c000bf02:	51                   	push   ecx
c000bf03:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	83 c4 0c             	add    esp,0xc
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <File::stat(unsigned long long*, bool*)>:
c000bf0e:	56                   	push   esi
c000bf0f:	53                   	push   ebx
c000bf10:	50                   	push   eax
c000bf11:	b8 0b 00 00 00       	mov    eax,0xb
c000bf16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf1a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf29:	83 f9 19             	cmp    ecx,0x19
c000bf2c:	77 3d                	ja     c000bf6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bf2e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bf35:	85 c9                	test   ecx,ecx
c000bf37:	74 32                	je     c000bf6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bf39:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf3f:	85 c9                	test   ecx,ecx
c000bf41:	74 28                	je     c000bf6b <File::stat(unsigned long long*, bool*)+0x5d>
c000bf43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf49:	74 13                	je     c000bf5e <File::stat(unsigned long long*, bool*)+0x50>
c000bf4b:	83 ec 04             	sub    esp,0x4
c000bf4e:	56                   	push   esi
c000bf4f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf55:	51                   	push   ecx
c000bf56:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bf59:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bf5c:	eb 0a                	jmp    c000bf68 <File::stat(unsigned long long*, bool*)+0x5a>
c000bf5e:	53                   	push   ebx
c000bf5f:	83 c2 0d             	add    edx,0xd
c000bf62:	56                   	push   esi
c000bf63:	52                   	push   edx
c000bf64:	51                   	push   ecx
c000bf65:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bf68:	83 c4 10             	add    esp,0x10
c000bf6b:	5a                   	pop    edx
c000bf6c:	5b                   	pop    ebx
c000bf6d:	5e                   	pop    esi
c000bf6e:	c3                   	ret    

c000bf6f <Fs::setcwd(Process*, char*)>:
c000bf6f:	55                   	push   ebp
c000bf70:	57                   	push   edi
c000bf71:	56                   	push   esi
c000bf72:	53                   	push   ebx
c000bf73:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bf79:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bf80:	6a 00                	push   0x0
c000bf82:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bf88:	57                   	push   edi
c000bf89:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bf90:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bf94:	56                   	push   esi
c000bf95:	e8 5c f9 ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf9a:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf9d:	e8 ce 45 ff ff       	call   c0000570 <strlen>
c000bfa2:	83 c4 10             	add    esp,0x10
c000bfa5:	83 f8 02             	cmp    eax,0x2
c000bfa8:	77 15                	ja     c000bfbf <Fs::setcwd(Process*, char*)+0x50>
c000bfaa:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bfaf:	83 eb 41             	sub    ebx,0x41
c000bfb2:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	75 1c                	jne    c000bfd9 <Fs::setcwd(Process*, char*)+0x6a>
c000bfbd:	eb 2f                	jmp    c000bfee <Fs::setcwd(Process*, char*)+0x7f>
c000bfbf:	83 ec 0c             	sub    esp,0xc
c000bfc2:	56                   	push   esi
c000bfc3:	e8 a8 45 ff ff       	call   c0000570 <strlen>
c000bfc8:	83 c4 10             	add    esp,0x10
c000bfcb:	83 f8 03             	cmp    eax,0x3
c000bfce:	75 57                	jne    c000c027 <Fs::setcwd(Process*, char*)+0xb8>
c000bfd0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bfd5:	75 50                	jne    c000c027 <Fs::setcwd(Process*, char*)+0xb8>
c000bfd7:	eb d1                	jmp    c000bfaa <Fs::setcwd(Process*, char*)+0x3b>
c000bfd9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bfe0:	75 0c                	jne    c000bfee <Fs::setcwd(Process*, char*)+0x7f>
c000bfe2:	83 ec 0c             	sub    esp,0xc
c000bfe5:	50                   	push   eax
c000bfe6:	e8 9b 1d 00 00       	call   c000dd86 <LogicalDisk::mount()>
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	b8 03 00 00 00       	mov    eax,0x3
c000bff3:	83 fb 19             	cmp    ebx,0x19
c000bff6:	0f 87 c6 00 00 00    	ja     c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000bffc:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000c003:	b8 05 00 00 00       	mov    eax,0x5
c000c008:	85 d2                	test   edx,edx
c000c00a:	0f 84 b2 00 00 00    	je     c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c010:	b8 06 00 00 00       	mov    eax,0x6
c000c015:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000c01c:	0f 85 92 00 00 00    	jne    c000c0b4 <Fs::setcwd(Process*, char*)+0x145>
c000c022:	e9 9b 00 00 00       	jmp    c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	68 14 01 00 00       	push   0x114
c000c02f:	e8 82 ba ff ff       	call   c0007ab6 <malloc>
c000c034:	83 c4 0c             	add    esp,0xc
c000c037:	89 c3                	mov    ebx,eax
c000c039:	55                   	push   ebp
c000c03a:	56                   	push   esi
c000c03b:	50                   	push   eax
c000c03c:	e8 ad fb ff ff       	call   c000bbee <File::File(char const*, Process*)>
c000c041:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000c046:	83 c4 0c             	add    esp,0xc
c000c049:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c04d:	50                   	push   eax
c000c04e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c052:	50                   	push   eax
c000c053:	53                   	push   ebx
c000c054:	e8 b5 fe ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	83 f8 02             	cmp    eax,0x2
c000c05f:	74 27                	je     c000c088 <Fs::setcwd(Process*, char*)+0x119>
c000c061:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c066:	75 1c                	jne    c000c084 <Fs::setcwd(Process*, char*)+0x115>
c000c068:	b8 02 00 00 00       	mov    eax,0x2
c000c06d:	85 db                	test   ebx,ebx
c000c06f:	74 51                	je     c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c071:	83 ec 0c             	sub    esp,0xc
c000c074:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c076:	53                   	push   ebx
c000c077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	b8 02 00 00 00       	mov    eax,0x2
c000c082:	eb 3e                	jmp    c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c084:	85 c0                	test   eax,eax
c000c086:	74 1c                	je     c000c0a4 <Fs::setcwd(Process*, char*)+0x135>
c000c088:	b8 01 00 00 00       	mov    eax,0x1
c000c08d:	85 db                	test   ebx,ebx
c000c08f:	74 31                	je     c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c091:	83 ec 0c             	sub    esp,0xc
c000c094:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c096:	53                   	push   ebx
c000c097:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c09a:	83 c4 10             	add    esp,0x10
c000c09d:	b8 01 00 00 00       	mov    eax,0x1
c000c0a2:	eb 1e                	jmp    c000c0c2 <Fs::setcwd(Process*, char*)+0x153>
c000c0a4:	85 db                	test   ebx,ebx
c000c0a6:	74 0c                	je     c000c0b4 <Fs::setcwd(Process*, char*)+0x145>
c000c0a8:	83 ec 0c             	sub    esp,0xc
c000c0ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c0ad:	53                   	push   ebx
c000c0ae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c0b1:	83 c4 10             	add    esp,0x10
c000c0b4:	50                   	push   eax
c000c0b5:	50                   	push   eax
c000c0b6:	56                   	push   esi
c000c0b7:	57                   	push   edi
c000c0b8:	e8 83 45 ff ff       	call   c0000640 <strcpy>
c000c0bd:	83 c4 10             	add    esp,0x10
c000c0c0:	31 c0                	xor    eax,eax
c000c0c2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c0c8:	5b                   	pop    ebx
c000c0c9:	5e                   	pop    esi
c000c0ca:	5f                   	pop    edi
c000c0cb:	5d                   	pop    ebp
c000c0cc:	c3                   	ret    
c000c0cd:	90                   	nop

c000c0ce <Directory::Directory(char const*, Process*)>:
c000c0ce:	83 ec 0c             	sub    esp,0xc
c000c0d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d5:	83 ec 08             	sub    esp,0x8
c000c0d8:	6a 00                	push   0x0
c000c0da:	50                   	push   eax
c000c0db:	e8 de d0 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	ba 70 1a 02 c0       	mov    edx,0xc0021a70
c000c0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ec:	89 10                	mov    DWORD PTR [eax],edx
c000c0ee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c0f3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c0f7:	0f 95 c0             	setne  al
c000c0fa:	0f b6 c0             	movzx  eax,al
c000c0fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c101:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c107:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c10b:	83 c2 0d             	add    edx,0xd
c000c10e:	50                   	push   eax
c000c10f:	51                   	push   ecx
c000c110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c114:	52                   	push   edx
c000c115:	e8 dc f7 ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c121:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c124:	83 e8 41             	sub    eax,0x41
c000c127:	88 c2                	mov    dl,al
c000c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c137:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c145:	0f b6 c0             	movzx  eax,al
c000c148:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c14f:	85 c0                	test   eax,eax
c000c151:	74 3e                	je     c000c191 <Directory::Directory(char const*, Process*)+0xc3>
c000c153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c157:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c15d:	0f b6 c0             	movzx  eax,al
c000c160:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c167:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c16d:	85 c0                	test   eax,eax
c000c16f:	75 20                	jne    c000c191 <Directory::Directory(char const*, Process*)+0xc3>
c000c171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c175:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c17b:	0f b6 c0             	movzx  eax,al
c000c17e:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c185:	83 ec 0c             	sub    esp,0xc
c000c188:	50                   	push   eax
c000c189:	e8 f8 1b 00 00       	call   c000dd86 <LogicalDisk::mount()>
c000c18e:	83 c4 10             	add    esp,0x10
c000c191:	90                   	nop
c000c192:	83 c4 0c             	add    esp,0xc
c000c195:	c3                   	ret    

c000c196 <Directory::open()>:
c000c196:	53                   	push   ebx
c000c197:	b8 0b 00 00 00       	mov    eax,0xb
c000c19c:	83 ec 08             	sub    esp,0x8
c000c19f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1a3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c1aa:	83 fa 19             	cmp    edx,0x19
c000c1ad:	77 3d                	ja     c000c1ec <Directory::open()+0x56>
c000c1af:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c1b6:	85 d2                	test   edx,edx
c000c1b8:	74 32                	je     c000c1ec <Directory::open()+0x56>
c000c1ba:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c1c0:	85 d2                	test   edx,edx
c000c1c2:	74 28                	je     c000c1ec <Directory::open()+0x56>
c000c1c4:	b8 06 00 00 00       	mov    eax,0x6
c000c1c9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c1cd:	75 1d                	jne    c000c1ec <Directory::open()+0x56>
c000c1cf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c1d5:	50                   	push   eax
c000c1d6:	8b 02                	mov    eax,DWORD PTR [edx]
c000c1d8:	51                   	push   ecx
c000c1d9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c1dc:	51                   	push   ecx
c000c1dd:	52                   	push   edx
c000c1de:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c1e1:	83 c4 10             	add    esp,0x10
c000c1e4:	85 c0                	test   eax,eax
c000c1e6:	75 04                	jne    c000c1ec <Directory::open()+0x56>
c000c1e8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c1ec:	83 c4 08             	add    esp,0x8
c000c1ef:	5b                   	pop    ebx
c000c1f0:	c3                   	ret    
c000c1f1:	90                   	nop

c000c1f2 <Directory::close()>:
c000c1f2:	53                   	push   ebx
c000c1f3:	b8 0b 00 00 00       	mov    eax,0xb
c000c1f8:	83 ec 08             	sub    esp,0x8
c000c1fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c206:	83 f9 19             	cmp    ecx,0x19
c000c209:	77 41                	ja     c000c24c <Directory::close()+0x5a>
c000c20b:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c212:	85 db                	test   ebx,ebx
c000c214:	74 36                	je     c000c24c <Directory::close()+0x5a>
c000c216:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c21d:	74 2d                	je     c000c24c <Directory::close()+0x5a>
c000c21f:	b8 05 00 00 00       	mov    eax,0x5
c000c224:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c228:	74 22                	je     c000c24c <Directory::close()+0x5a>
c000c22a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c22e:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c235:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c23b:	53                   	push   ebx
c000c23c:	53                   	push   ebx
c000c23d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c23f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c245:	50                   	push   eax
c000c246:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	83 c4 08             	add    esp,0x8
c000c24f:	5b                   	pop    ebx
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <Directory::unlink()>:
c000c252:	83 ec 0c             	sub    esp,0xc
c000c255:	b8 0b 00 00 00       	mov    eax,0xb
c000c25a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c25e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c265:	83 f9 19             	cmp    ecx,0x19
c000c268:	77 2f                	ja     c000c299 <Directory::unlink()+0x47>
c000c26a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c271:	85 c9                	test   ecx,ecx
c000c273:	74 24                	je     c000c299 <Directory::unlink()+0x47>
c000c275:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c27b:	85 c9                	test   ecx,ecx
c000c27d:	74 1a                	je     c000c299 <Directory::unlink()+0x47>
c000c27f:	b8 06 00 00 00       	mov    eax,0x6
c000c284:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c288:	75 0f                	jne    c000c299 <Directory::unlink()+0x47>
c000c28a:	83 c2 0d             	add    edx,0xd
c000c28d:	50                   	push   eax
c000c28e:	50                   	push   eax
c000c28f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c291:	52                   	push   edx
c000c292:	51                   	push   ecx
c000c293:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c296:	83 c4 10             	add    esp,0x10
c000c299:	83 c4 0c             	add    esp,0xc
c000c29c:	c3                   	ret    
c000c29d:	90                   	nop

c000c29e <Directory::rename(char const*)>:
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2b1:	83 f9 19             	cmp    ecx,0x19
c000c2b4:	77 32                	ja     c000c2e8 <Directory::rename(char const*)+0x4a>
c000c2b6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2bd:	85 c9                	test   ecx,ecx
c000c2bf:	74 27                	je     c000c2e8 <Directory::rename(char const*)+0x4a>
c000c2c1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2c7:	85 c9                	test   ecx,ecx
c000c2c9:	74 1d                	je     c000c2e8 <Directory::rename(char const*)+0x4a>
c000c2cb:	b8 06 00 00 00       	mov    eax,0x6
c000c2d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2d4:	75 12                	jne    c000c2e8 <Directory::rename(char const*)+0x4a>
c000c2d6:	83 c2 0d             	add    edx,0xd
c000c2d9:	50                   	push   eax
c000c2da:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c2e0:	52                   	push   edx
c000c2e1:	51                   	push   ecx
c000c2e2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 c4 0c             	add    esp,0xc
c000c2eb:	c3                   	ret    

c000c2ec <Directory::exists()>:
c000c2ec:	83 ec 0c             	sub    esp,0xc
c000c2ef:	31 c0                	xor    eax,eax
c000c2f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2f5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2fc:	83 f9 19             	cmp    ecx,0x19
c000c2ff:	77 24                	ja     c000c325 <Directory::exists()+0x39>
c000c301:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c308:	85 c9                	test   ecx,ecx
c000c30a:	74 19                	je     c000c325 <Directory::exists()+0x39>
c000c30c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c312:	85 c9                	test   ecx,ecx
c000c314:	74 0f                	je     c000c325 <Directory::exists()+0x39>
c000c316:	83 c2 0d             	add    edx,0xd
c000c319:	50                   	push   eax
c000c31a:	50                   	push   eax
c000c31b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c31d:	52                   	push   edx
c000c31e:	51                   	push   ecx
c000c31f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c322:	83 c4 10             	add    esp,0x10
c000c325:	83 c4 0c             	add    esp,0xc
c000c328:	c3                   	ret    
c000c329:	90                   	nop

c000c32a <Directory::read(dirent*)>:
c000c32a:	83 ec 1c             	sub    esp,0x1c
c000c32d:	b8 0b 00 00 00       	mov    eax,0xb
c000c332:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c336:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c33d:	83 f9 19             	cmp    ecx,0x19
c000c340:	77 30                	ja     c000c372 <Directory::read(dirent*)+0x48>
c000c342:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c349:	85 c9                	test   ecx,ecx
c000c34b:	74 25                	je     c000c372 <Directory::read(dirent*)+0x48>
c000c34d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c354:	74 1c                	je     c000c372 <Directory::read(dirent*)+0x48>
c000c356:	83 ec 0c             	sub    esp,0xc
c000c359:	8b 02                	mov    eax,DWORD PTR [edx]
c000c35b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c35f:	51                   	push   ecx
c000c360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c364:	6a 00                	push   0x0
c000c366:	68 10 01 00 00       	push   0x110
c000c36b:	52                   	push   edx
c000c36c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c36f:	83 c4 20             	add    esp,0x20
c000c372:	83 c4 1c             	add    esp,0x1c
c000c375:	c3                   	ret    

c000c376 <Directory::create()>:
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	b8 0b 00 00 00       	mov    eax,0xb
c000c37e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c389:	83 f9 19             	cmp    ecx,0x19
c000c38c:	77 2f                	ja     c000c3bd <Directory::create()+0x47>
c000c38e:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c395:	85 c9                	test   ecx,ecx
c000c397:	74 24                	je     c000c3bd <Directory::create()+0x47>
c000c399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c39f:	85 c9                	test   ecx,ecx
c000c3a1:	74 1a                	je     c000c3bd <Directory::create()+0x47>
c000c3a3:	b8 06 00 00 00       	mov    eax,0x6
c000c3a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c3ac:	75 0f                	jne    c000c3bd <Directory::create()+0x47>
c000c3ae:	83 c2 0d             	add    edx,0xd
c000c3b1:	50                   	push   eax
c000c3b2:	50                   	push   eax
c000c3b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c3b5:	52                   	push   edx
c000c3b6:	51                   	push   ecx
c000c3b7:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c3ba:	83 c4 10             	add    esp,0x10
c000c3bd:	83 c4 0c             	add    esp,0xc
c000c3c0:	c3                   	ret    
c000c3c1:	90                   	nop

c000c3c2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c3c2:	b8 0a 00 00 00       	mov    eax,0xa
c000c3c7:	c3                   	ret    

c000c3c8 <Bus::Bus(char const*)>:
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3cf:	83 ec 08             	sub    esp,0x8
c000c3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d6:	50                   	push   eax
c000c3d7:	e8 22 08 00 00       	call   c000cbfe <Device::Device(char const*)>
c000c3dc:	83 c4 10             	add    esp,0x10
c000c3df:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000c3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e8:	89 10                	mov    DWORD PTR [eax],edx
c000c3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ee:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c3f8:	90                   	nop
c000c3f9:	83 c4 0c             	add    esp,0xc
c000c3fc:	c3                   	ret    
c000c3fd:	90                   	nop
c000c3fe:	66 90                	xchg   ax,ax

c000c400 <Bus::~Bus()>:
c000c400:	83 ec 0c             	sub    esp,0xc
c000c403:	ba 8c 1a 02 c0       	mov    edx,0xc0021a8c
c000c408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c40c:	89 10                	mov    DWORD PTR [eax],edx
c000c40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c412:	83 ec 0c             	sub    esp,0xc
c000c415:	50                   	push   eax
c000c416:	e8 4d 05 00 00       	call   c000c968 <Device::~Device()>
c000c41b:	83 c4 10             	add    esp,0x10
c000c41e:	90                   	nop
c000c41f:	83 c4 0c             	add    esp,0xc
c000c422:	c3                   	ret    
c000c423:	90                   	nop

c000c424 <Bus::~Bus()>:
c000c424:	83 ec 0c             	sub    esp,0xc
c000c427:	83 ec 0c             	sub    esp,0xc
c000c42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c42e:	e8 cd ff ff ff       	call   c000c400 <Bus::~Bus()>
c000c433:	83 c4 10             	add    esp,0x10
c000c436:	83 ec 08             	sub    esp,0x8
c000c439:	68 58 01 00 00       	push   0x158
c000c43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c442:	e8 d1 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	83 c4 0c             	add    esp,0xc
c000c44d:	c3                   	ret    

c000c44e <beepThread(void*)>:
c000c44e:	83 ec 0c             	sub    esp,0xc
c000c451:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c456:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c45a:	48                   	dec    eax
c000c45b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c460:	75 01                	jne    c000c463 <beepThread(void*)+0x15>
c000c462:	fb                   	sti    
c000c463:	83 ec 0c             	sub    esp,0xc
c000c466:	6b c2 0a             	imul   eax,edx,0xa
c000c469:	50                   	push   eax
c000c46a:	e8 21 a0 00 00       	call   c0016490 <milliTenthSleep(unsigned int)>
c000c46f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c476:	e8 70 bf 00 00       	call   c00183eb <HalMakeBeep(int)>
c000c47b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c483:	83 c4 1c             	add    esp,0x1c
c000c486:	e9 e9 9e 00 00       	jmp    c0016374 <blockTask(TaskState)>

c000c48b <Krnl::beep(int, int, bool)>:
c000c48b:	56                   	push   esi
c000c48c:	53                   	push   ebx
c000c48d:	83 ec 10             	sub    esp,0x10
c000c490:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c494:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c49c:	e8 4a bf 00 00       	call   c00183eb <HalMakeBeep(int)>
c000c4a1:	83 c4 10             	add    esp,0x10
c000c4a4:	89 f0                	mov    eax,esi
c000c4a6:	84 c0                	test   al,al
c000c4a8:	74 1e                	je     c000c4c8 <Krnl::beep(int, int, bool)+0x3d>
c000c4aa:	83 ec 0c             	sub    esp,0xc
c000c4ad:	6b db 0a             	imul   ebx,ebx,0xa
c000c4b0:	53                   	push   ebx
c000c4b1:	e8 da 9f 00 00       	call   c0016490 <milliTenthSleep(unsigned int)>
c000c4b6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c4be:	83 c4 14             	add    esp,0x14
c000c4c1:	5b                   	pop    ebx
c000c4c2:	5e                   	pop    esi
c000c4c3:	e9 23 bf 00 00       	jmp    c00183eb <HalMakeBeep(int)>
c000c4c8:	68 e6 00 00 00       	push   0xe6
c000c4cd:	53                   	push   ebx
c000c4ce:	68 4e c4 00 c0       	push   0xc000c44e
c000c4d3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4d9:	e8 32 9a 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c000c4de:	83 c4 14             	add    esp,0x14
c000c4e1:	5b                   	pop    ebx
c000c4e2:	5e                   	pop    esi
c000c4e3:	c3                   	ret    

c000c4e4 <User::loadClockSettings(int)>:
c000c4e4:	53                   	push   ebx
c000c4e5:	83 ec 14             	sub    esp,0x14
c000c4e8:	68 14 01 00 00       	push   0x114
c000c4ed:	e8 c4 b5 ff ff       	call   c0007ab6 <malloc>
c000c4f2:	83 c4 0c             	add    esp,0xc
c000c4f5:	89 c3                	mov    ebx,eax
c000c4f7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c4fd:	68 b0 1a 02 c0       	push   0xc0021ab0
c000c502:	50                   	push   eax
c000c503:	e8 e6 f6 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c000c508:	58                   	pop    eax
c000c509:	5a                   	pop    edx
c000c50a:	6a 01                	push   0x1
c000c50c:	53                   	push   ebx
c000c50d:	e8 fa f6 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c000c512:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c515:	e8 50 f7 ff ff       	call   c000bc6a <File::close()>
c000c51a:	83 c4 10             	add    esp,0x10
c000c51d:	85 db                	test   ebx,ebx
c000c51f:	74 0f                	je     c000c530 <User::loadClockSettings(int)+0x4c>
c000c521:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c523:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c52a:	83 c4 08             	add    esp,0x8
c000c52d:	5b                   	pop    ebx
c000c52e:	ff e0                	jmp    eax
c000c530:	83 c4 08             	add    esp,0x8
c000c533:	5b                   	pop    ebx
c000c534:	c3                   	ret    
c000c535:	90                   	nop

c000c536 <Clock::Clock(char const*)>:
c000c536:	83 ec 0c             	sub    esp,0xc
c000c539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53d:	83 ec 08             	sub    esp,0x8
c000c540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c544:	50                   	push   eax
c000c545:	e8 b4 06 00 00       	call   c000cbfe <Device::Device(char const*)>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c000c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c556:	89 10                	mov    DWORD PTR [eax],edx
c000c558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c55c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c566:	90                   	nop
c000c567:	83 c4 0c             	add    esp,0xc
c000c56a:	c3                   	ret    
c000c56b:	90                   	nop

c000c56c <Clock::~Clock()>:
c000c56c:	83 ec 0c             	sub    esp,0xc
c000c56f:	ba d8 1a 02 c0       	mov    edx,0xc0021ad8
c000c574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c578:	89 10                	mov    DWORD PTR [eax],edx
c000c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c57e:	83 ec 0c             	sub    esp,0xc
c000c581:	50                   	push   eax
c000c582:	e8 e1 03 00 00       	call   c000c968 <Device::~Device()>
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	90                   	nop
c000c58b:	83 c4 0c             	add    esp,0xc
c000c58e:	c3                   	ret    
c000c58f:	90                   	nop

c000c590 <Clock::~Clock()>:
c000c590:	83 ec 0c             	sub    esp,0xc
c000c593:	83 ec 0c             	sub    esp,0xc
c000c596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59a:	e8 cd ff ff ff       	call   c000c56c <Clock::~Clock()>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	83 ec 08             	sub    esp,0x8
c000c5a5:	68 58 01 00 00       	push   0x158
c000c5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ae:	e8 65 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c5b3:	83 c4 10             	add    esp,0x10
c000c5b6:	83 c4 0c             	add    esp,0xc
c000c5b9:	c3                   	ret    

c000c5ba <Clock::timeInSecondsLocal()>:
c000c5ba:	53                   	push   ebx
c000c5bb:	83 ec 14             	sub    esp,0x14
c000c5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c5c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c5c4:	50                   	push   eax
c000c5c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c5c8:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c5cf:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c5d5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c5db:	89 cb                	mov    ebx,ecx
c000c5dd:	c1 fb 1f             	sar    ebx,0x1f
c000c5e0:	01 c8                	add    eax,ecx
c000c5e2:	11 da                	adc    edx,ebx
c000c5e4:	83 c4 10             	add    esp,0x10
c000c5e7:	31 c9                	xor    ecx,ecx
c000c5e9:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5f0:	74 05                	je     c000c5f7 <Clock::timeInSecondsLocal()+0x3d>
c000c5f2:	b9 08 07 00 00       	mov    ecx,0x708
c000c5f7:	31 db                	xor    ebx,ebx
c000c5f9:	01 c8                	add    eax,ecx
c000c5fb:	11 da                	adc    edx,ebx
c000c5fd:	83 c4 08             	add    esp,0x8
c000c600:	5b                   	pop    ebx
c000c601:	c3                   	ret    

c000c602 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c602:	57                   	push   edi
c000c603:	56                   	push   esi
c000c604:	53                   	push   ebx
c000c605:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c609:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c60d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c60f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c613:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c616:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c61d:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c623:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c629:	99                   	cdq    
c000c62a:	29 c6                	sub    esi,eax
c000c62c:	19 d7                	sbb    edi,edx
c000c62e:	89 f0                	mov    eax,esi
c000c630:	89 fa                	mov    edx,edi
c000c632:	31 f6                	xor    esi,esi
c000c634:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c63b:	74 05                	je     c000c642 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c63d:	be 08 07 00 00       	mov    esi,0x708
c000c642:	31 ff                	xor    edi,edi
c000c644:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c648:	29 f0                	sub    eax,esi
c000c64a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c64e:	19 fa                	sbb    edx,edi
c000c650:	89 d8                	mov    eax,ebx
c000c652:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c656:	5b                   	pop    ebx
c000c657:	5e                   	pop    esi
c000c658:	5f                   	pop    edi
c000c659:	ff e0                	jmp    eax

c000c65b <datetimeToSeconds(datetime_t)>:
c000c65b:	55                   	push   ebp
c000c65c:	57                   	push   edi
c000c65d:	56                   	push   esi
c000c65e:	53                   	push   ebx
c000c65f:	83 ec 0c             	sub    esp,0xc
c000c662:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c666:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c66a:	89 d6                	mov    esi,edx
c000c66c:	0f b6 c7             	movzx  eax,bh
c000c66f:	c1 ee 10             	shr    esi,0x10
c000c672:	6b e8 3c             	imul   ebp,eax,0x3c
c000c675:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c67b:	0f b6 ce             	movzx  ecx,dh
c000c67e:	89 df                	mov    edi,ebx
c000c680:	49                   	dec    ecx
c000c681:	c1 ef 10             	shr    edi,0x10
c000c684:	0f b6 db             	movzx  ebx,bl
c000c687:	89 f8                	mov    eax,edi
c000c689:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c68f:	0f b6 f8             	movzx  edi,al
c000c692:	0f b6 d2             	movzx  edx,dl
c000c695:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c699:	01 d8                	add    eax,ebx
c000c69b:	0f b7 de             	movzx  ebx,si
c000c69e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6a1:	c1 f8 1f             	sar    eax,0x1f
c000c6a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6a8:	0f b6 c1             	movzx  eax,cl
c000c6ab:	8b 0c 85 20 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4e0]
c000c6b2:	83 f8 01             	cmp    eax,0x1
c000c6b5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c6b9:	76 27                	jbe    c000c6e2 <datetimeToSeconds(datetime_t)+0x87>
c000c6bb:	83 e6 03             	and    esi,0x3
c000c6be:	75 22                	jne    c000c6e2 <datetimeToSeconds(datetime_t)+0x87>
c000c6c0:	31 d2                	xor    edx,edx
c000c6c2:	be 64 00 00 00       	mov    esi,0x64
c000c6c7:	89 d8                	mov    eax,ebx
c000c6c9:	f7 f6                	div    esi
c000c6cb:	85 d2                	test   edx,edx
c000c6cd:	75 12                	jne    c000c6e1 <datetimeToSeconds(datetime_t)+0x86>
c000c6cf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c6d5:	be 90 01 00 00       	mov    esi,0x190
c000c6da:	99                   	cdq    
c000c6db:	f7 fe                	idiv   esi
c000c6dd:	85 d2                	test   edx,edx
c000c6df:	75 01                	jne    c000c6e2 <datetimeToSeconds(datetime_t)+0x87>
c000c6e1:	41                   	inc    ecx
c000c6e2:	83 fb 46             	cmp    ebx,0x46
c000c6e5:	76 48                	jbe    c000c72f <datetimeToSeconds(datetime_t)+0xd4>
c000c6e7:	be 46 00 00 00       	mov    esi,0x46
c000c6ec:	bf 64 00 00 00       	mov    edi,0x64
c000c6f1:	bd 90 01 00 00       	mov    ebp,0x190
c000c6f6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6fb:	f7 c6 03 00 00 00    	test   esi,0x3
c000c701:	75 23                	jne    c000c726 <datetimeToSeconds(datetime_t)+0xcb>
c000c703:	89 f0                	mov    eax,esi
c000c705:	99                   	cdq    
c000c706:	f7 ff                	idiv   edi
c000c708:	b8 6e 01 00 00       	mov    eax,0x16e
c000c70d:	85 d2                	test   edx,edx
c000c70f:	75 15                	jne    c000c726 <datetimeToSeconds(datetime_t)+0xcb>
c000c711:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c717:	99                   	cdq    
c000c718:	f7 fd                	idiv   ebp
c000c71a:	83 fa 01             	cmp    edx,0x1
c000c71d:	19 c0                	sbb    eax,eax
c000c71f:	f7 d0                	not    eax
c000c721:	05 6e 01 00 00       	add    eax,0x16e
c000c726:	01 c1                	add    ecx,eax
c000c728:	46                   	inc    esi
c000c729:	39 de                	cmp    esi,ebx
c000c72b:	7c c9                	jl     c000c6f6 <datetimeToSeconds(datetime_t)+0x9b>
c000c72d:	eb 34                	jmp    c000c763 <datetimeToSeconds(datetime_t)+0x108>
c000c72f:	74 32                	je     c000c763 <datetimeToSeconds(datetime_t)+0x108>
c000c731:	b8 45 00 00 00       	mov    eax,0x45
c000c736:	89 c2                	mov    edx,eax
c000c738:	83 e2 03             	and    edx,0x3
c000c73b:	39 d8                	cmp    eax,ebx
c000c73d:	7e 0f                	jle    c000c74e <datetimeToSeconds(datetime_t)+0xf3>
c000c73f:	83 fa 01             	cmp    edx,0x1
c000c742:	19 d2                	sbb    edx,edx
c000c744:	48                   	dec    eax
c000c745:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c74c:	eb e8                	jmp    c000c736 <datetimeToSeconds(datetime_t)+0xdb>
c000c74e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c753:	85 d2                	test   edx,edx
c000c755:	75 0a                	jne    c000c761 <datetimeToSeconds(datetime_t)+0x106>
c000c757:	83 fb 01             	cmp    ebx,0x1
c000c75a:	19 c0                	sbb    eax,eax
c000c75c:	05 6e 01 00 00       	add    eax,0x16e
c000c761:	29 c1                	sub    ecx,eax
c000c763:	b8 80 51 01 00       	mov    eax,0x15180
c000c768:	f7 e9                	imul   ecx
c000c76a:	03 04 24             	add    eax,DWORD PTR [esp]
c000c76d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c771:	83 c4 0c             	add    esp,0xc
c000c774:	5b                   	pop    ebx
c000c775:	5e                   	pop    esi
c000c776:	5f                   	pop    edi
c000c777:	5d                   	pop    ebp
c000c778:	c3                   	ret    
c000c779:	90                   	nop

c000c77a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c77a:	57                   	push   edi
c000c77b:	56                   	push   esi
c000c77c:	53                   	push   ebx
c000c77d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c781:	8b 06                	mov    eax,DWORD PTR [esi]
c000c783:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c786:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c78a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c78e:	e8 c8 fe ff ff       	call   c000c65b <datetimeToSeconds(datetime_t)>
c000c793:	59                   	pop    ecx
c000c794:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c79b:	5b                   	pop    ebx
c000c79c:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c7a2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c7a8:	89 cb                	mov    ebx,ecx
c000c7aa:	c1 fb 1f             	sar    ebx,0x1f
c000c7ad:	29 c8                	sub    eax,ecx
c000c7af:	19 da                	sbb    edx,ebx
c000c7b1:	31 c9                	xor    ecx,ecx
c000c7b3:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c7ba:	74 05                	je     c000c7c1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c7bc:	b9 08 07 00 00       	mov    ecx,0x708
c000c7c1:	31 db                	xor    ebx,ebx
c000c7c3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c7c7:	29 c8                	sub    eax,ecx
c000c7c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7cd:	19 da                	sbb    edx,ebx
c000c7cf:	89 f8                	mov    eax,edi
c000c7d1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c7d5:	5b                   	pop    ebx
c000c7d6:	5e                   	pop    esi
c000c7d7:	5f                   	pop    edi
c000c7d8:	ff e0                	jmp    eax

c000c7da <secondsToDatetime(unsigned long long)>:
c000c7da:	55                   	push   ebp
c000c7db:	57                   	push   edi
c000c7dc:	56                   	push   esi
c000c7dd:	53                   	push   ebx
c000c7de:	83 ec 1c             	sub    esp,0x1c
c000c7e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c7e5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c7e9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c7ed:	6a 00                	push   0x0
c000c7ef:	68 80 51 01 00       	push   0x15180
c000c7f4:	55                   	push   ebp
c000c7f5:	57                   	push   edi
c000c7f6:	e8 d5 2f 01 00       	call   c001f7d0 <__udivdi3>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c808:	6a 00                	push   0x0
c000c80a:	68 80 51 01 00       	push   0x15180
c000c80f:	55                   	push   ebp
c000c810:	57                   	push   edi
c000c811:	bf 10 0e 00 00       	mov    edi,0xe10
c000c816:	e8 b5 30 01 00       	call   c001f8d0 <__umoddi3>
c000c81b:	83 c4 10             	add    esp,0x10
c000c81e:	99                   	cdq    
c000c81f:	f7 ff                	idiv   edi
c000c821:	bf 3c 00 00 00       	mov    edi,0x3c
c000c826:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c829:	89 d0                	mov    eax,edx
c000c82b:	99                   	cdq    
c000c82c:	f7 ff                	idiv   edi
c000c82e:	85 db                	test   ebx,ebx
c000c830:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c833:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c836:	79 11                	jns    c000c849 <secondsToDatetime(unsigned long long)+0x6f>
c000c838:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c83c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c842:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c847:	eb 07                	jmp    c000c850 <secondsToDatetime(unsigned long long)+0x76>
c000c849:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c84e:	89 d8                	mov    eax,ebx
c000c850:	bf b4 05 00 00       	mov    edi,0x5b4
c000c855:	99                   	cdq    
c000c856:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c85b:	f7 f9                	idiv   ecx
c000c85d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c866:	31 d2                	xor    edx,edx
c000c868:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c870:	01 c3                	add    ebx,eax
c000c872:	89 d8                	mov    eax,ebx
c000c874:	f7 f1                	div    ecx
c000c876:	31 d2                	xor    edx,edx
c000c878:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c87b:	89 d8                	mov    eax,ebx
c000c87d:	f7 f7                	div    edi
c000c87f:	31 d2                	xor    edx,edx
c000c881:	29 c1                	sub    ecx,eax
c000c883:	89 d8                	mov    eax,ebx
c000c885:	f7 f5                	div    ebp
c000c887:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c88c:	29 c1                	sub    ecx,eax
c000c88e:	31 d2                	xor    edx,edx
c000c890:	89 c8                	mov    eax,ecx
c000c892:	f7 f5                	div    ebp
c000c894:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c89d:	31 d2                	xor    edx,edx
c000c89f:	89 c8                	mov    eax,ecx
c000c8a1:	f7 f5                	div    ebp
c000c8a3:	31 d2                	xor    edx,edx
c000c8a5:	01 c3                	add    ebx,eax
c000c8a7:	89 c8                	mov    eax,ecx
c000c8a9:	f7 f7                	div    edi
c000c8ab:	bf 99 00 00 00       	mov    edi,0x99
c000c8b0:	29 c3                	sub    ebx,eax
c000c8b2:	31 d2                	xor    edx,edx
c000c8b4:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c8bc:	29 c3                	sub    ebx,eax
c000c8be:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c8c1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c8c4:	bb 05 00 00 00       	mov    ebx,0x5
c000c8c9:	83 c1 02             	add    ecx,0x2
c000c8cc:	89 c8                	mov    eax,ecx
c000c8ce:	f7 f7                	div    edi
c000c8d0:	31 d2                	xor    edx,edx
c000c8d2:	89 c7                	mov    edi,eax
c000c8d4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c8da:	83 c0 02             	add    eax,0x2
c000c8dd:	f7 f3                	div    ebx
c000c8df:	89 eb                	mov    ebx,ebp
c000c8e1:	29 c3                	sub    ebx,eax
c000c8e3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c8e9:	88 1e                	mov    BYTE PTR [esi],bl
c000c8eb:	19 c0                	sbb    eax,eax
c000c8ed:	31 d2                	xor    edx,edx
c000c8ef:	83 e0 0c             	and    eax,0xc
c000c8f2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c8f6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c8fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c902:	83 f9 01             	cmp    ecx,0x1
c000c905:	0f 96 c2             	setbe  dl
c000c908:	41                   	inc    ecx
c000c909:	01 d0                	add    eax,edx
c000c90b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c90e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c912:	83 c4 1c             	add    esp,0x1c
c000c915:	89 f0                	mov    eax,esi
c000c917:	5b                   	pop    ebx
c000c918:	5e                   	pop    esi
c000c919:	5f                   	pop    edi
c000c91a:	5d                   	pop    ebp
c000c91b:	c2 04 00             	ret    0x4

c000c91e <Clock::timeInDatetimeLocal()>:
c000c91e:	53                   	push   ebx
c000c91f:	83 ec 14             	sub    esp,0x14
c000c922:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c92a:	e8 8b fc ff ff       	call   c000c5ba <Clock::timeInSecondsLocal()>
c000c92f:	83 c4 0c             	add    esp,0xc
c000c932:	52                   	push   edx
c000c933:	50                   	push   eax
c000c934:	53                   	push   ebx
c000c935:	e8 a0 fe ff ff       	call   c000c7da <secondsToDatetime(unsigned long long)>
c000c93a:	89 d8                	mov    eax,ebx
c000c93c:	83 c4 14             	add    esp,0x14
c000c93f:	5b                   	pop    ebx
c000c940:	c2 04 00             	ret    0x4
c000c943:	90                   	nop

c000c944 <Device::hibernate()>:
c000c944:	c3                   	ret    
c000c945:	90                   	nop

c000c946 <Device::wake()>:
c000c946:	c3                   	ret    
c000c947:	90                   	nop

c000c948 <Device::detect()>:
c000c948:	c3                   	ret    
c000c949:	90                   	nop

c000c94a <Device::disableLegacy()>:
c000c94a:	c3                   	ret    
c000c94b:	90                   	nop

c000c94c <Device::powerSaving(PowerSavingLevel)>:
c000c94c:	c3                   	ret    
c000c94d:	90                   	nop

c000c94e <DriverlessDevice::close(int, int, void*)>:
c000c94e:	31 c0                	xor    eax,eax
c000c950:	c3                   	ret    
c000c951:	90                   	nop

c000c952 <DriverlessDevice::detect()>:
c000c952:	c3                   	ret    
c000c953:	90                   	nop

c000c954 <DriverlessDevice::open(int, int, void*)>:
c000c954:	83 ec 18             	sub    esp,0x18
c000c957:	68 50 1b 02 c0       	push   0xc0021b50
c000c95c:	e8 5e 4d 00 00       	call   c00116bf <KePanic(char const*)>
c000c961:	83 c8 ff             	or     eax,0xffffffff
c000c964:	83 c4 1c             	add    esp,0x1c
c000c967:	c3                   	ret    

c000c968 <Device::~Device()>:
c000c968:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000c96d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c971:	89 10                	mov    DWORD PTR [eax],edx
c000c973:	90                   	nop
c000c974:	c3                   	ret    
c000c975:	90                   	nop

c000c976 <Device::~Device()>:
c000c976:	83 ec 0c             	sub    esp,0xc
c000c979:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c97d:	e8 e6 ff ff ff       	call   c000c968 <Device::~Device()>
c000c982:	83 c4 04             	add    esp,0x4
c000c985:	83 ec 08             	sub    esp,0x8
c000c988:	68 58 01 00 00       	push   0x158
c000c98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c991:	e8 82 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c996:	83 c4 10             	add    esp,0x10
c000c999:	83 c4 0c             	add    esp,0xc
c000c99c:	c3                   	ret    
c000c99d:	90                   	nop

c000c99e <Device::findAndLoadDriver()>:
c000c99e:	c7 44 24 04 6e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b6e
c000c9a6:	e9 9a df ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c9ab:	90                   	nop

c000c9ac <Device::preOpenPCI(PCIDeviceInfo)>:
c000c9ac:	57                   	push   edi
c000c9ad:	b9 09 00 00 00       	mov    ecx,0x9
c000c9b2:	56                   	push   esi
c000c9b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c9b7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c9bb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c9c5:	81 c7 18 01 00 00    	add    edi,0x118
c000c9cb:	fc                   	cld    
c000c9cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c9ce:	5e                   	pop    esi
c000c9cf:	5f                   	pop    edi
c000c9d0:	c3                   	ret    
c000c9d1:	90                   	nop

c000c9d2 <Device::preOpenACPI(void*, char*, char*)>:
c000c9d2:	57                   	push   edi
c000c9d3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c9d8:	56                   	push   esi
c000c9d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9e1:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c9eb:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c9f1:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c9f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9fd:	b9 0e 00 00 00       	mov    ecx,0xe
c000ca02:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ca08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ca0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca0e:	5e                   	pop    esi
c000ca0f:	5f                   	pop    edi
c000ca10:	c3                   	ret    
c000ca11:	90                   	nop

c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ca12:	53                   	push   ebx
c000ca13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ca23:	0f b6 c0             	movzx  eax,al
c000ca26:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca36:	5b                   	pop    ebx
c000ca37:	e9 a8 05 00 00       	jmp    c000cfe4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ca3c <Device::getParent()>:
c000ca3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca40:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ca46:	c3                   	ret    
c000ca47:	90                   	nop

c000ca48 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ca48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca50:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ca55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ca59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ca5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca61:	e9 e6 06 00 00       	jmp    c000d14c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ca66 <Device::addChild(Device*)>:
c000ca66:	53                   	push   ebx
c000ca67:	83 ec 08             	sub    esp,0x8
c000ca6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca72:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ca78:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ca7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca80:	85 d2                	test   edx,edx
c000ca82:	74 04                	je     c000ca88 <Device::addChild(Device*)+0x22>
c000ca84:	89 d3                	mov    ebx,edx
c000ca86:	eb f6                	jmp    c000ca7e <Device::addChild(Device*)+0x18>
c000ca88:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ca8b:	83 ec 0c             	sub    esp,0xc
c000ca8e:	6a 08                	push   0x8
c000ca90:	e8 21 b0 ff ff       	call   c0007ab6 <malloc>
c000ca95:	89 03                	mov    DWORD PTR [ebx],eax
c000ca97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000caa4:	83 c4 18             	add    esp,0x18
c000caa7:	5b                   	pop    ebx
c000caa8:	c3                   	ret    
c000caa9:	90                   	nop

c000caaa <Device::removeAllChildren()>:
c000caaa:	56                   	push   esi
c000caab:	53                   	push   ebx
c000caac:	52                   	push   edx
c000caad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cab1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000cab7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caba:	74 17                	je     c000cad3 <Device::removeAllChildren()+0x29>
c000cabc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cabf:	85 c0                	test   eax,eax
c000cac1:	74 0c                	je     c000cacf <Device::removeAllChildren()+0x25>
c000cac3:	83 ec 0c             	sub    esp,0xc
c000cac6:	8b 10                	mov    edx,DWORD PTR [eax]
c000cac8:	50                   	push   eax
c000cac9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000cacc:	83 c4 10             	add    esp,0x10
c000cacf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cad1:	eb e4                	jmp    c000cab7 <Device::removeAllChildren()+0xd>
c000cad3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cad9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cadf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000cae5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000caec:	58                   	pop    eax
c000caed:	5b                   	pop    ebx
c000caee:	5e                   	pop    esi
c000caef:	c3                   	ret    

c000caf0 <Device::hibernateAll()>:
c000caf0:	53                   	push   ebx
c000caf1:	83 ec 14             	sub    esp,0x14
c000caf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cafa:	53                   	push   ebx
c000cafb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000cafe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb04:	83 c4 10             	add    esp,0x10
c000cb07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb0a:	74 0f                	je     c000cb1b <Device::hibernateAll()+0x2b>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb12:	e8 d9 ff ff ff       	call   c000caf0 <Device::hibernateAll()>
c000cb17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb19:	eb e9                	jmp    c000cb04 <Device::hibernateAll()+0x14>
c000cb1b:	83 c4 08             	add    esp,0x8
c000cb1e:	5b                   	pop    ebx
c000cb1f:	c3                   	ret    

c000cb20 <Device::wakeAll()>:
c000cb20:	53                   	push   ebx
c000cb21:	83 ec 14             	sub    esp,0x14
c000cb24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb28:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb2a:	53                   	push   ebx
c000cb2b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000cb2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb3a:	74 0f                	je     c000cb4b <Device::wakeAll()+0x2b>
c000cb3c:	83 ec 0c             	sub    esp,0xc
c000cb3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb42:	e8 d9 ff ff ff       	call   c000cb20 <Device::wakeAll()>
c000cb47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb49:	eb e9                	jmp    c000cb34 <Device::wakeAll()+0x14>
c000cb4b:	83 c4 08             	add    esp,0x8
c000cb4e:	5b                   	pop    ebx
c000cb4f:	c3                   	ret    

c000cb50 <Device::detectAll()>:
c000cb50:	53                   	push   ebx
c000cb51:	83 ec 14             	sub    esp,0x14
c000cb54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb58:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb5a:	53                   	push   ebx
c000cb5b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cb5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb64:	83 c4 10             	add    esp,0x10
c000cb67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb6a:	74 0f                	je     c000cb7b <Device::detectAll()+0x2b>
c000cb6c:	83 ec 0c             	sub    esp,0xc
c000cb6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb72:	e8 d9 ff ff ff       	call   c000cb50 <Device::detectAll()>
c000cb77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb79:	eb e9                	jmp    c000cb64 <Device::detectAll()+0x14>
c000cb7b:	83 c4 08             	add    esp,0x8
c000cb7e:	5b                   	pop    ebx
c000cb7f:	c3                   	ret    

c000cb80 <Device::disableLegacyAll()>:
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <Device::loadDriversForAll()>:
c000cb82:	c3                   	ret    
c000cb83:	90                   	nop

c000cb84 <Device::closeAll()>:
c000cb84:	53                   	push   ebx
c000cb85:	83 ec 08             	sub    esp,0x8
c000cb88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb8e:	6a 00                	push   0x0
c000cb90:	6a 00                	push   0x0
c000cb92:	6a 00                	push   0x0
c000cb94:	53                   	push   ebx
c000cb95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cba4:	74 0f                	je     c000cbb5 <Device::closeAll()+0x31>
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbac:	e8 d3 ff ff ff       	call   c000cb84 <Device::closeAll()>
c000cbb1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbb3:	eb e9                	jmp    c000cb9e <Device::closeAll()+0x1a>
c000cbb5:	83 c4 08             	add    esp,0x8
c000cbb8:	5b                   	pop    ebx
c000cbb9:	c3                   	ret    

c000cbba <Device::powerSavingAll(PowerSavingLevel)>:
c000cbba:	56                   	push   esi
c000cbbb:	53                   	push   ebx
c000cbbc:	83 ec 0c             	sub    esp,0xc
c000cbbf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbc3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cbc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cbc9:	56                   	push   esi
c000cbca:	53                   	push   ebx
c000cbcb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cbce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cbd4:	83 c4 10             	add    esp,0x10
c000cbd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cbda:	74 0f                	je     c000cbeb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cbdc:	52                   	push   edx
c000cbdd:	52                   	push   edx
c000cbde:	56                   	push   esi
c000cbdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cbe2:	e8 d3 ff ff ff       	call   c000cbba <Device::powerSavingAll(PowerSavingLevel)>
c000cbe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cbe9:	eb e9                	jmp    c000cbd4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cbeb:	58                   	pop    eax
c000cbec:	5b                   	pop    ebx
c000cbed:	5e                   	pop    esi
c000cbee:	c3                   	ret    
c000cbef:	90                   	nop

c000cbf0 <Device::setName(char const*)>:
c000cbf0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cbf8:	e9 43 3a ff ff       	jmp    c0000640 <strcpy>
c000cbfd:	90                   	nop

c000cbfe <Device::Device(char const*)>:
c000cbfe:	83 ec 1c             	sub    esp,0x1c
c000cc01:	ba b0 1b 02 c0       	mov    edx,0xc0021bb0
c000cc06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc0a:	89 10                	mov    DWORD PTR [eax],edx
c000cc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc10:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cc1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc1e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc44:	83 ec 08             	sub    esp,0x8
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 9c ff ff ff       	call   c000cbf0 <Device::setName(char const*)>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc5f:	83 ec 0c             	sub    esp,0xc
c000cc62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc66:	e8 4b ae ff ff       	call   c0007ab6 <malloc>
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc7f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc89:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc99:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccaa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000ccb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccb5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000ccbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccc0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ccca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ccd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccdc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ccea:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000ccf4:	90                   	nop
c000ccf5:	83 c4 1c             	add    esp,0x1c
c000ccf8:	c3                   	ret    
c000ccf9:	90                   	nop

c000ccfa <Device::getName()>:
c000ccfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccfe:	05 d0 00 00 00       	add    eax,0xd0
c000cd03:	c3                   	ret    

c000cd04 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cd04:	83 ec 0c             	sub    esp,0xc
c000cd07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0b:	83 ec 08             	sub    esp,0x8
c000cd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd12:	50                   	push   eax
c000cd13:	e8 e6 fe ff ff       	call   c000cbfe <Device::Device(char const*)>
c000cd18:	83 c4 10             	add    esp,0x10
c000cd1b:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd24:	89 10                	mov    DWORD PTR [eax],edx
c000cd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cd34:	90                   	nop
c000cd35:	83 c4 0c             	add    esp,0xc
c000cd38:	c3                   	ret    
c000cd39:	90                   	nop

c000cd3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cd3a:	57                   	push   edi
c000cd3b:	56                   	push   esi
c000cd3c:	53                   	push   ebx
c000cd3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cd45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd49:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cd4f:	75 0c                	jne    c000cd5d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cd51:	52                   	push   edx
c000cd52:	52                   	push   edx
c000cd53:	53                   	push   ebx
c000cd54:	56                   	push   esi
c000cd55:	e8 28 2f 01 00       	call   c001fc82 <LinkedList<Device>::addElement(Device*)>
c000cd5a:	83 c4 10             	add    esp,0x10
c000cd5d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd66:	74 12                	je     c000cd7a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd68:	50                   	push   eax
c000cd69:	57                   	push   edi
c000cd6a:	56                   	push   esi
c000cd6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd6e:	e8 c7 ff ff ff       	call   c000cd3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd75:	83 c4 10             	add    esp,0x10
c000cd78:	eb e9                	jmp    c000cd63 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd7a:	5b                   	pop    ebx
c000cd7b:	5e                   	pop    esi
c000cd7c:	5f                   	pop    edi
c000cd7d:	c3                   	ret    

c000cd7e <getDevicesOfType(DeviceType)>:
c000cd7e:	53                   	push   ebx
c000cd7f:	83 ec 14             	sub    esp,0x14
c000cd82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd86:	53                   	push   ebx
c000cd87:	e8 d2 2f 01 00       	call   c001fd5e <LinkedList<Device>::LinkedList()>
c000cd8c:	83 c4 0c             	add    esp,0xc
c000cd8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd93:	53                   	push   ebx
c000cd94:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd9a:	e8 9b ff ff ff       	call   c000cd3a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd9f:	89 d8                	mov    eax,ebx
c000cda1:	83 c4 18             	add    esp,0x18
c000cda4:	5b                   	pop    ebx
c000cda5:	c2 04 00             	ret    0x4

c000cda8 <HardDiskController::HardDiskController(char const*)>:
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	83 ec 08             	sub    esp,0x8
c000cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb6:	50                   	push   eax
c000cdb7:	e8 42 fe ff ff       	call   c000cbfe <Device::Device(char const*)>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc8:	89 10                	mov    DWORD PTR [eax],edx
c000cdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cdd8:	90                   	nop
c000cdd9:	83 c4 0c             	add    esp,0xc
c000cddc:	c3                   	ret    
c000cddd:	90                   	nop
c000cdde:	66 90                	xchg   ax,ax

c000cde0 <HardDiskController::~HardDiskController()>:
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ba 08 1c 02 c0       	mov    edx,0xc0021c08
c000cde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdec:	89 10                	mov    DWORD PTR [eax],edx
c000cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf2:	83 ec 0c             	sub    esp,0xc
c000cdf5:	50                   	push   eax
c000cdf6:	e8 6d fb ff ff       	call   c000c968 <Device::~Device()>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	90                   	nop
c000cdff:	83 c4 0c             	add    esp,0xc
c000ce02:	c3                   	ret    
c000ce03:	90                   	nop

c000ce04 <HardDiskController::~HardDiskController()>:
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	83 ec 0c             	sub    esp,0xc
c000ce0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce0e:	e8 cd ff ff ff       	call   c000cde0 <HardDiskController::~HardDiskController()>
c000ce13:	83 c4 10             	add    esp,0x10
c000ce16:	83 ec 08             	sub    esp,0x8
c000ce19:	68 58 01 00 00       	push   0x158
c000ce1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce22:	e8 f1 d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce27:	83 c4 10             	add    esp,0x10
c000ce2a:	83 c4 0c             	add    esp,0xc
c000ce2d:	c3                   	ret    

c000ce2e <PhysicalDisk::eject()>:
c000ce2e:	83 c8 ff             	or     eax,0xffffffff
c000ce31:	c3                   	ret    

c000ce32 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ce32:	83 ec 0c             	sub    esp,0xc
c000ce35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce39:	83 ec 08             	sub    esp,0x8
c000ce3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce40:	50                   	push   eax
c000ce41:	e8 b8 fd ff ff       	call   c000cbfe <Device::Device(char const*)>
c000ce46:	83 c4 10             	add    esp,0x10
c000ce49:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000ce4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce52:	89 10                	mov    DWORD PTR [eax],edx
c000ce54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce58:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce63:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce80:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce94:	90                   	nop
c000ce95:	83 c4 0c             	add    esp,0xc
c000ce98:	c3                   	ret    
c000ce99:	90                   	nop

c000ce9a <PhysicalDisk::startCache()>:
c000ce9a:	56                   	push   esi
c000ce9b:	53                   	push   ebx
c000ce9c:	83 ec 10             	sub    esp,0x10
c000ce9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cea3:	6a 44                	push   0x44
c000cea5:	e8 0c ac ff ff       	call   c0007ab6 <malloc>
c000ceaa:	89 c6                	mov    esi,eax
c000ceac:	58                   	pop    eax
c000cead:	5a                   	pop    edx
c000ceae:	53                   	push   ebx
c000ceaf:	56                   	push   esi
c000ceb0:	e8 7b 17 00 00       	call   c000e630 <VCache::VCache(PhysicalDisk*)>
c000ceb5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cebb:	83 c4 14             	add    esp,0x14
c000cebe:	5b                   	pop    ebx
c000cebf:	5e                   	pop    esi
c000cec0:	c3                   	ret    
c000cec1:	90                   	nop

c000cec2 <PhysicalDisk::~PhysicalDisk()>:
c000cec2:	83 ec 0c             	sub    esp,0xc
c000cec5:	ba 34 1c 02 c0       	mov    edx,0xc0021c34
c000ceca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cece:	89 10                	mov    DWORD PTR [eax],edx
c000ced0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced4:	83 ec 0c             	sub    esp,0xc
c000ced7:	50                   	push   eax
c000ced8:	e8 8b fa ff ff       	call   c000c968 <Device::~Device()>
c000cedd:	83 c4 10             	add    esp,0x10
c000cee0:	90                   	nop
c000cee1:	83 c4 0c             	add    esp,0xc
c000cee4:	c3                   	ret    
c000cee5:	90                   	nop

c000cee6 <PhysicalDisk::~PhysicalDisk()>:
c000cee6:	83 ec 0c             	sub    esp,0xc
c000cee9:	83 ec 0c             	sub    esp,0xc
c000ceec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef0:	e8 cd ff ff ff       	call   c000cec2 <PhysicalDisk::~PhysicalDisk()>
c000cef5:	83 c4 10             	add    esp,0x10
c000cef8:	83 ec 08             	sub    esp,0x8
c000cefb:	68 6c 01 00 00       	push   0x16c
c000cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf04:	e8 0f d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cf09:	83 c4 10             	add    esp,0x10
c000cf0c:	83 c4 0c             	add    esp,0xc
c000cf0f:	c3                   	ret    

c000cf10 <int_handler>:
c000cf10:	55                   	push   ebp
c000cf11:	57                   	push   edi
c000cf12:	56                   	push   esi
c000cf13:	53                   	push   ebx
c000cf14:	83 ec 0c             	sub    esp,0xc
c000cf17:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cf1b:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf22:	74 0b                	je     c000cf2f <int_handler+0x1f>
c000cf24:	fa                   	cli    
c000cf25:	f4                   	hlt    
c000cf26:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cf2d:	75 f5                	jne    c000cf24 <int_handler+0x14>
c000cf2f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cf32:	8d 46 e0             	lea    eax,[esi-0x20]
c000cf35:	83 f8 17             	cmp    eax,0x17
c000cf38:	76 40                	jbe    c000cf7a <int_handler+0x6a>
c000cf3a:	c1 e6 04             	shl    esi,0x4
c000cf3d:	31 db                	xor    ebx,ebx
c000cf3f:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cf45:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000cf4b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cf4f:	85 c0                	test   eax,eax
c000cf51:	74 13                	je     c000cf66 <int_handler+0x56>
c000cf53:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cf56:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cf5a:	74 2c                	je     c000cf88 <int_handler+0x78>
c000cf5c:	83 ec 08             	sub    esp,0x8
c000cf5f:	52                   	push   edx
c000cf60:	57                   	push   edi
c000cf61:	ff d0                	call   eax
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	83 c3 01             	add    ebx,0x1
c000cf69:	83 fb 04             	cmp    ebx,0x4
c000cf6c:	75 dd                	jne    c000cf4b <int_handler+0x3b>
c000cf6e:	83 c4 0c             	add    esp,0xc
c000cf71:	31 c0                	xor    eax,eax
c000cf73:	5b                   	pop    ebx
c000cf74:	31 d2                	xor    edx,edx
c000cf76:	5e                   	pop    esi
c000cf77:	5f                   	pop    edi
c000cf78:	5d                   	pop    ebp
c000cf79:	c3                   	ret    
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	50                   	push   eax
c000cf7e:	e8 a5 b4 00 00       	call   c0018428 <HalEndOfInterrupt(int)>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	eb b2                	jmp    c000cf3a <int_handler+0x2a>
c000cf88:	83 ec 08             	sub    esp,0x8
c000cf8b:	52                   	push   edx
c000cf8c:	57                   	push   edi
c000cf8d:	ff d0                	call   eax
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	83 c4 0c             	add    esp,0xc
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	5f                   	pop    edi
c000cf98:	5d                   	pop    ebp
c000cf99:	c3                   	ret    

c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf9a:	56                   	push   esi
c000cf9b:	31 c0                	xor    eax,eax
c000cf9d:	53                   	push   ebx
c000cf9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cfa2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cfa6:	89 ca                	mov    edx,ecx
c000cfa8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cfac:	c1 e2 04             	shl    edx,0x4
c000cfaf:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cfb7:	74 17                	je     c000cfd0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cfb9:	83 c0 01             	add    eax,0x1
c000cfbc:	83 f8 04             	cmp    eax,0x4
c000cfbf:	75 ee                	jne    c000cfaf <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cfc1:	c7 44 24 0c 64 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c64
c000cfc9:	5b                   	pop    ebx
c000cfca:	5e                   	pop    esi
c000cfcb:	e9 ef 46 00 00       	jmp    c00116bf <KePanic(char const*)>
c000cfd0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cfd3:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cfda:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cfe1:	5b                   	pop    ebx
c000cfe2:	5e                   	pop    esi
c000cfe3:	c3                   	ret    

c000cfe4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cfe4:	57                   	push   edi
c000cfe5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cfeb:	56                   	push   esi
c000cfec:	53                   	push   ebx
c000cfed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cff5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cffc:	74 54                	je     c000d052 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cffe:	89 c7                	mov    edi,eax
c000d000:	84 c0                	test   al,al
c000d002:	74 1d                	je     c000d021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d004:	83 fe 0f             	cmp    esi,0xf
c000d007:	0f 8f d5 00 00 00    	jg     c000d0e2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000d00d:	0f b6 b6 68 37 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc898]
c000d014:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000d01c:	d1 ef                	shr    edi,1
c000d01e:	83 e7 01             	and    edi,0x1
c000d021:	83 ec 08             	sub    esp,0x8
c000d024:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d029:	31 db                	xor    ebx,ebx
c000d02b:	50                   	push   eax
c000d02c:	68 71 1c 02 c0       	push   0xc0021c71
c000d031:	e8 0f d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000d036:	83 c4 10             	add    esp,0x10
c000d039:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000d03e:	85 c0                	test   eax,eax
c000d040:	7f 55                	jg     c000d097 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	68 88 1c 02 c0       	push   0xc0021c88
c000d04a:	e8 70 46 00 00       	call   c00116bf <KePanic(char const*)>
c000d04f:	83 c4 10             	add    esp,0x10
c000d052:	8d 7e 20             	lea    edi,[esi+0x20]
c000d055:	89 f8                	mov    eax,edi
c000d057:	31 d2                	xor    edx,edx
c000d059:	c1 e0 04             	shl    eax,0x4
c000d05c:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d063:	85 c9                	test   ecx,ecx
c000d065:	0f 84 8e 00 00 00    	je     c000d0f9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000d06b:	83 c2 01             	add    edx,0x1
c000d06e:	83 fa 04             	cmp    edx,0x4
c000d071:	75 e9                	jne    c000d05c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d073:	83 ec 0c             	sub    esp,0xc
c000d076:	68 dc 1c 02 c0       	push   0xc0021cdc
c000d07b:	e8 3f 46 00 00       	call   c00116bf <KePanic(char const*)>
c000d080:	83 c4 10             	add    esp,0x10
c000d083:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d088:	5b                   	pop    ebx
c000d089:	5e                   	pop    esi
c000d08a:	5f                   	pop    edi
c000d08b:	c3                   	ret    
c000d08c:	83 c3 01             	add    ebx,0x1
c000d08f:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d095:	7e ab                	jle    c000d042 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d097:	83 ec 08             	sub    esp,0x8
c000d09a:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d0a1:	56                   	push   esi
c000d0a2:	50                   	push   eax
c000d0a3:	e8 0a 1b 01 00       	call   c001ebb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d0a8:	83 c4 10             	add    esp,0x10
c000d0ab:	84 c0                	test   al,al
c000d0ad:	74 dd                	je     c000d08c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d0af:	83 ec 04             	sub    esp,0x4
c000d0b2:	89 f8                	mov    eax,edi
c000d0b4:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d0bb:	0f b6 f8             	movzx  edi,al
c000d0be:	57                   	push   edi
c000d0bf:	8d 7e 20             	lea    edi,[esi+0x20]
c000d0c2:	6a 00                	push   0x0
c000d0c4:	89 f8                	mov    eax,edi
c000d0c6:	0f b6 c0             	movzx  eax,al
c000d0c9:	50                   	push   eax
c000d0ca:	89 f0                	mov    eax,esi
c000d0cc:	6a 00                	push   0x0
c000d0ce:	0f b6 c0             	movzx  eax,al
c000d0d1:	6a 00                	push   0x0
c000d0d3:	50                   	push   eax
c000d0d4:	53                   	push   ebx
c000d0d5:	e8 44 1c 01 00       	call   c001ed1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d0da:	83 c4 20             	add    esp,0x20
c000d0dd:	e9 73 ff ff ff       	jmp    c000d055 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d0e2:	83 ec 0c             	sub    esp,0xc
c000d0e5:	31 ff                	xor    edi,edi
c000d0e7:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d0ec:	e8 ce 45 00 00       	call   c00116bf <KePanic(char const*)>
c000d0f1:	83 c4 10             	add    esp,0x10
c000d0f4:	e9 28 ff ff ff       	jmp    c000d021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d0f9:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d0fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d100:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d107:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d10b:	5b                   	pop    ebx
c000d10c:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d113:	89 f0                	mov    eax,esi
c000d115:	5e                   	pop    esi
c000d116:	5f                   	pop    edi
c000d117:	c3                   	ret    

c000d118 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d11c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d120:	c1 e0 04             	shl    eax,0x4
c000d123:	8d 50 10             	lea    edx,[eax+0x10]
c000d126:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d12c:	74 08                	je     c000d136 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d12e:	83 c0 04             	add    eax,0x4
c000d131:	39 d0                	cmp    eax,edx
c000d133:	75 f1                	jne    c000d126 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d135:	c3                   	ret    
c000d136:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d140:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d14a:	eb e2                	jmp    c000d12e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d14c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d14c:	53                   	push   ebx
c000d14d:	83 ec 08             	sub    esp,0x8
c000d150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d154:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d159:	74 0e                	je     c000d169 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d15b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d160:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d167:	75 37                	jne    c000d1a0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d16d:	83 c0 20             	add    eax,0x20
c000d170:	c1 e0 04             	shl    eax,0x4
c000d173:	8d 50 10             	lea    edx,[eax+0x10]
c000d176:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d17c:	74 0c                	je     c000d18a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d17e:	83 c0 04             	add    eax,0x4
c000d181:	39 d0                	cmp    eax,edx
c000d183:	75 f1                	jne    c000d176 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d185:	83 c4 08             	add    esp,0x8
c000d188:	5b                   	pop    ebx
c000d189:	c3                   	ret    
c000d18a:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d194:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d19e:	eb de                	jmp    c000d17e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d1a0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d1a5:	7f 11                	jg     c000d1b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ab:	0f b6 80 68 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc898]
c000d1b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1b6:	eb b1                	jmp    c000d169 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d1b8:	83 ec 0c             	sub    esp,0xc
c000d1bb:	68 95 1c 02 c0       	push   0xc0021c95
c000d1c0:	e8 fa 44 00 00       	call   c00116bf <KePanic(char const*)>
c000d1c5:	83 c4 10             	add    esp,0x10
c000d1c8:	eb 9f                	jmp    c000d169 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d1ca <setupINTS()>:
c000d1ca:	31 c0                	xor    eax,eax
c000d1cc:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d1d6:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d1e0:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d1ea:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d1f4:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d1fe:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d208:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d212:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d21c:	83 c0 10             	add    eax,0x10
c000d21f:	3d 00 10 00 00       	cmp    eax,0x1000
c000d224:	75 a6                	jne    c000d1cc <setupINTS()+0x2>
c000d226:	c3                   	ret    

c000d227 <convertLegacyIRQNumber(int)>:
c000d227:	83 ec 0c             	sub    esp,0xc
c000d22a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d234:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d23b:	74 0c                	je     c000d249 <convertLegacyIRQNumber(int)+0x22>
c000d23d:	83 f8 0f             	cmp    eax,0xf
c000d240:	7f 0b                	jg     c000d24d <convertLegacyIRQNumber(int)+0x26>
c000d242:	0f b6 80 68 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc898]
c000d249:	83 c4 0c             	add    esp,0xc
c000d24c:	c3                   	ret    
c000d24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d251:	83 ec 0c             	sub    esp,0xc
c000d254:	68 a4 1c 02 c0       	push   0xc0021ca4
c000d259:	e8 61 44 00 00       	call   c00116bf <KePanic(char const*)>
c000d25e:	83 c4 10             	add    esp,0x10
c000d261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d265:	83 c4 0c             	add    esp,0xc
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <startGUI(void*)>:
c000d26a:	55                   	push   ebp
c000d26b:	89 e5                	mov    ebp,esp
c000d26d:	53                   	push   ebx
c000d26e:	83 ec 04             	sub    esp,0x4
c000d271:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d276:	83 e8 01             	sub    eax,0x1
c000d279:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d27e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d283:	85 c0                	test   eax,eax
c000d285:	75 01                	jne    c000d288 <startGUI(void*)+0x1e>
c000d287:	fb                   	sti    
c000d288:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d28e:	83 ec 08             	sub    esp,0x8
c000d291:	6a 01                	push   0x1
c000d293:	68 01 1d 02 c0       	push   0xc0021d01
c000d298:	e8 62 84 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	83 ec 08             	sub    esp,0x8
c000d2a3:	53                   	push   ebx
c000d2a4:	50                   	push   eax
c000d2a5:	e8 86 86 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c000d2aa:	83 c4 10             	add    esp,0x10
c000d2ad:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2b3:	83 ec 08             	sub    esp,0x8
c000d2b6:	6a 01                	push   0x1
c000d2b8:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d2bd:	e8 3d 84 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c000d2c2:	83 c4 10             	add    esp,0x10
c000d2c5:	83 ec 08             	sub    esp,0x8
c000d2c8:	53                   	push   ebx
c000d2c9:	50                   	push   eax
c000d2ca:	e8 61 86 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c000d2cf:	83 c4 10             	add    esp,0x10
c000d2d2:	90                   	nop
c000d2d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2d6:	c9                   	leave  
c000d2d7:	c3                   	ret    

c000d2d8 <startGUIVESA(void*)>:
c000d2d8:	55                   	push   ebp
c000d2d9:	89 e5                	mov    ebp,esp
c000d2db:	53                   	push   ebx
c000d2dc:	83 ec 04             	sub    esp,0x4
c000d2df:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2e4:	83 e8 01             	sub    eax,0x1
c000d2e7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2ec:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2f1:	85 c0                	test   eax,eax
c000d2f3:	75 01                	jne    c000d2f6 <startGUIVESA(void*)+0x1e>
c000d2f5:	fb                   	sti    
c000d2f6:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2fc:	83 ec 08             	sub    esp,0x8
c000d2ff:	6a 01                	push   0x1
c000d301:	68 39 1d 02 c0       	push   0xc0021d39
c000d306:	e8 f4 83 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	83 ec 08             	sub    esp,0x8
c000d311:	53                   	push   ebx
c000d312:	50                   	push   eax
c000d313:	e8 18 86 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d321:	83 ec 08             	sub    esp,0x8
c000d324:	6a 01                	push   0x1
c000d326:	68 1b 1d 02 c0       	push   0xc0021d1b
c000d32b:	e8 cf 83 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	83 ec 08             	sub    esp,0x8
c000d336:	53                   	push   ebx
c000d337:	50                   	push   eax
c000d338:	e8 f3 85 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c000d33d:	83 c4 10             	add    esp,0x10
c000d340:	90                   	nop
c000d341:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d344:	c9                   	leave  
c000d345:	c3                   	ret    

c000d346 <sendKeyToTerminal(unsigned char)>:
c000d346:	55                   	push   ebp
c000d347:	89 e5                	mov    ebp,esp
c000d349:	83 ec 28             	sub    esp,0x28
c000d34c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d34f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d352:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d357:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d35b:	83 ec 08             	sub    esp,0x8
c000d35e:	52                   	push   edx
c000d35f:	50                   	push   eax
c000d360:	e8 51 ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d365:	83 c4 10             	add    esp,0x10
c000d368:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d36c:	83 f8 0a             	cmp    eax,0xa
c000d36f:	74 16                	je     c000d387 <sendKeyToTerminal(unsigned char)+0x41>
c000d371:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d375:	83 f8 03             	cmp    eax,0x3
c000d378:	74 0d                	je     c000d387 <sendKeyToTerminal(unsigned char)+0x41>
c000d37a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d37e:	83 f8 1c             	cmp    eax,0x1c
c000d381:	0f 85 97 00 00 00    	jne    c000d41e <sendKeyToTerminal(unsigned char)+0xd8>
c000d387:	fa                   	cli    
c000d388:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d38d:	83 c0 01             	add    eax,0x1
c000d390:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d395:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d39a:	83 c0 01             	add    eax,0x1
c000d39d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3a2:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d3a7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d3aa:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d3b4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d3b8:	74 1f                	je     c000d3d9 <sendKeyToTerminal(unsigned char)+0x93>
c000d3ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d3bd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d3c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d3c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d3c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d3c9:	83 ec 0c             	sub    esp,0xc
c000d3cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d3cf:	e8 a4 92 00 00       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	eb db                	jmp    c000d3b4 <sendKeyToTerminal(unsigned char)+0x6e>
c000d3d9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3de:	83 e8 01             	sub    eax,0x1
c000d3e1:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d3e6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d3eb:	85 c0                	test   eax,eax
c000d3ed:	75 18                	jne    c000d407 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3ef:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d3f4:	85 c0                	test   eax,eax
c000d3f6:	74 0f                	je     c000d407 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3f8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d402:	e8 59 8d 00 00       	call   c0016160 <schedule()>
c000d407:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d40c:	83 e8 01             	sub    eax,0x1
c000d40f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d414:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d419:	85 c0                	test   eax,eax
c000d41b:	75 01                	jne    c000d41e <sendKeyToTerminal(unsigned char)+0xd8>
c000d41d:	fb                   	sti    
c000d41e:	90                   	nop
c000d41f:	c9                   	leave  
c000d420:	c3                   	ret    

c000d421 <sendKeyboardToken(KeyboardToken)>:
c000d421:	55                   	push   ebp
c000d422:	89 e5                	mov    ebp,esp
c000d424:	83 ec 18             	sub    esp,0x18
c000d427:	e8 e3 42 00 00       	call   c001170f <KeUserIOReceived()>
c000d42c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d42f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d432:	0f b7 c0             	movzx  eax,ax
c000d435:	83 f2 01             	xor    edx,0x1
c000d438:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d43e:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d443:	85 c0                	test   eax,eax
c000d445:	74 24                	je     c000d46b <sendKeyboardToken(KeyboardToken)+0x4a>
c000d447:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d44d:	83 ec 04             	sub    esp,0x4
c000d450:	68 40 b4 02 c0       	push   0xc002b440
c000d455:	83 ec 08             	sub    esp,0x8
c000d458:	89 e2                	mov    edx,esp
c000d45a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45d:	89 02                	mov    DWORD PTR [edx],eax
c000d45f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d462:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d466:	ff d1                	call   ecx
c000d468:	83 c4 10             	add    esp,0x10
c000d46b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d46f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d472:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d477:	0f b6 d2             	movzx  edx,dl
c000d47a:	0f b6 c0             	movzx  eax,al
c000d47d:	39 c2                	cmp    edx,eax
c000d47f:	74 1c                	je     c000d49d <sendKeyboardToken(KeyboardToken)+0x7c>
c000d481:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d484:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d489:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d48e:	0f b6 c0             	movzx  eax,al
c000d491:	83 ec 0c             	sub    esp,0xc
c000d494:	50                   	push   eax
c000d495:	e8 68 b0 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d49a:	83 c4 10             	add    esp,0x10
c000d49d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d4a0:	0f b6 c0             	movzx  eax,al
c000d4a3:	85 c0                	test   eax,eax
c000d4a5:	0f 84 da 00 00 00    	je     c000d585 <sendKeyboardToken(KeyboardToken)+0x164>
c000d4ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ae:	0f b7 c0             	movzx  eax,ax
c000d4b1:	3d 18 03 00 00       	cmp    eax,0x318
c000d4b6:	75 06                	jne    c000d4be <sendKeyboardToken(KeyboardToken)+0x9d>
c000d4b8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c1:	0f b7 c0             	movzx  eax,ax
c000d4c4:	3d 19 03 00 00       	cmp    eax,0x319
c000d4c9:	75 06                	jne    c000d4d1 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d4cb:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d4d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d4:	0f b7 c0             	movzx  eax,ax
c000d4d7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4dc:	75 06                	jne    c000d4e4 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d4de:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4e7:	0f b7 c0             	movzx  eax,ax
c000d4ea:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4ef:	75 06                	jne    c000d4f7 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d4f1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fa:	0f b7 c0             	movzx  eax,ax
c000d4fd:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d502:	75 06                	jne    c000d50a <sendKeyboardToken(KeyboardToken)+0xe9>
c000d504:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50d:	0f b7 c0             	movzx  eax,ax
c000d510:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d515:	75 06                	jne    c000d51d <sendKeyboardToken(KeyboardToken)+0xfc>
c000d517:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d51d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d520:	0f b7 c0             	movzx  eax,ax
c000d523:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d528:	75 06                	jne    c000d530 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d52a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d533:	0f b7 c0             	movzx  eax,ax
c000d536:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d53b:	75 06                	jne    c000d543 <sendKeyboardToken(KeyboardToken)+0x122>
c000d53d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d546:	0f b7 c0             	movzx  eax,ax
c000d549:	3d 20 03 00 00       	cmp    eax,0x320
c000d54e:	75 06                	jne    c000d556 <sendKeyboardToken(KeyboardToken)+0x135>
c000d550:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d559:	0f b7 c0             	movzx  eax,ax
c000d55c:	3d 21 03 00 00       	cmp    eax,0x321
c000d561:	75 06                	jne    c000d569 <sendKeyboardToken(KeyboardToken)+0x148>
c000d563:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d56c:	0f b7 c0             	movzx  eax,ax
c000d56f:	3d 22 03 00 00       	cmp    eax,0x322
c000d574:	0f 85 f1 00 00 00    	jne    c000d66b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d57a:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d580:	e9 e6 00 00 00       	jmp    c000d66b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d588:	0f b7 c0             	movzx  eax,ax
c000d58b:	3d 18 03 00 00       	cmp    eax,0x318
c000d590:	75 0a                	jne    c000d59c <sendKeyboardToken(KeyboardToken)+0x17b>
c000d592:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d598:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d59c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59f:	0f b7 c0             	movzx  eax,ax
c000d5a2:	3d 19 03 00 00       	cmp    eax,0x319
c000d5a7:	75 0a                	jne    c000d5b3 <sendKeyboardToken(KeyboardToken)+0x192>
c000d5a9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d5af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b6:	0f b7 c0             	movzx  eax,ax
c000d5b9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d5be:	75 0a                	jne    c000d5ca <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d5c0:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d5c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5cd:	0f b7 c0             	movzx  eax,ax
c000d5d0:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d5d5:	75 0a                	jne    c000d5e1 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d5d7:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d5dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e4:	0f b7 c0             	movzx  eax,ax
c000d5e7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d5ec:	75 0a                	jne    c000d5f8 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d5ee:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d5f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fb:	0f b7 c0             	movzx  eax,ax
c000d5fe:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d603:	75 0a                	jne    c000d60f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d605:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d60b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d612:	0f b7 c0             	movzx  eax,ax
c000d615:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d61a:	75 0a                	jne    c000d626 <sendKeyboardToken(KeyboardToken)+0x205>
c000d61c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d622:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d629:	0f b7 c0             	movzx  eax,ax
c000d62c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d631:	75 0a                	jne    c000d63d <sendKeyboardToken(KeyboardToken)+0x21c>
c000d633:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d639:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d640:	0f b7 c0             	movzx  eax,ax
c000d643:	3d 20 03 00 00       	cmp    eax,0x320
c000d648:	75 0a                	jne    c000d654 <sendKeyboardToken(KeyboardToken)+0x233>
c000d64a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d650:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d657:	0f b7 c0             	movzx  eax,ax
c000d65a:	3d 21 03 00 00       	cmp    eax,0x321
c000d65f:	75 0a                	jne    c000d66b <sendKeyboardToken(KeyboardToken)+0x24a>
c000d661:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d667:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66e:	0f b7 c0             	movzx  eax,ax
c000d671:	3d 00 02 00 00       	cmp    eax,0x200
c000d676:	75 2f                	jne    c000d6a7 <sendKeyboardToken(KeyboardToken)+0x286>
c000d678:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d67d:	83 f0 01             	xor    eax,0x1
c000d680:	0f b6 c0             	movzx  eax,al
c000d683:	85 c0                	test   eax,eax
c000d685:	74 20                	je     c000d6a7 <sendKeyboardToken(KeyboardToken)+0x286>
c000d687:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d68c:	6a 01                	push   0x1
c000d68e:	6a 00                	push   0x0
c000d690:	68 6a d2 00 c0       	push   0xc000d26a
c000d695:	50                   	push   eax
c000d696:	e8 75 88 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c000d69b:	83 c4 10             	add    esp,0x10
c000d69e:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6a5:	eb 3a                	jmp    c000d6e1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6aa:	0f b7 c0             	movzx  eax,ax
c000d6ad:	3d 01 02 00 00       	cmp    eax,0x201
c000d6b2:	75 2d                	jne    c000d6e1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6b4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d6b9:	83 f0 01             	xor    eax,0x1
c000d6bc:	0f b6 c0             	movzx  eax,al
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	74 1e                	je     c000d6e1 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d6c3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d6c8:	6a 01                	push   0x1
c000d6ca:	6a 00                	push   0x0
c000d6cc:	68 d8 d2 00 c0       	push   0xc000d2d8
c000d6d1:	50                   	push   eax
c000d6d2:	e8 39 88 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c000d6d7:	83 c4 10             	add    esp,0x10
c000d6da:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d6e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e4:	0f b7 c0             	movzx  eax,ax
c000d6e7:	3d 25 03 00 00       	cmp    eax,0x325
c000d6ec:	75 06                	jne    c000d6f4 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d6ee:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f7:	0f b7 c0             	movzx  eax,ax
c000d6fa:	3d 24 03 00 00       	cmp    eax,0x324
c000d6ff:	75 06                	jne    c000d707 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d701:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70a:	0f b7 c0             	movzx  eax,ax
c000d70d:	3d 23 03 00 00       	cmp    eax,0x323
c000d712:	75 06                	jne    c000d71a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d714:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71d:	0f b7 c0             	movzx  eax,ax
c000d720:	3d 26 03 00 00       	cmp    eax,0x326
c000d725:	75 06                	jne    c000d72d <sendKeyboardToken(KeyboardToken)+0x30c>
c000d727:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d730:	0f b7 c0             	movzx  eax,ax
c000d733:	3d 27 03 00 00       	cmp    eax,0x327
c000d738:	75 06                	jne    c000d740 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d73a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d743:	0f b7 c0             	movzx  eax,ax
c000d746:	3d 22 03 00 00       	cmp    eax,0x322
c000d74b:	75 06                	jne    c000d753 <sendKeyboardToken(KeyboardToken)+0x332>
c000d74d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d753:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d757:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d75a:	83 f0 01             	xor    eax,0x1
c000d75d:	0f b6 c0             	movzx  eax,al
c000d760:	85 c0                	test   eax,eax
c000d762:	74 7c                	je     c000d7e0 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d764:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d769:	0f b6 c0             	movzx  eax,al
c000d76c:	85 c0                	test   eax,eax
c000d76e:	74 43                	je     c000d7b3 <sendKeyboardToken(KeyboardToken)+0x392>
c000d770:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d774:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d778:	85 c0                	test   eax,eax
c000d77a:	74 2b                	je     c000d7a7 <sendKeyboardToken(KeyboardToken)+0x386>
c000d77c:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d782:	89 d0                	mov    eax,edx
c000d784:	c1 e0 02             	shl    eax,0x2
c000d787:	01 d0                	add    eax,edx
c000d789:	01 c0                	add    eax,eax
c000d78b:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d793:	0f b7 c0             	movzx  eax,ax
c000d796:	8d 50 d0             	lea    edx,[eax-0x30]
c000d799:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d79e:	01 d0                	add    eax,edx
c000d7a0:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d7a5:	eb 71                	jmp    c000d818 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7a7:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7b1:	eb 65                	jmp    c000d818 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7b3:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7b8:	85 c0                	test   eax,eax
c000d7ba:	74 18                	je     c000d7d4 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d7bc:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7c1:	0f b6 c0             	movzx  eax,al
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	50                   	push   eax
c000d7c8:	e8 79 fb ff ff       	call   c000d346 <sendKeyToTerminal(unsigned char)>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7d4:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7de:	eb 38                	jmp    c000d818 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e3:	0f b7 c0             	movzx  eax,ax
c000d7e6:	3d 01 01 00 00       	cmp    eax,0x101
c000d7eb:	75 2b                	jne    c000d818 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d7ed:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7f2:	85 c0                	test   eax,eax
c000d7f4:	74 18                	je     c000d80e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7f6:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7fb:	0f b6 c0             	movzx  eax,al
c000d7fe:	83 ec 0c             	sub    esp,0xc
c000d801:	50                   	push   eax
c000d802:	e8 3f fb ff ff       	call   c000d346 <sendKeyToTerminal(unsigned char)>
c000d807:	83 c4 10             	add    esp,0x10
c000d80a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d80e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d818:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d81b:	83 f0 01             	xor    eax,0x1
c000d81e:	0f b6 c0             	movzx  eax,al
c000d821:	85 c0                	test   eax,eax
c000d823:	74 5a                	je     c000d87f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d825:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d828:	83 f0 01             	xor    eax,0x1
c000d82b:	0f b6 c0             	movzx  eax,al
c000d82e:	85 c0                	test   eax,eax
c000d830:	74 4d                	je     c000d87f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d832:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d837:	83 f0 01             	xor    eax,0x1
c000d83a:	0f b6 c0             	movzx  eax,al
c000d83d:	85 c0                	test   eax,eax
c000d83f:	74 3e                	je     c000d87f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d844:	0f b7 c0             	movzx  eax,ax
c000d847:	83 f8 1f             	cmp    eax,0x1f
c000d84a:	76 0b                	jbe    c000d857 <sendKeyboardToken(KeyboardToken)+0x436>
c000d84c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84f:	0f b7 c0             	movzx  eax,ax
c000d852:	83 f8 7e             	cmp    eax,0x7e
c000d855:	76 16                	jbe    c000d86d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d85a:	0f b7 c0             	movzx  eax,ax
c000d85d:	83 f8 0a             	cmp    eax,0xa
c000d860:	74 0b                	je     c000d86d <sendKeyboardToken(KeyboardToken)+0x44c>
c000d862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d865:	0f b7 c0             	movzx  eax,ax
c000d868:	83 f8 08             	cmp    eax,0x8
c000d86b:	75 12                	jne    c000d87f <sendKeyboardToken(KeyboardToken)+0x45e>
c000d86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d870:	0f b6 c0             	movzx  eax,al
c000d873:	83 ec 0c             	sub    esp,0xc
c000d876:	50                   	push   eax
c000d877:	e8 ca fa ff ff       	call   c000d346 <sendKeyToTerminal(unsigned char)>
c000d87c:	83 c4 10             	add    esp,0x10
c000d87f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d882:	83 f0 01             	xor    eax,0x1
c000d885:	0f b6 c0             	movzx  eax,al
c000d888:	85 c0                	test   eax,eax
c000d88a:	74 5d                	je     c000d8e9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d88c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d88f:	83 f0 01             	xor    eax,0x1
c000d892:	0f b6 c0             	movzx  eax,al
c000d895:	85 c0                	test   eax,eax
c000d897:	74 50                	je     c000d8e9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d899:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d89e:	0f b6 c0             	movzx  eax,al
c000d8a1:	85 c0                	test   eax,eax
c000d8a3:	74 44                	je     c000d8e9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8a8:	0f b7 c0             	movzx  eax,ax
c000d8ab:	83 f8 3f             	cmp    eax,0x3f
c000d8ae:	76 39                	jbe    c000d8e9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b3:	0f b7 c0             	movzx  eax,ax
c000d8b6:	83 f8 7f             	cmp    eax,0x7f
c000d8b9:	77 2e                	ja     c000d8e9 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d8bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8be:	88 c2                	mov    dl,al
c000d8c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8c3:	0f b7 c0             	movzx  eax,ax
c000d8c6:	83 f8 5f             	cmp    eax,0x5f
c000d8c9:	76 04                	jbe    c000d8cf <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d8cb:	b0 20                	mov    al,0x20
c000d8cd:	eb 02                	jmp    c000d8d1 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d8cf:	b0 00                	mov    al,0x0
c000d8d1:	89 d1                	mov    ecx,edx
c000d8d3:	29 c1                	sub    ecx,eax
c000d8d5:	89 c8                	mov    eax,ecx
c000d8d7:	83 e8 40             	sub    eax,0x40
c000d8da:	0f b6 c0             	movzx  eax,al
c000d8dd:	83 ec 0c             	sub    esp,0xc
c000d8e0:	50                   	push   eax
c000d8e1:	e8 60 fa ff ff       	call   c000d346 <sendKeyToTerminal(unsigned char)>
c000d8e6:	83 c4 10             	add    esp,0x10
c000d8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8ec:	0f b7 c0             	movzx  eax,ax
c000d8ef:	3d 00 03 00 00       	cmp    eax,0x300
c000d8f4:	75 12                	jne    c000d908 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8f6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8f9:	83 f0 01             	xor    eax,0x1
c000d8fc:	0f b6 c0             	movzx  eax,al
c000d8ff:	85 c0                	test   eax,eax
c000d901:	74 05                	je     c000d908 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d903:	e8 fb ab ff ff       	call   c0008503 <doTerminalCycle()>
c000d908:	90                   	nop
c000d909:	c9                   	leave  
c000d90a:	c3                   	ret    

c000d90b <clearInternalKeybuffer(VgaText*)>:
c000d90b:	55                   	push   ebp
c000d90c:	89 e5                	mov    ebp,esp
c000d90e:	83 ec 08             	sub    esp,0x8
c000d911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d914:	05 02 01 00 00       	add    eax,0x102
c000d919:	83 ec 0c             	sub    esp,0xc
c000d91c:	50                   	push   eax
c000d91d:	e8 4e 2c ff ff       	call   c0000570 <strlen>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d928:	81 c2 02 01 00 00    	add    edx,0x102
c000d92e:	83 ec 04             	sub    esp,0x4
c000d931:	50                   	push   eax
c000d932:	6a 00                	push   0x0
c000d934:	52                   	push   edx
c000d935:	e8 b6 2b ff ff       	call   c00004f0 <memset>
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	90                   	nop
c000d93e:	c9                   	leave  
c000d93f:	c3                   	ret    

c000d940 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d940:	55                   	push   ebp
c000d941:	89 e5                	mov    ebp,esp
c000d943:	83 ec 18             	sub    esp,0x18
c000d946:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d94b:	85 c0                	test   eax,eax
c000d94d:	74 2a                	je     c000d979 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d94f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d955:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d95b:	83 ec 04             	sub    esp,0x4
c000d95e:	68 40 b4 02 c0       	push   0xc002b440
c000d963:	83 ec 08             	sub    esp,0x8
c000d966:	89 e2                	mov    edx,esp
c000d968:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d96b:	89 02                	mov    DWORD PTR [edx],eax
c000d96d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d970:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d974:	ff d1                	call   ecx
c000d976:	83 c4 10             	add    esp,0x10
c000d979:	fb                   	sti    
c000d97a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d981:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d985:	0f 84 0d 01 00 00    	je     c000da98 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d98b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d98e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d994:	0f be c0             	movsx  eax,al
c000d997:	85 c0                	test   eax,eax
c000d999:	75 2c                	jne    c000d9c7 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d99b:	fa                   	cli    
c000d99c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9a1:	83 c0 01             	add    eax,0x1
c000d9a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d9a9:	e8 b2 87 00 00       	call   c0016160 <schedule()>
c000d9ae:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9b3:	83 e8 01             	sub    eax,0x1
c000d9b6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d9bb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d9c0:	85 c0                	test   eax,eax
c000d9c2:	75 c7                	jne    c000d98b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9c4:	fb                   	sti    
c000d9c5:	eb c4                	jmp    c000d98b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d9c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d9ca:	8d 50 01             	lea    edx,[eax+0x1]
c000d9cd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d9d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9d3:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d9d9:	88 10                	mov    BYTE PTR [eax],dl
c000d9db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9de:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d9e4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d9e7:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9eb:	83 f8 03             	cmp    eax,0x3
c000d9ee:	75 1e                	jne    c000da0e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d9f0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9fa:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000da00:	83 ec 08             	sub    esp,0x8
c000da03:	6a 02                	push   0x2
c000da05:	50                   	push   eax
c000da06:	e8 57 41 00 00       	call   c0011b62 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da12:	83 f8 1c             	cmp    eax,0x1c
c000da15:	75 1e                	jne    c000da35 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000da17:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000da1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000da1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da21:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000da27:	83 ec 08             	sub    esp,0x8
c000da2a:	6a 09                	push   0x9
c000da2c:	50                   	push   eax
c000da2d:	e8 30 41 00 00       	call   c0011b62 <KeRaiseSignal(SigHandlerBlock*, int)>
c000da32:	83 c4 10             	add    esp,0x10
c000da35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da38:	05 02 01 00 00       	add    eax,0x102
c000da3d:	83 ec 0c             	sub    esp,0xc
c000da40:	50                   	push   eax
c000da41:	e8 2a 2b ff ff       	call   c0000570 <strlen>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da4c:	81 c2 02 01 00 00    	add    edx,0x102
c000da52:	8d 4a 01             	lea    ecx,[edx+0x1]
c000da55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da58:	81 c2 02 01 00 00    	add    edx,0x102
c000da5e:	83 ec 04             	sub    esp,0x4
c000da61:	50                   	push   eax
c000da62:	51                   	push   ecx
c000da63:	52                   	push   edx
c000da64:	e8 67 29 ff ff       	call   c00003d0 <memmove>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da70:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da74:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da78:	83 f8 0a             	cmp    eax,0xa
c000da7b:	74 16                	je     c000da93 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da7d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da81:	83 f8 03             	cmp    eax,0x3
c000da84:	74 0d                	je     c000da93 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da86:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da8a:	83 f8 1c             	cmp    eax,0x1c
c000da8d:	0f 85 ee fe ff ff    	jne    c000d981 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da96:	eb 03                	jmp    c000da9b <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da9b:	c9                   	leave  
c000da9c:	c3                   	ret    
c000da9d:	90                   	nop

c000da9e <Keyboard::Keyboard(char const*)>:
c000da9e:	83 ec 0c             	sub    esp,0xc
c000daa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa5:	83 ec 08             	sub    esp,0x8
c000daa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daac:	50                   	push   eax
c000daad:	e8 4c f1 ff ff       	call   c000cbfe <Device::Device(char const*)>
c000dab2:	83 c4 10             	add    esp,0x10
c000dab5:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	89 10                	mov    DWORD PTR [eax],edx
c000dac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000dace:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000dad5:	90                   	nop
c000dad6:	83 c4 0c             	add    esp,0xc
c000dad9:	c3                   	ret    

c000dada <Keyboard::~Keyboard()>:
c000dada:	83 ec 0c             	sub    esp,0xc
c000dadd:	ba 5c 1d 02 c0       	mov    edx,0xc0021d5c
c000dae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae6:	89 10                	mov    DWORD PTR [eax],edx
c000dae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	50                   	push   eax
c000daf0:	e8 73 ee ff ff       	call   c000c968 <Device::~Device()>
c000daf5:	83 c4 10             	add    esp,0x10
c000daf8:	90                   	nop
c000daf9:	83 c4 0c             	add    esp,0xc
c000dafc:	c3                   	ret    
c000dafd:	90                   	nop

c000dafe <Keyboard::~Keyboard()>:
c000dafe:	83 ec 0c             	sub    esp,0xc
c000db01:	83 ec 0c             	sub    esp,0xc
c000db04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db08:	e8 cd ff ff ff       	call   c000dada <Keyboard::~Keyboard()>
c000db0d:	83 c4 10             	add    esp,0x10
c000db10:	83 ec 08             	sub    esp,0x8
c000db13:	68 5c 01 00 00       	push   0x15c
c000db18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1c:	e8 f7 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	83 c4 0c             	add    esp,0xc
c000db27:	c3                   	ret    

c000db28 <LogicalDisk::close(int, int, void*)>:
c000db28:	83 c8 ff             	or     eax,0xffffffff
c000db2b:	c3                   	ret    

c000db2c <LogicalDisk::~LogicalDisk()>:
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	89 10                	mov    DWORD PTR [eax],edx
c000db3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3e:	83 ec 0c             	sub    esp,0xc
c000db41:	50                   	push   eax
c000db42:	e8 21 ee ff ff       	call   c000c968 <Device::~Device()>
c000db47:	83 c4 10             	add    esp,0x10
c000db4a:	90                   	nop
c000db4b:	83 c4 0c             	add    esp,0xc
c000db4e:	c3                   	ret    
c000db4f:	90                   	nop

c000db50 <LogicalDisk::~LogicalDisk()>:
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	83 ec 0c             	sub    esp,0xc
c000db56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5a:	e8 cd ff ff ff       	call   c000db2c <LogicalDisk::~LogicalDisk()>
c000db5f:	83 c4 10             	add    esp,0x10
c000db62:	83 ec 08             	sub    esp,0x8
c000db65:	68 78 01 00 00       	push   0x178
c000db6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6e:	e8 a5 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db73:	83 c4 10             	add    esp,0x10
c000db76:	83 c4 0c             	add    esp,0xc
c000db79:	c3                   	ret    

c000db7a <LogicalDisk::open(int, int, void*)>:
c000db7a:	83 ec 18             	sub    esp,0x18
c000db7d:	68 88 1d 02 c0       	push   0xc0021d88
c000db82:	e8 38 3b 00 00       	call   c00116bf <KePanic(char const*)>
c000db87:	83 c8 ff             	or     eax,0xffffffff
c000db8a:	83 c4 1c             	add    esp,0x1c
c000db8d:	c3                   	ret    

c000db8e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db8e:	53                   	push   ebx
c000db8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db9b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dba1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000dba7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000dbad:	77 10                	ja     c000dbbf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dbaf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dbb5:	89 d3                	mov    ebx,edx
c000dbb7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dbbd:	72 05                	jb     c000dbc4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dbbf:	83 c8 ff             	or     eax,0xffffffff
c000dbc2:	89 c2                	mov    edx,eax
c000dbc4:	5b                   	pop    ebx
c000dbc5:	c3                   	ret    

c000dbc6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000dbc6:	56                   	push   esi
c000dbc7:	83 c8 ff             	or     eax,0xffffffff
c000dbca:	53                   	push   ebx
c000dbcb:	89 c2                	mov    edx,eax
c000dbcd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dbd1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dbd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbd9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbdf:	77 27                	ja     c000dc08 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbe1:	89 d8                	mov    eax,ebx
c000dbe3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dbe9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dbef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbf4:	89 c2                	mov    edx,eax
c000dbf6:	73 10                	jae    c000dc08 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dbf8:	89 c8                	mov    eax,ecx
c000dbfa:	89 da                	mov    edx,ebx
c000dbfc:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dc02:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dc08:	5b                   	pop    ebx
c000dc09:	5e                   	pop    esi
c000dc0a:	c3                   	ret    
c000dc0b:	90                   	nop

c000dc0c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc0c:	83 ec 1c             	sub    esp,0x1c
c000dc0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dc13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dc1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc23:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc32:	83 ec 08             	sub    esp,0x8
c000dc35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc39:	50                   	push   eax
c000dc3a:	e8 bf ef ff ff       	call   c000cbfe <Device::Device(char const*)>
c000dc3f:	83 c4 10             	add    esp,0x10
c000dc42:	ba d4 1d 02 c0       	mov    edx,0xc0021dd4
c000dc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc4b:	89 10                	mov    DWORD PTR [eax],edx
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc72:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc7c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc88:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc8e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc94:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc98:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc9f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dca5:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dcab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcaf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dcb3:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dcb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcbd:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcc7:	90                   	nop
c000dcc8:	83 c4 1c             	add    esp,0x1c
c000dccb:	c3                   	ret    

c000dccc <LogicalDisk::assignDriveLetter()>:
c000dccc:	55                   	push   ebp
c000dccd:	57                   	push   edi
c000dcce:	56                   	push   esi
c000dccf:	53                   	push   ebx
c000dcd0:	83 ec 14             	sub    esp,0x14
c000dcd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dcd7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dcdd:	b0 41                	mov    al,0x41
c000dcdf:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dce5:	84 d2                	test   dl,dl
c000dce7:	75 02                	jne    c000dceb <LogicalDisk::assignDriveLetter()+0x1f>
c000dce9:	b0 43                	mov    al,0x43
c000dceb:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dcf1:	0f b6 ca             	movzx  ecx,dl
c000dcf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dcf8:	0f be e8             	movsx  ebp,al
c000dcfb:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dd01:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd05:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dd09:	3c 43                	cmp    al,0x43
c000dd0b:	75 10                	jne    c000dd1d <LogicalDisk::assignDriveLetter()+0x51>
c000dd0d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dd14:	75 5a                	jne    c000dd70 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd16:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dd1b:	75 53                	jne    c000dd70 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd1d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dd20:	ba 01 00 00 00       	mov    edx,0x1
c000dd25:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd28:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dd2b:	d3 e2                	shl    edx,cl
c000dd2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd31:	89 d7                	mov    edi,edx
c000dd33:	89 d6                	mov    esi,edx
c000dd35:	c1 ff 1f             	sar    edi,0x1f
c000dd38:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dd3c:	21 f9                	and    ecx,edi
c000dd3e:	09 d1                	or     ecx,edx
c000dd40:	75 2e                	jne    c000dd70 <LogicalDisk::assignDriveLetter()+0xa4>
c000dd42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dd46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dd4a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd50:	09 f2                	or     edx,esi
c000dd52:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd55:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dd5b:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd66:	09 fa                	or     edx,edi
c000dd68:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd6e:	eb 0d                	jmp    c000dd7d <LogicalDisk::assignDriveLetter()+0xb1>
c000dd70:	8d 50 01             	lea    edx,[eax+0x1]
c000dd73:	45                   	inc    ebp
c000dd74:	88 d0                	mov    al,dl
c000dd76:	80 fa 5b             	cmp    dl,0x5b
c000dd79:	75 8e                	jne    c000dd09 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd7b:	31 c0                	xor    eax,eax
c000dd7d:	83 c4 14             	add    esp,0x14
c000dd80:	5b                   	pop    ebx
c000dd81:	5e                   	pop    esi
c000dd82:	5f                   	pop    edi
c000dd83:	5d                   	pop    ebp
c000dd84:	c3                   	ret    
c000dd85:	90                   	nop

c000dd86 <LogicalDisk::mount()>:
c000dd86:	56                   	push   esi
c000dd87:	53                   	push   ebx
c000dd88:	53                   	push   ebx
c000dd89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd8d:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd93:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd9d:	85 db                	test   ebx,ebx
c000dd9f:	74 27                	je     c000ddc8 <LogicalDisk::mount()+0x42>
c000dda1:	51                   	push   ecx
c000dda2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dda9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ddab:	83 e8 41             	sub    eax,0x41
c000ddae:	50                   	push   eax
c000ddaf:	56                   	push   esi
c000ddb0:	53                   	push   ebx
c000ddb1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ddb4:	83 c4 10             	add    esp,0x10
c000ddb7:	84 c0                	test   al,al
c000ddb9:	74 08                	je     c000ddc3 <LogicalDisk::mount()+0x3d>
c000ddbb:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ddc1:	eb 07                	jmp    c000ddca <LogicalDisk::mount()+0x44>
c000ddc3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ddc6:	eb d5                	jmp    c000dd9d <LogicalDisk::mount()+0x17>
c000ddc8:	31 c0                	xor    eax,eax
c000ddca:	5a                   	pop    edx
c000ddcb:	5b                   	pop    ebx
c000ddcc:	5e                   	pop    esi
c000ddcd:	c3                   	ret    

c000ddce <LogicalDisk::unmount()>:
c000ddce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd2:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dddc:	c3                   	ret    
c000dddd:	90                   	nop

c000ddde <LogicalDisk::eject()>:
c000ddde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dde2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dde8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ddee:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ddf1:	90                   	nop

c000ddf2 <LogicalDisk::unassignDriveLetter()>:
c000ddf2:	57                   	push   edi
c000ddf3:	56                   	push   esi
c000ddf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddf8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ddff:	85 c9                	test   ecx,ecx
c000de01:	75 0f                	jne    c000de12 <LogicalDisk::unassignDriveLetter()+0x20>
c000de03:	c7 44 24 0c ac 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021dac
c000de0b:	5e                   	pop    esi
c000de0c:	5f                   	pop    edi
c000de0d:	e9 ad 38 00 00       	jmp    c00116bf <KePanic(char const*)>
c000de12:	83 e9 41             	sub    ecx,0x41
c000de15:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000de1c:	b8 01 00 00 00       	mov    eax,0x1
c000de21:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000de2c:	d3 e0                	shl    eax,cl
c000de2e:	89 c7                	mov    edi,eax
c000de30:	f7 d0                	not    eax
c000de32:	c1 ff 1f             	sar    edi,0x1f
c000de35:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000de3b:	89 fe                	mov    esi,edi
c000de3d:	f7 d6                	not    esi
c000de3f:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000de45:	5e                   	pop    esi
c000de46:	5f                   	pop    edi
c000de47:	c3                   	ret    

c000de48 <LogicalDisk::read(unsigned long long, int, void*)>:
c000de48:	57                   	push   edi
c000de49:	56                   	push   esi
c000de4a:	53                   	push   ebx
c000de4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de53:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de61:	77 41                	ja     c000dea4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de63:	99                   	cdq    
c000de64:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de6a:	01 c8                	add    eax,ecx
c000de6c:	11 da                	adc    edx,ebx
c000de6e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de74:	19 d7                	sbb    edi,edx
c000de76:	72 33                	jb     c000deab <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de78:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de7e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de84:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de88:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de8c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de9c:	5b                   	pop    ebx
c000de9d:	5e                   	pop    esi
c000de9e:	5f                   	pop    edi
c000de9f:	e9 c6 0a 00 00       	jmp    c000e96a <VCache::read(unsigned long long, int, void*)>
c000dea4:	b8 05 00 00 00       	mov    eax,0x5
c000dea9:	eb 05                	jmp    c000deb0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000deab:	b8 07 00 00 00       	mov    eax,0x7
c000deb0:	5b                   	pop    ebx
c000deb1:	5e                   	pop    esi
c000deb2:	5f                   	pop    edi
c000deb3:	c3                   	ret    

c000deb4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000deb4:	57                   	push   edi
c000deb5:	56                   	push   esi
c000deb6:	53                   	push   ebx
c000deb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000debb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000debf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dec3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dec7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000decd:	77 41                	ja     c000df10 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000decf:	99                   	cdq    
c000ded0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ded6:	01 c8                	add    eax,ecx
c000ded8:	11 da                	adc    edx,ebx
c000deda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dee0:	19 d7                	sbb    edi,edx
c000dee2:	72 33                	jb     c000df17 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dee4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000deea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000def0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000def4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000def8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000defe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df08:	5b                   	pop    ebx
c000df09:	5e                   	pop    esi
c000df0a:	5f                   	pop    edi
c000df0b:	e9 6c 09 00 00       	jmp    c000e87c <VCache::write(unsigned long long, int, void*)>
c000df10:	b8 05 00 00 00       	mov    eax,0x5
c000df15:	eb 05                	jmp    c000df1c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000df17:	b8 07 00 00 00       	mov    eax,0x7
c000df1c:	5b                   	pop    ebx
c000df1d:	5e                   	pop    esi
c000df1e:	5f                   	pop    edi
c000df1f:	c3                   	ret    

c000df20 <Mouse::Mouse(char const*)>:
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df27:	83 ec 08             	sub    esp,0x8
c000df2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2e:	50                   	push   eax
c000df2f:	e8 ca ec ff ff       	call   c000cbfe <Device::Device(char const*)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000df3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df40:	89 10                	mov    DWORD PTR [eax],edx
c000df42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df46:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000df50:	90                   	nop
c000df51:	83 c4 0c             	add    esp,0xc
c000df54:	c3                   	ret    
c000df55:	90                   	nop
c000df56:	66 90                	xchg   ax,ax

c000df58 <Mouse::~Mouse()>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	ba 00 1e 02 c0       	mov    edx,0xc0021e00
c000df60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df64:	89 10                	mov    DWORD PTR [eax],edx
c000df66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	50                   	push   eax
c000df6e:	e8 f5 e9 ff ff       	call   c000c968 <Device::~Device()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	90                   	nop
c000df77:	83 c4 0c             	add    esp,0xc
c000df7a:	c3                   	ret    
c000df7b:	90                   	nop

c000df7c <Mouse::~Mouse()>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	83 ec 0c             	sub    esp,0xc
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	e8 cd ff ff ff       	call   c000df58 <Mouse::~Mouse()>
c000df8b:	83 c4 10             	add    esp,0x10
c000df8e:	83 ec 08             	sub    esp,0x8
c000df91:	68 58 01 00 00       	push   0x158
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 79 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 c4 0c             	add    esp,0xc
c000dfa5:	c3                   	ret    

c000dfa6 <NIC::getMAC()>:
c000dfa6:	31 c0                	xor    eax,eax
c000dfa8:	31 d2                	xor    edx,edx
c000dfaa:	c3                   	ret    
c000dfab:	90                   	nop

c000dfac <NIC::write(int, unsigned char*, int*)>:
c000dfac:	b8 01 00 00 00       	mov    eax,0x1
c000dfb1:	c3                   	ret    

c000dfb2 <NIC::NIC(char const*)>:
c000dfb2:	83 ec 0c             	sub    esp,0xc
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	83 ec 08             	sub    esp,0x8
c000dfbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc0:	50                   	push   eax
c000dfc1:	e8 38 ec ff ff       	call   c000cbfe <Device::Device(char const*)>
c000dfc6:	83 c4 10             	add    esp,0x10
c000dfc9:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000dfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd2:	89 10                	mov    DWORD PTR [eax],edx
c000dfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dfe2:	90                   	nop
c000dfe3:	83 c4 0c             	add    esp,0xc
c000dfe6:	c3                   	ret    
c000dfe7:	90                   	nop

c000dfe8 <NIC::~NIC()>:
c000dfe8:	83 ec 0c             	sub    esp,0xc
c000dfeb:	ba 2c 1e 02 c0       	mov    edx,0xc0021e2c
c000dff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff4:	89 10                	mov    DWORD PTR [eax],edx
c000dff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffa:	83 ec 0c             	sub    esp,0xc
c000dffd:	50                   	push   eax
c000dffe:	e8 65 e9 ff ff       	call   c000c968 <Device::~Device()>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	90                   	nop
c000e007:	83 c4 0c             	add    esp,0xc
c000e00a:	c3                   	ret    
c000e00b:	90                   	nop

c000e00c <NIC::~NIC()>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	83 ec 0c             	sub    esp,0xc
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	e8 cd ff ff ff       	call   c000dfe8 <NIC::~NIC()>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	83 ec 08             	sub    esp,0x8
c000e021:	68 58 01 00 00       	push   0x158
c000e026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02a:	e8 e9 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e02f:	83 c4 10             	add    esp,0x10
c000e032:	83 c4 0c             	add    esp,0xc
c000e035:	c3                   	ret    

c000e036 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000e036:	55                   	push   ebp
c000e037:	57                   	push   edi
c000e038:	56                   	push   esi
c000e039:	53                   	push   ebx
c000e03a:	81 ec 28 01 00 00    	sub    esp,0x128
c000e040:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000e047:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000e04e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000e055:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000e05c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e060:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e064:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e06b:	e8 8a ec ff ff       	call   c000ccfa <Device::getName()>
c000e070:	5a                   	pop    edx
c000e071:	59                   	pop    ecx
c000e072:	50                   	push   eax
c000e073:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e077:	55                   	push   ebp
c000e078:	e8 c3 25 ff ff       	call   c0000640 <strcpy>
c000e07d:	5b                   	pop    ebx
c000e07e:	58                   	pop    eax
c000e07f:	68 58 1e 02 c0       	push   0xc0021e58
c000e084:	55                   	push   ebp
c000e085:	e8 b6 27 ff ff       	call   c0000840 <strcat>
c000e08a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e091:	e8 20 9a ff ff       	call   c0007ab6 <malloc>
c000e096:	83 c4 0c             	add    esp,0xc
c000e099:	89 c3                	mov    ebx,eax
c000e09b:	57                   	push   edi
c000e09c:	56                   	push   esi
c000e09d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0a5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e0ac:	55                   	push   ebp
c000e0ad:	50                   	push   eax
c000e0ae:	e8 59 fb ff ff       	call   c000dc0c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0b3:	83 c4 14             	add    esp,0x14
c000e0b6:	53                   	push   ebx
c000e0b7:	e8 10 fc ff ff       	call   c000dccc <LogicalDisk::assignDriveLetter()>
c000e0bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0bf:	e8 c2 fc ff ff       	call   c000dd86 <LogicalDisk::mount()>
c000e0c4:	58                   	pop    eax
c000e0c5:	5a                   	pop    edx
c000e0c6:	53                   	push   ebx
c000e0c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e0ce:	e8 93 e9 ff ff       	call   c000ca66 <Device::addChild(Device*)>
c000e0d3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e0d9:	5b                   	pop    ebx
c000e0da:	5e                   	pop    esi
c000e0db:	5f                   	pop    edi
c000e0dc:	5d                   	pop    ebp
c000e0dd:	c3                   	ret    

c000e0de <createPartitionsForDisk(PhysicalDisk*)>:
c000e0de:	55                   	push   ebp
c000e0df:	57                   	push   edi
c000e0e0:	56                   	push   esi
c000e0e1:	53                   	push   ebx
c000e0e2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e0e8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e0ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0f5:	3d 00 02 00 00       	cmp    eax,0x200
c000e0fa:	74 27                	je     c000e123 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0fc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e102:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e108:	83 ec 10             	sub    esp,0x10
c000e10b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e10f:	99                   	cdq    
c000e110:	c1 e6 0a             	shl    esi,0xa
c000e113:	52                   	push   edx
c000e114:	89 fd                	mov    ebp,edi
c000e116:	50                   	push   eax
c000e117:	55                   	push   ebp
c000e118:	56                   	push   esi
c000e119:	e8 b2 16 01 00       	call   c001f7d0 <__udivdi3>
c000e11e:	e9 b9 00 00 00       	jmp    c000e1dc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e123:	83 ec 0c             	sub    esp,0xc
c000e126:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e128:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e12c:	56                   	push   esi
c000e12d:	6a 01                	push   0x1
c000e12f:	6a 00                	push   0x0
c000e131:	6a 00                	push   0x0
c000e133:	53                   	push   ebx
c000e134:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e137:	83 c4 20             	add    esp,0x20
c000e13a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e142:	75 0a                	jne    c000e14e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e144:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e14c:	74 2c                	je     c000e17a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e14e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e154:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e15a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e160:	83 ec 10             	sub    esp,0x10
c000e163:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e167:	89 f7                	mov    edi,esi
c000e169:	c1 e0 0a             	shl    eax,0xa
c000e16c:	c1 ff 1f             	sar    edi,0x1f
c000e16f:	57                   	push   edi
c000e170:	56                   	push   esi
c000e171:	52                   	push   edx
c000e172:	50                   	push   eax
c000e173:	e8 58 16 01 00       	call   c001f7d0 <__udivdi3>
c000e178:	eb 62                	jmp    c000e1dc <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e17a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e181:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e188:	89 cf                	mov    edi,ecx
c000e18a:	83 e2 7f             	and    edx,0x7f
c000e18d:	83 e7 7f             	and    edi,0x7f
c000e190:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e197:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e19a:	83 e0 7f             	and    eax,0x7f
c000e19d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e1a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e1a7:	83 e0 7f             	and    eax,0x7f
c000e1aa:	01 d0                	add    eax,edx
c000e1ac:	89 c5                	mov    ebp,eax
c000e1ae:	84 c0                	test   al,al
c000e1b0:	74 41                	je     c000e1f3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e1b2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1b8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1c4:	83 ec 10             	sub    esp,0x10
c000e1c7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1cb:	89 f7                	mov    edi,esi
c000e1cd:	c1 e0 0a             	shl    eax,0xa
c000e1d0:	c1 ff 1f             	sar    edi,0x1f
c000e1d3:	57                   	push   edi
c000e1d4:	56                   	push   esi
c000e1d5:	52                   	push   edx
c000e1d6:	50                   	push   eax
c000e1d7:	e8 f4 15 01 00       	call   c001f7d0 <__udivdi3>
c000e1dc:	83 c4 14             	add    esp,0x14
c000e1df:	52                   	push   edx
c000e1e0:	50                   	push   eax
c000e1e1:	6a 00                	push   0x0
c000e1e3:	6a 00                	push   0x0
c000e1e5:	53                   	push   ebx
c000e1e6:	e8 4b fe ff ff       	call   c000e036 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e1eb:	83 c4 20             	add    esp,0x20
c000e1ee:	e9 73 01 00 00       	jmp    c000e366 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e1f3:	89 f0                	mov    eax,esi
c000e1f5:	31 c9                	xor    ecx,ecx
c000e1f7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1fe:	75 02                	jne    c000e202 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e200:	89 cd                	mov    ebp,ecx
c000e202:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e209:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e210:	c1 e2 08             	shl    edx,0x8
c000e213:	c1 e6 10             	shl    esi,0x10
c000e216:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e21e:	09 f2                	or     edx,esi
c000e220:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e228:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e22f:	83 c0 10             	add    eax,0x10
c000e232:	09 f2                	or     edx,esi
c000e234:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e23b:	c1 e6 18             	shl    esi,0x18
c000e23e:	09 f2                	or     edx,esi
c000e240:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e247:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e24b:	c1 e6 10             	shl    esi,0x10
c000e24e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e255:	c1 e2 08             	shl    edx,0x8
c000e258:	09 f2                	or     edx,esi
c000e25a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e261:	09 f2                	or     edx,esi
c000e263:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e26a:	c1 e6 18             	shl    esi,0x18
c000e26d:	09 f2                	or     edx,esi
c000e26f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e273:	41                   	inc    ecx
c000e274:	83 f9 04             	cmp    ecx,0x4
c000e277:	0f 85 7a ff ff ff    	jne    c000e1f7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e281:	83 f0 01             	xor    eax,0x1
c000e284:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e288:	75 4f                	jne    c000e2d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e28a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e28e:	83 f0 01             	xor    eax,0x1
c000e291:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e295:	75 42                	jne    c000e2d9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e297:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e29f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e2ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e2b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e2b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e2bd:	89 f7                	mov    edi,esi
c000e2bf:	c1 e0 0a             	shl    eax,0xa
c000e2c2:	c1 ff 1f             	sar    edi,0x1f
c000e2c5:	57                   	push   edi
c000e2c6:	56                   	push   esi
c000e2c7:	52                   	push   edx
c000e2c8:	50                   	push   eax
c000e2c9:	e8 02 15 01 00       	call   c001f7d0 <__udivdi3>
c000e2ce:	83 c4 10             	add    esp,0x10
c000e2d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e2d9:	89 e8                	mov    eax,ebp
c000e2db:	0f b6 e8             	movzx  ebp,al
c000e2de:	85 ed                	test   ebp,ebp
c000e2e0:	74 50                	je     c000e332 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e2e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e2ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e2f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2fa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2fe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e302:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e306:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e30a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e30e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e312:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e316:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e31a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e31e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e322:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e326:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e32a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e32e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e332:	31 ed                	xor    ebp,ebp
c000e334:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e338:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e33c:	89 f8                	mov    eax,edi
c000e33e:	09 f0                	or     eax,esi
c000e340:	74 1e                	je     c000e360 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e342:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e346:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e34a:	89 d1                	mov    ecx,edx
c000e34c:	09 c1                	or     ecx,eax
c000e34e:	74 10                	je     c000e360 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	57                   	push   edi
c000e354:	56                   	push   esi
c000e355:	52                   	push   edx
c000e356:	50                   	push   eax
c000e357:	53                   	push   ebx
c000e358:	e8 d9 fc ff ff       	call   c000e036 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e35d:	83 c4 20             	add    esp,0x20
c000e360:	45                   	inc    ebp
c000e361:	83 fd 04             	cmp    ebp,0x4
c000e364:	75 ce                	jne    c000e334 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e366:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e36c:	5b                   	pop    ebx
c000e36d:	5e                   	pop    esi
c000e36e:	5f                   	pop    edi
c000e36f:	5d                   	pop    ebp
c000e370:	c3                   	ret    
c000e371:	66 90                	xchg   ax,ax
c000e373:	90                   	nop

c000e374 <Serial::Serial(char const*)>:
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37b:	83 ec 08             	sub    esp,0x8
c000e37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e382:	50                   	push   eax
c000e383:	e8 76 e8 ff ff       	call   c000cbfe <Device::Device(char const*)>
c000e388:	83 c4 10             	add    esp,0x10
c000e38b:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	89 10                	mov    DWORD PTR [eax],edx
c000e396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e3a4:	90                   	nop
c000e3a5:	83 c4 0c             	add    esp,0xc
c000e3a8:	c3                   	ret    
c000e3a9:	90                   	nop
c000e3aa:	66 90                	xchg   ax,ax

c000e3ac <Serial::~Serial()>:
c000e3ac:	83 ec 0c             	sub    esp,0xc
c000e3af:	ba 6c 1e 02 c0       	mov    edx,0xc0021e6c
c000e3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3be:	83 ec 0c             	sub    esp,0xc
c000e3c1:	50                   	push   eax
c000e3c2:	e8 a1 e5 ff ff       	call   c000c968 <Device::~Device()>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	90                   	nop
c000e3cb:	83 c4 0c             	add    esp,0xc
c000e3ce:	c3                   	ret    
c000e3cf:	90                   	nop

c000e3d0 <Serial::~Serial()>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	83 ec 0c             	sub    esp,0xc
c000e3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3da:	e8 cd ff ff ff       	call   c000e3ac <Serial::~Serial()>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	83 ec 08             	sub    esp,0x8
c000e3e5:	68 58 01 00 00       	push   0x158
c000e3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ee:	e8 25 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	83 c4 0c             	add    esp,0xc
c000e3f9:	c3                   	ret    
c000e3fa:	66 90                	xchg   ax,ax

c000e3fc <Timer::Timer(char const*)>:
c000e3fc:	83 ec 0c             	sub    esp,0xc
c000e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e403:	83 ec 08             	sub    esp,0x8
c000e406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40a:	50                   	push   eax
c000e40b:	e8 ee e7 ff ff       	call   c000cbfe <Device::Device(char const*)>
c000e410:	83 c4 10             	add    esp,0x10
c000e413:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	89 10                	mov    DWORD PTR [eax],edx
c000e41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e422:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e42c:	90                   	nop
c000e42d:	83 c4 0c             	add    esp,0xc
c000e430:	c3                   	ret    
c000e431:	90                   	nop
c000e432:	66 90                	xchg   ax,ax

c000e434 <Timer::~Timer()>:
c000e434:	83 ec 0c             	sub    esp,0xc
c000e437:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c000e43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e440:	89 10                	mov    DWORD PTR [eax],edx
c000e442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	50                   	push   eax
c000e44a:	e8 19 e5 ff ff       	call   c000c968 <Device::~Device()>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	90                   	nop
c000e453:	83 c4 0c             	add    esp,0xc
c000e456:	c3                   	ret    
c000e457:	90                   	nop

c000e458 <Timer::~Timer()>:
c000e458:	83 ec 0c             	sub    esp,0xc
c000e45b:	83 ec 0c             	sub    esp,0xc
c000e45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e462:	e8 cd ff ff ff       	call   c000e434 <Timer::~Timer()>
c000e467:	83 c4 10             	add    esp,0x10
c000e46a:	83 ec 08             	sub    esp,0x8
c000e46d:	68 5c 01 00 00       	push   0x15c
c000e472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e476:	e8 9d c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	83 c4 0c             	add    esp,0xc
c000e481:	c3                   	ret    

c000e482 <Timer::read()>:
c000e482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e486:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e48c:	c3                   	ret    

c000e48d <setupTimer(int)>:
c000e48d:	53                   	push   ebx
c000e48e:	83 ec 14             	sub    esp,0x14
c000e491:	68 5c 01 00 00       	push   0x15c
c000e496:	e8 1b 96 ff ff       	call   c0007ab6 <malloc>
c000e49b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e49e:	89 c3                	mov    ebx,eax
c000e4a0:	e8 97 0b 01 00       	call   c001f03c <PIT::PIT()>
c000e4a5:	58                   	pop    eax
c000e4a6:	5a                   	pop    edx
c000e4a7:	53                   	push   ebx
c000e4a8:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e4ae:	e8 b3 e5 ff ff       	call   c000ca66 <Device::addChild(Device*)>
c000e4b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4b5:	6a 00                	push   0x0
c000e4b7:	6a 00                	push   0x0
c000e4b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4bd:	53                   	push   ebx
c000e4be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4c1:	89 d8                	mov    eax,ebx
c000e4c3:	83 c4 28             	add    esp,0x28
c000e4c6:	5b                   	pop    ebx
c000e4c7:	c3                   	ret    

c000e4c8 <timerHandler(unsigned int)>:
c000e4c8:	56                   	push   esi
c000e4c9:	53                   	push   ebx
c000e4ca:	51                   	push   ecx
c000e4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4cf:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e4d5:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e4dc:	0f 84 4a 01 00 00    	je     c000e62c <timerHandler(unsigned int)+0x164>
c000e4e2:	fa                   	cli    
c000e4e3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4e9:	83 ec 0c             	sub    esp,0xc
c000e4ec:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4f2:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f7:	e8 a4 18 01 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4fc:	83 c4 10             	add    esp,0x10
c000e4ff:	84 c0                	test   al,al
c000e501:	0f 85 a1 00 00 00    	jne    c000e5a8 <timerHandler(unsigned int)+0xe0>
c000e507:	83 ec 0c             	sub    esp,0xc
c000e50a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e50f:	e8 a8 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	89 c6                	mov    esi,eax
c000e519:	8d 76 00             	lea    esi,[esi+0x0]
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e524:	e8 93 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e529:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e530:	89 c3                	mov    ebx,eax
c000e532:	e8 8d 18 01 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e537:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e53a:	83 c4 10             	add    esp,0x10
c000e53d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e543:	77 23                	ja     c000e568 <timerHandler(unsigned int)+0xa0>
c000e545:	83 ec 0c             	sub    esp,0xc
c000e548:	53                   	push   ebx
c000e549:	e8 2a 81 00 00       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c000e54e:	83 c4 10             	add    esp,0x10
c000e551:	39 de                	cmp    esi,ebx
c000e553:	75 27                	jne    c000e57c <timerHandler(unsigned int)+0xb4>
c000e555:	83 ec 0c             	sub    esp,0xc
c000e558:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e55d:	e8 5a 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e562:	89 c6                	mov    esi,eax
c000e564:	eb 12                	jmp    c000e578 <timerHandler(unsigned int)+0xb0>
c000e566:	66 90                	xchg   ax,ax
c000e568:	52                   	push   edx
c000e569:	52                   	push   edx
c000e56a:	53                   	push   ebx
c000e56b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e570:	e8 0b 19 01 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e575:	8d 76 00             	lea    esi,[esi+0x0]
c000e578:	83 c4 10             	add    esp,0x10
c000e57b:	90                   	nop
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e584:	e8 17 18 01 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e589:	83 c4 10             	add    esp,0x10
c000e58c:	84 c0                	test   al,al
c000e58e:	75 18                	jne    c000e5a8 <timerHandler(unsigned int)+0xe0>
c000e590:	83 ec 0c             	sub    esp,0xc
c000e593:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e598:	e8 1f 18 01 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e59d:	83 c4 10             	add    esp,0x10
c000e5a0:	39 f0                	cmp    eax,esi
c000e5a2:	0f 85 74 ff ff ff    	jne    c000e51c <timerHandler(unsigned int)+0x54>
c000e5a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e5ad:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e5b1:	74 41                	je     c000e5f4 <timerHandler(unsigned int)+0x12c>
c000e5b3:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e5ba:	74 38                	je     c000e5f4 <timerHandler(unsigned int)+0x12c>
c000e5bc:	fa                   	cli    
c000e5bd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e5c3:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e5c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5ce:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e5d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e5d7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e5da:	72 08                	jb     c000e5e4 <timerHandler(unsigned int)+0x11c>
c000e5dc:	e8 7f 7b 00 00       	call   c0016160 <schedule()>
c000e5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5e9:	48                   	dec    eax
c000e5ea:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5ef:	75 03                	jne    c000e5f4 <timerHandler(unsigned int)+0x12c>
c000e5f1:	fb                   	sti    
c000e5f2:	66 90                	xchg   ax,ax
c000e5f4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5f9:	48                   	dec    eax
c000e5fa:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5ff:	75 1b                	jne    c000e61c <timerHandler(unsigned int)+0x154>
c000e601:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e608:	74 12                	je     c000e61c <timerHandler(unsigned int)+0x154>
c000e60a:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e614:	e8 47 7b 00 00       	call   c0016160 <schedule()>
c000e619:	8d 76 00             	lea    esi,[esi+0x0]
c000e61c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e621:	48                   	dec    eax
c000e622:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e627:	75 03                	jne    c000e62c <timerHandler(unsigned int)+0x164>
c000e629:	fb                   	sti    
c000e62a:	66 90                	xchg   ax,ax
c000e62c:	58                   	pop    eax
c000e62d:	5b                   	pop    ebx
c000e62e:	5e                   	pop    esi
c000e62f:	c3                   	ret    

c000e630 <VCache::VCache(PhysicalDisk*)>:
c000e630:	53                   	push   ebx
c000e631:	83 ec 18             	sub    esp,0x18
c000e634:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63d:	89 10                	mov    DWORD PTR [eax],edx
c000e63f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e643:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e659:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e660:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e66b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e672:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e688:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e690:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e697:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e69e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6aa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e6ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6b2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ba:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6c1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e6c9:	83 ec 0c             	sub    esp,0xc
c000e6cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6d0:	e8 e1 93 ff ff       	call   c0007ab6 <malloc>
c000e6d5:	83 c4 10             	add    esp,0x10
c000e6d8:	89 c3                	mov    ebx,eax
c000e6da:	83 ec 0c             	sub    esp,0xc
c000e6dd:	53                   	push   ebx
c000e6de:	e8 19 78 00 00       	call   c0015efc <Mutex::Mutex()>
c000e6e3:	83 c4 10             	add    esp,0x10
c000e6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e6ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e707:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e70d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e711:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e718:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e71e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e724:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e728:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e72b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e732:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e736:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e73a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e740:	05 00 02 00 00       	add    eax,0x200
c000e745:	c1 e0 03             	shl    eax,0x3
c000e748:	83 ec 0c             	sub    esp,0xc
c000e74b:	50                   	push   eax
c000e74c:	e8 65 93 ff ff       	call   c0007ab6 <malloc>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	89 c2                	mov    edx,eax
c000e756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e75d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e761:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e770:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e774:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e77a:	89 d0                	mov    eax,edx
c000e77c:	c1 e0 02             	shl    eax,0x2
c000e77f:	01 d0                	add    eax,edx
c000e781:	c1 e0 04             	shl    eax,0x4
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	50                   	push   eax
c000e788:	e8 29 93 ff ff       	call   c0007ab6 <malloc>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	89 c2                	mov    edx,eax
c000e792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e796:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e799:	90                   	nop
c000e79a:	83 c4 18             	add    esp,0x18
c000e79d:	5b                   	pop    ebx
c000e79e:	c3                   	ret    
c000e79f:	90                   	nop

c000e7a0 <VCache::invalidateReadBuffer()>:
c000e7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e7aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <VCache::writeWriteBuffer()>:
c000e7b0:	53                   	push   ebx
c000e7b1:	83 ec 08             	sub    esp,0x8
c000e7b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e7b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7bc:	74 1e                	je     c000e7dc <VCache::writeWriteBuffer()+0x2c>
c000e7be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7c1:	83 ec 0c             	sub    esp,0xc
c000e7c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e7c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e7cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e7cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e7d2:	50                   	push   eax
c000e7d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e7d6:	83 c4 20             	add    esp,0x20
c000e7d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e7dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e7e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e7ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e7ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7f5:	83 c4 08             	add    esp,0x8
c000e7f8:	5b                   	pop    ebx
c000e7f9:	c3                   	ret    
c000e7fa:	66 90                	xchg   ax,ax

c000e7fc <VCache::~VCache()>:
c000e7fc:	83 ec 0c             	sub    esp,0xc
c000e7ff:	ba e0 1e 02 c0       	mov    edx,0xc0021ee0
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	89 10                	mov    DWORD PTR [eax],edx
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e811:	0f b6 c0             	movzx  eax,al
c000e814:	85 c0                	test   eax,eax
c000e816:	74 10                	je     c000e828 <VCache::~VCache()+0x2c>
c000e818:	83 ec 0c             	sub    esp,0xc
c000e81b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81f:	e8 8c ff ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c000e824:	83 c4 10             	add    esp,0x10
c000e827:	90                   	nop
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e82f:	83 ec 0c             	sub    esp,0xc
c000e832:	50                   	push   eax
c000e833:	e8 8e 92 ff ff       	call   c0007ac6 <free>
c000e838:	83 c4 10             	add    esp,0x10
c000e83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e842:	83 ec 0c             	sub    esp,0xc
c000e845:	50                   	push   eax
c000e846:	e8 7b 92 ff ff       	call   c0007ac6 <free>
c000e84b:	83 c4 10             	add    esp,0x10
c000e84e:	90                   	nop
c000e84f:	83 c4 0c             	add    esp,0xc
c000e852:	c3                   	ret    
c000e853:	90                   	nop

c000e854 <VCache::~VCache()>:
c000e854:	83 ec 0c             	sub    esp,0xc
c000e857:	83 ec 0c             	sub    esp,0xc
c000e85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e85e:	e8 99 ff ff ff       	call   c000e7fc <VCache::~VCache()>
c000e863:	83 c4 10             	add    esp,0x10
c000e866:	83 ec 08             	sub    esp,0x8
c000e869:	6a 44                	push   0x44
c000e86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86f:	e8 a4 bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e874:	83 c4 10             	add    esp,0x10
c000e877:	83 c4 0c             	add    esp,0xc
c000e87a:	c3                   	ret    
c000e87b:	90                   	nop

c000e87c <VCache::write(unsigned long long, int, void*)>:
c000e87c:	55                   	push   ebp
c000e87d:	57                   	push   edi
c000e87e:	56                   	push   esi
c000e87f:	53                   	push   ebx
c000e880:	83 ec 1c             	sub    esp,0x1c
c000e883:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e88b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e88f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e893:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e897:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e89b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e89f:	74 07                	je     c000e8a8 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e8a1:	53                   	push   ebx
c000e8a2:	e8 f9 fe ff ff       	call   c000e7a0 <VCache::invalidateReadBuffer()>
c000e8a7:	58                   	pop    eax
c000e8a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e8ac:	74 62                	je     c000e910 <VCache::write(unsigned long long, int, void*)+0x94>
c000e8ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e8b5:	99                   	cdq    
c000e8b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8ba:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e8bd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e8c0:	31 c1                	xor    ecx,eax
c000e8c2:	89 d0                	mov    eax,edx
c000e8c4:	89 ca                	mov    edx,ecx
c000e8c6:	31 e8                	xor    eax,ebp
c000e8c8:	09 c2                	or     edx,eax
c000e8ca:	75 38                	jne    c000e904 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8cc:	83 ff 01             	cmp    edi,0x1
c000e8cf:	75 33                	jne    c000e904 <VCache::write(unsigned long long, int, void*)+0x88>
c000e8d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e8de:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8e1:	0f af c8             	imul   ecx,eax
c000e8e4:	01 cf                	add    edi,ecx
c000e8e6:	89 c1                	mov    ecx,eax
c000e8e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e8ed:	40                   	inc    eax
c000e8ee:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8f1:	83 f8 50             	cmp    eax,0x50
c000e8f4:	75 6a                	jne    c000e960 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8f6:	83 ec 0c             	sub    esp,0xc
c000e8f9:	53                   	push   ebx
c000e8fa:	e8 b1 fe ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c000e8ff:	83 c4 10             	add    esp,0x10
c000e902:	eb 5c                	jmp    c000e960 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e904:	83 ec 0c             	sub    esp,0xc
c000e907:	53                   	push   ebx
c000e908:	e8 a3 fe ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c000e90d:	83 c4 10             	add    esp,0x10
c000e910:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e913:	83 ff 4f             	cmp    edi,0x4f
c000e916:	7f 20                	jg     c000e938 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e918:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e91b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e91f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e922:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e925:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e929:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e92c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e932:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e934:	eb 2a                	jmp    c000e960 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e936:	66 90                	xchg   ax,ax
c000e938:	8b 10                	mov    edx,DWORD PTR [eax]
c000e93a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e93e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e942:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e946:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e94a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e94e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e952:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e955:	83 c4 1c             	add    esp,0x1c
c000e958:	5b                   	pop    ebx
c000e959:	5e                   	pop    esi
c000e95a:	5f                   	pop    edi
c000e95b:	5d                   	pop    ebp
c000e95c:	ff e0                	jmp    eax
c000e95e:	66 90                	xchg   ax,ax
c000e960:	83 c4 1c             	add    esp,0x1c
c000e963:	31 c0                	xor    eax,eax
c000e965:	5b                   	pop    ebx
c000e966:	5e                   	pop    esi
c000e967:	5f                   	pop    edi
c000e968:	5d                   	pop    ebp
c000e969:	c3                   	ret    

c000e96a <VCache::read(unsigned long long, int, void*)>:
c000e96a:	55                   	push   ebp
c000e96b:	57                   	push   edi
c000e96c:	56                   	push   esi
c000e96d:	53                   	push   ebx
c000e96e:	83 ec 1c             	sub    esp,0x1c
c000e971:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e975:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e979:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e97d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e981:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e989:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e98d:	74 0d                	je     c000e99c <VCache::read(unsigned long long, int, void*)+0x32>
c000e98f:	83 ec 0c             	sub    esp,0xc
c000e992:	57                   	push   edi
c000e993:	e8 18 fe ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c000e998:	83 c4 10             	add    esp,0x10
c000e99b:	90                   	nop
c000e99c:	83 fd 01             	cmp    ebp,0x1
c000e99f:	0f 85 93 00 00 00    	jne    c000ea38 <VCache::read(unsigned long long, int, void*)+0xce>
c000e9a5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e9ab:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e9b2:	0f 85 80 00 00 00    	jne    c000ea38 <VCache::read(unsigned long long, int, void*)+0xce>
c000e9b8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e9bb:	89 e9                	mov    ecx,ebp
c000e9bd:	f7 d9                	neg    ecx
c000e9bf:	89 c8                	mov    eax,ecx
c000e9c1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e9c5:	c1 f8 1f             	sar    eax,0x1f
c000e9c8:	21 d9                	and    ecx,ebx
c000e9ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ce:	89 c8                	mov    eax,ecx
c000e9d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9d4:	21 f1                	and    ecx,esi
c000e9d6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e9da:	89 ca                	mov    edx,ecx
c000e9dc:	74 2e                	je     c000ea0c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9de:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e9e1:	75 29                	jne    c000ea0c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9e3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e9e6:	75 24                	jne    c000ea0c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9e8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9eb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9f1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9f4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9f7:	21 f3                	and    ebx,esi
c000e9f9:	0f af d9             	imul   ebx,ecx
c000e9fc:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9ff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ea03:	89 de                	mov    esi,ebx
c000ea05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ea07:	31 c0                	xor    eax,eax
c000ea09:	eb 61                	jmp    c000ea6c <VCache::read(unsigned long long, int, void*)+0x102>
c000ea0b:	90                   	nop
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000ea13:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ea17:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000ea1a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000ea1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea1f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000ea22:	55                   	push   ebp
c000ea23:	52                   	push   edx
c000ea24:	50                   	push   eax
c000ea25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea29:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ea2c:	83 c4 20             	add    esp,0x20
c000ea2f:	85 c0                	test   eax,eax
c000ea31:	75 39                	jne    c000ea6c <VCache::read(unsigned long long, int, void*)+0x102>
c000ea33:	eb b3                	jmp    c000e9e8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ea35:	8d 76 00             	lea    esi,[esi+0x0]
c000ea38:	83 ec 0c             	sub    esp,0xc
c000ea3b:	57                   	push   edi
c000ea3c:	e8 5f fd ff ff       	call   c000e7a0 <VCache::invalidateReadBuffer()>
c000ea41:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ea44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea48:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea4a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea4e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea52:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea56:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea5a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea5e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea61:	83 c4 2c             	add    esp,0x2c
c000ea64:	5b                   	pop    ebx
c000ea65:	5e                   	pop    esi
c000ea66:	5f                   	pop    edi
c000ea67:	5d                   	pop    ebp
c000ea68:	ff e0                	jmp    eax
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	83 c4 1c             	add    esp,0x1c
c000ea6f:	5b                   	pop    ebx
c000ea70:	5e                   	pop    esi
c000ea71:	5f                   	pop    edi
c000ea72:	5d                   	pop    ebp
c000ea73:	c3                   	ret    

c000ea74 <Video::putrect(int, int, int, int, unsigned int)>:
c000ea74:	55                   	push   ebp
c000ea75:	57                   	push   edi
c000ea76:	56                   	push   esi
c000ea77:	53                   	push   ebx
c000ea78:	83 ec 1c             	sub    esp,0x1c
c000ea7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea87:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea93:	01 df                	add    edi,ebx
c000ea95:	39 fb                	cmp    ebx,edi
c000ea97:	7d 1f                	jge    c000eab8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea99:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea9d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000eaa1:	7d 12                	jge    c000eab5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000eaa3:	8b 16                	mov    edx,DWORD PTR [esi]
c000eaa5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000eaa9:	53                   	push   ebx
c000eaaa:	55                   	push   ebp
c000eaab:	45                   	inc    ebp
c000eaac:	56                   	push   esi
c000eaad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000eab0:	83 c4 10             	add    esp,0x10
c000eab3:	eb e8                	jmp    c000ea9d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000eab5:	43                   	inc    ebx
c000eab6:	eb dd                	jmp    c000ea95 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000eab8:	83 c4 1c             	add    esp,0x1c
c000eabb:	5b                   	pop    ebx
c000eabc:	5e                   	pop    esi
c000eabd:	5f                   	pop    edi
c000eabe:	5d                   	pop    ebp
c000eabf:	c3                   	ret    

c000eac0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000eac0:	55                   	push   ebp
c000eac1:	57                   	push   edi
c000eac2:	31 ff                	xor    edi,edi
c000eac4:	56                   	push   esi
c000eac5:	53                   	push   ebx
c000eac6:	83 ec 1c             	sub    esp,0x1c
c000eac9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000eacd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ead1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ead8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000eadd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eae1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eae5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eae9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eaec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaf0:	01 f9                	add    ecx,edi
c000eaf2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaf6:	7d 2f                	jge    c000eb27 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eaf8:	31 f6                	xor    esi,esi
c000eafa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eafe:	01 f2                	add    edx,esi
c000eb00:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eb04:	7d 1a                	jge    c000eb20 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eb06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eb09:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eb0c:	46                   	inc    esi
c000eb0d:	51                   	push   ecx
c000eb0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eb12:	52                   	push   edx
c000eb13:	55                   	push   ebp
c000eb14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb17:	83 c4 10             	add    esp,0x10
c000eb1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb1e:	eb da                	jmp    c000eafa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000eb20:	47                   	inc    edi
c000eb21:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eb25:	eb c5                	jmp    c000eaec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eb27:	83 c4 1c             	add    esp,0x1c
c000eb2a:	5b                   	pop    ebx
c000eb2b:	5e                   	pop    esi
c000eb2c:	5f                   	pop    edi
c000eb2d:	5d                   	pop    ebp
c000eb2e:	c3                   	ret    
c000eb2f:	90                   	nop

c000eb30 <Video::blit(unsigned int*, int, int, int, int)>:
c000eb30:	55                   	push   ebp
c000eb31:	57                   	push   edi
c000eb32:	56                   	push   esi
c000eb33:	53                   	push   ebx
c000eb34:	83 ec 1c             	sub    esp,0x1c
c000eb37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb3f:	85 c0                	test   eax,eax
c000eb41:	79 02                	jns    c000eb45 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eb43:	31 c0                	xor    eax,eax
c000eb45:	c1 e0 02             	shl    eax,0x2
c000eb48:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eb4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb54:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eb58:	39 d8                	cmp    eax,ebx
c000eb5a:	7e 49                	jle    c000eba5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb5c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb62:	7c 41                	jl     c000eba5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eb64:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb70:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eb74:	39 f9                	cmp    ecx,edi
c000eb76:	7e 22                	jle    c000eb9a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eb78:	83 c5 04             	add    ebp,0x4
c000eb7b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb81:	7c 14                	jl     c000eb97 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eb83:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb85:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eb88:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb8c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb90:	56                   	push   esi
c000eb91:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb94:	83 c4 10             	add    esp,0x10
c000eb97:	47                   	inc    edi
c000eb98:	eb d2                	jmp    c000eb6c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb9e:	43                   	inc    ebx
c000eb9f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eba3:	eb ab                	jmp    c000eb50 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eba5:	83 c4 1c             	add    esp,0x1c
c000eba8:	5b                   	pop    ebx
c000eba9:	5e                   	pop    esi
c000ebaa:	5f                   	pop    edi
c000ebab:	5d                   	pop    ebp
c000ebac:	c3                   	ret    
c000ebad:	90                   	nop

c000ebae <Video::clearScreen(unsigned int)>:
c000ebae:	57                   	push   edi
c000ebaf:	56                   	push   esi
c000ebb0:	53                   	push   ebx
c000ebb1:	31 db                	xor    ebx,ebx
c000ebb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ebb7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ebbd:	7e 1f                	jle    c000ebde <Video::clearScreen(unsigned int)+0x30>
c000ebbf:	31 ff                	xor    edi,edi
c000ebc1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ebc7:	7e 12                	jle    c000ebdb <Video::clearScreen(unsigned int)+0x2d>
c000ebc9:	8b 06                	mov    eax,DWORD PTR [esi]
c000ebcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebcf:	53                   	push   ebx
c000ebd0:	57                   	push   edi
c000ebd1:	47                   	inc    edi
c000ebd2:	56                   	push   esi
c000ebd3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ebd6:	83 c4 10             	add    esp,0x10
c000ebd9:	eb e6                	jmp    c000ebc1 <Video::clearScreen(unsigned int)+0x13>
c000ebdb:	43                   	inc    ebx
c000ebdc:	eb d9                	jmp    c000ebb7 <Video::clearScreen(unsigned int)+0x9>
c000ebde:	5b                   	pop    ebx
c000ebdf:	5e                   	pop    esi
c000ebe0:	5f                   	pop    edi
c000ebe1:	c3                   	ret    

c000ebe2 <Video::putpixel(int, int, unsigned int)>:
c000ebe2:	c7 44 24 04 e8 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ee8
c000ebea:	e9 d0 2a 00 00       	jmp    c00116bf <KePanic(char const*)>
c000ebef:	90                   	nop

c000ebf0 <Video::readPixelApprox(int, int)>:
c000ebf0:	83 ec 18             	sub    esp,0x18
c000ebf3:	68 09 1f 02 c0       	push   0xc0021f09
c000ebf8:	e8 c2 2a 00 00       	call   c00116bf <KePanic(char const*)>
c000ebfd:	31 c0                	xor    eax,eax
c000ebff:	83 c4 1c             	add    esp,0x1c
c000ec02:	c3                   	ret    
c000ec03:	90                   	nop

c000ec04 <Video::Video(char const*)>:
c000ec04:	83 ec 0c             	sub    esp,0xc
c000ec07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec0b:	83 ec 08             	sub    esp,0x8
c000ec0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec12:	50                   	push   eax
c000ec13:	e8 e6 df ff ff       	call   c000cbfe <Device::Device(char const*)>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ec20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec24:	89 10                	mov    DWORD PTR [eax],edx
c000ec26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec2a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ec34:	90                   	nop
c000ec35:	83 c4 0c             	add    esp,0xc
c000ec38:	c3                   	ret    
c000ec39:	90                   	nop

c000ec3a <Video::~Video()>:
c000ec3a:	83 ec 0c             	sub    esp,0xc
c000ec3d:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c000ec42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec46:	89 10                	mov    DWORD PTR [eax],edx
c000ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	50                   	push   eax
c000ec50:	e8 13 dd ff ff       	call   c000c968 <Device::~Device()>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	90                   	nop
c000ec59:	83 c4 0c             	add    esp,0xc
c000ec5c:	c3                   	ret    
c000ec5d:	90                   	nop

c000ec5e <Video::~Video()>:
c000ec5e:	83 ec 0c             	sub    esp,0xc
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec68:	e8 cd ff ff ff       	call   c000ec3a <Video::~Video()>
c000ec6d:	83 c4 10             	add    esp,0x10
c000ec70:	83 ec 08             	sub    esp,0x8
c000ec73:	68 64 01 00 00       	push   0x164
c000ec78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec7c:	e8 97 bb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	83 c4 0c             	add    esp,0xc
c000ec87:	c3                   	ret    

c000ec88 <Video::isMonochrome()>:
c000ec88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec8c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec92:	c3                   	ret    
c000ec93:	90                   	nop

c000ec94 <Video::getWidth()>:
c000ec94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec9e:	c3                   	ret    
c000ec9f:	90                   	nop

c000eca0 <Video::getHeight()>:
c000eca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eca4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ecaa:	c3                   	ret    
c000ecab:	90                   	nop

c000ecac <Video::drawCursor(int, int, unsigned int*, int)>:
c000ecac:	55                   	push   ebp
c000ecad:	57                   	push   edi
c000ecae:	56                   	push   esi
c000ecaf:	53                   	push   ebx
c000ecb0:	83 ec 2c             	sub    esp,0x2c
c000ecb3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ecb7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ecbb:	83 f8 01             	cmp    eax,0x1
c000ecbe:	19 c9                	sbb    ecx,ecx
c000ecc0:	31 db                	xor    ebx,ebx
c000ecc2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ecc6:	89 cd                	mov    ebp,ecx
c000ecc8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ecd0:	f7 d5                	not    ebp
c000ecd2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ecd8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecdc:	01 d8                	add    eax,ebx
c000ecde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ece2:	56                   	push   esi
c000ece3:	e8 b8 ff ff ff       	call   c000eca0 <Video::getHeight()>
c000ece8:	59                   	pop    ecx
c000ece9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000eced:	7e 70                	jle    c000ed5f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecf3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ecf7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecfe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ed02:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ed09:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ed0d:	89 f8                	mov    eax,edi
c000ed0f:	83 c0 20             	add    eax,0x20
c000ed12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed16:	56                   	push   esi
c000ed17:	e8 78 ff ff ff       	call   c000ec94 <Video::getWidth()>
c000ed1c:	5a                   	pop    edx
c000ed1d:	39 c7                	cmp    edi,eax
c000ed1f:	7d 34                	jge    c000ed55 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ed21:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ed26:	74 05                	je     c000ed2d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ed28:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed2a:	55                   	push   ebp
c000ed2b:	eb 0d                	jmp    c000ed3a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ed2d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ed32:	74 12                	je     c000ed46 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ed34:	8b 06                	mov    eax,DWORD PTR [esi]
c000ed36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed3e:	57                   	push   edi
c000ed3f:	56                   	push   esi
c000ed40:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed43:	83 c4 10             	add    esp,0x10
c000ed46:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed4a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed4e:	47                   	inc    edi
c000ed4f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ed53:	75 c1                	jne    c000ed16 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed55:	43                   	inc    ebx
c000ed56:	83 fb 20             	cmp    ebx,0x20
c000ed59:	0f 85 79 ff ff ff    	jne    c000ecd8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed5f:	83 c4 2c             	add    esp,0x2c
c000ed62:	5b                   	pop    ebx
c000ed63:	5e                   	pop    esi
c000ed64:	5f                   	pop    edi
c000ed65:	5d                   	pop    ebp
c000ed66:	c3                   	ret    
c000ed67:	90                   	nop

c000ed68 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 28             	sub    esp,0x28
c000ed6f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed73:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed77:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ed7b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ed7f:	c1 e6 08             	shl    esi,0x8
c000ed82:	01 c6                	add    esi,eax
c000ed84:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ed88:	c1 e0 08             	shl    eax,0x8
c000ed8b:	01 d0                	add    eax,edx
c000ed8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed95:	0f af c6             	imul   eax,esi
c000ed98:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed9f:	50                   	push   eax
c000eda0:	e8 11 8d ff ff       	call   c0007ab6 <malloc>
c000eda5:	83 c4 10             	add    esp,0x10
c000eda8:	89 c7                	mov    edi,eax
c000edaa:	85 c0                	test   eax,eax
c000edac:	75 10                	jne    c000edbe <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000edae:	83 ec 0c             	sub    esp,0xc
c000edb1:	68 34 1f 02 c0       	push   0xc0021f34
c000edb6:	e8 04 29 00 00       	call   c00116bf <KePanic(char const*)>
c000edbb:	83 c4 10             	add    esp,0x10
c000edbe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000edc2:	ba 12 00 00 00       	mov    edx,0x12
c000edc7:	85 c0                	test   eax,eax
c000edc9:	74 11                	je     c000eddc <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000edcb:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000edcf:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000edd3:	c1 fa 03             	sar    edx,0x3
c000edd6:	0f af d1             	imul   edx,ecx
c000edd9:	83 c2 12             	add    edx,0x12
c000eddc:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ede0:	74 04                	je     c000ede6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ede2:	85 f6                	test   esi,esi
c000ede4:	75 12                	jne    c000edf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ede6:	83 ec 0c             	sub    esp,0xc
c000ede9:	68 44 1f 02 c0       	push   0xc0021f44
c000edee:	e8 52 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000edf3:	e9 b8 00 00 00       	jmp    c000eeb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edf8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edfc:	83 f9 02             	cmp    ecx,0x2
c000edff:	0f 85 96 00 00 00    	jne    c000ee9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ee05:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ee0a:	75 0e                	jne    c000ee1a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee0c:	85 c0                	test   eax,eax
c000ee0e:	75 0a                	jne    c000ee1a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ee10:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ee13:	83 e8 18             	sub    eax,0x18
c000ee16:	a8 f7                	test   al,0xf7
c000ee18:	74 0a                	je     c000ee24 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ee1a:	83 ec 0c             	sub    esp,0xc
c000ee1d:	68 59 1f 02 c0       	push   0xc0021f59
c000ee22:	eb 7f                	jmp    c000eea3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ee24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ee2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ee34:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ee38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee40:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee44:	75 0c                	jne    c000ee52 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee46:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ee4b:	c1 e0 18             	shl    eax,0x18
c000ee4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee52:	45                   	inc    ebp
c000ee53:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee58:	c1 e1 10             	shl    ecx,0x10
c000ee5b:	89 c8                	mov    eax,ecx
c000ee5d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee62:	c1 e1 08             	shl    ecx,0x8
c000ee65:	09 c1                	or     ecx,eax
c000ee67:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee6b:	09 c1                	or     ecx,eax
c000ee6d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee71:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ee75:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee79:	c1 f8 03             	sar    eax,0x3
c000ee7c:	01 c2                	add    edx,eax
c000ee7e:	89 e8                	mov    eax,ebp
c000ee80:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee84:	39 c6                	cmp    esi,eax
c000ee86:	7f b0                	jg     c000ee38 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee88:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee90:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee93:	7e 22                	jle    c000eeb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee95:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee99:	eb 99                	jmp    c000ee34 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee9b:	50                   	push   eax
c000ee9c:	50                   	push   eax
c000ee9d:	51                   	push   ecx
c000ee9e:	68 67 1f 02 c0       	push   0xc0021f67
c000eea3:	e8 9d ba ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eea8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eeab:	e8 16 8c ff ff       	call   c0007ac6 <free>
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	31 ff                	xor    edi,edi
c000eeb5:	eb 0f                	jmp    c000eec6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eeb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eebb:	89 30                	mov    DWORD PTR [eax],esi
c000eebd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eec4:	89 30                	mov    DWORD PTR [eax],esi
c000eec6:	83 c4 1c             	add    esp,0x1c
c000eec9:	89 f8                	mov    eax,edi
c000eecb:	5b                   	pop    ebx
c000eecc:	5e                   	pop    esi
c000eecd:	5f                   	pop    edi
c000eece:	5d                   	pop    ebp
c000eecf:	c3                   	ret    

c000eed0 <Video::putTGA(int, int, unsigned char*, int)>:
c000eed0:	55                   	push   ebp
c000eed1:	57                   	push   edi
c000eed2:	56                   	push   esi
c000eed3:	53                   	push   ebx
c000eed4:	83 ec 28             	sub    esp,0x28
c000eed7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eedb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eedf:	50                   	push   eax
c000eee0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eee4:	50                   	push   eax
c000eee5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eee9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeed:	56                   	push   esi
c000eeee:	e8 75 fe ff ff       	call   c000ed68 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eef3:	83 c4 20             	add    esp,0x20
c000eef6:	85 c0                	test   eax,eax
c000eef8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eefc:	74 35                	je     c000ef33 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eefe:	89 c7                	mov    edi,eax
c000ef00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef04:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ef08:	39 d8                	cmp    eax,ebx
c000ef0a:	7e 27                	jle    c000ef33 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ef0c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ef10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ef14:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ef18:	39 e8                	cmp    eax,ebp
c000ef1a:	7e 14                	jle    c000ef30 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ef1c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef1e:	83 c7 04             	add    edi,0x4
c000ef21:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ef24:	53                   	push   ebx
c000ef25:	55                   	push   ebp
c000ef26:	45                   	inc    ebp
c000ef27:	56                   	push   esi
c000ef28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ef2b:	83 c4 10             	add    esp,0x10
c000ef2e:	eb e0                	jmp    c000ef10 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ef30:	43                   	inc    ebx
c000ef31:	eb cd                	jmp    c000ef00 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ef33:	83 c4 1c             	add    esp,0x1c
c000ef36:	5b                   	pop    ebx
c000ef37:	5e                   	pop    esi
c000ef38:	5f                   	pop    edi
c000ef39:	5d                   	pop    ebp
c000ef3a:	c3                   	ret    
c000ef3b:	90                   	nop

c000ef3c <ACPI::close(int, int, void*)>:
c000ef3c:	83 ec 1c             	sub    esp,0x1c
c000ef3f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef47:	74 0b                	je     c000ef54 <ACPI::close(int, int, void*)+0x18>
c000ef49:	b8 00 00 00 00       	mov    eax,0x0
c000ef4e:	e9 99 00 00 00       	jmp    c000efec <ACPI::close(int, int, void*)+0xb0>
c000ef53:	90                   	nop
c000ef54:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef59:	75 29                	jne    c000ef84 <ACPI::close(int, int, void*)+0x48>
c000ef5b:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef60:	85 c0                	test   eax,eax
c000ef62:	74 08                	je     c000ef6c <ACPI::close(int, int, void*)+0x30>
c000ef64:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef69:	ff d0                	call   eax
c000ef6b:	90                   	nop
c000ef6c:	83 ec 0c             	sub    esp,0xc
c000ef6f:	68 c8 1f 02 c0       	push   0xc0021fc8
c000ef74:	e8 46 27 00 00       	call   c00116bf <KePanic(char const*)>
c000ef79:	83 c4 10             	add    esp,0x10
c000ef7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef81:	eb 69                	jmp    c000efec <ACPI::close(int, int, void*)+0xb0>
c000ef83:	90                   	nop
c000ef84:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ef89:	75 59                	jne    c000efe4 <ACPI::close(int, int, void*)+0xa8>
c000ef8b:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef90:	85 c0                	test   eax,eax
c000ef92:	74 08                	je     c000ef9c <ACPI::close(int, int, void*)+0x60>
c000ef94:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef99:	ff d0                	call   eax
c000ef9b:	90                   	nop
c000ef9c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efa1:	8d 76 00             	lea    esi,[esi+0x0]
c000efa4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efa9:	83 e0 02             	and    eax,0x2
c000efac:	74 1e                	je     c000efcc <ACPI::close(int, int, void*)+0x90>
c000efae:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000efb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efb9:	89 c2                	mov    edx,eax
c000efbb:	ec                   	in     al,dx
c000efbc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000efc0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000efc4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000efc8:	eb da                	jmp    c000efa4 <ACPI::close(int, int, void*)+0x68>
c000efca:	66 90                	xchg   ax,ax
c000efcc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000efd3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000efd8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000efdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efe0:	ee                   	out    dx,al
c000efe1:	8d 76 00             	lea    esi,[esi+0x0]
c000efe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efe9:	8d 76 00             	lea    esi,[esi+0x0]
c000efec:	83 c4 1c             	add    esp,0x1c
c000efef:	c3                   	ret    

c000eff0 <findRSDP()>:
c000eff0:	83 ec 1c             	sub    esp,0x1c
c000eff3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eff8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000effe:	83 e0 04             	and    eax,0x4
c000f001:	0f b6 c0             	movzx  eax,al
c000f004:	85 c0                	test   eax,eax
c000f006:	75 08                	jne    c000f010 <findRSDP()+0x20>
c000f008:	b8 00 00 00 00       	mov    eax,0x0
c000f00d:	eb 75                	jmp    c000f084 <findRSDP()+0x94>
c000f00f:	90                   	nop
c000f010:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f015:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f01a:	7f 1c                	jg     c000f038 <findRSDP()+0x48>
c000f01c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f021:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f027:	83 e2 fb             	and    edx,0xfffffffb
c000f02a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f030:	b8 00 00 00 00       	mov    eax,0x0
c000f035:	eb 4d                	jmp    c000f084 <findRSDP()+0x94>
c000f037:	90                   	nop
c000f038:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f040:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f048:	77 32                	ja     c000f07c <findRSDP()+0x8c>
c000f04a:	83 ec 04             	sub    esp,0x4
c000f04d:	6a 08                	push   0x8
c000f04f:	68 63 20 02 c0       	push   0xc0022063
c000f054:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f058:	e8 23 13 ff ff       	call   c0000380 <memcmp>
c000f05d:	83 c4 10             	add    esp,0x10
c000f060:	85 c0                	test   eax,eax
c000f062:	0f 94 c0             	sete   al
c000f065:	0f b6 c0             	movzx  eax,al
c000f068:	85 c0                	test   eax,eax
c000f06a:	74 08                	je     c000f074 <findRSDP()+0x84>
c000f06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f070:	eb 12                	jmp    c000f084 <findRSDP()+0x94>
c000f072:	66 90                	xchg   ax,ax
c000f074:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f079:	eb c5                	jmp    c000f040 <findRSDP()+0x50>
c000f07b:	90                   	nop
c000f07c:	b8 00 00 00 00       	mov    eax,0x0
c000f081:	8d 76 00             	lea    esi,[esi+0x0]
c000f084:	83 c4 1c             	add    esp,0x1c
c000f087:	c3                   	ret    

c000f088 <loadACPITables(unsigned char*)>:
c000f088:	57                   	push   edi
c000f089:	56                   	push   esi
c000f08a:	53                   	push   ebx
c000f08b:	83 ec 60             	sub    esp,0x60
c000f08e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f093:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f099:	83 e0 04             	and    eax,0x4
c000f09c:	0f b6 c0             	movzx  eax,al
c000f09f:	85 c0                	test   eax,eax
c000f0a1:	0f 84 41 02 00 00    	je     c000f2e8 <loadACPITables(unsigned char*)+0x260>
c000f0a7:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f0ac:	0f b6 c0             	movzx  eax,al
c000f0af:	85 c0                	test   eax,eax
c000f0b1:	74 79                	je     c000f12c <loadACPITables(unsigned char*)+0xa4>
c000f0b3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0b7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f0bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f0bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0c2:	83 e8 24             	sub    eax,0x24
c000f0c5:	c1 e8 03             	shr    eax,0x3
c000f0c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0cc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f0d4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0d8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f0dc:	0f 8d ba 00 00 00    	jge    c000f19c <loadACPITables(unsigned char*)+0x114>
c000f0e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0e6:	83 c0 24             	add    eax,0x24
c000f0e9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0f1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0f5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f0f9:	c1 e0 03             	shl    eax,0x3
c000f0fc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f100:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f104:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f107:	8b 00                	mov    eax,DWORD PTR [eax]
c000f109:	89 c1                	mov    ecx,eax
c000f10b:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f110:	8d 50 01             	lea    edx,[eax+0x1]
c000f113:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f119:	89 ca                	mov    edx,ecx
c000f11b:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f122:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f127:	eb ab                	jmp    c000f0d4 <loadACPITables(unsigned char*)+0x4c>
c000f129:	8d 76 00             	lea    esi,[esi+0x0]
c000f12c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f130:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f134:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f13b:	83 e8 24             	sub    eax,0x24
c000f13e:	c1 e8 02             	shr    eax,0x2
c000f141:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f145:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f14d:	8d 76 00             	lea    esi,[esi+0x0]
c000f150:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f154:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f158:	7d 42                	jge    c000f19c <loadACPITables(unsigned char*)+0x114>
c000f15a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f15e:	83 c0 24             	add    eax,0x24
c000f161:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f165:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f169:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f16d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f171:	c1 e0 02             	shl    eax,0x2
c000f174:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f178:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f17c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f17e:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f183:	8d 50 01             	lea    edx,[eax+0x1]
c000f186:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f18c:	89 ca                	mov    edx,ecx
c000f18e:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f195:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f19a:	eb b4                	jmp    c000f150 <loadACPITables(unsigned char*)+0xc8>
c000f19c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1a4:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1a9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f1ad:	0f 8d 39 01 00 00    	jge    c000f2ec <loadACPITables(unsigned char*)+0x264>
c000f1b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1b7:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f1be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f1ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1ce:	25 ff 0f 00 00       	and    eax,0xfff
c000f1d3:	89 c6                	mov    esi,eax
c000f1d5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1db:	83 ec 0c             	sub    esp,0xc
c000f1de:	6a 01                	push   0x1
c000f1e0:	e8 28 a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1e5:	83 c4 10             	add    esp,0x10
c000f1e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1ec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1f2:	83 ec 0c             	sub    esp,0xc
c000f1f5:	6a 01                	push   0x1
c000f1f7:	6a 01                	push   0x1
c000f1f9:	50                   	push   eax
c000f1fa:	52                   	push   edx
c000f1fb:	53                   	push   ebx
c000f1fc:	e8 19 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f201:	83 c4 20             	add    esp,0x20
c000f204:	09 f0                	or     eax,esi
c000f206:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f20a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f20e:	c1 e0 03             	shl    eax,0x3
c000f211:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f216:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f21a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f21e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f222:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f22a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f22e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f232:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f23a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f23e:	89 c6                	mov    esi,eax
c000f240:	89 d7                	mov    edi,edx
c000f242:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f244:	89 c8                	mov    eax,ecx
c000f246:	89 fa                	mov    edx,edi
c000f248:	89 f3                	mov    ebx,esi
c000f24a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f24e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f25a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f25d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f261:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f265:	05 00 10 00 00       	add    eax,0x1000
c000f26a:	c1 e8 0c             	shr    eax,0xc
c000f26d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f275:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f279:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f27d:	25 ff 0f 00 00       	and    eax,0xfff
c000f282:	89 c6                	mov    esi,eax
c000f284:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f28a:	83 ec 0c             	sub    esp,0xc
c000f28d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f291:	e8 77 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f296:	83 c4 10             	add    esp,0x10
c000f299:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f29d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2a3:	83 ec 0c             	sub    esp,0xc
c000f2a6:	6a 01                	push   0x1
c000f2a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f2ac:	50                   	push   eax
c000f2ad:	52                   	push   edx
c000f2ae:	53                   	push   ebx
c000f2af:	e8 66 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2b4:	83 c4 20             	add    esp,0x20
c000f2b7:	09 f0                	or     eax,esi
c000f2b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f2c1:	83 ec 0c             	sub    esp,0xc
c000f2c4:	50                   	push   eax
c000f2c5:	e8 61 a6 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f2d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2d5:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f2dc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f2e1:	e9 be fe ff ff       	jmp    c000f1a4 <loadACPITables(unsigned char*)+0x11c>
c000f2e6:	66 90                	xchg   ax,ax
c000f2e8:	90                   	nop
c000f2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2ec:	83 c4 60             	add    esp,0x60
c000f2ef:	5b                   	pop    ebx
c000f2f0:	5e                   	pop    esi
c000f2f1:	5f                   	pop    edi
c000f2f2:	c3                   	ret    
c000f2f3:	90                   	nop

c000f2f4 <findRSDT(unsigned char*)>:
c000f2f4:	57                   	push   edi
c000f2f5:	56                   	push   esi
c000f2f6:	53                   	push   ebx
c000f2f7:	83 ec 50             	sub    esp,0x50
c000f2fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f2ff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f305:	83 e0 04             	and    eax,0x4
c000f308:	0f b6 c0             	movzx  eax,al
c000f30b:	85 c0                	test   eax,eax
c000f30d:	75 0d                	jne    c000f31c <findRSDT(unsigned char*)+0x28>
c000f30f:	b8 00 00 00 00       	mov    eax,0x0
c000f314:	e9 2b 01 00 00       	jmp    c000f444 <findRSDT(unsigned char*)+0x150>
c000f319:	8d 76 00             	lea    esi,[esi+0x0]
c000f31c:	89 e0                	mov    eax,esp
c000f31e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f322:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f326:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f32a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f332:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f336:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f33a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f33e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f342:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f346:	89 c6                	mov    esi,eax
c000f348:	89 d7                	mov    edi,edx
c000f34a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f34c:	89 c8                	mov    eax,ecx
c000f34e:	89 fa                	mov    edx,edi
c000f350:	89 f3                	mov    ebx,esi
c000f352:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f356:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f35a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f35e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f362:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f366:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f36e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f376:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f382:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f386:	25 ff 0f 00 00       	and    eax,0xfff
c000f38b:	89 c6                	mov    esi,eax
c000f38d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f393:	83 ec 0c             	sub    esp,0xc
c000f396:	6a 02                	push   0x2
c000f398:	e8 70 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3aa:	83 ec 0c             	sub    esp,0xc
c000f3ad:	6a 01                	push   0x1
c000f3af:	6a 02                	push   0x2
c000f3b1:	50                   	push   eax
c000f3b2:	52                   	push   edx
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 61 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3b9:	83 c4 20             	add    esp,0x20
c000f3bc:	09 f0                	or     eax,esi
c000f3be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f3c6:	25 ff 0f 00 00       	and    eax,0xfff
c000f3cb:	89 c6                	mov    esi,eax
c000f3cd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3d3:	83 ec 0c             	sub    esp,0xc
c000f3d6:	6a 02                	push   0x2
c000f3d8:	e8 30 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f3dd:	83 c4 10             	add    esp,0x10
c000f3e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f3e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3ea:	83 ec 0c             	sub    esp,0xc
c000f3ed:	6a 01                	push   0x1
c000f3ef:	6a 02                	push   0x2
c000f3f1:	50                   	push   eax
c000f3f2:	52                   	push   edx
c000f3f3:	53                   	push   ebx
c000f3f4:	e8 21 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f3f9:	83 c4 20             	add    esp,0x20
c000f3fc:	09 f0                	or     eax,esi
c000f3fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f402:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f407:	85 c0                	test   eax,eax
c000f409:	75 11                	jne    c000f41c <findRSDT(unsigned char*)+0x128>
c000f40b:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f412:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f416:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f41a:	eb 24                	jmp    c000f440 <findRSDT(unsigned char*)+0x14c>
c000f41c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f421:	83 f8 02             	cmp    eax,0x2
c000f424:	75 12                	jne    c000f438 <findRSDT(unsigned char*)+0x144>
c000f426:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f42d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f431:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f435:	eb 09                	jmp    c000f440 <findRSDT(unsigned char*)+0x14c>
c000f437:	90                   	nop
c000f438:	b8 00 00 00 00       	mov    eax,0x0
c000f43d:	eb 05                	jmp    c000f444 <findRSDT(unsigned char*)+0x150>
c000f43f:	90                   	nop
c000f440:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f444:	83 c4 50             	add    esp,0x50
c000f447:	5b                   	pop    ebx
c000f448:	5e                   	pop    esi
c000f449:	5f                   	pop    edi
c000f44a:	c3                   	ret    
c000f44b:	90                   	nop

c000f44c <findDataTable(unsigned char*, char*)>:
c000f44c:	83 ec 1c             	sub    esp,0x1c
c000f44f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f454:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f45a:	83 e0 04             	and    eax,0x4
c000f45d:	0f b6 c0             	movzx  eax,al
c000f460:	85 c0                	test   eax,eax
c000f462:	75 08                	jne    c000f46c <findDataTable(unsigned char*, char*)+0x20>
c000f464:	b8 00 00 00 00       	mov    eax,0x0
c000f469:	eb 5d                	jmp    c000f4c8 <findDataTable(unsigned char*, char*)+0x7c>
c000f46b:	90                   	nop
c000f46c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f474:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f479:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f47d:	7d 41                	jge    c000f4c0 <findDataTable(unsigned char*, char*)+0x74>
c000f47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f483:	c1 e0 03             	shl    eax,0x3
c000f486:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f48b:	83 ec 04             	sub    esp,0x4
c000f48e:	6a 04                	push   0x4
c000f490:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f494:	50                   	push   eax
c000f495:	e8 e6 0e ff ff       	call   c0000380 <memcmp>
c000f49a:	83 c4 10             	add    esp,0x10
c000f49d:	85 c0                	test   eax,eax
c000f49f:	0f 94 c0             	sete   al
c000f4a2:	0f b6 c0             	movzx  eax,al
c000f4a5:	85 c0                	test   eax,eax
c000f4a7:	74 0f                	je     c000f4b8 <findDataTable(unsigned char*, char*)+0x6c>
c000f4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4ad:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f4b4:	eb 12                	jmp    c000f4c8 <findDataTable(unsigned char*, char*)+0x7c>
c000f4b6:	66 90                	xchg   ax,ax
c000f4b8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f4bd:	eb b5                	jmp    c000f474 <findDataTable(unsigned char*, char*)+0x28>
c000f4bf:	90                   	nop
c000f4c0:	b8 00 00 00 00       	mov    eax,0x0
c000f4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4c8:	83 c4 1c             	add    esp,0x1c
c000f4cb:	c3                   	ret    

c000f4cc <scanMADT()>:
c000f4cc:	53                   	push   ebx
c000f4cd:	83 ec 38             	sub    esp,0x38
c000f4d0:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f4d5:	25 00 04 00 00       	and    eax,0x400
c000f4da:	74 14                	je     c000f4f0 <scanMADT()+0x24>
c000f4dc:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4e7:	83 e2 fb             	and    edx,0xfffffffb
c000f4ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4f5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4fb:	83 e0 04             	and    eax,0x4
c000f4fe:	0f b6 c0             	movzx  eax,al
c000f501:	85 c0                	test   eax,eax
c000f503:	0f 84 6b 04 00 00    	je     c000f974 <scanMADT()+0x4a8>
c000f509:	e8 e2 fa ff ff       	call   c000eff0 <findRSDP()>
c000f50e:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f513:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f518:	85 c0                	test   eax,eax
c000f51a:	75 1c                	jne    c000f538 <scanMADT()+0x6c>
c000f51c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f521:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f527:	83 e2 fb             	and    edx,0xfffffffb
c000f52a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f530:	e9 47 04 00 00       	jmp    c000f97c <scanMADT()+0x4b0>
c000f535:	8d 76 00             	lea    esi,[esi+0x0]
c000f538:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f53d:	83 ec 0c             	sub    esp,0xc
c000f540:	50                   	push   eax
c000f541:	e8 ae fd ff ff       	call   c000f2f4 <findRSDT(unsigned char*)>
c000f546:	83 c4 10             	add    esp,0x10
c000f549:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f54e:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f553:	85 c0                	test   eax,eax
c000f555:	75 19                	jne    c000f570 <scanMADT()+0xa4>
c000f557:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f55c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f562:	83 e2 fb             	and    edx,0xfffffffb
c000f565:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f56b:	e9 0c 04 00 00       	jmp    c000f97c <scanMADT()+0x4b0>
c000f570:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f575:	83 ec 0c             	sub    esp,0xc
c000f578:	50                   	push   eax
c000f579:	e8 0a fb ff ff       	call   c000f088 <loadACPITables(unsigned char*)>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f586:	83 ec 08             	sub    esp,0x8
c000f589:	68 6c 20 02 c0       	push   0xc002206c
c000f58e:	50                   	push   eax
c000f58f:	e8 b8 fe ff ff       	call   c000f44c <findDataTable(unsigned char*, char*)>
c000f594:	83 c4 10             	add    esp,0x10
c000f597:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f59b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5a0:	75 1a                	jne    c000f5bc <scanMADT()+0xf0>
c000f5a2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5a7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5ad:	83 e2 fe             	and    edx,0xfffffffe
c000f5b0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5b6:	e9 c1 03 00 00       	jmp    c000f97c <scanMADT()+0x4b0>
c000f5bb:	90                   	nop
c000f5bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f5c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5cb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f5cf:	0f 87 a7 03 00 00    	ja     c000f97c <scanMADT()+0x4b0>
c000f5d5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f5dd:	0f 87 99 03 00 00    	ja     c000f97c <scanMADT()+0x4b0>
c000f5e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f5eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ef:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5fe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f602:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f606:	8d 50 01             	lea    edx,[eax+0x1]
c000f609:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f60d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f611:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f615:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f619:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f61e:	83 f8 02             	cmp    eax,0x2
c000f621:	0f 86 51 03 00 00    	jbe    c000f978 <scanMADT()+0x4ac>
c000f627:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f62c:	85 c0                	test   eax,eax
c000f62e:	75 58                	jne    c000f688 <scanMADT()+0x1bc>
c000f630:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f634:	8d 50 01             	lea    edx,[eax+0x1]
c000f637:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f63b:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f641:	0f b6 d2             	movzx  edx,dl
c000f644:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f648:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f64c:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f656:	8d 50 01             	lea    edx,[eax+0x1]
c000f659:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f65d:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f663:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f666:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f66c:	0f b6 d2             	movzx  edx,dl
c000f66f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f673:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f677:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f67d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f682:	e9 d9 02 00 00       	jmp    c000f960 <scanMADT()+0x494>
c000f687:	90                   	nop
c000f688:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f68d:	83 f8 01             	cmp    eax,0x1
c000f690:	0f 85 1a 01 00 00    	jne    c000f7b0 <scanMADT()+0x2e4>
c000f696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69a:	8d 50 01             	lea    edx,[eax+0x1]
c000f69d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6a1:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6a7:	0f b6 d2             	movzx  edx,dl
c000f6aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6b2:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f6b8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f6bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c5:	01 d0                	add    eax,edx
c000f6c7:	83 c0 2c             	add    eax,0x2c
c000f6ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f6cc:	0f b6 d0             	movzx  edx,al
c000f6cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6d3:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6de:	0f b6 c0             	movzx  eax,al
c000f6e1:	c1 e0 08             	shl    eax,0x8
c000f6e4:	89 d1                	mov    ecx,edx
c000f6e6:	09 c1                	or     ecx,eax
c000f6e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ec:	8d 50 02             	lea    edx,[eax+0x2]
c000f6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6f7:	0f b6 c0             	movzx  eax,al
c000f6fa:	c1 e0 10             	shl    eax,0x10
c000f6fd:	09 c1                	or     ecx,eax
c000f6ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f703:	8d 50 03             	lea    edx,[eax+0x3]
c000f706:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f70e:	0f b6 c0             	movzx  eax,al
c000f711:	c1 e0 18             	shl    eax,0x18
c000f714:	09 c1                	or     ecx,eax
c000f716:	89 ca                	mov    edx,ecx
c000f718:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f71d:	0f b6 c0             	movzx  eax,al
c000f720:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f727:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f72c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f730:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f734:	01 d0                	add    eax,edx
c000f736:	83 c0 2c             	add    eax,0x2c
c000f739:	8a 00                	mov    al,BYTE PTR [eax]
c000f73b:	0f b6 d0             	movzx  edx,al
c000f73e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f742:	8d 48 01             	lea    ecx,[eax+0x1]
c000f745:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f749:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f74d:	0f b6 c0             	movzx  eax,al
c000f750:	c1 e0 08             	shl    eax,0x8
c000f753:	89 d1                	mov    ecx,edx
c000f755:	09 c1                	or     ecx,eax
c000f757:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75b:	8d 50 02             	lea    edx,[eax+0x2]
c000f75e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f762:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f766:	0f b6 c0             	movzx  eax,al
c000f769:	c1 e0 10             	shl    eax,0x10
c000f76c:	09 c1                	or     ecx,eax
c000f76e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f772:	8d 50 03             	lea    edx,[eax+0x3]
c000f775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f779:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	c1 e0 18             	shl    eax,0x18
c000f783:	09 c1                	or     ecx,eax
c000f785:	89 ca                	mov    edx,ecx
c000f787:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f78c:	0f b6 c0             	movzx  eax,al
c000f78f:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f796:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f79b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7a0:	83 c0 01             	add    eax,0x1
c000f7a3:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7a8:	e9 b3 01 00 00       	jmp    c000f960 <scanMADT()+0x494>
c000f7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7b5:	83 f8 02             	cmp    eax,0x2
c000f7b8:	0f 85 ea 00 00 00    	jne    c000f8a8 <scanMADT()+0x3dc>
c000f7be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7d1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f7d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7d9:	8d 50 01             	lea    edx,[eax+0x1]
c000f7dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7e4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7e8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f7ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f4:	01 d0                	add    eax,edx
c000f7f6:	83 c0 2c             	add    eax,0x2c
c000f7f9:	8a 00                	mov    al,BYTE PTR [eax]
c000f7fb:	0f b6 d0             	movzx  edx,al
c000f7fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f802:	8d 48 01             	lea    ecx,[eax+0x1]
c000f805:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f809:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f80d:	0f b6 c0             	movzx  eax,al
c000f810:	c1 e0 08             	shl    eax,0x8
c000f813:	89 d1                	mov    ecx,edx
c000f815:	09 c1                	or     ecx,eax
c000f817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f81b:	8d 50 02             	lea    edx,[eax+0x2]
c000f81e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f822:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f826:	0f b6 c0             	movzx  eax,al
c000f829:	c1 e0 10             	shl    eax,0x10
c000f82c:	09 c1                	or     ecx,eax
c000f82e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f832:	8d 50 03             	lea    edx,[eax+0x3]
c000f835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f839:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f83d:	0f b6 c0             	movzx  eax,al
c000f840:	c1 e0 18             	shl    eax,0x18
c000f843:	09 c8                	or     eax,ecx
c000f845:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f849:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f84e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f856:	01 d0                	add    eax,edx
c000f858:	83 c0 2c             	add    eax,0x2c
c000f85b:	8a 00                	mov    al,BYTE PTR [eax]
c000f85d:	0f b6 c0             	movzx  eax,al
c000f860:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f864:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f867:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f86b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f86f:	0f b6 d2             	movzx  edx,dl
c000f872:	c1 e2 08             	shl    edx,0x8
c000f875:	09 d0                	or     eax,edx
c000f877:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f87c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f881:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f88a:	88 90 68 37 02 c0    	mov    BYTE PTR [eax-0x3ffdc898],dl
c000f890:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f895:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f89a:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f8a2:	e9 b9 00 00 00       	jmp    c000f960 <scanMADT()+0x494>
c000f8a7:	90                   	nop
c000f8a8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8ad:	83 f8 04             	cmp    eax,0x4
c000f8b0:	0f 85 9a 00 00 00    	jne    c000f950 <scanMADT()+0x484>
c000f8b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8ba:	8d 50 01             	lea    edx,[eax+0x1]
c000f8bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f8c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f8c9:	0f b6 c0             	movzx  eax,al
c000f8cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8d8:	01 d0                	add    eax,edx
c000f8da:	83 c0 2c             	add    eax,0x2c
c000f8dd:	8a 00                	mov    al,BYTE PTR [eax]
c000f8df:	0f b6 d0             	movzx  edx,al
c000f8e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8f1:	0f b6 c0             	movzx  eax,al
c000f8f4:	c1 e0 08             	shl    eax,0x8
c000f8f7:	09 d0                	or     eax,edx
c000f8f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8fd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f906:	8d 50 01             	lea    edx,[eax+0x1]
c000f909:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f90d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f911:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f915:	0f b6 c0             	movzx  eax,al
c000f918:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f920:	c1 e0 08             	shl    eax,0x8
c000f923:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f927:	89 c1                	mov    ecx,eax
c000f929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f92d:	c1 e0 18             	shl    eax,0x18
c000f930:	89 c3                	mov    ebx,eax
c000f932:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f937:	8d 50 01             	lea    edx,[eax+0x1]
c000f93a:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f940:	09 d9                	or     ecx,ebx
c000f942:	89 ca                	mov    edx,ecx
c000f944:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f94b:	eb 13                	jmp    c000f960 <scanMADT()+0x494>
c000f94d:	8d 76 00             	lea    esi,[esi+0x0]
c000f950:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f955:	83 f8 05             	cmp    eax,0x5
c000f958:	75 06                	jne    c000f960 <scanMADT()+0x494>
c000f95a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f95f:	90                   	nop
c000f960:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f965:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f969:	01 d0                	add    eax,edx
c000f96b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f96f:	e9 50 fc ff ff       	jmp    c000f5c4 <scanMADT()+0xf8>
c000f974:	90                   	nop
c000f975:	eb 05                	jmp    c000f97c <scanMADT()+0x4b0>
c000f977:	90                   	nop
c000f978:	90                   	nop
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	83 c4 38             	add    esp,0x38
c000f97f:	5b                   	pop    ebx
c000f980:	c3                   	ret    
c000f981:	90                   	nop
c000f982:	66 90                	xchg   ax,ax

c000f984 <ACPI::ACPI()>:
c000f984:	83 ec 0c             	sub    esp,0xc
c000f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f98b:	83 ec 08             	sub    esp,0x8
c000f98e:	68 71 20 02 c0       	push   0xc0022071
c000f993:	50                   	push   eax
c000f994:	e8 65 d2 ff ff       	call   c000cbfe <Device::Device(char const*)>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c000f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9a5:	89 10                	mov    DWORD PTR [eax],edx
c000f9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ab:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9b6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f9ce:	e8 f9 fa ff ff       	call   c000f4cc <scanMADT()>
c000f9d3:	90                   	nop
c000f9d4:	83 c4 0c             	add    esp,0xc
c000f9d7:	c3                   	ret    

c000f9d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f9d8:	83 ec 2c             	sub    esp,0x2c
c000f9db:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f9df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f9e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9e7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f9eb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f9f0:	88 d0                	mov    al,dl
c000f9f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f9fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa03:	90                   	nop
c000fa04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa08:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa12:	0f 8d b0 00 00 00    	jge    c000fac8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa20:	83 c2 2a             	add    edx,0x2a
c000fa23:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa27:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa2c:	0f b7 c0             	movzx  eax,ax
c000fa2f:	39 c2                	cmp    edx,eax
c000fa31:	0f 85 85 00 00 00    	jne    c000fabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa3f:	83 c2 2a             	add    edx,0x2a
c000fa42:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa46:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa4b:	0f b6 c0             	movzx  eax,al
c000fa4e:	39 c2                	cmp    edx,eax
c000fa50:	75 6a                	jne    c000fabc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa52:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fa57:	85 c0                	test   eax,eax
c000fa59:	74 3d                	je     c000fa98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000fa5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa63:	83 c2 2a             	add    edx,0x2a
c000fa66:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fa6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa71:	39 c2                	cmp    edx,eax
c000fa73:	74 13                	je     c000fa88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fa75:	83 ec 0c             	sub    esp,0xc
c000fa78:	68 ec 1f 02 c0       	push   0xc0021fec
c000fa7d:	e8 3d 1c 00 00       	call   c00116bf <KePanic(char const*)>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	8d 76 00             	lea    esi,[esi+0x0]
c000fa88:	83 ec 0c             	sub    esp,0xc
c000fa8b:	68 76 20 02 c0       	push   0xc0022076
c000fa90:	e8 2a 1c 00 00       	call   c00116bf <KePanic(char const*)>
c000fa95:	83 c4 10             	add    esp,0x10
c000fa98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faa0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faa4:	83 c2 2a             	add    edx,0x2a
c000faa7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000faab:	8b 02                	mov    eax,DWORD PTR [edx]
c000faad:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fab0:	89 01                	mov    DWORD PTR [ecx],eax
c000fab2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fab5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faba:	66 90                	xchg   ax,ax
c000fabc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fac1:	e9 3e ff ff ff       	jmp    c000fa04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fac6:	66 90                	xchg   ax,ax
c000fac8:	90                   	nop
c000fac9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000facd:	83 c4 2c             	add    esp,0x2c
c000fad0:	c2 04 00             	ret    0x4
c000fad3:	90                   	nop

c000fad4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fad4:	83 ec 1c             	sub    esp,0x1c
c000fad7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fadb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fadf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fae3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fae8:	88 c8                	mov    al,cl
c000faea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000faee:	88 d0                	mov    al,dl
c000faf0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000faf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fafe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb02:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb05:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fb09:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fb0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb11:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb1b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fb1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb22:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fb27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb2b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb31:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb35:	83 c0 01             	add    eax,0x1
c000fb38:	88 c1                	mov    cl,al
c000fb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3e:	83 c2 2a             	add    edx,0x2a
c000fb41:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb49:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb53:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fb5a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb62:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb68:	8d 50 01             	lea    edx,[eax+0x1]
c000fb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fb75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb79:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fb7f:	3d 00 02 00 00       	cmp    eax,0x200
c000fb84:	75 12                	jne    c000fb98 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fb86:	83 ec 0c             	sub    esp,0xc
c000fb89:	68 85 20 02 c0       	push   0xc0022085
c000fb8e:	e8 2c 1b 00 00       	call   c00116bf <KePanic(char const*)>
c000fb93:	83 c4 10             	add    esp,0x10
c000fb96:	66 90                	xchg   ax,ax
c000fb98:	90                   	nop
c000fb99:	83 c4 1c             	add    esp,0x1c
c000fb9c:	c3                   	ret    
c000fb9d:	90                   	nop
c000fb9e:	66 90                	xchg   ax,ax

c000fba0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fba0:	b8 00 00 00 00       	mov    eax,0x0
c000fba5:	c3                   	ret    
c000fba6:	66 90                	xchg   ax,ax

c000fba8 <ACPI::detectPCI()>:
c000fba8:	53                   	push   ebx
c000fba9:	83 ec 28             	sub    esp,0x28
c000fbac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fbb1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fbb6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fbbb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fbc1:	83 e0 04             	and    eax,0x4
c000fbc4:	0f b6 c0             	movzx  eax,al
c000fbc7:	85 c0                	test   eax,eax
c000fbc9:	74 2d                	je     c000fbf8 <ACPI::detectPCI()+0x50>
c000fbcb:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fbd0:	83 ec 08             	sub    esp,0x8
c000fbd3:	68 a2 20 02 c0       	push   0xc00220a2
c000fbd8:	50                   	push   eax
c000fbd9:	e8 6e f8 ff ff       	call   c000f44c <findDataTable(unsigned char*, char*)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbe5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fbea:	74 0c                	je     c000fbf8 <ACPI::detectPCI()+0x50>
c000fbec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbf1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbf6:	66 90                	xchg   ax,ax
c000fbf8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc04:	8a 00                	mov    al,BYTE PTR [eax]
c000fc06:	0f b6 c0             	movzx  eax,al
c000fc09:	83 f8 01             	cmp    eax,0x1
c000fc0c:	75 0e                	jne    c000fc1c <ACPI::detectPCI()+0x74>
c000fc0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc13:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc18:	eb 2e                	jmp    c000fc48 <ACPI::detectPCI()+0xa0>
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc20:	8a 00                	mov    al,BYTE PTR [eax]
c000fc22:	0f b6 c0             	movzx  eax,al
c000fc25:	83 f8 02             	cmp    eax,0x2
c000fc28:	75 1e                	jne    c000fc48 <ACPI::detectPCI()+0xa0>
c000fc2a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc2f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc34:	85 c0                	test   eax,eax
c000fc36:	74 10                	je     c000fc48 <ACPI::detectPCI()+0xa0>
c000fc38:	83 ec 0c             	sub    esp,0xc
c000fc3b:	68 1c 20 02 c0       	push   0xc002201c
c000fc40:	e8 7a 1a 00 00       	call   c00116bf <KePanic(char const*)>
c000fc45:	83 c4 10             	add    esp,0x10
c000fc48:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fc4c:	83 f0 01             	xor    eax,0x1
c000fc4f:	0f b6 c0             	movzx  eax,al
c000fc52:	85 c0                	test   eax,eax
c000fc54:	74 46                	je     c000fc9c <ACPI::detectPCI()+0xf4>
c000fc56:	e8 d5 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fc5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc5f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fc64:	75 0e                	jne    c000fc74 <ACPI::detectPCI()+0xcc>
c000fc66:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc6b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc70:	eb 2a                	jmp    c000fc9c <ACPI::detectPCI()+0xf4>
c000fc72:	66 90                	xchg   ax,ax
c000fc74:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fc79:	75 21                	jne    c000fc9c <ACPI::detectPCI()+0xf4>
c000fc7b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc80:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc85:	85 c0                	test   eax,eax
c000fc87:	74 13                	je     c000fc9c <ACPI::detectPCI()+0xf4>
c000fc89:	83 ec 0c             	sub    esp,0xc
c000fc8c:	68 1c 20 02 c0       	push   0xc002201c
c000fc91:	e8 29 1a 00 00       	call   c00116bf <KePanic(char const*)>
c000fc96:	83 c4 10             	add    esp,0x10
c000fc99:	8d 76 00             	lea    esi,[esi+0x0]
c000fc9c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fca1:	85 c0                	test   eax,eax
c000fca3:	0f 84 87 00 00 00    	je     c000fd30 <ACPI::detectPCI()+0x188>
c000fca9:	83 ec 0c             	sub    esp,0xc
c000fcac:	68 a7 20 02 c0       	push   0xc00220a7
c000fcb1:	e8 09 13 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fcc1:	83 ec 0c             	sub    esp,0xc
c000fcc4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcc8:	e8 e9 7d ff ff       	call   c0007ab6 <malloc>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	89 c3                	mov    ebx,eax
c000fcd2:	83 ec 0c             	sub    esp,0xc
c000fcd5:	53                   	push   ebx
c000fcd6:	e8 5d b5 00 00       	call   c001b238 <PCI::PCI()>
c000fcdb:	83 c4 10             	add    esp,0x10
c000fcde:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fce6:	83 ec 08             	sub    esp,0x8
c000fce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fced:	50                   	push   eax
c000fcee:	e8 73 cd ff ff       	call   c000ca66 <Device::addChild(Device*)>
c000fcf3:	83 c4 10             	add    esp,0x10
c000fcf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcfa:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcfc:	83 c0 08             	add    eax,0x8
c000fcff:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd01:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd06:	85 d2                	test   edx,edx
c000fd08:	74 0a                	je     c000fd14 <ACPI::detectPCI()+0x16c>
c000fd0a:	ba 01 00 00 00       	mov    edx,0x1
c000fd0f:	eb 0b                	jmp    c000fd1c <ACPI::detectPCI()+0x174>
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]
c000fd14:	ba 02 00 00 00       	mov    edx,0x2
c000fd19:	8d 76 00             	lea    esi,[esi+0x0]
c000fd1c:	6a 00                	push   0x0
c000fd1e:	6a 00                	push   0x0
c000fd20:	52                   	push   edx
c000fd21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd25:	ff d0                	call   eax
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	e9 91 00 00 00       	jmp    c000fdc0 <ACPI::detectPCI()+0x218>
c000fd2f:	90                   	nop
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	68 bf 20 02 c0       	push   0xc00220bf
c000fd38:	e8 82 12 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd47:	83 ec 0c             	sub    esp,0xc
c000fd4a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd4e:	e8 63 7d ff ff       	call   c0007ab6 <malloc>
c000fd53:	83 c4 10             	add    esp,0x10
c000fd56:	89 c3                	mov    ebx,eax
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	53                   	push   ebx
c000fd5c:	e8 71 c0 00 00       	call   c001bdd2 <IDE::IDE()>
c000fd61:	83 c4 10             	add    esp,0x10
c000fd64:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd6c:	83 ec 08             	sub    esp,0x8
c000fd6f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd73:	50                   	push   eax
c000fd74:	e8 ed cc ff ff       	call   c000ca66 <Device::addChild(Device*)>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd80:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fd8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd8e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd9b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fda4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fda8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdaa:	83 c0 08             	add    eax,0x8
c000fdad:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdaf:	6a 00                	push   0x0
c000fdb1:	6a 00                	push   0x0
c000fdb3:	6a 00                	push   0x0
c000fdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fdb9:	ff d0                	call   eax
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	66 90                	xchg   ax,ax
c000fdc0:	90                   	nop
c000fdc1:	83 c4 28             	add    esp,0x28
c000fdc4:	5b                   	pop    ebx
c000fdc5:	c3                   	ret    
c000fdc6:	66 90                	xchg   ax,ax

c000fdc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fdc8:	83 ec 1c             	sub    esp,0x1c
c000fdcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdcf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdd2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdd6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fddb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fde0:	83 ec 08             	sub    esp,0x8
c000fde3:	52                   	push   edx
c000fde4:	50                   	push   eax
c000fde5:	e8 8e 73 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fdea:	83 c4 10             	add    esp,0x10
c000fded:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fdf1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fdf6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fdfb:	83 ec 04             	sub    esp,0x4
c000fdfe:	6a 01                	push   0x1
c000fe00:	52                   	push   edx
c000fe01:	50                   	push   eax
c000fe02:	e8 8b 74 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe07:	83 c4 10             	add    esp,0x10
c000fe0a:	90                   	nop
c000fe0b:	83 c4 1c             	add    esp,0x1c
c000fe0e:	c3                   	ret    
c000fe0f:	90                   	nop

c000fe10 <ACPI::sleep()>:
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe18:	85 c0                	test   eax,eax
c000fe1a:	74 08                	je     c000fe24 <ACPI::sleep()+0x14>
c000fe1c:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe21:	ff d0                	call   eax
c000fe23:	90                   	nop
c000fe24:	90                   	nop
c000fe25:	83 c4 0c             	add    esp,0xc
c000fe28:	c3                   	ret    
c000fe29:	90                   	nop
c000fe2a:	66 90                	xchg   ax,ax

c000fe2c <ACPI::open(int, int, void*)>:
c000fe2c:	57                   	push   edi
c000fe2d:	56                   	push   esi
c000fe2e:	53                   	push   ebx
c000fe2f:	81 ec 70 01 00 00    	sub    esp,0x170
c000fe35:	83 ec 0c             	sub    esp,0xc
c000fe38:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe3f:	e8 64 fd ff ff       	call   c000fba8 <ACPI::detectPCI()>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	83 ec 0c             	sub    esp,0xc
c000fe4a:	68 44 20 02 c0       	push   0xc0022044
c000fe4f:	e8 6b 11 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000fe54:	83 c4 10             	add    esp,0x10
c000fe57:	b8 4c 05 00 00       	mov    eax,0x54c
c000fe5c:	8a 00                	mov    al,BYTE PTR [eax]
c000fe5e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fe65:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe6d:	83 f8 01             	cmp    eax,0x1
c000fe70:	75 12                	jne    c000fe84 <ACPI::open(int, int, void*)+0x58>
c000fe72:	83 ec 0c             	sub    esp,0xc
c000fe75:	68 7e 19 02 c0       	push   0xc002197e
c000fe7a:	e8 06 4e 00 00       	call   c0014c85 <Thr::loadKernelSymbolTable(char const*)>
c000fe7f:	83 c4 10             	add    esp,0x10
c000fe82:	eb 34                	jmp    c000feb8 <ACPI::open(int, int, void*)+0x8c>
c000fe84:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fe8c:	3d bb 00 00 00       	cmp    eax,0xbb
c000fe91:	75 15                	jne    c000fea8 <ACPI::open(int, int, void*)+0x7c>
c000fe93:	83 ec 0c             	sub    esp,0xc
c000fe96:	68 d4 20 02 c0       	push   0xc00220d4
c000fe9b:	e8 e5 4d 00 00       	call   c0014c85 <Thr::loadKernelSymbolTable(char const*)>
c000fea0:	83 c4 10             	add    esp,0x10
c000fea3:	eb 13                	jmp    c000feb8 <ACPI::open(int, int, void*)+0x8c>
c000fea5:	8d 76 00             	lea    esi,[esi+0x0]
c000fea8:	83 ec 0c             	sub    esp,0xc
c000feab:	68 f2 20 02 c0       	push   0xc00220f2
c000feb0:	e8 0a 18 00 00       	call   c00116bf <KePanic(char const*)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fec0:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fed5:	e8 dc 7b ff ff       	call   c0007ab6 <malloc>
c000feda:	83 c4 10             	add    esp,0x10
c000fedd:	89 c3                	mov    ebx,eax
c000fedf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fee4:	83 ec 04             	sub    esp,0x4
c000fee7:	50                   	push   eax
c000fee8:	68 0c 21 02 c0       	push   0xc002210c
c000feed:	53                   	push   ebx
c000feee:	e8 fb bc ff ff       	call   c000bbee <File::File(char const*, Process*)>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fefd:	83 ec 08             	sub    esp,0x8
c000ff00:	6a 01                	push   0x1
c000ff02:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff09:	e8 fe bc ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c000ff0e:	83 c4 10             	add    esp,0x10
c000ff11:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ff18:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ff20:	75 16                	jne    c000ff38 <ACPI::open(int, int, void*)+0x10c>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff2c:	e8 39 bd ff ff       	call   c000bc6a <File::close()>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	eb 0a                	jmp    c000ff40 <ACPI::open(int, int, void*)+0x114>
c000ff36:	66 90                	xchg   ax,ax
c000ff38:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ff40:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ff48:	74 1e                	je     c000ff68 <ACPI::open(int, int, void*)+0x13c>
c000ff4a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ff51:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff53:	83 c0 08             	add    eax,0x8
c000ff56:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff58:	83 ec 0c             	sub    esp,0xc
c000ff5b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ff62:	ff d0                	call   eax
c000ff64:	83 c4 10             	add    esp,0x10
c000ff67:	90                   	nop
c000ff68:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ff6f:	83 f0 01             	xor    eax,0x1
c000ff72:	0f b6 c0             	movzx  eax,al
c000ff75:	85 c0                	test   eax,eax
c000ff77:	74 43                	je     c000ffbc <ACPI::open(int, int, void*)+0x190>
c000ff79:	83 ec 0c             	sub    esp,0xc
c000ff7c:	68 2a 21 02 c0       	push   0xc002212a
c000ff81:	e8 39 10 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000ff86:	83 c4 10             	add    esp,0x10
c000ff89:	83 ec 04             	sub    esp,0x4
c000ff8c:	6a 0c                	push   0xc
c000ff8e:	68 45 21 02 c0       	push   0xc0022145
c000ff93:	68 56 21 02 c0       	push   0xc0022156
c000ff98:	e8 6b 3f 00 00       	call   c0013f08 <Reg::readIntWithDefault(char*, char*, int)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ffa7:	83 ec 0c             	sub    esp,0xc
c000ffaa:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ffb1:	e8 86 98 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ffb6:	83 c4 10             	add    esp,0x10
c000ffb9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	68 b5 0b 02 c0       	push   0xc0020bb5
c000ffc4:	e8 f6 0f 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ffd3:	83 ec 08             	sub    esp,0x8
c000ffd6:	6a 13                	push   0x13
c000ffd8:	50                   	push   eax
c000ffd9:	e8 a0 cd ff ff       	call   c000cd7e <getDevicesOfType(DeviceType)>
c000ffde:	83 c4 0c             	add    esp,0xc
c000ffe1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ffee:	50                   	push   eax
c000ffef:	e8 bc ff 00 00       	call   c001ffb0 <LinkedList<Device>::isEmpty()>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	83 f0 01             	xor    eax,0x1
c000fffa:	0f b6 c0             	movzx  eax,al
c000fffd:	85 c0                	test   eax,eax
c000ffff:	0f 84 47 01 00 00    	je     c001014c <ACPI::open(int, int, void*)+0x320>
c0010005:	83 ec 0c             	sub    esp,0xc
c0010008:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001000f:	50                   	push   eax
c0010010:	e8 b7 ff 00 00       	call   c001ffcc <LinkedList<Device>::getFirstElement()>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001001f:	83 ec 0c             	sub    esp,0xc
c0010022:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010029:	50                   	push   eax
c001002a:	e8 a5 ff 00 00       	call   c001ffd4 <LinkedList<Device>::removeFirst()>
c001002f:	83 c4 10             	add    esp,0x10
c0010032:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0010039:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0010040:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0010047:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0010051:	ba 09 00 00 00       	mov    edx,0x9
c0010056:	fc                   	cld    
c0010057:	89 c7                	mov    edi,eax
c0010059:	89 de                	mov    esi,ebx
c001005b:	89 d1                	mov    ecx,edx
c001005d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001005f:	83 ec 08             	sub    esp,0x8
c0010062:	8d 44 24 38          	lea    eax,[esp+0x38]
c0010066:	50                   	push   eax
c0010067:	83 ec 24             	sub    esp,0x24
c001006a:	89 e0                	mov    eax,esp
c001006c:	89 c3                	mov    ebx,eax
c001006e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0010072:	ba 09 00 00 00       	mov    edx,0x9
c0010077:	89 df                	mov    edi,ebx
c0010079:	89 c6                	mov    esi,eax
c001007b:	89 d1                	mov    ecx,edx
c001007d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001007f:	e8 9e b6 00 00       	call   c001b722 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0010084:	83 c4 30             	add    esp,0x30
c0010087:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001008e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0010096:	0f 84 48 ff ff ff    	je     c000ffe4 <ACPI::open(int, int, void*)+0x1b8>
c001009c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00100a7:	83 ec 0c             	sub    esp,0xc
c00100aa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100b1:	e8 00 7a ff ff       	call   c0007ab6 <malloc>
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	89 c3                	mov    ebx,eax
c00100bb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100c0:	83 ec 04             	sub    esp,0x4
c00100c3:	50                   	push   eax
c00100c4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100cb:	53                   	push   ebx
c00100cc:	e8 1d bb ff ff       	call   c000bbee <File::File(char const*, Process*)>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00100db:	83 ec 0c             	sub    esp,0xc
c00100de:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100e5:	e8 e6 bd ff ff       	call   c000bed0 <File::exists()>
c00100ea:	83 c4 10             	add    esp,0x10
c00100ed:	0f b6 c0             	movzx  eax,al
c00100f0:	85 c0                	test   eax,eax
c00100f2:	74 28                	je     c001011c <ACPI::open(int, int, void*)+0x2f0>
c00100f4:	83 ec 08             	sub    esp,0x8
c00100f7:	6a 01                	push   0x1
c00100f9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010100:	e8 fa 55 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c0010105:	83 c4 10             	add    esp,0x10
c0010108:	83 ec 08             	sub    esp,0x8
c001010b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010112:	50                   	push   eax
c0010113:	e8 18 58 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	90                   	nop
c001011c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010124:	0f 84 ba fe ff ff    	je     c000ffe4 <ACPI::open(int, int, void*)+0x1b8>
c001012a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010131:	8b 00                	mov    eax,DWORD PTR [eax]
c0010133:	83 c0 08             	add    eax,0x8
c0010136:	8b 00                	mov    eax,DWORD PTR [eax]
c0010138:	83 ec 0c             	sub    esp,0xc
c001013b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010142:	ff d0                	call   eax
c0010144:	83 c4 10             	add    esp,0x10
c0010147:	e9 98 fe ff ff       	jmp    c000ffe4 <ACPI::open(int, int, void*)+0x1b8>
c001014c:	83 ec 0c             	sub    esp,0xc
c001014f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0010156:	50                   	push   eax
c0010157:	e8 50 fe 00 00       	call   c001ffac <LinkedList<Device>::~LinkedList()>
c001015c:	83 c4 10             	add    esp,0x10
c001015f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0010165:	83 ec 08             	sub    esp,0x8
c0010168:	6a 01                	push   0x1
c001016a:	68 5d 21 02 c0       	push   0xc002215d
c001016f:	e8 8b 55 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c0010174:	83 c4 10             	add    esp,0x10
c0010177:	83 ec 08             	sub    esp,0x8
c001017a:	53                   	push   ebx
c001017b:	50                   	push   eax
c001017c:	e8 af 57 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c0010181:	83 c4 10             	add    esp,0x10
c0010184:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010189:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001018f:	83 e0 04             	and    eax,0x4
c0010192:	0f b6 c0             	movzx  eax,al
c0010195:	85 c0                	test   eax,eax
c0010197:	0f 84 1b 01 00 00    	je     c00102b8 <ACPI::open(int, int, void*)+0x48c>
c001019d:	83 ec 0c             	sub    esp,0xc
c00101a0:	68 7a 21 02 c0       	push   0xc002217a
c00101a5:	e8 15 0e 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c00101aa:	83 c4 10             	add    esp,0x10
c00101ad:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00101b8:	83 ec 0c             	sub    esp,0xc
c00101bb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00101c2:	e8 ef 78 ff ff       	call   c0007ab6 <malloc>
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	89 c3                	mov    ebx,eax
c00101cc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101d1:	83 ec 04             	sub    esp,0x4
c00101d4:	50                   	push   eax
c00101d5:	68 97 21 02 c0       	push   0xc0022197
c00101da:	53                   	push   ebx
c00101db:	e8 0e ba ff ff       	call   c000bbee <File::File(char const*, Process*)>
c00101e0:	83 c4 10             	add    esp,0x10
c00101e3:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00101ea:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101f2:	74 20                	je     c0010214 <ACPI::open(int, int, void*)+0x3e8>
c00101f4:	83 ec 0c             	sub    esp,0xc
c00101f7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101fe:	e8 cd bc ff ff       	call   c000bed0 <File::exists()>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	0f b6 c0             	movzx  eax,al
c0010209:	85 c0                	test   eax,eax
c001020b:	74 07                	je     c0010214 <ACPI::open(int, int, void*)+0x3e8>
c001020d:	b0 01                	mov    al,0x1
c001020f:	eb 07                	jmp    c0010218 <ACPI::open(int, int, void*)+0x3ec>
c0010211:	8d 76 00             	lea    esi,[esi+0x0]
c0010214:	b0 00                	mov    al,0x0
c0010216:	66 90                	xchg   ax,ax
c0010218:	0f b6 c0             	movzx  eax,al
c001021b:	85 c0                	test   eax,eax
c001021d:	74 25                	je     c0010244 <ACPI::open(int, int, void*)+0x418>
c001021f:	83 ec 08             	sub    esp,0x8
c0010222:	6a 01                	push   0x1
c0010224:	68 97 21 02 c0       	push   0xc0022197
c0010229:	e8 d1 54 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	83 ec 08             	sub    esp,0x8
c0010234:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001023b:	50                   	push   eax
c001023c:	e8 ef 56 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c0010241:	83 c4 10             	add    esp,0x10
c0010244:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001024c:	74 2a                	je     c0010278 <ACPI::open(int, int, void*)+0x44c>
c001024e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010256:	74 20                	je     c0010278 <ACPI::open(int, int, void*)+0x44c>
c0010258:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001025f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010261:	83 c0 08             	add    eax,0x8
c0010264:	8b 00                	mov    eax,DWORD PTR [eax]
c0010266:	83 ec 0c             	sub    esp,0xc
c0010269:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010270:	ff d0                	call   eax
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	8d 76 00             	lea    esi,[esi+0x0]
c0010278:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c001027d:	83 ec 08             	sub    esp,0x8
c0010280:	68 b4 21 02 c0       	push   0xc00221b4
c0010285:	50                   	push   eax
c0010286:	e8 c1 f1 ff ff       	call   c000f44c <findDataTable(unsigned char*, char*)>
c001028b:	83 c4 10             	add    esp,0x10
c001028e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010295:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001029d:	74 19                	je     c00102b8 <ACPI::open(int, int, void*)+0x48c>
c001029f:	83 ec 08             	sub    esp,0x8
c00102a2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00102a9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00102b0:	e8 13 fb ff ff       	call   c000fdc8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00102b5:	83 c4 10             	add    esp,0x10
c00102b8:	b8 00 00 00 00       	mov    eax,0x0
c00102bd:	81 c4 70 01 00 00    	add    esp,0x170
c00102c3:	5b                   	pop    ebx
c00102c4:	5e                   	pop    esi
c00102c5:	5f                   	pop    edi
c00102c6:	c3                   	ret    
c00102c7:	90                   	nop

c00102c8 <CPU::close(int, int, void*)>:
c00102c8:	31 c0                	xor    eax,eax
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00102cc:	60                   	pusha  
c00102cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102d9:	9c                   	pushf  
c00102da:	fa                   	cli    
c00102db:	0f 09                	wbinvd 
c00102dd:	0f 30                	wrmsr  
c00102df:	9d                   	popf   
c00102e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00102e4:	89 02                	mov    DWORD PTR [edx],eax
c00102e6:	61                   	popa   
c00102e7:	c3                   	ret    

c00102e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00102e8:	60                   	pusha  
c00102e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00102ed:	9c                   	pushf  
c00102ee:	fa                   	cli    
c00102ef:	0f 09                	wbinvd 
c00102f1:	31 c0                	xor    eax,eax
c00102f3:	31 d2                	xor    edx,edx
c00102f5:	0f 32                	rdmsr  
c00102f7:	9d                   	popf   
c00102f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fc:	89 02                	mov    DWORD PTR [edx],eax
c00102fe:	61                   	popa   
c00102ff:	c3                   	ret    

c0010300 <CPU::AMD_K6_writeback(int, int, int)>:
c0010300:	56                   	push   esi
c0010301:	53                   	push   ebx
c0010302:	83 ec 10             	sub    esp,0x10
c0010305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010309:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001030e:	75 5d                	jne    c001036d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010310:	83 f8 08             	cmp    eax,0x8
c0010313:	75 09                	jne    c001031e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010315:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001031a:	7e 13                	jle    c001032f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001031c:	eb 30                	jmp    c001034e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001031e:	83 f8 06             	cmp    eax,0x6
c0010321:	7c 4a                	jl     c001036d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010323:	83 f8 07             	cmp    eax,0x7
c0010326:	7e 07                	jle    c001032f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010328:	83 f8 09             	cmp    eax,0x9
c001032b:	74 21                	je     c001034e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001032d:	eb 3e                	jmp    c001036d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001032f:	89 e6                	mov    esi,esp
c0010331:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c0010337:	56                   	push   esi
c0010338:	c1 eb 15             	shr    ebx,0x15
c001033b:	68 82 00 00 c0       	push   0xc0000082
c0010340:	83 e3 7e             	and    ebx,0x7e
c0010343:	e8 a0 ff ff ff       	call   c00102e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010348:	56                   	push   esi
c0010349:	6a 00                	push   0x0
c001034b:	53                   	push   ebx
c001034c:	eb 12                	jmp    c0010360 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001034e:	89 e3                	mov    ebx,esp
c0010350:	53                   	push   ebx
c0010351:	68 82 00 00 c0       	push   0xc0000082
c0010356:	e8 8d ff ff ff       	call   c00102e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001035b:	53                   	push   ebx
c001035c:	6a 00                	push   0x0
c001035e:	6a 00                	push   0x0
c0010360:	68 82 00 00 c0       	push   0xc0000082
c0010365:	e8 62 ff ff ff       	call   c00102cc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001036a:	83 c4 18             	add    esp,0x18
c001036d:	83 c4 10             	add    esp,0x10
c0010370:	5b                   	pop    ebx
c0010371:	5e                   	pop    esi
c0010372:	c3                   	ret    
c0010373:	90                   	nop

c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0010374:	55                   	push   ebp
c0010375:	57                   	push   edi
c0010376:	56                   	push   esi
c0010377:	53                   	push   ebx
c0010378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001037c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010380:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010384:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010388:	39 05 78 37 02 c0    	cmp    DWORD PTR ds:0xc0023778,eax
c001038e:	75 23                	jne    c00103b3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010390:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010395:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010399:	89 06                	mov    DWORD PTR [esi],eax
c001039b:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00103a0:	89 07                	mov    DWORD PTR [edi],eax
c00103a2:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00103a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00103aa:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00103af:	89 02                	mov    DWORD PTR [edx],eax
c00103b1:	eb 3f                	jmp    c00103f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00103b3:	31 c9                	xor    ecx,ecx
c00103b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103b9:	0f a2                	cpuid  
c00103bb:	89 06                	mov    DWORD PTR [esi],eax
c00103bd:	89 1f                	mov    DWORD PTR [edi],ebx
c00103bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103c3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00103c6:	89 10                	mov    DWORD PTR [eax],edx
c00103c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103cc:	a3 78 37 02 c0       	mov    ds:0xc0023778,eax
c00103d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00103d3:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c00103d8:	8b 07                	mov    eax,DWORD PTR [edi]
c00103da:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c00103df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00103e2:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c00103e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00103eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00103ed:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c00103f2:	5b                   	pop    ebx
c00103f3:	5e                   	pop    esi
c00103f4:	5f                   	pop    edi
c00103f5:	5d                   	pop    ebp
c00103f6:	c3                   	ret    
c00103f7:	90                   	nop

c00103f8 <CPU::cpuidCheckEDX(unsigned int)>:
c00103f8:	83 ec 10             	sub    esp,0x10
c00103fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ff:	50                   	push   eax
c0010400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010404:	50                   	push   eax
c0010405:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010409:	50                   	push   eax
c001040a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001040e:	50                   	push   eax
c001040f:	6a 01                	push   0x1
c0010411:	e8 5e ff ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010416:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001041a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001041e:	0f 95 c0             	setne  al
c0010421:	83 c4 24             	add    esp,0x24
c0010424:	c3                   	ret    
c0010425:	90                   	nop

c0010426 <CPU::cpuidCheckECX(unsigned int)>:
c0010426:	83 ec 10             	sub    esp,0x10
c0010429:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001042d:	50                   	push   eax
c001042e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010432:	50                   	push   eax
c0010433:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010437:	50                   	push   eax
c0010438:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001043c:	50                   	push   eax
c001043d:	6a 01                	push   0x1
c001043f:	e8 30 ff ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010444:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010448:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001044c:	0f 95 c0             	setne  al
c001044f:	83 c4 24             	add    esp,0x24
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010454:	83 ec 10             	sub    esp,0x10
c0010457:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001045b:	50                   	push   eax
c001045c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010460:	50                   	push   eax
c0010461:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010465:	50                   	push   eax
c0010466:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001046a:	50                   	push   eax
c001046b:	6a 07                	push   0x7
c001046d:	e8 02 ff ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010472:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010476:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001047a:	0f 95 c0             	setne  al
c001047d:	83 c4 24             	add    esp,0x24
c0010480:	c3                   	ret    
c0010481:	90                   	nop

c0010482 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010482:	83 ec 10             	sub    esp,0x10
c0010485:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010489:	50                   	push   eax
c001048a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001048e:	50                   	push   eax
c001048f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010493:	50                   	push   eax
c0010494:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010498:	50                   	push   eax
c0010499:	6a 07                	push   0x7
c001049b:	e8 d4 fe ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00104a8:	0f 95 c0             	setne  al
c00104ab:	83 c4 24             	add    esp,0x24
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <CPU::CPU()>:
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b7:	83 ec 08             	sub    esp,0x8
c00104ba:	68 d9 22 02 c0       	push   0xc00222d9
c00104bf:	50                   	push   eax
c00104c0:	e8 39 c7 ff ff       	call   c000cbfe <Device::Device(char const*)>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c00104cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d1:	89 10                	mov    DWORD PTR [eax],edx
c00104d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00104e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e5:	05 78 01 00 00       	add    eax,0x178
c00104ea:	83 ec 0c             	sub    esp,0xc
c00104ed:	50                   	push   eax
c00104ee:	e8 69 6e ff ff       	call   c000735c <GDT::GDT()>
c00104f3:	83 c4 10             	add    esp,0x10
c00104f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fa:	05 7c 09 00 00       	add    eax,0x97c
c00104ff:	83 ec 0c             	sub    esp,0xc
c0010502:	50                   	push   eax
c0010503:	e8 a4 70 ff ff       	call   c00075ac <IDT::IDT()>
c0010508:	83 c4 10             	add    esp,0x10
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	05 7c 11 00 00       	add    eax,0x117c
c0010514:	83 ec 0c             	sub    esp,0xc
c0010517:	50                   	push   eax
c0010518:	e8 27 8a ff ff       	call   c0008f44 <TSS::TSS()>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010524:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001052b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010539:	90                   	nop
c001053a:	83 c4 0c             	add    esp,0xc
c001053d:	c3                   	ret    

c001053e <CPU::displayFeatures()>:
c001053e:	c3                   	ret    
c001053f:	90                   	nop

c0010540 <CPU::detectFeatures()>:
c0010540:	55                   	push   ebp
c0010541:	57                   	push   edi
c0010542:	56                   	push   esi
c0010543:	53                   	push   ebx
c0010544:	83 ec 30             	sub    esp,0x30
c0010547:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001054b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010555:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001055c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010562:	6a 0d                	push   0xd
c0010564:	6a 00                	push   0x0
c0010566:	55                   	push   ebp
c0010567:	e8 84 ff fe ff       	call   c00004f0 <memset>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010574:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001057b:	0f 84 db 05 00 00    	je     c0010b5c <CPU::detectFeatures()+0x61c>
c0010581:	83 ec 0c             	sub    esp,0xc
c0010584:	89 ef                	mov    edi,ebp
c0010586:	6a 10                	push   0x10
c0010588:	e8 6b fe ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c001058d:	83 e0 01             	and    eax,0x1
c0010590:	8d 14 00             	lea    edx,[eax+eax*1]
c0010593:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010599:	83 e0 fd             	and    eax,0xfffffffd
c001059c:	09 d0                	or     eax,edx
c001059e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105a4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00105ab:	e8 48 fe ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c00105b0:	83 e0 01             	and    eax,0x1
c00105b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105ba:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105c0:	83 e0 fb             	and    eax,0xfffffffb
c00105c3:	09 d0                	or     eax,edx
c00105c5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105cb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00105d2:	e8 21 fe ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c00105d7:	83 e0 01             	and    eax,0x1
c00105da:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105e7:	83 e0 f7             	and    eax,0xfffffff7
c00105ea:	09 d0                	or     eax,edx
c00105ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105f2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00105f9:	e8 fa fd ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c00105fe:	83 e0 01             	and    eax,0x1
c0010601:	c1 e0 04             	shl    eax,0x4
c0010604:	89 c2                	mov    edx,eax
c0010606:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001060c:	83 e0 ef             	and    eax,0xffffffef
c001060f:	09 d0                	or     eax,edx
c0010611:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010617:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001061e:	e8 d5 fd ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0010623:	83 e0 01             	and    eax,0x1
c0010626:	c1 e0 05             	shl    eax,0x5
c0010629:	89 c2                	mov    edx,eax
c001062b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010631:	83 e0 df             	and    eax,0xffffffdf
c0010634:	09 d0                	or     eax,edx
c0010636:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001063c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010643:	e8 b0 fd ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c0010648:	83 e0 01             	and    eax,0x1
c001064b:	8d 14 00             	lea    edx,[eax+eax*1]
c001064e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010654:	83 e0 fd             	and    eax,0xfffffffd
c0010657:	09 d0                	or     eax,edx
c0010659:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001065f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010666:	e8 8d fd ff ff       	call   c00103f8 <CPU::cpuidCheckEDX(unsigned int)>
c001066b:	83 e0 01             	and    eax,0x1
c001066e:	c1 e0 06             	shl    eax,0x6
c0010671:	89 c2                	mov    edx,eax
c0010673:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010679:	83 e0 bf             	and    eax,0xffffffbf
c001067c:	09 d0                	or     eax,edx
c001067e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010684:	58                   	pop    eax
c0010685:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010689:	50                   	push   eax
c001068a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001068e:	50                   	push   eax
c001068f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010693:	56                   	push   esi
c0010694:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010698:	50                   	push   eax
c0010699:	6a 00                	push   0x0
c001069b:	e8 d4 fc ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106a0:	b8 04 00 00 00       	mov    eax,0x4
c00106a5:	89 c1                	mov    ecx,eax
c00106a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106a9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00106af:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00106b3:	89 c1                	mov    ecx,eax
c00106b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00106bd:	8d 74 24 38          	lea    esi,[esp+0x38]
c00106c1:	89 c1                	mov    ecx,eax
c00106c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106c5:	83 c4 18             	add    esp,0x18
c00106c8:	68 e8 21 02 c0       	push   0xc00221e8
c00106cd:	55                   	push   ebp
c00106ce:	e8 7d 00 ff ff       	call   c0000750 <strcmp>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	85 c0                	test   eax,eax
c00106d8:	75 0f                	jne    c00106e9 <CPU::detectFeatures()+0x1a9>
c00106da:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00106e4:	e9 22 02 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00106e9:	50                   	push   eax
c00106ea:	50                   	push   eax
c00106eb:	68 f5 21 02 c0       	push   0xc00221f5
c00106f0:	55                   	push   ebp
c00106f1:	e8 5a 00 ff ff       	call   c0000750 <strcmp>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	85 c0                	test   eax,eax
c00106fb:	74 dd                	je     c00106da <CPU::detectFeatures()+0x19a>
c00106fd:	50                   	push   eax
c00106fe:	50                   	push   eax
c00106ff:	68 02 22 02 c0       	push   0xc0022202
c0010704:	55                   	push   ebp
c0010705:	e8 46 00 ff ff       	call   c0000750 <strcmp>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	85 c0                	test   eax,eax
c001070f:	74 2a                	je     c001073b <CPU::detectFeatures()+0x1fb>
c0010711:	50                   	push   eax
c0010712:	50                   	push   eax
c0010713:	68 0f 22 02 c0       	push   0xc002220f
c0010718:	55                   	push   ebp
c0010719:	e8 32 00 ff ff       	call   c0000750 <strcmp>
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	85 c0                	test   eax,eax
c0010723:	74 16                	je     c001073b <CPU::detectFeatures()+0x1fb>
c0010725:	50                   	push   eax
c0010726:	50                   	push   eax
c0010727:	68 1c 22 02 c0       	push   0xc002221c
c001072c:	55                   	push   ebp
c001072d:	e8 1e 00 ff ff       	call   c0000750 <strcmp>
c0010732:	83 c4 10             	add    esp,0x10
c0010735:	85 c0                	test   eax,eax
c0010737:	74 48                	je     c0010781 <CPU::detectFeatures()+0x241>
c0010739:	eb 0f                	jmp    c001074a <CPU::detectFeatures()+0x20a>
c001073b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010745:	e9 c1 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c001074a:	50                   	push   eax
c001074b:	50                   	push   eax
c001074c:	68 29 22 02 c0       	push   0xc0022229
c0010751:	55                   	push   ebp
c0010752:	e8 f9 ff fe ff       	call   c0000750 <strcmp>
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	85 c0                	test   eax,eax
c001075c:	74 23                	je     c0010781 <CPU::detectFeatures()+0x241>
c001075e:	57                   	push   edi
c001075f:	57                   	push   edi
c0010760:	68 36 22 02 c0       	push   0xc0022236
c0010765:	55                   	push   ebp
c0010766:	e8 e5 ff fe ff       	call   c0000750 <strcmp>
c001076b:	83 c4 10             	add    esp,0x10
c001076e:	85 c0                	test   eax,eax
c0010770:	75 1e                	jne    c0010790 <CPU::detectFeatures()+0x250>
c0010772:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001077c:	e9 8a 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c0010781:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001078b:	e9 7b 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c0010790:	56                   	push   esi
c0010791:	56                   	push   esi
c0010792:	68 43 22 02 c0       	push   0xc0022243
c0010797:	55                   	push   ebp
c0010798:	e8 b3 ff fe ff       	call   c0000750 <strcmp>
c001079d:	83 c4 10             	add    esp,0x10
c00107a0:	85 c0                	test   eax,eax
c00107a2:	75 0f                	jne    c00107b3 <CPU::detectFeatures()+0x273>
c00107a4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00107ae:	e9 58 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00107b3:	51                   	push   ecx
c00107b4:	51                   	push   ecx
c00107b5:	68 02 22 02 c0       	push   0xc0022202
c00107ba:	55                   	push   ebp
c00107bb:	e8 90 ff fe ff       	call   c0000750 <strcmp>
c00107c0:	83 c4 10             	add    esp,0x10
c00107c3:	85 c0                	test   eax,eax
c00107c5:	75 0f                	jne    c00107d6 <CPU::detectFeatures()+0x296>
c00107c7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00107d1:	e9 35 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00107d6:	52                   	push   edx
c00107d7:	52                   	push   edx
c00107d8:	68 50 22 02 c0       	push   0xc0022250
c00107dd:	55                   	push   ebp
c00107de:	e8 6d ff fe ff       	call   c0000750 <strcmp>
c00107e3:	83 c4 10             	add    esp,0x10
c00107e6:	85 c0                	test   eax,eax
c00107e8:	75 0f                	jne    c00107f9 <CPU::detectFeatures()+0x2b9>
c00107ea:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00107f4:	e9 12 01 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00107f9:	50                   	push   eax
c00107fa:	50                   	push   eax
c00107fb:	68 5d 22 02 c0       	push   0xc002225d
c0010800:	55                   	push   ebp
c0010801:	e8 4a ff fe ff       	call   c0000750 <strcmp>
c0010806:	83 c4 10             	add    esp,0x10
c0010809:	85 c0                	test   eax,eax
c001080b:	75 0f                	jne    c001081c <CPU::detectFeatures()+0x2dc>
c001080d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010817:	e9 ef 00 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c001081c:	50                   	push   eax
c001081d:	50                   	push   eax
c001081e:	68 6a 22 02 c0       	push   0xc002226a
c0010823:	55                   	push   ebp
c0010824:	e8 27 ff fe ff       	call   c0000750 <strcmp>
c0010829:	83 c4 10             	add    esp,0x10
c001082c:	85 c0                	test   eax,eax
c001082e:	75 0f                	jne    c001083f <CPU::detectFeatures()+0x2ff>
c0010830:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001083a:	e9 cc 00 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c001083f:	50                   	push   eax
c0010840:	50                   	push   eax
c0010841:	68 77 22 02 c0       	push   0xc0022277
c0010846:	55                   	push   ebp
c0010847:	e8 04 ff fe ff       	call   c0000750 <strcmp>
c001084c:	83 c4 10             	add    esp,0x10
c001084f:	85 c0                	test   eax,eax
c0010851:	75 0f                	jne    c0010862 <CPU::detectFeatures()+0x322>
c0010853:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001085d:	e9 a9 00 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c0010862:	50                   	push   eax
c0010863:	50                   	push   eax
c0010864:	68 84 22 02 c0       	push   0xc0022284
c0010869:	55                   	push   ebp
c001086a:	e8 e1 fe fe ff       	call   c0000750 <strcmp>
c001086f:	83 c4 10             	add    esp,0x10
c0010872:	85 c0                	test   eax,eax
c0010874:	75 0f                	jne    c0010885 <CPU::detectFeatures()+0x345>
c0010876:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010880:	e9 86 00 00 00       	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c0010885:	50                   	push   eax
c0010886:	50                   	push   eax
c0010887:	68 91 22 02 c0       	push   0xc0022291
c001088c:	55                   	push   ebp
c001088d:	e8 be fe fe ff       	call   c0000750 <strcmp>
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	85 c0                	test   eax,eax
c0010897:	75 0c                	jne    c00108a5 <CPU::detectFeatures()+0x365>
c0010899:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00108a3:	eb 66                	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00108a5:	50                   	push   eax
c00108a6:	50                   	push   eax
c00108a7:	68 9e 22 02 c0       	push   0xc002229e
c00108ac:	55                   	push   ebp
c00108ad:	e8 9e fe fe ff       	call   c0000750 <strcmp>
c00108b2:	83 c4 10             	add    esp,0x10
c00108b5:	85 c0                	test   eax,eax
c00108b7:	75 0c                	jne    c00108c5 <CPU::detectFeatures()+0x385>
c00108b9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00108c3:	eb 46                	jmp    c001090b <CPU::detectFeatures()+0x3cb>
c00108c5:	57                   	push   edi
c00108c6:	57                   	push   edi
c00108c7:	68 ab 22 02 c0       	push   0xc00222ab
c00108cc:	55                   	push   ebp
c00108cd:	e8 7e fe fe ff       	call   c0000750 <strcmp>
c00108d2:	83 c4 10             	add    esp,0x10
c00108d5:	85 c0                	test   eax,eax
c00108d7:	74 e0                	je     c00108b9 <CPU::detectFeatures()+0x379>
c00108d9:	56                   	push   esi
c00108da:	56                   	push   esi
c00108db:	68 b8 22 02 c0       	push   0xc00222b8
c00108e0:	55                   	push   ebp
c00108e1:	e8 6a fe fe ff       	call   c0000750 <strcmp>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	85 c0                	test   eax,eax
c00108eb:	74 cc                	je     c00108b9 <CPU::detectFeatures()+0x379>
c00108ed:	51                   	push   ecx
c00108ee:	51                   	push   ecx
c00108ef:	68 c5 22 02 c0       	push   0xc00222c5
c00108f4:	55                   	push   ebp
c00108f5:	e8 56 fe fe ff       	call   c0000750 <strcmp>
c00108fa:	83 c4 10             	add    esp,0x10
c00108fd:	85 c0                	test   eax,eax
c00108ff:	74 b8                	je     c00108b9 <CPU::detectFeatures()+0x379>
c0010901:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001090b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010910:	0f 86 be 00 00 00    	jbe    c00109d4 <CPU::detectFeatures()+0x494>
c0010916:	83 ec 0c             	sub    esp,0xc
c0010919:	68 80 00 00 00       	push   0x80
c001091e:	e8 31 fb ff ff       	call   c0010454 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010923:	83 e0 01             	and    eax,0x1
c0010926:	c1 e0 06             	shl    eax,0x6
c0010929:	89 c2                	mov    edx,eax
c001092b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010931:	83 e0 bf             	and    eax,0xffffffbf
c0010934:	09 d0                	or     eax,edx
c0010936:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001093c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010943:	e8 0c fb ff ff       	call   c0010454 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010948:	83 e0 01             	and    eax,0x1
c001094b:	c1 e0 04             	shl    eax,0x4
c001094e:	89 c2                	mov    edx,eax
c0010950:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010956:	83 e0 ef             	and    eax,0xffffffef
c0010959:	09 d0                	or     eax,edx
c001095b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010961:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010968:	e8 e7 fa ff ff       	call   c0010454 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001096d:	89 c2                	mov    edx,eax
c001096f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010975:	c1 e2 07             	shl    edx,0x7
c0010978:	83 e0 7f             	and    eax,0x7f
c001097b:	09 d0                	or     eax,edx
c001097d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010983:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001098a:	e8 f3 fa ff ff       	call   c0010482 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001098f:	83 e0 01             	and    eax,0x1
c0010992:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010999:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001099f:	83 e0 f7             	and    eax,0xfffffff7
c00109a2:	09 d0                	or     eax,edx
c00109a4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00109b1:	e8 cc fa ff ff       	call   c0010482 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00109b6:	83 c4 10             	add    esp,0x10
c00109b9:	83 e0 01             	and    eax,0x1
c00109bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00109c3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109c9:	83 e0 fb             	and    eax,0xfffffffb
c00109cc:	09 d0                	or     eax,edx
c00109ce:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109db:	50                   	push   eax
c00109dc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00109e0:	50                   	push   eax
c00109e1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00109e5:	57                   	push   edi
c00109e6:	8d 74 24 28          	lea    esi,[esp+0x28]
c00109ea:	56                   	push   esi
c00109eb:	6a 01                	push   0x1
c00109ed:	e8 82 f9 ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00109f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109f6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00109fc:	89 c1                	mov    ecx,eax
c00109fe:	83 e2 f0             	and    edx,0xfffffff0
c0010a01:	83 e1 0f             	and    ecx,0xf
c0010a04:	09 ca                	or     edx,ecx
c0010a06:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010a0c:	89 c2                	mov    edx,eax
c0010a0e:	c1 ea 04             	shr    edx,0x4
c0010a11:	83 e2 0f             	and    edx,0xf
c0010a14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010a18:	89 d1                	mov    ecx,edx
c0010a1a:	83 c4 20             	add    esp,0x20
c0010a1d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010a23:	c1 e1 06             	shl    ecx,0x6
c0010a26:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010a2c:	09 ca                	or     edx,ecx
c0010a2e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010a35:	89 c2                	mov    edx,eax
c0010a37:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010a3d:	c1 ea 08             	shr    edx,0x8
c0010a40:	83 e1 3f             	and    ecx,0x3f
c0010a43:	83 e2 0f             	and    edx,0xf
c0010a46:	89 d5                	mov    ebp,edx
c0010a48:	83 e5 03             	and    ebp,0x3
c0010a4b:	c1 e5 06             	shl    ebp,0x6
c0010a4e:	09 e9                	or     ecx,ebp
c0010a50:	89 d5                	mov    ebp,edx
c0010a52:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010a58:	c1 ed 02             	shr    ebp,0x2
c0010a5b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010a61:	83 e1 c0             	and    ecx,0xffffffc0
c0010a64:	09 e9                	or     ecx,ebp
c0010a66:	89 c5                	mov    ebp,eax
c0010a68:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a6e:	c1 ed 08             	shr    ebp,0x8
c0010a71:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a77:	83 e5 30             	and    ebp,0x30
c0010a7a:	83 e1 cf             	and    ecx,0xffffffcf
c0010a7d:	09 e9                	or     ecx,ebp
c0010a7f:	83 fa 06             	cmp    edx,0x6
c0010a82:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a88:	74 05                	je     c0010a8f <CPU::detectFeatures()+0x54f>
c0010a8a:	83 fa 0f             	cmp    edx,0xf
c0010a8d:	75 64                	jne    c0010af3 <CPU::detectFeatures()+0x5b3>
c0010a8f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a95:	89 c1                	mov    ecx,eax
c0010a97:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a9d:	c1 e9 10             	shr    ecx,0x10
c0010aa0:	c1 e1 04             	shl    ecx,0x4
c0010aa3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010aa7:	0f b6 c9             	movzx  ecx,cl
c0010aaa:	c1 e1 06             	shl    ecx,0x6
c0010aad:	09 e9                	or     ecx,ebp
c0010aaf:	83 fa 0f             	cmp    edx,0xf
c0010ab2:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010ab9:	75 38                	jne    c0010af3 <CPU::detectFeatures()+0x5b3>
c0010abb:	c1 e8 14             	shr    eax,0x14
c0010abe:	83 c0 0f             	add    eax,0xf
c0010ac1:	0f b6 c0             	movzx  eax,al
c0010ac4:	89 c2                	mov    edx,eax
c0010ac6:	c1 e8 02             	shr    eax,0x2
c0010ac9:	83 e2 03             	and    edx,0x3
c0010acc:	89 d1                	mov    ecx,edx
c0010ace:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010ad4:	c1 e1 06             	shl    ecx,0x6
c0010ad7:	83 e2 3f             	and    edx,0x3f
c0010ada:	09 ca                	or     edx,ecx
c0010adc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010ae2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010ae8:	83 e2 c0             	and    edx,0xffffffc0
c0010aeb:	09 d0                	or     eax,edx
c0010aed:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010afc:	83 c8 07             	or     eax,0x7
c0010aff:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b05:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010b09:	50                   	push   eax
c0010b0a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010b0e:	55                   	push   ebp
c0010b0f:	57                   	push   edi
c0010b10:	56                   	push   esi
c0010b11:	68 00 00 00 80       	push   0x80000000
c0010b16:	e8 59 f8 ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b1b:	83 c4 20             	add    esp,0x20
c0010b1e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010b26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010b2a:	76 1e                	jbe    c0010b4a <CPU::detectFeatures()+0x60a>
c0010b2c:	83 ec 0c             	sub    esp,0xc
c0010b2f:	50                   	push   eax
c0010b30:	55                   	push   ebp
c0010b31:	57                   	push   edi
c0010b32:	56                   	push   esi
c0010b33:	68 01 00 00 80       	push   0x80000001
c0010b38:	e8 37 f8 ff ff       	call   c0010374 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010b3d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010b47:	83 c4 20             	add    esp,0x20
c0010b4a:	52                   	push   edx
c0010b4b:	52                   	push   edx
c0010b4c:	68 d1 22 02 c0       	push   0xc00222d1
c0010b51:	53                   	push   ebx
c0010b52:	e8 99 c0 ff ff       	call   c000cbf0 <Device::setName(char const*)>
c0010b57:	83 c4 10             	add    esp,0x10
c0010b5a:	eb 69                	jmp    c0010bc5 <CPU::detectFeatures()+0x685>
c0010b5c:	50                   	push   eax
c0010b5d:	50                   	push   eax
c0010b5e:	68 36 22 02 c0       	push   0xc0022236
c0010b63:	55                   	push   ebp
c0010b64:	e8 d7 fa fe ff       	call   c0000640 <strcpy>
c0010b69:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b73:	e8 4b f6 fe ff       	call   c00001c3 <is486>
c0010b78:	83 c4 10             	add    esp,0x10
c0010b7b:	85 c0                	test   eax,eax
c0010b7d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b83:	74 1f                	je     c0010ba4 <CPU::detectFeatures()+0x664>
c0010b85:	83 c8 07             	or     eax,0x7
c0010b88:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b8e:	0f 20 c0             	mov    eax,cr0
c0010b91:	83 e0 14             	and    eax,0x14
c0010b94:	83 f8 04             	cmp    eax,0x4
c0010b97:	75 10                	jne    c0010ba9 <CPU::detectFeatures()+0x669>
c0010b99:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b9f:	83 e0 fd             	and    eax,0xfffffffd
c0010ba2:	eb 1b                	jmp    c0010bbf <CPU::detectFeatures()+0x67f>
c0010ba4:	83 e0 f8             	and    eax,0xfffffff8
c0010ba7:	eb df                	jmp    c0010b88 <CPU::detectFeatures()+0x648>
c0010ba9:	e8 f0 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bae:	83 e0 01             	and    eax,0x1
c0010bb1:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bb4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bba:	83 e0 fd             	and    eax,0xfffffffd
c0010bbd:	09 d0                	or     eax,edx
c0010bbf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010bc5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010bcc:	74 17                	je     c0010be5 <CPU::detectFeatures()+0x6a5>
c0010bce:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010bd4:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010bda:	83 c8 10             	or     eax,0x10
c0010bdd:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010be3:	eb 20                	jmp    c0010c05 <CPU::detectFeatures()+0x6c5>
c0010be5:	e8 b4 f5 fe ff       	call   c000019e <hasLegacyFPU>
c0010bea:	83 e0 01             	and    eax,0x1
c0010bed:	8d 14 00             	lea    edx,[eax+eax*1]
c0010bf0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010bf6:	83 e0 fd             	and    eax,0xfffffffd
c0010bf9:	09 d0                	or     eax,edx
c0010bfb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010c01:	a8 02                	test   al,0x2
c0010c03:	75 c9                	jne    c0010bce <CPU::detectFeatures()+0x68e>
c0010c05:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010c0c:	83 c4 2c             	add    esp,0x2c
c0010c0f:	5b                   	pop    ebx
c0010c10:	5e                   	pop    esi
c0010c11:	5f                   	pop    edi
c0010c12:	5d                   	pop    ebp
c0010c13:	c3                   	ret    

c0010c14 <CPU::setupSMEP()>:
c0010c14:	0f 20 e0             	mov    eax,cr4
c0010c17:	0d 00 00 10 00       	or     eax,0x100000
c0010c1c:	0f 22 e0             	mov    cr4,eax
c0010c1f:	c3                   	ret    

c0010c20 <CPU::setupUMIP()>:
c0010c20:	0f 20 e0             	mov    eax,cr4
c0010c23:	80 cc 08             	or     ah,0x8
c0010c26:	0f 22 e0             	mov    cr4,eax
c0010c29:	c3                   	ret    

c0010c2a <CPU::setupTSC()>:
c0010c2a:	0f 20 e0             	mov    eax,cr4
c0010c2d:	83 c8 04             	or     eax,0x4
c0010c30:	0f 22 e0             	mov    cr4,eax
c0010c33:	c3                   	ret    

c0010c34 <CPU::setupLargePages()>:
c0010c34:	0f 20 e0             	mov    eax,cr4
c0010c37:	83 c8 10             	or     eax,0x10
c0010c3a:	0f 22 e0             	mov    cr4,eax
c0010c3d:	c3                   	ret    

c0010c3e <CPU::setupPAT()>:
c0010c3e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010c43:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010c4a:	74 2c                	je     c0010c78 <CPU::setupPAT()+0x3a>
c0010c4c:	53                   	push   ebx
c0010c4d:	83 ec 10             	sub    esp,0x10
c0010c50:	68 77 02 00 00       	push   0x277
c0010c55:	50                   	push   eax
c0010c56:	e8 65 64 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010c5b:	83 e2 f8             	and    edx,0xfffffff8
c0010c5e:	83 ca 01             	or     edx,0x1
c0010c61:	52                   	push   edx
c0010c62:	50                   	push   eax
c0010c63:	68 77 02 00 00       	push   0x277
c0010c68:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c6e:	e8 79 64 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c73:	83 c4 28             	add    esp,0x28
c0010c76:	5b                   	pop    ebx
c0010c77:	c3                   	ret    
c0010c78:	c3                   	ret    
c0010c79:	90                   	nop

c0010c7a <CPU::setupMTRR()>:
c0010c7a:	c3                   	ret    
c0010c7b:	90                   	nop

c0010c7c <CPU::setupGlobalPages()>:
c0010c7c:	0f 20 e0             	mov    eax,cr4
c0010c7f:	0c 80                	or     al,0x80
c0010c81:	0f 22 e0             	mov    cr4,eax
c0010c84:	c3                   	ret    
c0010c85:	90                   	nop

c0010c86 <CPU::allowUsermodeDataAccess()>:
c0010c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c8a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c91:	74 03                	je     c0010c96 <CPU::allowUsermodeDataAccess()+0x10>
c0010c93:	0f 01 cb             	stac   
c0010c96:	c3                   	ret    
c0010c97:	90                   	nop

c0010c98 <CPU::prohibitUsermodeDataAccess()>:
c0010c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c9c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010ca3:	74 03                	je     c0010ca8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010ca5:	0f 01 ca             	clac   
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop

c0010caa <CPU::setupSMAP()>:
c0010caa:	0f 20 e0             	mov    eax,cr4
c0010cad:	0d 00 00 20 00       	or     eax,0x200000
c0010cb2:	0f 22 e0             	mov    cr4,eax
c0010cb5:	eb e1                	jmp    c0010c98 <CPU::prohibitUsermodeDataAccess()>
c0010cb7:	90                   	nop

c0010cb8 <CPU::setupFeatures()>:
c0010cb8:	53                   	push   ebx
c0010cb9:	83 ec 08             	sub    esp,0x8
c0010cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cc0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010cc7:	74 18                	je     c0010ce1 <CPU::setupFeatures()+0x29>
c0010cc9:	83 ec 0c             	sub    esp,0xc
c0010ccc:	68 dd 22 02 c0       	push   0xc00222dd
c0010cd1:	e8 6f 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd9:	e8 42 ff ff ff       	call   c0010c20 <CPU::setupUMIP()>
c0010cde:	83 c4 10             	add    esp,0x10
c0010ce1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010ce8:	74 18                	je     c0010d02 <CPU::setupFeatures()+0x4a>
c0010cea:	83 ec 0c             	sub    esp,0xc
c0010ced:	68 e7 22 02 c0       	push   0xc00222e7
c0010cf2:	e8 4e 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cf7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cfa:	e8 2b ff ff ff       	call   c0010c2a <CPU::setupTSC()>
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010d09:	74 18                	je     c0010d23 <CPU::setupFeatures()+0x6b>
c0010d0b:	83 ec 0c             	sub    esp,0xc
c0010d0e:	68 f0 22 02 c0       	push   0xc00222f0
c0010d13:	e8 2d 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d1b:	e8 14 ff ff ff       	call   c0010c34 <CPU::setupLargePages()>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010d2a:	74 18                	je     c0010d44 <CPU::setupFeatures()+0x8c>
c0010d2c:	83 ec 0c             	sub    esp,0xc
c0010d2f:	68 f9 22 02 c0       	push   0xc00222f9
c0010d34:	e8 0c 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d3c:	e8 3b ff ff ff       	call   c0010c7c <CPU::setupGlobalPages()>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010d4b:	74 18                	je     c0010d65 <CPU::setupFeatures()+0xad>
c0010d4d:	83 ec 0c             	sub    esp,0xc
c0010d50:	68 0b 23 02 c0       	push   0xc002230b
c0010d55:	e8 eb 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010d5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5d:	e8 dc fe ff ff       	call   c0010c3e <CPU::setupPAT()>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d6c:	74 11                	je     c0010d7f <CPU::setupFeatures()+0xc7>
c0010d6e:	c7 44 24 10 14 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022314
c0010d76:	83 c4 08             	add    esp,0x8
c0010d79:	5b                   	pop    ebx
c0010d7a:	e9 c6 9b ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010d7f:	83 c4 08             	add    esp,0x8
c0010d82:	5b                   	pop    ebx
c0010d83:	c3                   	ret    

c0010d84 <CPU::open(int, int, void*)>:
c0010d84:	55                   	push   ebp
c0010d85:	57                   	push   edi
c0010d86:	56                   	push   esi
c0010d87:	53                   	push   ebx
c0010d88:	83 ec 18             	sub    esp,0x18
c0010d8b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d97:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d9d:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010da3:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010da9:	50                   	push   eax
c0010daa:	e8 0f 66 ff ff       	call   c00073be <GDT::setup()>
c0010daf:	83 c4 0c             	add    esp,0xc
c0010db2:	6a 00                	push   0x0
c0010db4:	68 ef be ad de       	push   0xdeadbeef
c0010db9:	55                   	push   ebp
c0010dba:	e8 c9 81 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010dbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010dc2:	e8 a1 81 ff ff       	call   c0008f68 <TSS::flush()>
c0010dc7:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010dcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd0:	e8 4d 68 ff ff       	call   c0007622 <IDT::setup()>
c0010dd5:	b8 00 04 00 00       	mov    eax,0x400
c0010dda:	0f 23 f8             	mov    db7,eax
c0010ddd:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010de7:	e8 d3 6f ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010df5:	85 f6                	test   esi,esi
c0010df7:	89 38                	mov    DWORD PTR [eax],edi
c0010df9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010dff:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e02:	74 10                	je     c0010e14 <CPU::open(int, int, void*)+0x90>
c0010e04:	50                   	push   eax
c0010e05:	50                   	push   eax
c0010e06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010e0c:	56                   	push   esi
c0010e0d:	e8 9c 8a ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010e12:	eb 0d                	jmp    c0010e21 <CPU::open(int, int, void*)+0x9d>
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	68 1e 23 02 c0       	push   0xc002231e
c0010e1c:	e8 9e 08 00 00       	call   c00116bf <KePanic(char const*)>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	83 ec 0c             	sub    esp,0xc
c0010e27:	68 2c 23 02 c0       	push   0xc002232c
c0010e2c:	e8 8e 01 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0010e31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e34:	e8 07 f7 ff ff       	call   c0010540 <CPU::detectFeatures()>
c0010e39:	c7 04 24 4f 23 02 c0 	mov    DWORD PTR [esp],0xc002234f
c0010e40:	e8 7a 01 00 00       	call   c0010fbf <KeSetBootMessage(char const*)>
c0010e45:	e8 eb 73 00 00       	call   c0018235 <HalInitialise()>
c0010e4a:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010e4f:	83 e0 10             	and    eax,0x10
c0010e52:	83 f8 01             	cmp    eax,0x1
c0010e55:	19 c0                	sbb    eax,eax
c0010e57:	83 e0 46             	and    eax,0x46
c0010e5a:	83 c0 1e             	add    eax,0x1e
c0010e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e60:	e8 28 d6 ff ff       	call   c000e48d <setupTimer(int)>
c0010e65:	83 c4 10             	add    esp,0x10
c0010e68:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e6e:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e75:	74 0c                	je     c0010e83 <CPU::open(int, int, void*)+0xff>
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	53                   	push   ebx
c0010e7b:	e8 38 fe ff ff       	call   c0010cb8 <CPU::setupFeatures()>
c0010e80:	83 c4 10             	add    esp,0x10
c0010e83:	83 c4 0c             	add    esp,0xc
c0010e86:	31 c0                	xor    eax,eax
c0010e88:	5b                   	pop    ebx
c0010e89:	5e                   	pop    esi
c0010e8a:	5f                   	pop    edi
c0010e8b:	5d                   	pop    ebp
c0010e8c:	c3                   	ret    

c0010e8d <KeInitialiseAtexit()>:
c0010e8d:	83 ec 10             	sub    esp,0x10
c0010e90:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e9a:	6a 60                	push   0x60
c0010e9c:	6a 00                	push   0x0
c0010e9e:	68 20 be 02 c0       	push   0xc002be20
c0010ea3:	e8 48 f6 fe ff       	call   c00004f0 <memset>
c0010ea8:	83 c4 1c             	add    esp,0x1c
c0010eab:	c3                   	ret    

c0010eac <KeRegisterAtexit(void (*)(void*), void*)>:
c0010eac:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010eb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010eb5:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec0:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010ec7:	40                   	inc    eax
c0010ec8:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010ecd:	83 f8 17             	cmp    eax,0x17
c0010ed0:	7e 0d                	jle    c0010edf <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ed2:	c7 44 24 04 90 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022390
c0010eda:	e9 e0 07 00 00       	jmp    c00116bf <KePanic(char const*)>
c0010edf:	c3                   	ret    

c0010ee0 <KeExecuteAtexit()>:
c0010ee0:	53                   	push   ebx
c0010ee1:	31 db                	xor    ebx,ebx
c0010ee3:	83 ec 08             	sub    esp,0x8
c0010ee6:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010eec:	7e 50                	jle    c0010f3e <KeExecuteAtexit()+0x5e>
c0010eee:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010ef5:	85 c0                	test   eax,eax
c0010ef7:	74 42                	je     c0010f3b <KeExecuteAtexit()+0x5b>
c0010ef9:	51                   	push   ecx
c0010efa:	50                   	push   eax
c0010efb:	53                   	push   ebx
c0010efc:	68 a9 23 02 c0       	push   0xc00223a9
c0010f01:	e8 3f 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f06:	58                   	pop    eax
c0010f07:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010f0e:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010f15:	c7 04 24 cb 23 02 c0 	mov    DWORD PTR [esp],0xc00223cb
c0010f1c:	e8 24 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f21:	c7 04 24 2b 35 02 c0 	mov    DWORD PTR [esp],0xc002352b
c0010f28:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010f33:	e8 0d 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	43                   	inc    ebx
c0010f3c:	eb a8                	jmp    c0010ee6 <KeExecuteAtexit()+0x6>
c0010f3e:	83 c4 08             	add    esp,0x8
c0010f41:	5b                   	pop    ebx
c0010f42:	c3                   	ret    

c0010f43 <KeDisplaySplashScreen()>:
c0010f43:	55                   	push   ebp
c0010f44:	bd 05 00 00 00       	mov    ebp,0x5
c0010f49:	57                   	push   edi
c0010f4a:	bf 0a 00 00 00       	mov    edi,0xa
c0010f4f:	56                   	push   esi
c0010f50:	31 f6                	xor    esi,esi
c0010f52:	53                   	push   ebx
c0010f53:	31 db                	xor    ebx,ebx
c0010f55:	83 ec 0c             	sub    esp,0xc
c0010f58:	0f b6 96 80 37 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc880]
c0010f5f:	89 d0                	mov    eax,edx
c0010f61:	85 d2                	test   edx,edx
c0010f63:	74 52                	je     c0010fb7 <KeDisplaySplashScreen()+0x74>
c0010f65:	80 bb b6 37 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc84a],0xdb
c0010f6c:	75 13                	jne    c0010f81 <KeDisplaySplashScreen()+0x3e>
c0010f6e:	0f b6 8b b5 37 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc84b]
c0010f75:	83 e1 fe             	and    ecx,0xfffffffe
c0010f78:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f7e:	75 01                	jne    c0010f81 <KeDisplaySplashScreen()+0x3e>
c0010f80:	47                   	inc    edi
c0010f81:	83 fa 0d             	cmp    edx,0xd
c0010f84:	74 28                	je     c0010fae <KeDisplaySplashScreen()+0x6b>
c0010f86:	83 fa 0a             	cmp    edx,0xa
c0010f89:	75 0a                	jne    c0010f95 <KeDisplaySplashScreen()+0x52>
c0010f8b:	45                   	inc    ebp
c0010f8c:	bf 0a 00 00 00       	mov    edi,0xa
c0010f91:	31 db                	xor    ebx,ebx
c0010f93:	eb 19                	jmp    c0010fae <KeDisplaySplashScreen()+0x6b>
c0010f95:	83 ec 0c             	sub    esp,0xc
c0010f98:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f9b:	55                   	push   ebp
c0010f9c:	0f be c0             	movsx  eax,al
c0010f9f:	52                   	push   edx
c0010fa0:	43                   	inc    ebx
c0010fa1:	6a 00                	push   0x0
c0010fa3:	6a 0e                	push   0xe
c0010fa5:	50                   	push   eax
c0010fa6:	e8 09 7f 00 00       	call   c0018eb4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010fab:	83 c4 20             	add    esp,0x20
c0010fae:	46                   	inc    esi
c0010faf:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010fb5:	75 a1                	jne    c0010f58 <KeDisplaySplashScreen()+0x15>
c0010fb7:	83 c4 0c             	add    esp,0xc
c0010fba:	5b                   	pop    ebx
c0010fbb:	5e                   	pop    esi
c0010fbc:	5f                   	pop    edi
c0010fbd:	5d                   	pop    ebp
c0010fbe:	c3                   	ret    

c0010fbf <KeSetBootMessage(char const*)>:
c0010fbf:	57                   	push   edi
c0010fc0:	56                   	push   esi
c0010fc1:	53                   	push   ebx
c0010fc2:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010fc8:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010fcf:	68 9e 00 00 00       	push   0x9e
c0010fd4:	6a 00                	push   0x0
c0010fd6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010fda:	56                   	push   esi
c0010fdb:	e8 10 f5 fe ff       	call   c00004f0 <memset>
c0010fe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fe3:	e8 88 f5 fe ff       	call   c0000570 <strlen>
c0010fe8:	ba 50 00 00 00       	mov    edx,0x50
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	29 c2                	sub    edx,eax
c0010ff2:	31 c9                	xor    ecx,ecx
c0010ff4:	83 e2 fe             	and    edx,0xfffffffe
c0010ff7:	01 f2                	add    edx,esi
c0010ff9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ffe:	84 c0                	test   al,al
c0011000:	74 0a                	je     c001100c <KeSetBootMessage(char const*)+0x4d>
c0011002:	80 cc 0f             	or     ah,0xf
c0011005:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0011009:	41                   	inc    ecx
c001100a:	eb ed                	jmp    c0010ff9 <KeSetBootMessage(char const*)+0x3a>
c001100c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0011011:	b9 9e 00 00 00       	mov    ecx,0x9e
c0011016:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011018:	81 c4 a0 00 00 00    	add    esp,0xa0
c001101e:	5b                   	pop    ebx
c001101f:	5e                   	pop    esi
c0011020:	5f                   	pop    edi
c0011021:	c3                   	ret    
c0011022:	66 90                	xchg   ax,ax

c0011024 <Krnl::handlePowerButton()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	e8 ee 06 00 00       	call   c001171a <KeHandlePowerButton()>
c001102c:	90                   	nop
c001102d:	83 c4 0c             	add    esp,0xc
c0011030:	c3                   	ret    
c0011031:	8d 76 00             	lea    esi,[esi+0x0]

c0011034 <Krnl::handleSleepButton()>:
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	e8 13 07 00 00       	call   c001174f <KeHandleSleepButton()>
c001103c:	90                   	nop
c001103d:	83 c4 0c             	add    esp,0xc
c0011040:	c3                   	ret    

c0011041 <KeCalculateCRC32(unsigned char*, int)>:
c0011041:	53                   	push   ebx
c0011042:	83 c8 ff             	or     eax,0xffffffff
c0011045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011049:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001104d:	01 cb                	add    ebx,ecx
c001104f:	39 d9                	cmp    ecx,ebx
c0011051:	74 15                	je     c0011068 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0011053:	41                   	inc    ecx
c0011054:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0011057:	31 c2                	xor    edx,eax
c0011059:	c1 e8 08             	shr    eax,0x8
c001105c:	0f b6 d2             	movzx  edx,dl
c001105f:	33 04 95 e0 38 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc720]
c0011066:	eb e7                	jmp    c001104f <KeCalculateCRC32(unsigned char*, int)+0xe>
c0011068:	f7 d0                	not    eax
c001106a:	5b                   	pop    ebx
c001106b:	c3                   	ret    

c001106c <EnvVarContainer::getEnv(char const*)>:
c001106c:	57                   	push   edi
c001106d:	56                   	push   esi
c001106e:	53                   	push   ebx
c001106f:	31 db                	xor    ebx,ebx
c0011071:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011075:	39 1e                	cmp    DWORD PTR [esi],ebx
c0011077:	7e 2b                	jle    c00110a4 <EnvVarContainer::getEnv(char const*)+0x38>
c0011079:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0011080:	50                   	push   eax
c0011081:	50                   	push   eax
c0011082:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011085:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011088:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001108c:	e8 bf f6 fe ff       	call   c0000750 <strcmp>
c0011091:	83 c4 10             	add    esp,0x10
c0011094:	85 c0                	test   eax,eax
c0011096:	75 09                	jne    c00110a1 <EnvVarContainer::getEnv(char const*)+0x35>
c0011098:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001109b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001109f:	eb 05                	jmp    c00110a6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00110a1:	43                   	inc    ebx
c00110a2:	eb d1                	jmp    c0011075 <EnvVarContainer::getEnv(char const*)+0x9>
c00110a4:	31 c0                	xor    eax,eax
c00110a6:	5b                   	pop    ebx
c00110a7:	5e                   	pop    esi
c00110a8:	5f                   	pop    edi
c00110a9:	c3                   	ret    

c00110aa <EnvVarContainer::setEnv(char const*, char const*)>:
c00110aa:	55                   	push   ebp
c00110ab:	57                   	push   edi
c00110ac:	56                   	push   esi
c00110ad:	53                   	push   ebx
c00110ae:	83 ec 28             	sub    esp,0x28
c00110b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110b5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00110b9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110bd:	56                   	push   esi
c00110be:	e8 ad f4 fe ff       	call   c0000570 <strlen>
c00110c3:	40                   	inc    eax
c00110c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00110c7:	e8 ea 69 ff ff       	call   c0007ab6 <malloc>
c00110cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110d3:	e8 98 f4 fe ff       	call   c0000570 <strlen>
c00110d8:	40                   	inc    eax
c00110d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00110dc:	e8 d5 69 ff ff       	call   c0007ab6 <malloc>
c00110e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00110e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110e8:	e8 83 f4 fe ff       	call   c0000570 <strlen>
c00110ed:	83 c4 0c             	add    esp,0xc
c00110f0:	40                   	inc    eax
c00110f1:	50                   	push   eax
c00110f2:	6a 00                	push   0x0
c00110f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00110f8:	e8 f3 f3 fe ff       	call   c00004f0 <memset>
c00110fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0011100:	e8 6b f4 fe ff       	call   c0000570 <strlen>
c0011105:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011109:	8d 48 01             	lea    ecx,[eax+0x1]
c001110c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001110e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011111:	89 de                	mov    esi,ebx
c0011113:	e8 58 f4 fe ff       	call   c0000570 <strlen>
c0011118:	83 c4 0c             	add    esp,0xc
c001111b:	40                   	inc    eax
c001111c:	50                   	push   eax
c001111d:	6a 00                	push   0x0
c001111f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011123:	e8 c8 f3 fe ff       	call   c00004f0 <memset>
c0011128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001112b:	e8 40 f4 fe ff       	call   c0000570 <strlen>
c0011130:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011134:	8d 48 01             	lea    ecx,[eax+0x1]
c0011137:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011139:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001113c:	40                   	inc    eax
c001113d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011140:	c1 e0 03             	shl    eax,0x3
c0011143:	5a                   	pop    edx
c0011144:	59                   	pop    ecx
c0011145:	50                   	push   eax
c0011146:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011149:	e8 54 69 ff ff       	call   c0007aa2 <realloc>
c001114e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011152:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011155:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011158:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001115c:	b9 08 00 00 00       	mov    ecx,0x8
c0011161:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011163:	83 c4 2c             	add    esp,0x2c
c0011166:	5b                   	pop    ebx
c0011167:	5e                   	pop    esi
c0011168:	5f                   	pop    edi
c0011169:	5d                   	pop    ebp
c001116a:	c3                   	ret    
c001116b:	90                   	nop

c001116c <EnvVarContainer::deleteEnv(char const*)>:
c001116c:	c3                   	ret    
c001116d:	90                   	nop

c001116e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001116e:	55                   	push   ebp
c001116f:	57                   	push   edi
c0011170:	56                   	push   esi
c0011171:	53                   	push   ebx
c0011172:	81 ec 38 01 00 00    	sub    esp,0x138
c0011178:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001117f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0011186:	68 14 01 00 00       	push   0x114
c001118b:	e8 26 69 ff ff       	call   c0007ab6 <malloc>
c0011190:	83 c4 0c             	add    esp,0xc
c0011193:	89 c3                	mov    ebx,eax
c0011195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011198:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001119f:	50                   	push   eax
c00111a0:	e8 49 aa ff ff       	call   c000bbee <File::File(char const*, Process*)>
c00111a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a8:	e8 23 ad ff ff       	call   c000bed0 <File::exists()>
c00111ad:	83 c4 10             	add    esp,0x10
c00111b0:	84 c0                	test   al,al
c00111b2:	75 31                	jne    c00111e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00111b4:	50                   	push   eax
c00111b5:	50                   	push   eax
c00111b6:	6a 12                	push   0x12
c00111b8:	53                   	push   ebx
c00111b9:	e8 4e aa ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c00111be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00111c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00111c6:	e8 a5 f3 fe ff       	call   c0000570 <strlen>
c00111cb:	5a                   	pop    edx
c00111cc:	31 d2                	xor    edx,edx
c00111ce:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00111d2:	51                   	push   ecx
c00111d3:	56                   	push   esi
c00111d4:	52                   	push   edx
c00111d5:	50                   	push   eax
c00111d6:	53                   	push   ebx
c00111d7:	ff d7                	call   edi
c00111d9:	83 c4 14             	add    esp,0x14
c00111dc:	53                   	push   ebx
c00111dd:	e8 88 aa ff ff       	call   c000bc6a <File::close()>
c00111e2:	83 c4 10             	add    esp,0x10
c00111e5:	56                   	push   esi
c00111e6:	31 f6                	xor    esi,esi
c00111e8:	68 00 01 00 00       	push   0x100
c00111ed:	6a 00                	push   0x0
c00111ef:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00111f3:	50                   	push   eax
c00111f4:	e8 f7 f2 fe ff       	call   c00004f0 <memset>
c00111f9:	5f                   	pop    edi
c00111fa:	58                   	pop    eax
c00111fb:	6a 01                	push   0x1
c00111fd:	53                   	push   ebx
c00111fe:	e8 09 aa ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001120e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011216:	83 ec 0c             	sub    esp,0xc
c0011219:	8b 03                	mov    eax,DWORD PTR [ebx]
c001121b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001121f:	51                   	push   ecx
c0011220:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011224:	52                   	push   edx
c0011225:	6a 00                	push   0x0
c0011227:	6a 01                	push   0x1
c0011229:	53                   	push   ebx
c001122a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001122d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0011232:	83 c4 20             	add    esp,0x20
c0011235:	89 c2                	mov    edx,eax
c0011237:	85 c0                	test   eax,eax
c0011239:	0f 84 36 01 00 00    	je     c0011375 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001123f:	83 f8 0d             	cmp    eax,0xd
c0011242:	0f 84 22 01 00 00    	je     c001136a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011248:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001124d:	0f 84 f0 00 00 00    	je     c0011343 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0011253:	83 f8 0a             	cmp    eax,0xa
c0011256:	74 13                	je     c001126b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011258:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001125d:	74 0c                	je     c001126b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001125f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011265:	0f 8e f6 00 00 00    	jle    c0011361 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001126b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001126f:	83 ec 0c             	sub    esp,0xc
c0011272:	8d 78 01             	lea    edi,[eax+0x1]
c0011275:	57                   	push   edi
c0011276:	e8 3b 68 ff ff       	call   c0007ab6 <malloc>
c001127b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001127f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011283:	8d 56 04             	lea    edx,[esi+0x4]
c0011286:	89 14 24             	mov    DWORD PTR [esp],edx
c0011289:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001128d:	e8 24 68 ff ff       	call   c0007ab6 <malloc>
c0011292:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011296:	83 c4 0c             	add    esp,0xc
c0011299:	57                   	push   edi
c001129a:	6a 00                	push   0x0
c001129c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00112a0:	e8 4b f2 fe ff       	call   c00004f0 <memset>
c00112a5:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112a9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00112b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112b3:	83 c4 0c             	add    esp,0xc
c00112b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112ba:	52                   	push   edx
c00112bb:	6a 00                	push   0x0
c00112bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00112c1:	e8 2a f2 fe ff       	call   c00004f0 <memset>
c00112c6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00112ca:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00112ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00112d1:	e8 9a f2 fe ff       	call   c0000570 <strlen>
c00112d6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00112da:	89 c1                	mov    ecx,eax
c00112dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00112e1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00112e4:	40                   	inc    eax
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00112eb:	85 d2                	test   edx,edx
c00112ed:	75 0c                	jne    c00112fb <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	6a 08                	push   0x8
c00112f4:	e8 bd 67 ff ff       	call   c0007ab6 <malloc>
c00112f9:	eb 0c                	jmp    c0011307 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c00112fb:	c1 e0 03             	shl    eax,0x3
c00112fe:	51                   	push   ecx
c00112ff:	51                   	push   ecx
c0011300:	50                   	push   eax
c0011301:	52                   	push   edx
c0011302:	e8 9b 67 ff ff       	call   c0007aa2 <realloc>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001130d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011310:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0011313:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011317:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001131b:	b9 08 00 00 00       	mov    ecx,0x8
c0011320:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011322:	31 f6                	xor    esi,esi
c0011324:	50                   	push   eax
c0011325:	68 00 01 00 00       	push   0x100
c001132a:	6a 00                	push   0x0
c001132c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011330:	50                   	push   eax
c0011331:	e8 ba f1 fe ff       	call   c00004f0 <memset>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011341:	eb 27                	jmp    c001136a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011343:	83 f8 3d             	cmp    eax,0x3d
c0011346:	74 1e                	je     c0011366 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011348:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001134e:	7f 07                	jg     c0011357 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011350:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011354:	46                   	inc    esi
c0011355:	eb 13                	jmp    c001136a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011357:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001135f:	eb 09                	jmp    c001136a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011361:	83 f8 3d             	cmp    eax,0x3d
c0011364:	75 ea                	jne    c0011350 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011366:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001136a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001136f:	0f 85 99 fe ff ff    	jne    c001120e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011375:	83 ec 0c             	sub    esp,0xc
c0011378:	53                   	push   ebx
c0011379:	e8 ec a8 ff ff       	call   c000bc6a <File::close()>
c001137e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011383:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011386:	81 c4 3c 01 00 00    	add    esp,0x13c
c001138c:	5b                   	pop    ebx
c001138d:	5e                   	pop    esi
c001138e:	5f                   	pop    edi
c001138f:	5d                   	pop    ebp
c0011390:	c3                   	ret    
c0011391:	90                   	nop

c0011392 <EnvVarContainer::__loadSystem()>:
c0011392:	83 ec 10             	sub    esp,0x10
c0011395:	68 e0 3c 02 c0       	push   0xc0023ce0
c001139a:	68 d0 23 02 c0       	push   0xc00223d0
c001139f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a3:	e8 c6 fd ff ff       	call   c001116e <EnvVarContainer::loadFrom(char const*, char const*)>
c00113a8:	83 c4 1c             	add    esp,0x1c
c00113ab:	c3                   	ret    

c00113ac <EnvVarContainer::__loadUser()>:
c00113ac:	c3                   	ret    
c00113ad:	90                   	nop

c00113ae <EnvVarContainer::EnvVarContainer(Process*)>:
c00113ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00113b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00113c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113ce:	90                   	nop
c00113cf:	c3                   	ret    

c00113d0 <EnvVarContainer::~EnvVarContainer()>:
c00113d0:	83 ec 0c             	sub    esp,0xc
c00113d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113da:	85 c0                	test   eax,eax
c00113dc:	74 1d                	je     c00113fb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00113e4:	85 c0                	test   eax,eax
c00113e6:	74 13                	je     c00113fb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00113e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ef:	83 ec 0c             	sub    esp,0xc
c00113f2:	50                   	push   eax
c00113f3:	e8 ce 66 ff ff       	call   c0007ac6 <free>
c00113f8:	83 c4 10             	add    esp,0x10
c00113fb:	90                   	nop
c00113fc:	83 c4 0c             	add    esp,0xc
c00113ff:	c3                   	ret    

c0011400 <KeGetEnv(Process*, char const*)>:
c0011400:	53                   	push   ebx
c0011401:	83 ec 08             	sub    esp,0x8
c0011404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011408:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001140c:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011412:	74 04                	je     c0011418 <KeGetEnv(Process*, char const*)+0x18>
c0011414:	85 c0                	test   eax,eax
c0011416:	75 0b                	jne    c0011423 <KeGetEnv(Process*, char const*)+0x23>
c0011418:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001141d:	85 c0                	test   eax,eax
c001141f:	75 19                	jne    c001143a <KeGetEnv(Process*, char const*)+0x3a>
c0011421:	eb 27                	jmp    c001144a <KeGetEnv(Process*, char const*)+0x4a>
c0011423:	52                   	push   edx
c0011424:	52                   	push   edx
c0011425:	53                   	push   ebx
c0011426:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001142c:	e8 3b fc ff ff       	call   c001106c <EnvVarContainer::getEnv(char const*)>
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	85 c0                	test   eax,eax
c0011436:	75 28                	jne    c0011460 <KeGetEnv(Process*, char const*)+0x60>
c0011438:	eb de                	jmp    c0011418 <KeGetEnv(Process*, char const*)+0x18>
c001143a:	52                   	push   edx
c001143b:	52                   	push   edx
c001143c:	53                   	push   ebx
c001143d:	50                   	push   eax
c001143e:	e8 29 fc ff ff       	call   c001106c <EnvVarContainer::getEnv(char const*)>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	85 c0                	test   eax,eax
c0011448:	75 16                	jne    c0011460 <KeGetEnv(Process*, char const*)+0x60>
c001144a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001144e:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011457:	83 c4 08             	add    esp,0x8
c001145a:	5b                   	pop    ebx
c001145b:	e9 0c fc ff ff       	jmp    c001106c <EnvVarContainer::getEnv(char const*)>
c0011460:	83 c4 08             	add    esp,0x8
c0011463:	5b                   	pop    ebx
c0011464:	c3                   	ret    

c0011465 <KeSetEnvSystem(char const*, char const*)>:
c0011465:	83 ec 10             	sub    esp,0x10
c0011468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001146c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011470:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c0011476:	e8 2f fc ff ff       	call   c00110aa <EnvVarContainer::setEnv(char const*, char const*)>
c001147b:	83 c4 1c             	add    esp,0x1c
c001147e:	c3                   	ret    

c001147f <KeSetEnvUser(char const*, char const*)>:
c001147f:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011484:	85 c0                	test   eax,eax
c0011486:	74 15                	je     c001149d <KeSetEnvUser(char const*, char const*)+0x1e>
c0011488:	83 ec 10             	sub    esp,0x10
c001148b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001148f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011493:	50                   	push   eax
c0011494:	e8 11 fc ff ff       	call   c00110aa <EnvVarContainer::setEnv(char const*, char const*)>
c0011499:	83 c4 1c             	add    esp,0x1c
c001149c:	c3                   	ret    
c001149d:	c3                   	ret    

c001149e <KeSetEnvProcess(Process*, char const*, char const*)>:
c001149e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00114a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114ac:	e9 f9 fb ff ff       	jmp    c00110aa <EnvVarContainer::setEnv(char const*, char const*)>

c00114b1 <KeDeleteEnvSystem(char const*)>:
c00114b1:	c3                   	ret    

c00114b2 <KeDeleteEnvUser(char const*)>:
c00114b2:	c3                   	ret    

c00114b3 <KeDeleteEnvProcess(Process*, char const*)>:
c00114b3:	c3                   	ret    

c00114b4 <KeNewProcessEnv(Process*)>:
c00114b4:	83 ec 28             	sub    esp,0x28
c00114b7:	6a 0c                	push   0xc
c00114b9:	e8 f8 65 ff ff       	call   c0007ab6 <malloc>
c00114be:	5a                   	pop    edx
c00114bf:	59                   	pop    ecx
c00114c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c4:	50                   	push   eax
c00114c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c9:	e8 e0 fe ff ff       	call   c00113ae <EnvVarContainer::EnvVarContainer(Process*)>
c00114ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d2:	83 c4 2c             	add    esp,0x2c
c00114d5:	c3                   	ret    

c00114d6 <KeCopyProcessEnv(Process*, Process*)>:
c00114d6:	57                   	push   edi
c00114d7:	56                   	push   esi
c00114d8:	53                   	push   ebx
c00114d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114dd:	83 ec 0c             	sub    esp,0xc
c00114e0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00114e6:	6a 0c                	push   0xc
c00114e8:	e8 c9 65 ff ff       	call   c0007ab6 <malloc>
c00114ed:	89 c3                	mov    ebx,eax
c00114ef:	58                   	pop    eax
c00114f0:	5a                   	pop    edx
c00114f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f5:	53                   	push   ebx
c00114f6:	e8 b3 fe ff ff       	call   c00113ae <EnvVarContainer::EnvVarContainer(Process*)>
c00114fb:	8b 07                	mov    eax,DWORD PTR [edi]
c00114fd:	89 03                	mov    DWORD PTR [ebx],eax
c00114ff:	c1 e0 03             	shl    eax,0x3
c0011502:	89 04 24             	mov    DWORD PTR [esp],eax
c0011505:	e8 ac 65 ff ff       	call   c0007ab6 <malloc>
c001150a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001150d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001150f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011512:	c1 e1 03             	shl    ecx,0x3
c0011515:	89 c7                	mov    edi,eax
c0011517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011519:	83 c4 10             	add    esp,0x10
c001151c:	89 d8                	mov    eax,ebx
c001151e:	5b                   	pop    ebx
c001151f:	5e                   	pop    esi
c0011520:	5f                   	pop    edi
c0011521:	c3                   	ret    

c0011522 <KeLoadSystemEnv()>:
c0011522:	53                   	push   ebx
c0011523:	83 ec 14             	sub    esp,0x14
c0011526:	6a 0c                	push   0xc
c0011528:	e8 89 65 ff ff       	call   c0007ab6 <malloc>
c001152d:	89 c3                	mov    ebx,eax
c001152f:	58                   	pop    eax
c0011530:	5a                   	pop    edx
c0011531:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011537:	53                   	push   ebx
c0011538:	e8 71 fe ff ff       	call   c00113ae <EnvVarContainer::EnvVarContainer(Process*)>
c001153d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011540:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c0011546:	e8 47 fe ff ff       	call   c0011392 <EnvVarContainer::__loadSystem()>
c001154b:	83 c4 18             	add    esp,0x18
c001154e:	5b                   	pop    ebx
c001154f:	c3                   	ret    

c0011550 <KeLoadUserEnv()>:
c0011550:	53                   	push   ebx
c0011551:	83 ec 14             	sub    esp,0x14
c0011554:	6a 0c                	push   0xc
c0011556:	e8 5b 65 ff ff       	call   c0007ab6 <malloc>
c001155b:	89 c3                	mov    ebx,eax
c001155d:	58                   	pop    eax
c001155e:	5a                   	pop    edx
c001155f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011565:	53                   	push   ebx
c0011566:	e8 43 fe ff ff       	call   c00113ae <EnvVarContainer::EnvVarContainer(Process*)>
c001156b:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011571:	83 c4 18             	add    esp,0x18
c0011574:	5b                   	pop    ebx
c0011575:	c3                   	ret    

c0011576 <KeFlushEnv()>:
c0011576:	c3                   	ret    

c0011577 <KeGetProcessTotalEnvCount(Process*)>:
c0011577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157b:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011581:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011587:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001158c:	8b 00                	mov    eax,DWORD PTR [eax]
c001158e:	03 01                	add    eax,DWORD PTR [ecx]
c0011590:	85 d2                	test   edx,edx
c0011592:	74 02                	je     c0011596 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011594:	03 02                	add    eax,DWORD PTR [edx]
c0011596:	c3                   	ret    

c0011597 <KeGetProcessEnvPair(Process*, int)>:
c0011597:	57                   	push   edi
c0011598:	56                   	push   esi
c0011599:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001159f:	53                   	push   ebx
c00115a0:	85 f6                	test   esi,esi
c00115a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115aa:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00115b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00115b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00115b6:	75 16                	jne    c00115ce <KeGetProcessEnvPair(Process*, int)+0x37>
c00115b8:	39 c2                	cmp    edx,eax
c00115ba:	7c 16                	jl     c00115d2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115bc:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00115c2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00115c4:	01 c6                	add    esi,eax
c00115c6:	39 d6                	cmp    esi,edx
c00115c8:	7e 3c                	jle    c0011606 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115ca:	29 c2                	sub    edx,eax
c00115cc:	eb 04                	jmp    c00115d2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00115ce:	39 c2                	cmp    edx,eax
c00115d0:	7d 05                	jge    c00115d7 <KeGetProcessEnvPair(Process*, int)+0x40>
c00115d2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00115d5:	eb 20                	jmp    c00115f7 <KeGetProcessEnvPair(Process*, int)+0x60>
c00115d7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00115d9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00115dc:	39 d1                	cmp    ecx,edx
c00115de:	7e 04                	jle    c00115e4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00115e0:	29 c2                	sub    edx,eax
c00115e2:	eb 10                	jmp    c00115f4 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00115e4:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c00115ea:	03 0e                	add    ecx,DWORD PTR [esi]
c00115ec:	39 d1                	cmp    ecx,edx
c00115ee:	7e 16                	jle    c0011606 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00115f0:	29 c2                	sub    edx,eax
c00115f2:	29 fa                	sub    edx,edi
c00115f4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00115f7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00115fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00115fc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00115ff:	89 03                	mov    DWORD PTR [ebx],eax
c0011601:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011604:	eb 1d                	jmp    c0011623 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	68 f2 23 02 c0       	push   0xc00223f2
c001160e:	e8 ac 00 00 00       	call   c00116bf <KePanic(char const*)>
c0011613:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011619:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	89 d8                	mov    eax,ebx
c0011625:	5b                   	pop    ebx
c0011626:	5e                   	pop    esi
c0011627:	5f                   	pop    edi
c0011628:	c2 04 00             	ret    0x4

c001162b <CPU::current()>:
c001162b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011630:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011636:	c3                   	ret    

c0011637 <operator new(unsigned long)>:
c0011637:	e9 7a 64 ff ff       	jmp    c0007ab6 <malloc>

c001163c <operator delete(void*)>:
c001163c:	e9 95 64 ff ff       	jmp    c0007ad6 <rfree>

c0011641 <disableIRQs()>:
c0011641:	fa                   	cli    
c0011642:	c3                   	ret    

c0011643 <enableIRQs()>:
c0011643:	fb                   	sti    
c0011644:	c3                   	ret    

c0011645 <lockScheduler()>:
c0011645:	fa                   	cli    
c0011646:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001164c:	c3                   	ret    

c001164d <unlockScheduler()>:
c001164d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011652:	48                   	dec    eax
c0011653:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011658:	75 01                	jne    c001165b <unlockScheduler()+0xe>
c001165a:	fb                   	sti    
c001165b:	c3                   	ret    

c001165c <lockStuff()>:
c001165c:	fa                   	cli    
c001165d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011663:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011669:	c3                   	ret    

c001166a <unlockStuff()>:
c001166a:	83 ec 0c             	sub    esp,0xc
c001166d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0011672:	48                   	dec    eax
c0011673:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011678:	75 18                	jne    c0011692 <unlockStuff()+0x28>
c001167a:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011681:	74 0f                	je     c0011692 <unlockStuff()+0x28>
c0011683:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001168d:	e8 ce 4a 00 00       	call   c0016160 <schedule()>
c0011692:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011697:	48                   	dec    eax
c0011698:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001169d:	75 01                	jne    c00116a0 <unlockStuff()+0x36>
c001169f:	fb                   	sti    
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	c3                   	ret    

c00116a4 <Virt::getAKernelVAS()>:
c00116a4:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00116a9:	c3                   	ret    

c00116aa <__not_memcpy>:
c00116aa:	57                   	push   edi
c00116ab:	56                   	push   esi
c00116ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00116b8:	89 c7                	mov    edi,eax
c00116ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116bc:	5e                   	pop    esi
c00116bd:	5f                   	pop    edi
c00116be:	c3                   	ret    

c00116bf <KePanic(char const*)>:
c00116bf:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00116c6:	e9 3b 6a 00 00       	jmp    c0018106 <HalPanic(char const*)>

c00116cb <KePowerThread(void*)>:
c00116cb:	83 ec 0c             	sub    esp,0xc
c00116ce:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00116d3:	48                   	dec    eax
c00116d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00116d9:	75 01                	jne    c00116dc <KePowerThread(void*)+0x11>
c00116db:	fb                   	sti    
c00116dc:	83 ec 0c             	sub    esp,0xc
c00116df:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116e6:	6a 0a                	push   0xa
c00116e8:	e8 b7 4d 00 00       	call   c00164a4 <sleep(unsigned int)>
c00116ed:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c00116f4:	83 c4 10             	add    esp,0x10
c00116f7:	eb e3                	jmp    c00116dc <KePowerThread(void*)+0x11>

c00116f9 <KeChangePowerSettings(PowerSettings)>:
c00116f9:	57                   	push   edi
c00116fa:	b9 09 00 00 00       	mov    ecx,0x9
c00116ff:	56                   	push   esi
c0011700:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011705:	fc                   	cld    
c0011706:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001170a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001170c:	5e                   	pop    esi
c001170d:	5f                   	pop    edi
c001170e:	c3                   	ret    

c001170f <KeUserIOReceived()>:
c001170f:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011719:	c3                   	ret    

c001171a <KeHandlePowerButton()>:
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0011722:	83 f8 02             	cmp    eax,0x2
c0011725:	75 10                	jne    c0011737 <KeHandlePowerButton()+0x1d>
c0011727:	83 ec 0c             	sub    esp,0xc
c001172a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011730:	e8 f3 59 ff ff       	call   c0007128 <Computer::shutdown()>
c0011735:	eb 11                	jmp    c0011748 <KeHandlePowerButton()+0x2e>
c0011737:	48                   	dec    eax
c0011738:	75 11                	jne    c001174b <KeHandlePowerButton()+0x31>
c001173a:	83 ec 0c             	sub    esp,0xc
c001173d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011743:	e8 10 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011748:	83 c4 10             	add    esp,0x10
c001174b:	83 c4 0c             	add    esp,0xc
c001174e:	c3                   	ret    

c001174f <KeHandleSleepButton()>:
c001174f:	83 ec 0c             	sub    esp,0xc
c0011752:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0011757:	83 f8 02             	cmp    eax,0x2
c001175a:	75 10                	jne    c001176c <KeHandleSleepButton()+0x1d>
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011765:	e8 be 59 ff ff       	call   c0007128 <Computer::shutdown()>
c001176a:	eb 11                	jmp    c001177d <KeHandleSleepButton()+0x2e>
c001176c:	48                   	dec    eax
c001176d:	75 11                	jne    c0011780 <KeHandleSleepButton()+0x31>
c001176f:	83 ec 0c             	sub    esp,0xc
c0011772:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011778:	e8 db 59 ff ff       	call   c0007158 <Computer::sleep()>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	83 c4 0c             	add    esp,0xc
c0011783:	c3                   	ret    

c0011784 <KeSetupPowerManager()>:
c0011784:	83 ec 0c             	sub    esp,0xc
c0011787:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011791:	68 f0 00 00 00       	push   0xf0
c0011796:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001179d:	6a 00                	push   0x0
c001179f:	68 cb 16 01 c0       	push   0xc00116cb
c00117a4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00117aa:	e8 61 47 00 00       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c00117af:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00117b9:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00117c3:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00117cd:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00117d7:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c00117e1:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c00117eb:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c00117f5:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c00117ff:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011809:	83 c4 1c             	add    esp,0x1c
c001180c:	c3                   	ret    

c001180d <KeRand()>:
c001180d:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011817:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011821:	53                   	push   ebx
c0011822:	01 c1                	add    ecx,eax
c0011824:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011829:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001182f:	01 ca                	add    edx,ecx
c0011831:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011836:	83 d2 00             	adc    edx,0x0
c0011839:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001183e:	0f b7 da             	movzx  ebx,dx
c0011841:	89 da                	mov    edx,ebx
c0011843:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011849:	0f ac d0 0e          	shrd   eax,edx,0xe
c001184d:	5b                   	pop    ebx
c001184e:	c3                   	ret    

c001184f <KeSeedRand(unsigned int)>:
c001184f:	53                   	push   ebx
c0011850:	83 ec 08             	sub    esp,0x8
c0011853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011857:	e8 c9 6b 00 00       	call   c0018425 <HalGetRand()>
c001185c:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c0011866:	31 d8                	xor    eax,ebx
c0011868:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c001186d:	e8 9b ff ff ff       	call   c001180d <KeRand()>
c0011872:	83 c4 08             	add    esp,0x8
c0011875:	5b                   	pop    ebx
c0011876:	eb 95                	jmp    c001180d <KeRand()>

c0011878 <KeInitRand()>:
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	e8 9a 69 00 00       	call   c001821a <HalQueryPerformanceCounter()>
c0011880:	0f 20 da             	mov    edx,cr3
c0011883:	0f 22 da             	mov    cr3,edx
c0011886:	0f 20 da             	mov    edx,cr3
c0011889:	0f 22 da             	mov    cr3,edx
c001188c:	0f 20 da             	mov    edx,cr3
c001188f:	0f 22 da             	mov    cr3,edx
c0011892:	0f 20 da             	mov    edx,cr3
c0011895:	0f 22 da             	mov    cr3,edx
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	35 03 8a 95 38       	xor    eax,0x38958a03
c00118a0:	50                   	push   eax
c00118a1:	e8 a9 ff ff ff       	call   c001184f <KeSeedRand(unsigned int)>
c00118a6:	83 c4 1c             	add    esp,0x1c
c00118a9:	c3                   	ret    
c00118aa:	66 90                	xchg   ax,ax

c00118ac <KeResolveCompatibilitySymbol(char*)>:
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	83 ec 08             	sub    esp,0x8
c00118b2:	68 0c 24 02 c0       	push   0xc002240c
c00118b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118bb:	e8 90 ee fe ff       	call   c0000750 <strcmp>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	85 c0                	test   eax,eax
c00118c5:	0f 94 c0             	sete   al
c00118c8:	0f b6 c0             	movzx  eax,al
c00118cb:	85 c0                	test   eax,eax
c00118cd:	74 0d                	je     c00118dc <KeResolveCompatibilitySymbol(char*)+0x30>
c00118cf:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00118d4:	e9 8b 01 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118d9:	8d 76 00             	lea    esi,[esi+0x0]
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	68 15 24 02 c0       	push   0xc0022415
c00118e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e8:	e8 63 ee fe ff       	call   c0000750 <strcmp>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	85 c0                	test   eax,eax
c00118f2:	0f 94 c0             	sete   al
c00118f5:	0f b6 c0             	movzx  eax,al
c00118f8:	85 c0                	test   eax,eax
c00118fa:	74 0c                	je     c0011908 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00118fc:	b8 d0 f7 01 c0       	mov    eax,0xc001f7d0
c0011901:	e9 5e 01 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011906:	66 90                	xchg   ax,ax
c0011908:	83 ec 08             	sub    esp,0x8
c001190b:	68 1f 24 02 c0       	push   0xc002241f
c0011910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011914:	e8 37 ee fe ff       	call   c0000750 <strcmp>
c0011919:	83 c4 10             	add    esp,0x10
c001191c:	85 c0                	test   eax,eax
c001191e:	0f 94 c0             	sete   al
c0011921:	0f b6 c0             	movzx  eax,al
c0011924:	85 c0                	test   eax,eax
c0011926:	74 0c                	je     c0011934 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011928:	b8 04 f5 01 c0       	mov    eax,0xc001f504
c001192d:	e9 32 01 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011932:	66 90                	xchg   ax,ax
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 28 24 02 c0       	push   0xc0022428
c001193c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011940:	e8 0b ee fe ff       	call   c0000750 <strcmp>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	85 c0                	test   eax,eax
c001194a:	0f 94 c0             	sete   al
c001194d:	0f b6 c0             	movzx  eax,al
c0011950:	85 c0                	test   eax,eax
c0011952:	74 0c                	je     c0011960 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011954:	b8 bf 16 01 c0       	mov    eax,0xc00116bf
c0011959:	e9 06 01 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001195e:	66 90                	xchg   ax,ax
c0011960:	83 ec 08             	sub    esp,0x8
c0011963:	68 3b 24 02 c0       	push   0xc002243b
c0011968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001196c:	e8 df ed fe ff       	call   c0000750 <strcmp>
c0011971:	83 c4 10             	add    esp,0x10
c0011974:	85 c0                	test   eax,eax
c0011976:	0f 94 c0             	sete   al
c0011979:	0f b6 c0             	movzx  eax,al
c001197c:	85 c0                	test   eax,eax
c001197e:	74 0c                	je     c001198c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011980:	b8 bf 0f 01 c0       	mov    eax,0xc0010fbf
c0011985:	e9 da 00 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001198a:	66 90                	xchg   ax,ax
c001198c:	83 ec 08             	sub    esp,0x8
c001198f:	68 58 24 02 c0       	push   0xc0022458
c0011994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011998:	e8 b3 ed fe ff       	call   c0000750 <strcmp>
c001199d:	83 c4 10             	add    esp,0x10
c00119a0:	85 c0                	test   eax,eax
c00119a2:	0f 94 c0             	sete   al
c00119a5:	0f b6 c0             	movzx  eax,al
c00119a8:	85 c0                	test   eax,eax
c00119aa:	74 0c                	je     c00119b8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00119ac:	b8 d0 f8 01 c0       	mov    eax,0xc001f8d0
c00119b1:	e9 ae 00 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119b6:	66 90                	xchg   ax,ax
c00119b8:	83 ec 08             	sub    esp,0x8
c00119bb:	68 62 24 02 c0       	push   0xc0022462
c00119c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c4:	e8 87 ed fe ff       	call   c0000750 <strcmp>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	85 c0                	test   eax,eax
c00119ce:	0f 94 c0             	sete   al
c00119d1:	0f b6 c0             	movzx  eax,al
c00119d4:	85 c0                	test   eax,eax
c00119d6:	74 0c                	je     c00119e4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00119d8:	b8 50 f6 01 c0       	mov    eax,0xc001f650
c00119dd:	e9 82 00 00 00       	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119e2:	66 90                	xchg   ax,ax
c00119e4:	83 ec 08             	sub    esp,0x8
c00119e7:	68 6b 24 02 c0       	push   0xc002246b
c00119ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f0:	e8 5b ed fe ff       	call   c0000750 <strcmp>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	85 c0                	test   eax,eax
c00119fa:	0f 94 c0             	sete   al
c00119fd:	0f b6 c0             	movzx  eax,al
c0011a00:	85 c0                	test   eax,eax
c0011a02:	74 08                	je     c0011a0c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011a04:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a09:	eb 59                	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a0b:	90                   	nop
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	68 83 24 02 c0       	push   0xc0022483
c0011a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a18:	e8 33 ed fe ff       	call   c0000750 <strcmp>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	85 c0                	test   eax,eax
c0011a22:	0f 94 c0             	sete   al
c0011a25:	0f b6 c0             	movzx  eax,al
c0011a28:	85 c0                	test   eax,eax
c0011a2a:	74 08                	je     c0011a34 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011a2c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011a31:	eb 31                	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a33:	90                   	nop
c0011a34:	83 ec 08             	sub    esp,0x8
c0011a37:	68 90 24 02 c0       	push   0xc0022490
c0011a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a40:	e8 0b ed fe ff       	call   c0000750 <strcmp>
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	85 c0                	test   eax,eax
c0011a4a:	0f 94 c0             	sete   al
c0011a4d:	0f b6 c0             	movzx  eax,al
c0011a50:	85 c0                	test   eax,eax
c0011a52:	74 08                	je     c0011a5c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011a54:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011a59:	eb 09                	jmp    c0011a64 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011a5b:	90                   	nop
c0011a5c:	b8 00 00 00 00       	mov    eax,0x0
c0011a61:	8d 76 00             	lea    esi,[esi+0x0]
c0011a64:	83 c4 0c             	add    esp,0xc
c0011a67:	c3                   	ret    

c0011a68 <KiSigKill(int)>:
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	6a 00                	push   0x0
c0011a6d:	6a 00                	push   0x0
c0011a6f:	6a ff                	push   0xffffffff
c0011a71:	6a 01                	push   0x1
c0011a73:	e8 da 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a78:	83 c4 1c             	add    esp,0x1c
c0011a7b:	c3                   	ret    

c0011a7c <KiDefaultSignalHandlerIgnore(int)>:
c0011a7c:	c3                   	ret    

c0011a7d <KiDefaultSignalHandlerPause(int)>:
c0011a7d:	57                   	push   edi
c0011a7e:	b9 07 00 00 00       	mov    ecx,0x7
c0011a83:	56                   	push   esi
c0011a84:	be d9 24 02 c0       	mov    esi,0xc00224d9
c0011a89:	83 ec 24             	sub    esp,0x24
c0011a8c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a90:	fc                   	cld    
c0011a91:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a93:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a97:	50                   	push   eax
c0011a98:	6a 00                	push   0x0
c0011a9a:	6a 00                	push   0x0
c0011a9c:	6a 27                	push   0x27
c0011a9e:	e8 af 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011aa3:	83 c4 34             	add    esp,0x34
c0011aa6:	5e                   	pop    esi
c0011aa7:	5f                   	pop    edi
c0011aa8:	c3                   	ret    

c0011aa9 <KiDefaultSignalHandlerResume(int)>:
c0011aa9:	57                   	push   edi
c0011aaa:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011aaf:	56                   	push   esi
c0011ab0:	be f5 24 02 c0       	mov    esi,0xc00224f5
c0011ab5:	83 ec 24             	sub    esp,0x24
c0011ab8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011abc:	fc                   	cld    
c0011abd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011abf:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011ac3:	50                   	push   eax
c0011ac4:	6a 00                	push   0x0
c0011ac6:	6a 00                	push   0x0
c0011ac8:	6a 27                	push   0x27
c0011aca:	e8 83 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011acf:	83 c4 34             	add    esp,0x34
c0011ad2:	5e                   	pop    esi
c0011ad3:	5f                   	pop    edi
c0011ad4:	c3                   	ret    

c0011ad5 <KeDeinitSignals(SigHandlerBlock*)>:
c0011ad5:	e9 ec 5f ff ff       	jmp    c0007ac6 <free>

c0011ada <KeInitSignals()>:
c0011ada:	53                   	push   ebx
c0011adb:	83 ec 14             	sub    esp,0x14
c0011ade:	68 c8 00 00 00       	push   0xc8
c0011ae3:	e8 ce 5f ff ff       	call   c0007ab6 <malloc>
c0011ae8:	83 c4 0c             	add    esp,0xc
c0011aeb:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011af5:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011aff:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011b06:	89 c3                	mov    ebx,eax
c0011b08:	6a 20                	push   0x20
c0011b0a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011b10:	6a 00                	push   0x0
c0011b12:	50                   	push   eax
c0011b13:	e8 d8 e9 fe ff       	call   c00004f0 <memset>
c0011b18:	83 c4 0c             	add    esp,0xc
c0011b1b:	6a 44                	push   0x44
c0011b1d:	6a 00                	push   0x0
c0011b1f:	53                   	push   ebx
c0011b20:	e8 cb e9 fe ff       	call   c00004f0 <memset>
c0011b25:	89 d8                	mov    eax,ebx
c0011b27:	83 c4 18             	add    esp,0x18
c0011b2a:	5b                   	pop    ebx
c0011b2b:	c3                   	ret    

c0011b2c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011b2c:	53                   	push   ebx
c0011b2d:	b8 01 00 00 00       	mov    eax,0x1
c0011b32:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b3a:	83 f9 10             	cmp    ecx,0x10
c0011b3d:	7f 21                	jg     c0011b60 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011b3f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b46:	89 03                	mov    DWORD PTR [ebx],eax
c0011b48:	b8 01 00 00 00       	mov    eax,0x1
c0011b4d:	d3 e0                	shl    eax,cl
c0011b4f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011b53:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011b56:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011b5e:	31 c0                	xor    eax,eax
c0011b60:	5b                   	pop    ebx
c0011b61:	c3                   	ret    

c0011b62 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011b62:	55                   	push   ebp
c0011b63:	57                   	push   edi
c0011b64:	bf 08 00 00 00       	mov    edi,0x8
c0011b69:	56                   	push   esi
c0011b6a:	53                   	push   ebx
c0011b6b:	83 ec 18             	sub    esp,0x18
c0011b6e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b72:	68 12 25 02 c0       	push   0xc0022512
c0011b77:	e8 c9 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b7c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b83:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	31 c9                	xor    ecx,ecx
c0011b8e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b92:	99                   	cdq    
c0011b93:	f7 ff                	idiv   edi
c0011b95:	8d 42 24             	lea    eax,[edx+0x24]
c0011b98:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b9c:	85 f6                	test   esi,esi
c0011b9e:	75 1a                	jne    c0011bba <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ba0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ba4:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ba8:	50                   	push   eax
c0011ba9:	50                   	push   eax
c0011baa:	52                   	push   edx
c0011bab:	68 23 25 02 c0       	push   0xc0022523
c0011bb0:	e8 90 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011bb5:	83 c4 10             	add    esp,0x10
c0011bb8:	eb 1b                	jmp    c0011bd5 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011bba:	41                   	inc    ecx
c0011bbb:	83 f9 08             	cmp    ecx,0x8
c0011bbe:	75 ce                	jne    c0011b8e <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011bc0:	83 ec 0c             	sub    esp,0xc
c0011bc3:	be 01 00 00 00       	mov    esi,0x1
c0011bc8:	68 44 25 02 c0       	push   0xc0022544
c0011bcd:	e8 73 8d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011bd2:	83 c4 10             	add    esp,0x10
c0011bd5:	83 c4 0c             	add    esp,0xc
c0011bd8:	89 f0                	mov    eax,esi
c0011bda:	5b                   	pop    ebx
c0011bdb:	5e                   	pop    esi
c0011bdc:	5f                   	pop    edi
c0011bdd:	5d                   	pop    ebp
c0011bde:	c3                   	ret    

c0011bdf <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011bdf:	55                   	push   ebp
c0011be0:	57                   	push   edi
c0011be1:	56                   	push   esi
c0011be2:	53                   	push   ebx
c0011be3:	51                   	push   ecx
c0011be4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011be8:	85 db                	test   ebx,ebx
c0011bea:	0f 84 bc 00 00 00    	je     c0011cac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bf0:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011bf7:	0f 84 af 00 00 00    	je     c0011cac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bfd:	31 c9                	xor    ecx,ecx
c0011bff:	bf 08 00 00 00       	mov    edi,0x8
c0011c04:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011c0a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011c0d:	99                   	cdq    
c0011c0e:	f7 ff                	idiv   edi
c0011c10:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011c17:	85 ed                	test   ebp,ebp
c0011c19:	0f 84 9e 00 00 00    	je     c0011cbd <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011c1f:	89 e9                	mov    ecx,ebp
c0011c21:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011c27:	bf 01 00 00 00       	mov    edi,0x1
c0011c2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011c2f:	d3 e7                	shl    edi,cl
c0011c31:	31 c9                	xor    ecx,ecx
c0011c33:	b8 01 00 00 00       	mov    eax,0x1
c0011c38:	d3 e0                	shl    eax,cl
c0011c3a:	85 04 24             	test   DWORD PTR [esp],eax
c0011c3d:	74 06                	je     c0011c45 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011c3f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011c43:	75 67                	jne    c0011cac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c45:	41                   	inc    ecx
c0011c46:	83 f9 11             	cmp    ecx,0x11
c0011c49:	75 e8                	jne    c0011c33 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011c4b:	46                   	inc    esi
c0011c4c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011c4f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c55:	09 f8                	or     eax,edi
c0011c57:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011c62:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c68:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011c6f:	31 c0                	xor    eax,eax
c0011c71:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c79:	74 09                	je     c0011c84 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c7b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c82:	eb 06                	jmp    c0011c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c84:	40                   	inc    eax
c0011c85:	83 f8 08             	cmp    eax,0x8
c0011c88:	75 e7                	jne    c0011c71 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c8a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c91:	83 fd 09             	cmp    ebp,0x9
c0011c94:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c96:	75 07                	jne    c0011c9f <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c98:	b8 68 1a 01 c0       	mov    eax,0xc0011a68
c0011c9d:	eb 31                	jmp    c0011cd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c9f:	83 f8 01             	cmp    eax,0x1
c0011ca2:	75 0c                	jne    c0011cb0 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011ca4:	f7 d7                	not    edi
c0011ca6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011cac:	31 c0                	xor    eax,eax
c0011cae:	eb 20                	jmp    c0011cd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cb0:	85 c0                	test   eax,eax
c0011cb2:	75 1c                	jne    c0011cd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cb4:	8b 04 ad 40 3d 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc2c0]
c0011cbb:	eb 13                	jmp    c0011cd0 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011cbd:	46                   	inc    esi
c0011cbe:	41                   	inc    ecx
c0011cbf:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011cc5:	83 f9 08             	cmp    ecx,0x8
c0011cc8:	0f 85 36 ff ff ff    	jne    c0011c04 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011cce:	eb dc                	jmp    c0011cac <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011cd0:	5a                   	pop    edx
c0011cd1:	5b                   	pop    ebx
c0011cd2:	5e                   	pop    esi
c0011cd3:	5f                   	pop    edi
c0011cd4:	5d                   	pop    ebp
c0011cd5:	c3                   	ret    

c0011cd6 <KiCheckSignalZ>:
c0011cd6:	83 ec 10             	sub    esp,0x10
c0011cd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011cdd:	50                   	push   eax
c0011cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ce3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ce6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cec:	e8 ee fe ff ff       	call   c0011bdf <KeCheckSignal(SigHandlerBlock*, int*)>
c0011cf1:	5a                   	pop    edx
c0011cf2:	31 d2                	xor    edx,edx
c0011cf4:	59                   	pop    ecx
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	74 19                	je     c0011d12 <KiCheckSignalZ+0x3c>
c0011cf9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011cff:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011d02:	89 02                	mov    DWORD PTR [edx],eax
c0011d04:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d0f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011d12:	89 d0                	mov    eax,edx
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	c3                   	ret    

c0011d18 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011d18:	56                   	push   esi
c0011d19:	53                   	push   ebx
c0011d1a:	bb 01 00 00 00       	mov    ebx,0x1
c0011d1f:	52                   	push   edx
c0011d20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d28:	d3 e3                	shl    ebx,cl
c0011d2a:	83 f9 10             	cmp    ecx,0x10
c0011d2d:	7f 08                	jg     c0011d37 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011d2f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011d35:	75 10                	jne    c0011d47 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011d37:	83 ec 0c             	sub    esp,0xc
c0011d3a:	68 55 25 02 c0       	push   0xc0022555
c0011d3f:	e8 7b f9 ff ff       	call   c00116bf <KePanic(char const*)>
c0011d44:	83 c4 10             	add    esp,0x10
c0011d47:	f7 d3                	not    ebx
c0011d49:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011d4f:	58                   	pop    eax
c0011d50:	5b                   	pop    ebx
c0011d51:	5e                   	pop    esi
c0011d52:	c3                   	ret    

c0011d53 <KiFinishSignalZ>:
c0011d53:	53                   	push   ebx
c0011d54:	83 ec 10             	sub    esp,0x10
c0011d57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d5b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011d5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d66:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011d6c:	e8 a7 ff ff ff       	call   c0011d18 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d71:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d77:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d7e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d85:	83 c4 18             	add    esp,0x18
c0011d88:	5b                   	pop    ebx
c0011d89:	c3                   	ret    

c0011d8a <SysSeekDir(regs*)>:
c0011d8a:	31 c0                	xor    eax,eax
c0011d8c:	31 d2                	xor    edx,edx
c0011d8e:	c3                   	ret    

c0011d8f <SysTellDir(regs*)>:
c0011d8f:	31 c0                	xor    eax,eax
c0011d91:	31 d2                	xor    edx,edx
c0011d93:	c3                   	ret    

c0011d94 <SysVerify(regs*)>:
c0011d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d98:	31 d2                	xor    edx,edx
c0011d9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d9d:	c3                   	ret    

c0011d9e <SysGetArgc(regs*)>:
c0011d9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011dac:	89 c2                	mov    edx,eax
c0011dae:	c1 fa 1f             	sar    edx,0x1f
c0011db1:	c3                   	ret    

c0011db2 <SysTTYName(regs*)>:
c0011db2:	b8 01 00 00 00       	mov    eax,0x1
c0011db7:	31 d2                	xor    edx,edx
c0011db9:	c3                   	ret    

c0011dba <SysFormatDisk(regs*)>:
c0011dba:	56                   	push   esi
c0011dbb:	53                   	push   ebx
c0011dbc:	83 ec 04             	sub    esp,0x4
c0011dbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011dc3:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011dc9:	eb 28                	jmp    c0011df3 <SysFormatDisk(regs*)+0x39>
c0011dcb:	83 ec 0c             	sub    esp,0xc
c0011dce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011dd1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011dd4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dd6:	51                   	push   ecx
c0011dd7:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011dda:	51                   	push   ecx
c0011ddb:	50                   	push   eax
c0011ddc:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011de3:	50                   	push   eax
c0011de4:	53                   	push   ebx
c0011de5:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011de8:	83 c4 20             	add    esp,0x20
c0011deb:	83 f8 08             	cmp    eax,0x8
c0011dee:	75 14                	jne    c0011e04 <SysFormatDisk(regs*)+0x4a>
c0011df0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011df3:	85 db                	test   ebx,ebx
c0011df5:	75 d4                	jne    c0011dcb <SysFormatDisk(regs*)+0x11>
c0011df7:	83 c4 04             	add    esp,0x4
c0011dfa:	b8 03 00 00 00       	mov    eax,0x3
c0011dff:	31 d2                	xor    edx,edx
c0011e01:	5b                   	pop    ebx
c0011e02:	5e                   	pop    esi
c0011e03:	c3                   	ret    
c0011e04:	85 c0                	test   eax,eax
c0011e06:	74 1f                	je     c0011e27 <SysFormatDisk(regs*)+0x6d>
c0011e08:	83 f8 09             	cmp    eax,0x9
c0011e0b:	74 0d                	je     c0011e1a <SysFormatDisk(regs*)+0x60>
c0011e0d:	83 c4 04             	add    esp,0x4
c0011e10:	b8 02 00 00 00       	mov    eax,0x2
c0011e15:	31 d2                	xor    edx,edx
c0011e17:	5b                   	pop    ebx
c0011e18:	5e                   	pop    esi
c0011e19:	c3                   	ret    
c0011e1a:	83 c4 04             	add    esp,0x4
c0011e1d:	b8 01 00 00 00       	mov    eax,0x1
c0011e22:	31 d2                	xor    edx,edx
c0011e24:	5b                   	pop    ebx
c0011e25:	5e                   	pop    esi
c0011e26:	c3                   	ret    
c0011e27:	83 c4 04             	add    esp,0x4
c0011e2a:	31 c0                	xor    eax,eax
c0011e2c:	31 d2                	xor    edx,edx
c0011e2e:	5b                   	pop    ebx
c0011e2f:	5e                   	pop    esi
c0011e30:	c3                   	ret    

c0011e31 <SysSetDiskVolumeLabel(regs*)>:
c0011e31:	56                   	push   esi
c0011e32:	53                   	push   ebx
c0011e33:	83 ec 04             	sub    esp,0x4
c0011e36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011e3a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011e3d:	83 f8 19             	cmp    eax,0x19
c0011e40:	77 33                	ja     c0011e75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e42:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011e49:	85 c9                	test   ecx,ecx
c0011e4b:	74 28                	je     c0011e75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e4d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011e50:	85 db                	test   ebx,ebx
c0011e52:	74 21                	je     c0011e75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e54:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011e5a:	85 d2                	test   edx,edx
c0011e5c:	74 17                	je     c0011e75 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011e5e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011e60:	53                   	push   ebx
c0011e61:	50                   	push   eax
c0011e62:	51                   	push   ecx
c0011e63:	52                   	push   edx
c0011e64:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	89 c2                	mov    edx,eax
c0011e6c:	83 c4 04             	add    esp,0x4
c0011e6f:	c1 fa 1f             	sar    edx,0x1f
c0011e72:	5b                   	pop    ebx
c0011e73:	5e                   	pop    esi
c0011e74:	c3                   	ret    
c0011e75:	83 c4 04             	add    esp,0x4
c0011e78:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e82:	5b                   	pop    ebx
c0011e83:	5e                   	pop    esi
c0011e84:	c3                   	ret    

c0011e85 <SysGetDiskVolumeLabel(regs*)>:
c0011e85:	57                   	push   edi
c0011e86:	56                   	push   esi
c0011e87:	53                   	push   ebx
c0011e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e8f:	83 fa 19             	cmp    edx,0x19
c0011e92:	77 3c                	ja     c0011ed0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e94:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e9b:	85 c9                	test   ecx,ecx
c0011e9d:	74 31                	je     c0011ed0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e9f:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ea2:	85 db                	test   ebx,ebx
c0011ea4:	74 2a                	je     c0011ed0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ea6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ea9:	85 f6                	test   esi,esi
c0011eab:	74 23                	je     c0011ed0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ead:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	74 19                	je     c0011ed0 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011eb7:	83 ec 0c             	sub    esp,0xc
c0011eba:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ebc:	56                   	push   esi
c0011ebd:	53                   	push   ebx
c0011ebe:	52                   	push   edx
c0011ebf:	51                   	push   ecx
c0011ec0:	50                   	push   eax
c0011ec1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011ec4:	83 c4 20             	add    esp,0x20
c0011ec7:	89 c2                	mov    edx,eax
c0011ec9:	5b                   	pop    ebx
c0011eca:	c1 fa 1f             	sar    edx,0x1f
c0011ecd:	5e                   	pop    esi
c0011ece:	5f                   	pop    edi
c0011ecf:	c3                   	ret    
c0011ed0:	5b                   	pop    ebx
c0011ed1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011ed6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011edb:	5e                   	pop    esi
c0011edc:	5f                   	pop    edi
c0011edd:	c3                   	ret    

c0011ede <SysShutdown(regs*)>:
c0011ede:	83 ec 0c             	sub    esp,0xc
c0011ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ee5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ee8:	85 c0                	test   eax,eax
c0011eea:	74 18                	je     c0011f04 <SysShutdown(regs*)+0x26>
c0011eec:	83 f8 01             	cmp    eax,0x1
c0011eef:	74 38                	je     c0011f29 <SysShutdown(regs*)+0x4b>
c0011ef1:	83 f8 02             	cmp    eax,0x2
c0011ef4:	74 24                	je     c0011f1a <SysShutdown(regs*)+0x3c>
c0011ef6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011efb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f00:	83 c4 0c             	add    esp,0xc
c0011f03:	c3                   	ret    
c0011f04:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f09:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f0b:	6a 00                	push   0x0
c0011f0d:	6a 00                	push   0x0
c0011f0f:	6a 00                	push   0x0
c0011f11:	50                   	push   eax
c0011f12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f15:	83 c4 10             	add    esp,0x10
c0011f18:	eb dc                	jmp    c0011ef6 <SysShutdown(regs*)+0x18>
c0011f1a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011f1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f21:	6a 00                	push   0x0
c0011f23:	6a 00                	push   0x0
c0011f25:	6a 01                	push   0x1
c0011f27:	eb e8                	jmp    c0011f11 <SysShutdown(regs*)+0x33>
c0011f29:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011f2e:	85 c0                	test   eax,eax
c0011f30:	74 02                	je     c0011f34 <SysShutdown(regs*)+0x56>
c0011f32:	ff d0                	call   eax
c0011f34:	31 c0                	xor    eax,eax
c0011f36:	31 d2                	xor    edx,edx
c0011f38:	83 c4 0c             	add    esp,0xc
c0011f3b:	c3                   	ret    

c0011f3c <SysRealpath(regs*)>:
c0011f3c:	83 ec 0c             	sub    esp,0xc
c0011f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f43:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f46:	85 d2                	test   edx,edx
c0011f48:	74 07                	je     c0011f51 <SysRealpath(regs*)+0x15>
c0011f4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f4d:	85 c0                	test   eax,eax
c0011f4f:	75 0b                	jne    c0011f5c <SysRealpath(regs*)+0x20>
c0011f51:	b8 01 00 00 00       	mov    eax,0x1
c0011f56:	31 d2                	xor    edx,edx
c0011f58:	83 c4 0c             	add    esp,0xc
c0011f5b:	c3                   	ret    
c0011f5c:	6a 00                	push   0x0
c0011f5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011f64:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011f67:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011f6d:	51                   	push   ecx
c0011f6e:	52                   	push   edx
c0011f6f:	50                   	push   eax
c0011f70:	e8 81 99 ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f75:	83 c4 10             	add    esp,0x10
c0011f78:	31 c0                	xor    eax,eax
c0011f7a:	31 d2                	xor    edx,edx
c0011f7c:	83 c4 0c             	add    esp,0xc
c0011f7f:	c3                   	ret    

c0011f80 <SysReadDir(regs*)>:
c0011f80:	53                   	push   ebx
c0011f81:	83 ec 18             	sub    esp,0x18
c0011f84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f8b:	83 f8 02             	cmp    eax,0x2
c0011f8e:	76 61                	jbe    c0011ff1 <SysReadDir(regs*)+0x71>
c0011f90:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f97:	77 49                	ja     c0011fe2 <SysReadDir(regs*)+0x62>
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	50                   	push   eax
c0011f9d:	e8 11 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	85 c0                	test   eax,eax
c0011fa7:	74 39                	je     c0011fe2 <SysReadDir(regs*)+0x62>
c0011fa9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fb1:	83 ec 0c             	sub    esp,0xc
c0011fb4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fb6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011fba:	51                   	push   ecx
c0011fbb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fbe:	51                   	push   ecx
c0011fbf:	6a 00                	push   0x0
c0011fc1:	68 10 01 00 00       	push   0x110
c0011fc6:	50                   	push   eax
c0011fc7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011fca:	83 c4 20             	add    esp,0x20
c0011fcd:	85 c0                	test   eax,eax
c0011fcf:	74 29                	je     c0011ffa <SysReadDir(regs*)+0x7a>
c0011fd1:	83 f8 07             	cmp    eax,0x7
c0011fd4:	74 1b                	je     c0011ff1 <SysReadDir(regs*)+0x71>
c0011fd6:	b8 02 00 00 00       	mov    eax,0x2
c0011fdb:	31 d2                	xor    edx,edx
c0011fdd:	83 c4 18             	add    esp,0x18
c0011fe0:	5b                   	pop    ebx
c0011fe1:	c3                   	ret    
c0011fe2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fe7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fec:	83 c4 18             	add    esp,0x18
c0011fef:	5b                   	pop    ebx
c0011ff0:	c3                   	ret    
c0011ff1:	b8 01 00 00 00       	mov    eax,0x1
c0011ff6:	31 d2                	xor    edx,edx
c0011ff8:	eb e3                	jmp    c0011fdd <SysReadDir(regs*)+0x5d>
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	31 d2                	xor    edx,edx
c0011ffe:	eb dd                	jmp    c0011fdd <SysReadDir(regs*)+0x5d>

c0012000 <SysIsATTY(regs*)>:
c0012000:	83 ec 0c             	sub    esp,0xc
c0012003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012007:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001200a:	83 f8 02             	cmp    eax,0x2
c001200d:	76 07                	jbe    c0012016 <SysIsATTY(regs*)+0x16>
c001200f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012014:	75 26                	jne    c001203c <SysIsATTY(regs*)+0x3c>
c0012016:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001201b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001201e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012024:	85 c0                	test   eax,eax
c0012026:	74 24                	je     c001204c <SysIsATTY(regs*)+0x4c>
c0012028:	83 ec 0c             	sub    esp,0xc
c001202b:	8b 10                	mov    edx,DWORD PTR [eax]
c001202d:	50                   	push   eax
c001202e:	ff 12                	call   DWORD PTR [edx]
c0012030:	31 d2                	xor    edx,edx
c0012032:	0f b6 c0             	movzx  eax,al
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	83 c4 0c             	add    esp,0xc
c001203b:	c3                   	ret    
c001203c:	83 ec 0c             	sub    esp,0xc
c001203f:	50                   	push   eax
c0012040:	e8 6e 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012045:	83 c4 10             	add    esp,0x10
c0012048:	85 c0                	test   eax,eax
c001204a:	75 dc                	jne    c0012028 <SysIsATTY(regs*)+0x28>
c001204c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012051:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012056:	83 c4 0c             	add    esp,0xc
c0012059:	c3                   	ret    

c001205a <SysSeek(regs*)>:
c001205a:	53                   	push   ebx
c001205b:	83 ec 08             	sub    esp,0x8
c001205e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012062:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012065:	8d 50 fd             	lea    edx,[eax-0x3]
c0012068:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001206e:	77 32                	ja     c00120a2 <SysSeek(regs*)+0x48>
c0012070:	83 ec 0c             	sub    esp,0xc
c0012073:	50                   	push   eax
c0012074:	e8 3a 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012079:	83 c4 0c             	add    esp,0xc
c001207c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001207f:	31 db                	xor    ebx,ebx
c0012081:	53                   	push   ebx
c0012082:	51                   	push   ecx
c0012083:	50                   	push   eax
c0012084:	e8 41 9c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	85 c0                	test   eax,eax
c001208e:	0f 95 c0             	setne  al
c0012091:	31 d2                	xor    edx,edx
c0012093:	0f b6 c0             	movzx  eax,al
c0012096:	f7 d8                	neg    eax
c0012098:	83 d2 00             	adc    edx,0x0
c001209b:	83 c4 08             	add    esp,0x8
c001209e:	f7 da                	neg    edx
c00120a0:	5b                   	pop    ebx
c00120a1:	c3                   	ret    
c00120a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120ac:	83 c4 08             	add    esp,0x8
c00120af:	5b                   	pop    ebx
c00120b0:	c3                   	ret    

c00120b1 <SysTell(regs*)>:
c00120b1:	53                   	push   ebx
c00120b2:	83 ec 08             	sub    esp,0x8
c00120b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120bc:	83 f8 02             	cmp    eax,0x2
c00120bf:	76 4e                	jbe    c001210f <SysTell(regs*)+0x5e>
c00120c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120c6:	76 19                	jbe    c00120e1 <SysTell(regs*)+0x30>
c00120c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120cb:	31 d2                	xor    edx,edx
c00120cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120da:	31 c0                	xor    eax,eax
c00120dc:	83 c4 08             	add    esp,0x8
c00120df:	5b                   	pop    ebx
c00120e0:	c3                   	ret    
c00120e1:	83 ec 0c             	sub    esp,0xc
c00120e4:	50                   	push   eax
c00120e5:	e8 c9 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120ea:	5a                   	pop    edx
c00120eb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120ee:	59                   	pop    ecx
c00120ef:	53                   	push   ebx
c00120f0:	50                   	push   eax
c00120f1:	e8 80 9c ff ff       	call   c000bd76 <File::tell(unsigned long long*)>
c00120f6:	83 c4 10             	add    esp,0x10
c00120f9:	85 c0                	test   eax,eax
c00120fb:	0f 95 c0             	setne  al
c00120fe:	31 d2                	xor    edx,edx
c0012100:	0f b6 c0             	movzx  eax,al
c0012103:	f7 d8                	neg    eax
c0012105:	83 d2 00             	adc    edx,0x0
c0012108:	83 c4 08             	add    esp,0x8
c001210b:	f7 da                	neg    edx
c001210d:	5b                   	pop    ebx
c001210e:	c3                   	ret    
c001210f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012114:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012119:	83 c4 08             	add    esp,0x8
c001211c:	5b                   	pop    ebx
c001211d:	c3                   	ret    

c001211e <SysSize(regs*)>:
c001211e:	53                   	push   ebx
c001211f:	83 ec 18             	sub    esp,0x18
c0012122:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012126:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012129:	83 f8 02             	cmp    eax,0x2
c001212c:	76 54                	jbe    c0012182 <SysSize(regs*)+0x64>
c001212e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012133:	76 19                	jbe    c001214e <SysSize(regs*)+0x30>
c0012135:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012138:	31 d2                	xor    edx,edx
c001213a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012140:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012147:	31 c0                	xor    eax,eax
c0012149:	83 c4 18             	add    esp,0x18
c001214c:	5b                   	pop    ebx
c001214d:	c3                   	ret    
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	50                   	push   eax
c0012152:	e8 5c 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012157:	83 c4 0c             	add    esp,0xc
c001215a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001215e:	52                   	push   edx
c001215f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012162:	52                   	push   edx
c0012163:	50                   	push   eax
c0012164:	e8 a5 9d ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	85 c0                	test   eax,eax
c001216e:	0f 95 c0             	setne  al
c0012171:	31 d2                	xor    edx,edx
c0012173:	0f b6 c0             	movzx  eax,al
c0012176:	f7 d8                	neg    eax
c0012178:	83 d2 00             	adc    edx,0x0
c001217b:	83 c4 18             	add    esp,0x18
c001217e:	f7 da                	neg    edx
c0012180:	5b                   	pop    ebx
c0012181:	c3                   	ret    
c0012182:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012187:	ba ff ff ff ff       	mov    edx,0xffffffff
c001218c:	83 c4 18             	add    esp,0x18
c001218f:	5b                   	pop    ebx
c0012190:	c3                   	ret    

c0012191 <SysSizeFromFilename(regs*)>:
c0012191:	55                   	push   ebp
c0012192:	57                   	push   edi
c0012193:	56                   	push   esi
c0012194:	53                   	push   ebx
c0012195:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001219b:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121a2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121a5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121a8:	85 f6                	test   esi,esi
c00121aa:	74 34                	je     c00121e0 <SysSizeFromFilename(regs*)+0x4f>
c00121ac:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121b5:	83 f8 02             	cmp    eax,0x2
c00121b8:	76 2d                	jbe    c00121e7 <SysSizeFromFilename(regs*)+0x56>
c00121ba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00121bf:	76 3b                	jbe    c00121fc <SysSizeFromFilename(regs*)+0x6b>
c00121c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00121c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00121ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121d1:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121d7:	31 c0                	xor    eax,eax
c00121d9:	5b                   	pop    ebx
c00121da:	31 d2                	xor    edx,edx
c00121dc:	5e                   	pop    esi
c00121dd:	5f                   	pop    edi
c00121de:	5d                   	pop    ebp
c00121df:	c3                   	ret    
c00121e0:	89 f8                	mov    eax,edi
c00121e2:	83 f8 02             	cmp    eax,0x2
c00121e5:	77 d3                	ja     c00121ba <SysSizeFromFilename(regs*)+0x29>
c00121e7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00121ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121f2:	5b                   	pop    ebx
c00121f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121f8:	5e                   	pop    esi
c00121f9:	5f                   	pop    edi
c00121fa:	5d                   	pop    ebp
c00121fb:	c3                   	ret    
c00121fc:	83 ec 0c             	sub    esp,0xc
c00121ff:	68 14 01 00 00       	push   0x114
c0012204:	e8 ad 58 ff ff       	call   c0007ab6 <malloc>
c0012209:	6a 01                	push   0x1
c001220b:	89 c5                	mov    ebp,eax
c001220d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012212:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012215:	51                   	push   ecx
c0012216:	57                   	push   edi
c0012217:	55                   	push   ebp
c0012218:	e8 f3 98 ff ff       	call   c000bb10 <File::File(char const*, Process*, bool)>
c001221d:	83 c4 1c             	add    esp,0x1c
c0012220:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012224:	50                   	push   eax
c0012225:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012228:	53                   	push   ebx
c0012229:	55                   	push   ebp
c001222a:	e8 df 9c ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	85 ed                	test   ebp,ebp
c0012234:	74 15                	je     c001224b <SysSizeFromFilename(regs*)+0xba>
c0012236:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001223a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001223d:	83 ec 0c             	sub    esp,0xc
c0012240:	55                   	push   ebp
c0012241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001224b:	85 c0                	test   eax,eax
c001224d:	75 98                	jne    c00121e7 <SysSizeFromFilename(regs*)+0x56>
c001224f:	6a 00                	push   0x0
c0012251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012256:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012259:	05 0c 01 00 00       	add    eax,0x10c
c001225e:	50                   	push   eax
c001225f:	57                   	push   edi
c0012260:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012267:	53                   	push   ebx
c0012268:	e8 89 96 ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001226d:	58                   	pop    eax
c001226e:	5a                   	pop    edx
c001226f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012273:	50                   	push   eax
c0012274:	53                   	push   ebx
c0012275:	e8 28 8f ff ff       	call   c000b1a2 <KeDereferenceSymlink(char const*, char*)>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	83 f8 01             	cmp    eax,0x1
c0012280:	74 1a                	je     c001229c <SysSizeFromFilename(regs*)+0x10b>
c0012282:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012287:	74 26                	je     c00122af <SysSizeFromFilename(regs*)+0x11e>
c0012289:	85 f6                	test   esi,esi
c001228b:	0f 84 40 ff ff ff    	je     c00121d1 <SysSizeFromFilename(regs*)+0x40>
c0012291:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012297:	e9 35 ff ff ff       	jmp    c00121d1 <SysSizeFromFilename(regs*)+0x40>
c001229c:	85 f6                	test   esi,esi
c001229e:	0f 84 2d ff ff ff    	je     c00121d1 <SysSizeFromFilename(regs*)+0x40>
c00122a4:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00122aa:	e9 22 ff ff ff       	jmp    c00121d1 <SysSizeFromFilename(regs*)+0x40>
c00122af:	85 f6                	test   esi,esi
c00122b1:	0f 84 1a ff ff ff    	je     c00121d1 <SysSizeFromFilename(regs*)+0x40>
c00122b7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122bd:	e9 0f ff ff ff       	jmp    c00121d1 <SysSizeFromFilename(regs*)+0x40>

c00122c2 <SysSizeFromFilenameNoSymlink(regs*)>:
c00122c2:	55                   	push   ebp
c00122c3:	57                   	push   edi
c00122c4:	56                   	push   esi
c00122c5:	53                   	push   ebx
c00122c6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00122cc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00122d3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00122d6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00122d9:	85 f6                	test   esi,esi
c00122db:	74 34                	je     c0012311 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00122dd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122e6:	83 f8 02             	cmp    eax,0x2
c00122e9:	76 2d                	jbe    c0012318 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122f0:	76 3b                	jbe    c001232d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00122f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012302:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012308:	31 c0                	xor    eax,eax
c001230a:	5b                   	pop    ebx
c001230b:	31 d2                	xor    edx,edx
c001230d:	5e                   	pop    esi
c001230e:	5f                   	pop    edi
c001230f:	5d                   	pop    ebp
c0012310:	c3                   	ret    
c0012311:	89 f8                	mov    eax,edi
c0012313:	83 f8 02             	cmp    eax,0x2
c0012316:	77 d3                	ja     c00122eb <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012318:	81 c4 5c 02 00 00    	add    esp,0x25c
c001231e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012323:	5b                   	pop    ebx
c0012324:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012329:	5e                   	pop    esi
c001232a:	5f                   	pop    edi
c001232b:	5d                   	pop    ebp
c001232c:	c3                   	ret    
c001232d:	83 ec 0c             	sub    esp,0xc
c0012330:	68 14 01 00 00       	push   0x114
c0012335:	e8 7c 57 ff ff       	call   c0007ab6 <malloc>
c001233a:	6a 00                	push   0x0
c001233c:	89 c5                	mov    ebp,eax
c001233e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012343:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012346:	51                   	push   ecx
c0012347:	57                   	push   edi
c0012348:	55                   	push   ebp
c0012349:	e8 c2 97 ff ff       	call   c000bb10 <File::File(char const*, Process*, bool)>
c001234e:	83 c4 1c             	add    esp,0x1c
c0012351:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012355:	50                   	push   eax
c0012356:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012359:	53                   	push   ebx
c001235a:	55                   	push   ebp
c001235b:	e8 ae 9b ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	85 ed                	test   ebp,ebp
c0012365:	74 15                	je     c001237c <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0012367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001236b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001236e:	83 ec 0c             	sub    esp,0xc
c0012371:	55                   	push   ebp
c0012372:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001237c:	85 c0                	test   eax,eax
c001237e:	75 98                	jne    c0012318 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012380:	6a 00                	push   0x0
c0012382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012387:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001238a:	05 0c 01 00 00       	add    eax,0x10c
c001238f:	50                   	push   eax
c0012390:	57                   	push   edi
c0012391:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0012398:	53                   	push   ebx
c0012399:	e8 58 95 ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001239e:	58                   	pop    eax
c001239f:	5a                   	pop    edx
c00123a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00123a4:	50                   	push   eax
c00123a5:	53                   	push   ebx
c00123a6:	e8 f7 8d ff ff       	call   c000b1a2 <KeDereferenceSymlink(char const*, char*)>
c00123ab:	83 c4 10             	add    esp,0x10
c00123ae:	83 f8 01             	cmp    eax,0x1
c00123b1:	74 1a                	je     c00123cd <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00123b3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00123b8:	74 26                	je     c00123e0 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00123ba:	85 f6                	test   esi,esi
c00123bc:	0f 84 40 ff ff ff    	je     c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123c2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00123c8:	e9 35 ff ff ff       	jmp    c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123cd:	85 f6                	test   esi,esi
c00123cf:	0f 84 2d ff ff ff    	je     c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123d5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00123db:	e9 22 ff ff ff       	jmp    c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123e0:	85 f6                	test   esi,esi
c00123e2:	0f 84 1a ff ff ff    	je     c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00123e8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123ee:	e9 0f ff ff ff       	jmp    c0012302 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00123f3 <SysClose(regs*)>:
c00123f3:	53                   	push   ebx
c00123f4:	83 ec 08             	sub    esp,0x8
c00123f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123fe:	83 f8 02             	cmp    eax,0x2
c0012401:	76 41                	jbe    c0012444 <SysClose(regs*)+0x51>
c0012403:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012409:	83 fa 01             	cmp    edx,0x1
c001240c:	76 2d                	jbe    c001243b <SysClose(regs*)+0x48>
c001240e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012413:	77 2f                	ja     c0012444 <SysClose(regs*)+0x51>
c0012415:	83 ec 0c             	sub    esp,0xc
c0012418:	50                   	push   eax
c0012419:	e8 95 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001241e:	89 c3                	mov    ebx,eax
c0012420:	89 04 24             	mov    DWORD PTR [esp],eax
c0012423:	e8 42 98 ff ff       	call   c000bc6a <File::close()>
c0012428:	83 c4 10             	add    esp,0x10
c001242b:	85 db                	test   ebx,ebx
c001242d:	74 0c                	je     c001243b <SysClose(regs*)+0x48>
c001242f:	83 ec 0c             	sub    esp,0xc
c0012432:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012434:	53                   	push   ebx
c0012435:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012438:	83 c4 10             	add    esp,0x10
c001243b:	31 c0                	xor    eax,eax
c001243d:	31 d2                	xor    edx,edx
c001243f:	83 c4 08             	add    esp,0x8
c0012442:	5b                   	pop    ebx
c0012443:	c3                   	ret    
c0012444:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012449:	ba ff ff ff ff       	mov    edx,0xffffffff
c001244e:	83 c4 08             	add    esp,0x8
c0012451:	5b                   	pop    ebx
c0012452:	c3                   	ret    

c0012453 <SysOpenDir(regs*)>:
c0012453:	56                   	push   esi
c0012454:	53                   	push   ebx
c0012455:	83 ec 04             	sub    esp,0x4
c0012458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001245c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001245f:	85 c9                	test   ecx,ecx
c0012461:	74 5d                	je     c00124c0 <SysOpenDir(regs*)+0x6d>
c0012463:	83 ec 0c             	sub    esp,0xc
c0012466:	68 14 01 00 00       	push   0x114
c001246b:	e8 46 56 ff ff       	call   c0007ab6 <malloc>
c0012470:	83 c4 0c             	add    esp,0xc
c0012473:	89 c6                	mov    esi,eax
c0012475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001247a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001247d:	50                   	push   eax
c001247e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012481:	52                   	push   edx
c0012482:	56                   	push   esi
c0012483:	e8 46 9c ff ff       	call   c000c0ce <Directory::Directory(char const*, Process*)>
c0012488:	83 c4 10             	add    esp,0x10
c001248b:	85 f6                	test   esi,esi
c001248d:	74 31                	je     c00124c0 <SysOpenDir(regs*)+0x6d>
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	56                   	push   esi
c0012493:	e8 fe 9c ff ff       	call   c000c196 <Directory::open()>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	85 c0                	test   eax,eax
c001249d:	75 21                	jne    c00124c0 <SysOpenDir(regs*)+0x6d>
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	56                   	push   esi
c00124a3:	e8 0e 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	89 02                	mov    DWORD PTR [edx],eax
c00124b0:	c1 f8 1f             	sar    eax,0x1f
c00124b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124b6:	83 c4 04             	add    esp,0x4
c00124b9:	31 c0                	xor    eax,eax
c00124bb:	31 d2                	xor    edx,edx
c00124bd:	5b                   	pop    ebx
c00124be:	5e                   	pop    esi
c00124bf:	c3                   	ret    
c00124c0:	83 c4 04             	add    esp,0x4
c00124c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124cd:	5b                   	pop    ebx
c00124ce:	5e                   	pop    esi
c00124cf:	c3                   	ret    

c00124d0 <SysMakeDir(regs*)>:
c00124d0:	56                   	push   esi
c00124d1:	53                   	push   ebx
c00124d2:	83 ec 10             	sub    esp,0x10
c00124d5:	68 14 01 00 00       	push   0x114
c00124da:	e8 d7 55 ff ff       	call   c0007ab6 <malloc>
c00124df:	83 c4 0c             	add    esp,0xc
c00124e2:	89 c3                	mov    ebx,eax
c00124e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124ec:	50                   	push   eax
c00124ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124f1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124f4:	52                   	push   edx
c00124f5:	53                   	push   ebx
c00124f6:	e8 d3 9b ff ff       	call   c000c0ce <Directory::Directory(char const*, Process*)>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	85 db                	test   ebx,ebx
c0012500:	74 2c                	je     c001252e <SysMakeDir(regs*)+0x5e>
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	53                   	push   ebx
c0012506:	e8 6b 9e ff ff       	call   c000c376 <Directory::create()>
c001250b:	89 c6                	mov    esi,eax
c001250d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001250f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012512:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012515:	83 c4 10             	add    esp,0x10
c0012518:	31 c0                	xor    eax,eax
c001251a:	85 f6                	test   esi,esi
c001251c:	0f 95 c0             	setne  al
c001251f:	31 d2                	xor    edx,edx
c0012521:	f7 d8                	neg    eax
c0012523:	83 d2 00             	adc    edx,0x0
c0012526:	83 c4 04             	add    esp,0x4
c0012529:	f7 da                	neg    edx
c001252b:	5b                   	pop    ebx
c001252c:	5e                   	pop    esi
c001252d:	c3                   	ret    
c001252e:	83 c4 04             	add    esp,0x4
c0012531:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012536:	ba ff ff ff ff       	mov    edx,0xffffffff
c001253b:	5b                   	pop    ebx
c001253c:	5e                   	pop    esi
c001253d:	c3                   	ret    

c001253e <SysCloseDir(regs*)>:
c001253e:	53                   	push   ebx
c001253f:	83 ec 08             	sub    esp,0x8
c0012542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012546:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012549:	8d 50 fd             	lea    edx,[eax-0x3]
c001254c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012552:	77 2f                	ja     c0012583 <SysCloseDir(regs*)+0x45>
c0012554:	83 ec 0c             	sub    esp,0xc
c0012557:	50                   	push   eax
c0012558:	e8 56 6f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001255d:	89 c3                	mov    ebx,eax
c001255f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012562:	e8 8b 9c ff ff       	call   c000c1f2 <Directory::close()>
c0012567:	83 c4 10             	add    esp,0x10
c001256a:	85 db                	test   ebx,ebx
c001256c:	74 0c                	je     c001257a <SysCloseDir(regs*)+0x3c>
c001256e:	83 ec 0c             	sub    esp,0xc
c0012571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012573:	53                   	push   ebx
c0012574:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012577:	83 c4 10             	add    esp,0x10
c001257a:	31 c0                	xor    eax,eax
c001257c:	31 d2                	xor    edx,edx
c001257e:	83 c4 08             	add    esp,0x8
c0012581:	5b                   	pop    ebx
c0012582:	c3                   	ret    
c0012583:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012588:	ba ff ff ff ff       	mov    edx,0xffffffff
c001258d:	83 c4 08             	add    esp,0x8
c0012590:	5b                   	pop    ebx
c0012591:	c3                   	ret    

c0012592 <SysWait(regs*)>:
c0012592:	83 ec 10             	sub    esp,0x10
c0012595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012599:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001259c:	52                   	push   edx
c001259d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00125a0:	51                   	push   ecx
c00125a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00125a4:	50                   	push   eax
c00125a5:	e8 02 3e 00 00       	call   c00163ac <waitTask(int, int*, int)>
c00125aa:	83 c4 1c             	add    esp,0x1c
c00125ad:	89 c2                	mov    edx,eax
c00125af:	c1 fa 1f             	sar    edx,0x1f
c00125b2:	c3                   	ret    

c00125b3 <SysNotImpl(regs*)>:
c00125b3:	83 ec 18             	sub    esp,0x18
c00125b6:	68 66 25 02 c0       	push   0xc0022566
c00125bb:	e8 ff f0 ff ff       	call   c00116bf <KePanic(char const*)>
c00125c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125ca:	83 c4 1c             	add    esp,0x1c
c00125cd:	c3                   	ret    

c00125ce <SysPanic(regs*)>:
c00125ce:	83 ec 18             	sub    esp,0x18
c00125d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00125d8:	50                   	push   eax
c00125d9:	e8 e1 f0 ff ff       	call   c00116bf <KePanic(char const*)>
c00125de:	b8 01 00 00 00       	mov    eax,0x1
c00125e3:	31 d2                	xor    edx,edx
c00125e5:	83 c4 1c             	add    esp,0x1c
c00125e8:	c3                   	ret    

c00125e9 <SysRmdir(regs*)>:
c00125e9:	56                   	push   esi
c00125ea:	53                   	push   ebx
c00125eb:	83 ec 20             	sub    esp,0x20
c00125ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00125f2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125f5:	68 14 01 00 00       	push   0x114
c00125fa:	e8 b7 54 ff ff       	call   c0007ab6 <malloc>
c00125ff:	6a 00                	push   0x0
c0012601:	89 c3                	mov    ebx,eax
c0012603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012608:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001260b:	50                   	push   eax
c001260c:	56                   	push   esi
c001260d:	53                   	push   ebx
c001260e:	e8 fd 94 ff ff       	call   c000bb10 <File::File(char const*, Process*, bool)>
c0012613:	83 c4 14             	add    esp,0x14
c0012616:	53                   	push   ebx
c0012617:	e8 be 97 ff ff       	call   c000bdda <File::unlink()>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	85 db                	test   ebx,ebx
c0012621:	74 14                	je     c0012637 <SysRmdir(regs*)+0x4e>
c0012623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012627:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012629:	83 ec 0c             	sub    esp,0xc
c001262c:	53                   	push   ebx
c001262d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012630:	83 c4 10             	add    esp,0x10
c0012633:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012637:	85 c0                	test   eax,eax
c0012639:	0f 95 c0             	setne  al
c001263c:	31 d2                	xor    edx,edx
c001263e:	0f b6 c0             	movzx  eax,al
c0012641:	f7 d8                	neg    eax
c0012643:	83 d2 00             	adc    edx,0x0
c0012646:	83 c4 14             	add    esp,0x14
c0012649:	f7 da                	neg    edx
c001264b:	5b                   	pop    ebx
c001264c:	5e                   	pop    esi
c001264d:	c3                   	ret    

c001264e <SysUnlink(regs*)>:
c001264e:	56                   	push   esi
c001264f:	53                   	push   ebx
c0012650:	83 ec 20             	sub    esp,0x20
c0012653:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012657:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001265a:	68 14 01 00 00       	push   0x114
c001265f:	e8 52 54 ff ff       	call   c0007ab6 <malloc>
c0012664:	6a 00                	push   0x0
c0012666:	89 c3                	mov    ebx,eax
c0012668:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001266d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012670:	50                   	push   eax
c0012671:	56                   	push   esi
c0012672:	53                   	push   ebx
c0012673:	e8 98 94 ff ff       	call   c000bb10 <File::File(char const*, Process*, bool)>
c0012678:	83 c4 14             	add    esp,0x14
c001267b:	53                   	push   ebx
c001267c:	e8 59 97 ff ff       	call   c000bdda <File::unlink()>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	85 db                	test   ebx,ebx
c0012686:	74 14                	je     c001269c <SysUnlink(regs*)+0x4e>
c0012688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001268c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001268e:	83 ec 0c             	sub    esp,0xc
c0012691:	53                   	push   ebx
c0012692:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001269c:	85 c0                	test   eax,eax
c001269e:	0f 95 c0             	setne  al
c00126a1:	31 d2                	xor    edx,edx
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	f7 d8                	neg    eax
c00126a8:	83 d2 00             	adc    edx,0x0
c00126ab:	83 c4 14             	add    esp,0x14
c00126ae:	f7 da                	neg    edx
c00126b0:	5b                   	pop    ebx
c00126b1:	5e                   	pop    esi
c00126b2:	c3                   	ret    

c00126b3 <SysGetArgv(regs*)>:
c00126b3:	83 ec 0c             	sub    esp,0xc
c00126b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00126ba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00126bd:	85 c0                	test   eax,eax
c00126bf:	78 2c                	js     c00126ed <SysGetArgv(regs*)+0x3a>
c00126c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00126c7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00126ca:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00126d0:	7d 1b                	jge    c00126ed <SysGetArgv(regs*)+0x3a>
c00126d2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00126d9:	85 c0                	test   eax,eax
c00126db:	74 18                	je     c00126f5 <SysGetArgv(regs*)+0x42>
c00126dd:	83 ec 08             	sub    esp,0x8
c00126e0:	50                   	push   eax
c00126e1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00126e4:	50                   	push   eax
c00126e5:	e8 56 df fe ff       	call   c0000640 <strcpy>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	31 c0                	xor    eax,eax
c00126ef:	31 d2                	xor    edx,edx
c00126f1:	83 c4 0c             	add    esp,0xc
c00126f4:	c3                   	ret    
c00126f5:	b8 01 00 00 00       	mov    eax,0x1
c00126fa:	31 d2                	xor    edx,edx
c00126fc:	83 c4 0c             	add    esp,0xc
c00126ff:	c3                   	ret    

c0012700 <SysUSleep(regs*)>:
c0012700:	83 ec 1c             	sub    esp,0x1c
c0012703:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012707:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001270a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001270d:	6a 00                	push   0x0
c001270f:	6a 64                	push   0x64
c0012711:	52                   	push   edx
c0012712:	50                   	push   eax
c0012713:	e8 b8 d0 00 00       	call   c001f7d0 <__udivdi3>
c0012718:	83 c4 14             	add    esp,0x14
c001271b:	50                   	push   eax
c001271c:	e8 6f 3d 00 00       	call   c0016490 <milliTenthSleep(unsigned int)>
c0012721:	31 c0                	xor    eax,eax
c0012723:	31 d2                	xor    edx,edx
c0012725:	83 c4 1c             	add    esp,0x1c
c0012728:	c3                   	ret    

c0012729 <SysSpawn(regs*)>:
c0012729:	56                   	push   esi
c001272a:	53                   	push   ebx
c001272b:	83 ec 04             	sub    esp,0x4
c001272e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012732:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012735:	85 f6                	test   esi,esi
c0012737:	75 0a                	jne    c0012743 <SysSpawn(regs*)+0x1a>
c0012739:	83 c4 04             	add    esp,0x4
c001273c:	31 c0                	xor    eax,eax
c001273e:	31 d2                	xor    edx,edx
c0012740:	5b                   	pop    ebx
c0012741:	5e                   	pop    esi
c0012742:	c3                   	ret    
c0012743:	83 ec 0c             	sub    esp,0xc
c0012746:	68 24 07 00 00       	push   0x724
c001274b:	e8 66 53 ff ff       	call   c0007ab6 <malloc>
c0012750:	83 c4 10             	add    esp,0x10
c0012753:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012756:	89 c6                	mov    esi,eax
c0012758:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001275b:	85 c9                	test   ecx,ecx
c001275d:	75 39                	jne    c0012798 <SysSpawn(regs*)+0x6f>
c001275f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012764:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012767:	52                   	push   edx
c0012768:	50                   	push   eax
c0012769:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001276c:	50                   	push   eax
c001276d:	56                   	push   esi
c001276e:	e8 6d 33 00 00       	call   c0015ae0 <Process::Process(char const*, Process*, char**)>
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001277d:	75 ba                	jne    c0012739 <SysSpawn(regs*)+0x10>
c001277f:	83 ec 0c             	sub    esp,0xc
c0012782:	56                   	push   esi
c0012783:	e8 94 38 00 00       	call   c001601c <Process::createUserThread()>
c0012788:	8b 06                	mov    eax,DWORD PTR [esi]
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	89 c2                	mov    edx,eax
c001278f:	83 c4 04             	add    esp,0x4
c0012792:	c1 fa 1f             	sar    edx,0x1f
c0012795:	5b                   	pop    ebx
c0012796:	5e                   	pop    esi
c0012797:	c3                   	ret    
c0012798:	31 c0                	xor    eax,eax
c001279a:	eb cb                	jmp    c0012767 <SysSpawn(regs*)+0x3e>

c001279c <SysGetEnv(regs*)>:
c001279c:	57                   	push   edi
c001279d:	56                   	push   esi
c001279e:	53                   	push   ebx
c001279f:	83 ec 1c             	sub    esp,0x1c
c00127a2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00127a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127ab:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00127ae:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00127b1:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00127b4:	51                   	push   ecx
c00127b5:	e8 bd ed ff ff       	call   c0011577 <KeGetProcessTotalEnvCount(Process*)>
c00127ba:	83 c4 10             	add    esp,0x10
c00127bd:	39 c7                	cmp    edi,eax
c00127bf:	7c 14                	jl     c00127d5 <SysGetEnv(regs*)+0x39>
c00127c1:	85 f6                	test   esi,esi
c00127c3:	75 0b                	jne    c00127d0 <SysGetEnv(regs*)+0x34>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	31 c0                	xor    eax,eax
c00127ca:	5b                   	pop    ebx
c00127cb:	31 d2                	xor    edx,edx
c00127cd:	5e                   	pop    esi
c00127ce:	5f                   	pop    edi
c00127cf:	c3                   	ret    
c00127d0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127d3:	eb f0                	jmp    c00127c5 <SysGetEnv(regs*)+0x29>
c00127d5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127d9:	83 ec 04             	sub    esp,0x4
c00127dc:	57                   	push   edi
c00127dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00127e3:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00127e6:	57                   	push   edi
c00127e7:	50                   	push   eax
c00127e8:	e8 aa ed ff ff       	call   c0011597 <KeGetProcessEnvPair(Process*, int)>
c00127ed:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00127f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127f4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127f8:	83 c4 0c             	add    esp,0xc
c00127fb:	85 d2                	test   edx,edx
c00127fd:	75 23                	jne    c0012822 <SysGetEnv(regs*)+0x86>
c00127ff:	83 ec 0c             	sub    esp,0xc
c0012802:	50                   	push   eax
c0012803:	e8 68 dd fe ff       	call   c0000570 <strlen>
c0012808:	89 3c 24             	mov    DWORD PTR [esp],edi
c001280b:	89 c3                	mov    ebx,eax
c001280d:	e8 5e dd fe ff       	call   c0000570 <strlen>
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	31 d2                	xor    edx,edx
c001281e:	5b                   	pop    ebx
c001281f:	5e                   	pop    esi
c0012820:	5f                   	pop    edi
c0012821:	c3                   	ret    
c0012822:	83 ec 08             	sub    esp,0x8
c0012825:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012828:	50                   	push   eax
c0012829:	56                   	push   esi
c001282a:	e8 11 de fe ff       	call   c0000640 <strcpy>
c001282f:	58                   	pop    eax
c0012830:	5a                   	pop    edx
c0012831:	68 80 25 02 c0       	push   0xc0022580
c0012836:	56                   	push   esi
c0012837:	e8 04 e0 fe ff       	call   c0000840 <strcat>
c001283c:	59                   	pop    ecx
c001283d:	5b                   	pop    ebx
c001283e:	57                   	push   edi
c001283f:	56                   	push   esi
c0012840:	e8 fb df fe ff       	call   c0000840 <strcat>
c0012845:	83 c4 10             	add    esp,0x10
c0012848:	e9 78 ff ff ff       	jmp    c00127c5 <SysGetEnv(regs*)+0x29>

c001284d <SysSetFatAttrib(regs*)>:
c001284d:	57                   	push   edi
c001284e:	56                   	push   esi
c001284f:	53                   	push   ebx
c0012850:	83 ec 1c             	sub    esp,0x1c
c0012853:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012857:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001285a:	68 14 01 00 00       	push   0x114
c001285f:	e8 52 52 ff ff       	call   c0007ab6 <malloc>
c0012864:	83 c4 0c             	add    esp,0xc
c0012867:	89 c3                	mov    ebx,eax
c0012869:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001286e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012871:	50                   	push   eax
c0012872:	57                   	push   edi
c0012873:	53                   	push   ebx
c0012874:	e8 75 93 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0012879:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001287c:	83 c4 0c             	add    esp,0xc
c001287f:	0f b6 d4             	movzx  edx,ah
c0012882:	0f b6 c0             	movzx  eax,al
c0012885:	52                   	push   edx
c0012886:	50                   	push   eax
c0012887:	53                   	push   ebx
c0012888:	e8 e7 95 ff ff       	call   c000be74 <File::chfatattr(unsigned char, unsigned char)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	85 db                	test   ebx,ebx
c0012892:	74 14                	je     c00128a8 <SysSetFatAttrib(regs*)+0x5b>
c0012894:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012898:	8b 13                	mov    edx,DWORD PTR [ebx]
c001289a:	83 ec 0c             	sub    esp,0xc
c001289d:	53                   	push   ebx
c001289e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00128a1:	83 c4 10             	add    esp,0x10
c00128a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128a8:	85 c0                	test   eax,eax
c00128aa:	0f 95 c0             	setne  al
c00128ad:	31 d2                	xor    edx,edx
c00128af:	0f b6 c0             	movzx  eax,al
c00128b2:	f7 d8                	neg    eax
c00128b4:	83 d2 00             	adc    edx,0x0
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	f7 da                	neg    edx
c00128bc:	5b                   	pop    ebx
c00128bd:	5e                   	pop    esi
c00128be:	5f                   	pop    edi
c00128bf:	c3                   	ret    

c00128c0 <SysPipe(regs*)>:
c00128c0:	57                   	push   edi
c00128c1:	56                   	push   esi
c00128c2:	53                   	push   ebx
c00128c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c7:	83 ec 0c             	sub    esp,0xc
c00128ca:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00128cd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00128d0:	6a 20                	push   0x20
c00128d2:	e8 df 51 ff ff       	call   c0007ab6 <malloc>
c00128d7:	89 c3                	mov    ebx,eax
c00128d9:	58                   	pop    eax
c00128da:	5a                   	pop    edx
c00128db:	68 00 50 00 00       	push   0x5000
c00128e0:	53                   	push   ebx
c00128e1:	e8 42 5b ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00128e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128e9:	e8 c8 68 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128ee:	89 07                	mov    DWORD PTR [edi],eax
c00128f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128f3:	e8 be 68 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00128f8:	83 c4 10             	add    esp,0x10
c00128fb:	89 06                	mov    DWORD PTR [esi],eax
c00128fd:	31 d2                	xor    edx,edx
c00128ff:	5b                   	pop    ebx
c0012900:	31 c0                	xor    eax,eax
c0012902:	5e                   	pop    esi
c0012903:	5f                   	pop    edi
c0012904:	c3                   	ret    

c0012905 <SysGetUnixTime(regs*)>:
c0012905:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001290a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012910:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012914:	e9 a1 9c ff ff       	jmp    c000c5ba <Clock::timeInSecondsLocal()>

c0012919 <string_ends_with(char const*, char const*)>:
c0012919:	57                   	push   edi
c001291a:	56                   	push   esi
c001291b:	53                   	push   ebx
c001291c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012920:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	53                   	push   ebx
c0012928:	e8 43 dc fe ff       	call   c0000570 <strlen>
c001292d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012930:	89 c6                	mov    esi,eax
c0012932:	e8 39 dc fe ff       	call   c0000570 <strlen>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	39 c6                	cmp    esi,eax
c001293c:	7d 06                	jge    c0012944 <string_ends_with(char const*, char const*)+0x2b>
c001293e:	5b                   	pop    ebx
c001293f:	31 c0                	xor    eax,eax
c0012941:	5e                   	pop    esi
c0012942:	5f                   	pop    edi
c0012943:	c3                   	ret    
c0012944:	83 ec 08             	sub    esp,0x8
c0012947:	29 c6                	sub    esi,eax
c0012949:	57                   	push   edi
c001294a:	01 f3                	add    ebx,esi
c001294c:	53                   	push   ebx
c001294d:	e8 fe dd fe ff       	call   c0000750 <strcmp>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	85 c0                	test   eax,eax
c0012957:	5b                   	pop    ebx
c0012958:	0f 94 c0             	sete   al
c001295b:	5e                   	pop    esi
c001295c:	0f b6 c0             	movzx  eax,al
c001295f:	5f                   	pop    edi
c0012960:	c3                   	ret    

c0012961 <SysOpen(regs*)>:
c0012961:	56                   	push   esi
c0012962:	53                   	push   ebx
c0012963:	81 ec 04 01 00 00    	sub    esp,0x104
c0012969:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012970:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012973:	85 c0                	test   eax,eax
c0012975:	0f 84 bc 01 00 00    	je     c0012b37 <SysOpen(regs*)+0x1d6>
c001297b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001297e:	85 c0                	test   eax,eax
c0012980:	0f 84 b1 01 00 00    	je     c0012b37 <SysOpen(regs*)+0x1d6>
c0012986:	6a 00                	push   0x0
c0012988:	68 82 25 02 c0       	push   0xc0022582
c001298d:	50                   	push   eax
c001298e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012992:	56                   	push   esi
c0012993:	e8 5e 8f ff ff       	call   c000b8f6 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012998:	89 34 24             	mov    DWORD PTR [esp],esi
c001299b:	e8 d0 db fe ff       	call   c0000570 <strlen>
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	83 e8 01             	sub    eax,0x1
c00129a6:	74 21                	je     c00129c9 <SysOpen(regs*)+0x68>
c00129a8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00129ac:	eb 12                	jmp    c00129c0 <SysOpen(regs*)+0x5f>
c00129ae:	83 fa 3a             	cmp    edx,0x3a
c00129b1:	74 12                	je     c00129c5 <SysOpen(regs*)+0x64>
c00129b3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00129b7:	83 e8 01             	sub    eax,0x1
c00129ba:	74 0d                	je     c00129c9 <SysOpen(regs*)+0x68>
c00129bc:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00129c0:	83 fa 2e             	cmp    edx,0x2e
c00129c3:	75 e9                	jne    c00129ae <SysOpen(regs*)+0x4d>
c00129c5:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00129c9:	83 ec 08             	sub    esp,0x8
c00129cc:	68 86 25 02 c0       	push   0xc0022586
c00129d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d4:	50                   	push   eax
c00129d5:	e8 3f ff ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	85 c0                	test   eax,eax
c00129df:	74 1d                	je     c00129fe <SysOpen(regs*)+0x9d>
c00129e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129e4:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00129ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129f1:	81 c4 04 01 00 00    	add    esp,0x104
c00129f7:	31 c0                	xor    eax,eax
c00129f9:	31 d2                	xor    edx,edx
c00129fb:	5b                   	pop    ebx
c00129fc:	5e                   	pop    esi
c00129fd:	c3                   	ret    
c00129fe:	83 ec 08             	sub    esp,0x8
c0012a01:	68 8b 25 02 c0       	push   0xc002258b
c0012a06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a09:	50                   	push   eax
c0012a0a:	e8 0a ff ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	85 c0                	test   eax,eax
c0012a14:	75 cb                	jne    c00129e1 <SysOpen(regs*)+0x80>
c0012a16:	83 ec 08             	sub    esp,0x8
c0012a19:	68 87 25 02 c0       	push   0xc0022587
c0012a1e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a21:	50                   	push   eax
c0012a22:	e8 29 dd fe ff       	call   c0000750 <strcmp>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 b3                	je     c00129e1 <SysOpen(regs*)+0x80>
c0012a2e:	83 ec 08             	sub    esp,0x8
c0012a31:	68 86 25 02 c0       	push   0xc0022586
c0012a36:	56                   	push   esi
c0012a37:	e8 dd fe ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	85 c0                	test   eax,eax
c0012a41:	75 9e                	jne    c00129e1 <SysOpen(regs*)+0x80>
c0012a43:	83 ec 08             	sub    esp,0x8
c0012a46:	68 90 25 02 c0       	push   0xc0022590
c0012a4b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a4e:	50                   	push   eax
c0012a4f:	e8 c5 fe ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c0012a54:	83 c4 10             	add    esp,0x10
c0012a57:	85 c0                	test   eax,eax
c0012a59:	0f 85 eb 00 00 00    	jne    c0012b4a <SysOpen(regs*)+0x1e9>
c0012a5f:	83 ec 08             	sub    esp,0x8
c0012a62:	68 95 25 02 c0       	push   0xc0022595
c0012a67:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a6a:	50                   	push   eax
c0012a6b:	e8 a9 fe ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c0012a70:	83 c4 10             	add    esp,0x10
c0012a73:	85 c0                	test   eax,eax
c0012a75:	0f 85 cf 00 00 00    	jne    c0012b4a <SysOpen(regs*)+0x1e9>
c0012a7b:	83 ec 08             	sub    esp,0x8
c0012a7e:	68 91 25 02 c0       	push   0xc0022591
c0012a83:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a86:	51                   	push   ecx
c0012a87:	e8 c4 dc fe ff       	call   c0000750 <strcmp>
c0012a8c:	83 c4 10             	add    esp,0x10
c0012a8f:	85 c0                	test   eax,eax
c0012a91:	0f 84 b3 00 00 00    	je     c0012b4a <SysOpen(regs*)+0x1e9>
c0012a97:	83 ec 08             	sub    esp,0x8
c0012a9a:	68 90 25 02 c0       	push   0xc0022590
c0012a9f:	56                   	push   esi
c0012aa0:	e8 74 fe ff ff       	call   c0012919 <string_ends_with(char const*, char const*)>
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	85 c0                	test   eax,eax
c0012aaa:	0f 85 9a 00 00 00    	jne    c0012b4a <SysOpen(regs*)+0x1e9>
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	68 14 01 00 00       	push   0x114
c0012ab8:	e8 f9 4f ff ff       	call   c0007ab6 <malloc>
c0012abd:	83 c4 0c             	add    esp,0xc
c0012ac0:	89 c6                	mov    esi,eax
c0012ac2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ac7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012aca:	50                   	push   eax
c0012acb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012ace:	52                   	push   edx
c0012acf:	56                   	push   esi
c0012ad0:	e8 19 91 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0012ad5:	83 c4 10             	add    esp,0x10
c0012ad8:	85 f6                	test   esi,esi
c0012ada:	74 5b                	je     c0012b37 <SysOpen(regs*)+0x1d6>
c0012adc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012adf:	0f b6 c2             	movzx  eax,dl
c0012ae2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012ae5:	89 d0                	mov    eax,edx
c0012ae7:	83 e0 01             	and    eax,0x1
c0012aea:	f6 c2 02             	test   dl,0x2
c0012aed:	74 03                	je     c0012af2 <SysOpen(regs*)+0x191>
c0012aef:	83 c8 02             	or     eax,0x2
c0012af2:	f6 c2 04             	test   dl,0x4
c0012af5:	74 03                	je     c0012afa <SysOpen(regs*)+0x199>
c0012af7:	83 c8 04             	or     eax,0x4
c0012afa:	f6 c2 08             	test   dl,0x8
c0012afd:	74 03                	je     c0012b02 <SysOpen(regs*)+0x1a1>
c0012aff:	83 c8 0a             	or     eax,0xa
c0012b02:	80 e2 10             	and    dl,0x10
c0012b05:	74 03                	je     c0012b0a <SysOpen(regs*)+0x1a9>
c0012b07:	83 c8 12             	or     eax,0x12
c0012b0a:	83 ec 08             	sub    esp,0x8
c0012b0d:	50                   	push   eax
c0012b0e:	56                   	push   esi
c0012b0f:	e8 f8 90 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0012b14:	83 c4 10             	add    esp,0x10
c0012b17:	85 c0                	test   eax,eax
c0012b19:	75 1c                	jne    c0012b37 <SysOpen(regs*)+0x1d6>
c0012b1b:	83 ec 0c             	sub    esp,0xc
c0012b1e:	56                   	push   esi
c0012b1f:	e8 92 66 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012b24:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012b27:	83 c4 10             	add    esp,0x10
c0012b2a:	89 02                	mov    DWORD PTR [edx],eax
c0012b2c:	c1 f8 1f             	sar    eax,0x1f
c0012b2f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012b32:	e9 ba fe ff ff       	jmp    c00129f1 <SysOpen(regs*)+0x90>
c0012b37:	81 c4 04 01 00 00    	add    esp,0x104
c0012b3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012b42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012b47:	5b                   	pop    ebx
c0012b48:	5e                   	pop    esi
c0012b49:	c3                   	ret    
c0012b4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b4d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b53:	e9 92 fe ff ff       	jmp    c00129ea <SysOpen(regs*)+0x89>

c0012b58 <KeSystemCall(regs*, void*)>:
c0012b58:	53                   	push   ebx
c0012b59:	83 ec 08             	sub    esp,0x8
c0012b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b63:	83 f8 3e             	cmp    eax,0x3e
c0012b66:	77 16                	ja     c0012b7e <KeSystemCall(regs*, void*)+0x26>
c0012b68:	8b 14 85 a0 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc260]
c0012b6f:	85 d2                	test   edx,edx
c0012b71:	74 0b                	je     c0012b7e <KeSystemCall(regs*, void*)+0x26>
c0012b73:	83 ec 0c             	sub    esp,0xc
c0012b76:	53                   	push   ebx
c0012b77:	ff d2                	call   edx
c0012b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b7c:	eb 0d                	jmp    c0012b8b <KeSystemCall(regs*, void*)+0x33>
c0012b7e:	52                   	push   edx
c0012b7f:	52                   	push   edx
c0012b80:	50                   	push   eax
c0012b81:	68 9a 25 02 c0       	push   0xc002259a
c0012b86:	e8 ba 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012b8b:	83 c4 10             	add    esp,0x10
c0012b8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b93:	31 d2                	xor    edx,edx
c0012b95:	83 c4 08             	add    esp,0x8
c0012b98:	5b                   	pop    ebx
c0012b99:	c3                   	ret    
c0012b9a:	66 90                	xchg   ax,ax

c0012b9c <KeSwitchEndian16(unsigned short)>:
c0012b9c:	83 ec 04             	sub    esp,0x4
c0012b9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ba3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012ba7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bab:	c1 f8 08             	sar    eax,0x8
c0012bae:	89 c2                	mov    edx,eax
c0012bb0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012bb4:	c1 e0 08             	shl    eax,0x8
c0012bb7:	09 d0                	or     eax,edx
c0012bb9:	83 c4 04             	add    esp,0x4
c0012bbc:	c3                   	ret    
c0012bbd:	8d 76 00             	lea    esi,[esi+0x0]

c0012bc0 <KeSwitchEndian32(unsigned int)>:
c0012bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc4:	c1 e8 18             	shr    eax,0x18
c0012bc7:	89 c2                	mov    edx,eax
c0012bc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bcd:	c1 e0 08             	shl    eax,0x8
c0012bd0:	25 00 00 ff 00       	and    eax,0xff0000
c0012bd5:	09 c2                	or     edx,eax
c0012bd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bdb:	c1 e8 08             	shr    eax,0x8
c0012bde:	25 00 ff 00 00       	and    eax,0xff00
c0012be3:	09 c2                	or     edx,eax
c0012be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be9:	c1 e0 18             	shl    eax,0x18
c0012bec:	09 d0                	or     eax,edx
c0012bee:	c3                   	ret    
c0012bef:	90                   	nop

c0012bf0 <EthernetCRC32(unsigned char*, int)>:
c0012bf0:	83 ec 10             	sub    esp,0x10
c0012bf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012bf8:	75 0a                	jne    c0012c04 <EthernetCRC32(unsigned char*, int)+0x14>
c0012bfa:	b8 00 00 00 00       	mov    eax,0x0
c0012bff:	e9 8c 00 00 00       	jmp    c0012c90 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c04:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c09:	7f 09                	jg     c0012c14 <EthernetCRC32(unsigned char*, int)+0x24>
c0012c0b:	b8 00 00 00 00       	mov    eax,0x0
c0012c10:	eb 7e                	jmp    c0012c90 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012c12:	66 90                	xchg   ax,ax
c0012c14:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012c1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c28:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012c2c:	7d 5a                	jge    c0012c88 <EthernetCRC32(unsigned char*, int)+0x98>
c0012c2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c36:	01 d0                	add    eax,edx
c0012c38:	8a 00                	mov    al,BYTE PTR [eax]
c0012c3a:	0f b6 c0             	movzx  eax,al
c0012c3d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012c41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c49:	8d 76 00             	lea    esi,[esi+0x0]
c0012c4c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c51:	7f 2d                	jg     c0012c80 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c57:	83 e0 01             	and    eax,0x1
c0012c5a:	74 10                	je     c0012c6c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c60:	d1 e8                	shr    eax,1
c0012c62:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c67:	eb 0b                	jmp    c0012c74 <EthernetCRC32(unsigned char*, int)+0x84>
c0012c69:	8d 76 00             	lea    esi,[esi+0x0]
c0012c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c70:	d1 e8                	shr    eax,1
c0012c72:	66 90                	xchg   ax,ax
c0012c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c78:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c7d:	eb cd                	jmp    c0012c4c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c7f:	90                   	nop
c0012c80:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c85:	eb 9d                	jmp    c0012c24 <EthernetCRC32(unsigned char*, int)+0x34>
c0012c87:	90                   	nop
c0012c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c8c:	f7 d0                	not    eax
c0012c8e:	66 90                	xchg   ax,ax
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	c3                   	ret    

c0012c94 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c94:	83 ec 2c             	sub    esp,0x2c
c0012c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c9b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012caf:	0f b7 c0             	movzx  eax,ax
c0012cb2:	3d 06 08 00 00       	cmp    eax,0x806
c0012cb7:	75 13                	jne    c0012ccc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	68 ae 25 02 c0       	push   0xc00225ae
c0012cc1:	e8 7f 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012cc6:	83 c4 10             	add    esp,0x10
c0012cc9:	eb 25                	jmp    c0012cf0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012ccb:	90                   	nop
c0012ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012cd3:	0f b7 c0             	movzx  eax,ax
c0012cd6:	3d 00 08 00 00       	cmp    eax,0x800
c0012cdb:	75 13                	jne    c0012cf0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	68 c4 25 02 c0       	push   0xc00225c4
c0012ce5:	e8 5b 7c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012cea:	83 c4 10             	add    esp,0x10
c0012ced:	8d 76 00             	lea    esi,[esi+0x0]
c0012cf0:	90                   	nop
c0012cf1:	83 c4 2c             	add    esp,0x2c
c0012cf4:	c3                   	ret    

c0012cf5 <CmOpen(char const*)>:
c0012cf5:	57                   	push   edi
c0012cf6:	56                   	push   esi
c0012cf7:	53                   	push   ebx
c0012cf8:	83 ec 1c             	sub    esp,0x1c
c0012cfb:	6a 30                	push   0x30
c0012cfd:	e8 b4 4d ff ff       	call   c0007ab6 <malloc>
c0012d02:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d09:	89 c3                	mov    ebx,eax
c0012d0b:	e8 a6 4d ff ff       	call   c0007ab6 <malloc>
c0012d10:	83 c4 0c             	add    esp,0xc
c0012d13:	89 c6                	mov    esi,eax
c0012d15:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012d1b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d1f:	50                   	push   eax
c0012d20:	e8 c9 8e ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0012d25:	83 c4 0c             	add    esp,0xc
c0012d28:	89 33                	mov    DWORD PTR [ebx],esi
c0012d2a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012d2e:	50                   	push   eax
c0012d2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d33:	50                   	push   eax
c0012d34:	56                   	push   esi
c0012d35:	e8 d4 91 ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0012d3a:	5a                   	pop    edx
c0012d3b:	59                   	pop    ecx
c0012d3c:	6a 01                	push   0x1
c0012d3e:	ff 33                	push   DWORD PTR [ebx]
c0012d40:	e8 c7 8e ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0012d45:	5e                   	pop    esi
c0012d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d4a:	e8 67 4d ff ff       	call   c0007ab6 <malloc>
c0012d4f:	5a                   	pop    edx
c0012d50:	89 c7                	mov    edi,eax
c0012d52:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d58:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d5a:	56                   	push   esi
c0012d5b:	57                   	push   edi
c0012d5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d64:	50                   	push   eax
c0012d65:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d68:	83 c4 14             	add    esp,0x14
c0012d6b:	ff 33                	push   DWORD PTR [ebx]
c0012d6d:	e8 f8 8e ff ff       	call   c000bc6a <File::close()>
c0012d72:	59                   	pop    ecx
c0012d73:	58                   	pop    eax
c0012d74:	6a 13                	push   0x13
c0012d76:	ff 33                	push   DWORD PTR [ebx]
c0012d78:	e8 8f 8e ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0012d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d81:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d84:	57                   	push   edi
c0012d85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d8d:	50                   	push   eax
c0012d8e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d91:	83 c4 14             	add    esp,0x14
c0012d94:	57                   	push   edi
c0012d95:	e8 2c 4d ff ff       	call   c0007ac6 <free>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012da0:	75 10                	jne    c0012db2 <CmOpen(char const*)+0xbd>
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	68 d9 25 02 c0       	push   0xc00225d9
c0012daa:	e8 10 e9 ff ff       	call   c00116bf <KePanic(char const*)>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012db5:	50                   	push   eax
c0012db6:	6a 00                	push   0x0
c0012db8:	6a 00                	push   0x0
c0012dba:	ff 33                	push   DWORD PTR [ebx]
c0012dbc:	e8 09 8f ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012dc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012dc8:	57                   	push   edi
c0012dc9:	6a 00                	push   0x0
c0012dcb:	6a 2b                	push   0x2b
c0012dcd:	50                   	push   eax
c0012dce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012dd1:	83 c4 1c             	add    esp,0x1c
c0012dd4:	6a 00                	push   0x0
c0012dd6:	6a 00                	push   0x0
c0012dd8:	ff 33                	push   DWORD PTR [ebx]
c0012dda:	e8 eb 8e ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012ddf:	83 c4 0c             	add    esp,0xc
c0012de2:	6a 08                	push   0x8
c0012de4:	68 ea 25 02 c0       	push   0xc00225ea
c0012de9:	57                   	push   edi
c0012dea:	e8 91 d5 fe ff       	call   c0000380 <memcmp>
c0012def:	83 c4 10             	add    esp,0x10
c0012df2:	85 c0                	test   eax,eax
c0012df4:	74 10                	je     c0012e06 <CmOpen(char const*)+0x111>
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	68 f3 25 02 c0       	push   0xc00225f3
c0012dfe:	e8 bc e8 ff ff       	call   c00116bf <KePanic(char const*)>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012e0a:	89 d8                	mov    eax,ebx
c0012e0c:	83 c4 10             	add    esp,0x10
c0012e0f:	5b                   	pop    ebx
c0012e10:	5e                   	pop    esi
c0012e11:	5f                   	pop    edi
c0012e12:	c3                   	ret    

c0012e13 <CmClose(Reghive_Tag*)>:
c0012e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e17:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e1b:	74 0b                	je     c0012e28 <CmClose(Reghive_Tag*)+0x15>
c0012e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e23:	e9 42 8e ff ff       	jmp    c000bc6a <File::close()>
c0012e28:	c3                   	ret    

c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e29:	53                   	push   ebx
c0012e2a:	83 ec 18             	sub    esp,0x18
c0012e2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e31:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e35:	74 29                	je     c0012e60 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e37:	50                   	push   eax
c0012e38:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e3d:	99                   	cdq    
c0012e3e:	52                   	push   edx
c0012e3f:	50                   	push   eax
c0012e40:	ff 33                	push   DWORD PTR [ebx]
c0012e42:	e8 83 8e ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012e47:	5a                   	pop    edx
c0012e48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e4a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e50:	51                   	push   ecx
c0012e51:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e55:	6a 00                	push   0x0
c0012e57:	6a 2b                	push   0x2b
c0012e59:	50                   	push   eax
c0012e5a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e5d:	83 c4 20             	add    esp,0x20
c0012e60:	83 c4 18             	add    esp,0x18
c0012e63:	5b                   	pop    ebx
c0012e64:	c3                   	ret    

c0012e65 <CmGetString(Reghive_Tag*, int, char*)>:
c0012e65:	55                   	push   ebp
c0012e66:	57                   	push   edi
c0012e67:	56                   	push   esi
c0012e68:	53                   	push   ebx
c0012e69:	31 db                	xor    ebx,ebx
c0012e6b:	83 ec 70             	sub    esp,0x70
c0012e6e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e75:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e79:	50                   	push   eax
c0012e7a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e81:	55                   	push   ebp
c0012e82:	e8 a2 ff ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e87:	83 c4 10             	add    esp,0x10
c0012e8a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e8f:	c1 e0 08             	shl    eax,0x8
c0012e92:	89 c2                	mov    edx,eax
c0012e94:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e99:	09 d0                	or     eax,edx
c0012e9b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ea0:	c1 e0 08             	shl    eax,0x8
c0012ea3:	09 d0                	or     eax,edx
c0012ea5:	74 25                	je     c0012ecc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012ea7:	6b fb 0d             	imul   edi,ebx,0xd
c0012eaa:	52                   	push   edx
c0012eab:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012eaf:	52                   	push   edx
c0012eb0:	50                   	push   eax
c0012eb1:	55                   	push   ebp
c0012eb2:	e8 72 ff ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012eb7:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012ebb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012ec2:	b9 27 00 00 00       	mov    ecx,0x27
c0012ec7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ec9:	83 c4 10             	add    esp,0x10
c0012ecc:	83 c3 03             	add    ebx,0x3
c0012ecf:	83 fb 15             	cmp    ebx,0x15
c0012ed2:	75 b6                	jne    c0012e8a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012ed4:	83 c4 6c             	add    esp,0x6c
c0012ed7:	5b                   	pop    ebx
c0012ed8:	5e                   	pop    esi
c0012ed9:	5f                   	pop    edi
c0012eda:	5d                   	pop    ebp
c0012edb:	c3                   	ret    

c0012edc <CmEnterDirectory(Reghive_Tag*, int)>:
c0012edc:	83 ec 40             	sub    esp,0x40
c0012edf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ee3:	50                   	push   eax
c0012ee4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ee8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eec:	e8 38 ff ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	83 c8 ff             	or     eax,0xffffffff
c0012ef7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012efc:	75 19                	jne    c0012f17 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012efe:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012f03:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012f08:	c1 e0 08             	shl    eax,0x8
c0012f0b:	09 c2                	or     edx,eax
c0012f0d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012f12:	c1 e0 10             	shl    eax,0x10
c0012f15:	09 d0                	or     eax,edx
c0012f17:	83 c4 3c             	add    esp,0x3c
c0012f1a:	c3                   	ret    

c0012f1b <CmGetNext(Reghive_Tag*, int)>:
c0012f1b:	83 ec 40             	sub    esp,0x40
c0012f1e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f22:	50                   	push   eax
c0012f23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2b:	e8 f9 fe ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f30:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012f35:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012f3a:	c1 e0 08             	shl    eax,0x8
c0012f3d:	09 c2                	or     edx,eax
c0012f3f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012f44:	83 c4 4c             	add    esp,0x4c
c0012f47:	c1 e0 10             	shl    eax,0x10
c0012f4a:	09 d0                	or     eax,edx
c0012f4c:	c3                   	ret    

c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f4d:	53                   	push   ebx
c0012f4e:	83 ec 18             	sub    esp,0x18
c0012f51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f55:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f59:	74 29                	je     c0012f84 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f5b:	50                   	push   eax
c0012f5c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f61:	99                   	cdq    
c0012f62:	52                   	push   edx
c0012f63:	50                   	push   eax
c0012f64:	ff 33                	push   DWORD PTR [ebx]
c0012f66:	e8 5f 8d ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012f6b:	5a                   	pop    edx
c0012f6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f6e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f74:	51                   	push   ecx
c0012f75:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f79:	6a 00                	push   0x0
c0012f7b:	6a 2b                	push   0x2b
c0012f7d:	50                   	push   eax
c0012f7e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f81:	83 c4 20             	add    esp,0x20
c0012f84:	83 c4 18             	add    esp,0x18
c0012f87:	5b                   	pop    ebx
c0012f88:	c3                   	ret    

c0012f89 <CmFreeExtent(Reghive_Tag*, int)>:
c0012f89:	53                   	push   ebx
c0012f8a:	83 ec 3c             	sub    esp,0x3c
c0012f8d:	6a 2b                	push   0x2b
c0012f8f:	6a 00                	push   0x0
c0012f91:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f95:	53                   	push   ebx
c0012f96:	e8 55 d5 fe ff       	call   c00004f0 <memset>
c0012f9b:	83 c4 0c             	add    esp,0xc
c0012f9e:	53                   	push   ebx
c0012f9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fa3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fa7:	e8 a1 ff ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fac:	83 c4 48             	add    esp,0x48
c0012faf:	5b                   	pop    ebx
c0012fb0:	c3                   	ret    

c0012fb1 <CmUpdateHeader(Reghive_Tag*)>:
c0012fb1:	83 ec 0c             	sub    esp,0xc
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012fbc:	74 10                	je     c0012fce <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012fbe:	52                   	push   edx
c0012fbf:	8d 50 05             	lea    edx,[eax+0x5]
c0012fc2:	52                   	push   edx
c0012fc3:	6a 00                	push   0x0
c0012fc5:	50                   	push   eax
c0012fc6:	e8 82 ff ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	83 c4 0c             	add    esp,0xc
c0012fd1:	c3                   	ret    

c0012fd2 <CmExpand(Reghive_Tag*, int)>:
c0012fd2:	57                   	push   edi
c0012fd3:	56                   	push   esi
c0012fd4:	83 ce ff             	or     esi,0xffffffff
c0012fd7:	53                   	push   ebx
c0012fd8:	83 ec 30             	sub    esp,0x30
c0012fdb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012fdf:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012fe3:	74 5f                	je     c0013044 <CmExpand(Reghive_Tag*, int)+0x72>
c0012fe5:	31 d2                	xor    edx,edx
c0012fe7:	31 f6                	xor    esi,esi
c0012fe9:	50                   	push   eax
c0012fea:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012fee:	52                   	push   edx
c0012fef:	50                   	push   eax
c0012ff0:	ff 33                	push   DWORD PTR [ebx]
c0012ff2:	e8 d3 8c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0012ff7:	83 c4 0c             	add    esp,0xc
c0012ffa:	6a 2b                	push   0x2b
c0012ffc:	6a 00                	push   0x0
c0012ffe:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0013002:	57                   	push   edi
c0013003:	e8 e8 d4 fe ff       	call   c00004f0 <memset>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001300f:	7d 1b                	jge    c001302c <CmExpand(Reghive_Tag*, int)+0x5a>
c0013011:	83 ec 0c             	sub    esp,0xc
c0013014:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013016:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001301a:	8b 10                	mov    edx,DWORD PTR [eax]
c001301c:	46                   	inc    esi
c001301d:	51                   	push   ecx
c001301e:	57                   	push   edi
c001301f:	6a 00                	push   0x0
c0013021:	6a 2b                	push   0x2b
c0013023:	50                   	push   eax
c0013024:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0013027:	83 c4 20             	add    esp,0x20
c001302a:	eb df                	jmp    c001300b <CmExpand(Reghive_Tag*, int)+0x39>
c001302c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013030:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0013033:	83 ec 0c             	sub    esp,0xc
c0013036:	01 f2                	add    edx,esi
c0013038:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001303b:	53                   	push   ebx
c001303c:	e8 70 ff ff ff       	call   c0012fb1 <CmUpdateHeader(Reghive_Tag*)>
c0013041:	83 c4 10             	add    esp,0x10
c0013044:	83 c4 30             	add    esp,0x30
c0013047:	89 f0                	mov    eax,esi
c0013049:	5b                   	pop    ebx
c001304a:	5e                   	pop    esi
c001304b:	5f                   	pop    edi
c001304c:	c3                   	ret    

c001304d <CmFindUnusedExtent(Reghive_Tag*)>:
c001304d:	55                   	push   ebp
c001304e:	57                   	push   edi
c001304f:	56                   	push   esi
c0013050:	53                   	push   ebx
c0013051:	83 cb ff             	or     ebx,0xffffffff
c0013054:	83 ec 1c             	sub    esp,0x1c
c0013057:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001305b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001305f:	74 68                	je     c00130c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013061:	be 2b 00 00 00       	mov    esi,0x2b
c0013066:	51                   	push   ecx
c0013067:	31 ff                	xor    edi,edi
c0013069:	6a 00                	push   0x0
c001306b:	31 db                	xor    ebx,ebx
c001306d:	6a 00                	push   0x0
c001306f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013072:	e8 53 8c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001307d:	76 3b                	jbe    c00130ba <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001307f:	83 ec 0c             	sub    esp,0xc
c0013082:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013085:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0013089:	8b 10                	mov    edx,DWORD PTR [eax]
c001308b:	51                   	push   ecx
c001308c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013090:	51                   	push   ecx
c0013091:	6a 00                	push   0x0
c0013093:	6a 01                	push   0x1
c0013095:	50                   	push   eax
c0013096:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0013099:	83 c4 20             	add    esp,0x20
c001309c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00130a1:	74 26                	je     c00130c9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00130a3:	43                   	inc    ebx
c00130a4:	52                   	push   edx
c00130a5:	57                   	push   edi
c00130a6:	56                   	push   esi
c00130a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00130aa:	e8 1b 8c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c00130af:	83 c6 2b             	add    esi,0x2b
c00130b2:	83 d7 00             	adc    edi,0x0
c00130b5:	83 c4 10             	add    esp,0x10
c00130b8:	eb c0                	jmp    c001307a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00130ba:	50                   	push   eax
c00130bb:	50                   	push   eax
c00130bc:	6a 40                	push   0x40
c00130be:	55                   	push   ebp
c00130bf:	e8 0e ff ff ff       	call   c0012fd2 <CmExpand(Reghive_Tag*, int)>
c00130c4:	83 c4 10             	add    esp,0x10
c00130c7:	89 c3                	mov    ebx,eax
c00130c9:	83 c4 1c             	add    esp,0x1c
c00130cc:	89 d8                	mov    eax,ebx
c00130ce:	5b                   	pop    ebx
c00130cf:	5e                   	pop    esi
c00130d0:	5f                   	pop    edi
c00130d1:	5d                   	pop    ebp
c00130d2:	c3                   	ret    

c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00130d3:	55                   	push   ebp
c00130d4:	57                   	push   edi
c00130d5:	56                   	push   esi
c00130d6:	53                   	push   ebx
c00130d7:	81 ec 88 00 00 00    	sub    esp,0x88
c00130dd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00130e4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130eb:	e8 5d ff ff ff       	call   c001304d <CmFindUnusedExtent(Reghive_Tag*)>
c00130f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130f4:	83 c4 0c             	add    esp,0xc
c00130f7:	6a 2b                	push   0x2b
c00130f9:	6a 00                	push   0x0
c00130fb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00130ff:	55                   	push   ebp
c0013100:	e8 eb d3 fe ff       	call   c00004f0 <memset>
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	85 db                	test   ebx,ebx
c001310a:	74 12                	je     c001311e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001310c:	51                   	push   ecx
c001310d:	55                   	push   ebp
c001310e:	53                   	push   ebx
c001310f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013116:	e8 0e fd ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013122:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013129:	b9 2b 00 00 00       	mov    ecx,0x2b
c001312e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013130:	85 db                	test   ebx,ebx
c0013132:	74 49                	je     c001317d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013134:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013139:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001313e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013142:	c1 e0 08             	shl    eax,0x8
c0013145:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001314b:	09 c8                	or     eax,ecx
c001314d:	74 11                	je     c0013160 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001314f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013153:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013157:	c1 e8 10             	shr    eax,0x10
c001315a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001315e:	eb 0f                	jmp    c001316f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013160:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013165:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001316a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001316f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013173:	c1 ea 08             	shr    edx,0x8
c0013176:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001317b:	eb 0f                	jmp    c001318c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001317d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013182:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013187:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001318c:	52                   	push   edx
c001318d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013191:	50                   	push   eax
c0013192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013196:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001319d:	e8 ab fd ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131a2:	83 c4 10             	add    esp,0x10
c00131a5:	85 db                	test   ebx,ebx
c00131a7:	74 12                	je     c00131bb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00131a9:	50                   	push   eax
c00131aa:	55                   	push   ebp
c00131ab:	53                   	push   ebx
c00131ac:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131b3:	e8 95 fd ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00131bf:	83 c4 7c             	add    esp,0x7c
c00131c2:	5b                   	pop    ebx
c00131c3:	5e                   	pop    esi
c00131c4:	5f                   	pop    edi
c00131c5:	5d                   	pop    ebp
c00131c6:	c3                   	ret    

c00131c7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00131c7:	55                   	push   ebp
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	53                   	push   ebx
c00131cb:	bb 27 00 00 00       	mov    ebx,0x27
c00131d0:	81 ec 88 00 00 00    	sub    esp,0x88
c00131d6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00131dd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00131e4:	e8 87 d3 fe ff       	call   c0000570 <strlen>
c00131e9:	8d 48 26             	lea    ecx,[eax+0x26]
c00131ec:	89 c8                	mov    eax,ecx
c00131ee:	99                   	cdq    
c00131ef:	f7 fb                	idiv   ebx
c00131f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00131fe:	7e 10                	jle    c0013210 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	68 04 26 02 c0       	push   0xc0022604
c0013208:	e8 b2 e4 ff ff       	call   c00116bf <KePanic(char const*)>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	31 ff                	xor    edi,edi
c0013212:	50                   	push   eax
c0013213:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013217:	53                   	push   ebx
c0013218:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001321f:	56                   	push   esi
c0013220:	e8 04 fc ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013225:	83 c4 10             	add    esp,0x10
c0013228:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001322c:	89 d0                	mov    eax,edx
c001322e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013232:	c1 e0 08             	shl    eax,0x8
c0013235:	09 c2                	or     edx,eax
c0013237:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001323b:	c1 e2 08             	shl    edx,0x8
c001323e:	09 c2                	or     edx,eax
c0013240:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013244:	7e 76                	jle    c00132bc <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0013246:	85 d2                	test   edx,edx
c0013248:	75 25                	jne    c001326f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001324a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001324f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013253:	50                   	push   eax
c0013254:	6a 00                	push   0x0
c0013256:	6a 00                	push   0x0
c0013258:	56                   	push   esi
c0013259:	e8 75 fe ff ff       	call   c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001325e:	83 c4 10             	add    esp,0x10
c0013261:	89 c2                	mov    edx,eax
c0013263:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013266:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013269:	c1 f8 10             	sar    eax,0x10
c001326c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001326f:	55                   	push   ebp
c0013270:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0013274:	55                   	push   ebp
c0013275:	52                   	push   edx
c0013276:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327a:	56                   	push   esi
c001327b:	e8 a9 fb ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013280:	83 c4 0c             	add    esp,0xc
c0013283:	6a 27                	push   0x27
c0013285:	6a 00                	push   0x0
c0013287:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001328b:	51                   	push   ecx
c001328c:	e8 5f d2 fe ff       	call   c00004f0 <memset>
c0013291:	83 c4 0c             	add    esp,0xc
c0013294:	6b c7 27             	imul   eax,edi,0x27
c0013297:	6a 27                	push   0x27
c0013299:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00132a0:	50                   	push   eax
c00132a1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00132a5:	51                   	push   ecx
c00132a6:	e8 d5 d3 fe ff       	call   c0000680 <strncpy>
c00132ab:	83 c4 0c             	add    esp,0xc
c00132ae:	55                   	push   ebp
c00132af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00132b3:	52                   	push   edx
c00132b4:	56                   	push   esi
c00132b5:	e8 93 fc ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132ba:	eb 19                	jmp    c00132d5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00132bc:	85 d2                	test   edx,edx
c00132be:	74 18                	je     c00132d8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00132c0:	51                   	push   ecx
c00132c1:	51                   	push   ecx
c00132c2:	52                   	push   edx
c00132c3:	56                   	push   esi
c00132c4:	e8 c0 fc ff ff       	call   c0012f89 <CmFreeExtent(Reghive_Tag*, int)>
c00132c9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00132cd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00132d1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	47                   	inc    edi
c00132d9:	83 c3 03             	add    ebx,0x3
c00132dc:	83 ff 07             	cmp    edi,0x7
c00132df:	0f 85 43 ff ff ff    	jne    c0013228 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00132e5:	50                   	push   eax
c00132e6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00132ea:	50                   	push   eax
c00132eb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132f2:	56                   	push   esi
c00132f3:	e8 55 fc ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132f8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00132fe:	5b                   	pop    ebx
c00132ff:	5e                   	pop    esi
c0013300:	5f                   	pop    edi
c0013301:	5d                   	pop    ebp
c0013302:	c3                   	ret    

c0013303 <CmGetMatch(char*, char*, bool, bool*)>:
c0013303:	56                   	push   esi
c0013304:	53                   	push   ebx
c0013305:	50                   	push   eax
c0013306:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001330a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001330f:	74 25                	je     c0013336 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013311:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013314:	31 db                	xor    ebx,ebx
c0013316:	50                   	push   eax
c0013317:	50                   	push   eax
c0013318:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c001331f:	50                   	push   eax
c0013320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013324:	e8 27 d4 fe ff       	call   c0000750 <strcmp>
c0013329:	83 c4 10             	add    esp,0x10
c001332c:	85 c0                	test   eax,eax
c001332e:	74 2e                	je     c001335e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013330:	43                   	inc    ebx
c0013331:	83 fb 3f             	cmp    ebx,0x3f
c0013334:	75 e0                	jne    c0013316 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013336:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013339:	31 db                	xor    ebx,ebx
c001333b:	8d 04 9d a0 3e 02 c0 	lea    eax,[ebx*4-0x3ffdc160]
c0013342:	51                   	push   ecx
c0013343:	51                   	push   ecx
c0013344:	50                   	push   eax
c0013345:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013349:	e8 02 d4 fe ff       	call   c0000750 <strcmp>
c001334e:	83 c4 10             	add    esp,0x10
c0013351:	85 c0                	test   eax,eax
c0013353:	74 09                	je     c001335e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013355:	43                   	inc    ebx
c0013356:	83 fb 3f             	cmp    ebx,0x3f
c0013359:	75 e0                	jne    c001333b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001335b:	83 cb ff             	or     ebx,0xffffffff
c001335e:	89 d8                	mov    eax,ebx
c0013360:	5a                   	pop    edx
c0013361:	5b                   	pop    ebx
c0013362:	5e                   	pop    esi
c0013363:	c3                   	ret    

c0013364 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013364:	55                   	push   ebp
c0013365:	31 c0                	xor    eax,eax
c0013367:	57                   	push   edi
c0013368:	56                   	push   esi
c0013369:	53                   	push   ebx
c001336a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001336e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013372:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013374:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013378:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001337b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001337f:	83 fd 1f             	cmp    ebp,0x1f
c0013382:	7f 0b                	jg     c001338f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013384:	0f b6 c2             	movzx  eax,dl
c0013387:	d3 e0                	shl    eax,cl
c0013389:	09 07                	or     DWORD PTR [edi],eax
c001338b:	b0 01                	mov    al,0x1
c001338d:	01 33                	add    DWORD PTR [ebx],esi
c001338f:	5b                   	pop    ebx
c0013390:	5e                   	pop    esi
c0013391:	5f                   	pop    edi
c0013392:	5d                   	pop    ebp
c0013393:	c3                   	ret    

c0013394 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013394:	57                   	push   edi
c0013395:	56                   	push   esi
c0013396:	53                   	push   ebx
c0013397:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001339b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001339f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00133a3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00133a7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00133a9:	7c 17                	jl     c00133c2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00133ab:	8b 17                	mov    edx,DWORD PTR [edi]
c00133ad:	b8 01 00 00 00       	mov    eax,0x1
c00133b2:	d3 e0                	shl    eax,cl
c00133b4:	48                   	dec    eax
c00133b5:	21 d0                	and    eax,edx
c00133b7:	d3 ea                	shr    edx,cl
c00133b9:	89 17                	mov    DWORD PTR [edi],edx
c00133bb:	29 0b                	sub    DWORD PTR [ebx],ecx
c00133bd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00133c0:	eb 05                	jmp    c00133c7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00133c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00133c5:	31 c0                	xor    eax,eax
c00133c7:	5b                   	pop    ebx
c00133c8:	5e                   	pop    esi
c00133c9:	5f                   	pop    edi
c00133ca:	c3                   	ret    

c00133cb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00133cb:	83 ec 40             	sub    esp,0x40
c00133ce:	8d 44 24 09          	lea    eax,[esp+0x9]
c00133d2:	50                   	push   eax
c00133d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00133db:	e8 49 fa ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133e0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00133e4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00133e8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00133ec:	89 10                	mov    DWORD PTR [eax],edx
c00133ee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133f1:	83 c4 4c             	add    esp,0x4c
c00133f4:	c3                   	ret    

c00133f5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133f5:	55                   	push   ebp
c00133f6:	57                   	push   edi
c00133f7:	56                   	push   esi
c00133f8:	53                   	push   ebx
c00133f9:	83 ec 40             	sub    esp,0x40
c00133fc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013400:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013404:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013408:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001340c:	53                   	push   ebx
c001340d:	56                   	push   esi
c001340e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013412:	e8 12 fa ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013417:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001341b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	53                   	push   ebx
c0013423:	56                   	push   esi
c0013424:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013428:	e8 20 fb ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001342d:	83 c4 4c             	add    esp,0x4c
c0013430:	5b                   	pop    ebx
c0013431:	5e                   	pop    esi
c0013432:	5f                   	pop    edi
c0013433:	5d                   	pop    ebp
c0013434:	c3                   	ret    

c0013435 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013435:	55                   	push   ebp
c0013436:	57                   	push   edi
c0013437:	56                   	push   esi
c0013438:	31 f6                	xor    esi,esi
c001343a:	53                   	push   ebx
c001343b:	31 db                	xor    ebx,ebx
c001343d:	83 ec 40             	sub    esp,0x40
c0013440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013450:	6a 12                	push   0x12
c0013452:	68 ee 00 00 00       	push   0xee
c0013457:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001345b:	e8 90 d0 fe ff       	call   c00004f0 <memset>
c0013460:	83 c4 10             	add    esp,0x10
c0013463:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013467:	6a 08                	push   0x8
c0013469:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001346d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013471:	50                   	push   eax
c0013472:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013476:	55                   	push   ebp
c0013477:	57                   	push   edi
c0013478:	e8 e7 fe ff ff       	call   c0013364 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013484:	50                   	push   eax
c0013485:	6a 06                	push   0x6
c0013487:	55                   	push   ebp
c0013488:	57                   	push   edi
c0013489:	e8 06 ff ff ff       	call   c0013394 <CmGetShift(unsigned int*, int*, int, bool*)>
c001348e:	83 c4 10             	add    esp,0x10
c0013491:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013496:	74 07                	je     c001349f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013498:	46                   	inc    esi
c0013499:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001349d:	eb e1                	jmp    c0013480 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001349f:	43                   	inc    ebx
c00134a0:	83 fb 12             	cmp    ebx,0x12
c00134a3:	75 c2                	jne    c0013467 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00134a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00134a9:	31 db                	xor    ebx,ebx
c00134ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00134ae:	50                   	push   eax
c00134af:	50                   	push   eax
c00134b0:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00134b5:	43                   	inc    ebx
c00134b6:	8d 04 85 a0 3e 02 c0 	lea    eax,[eax*4-0x3ffdc160]
c00134bd:	50                   	push   eax
c00134be:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00134c2:	e8 79 d3 fe ff       	call   c0000840 <strcat>
c00134c7:	83 c4 10             	add    esp,0x10
c00134ca:	83 fb 18             	cmp    ebx,0x18
c00134cd:	75 df                	jne    c00134ae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00134cf:	83 c4 3c             	add    esp,0x3c
c00134d2:	31 c0                	xor    eax,eax
c00134d4:	5b                   	pop    ebx
c00134d5:	5e                   	pop    esi
c00134d6:	5f                   	pop    edi
c00134d7:	5d                   	pop    ebp
c00134d8:	c3                   	ret    

c00134d9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00134d9:	83 ec 40             	sub    esp,0x40
c00134dc:	8d 44 24 09          	lea    eax,[esp+0x9]
c00134e0:	50                   	push   eax
c00134e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00134e9:	e8 3b f9 ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134ee:	58                   	pop    eax
c00134ef:	5a                   	pop    edx
c00134f0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134f4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134f8:	50                   	push   eax
c00134f9:	e8 37 ff ff ff       	call   c0013435 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00134fe:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013503:	83 c4 4c             	add    esp,0x4c
c0013506:	c3                   	ret    

c0013507 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013507:	55                   	push   ebp
c0013508:	57                   	push   edi
c0013509:	56                   	push   esi
c001350a:	53                   	push   ebx
c001350b:	31 db                	xor    ebx,ebx
c001350d:	83 ec 70             	sub    esp,0x70
c0013510:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013517:	6a 30                	push   0x30
c0013519:	6a 00                	push   0x0
c001351b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001351f:	56                   	push   esi
c0013520:	e8 cb cf fe ff       	call   c00004f0 <memset>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	57                   	push   edi
c001352c:	e8 3f d0 fe ff       	call   c0000570 <strlen>
c0013531:	83 c4 10             	add    esp,0x10
c0013534:	39 d8                	cmp    eax,ebx
c0013536:	76 16                	jbe    c001354e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001353f:	50                   	push   eax
c0013540:	e8 eb d3 fe ff       	call   c0000930 <toupper>
c0013545:	83 c4 10             	add    esp,0x10
c0013548:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001354b:	43                   	inc    ebx
c001354c:	eb da                	jmp    c0013528 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001354e:	31 f6                	xor    esi,esi
c0013550:	52                   	push   edx
c0013551:	31 ff                	xor    edi,edi
c0013553:	6a 18                	push   0x18
c0013555:	6a 3f                	push   0x3f
c0013557:	8d 44 24 24          	lea    eax,[esp+0x24]
c001355b:	50                   	push   eax
c001355c:	e8 8f cf fe ff       	call   c00004f0 <memset>
c0013561:	83 c4 10             	add    esp,0x10
c0013564:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013568:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001356c:	84 c0                	test   al,al
c001356e:	0f 84 b0 00 00 00    	je     c0013624 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013574:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013578:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001357d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013581:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013586:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013589:	83 ec 0c             	sub    esp,0xc
c001358c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013590:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013594:	53                   	push   ebx
c0013595:	e8 d6 cf fe ff       	call   c0000570 <strlen>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	85 c0                	test   eax,eax
c001359f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00135a3:	74 0b                	je     c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00135a5:	50                   	push   eax
c00135a6:	6a 01                	push   0x1
c00135a8:	53                   	push   ebx
c00135a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135ad:	50                   	push   eax
c00135ae:	eb 0a                	jmp    c00135ba <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00135b0:	50                   	push   eax
c00135b1:	6a 00                	push   0x0
c00135b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00135b7:	50                   	push   eax
c00135b8:	6a 00                	push   0x0
c00135ba:	e8 44 fd ff ff       	call   c0013303 <CmGetMatch(char*, char*, bool, bool*)>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	83 f8 ff             	cmp    eax,0xffffffff
c00135c5:	75 1a                	jne    c00135e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	68 19 26 02 c0       	push   0xc0022619
c00135cf:	e8 eb e0 ff ff       	call   c00116bf <KePanic(char const*)>
c00135d4:	83 c4 10             	add    esp,0x10
c00135d7:	b8 02 00 00 00       	mov    eax,0x2
c00135dc:	e9 bc 00 00 00       	jmp    c001369d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135e1:	83 ff 18             	cmp    edi,0x18
c00135e4:	75 1a                	jne    c0013600 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	68 2e 26 02 c0       	push   0xc002262e
c00135ee:	e8 cc e0 ff ff       	call   c00116bf <KePanic(char const*)>
c00135f3:	83 c4 10             	add    esp,0x10
c00135f6:	b8 01 00 00 00       	mov    eax,0x1
c00135fb:	e9 9d 00 00 00       	jmp    c001369d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013600:	47                   	inc    edi
c0013601:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013606:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001360a:	74 02                	je     c001360e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001360c:	89 ee                	mov    esi,ebp
c001360e:	83 ec 0c             	sub    esp,0xc
c0013611:	53                   	push   ebx
c0013612:	e8 59 cf fe ff       	call   c0000570 <strlen>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	85 c0                	test   eax,eax
c001361c:	74 06                	je     c0013624 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001361e:	46                   	inc    esi
c001361f:	e9 40 ff ff ff       	jmp    c0013564 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013624:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001362c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013634:	31 f6                	xor    esi,esi
c0013636:	50                   	push   eax
c0013637:	31 ff                	xor    edi,edi
c0013639:	6a 12                	push   0x12
c001363b:	68 ee 00 00 00       	push   0xee
c0013640:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013647:	e8 a4 ce fe ff       	call   c00004f0 <memset>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	83 fe 17             	cmp    esi,0x17
c0013652:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013656:	7e 26                	jle    c001367e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013658:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001365c:	50                   	push   eax
c001365d:	6a 08                	push   0x8
c001365f:	55                   	push   ebp
c0013660:	53                   	push   ebx
c0013661:	e8 2e fd ff ff       	call   c0013394 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013666:	83 c4 10             	add    esp,0x10
c0013669:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001366e:	74 26                	je     c0013696 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013670:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013677:	4e                   	dec    esi
c0013678:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001367b:	47                   	inc    edi
c001367c:	eb 1c                	jmp    c001369a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001367e:	6a 06                	push   0x6
c0013680:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013685:	50                   	push   eax
c0013686:	55                   	push   ebp
c0013687:	53                   	push   ebx
c0013688:	e8 d7 fc ff ff       	call   c0013364 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	84 c0                	test   al,al
c0013692:	75 06                	jne    c001369a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013694:	eb c2                	jmp    c0013658 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013696:	31 c0                	xor    eax,eax
c0013698:	eb 03                	jmp    c001369d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001369a:	46                   	inc    esi
c001369b:	eb b2                	jmp    c001364f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001369d:	83 c4 6c             	add    esp,0x6c
c00136a0:	5b                   	pop    ebx
c00136a1:	5e                   	pop    esi
c00136a2:	5f                   	pop    edi
c00136a3:	5d                   	pop    ebp
c00136a4:	c3                   	ret    

c00136a5 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 3c             	sub    esp,0x3c
c00136a9:	6a 2b                	push   0x2b
c00136ab:	6a 00                	push   0x0
c00136ad:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136b1:	53                   	push   ebx
c00136b2:	e8 39 ce fe ff       	call   c00004f0 <memset>
c00136b7:	58                   	pop    eax
c00136b8:	5a                   	pop    edx
c00136b9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136bd:	50                   	push   eax
c00136be:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136c2:	e8 40 fe ff ff       	call   c0013507 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136c7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00136cc:	83 c4 0c             	add    esp,0xc
c00136cf:	6a 15                	push   0x15
c00136d1:	6a 00                	push   0x0
c00136d3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00136d7:	50                   	push   eax
c00136d8:	e8 13 ce fe ff       	call   c00004f0 <memset>
c00136dd:	53                   	push   ebx
c00136de:	6a 00                	push   0x0
c00136e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e8:	e8 e6 f9 ff ff       	call   c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136ed:	83 c4 58             	add    esp,0x58
c00136f0:	5b                   	pop    ebx
c00136f1:	c3                   	ret    

c00136f2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136f2:	56                   	push   esi
c00136f3:	53                   	push   ebx
c00136f4:	83 ec 48             	sub    esp,0x48
c00136f7:	6a 12                	push   0x12
c00136f9:	68 ff 00 00 00       	push   0xff
c00136fe:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013702:	56                   	push   esi
c0013703:	e8 e8 cd fe ff       	call   c00004f0 <memset>
c0013708:	5a                   	pop    edx
c0013709:	59                   	pop    ecx
c001370a:	56                   	push   esi
c001370b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001370f:	e8 f3 fd ff ff       	call   c0013507 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013714:	83 c4 10             	add    esp,0x10
c0013717:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001371b:	85 db                	test   ebx,ebx
c001371d:	74 42                	je     c0013761 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001371f:	50                   	push   eax
c0013720:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013724:	50                   	push   eax
c0013725:	53                   	push   ebx
c0013726:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001372a:	e8 fa f6 ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001372f:	83 c4 0c             	add    esp,0xc
c0013732:	6a 12                	push   0x12
c0013734:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013738:	50                   	push   eax
c0013739:	56                   	push   esi
c001373a:	e8 41 cc fe ff       	call   c0000380 <memcmp>
c001373f:	83 c4 10             	add    esp,0x10
c0013742:	85 c0                	test   eax,eax
c0013744:	74 1e                	je     c0013764 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013746:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001374b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013750:	c1 e3 08             	shl    ebx,0x8
c0013753:	09 d8                	or     eax,ebx
c0013755:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001375a:	c1 e3 10             	shl    ebx,0x10
c001375d:	09 c3                	or     ebx,eax
c001375f:	eb ba                	jmp    c001371b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013761:	83 cb ff             	or     ebx,0xffffffff
c0013764:	89 d8                	mov    eax,ebx
c0013766:	83 c4 44             	add    esp,0x44
c0013769:	5b                   	pop    ebx
c001376a:	5e                   	pop    esi
c001376b:	c3                   	ret    

c001376c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001376c:	57                   	push   edi
c001376d:	56                   	push   esi
c001376e:	53                   	push   ebx
c001376f:	83 ec 34             	sub    esp,0x34
c0013772:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013776:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001377a:	6a 2b                	push   0x2b
c001377c:	6a 00                	push   0x0
c001377e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013782:	53                   	push   ebx
c0013783:	e8 68 cd fe ff       	call   c00004f0 <memset>
c0013788:	58                   	pop    eax
c0013789:	5a                   	pop    edx
c001378a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001378e:	50                   	push   eax
c001378f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013793:	e8 6f fd ff ff       	call   c0013507 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013798:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001379c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00137a0:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00137a4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00137a8:	53                   	push   ebx
c00137a9:	6a 00                	push   0x0
c00137ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00137b3:	e8 1b f9 ff ff       	call   c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137b8:	83 c4 50             	add    esp,0x50
c00137bb:	5b                   	pop    ebx
c00137bc:	5e                   	pop    esi
c00137bd:	5f                   	pop    edi
c00137be:	c3                   	ret    

c00137bf <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00137bf:	55                   	push   ebp
c00137c0:	57                   	push   edi
c00137c1:	56                   	push   esi
c00137c2:	53                   	push   ebx
c00137c3:	83 ec 40             	sub    esp,0x40
c00137c6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00137ca:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00137ce:	6a 2b                	push   0x2b
c00137d0:	6a 00                	push   0x0
c00137d2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00137d6:	56                   	push   esi
c00137d7:	e8 14 cd fe ff       	call   c00004f0 <memset>
c00137dc:	5f                   	pop    edi
c00137dd:	89 ef                	mov    edi,ebp
c00137df:	58                   	pop    eax
c00137e0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00137e4:	50                   	push   eax
c00137e5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00137e9:	e8 19 fd ff ff       	call   c0013507 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00137ee:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137f3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137f8:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00137fd:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	85 ed                	test   ebp,ebp
c0013807:	74 14                	je     c001381d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013809:	51                   	push   ecx
c001380a:	51                   	push   ecx
c001380b:	57                   	push   edi
c001380c:	53                   	push   ebx
c001380d:	e8 09 f7 ff ff       	call   c0012f1b <CmGetNext(Reghive_Tag*, int)>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	85 c0                	test   eax,eax
c0013817:	74 04                	je     c001381d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013819:	89 c7                	mov    edi,eax
c001381b:	eb e8                	jmp    c0013805 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001381d:	56                   	push   esi
c001381e:	6a 00                	push   0x0
c0013820:	57                   	push   edi
c0013821:	53                   	push   ebx
c0013822:	e8 ac f8 ff ff       	call   c00130d3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013827:	83 c4 0c             	add    esp,0xc
c001382a:	89 c7                	mov    edi,eax
c001382c:	56                   	push   esi
c001382d:	50                   	push   eax
c001382e:	53                   	push   ebx
c001382f:	e8 f5 f5 ff ff       	call   c0012e29 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013834:	58                   	pop    eax
c0013835:	5a                   	pop    edx
c0013836:	6a 6c                	push   0x6c
c0013838:	6a 00                	push   0x0
c001383a:	6a 00                	push   0x0
c001383c:	68 3f 26 02 c0       	push   0xc002263f
c0013841:	57                   	push   edi
c0013842:	53                   	push   ebx
c0013843:	e8 24 ff ff ff       	call   c001376c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013848:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001384c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013850:	c1 e8 10             	shr    eax,0x10
c0013853:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013857:	83 c4 1c             	add    esp,0x1c
c001385a:	56                   	push   esi
c001385b:	57                   	push   edi
c001385c:	53                   	push   ebx
c001385d:	e8 eb f6 ff ff       	call   c0012f4d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013862:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013867:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001386c:	c1 e0 08             	shl    eax,0x8
c001386f:	09 c2                	or     edx,eax
c0013871:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013876:	83 c4 4c             	add    esp,0x4c
c0013879:	c1 e0 10             	shl    eax,0x10
c001387c:	5b                   	pop    ebx
c001387d:	09 d0                	or     eax,edx
c001387f:	5e                   	pop    esi
c0013880:	5f                   	pop    edi
c0013881:	5d                   	pop    ebp
c0013882:	c3                   	ret    

c0013883 <zStrtok(char*, char const*)>:
c0013883:	55                   	push   ebp
c0013884:	57                   	push   edi
c0013885:	56                   	push   esi
c0013886:	53                   	push   ebx
c0013887:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001388b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001388f:	85 db                	test   ebx,ebx
c0013891:	74 2f                	je     c00138c2 <zStrtok(char*, char const*)+0x3f>
c0013893:	85 c0                	test   eax,eax
c0013895:	75 09                	jne    c00138a0 <zStrtok(char*, char const*)+0x1d>
c0013897:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001389c:	85 c0                	test   eax,eax
c001389e:	74 50                	je     c00138f0 <zStrtok(char*, char const*)+0x6d>
c00138a0:	31 c9                	xor    ecx,ecx
c00138a2:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00138a6:	74 03                	je     c00138ab <zStrtok(char*, char const*)+0x28>
c00138a8:	41                   	inc    ecx
c00138a9:	eb f7                	jmp    c00138a2 <zStrtok(char*, char const*)+0x1f>
c00138ab:	31 d2                	xor    edx,edx
c00138ad:	39 ca                	cmp    edx,ecx
c00138af:	74 15                	je     c00138c6 <zStrtok(char*, char const*)+0x43>
c00138b1:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00138b5:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00138b8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00138bb:	39 ee                	cmp    esi,ebp
c00138bd:	74 13                	je     c00138d2 <zStrtok(char*, char const*)+0x4f>
c00138bf:	42                   	inc    edx
c00138c0:	eb eb                	jmp    c00138ad <zStrtok(char*, char const*)+0x2a>
c00138c2:	31 c0                	xor    eax,eax
c00138c4:	eb 2a                	jmp    c00138f0 <zStrtok(char*, char const*)+0x6d>
c00138c6:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00138d0:	eb 1e                	jmp    c00138f0 <zStrtok(char*, char const*)+0x6d>
c00138d2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00138d5:	39 ce                	cmp    esi,ecx
c00138d7:	75 0a                	jne    c00138e3 <zStrtok(char*, char const*)+0x60>
c00138d9:	40                   	inc    eax
c00138da:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c00138df:	89 d8                	mov    eax,ebx
c00138e1:	eb 0d                	jmp    c00138f0 <zStrtok(char*, char const*)+0x6d>
c00138e3:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00138e7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00138ea:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c00138f0:	5b                   	pop    ebx
c00138f1:	5e                   	pop    esi
c00138f2:	5f                   	pop    edi
c00138f3:	5d                   	pop    ebp
c00138f4:	c3                   	ret    

c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138f5:	57                   	push   edi
c00138f6:	56                   	push   esi
c00138f7:	53                   	push   ebx
c00138f8:	81 ec 08 01 00 00    	sub    esp,0x108
c00138fe:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013905:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001390c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013910:	53                   	push   ebx
c0013911:	e8 2a cd fe ff       	call   c0000640 <strcpy>
c0013916:	59                   	pop    ecx
c0013917:	5e                   	pop    esi
c0013918:	68 a3 29 02 c0       	push   0xc00229a3
c001391d:	53                   	push   ebx
c001391e:	bb 01 00 00 00       	mov    ebx,0x1
c0013923:	e8 5b ff ff ff       	call   c0013883 <zStrtok(char*, char const*)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	85 c0                	test   eax,eax
c001392d:	74 3b                	je     c001396a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001392f:	52                   	push   edx
c0013930:	50                   	push   eax
c0013931:	6a 01                	push   0x1
c0013933:	57                   	push   edi
c0013934:	e8 b9 fd ff ff       	call   c00136f2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013939:	59                   	pop    ecx
c001393a:	89 c3                	mov    ebx,eax
c001393c:	5e                   	pop    esi
c001393d:	68 a3 29 02 c0       	push   0xc00229a3
c0013942:	6a 00                	push   0x0
c0013944:	e8 3a ff ff ff       	call   c0013883 <zStrtok(char*, char const*)>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	89 c6                	mov    esi,eax
c001394e:	85 c0                	test   eax,eax
c0013950:	74 18                	je     c001396a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013952:	52                   	push   edx
c0013953:	52                   	push   edx
c0013954:	53                   	push   ebx
c0013955:	57                   	push   edi
c0013956:	e8 81 f5 ff ff       	call   c0012edc <CmEnterDirectory(Reghive_Tag*, int)>
c001395b:	83 c4 10             	add    esp,0x10
c001395e:	89 c3                	mov    ebx,eax
c0013960:	83 f8 ff             	cmp    eax,0xffffffff
c0013963:	74 05                	je     c001396a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013965:	50                   	push   eax
c0013966:	56                   	push   esi
c0013967:	53                   	push   ebx
c0013968:	eb c9                	jmp    c0013933 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001396a:	81 c4 00 01 00 00    	add    esp,0x100
c0013970:	89 d8                	mov    eax,ebx
c0013972:	5b                   	pop    ebx
c0013973:	5e                   	pop    esi
c0013974:	5f                   	pop    edi
c0013975:	c3                   	ret    

c0013976 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013976:	55                   	push   ebp
c0013977:	57                   	push   edi
c0013978:	56                   	push   esi
c0013979:	53                   	push   ebx
c001397a:	83 ec 5c             	sub    esp,0x5c
c001397d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013981:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013985:	85 db                	test   ebx,ebx
c0013987:	0f 8e 84 00 00 00    	jle    c0013a11 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001398d:	31 ed                	xor    ebp,ebp
c001398f:	57                   	push   edi
c0013990:	6a 32                	push   0x32
c0013992:	6a 00                	push   0x0
c0013994:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013998:	57                   	push   edi
c0013999:	e8 52 cb fe ff       	call   c00004f0 <memset>
c001399e:	83 c4 0c             	add    esp,0xc
c00139a1:	57                   	push   edi
c00139a2:	53                   	push   ebx
c00139a3:	56                   	push   esi
c00139a4:	e8 30 fb ff ff       	call   c00134d9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00139a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00139b4:	7d 13                	jge    c00139c9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00139b6:	83 ec 0c             	sub    esp,0xc
c00139b9:	45                   	inc    ebp
c00139ba:	68 47 2d 02 c0       	push   0xc0022d47
c00139bf:	e8 81 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	eb e7                	jmp    c00139b0 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00139c9:	51                   	push   ecx
c00139ca:	57                   	push   edi
c00139cb:	53                   	push   ebx
c00139cc:	68 45 26 02 c0       	push   0xc0022645
c00139d1:	e8 6f 6f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00139d6:	83 c4 10             	add    esp,0x10
c00139d9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00139de:	75 1e                	jne    c00139fe <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00139e0:	52                   	push   edx
c00139e1:	52                   	push   edx
c00139e2:	53                   	push   ebx
c00139e3:	56                   	push   esi
c00139e4:	e8 f3 f4 ff ff       	call   c0012edc <CmEnterDirectory(Reghive_Tag*, int)>
c00139e9:	83 c4 0c             	add    esp,0xc
c00139ec:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00139f0:	8d 51 04             	lea    edx,[ecx+0x4]
c00139f3:	52                   	push   edx
c00139f4:	50                   	push   eax
c00139f5:	56                   	push   esi
c00139f6:	e8 7b ff ff ff       	call   c0013976 <CmDisplayTree(Reghive_Tag*, int, int)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	50                   	push   eax
c00139ff:	50                   	push   eax
c0013a00:	53                   	push   ebx
c0013a01:	56                   	push   esi
c0013a02:	e8 14 f5 ff ff       	call   c0012f1b <CmGetNext(Reghive_Tag*, int)>
c0013a07:	83 c4 10             	add    esp,0x10
c0013a0a:	89 c3                	mov    ebx,eax
c0013a0c:	e9 74 ff ff ff       	jmp    c0013985 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013a11:	83 c4 5c             	add    esp,0x5c
c0013a14:	5b                   	pop    ebx
c0013a15:	5e                   	pop    esi
c0013a16:	5f                   	pop    edi
c0013a17:	5d                   	pop    ebp
c0013a18:	c3                   	ret    

c0013a19 <CmSplitFinalSlashInPlace(char*)>:
c0013a19:	53                   	push   ebx
c0013a1a:	83 ec 14             	sub    esp,0x14
c0013a1d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a21:	53                   	push   ebx
c0013a22:	e8 49 cb fe ff       	call   c0000570 <strlen>
c0013a27:	83 c4 10             	add    esp,0x10
c0013a2a:	48                   	dec    eax
c0013a2b:	85 c0                	test   eax,eax
c0013a2d:	74 15                	je     c0013a44 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013a2f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013a32:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013a36:	75 09                	jne    c0013a41 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013a38:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013a3b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013a3f:	eb 05                	jmp    c0013a46 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013a41:	48                   	dec    eax
c0013a42:	eb e7                	jmp    c0013a2b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013a44:	31 c0                	xor    eax,eax
c0013a46:	83 c4 08             	add    esp,0x8
c0013a49:	5b                   	pop    ebx
c0013a4a:	c3                   	ret    

c0013a4b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013a4b:	55                   	push   ebp
c0013a4c:	57                   	push   edi
c0013a4d:	56                   	push   esi
c0013a4e:	53                   	push   ebx
c0013a4f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a55:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a5c:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013a5e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013a61:	80 fa 40             	cmp    dl,0x40
c0013a64:	75 1c                	jne    c0013a82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013a66:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013a69:	85 c9                	test   ecx,ecx
c0013a6b:	0f 84 09 01 00 00    	je     c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a71:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a74:	83 f9 3a             	cmp    ecx,0x3a
c0013a77:	74 04                	je     c0013a7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013a79:	89 c3                	mov    ebx,eax
c0013a7b:	eb e9                	jmp    c0013a66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013a7d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a80:	89 c3                	mov    ebx,eax
c0013a82:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013a86:	50                   	push   eax
c0013a87:	6a 40                	push   0x40
c0013a89:	6a 00                	push   0x0
c0013a8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a8f:	50                   	push   eax
c0013a90:	e8 5b ca fe ff       	call   c00004f0 <memset>
c0013a95:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a9c:	31 c0                	xor    eax,eax
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013aa6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013aa9:	89 d1                	mov    ecx,edx
c0013aab:	85 d2                	test   edx,edx
c0013aad:	0f 84 c7 00 00 00    	je     c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013ab3:	3d c7 00 00 00       	cmp    eax,0xc7
c0013ab8:	0f 8f bc 00 00 00    	jg     c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013abe:	83 fa 0a             	cmp    edx,0xa
c0013ac1:	0f 85 a4 00 00 00    	jne    c0013b6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013ac7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013acc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013ad1:	89 c8                	mov    eax,ecx
c0013ad3:	a8 df                	test   al,0xdf
c0013ad5:	0f 94 c2             	sete   dl
c0013ad8:	83 f9 23             	cmp    ecx,0x23
c0013adb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013ae0:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013ae4:	80 e2 01             	and    dl,0x1
c0013ae7:	75 4a                	jne    c0013b33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ae9:	83 e8 09             	sub    eax,0x9
c0013aec:	3c 01                	cmp    al,0x1
c0013aee:	76 43                	jbe    c0013b33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013af0:	83 f9 5b             	cmp    ecx,0x5b
c0013af3:	75 42                	jne    c0013b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013af5:	83 fe 40             	cmp    esi,0x40
c0013af8:	75 39                	jne    c0013b33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013afa:	83 ec 0c             	sub    esp,0xc
c0013afd:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013b01:	52                   	push   edx
c0013b02:	e8 69 ca fe ff       	call   c0000570 <strlen>
c0013b07:	83 c4 10             	add    esp,0x10
c0013b0a:	83 f8 3f             	cmp    eax,0x3f
c0013b0d:	77 6b                	ja     c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b0f:	50                   	push   eax
c0013b10:	50                   	push   eax
c0013b11:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013b15:	52                   	push   edx
c0013b16:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b1a:	52                   	push   edx
c0013b1b:	e8 20 cb fe ff       	call   c0000640 <strcpy>
c0013b20:	58                   	pop    eax
c0013b21:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013b25:	52                   	push   edx
c0013b26:	e8 45 ca fe ff       	call   c0000570 <strlen>
c0013b2b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013b30:	83 c4 10             	add    esp,0x10
c0013b33:	31 d2                	xor    edx,edx
c0013b35:	eb 3b                	jmp    c0013b72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013b37:	83 fe 40             	cmp    esi,0x40
c0013b3a:	74 06                	je     c0013b42 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013b3c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013b40:	eb 20                	jmp    c0013b62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013b42:	50                   	push   eax
c0013b43:	50                   	push   eax
c0013b44:	55                   	push   ebp
c0013b45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b49:	50                   	push   eax
c0013b4a:	e8 01 cc fe ff       	call   c0000750 <strcmp>
c0013b4f:	83 c4 10             	add    esp,0x10
c0013b52:	85 c0                	test   eax,eax
c0013b54:	75 dd                	jne    c0013b33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b56:	eb e4                	jmp    c0013b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013b58:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5b:	83 f9 3d             	cmp    ecx,0x3d
c0013b5e:	74 1e                	je     c0013b7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013b60:	89 d0                	mov    eax,edx
c0013b62:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013b65:	85 c9                	test   ecx,ecx
c0013b67:	75 ef                	jne    c0013b58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013b69:	eb 0f                	jmp    c0013b7a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013b6b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b72:	47                   	inc    edi
c0013b73:	89 d0                	mov    eax,edx
c0013b75:	e9 2c ff ff ff       	jmp    c0013aa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013b7a:	31 c0                	xor    eax,eax
c0013b7c:	eb 33                	jmp    c0013bb1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013b7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b82:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013b85:	50                   	push   eax
c0013b86:	50                   	push   eax
c0013b87:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b8b:	50                   	push   eax
c0013b8c:	53                   	push   ebx
c0013b8d:	e8 be cb fe ff       	call   c0000750 <strcmp>
c0013b92:	83 c4 10             	add    esp,0x10
c0013b95:	85 c0                	test   eax,eax
c0013b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b9b:	75 96                	jne    c0013b33 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013b9d:	51                   	push   ecx
c0013b9e:	51                   	push   ecx
c0013b9f:	52                   	push   edx
c0013ba0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013ba7:	e8 94 ca fe ff       	call   c0000640 <strcpy>
c0013bac:	83 c4 10             	add    esp,0x10
c0013baf:	b0 01                	mov    al,0x1
c0013bb1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013bb7:	5b                   	pop    ebx
c0013bb8:	5e                   	pop    esi
c0013bb9:	5f                   	pop    edi
c0013bba:	5d                   	pop    ebp
c0013bbb:	c3                   	ret    

c0013bbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013bbc:	57                   	push   edi
c0013bbd:	56                   	push   esi
c0013bbe:	53                   	push   ebx
c0013bbf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013bc5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013bcc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013bd3:	53                   	push   ebx
c0013bd4:	e8 97 c9 fe ff       	call   c0000570 <strlen>
c0013bd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bdc:	89 c7                	mov    edi,eax
c0013bde:	e8 8d c9 fe ff       	call   c0000570 <strlen>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bea:	3d ff 00 00 00       	cmp    eax,0xff
c0013bef:	0f 87 d3 00 00 00    	ja     c0013cc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bf5:	57                   	push   edi
c0013bf6:	57                   	push   edi
c0013bf7:	56                   	push   esi
c0013bf8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bfc:	56                   	push   esi
c0013bfd:	e8 3e ca fe ff       	call   c0000640 <strcpy>
c0013c02:	58                   	pop    eax
c0013c03:	5a                   	pop    edx
c0013c04:	68 a3 29 02 c0       	push   0xc00229a3
c0013c09:	56                   	push   esi
c0013c0a:	e8 31 cc fe ff       	call   c0000840 <strcat>
c0013c0f:	59                   	pop    ecx
c0013c10:	5f                   	pop    edi
c0013c11:	53                   	push   ebx
c0013c12:	56                   	push   esi
c0013c13:	e8 28 cc fe ff       	call   c0000840 <strcat>
c0013c18:	58                   	pop    eax
c0013c19:	5a                   	pop    edx
c0013c1a:	68 4f 26 02 c0       	push   0xc002264f
c0013c1f:	56                   	push   esi
c0013c20:	e8 1b cc fe ff       	call   c0000840 <strcat>
c0013c25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c2c:	e8 85 3e ff ff       	call   c0007ab6 <malloc>
c0013c31:	83 c4 0c             	add    esp,0xc
c0013c34:	89 c3                	mov    ebx,eax
c0013c36:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c3c:	56                   	push   esi
c0013c3d:	50                   	push   eax
c0013c3e:	e8 ab 7f ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	85 db                	test   ebx,ebx
c0013c48:	74 7e                	je     c0013cc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c4a:	51                   	push   ecx
c0013c4b:	51                   	push   ecx
c0013c4c:	6a 01                	push   0x1
c0013c4e:	53                   	push   ebx
c0013c4f:	e8 b8 7f ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0013c54:	83 c4 10             	add    esp,0x10
c0013c57:	85 c0                	test   eax,eax
c0013c59:	74 08                	je     c0013c63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c5b:	83 ec 0c             	sub    esp,0xc
c0013c5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c60:	53                   	push   ebx
c0013c61:	eb 5f                	jmp    c0013cc2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c63:	52                   	push   edx
c0013c64:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c68:	50                   	push   eax
c0013c69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c6d:	50                   	push   eax
c0013c6e:	53                   	push   ebx
c0013c6f:	e8 9a 82 ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0013c74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	89 c1                	mov    ecx,eax
c0013c7d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c81:	74 31                	je     c0013cb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c83:	83 ec 0c             	sub    esp,0xc
c0013c86:	50                   	push   eax
c0013c87:	e8 2a 3e ff ff       	call   c0007ab6 <malloc>
c0013c8c:	89 c6                	mov    esi,eax
c0013c8e:	58                   	pop    eax
c0013c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c91:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c95:	52                   	push   edx
c0013c96:	56                   	push   esi
c0013c97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c9f:	53                   	push   ebx
c0013ca0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca3:	83 c4 20             	add    esp,0x20
c0013ca6:	85 c0                	test   eax,eax
c0013ca8:	75 0a                	jne    c0013cb4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cae:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013cb2:	74 18                	je     c0013ccc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	53                   	push   ebx
c0013cb8:	e8 ad 7f ff ff       	call   c000bc6a <File::close()>
c0013cbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	31 c0                	xor    eax,eax
c0013cca:	eb 3b                	jmp    c0013d07 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013ccc:	83 ec 0c             	sub    esp,0xc
c0013ccf:	53                   	push   ebx
c0013cd0:	e8 95 7f ff ff       	call   c000bc6a <File::close()>
c0013cd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cdd:	83 c4 0c             	add    esp,0xc
c0013ce0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013ce7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cee:	56                   	push   esi
c0013cef:	e8 57 fd ff ff       	call   c0013a4b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013cf4:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cf7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cfb:	e8 c6 3d ff ff       	call   c0007ac6 <free>
c0013d00:	83 c4 10             	add    esp,0x10
c0013d03:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013d07:	81 c4 20 01 00 00    	add    esp,0x120
c0013d0d:	5b                   	pop    ebx
c0013d0e:	5e                   	pop    esi
c0013d0f:	5f                   	pop    edi
c0013d10:	c3                   	ret    

c0013d11 <Reg::getLine(char*, char*, char*)>:
c0013d11:	57                   	push   edi
c0013d12:	56                   	push   esi
c0013d13:	53                   	push   ebx
c0013d14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d18:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d1c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d20:	57                   	push   edi
c0013d21:	56                   	push   esi
c0013d22:	53                   	push   ebx
c0013d23:	68 54 26 02 c0       	push   0xc0022654
c0013d28:	e8 8f fe ff ff       	call   c0013bbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	84 c0                	test   al,al
c0013d32:	75 10                	jne    c0013d44 <Reg::getLine(char*, char*, char*)+0x33>
c0013d34:	57                   	push   edi
c0013d35:	56                   	push   esi
c0013d36:	53                   	push   ebx
c0013d37:	68 79 26 02 c0       	push   0xc0022679
c0013d3c:	e8 7b fe ff ff       	call   c0013bbc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	5b                   	pop    ebx
c0013d45:	5e                   	pop    esi
c0013d46:	5f                   	pop    edi
c0013d47:	c3                   	ret    

c0013d48 <Reg::readInt(char*, char*, int*)>:
c0013d48:	55                   	push   ebp
c0013d49:	57                   	push   edi
c0013d4a:	56                   	push   esi
c0013d4b:	53                   	push   ebx
c0013d4c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d52:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d56:	55                   	push   ebp
c0013d57:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d5e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d65:	e8 a7 ff ff ff       	call   c0013d11 <Reg::getLine(char*, char*, char*)>
c0013d6a:	83 c4 10             	add    esp,0x10
c0013d6d:	84 c0                	test   al,al
c0013d6f:	0f 84 b6 00 00 00    	je     c0013e2b <Reg::readInt(char*, char*, int*)+0xe3>
c0013d75:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d7a:	83 fa 2b             	cmp    edx,0x2b
c0013d7d:	74 0c                	je     c0013d8b <Reg::readInt(char*, char*, int*)+0x43>
c0013d7f:	83 fa 2d             	cmp    edx,0x2d
c0013d82:	75 0e                	jne    c0013d92 <Reg::readInt(char*, char*, int*)+0x4a>
c0013d84:	ba 01 00 00 00       	mov    edx,0x1
c0013d89:	eb 0b                	jmp    c0013d96 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d8b:	ba 01 00 00 00       	mov    edx,0x1
c0013d90:	eb 02                	jmp    c0013d94 <Reg::readInt(char*, char*, int*)+0x4c>
c0013d92:	31 d2                	xor    edx,edx
c0013d94:	31 c0                	xor    eax,eax
c0013d96:	be 0a 00 00 00       	mov    esi,0xa
c0013d9b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013da0:	75 21                	jne    c0013dc3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013da2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013da7:	83 f9 78             	cmp    ecx,0x78
c0013daa:	75 0a                	jne    c0013db6 <Reg::readInt(char*, char*, int*)+0x6e>
c0013dac:	83 c2 02             	add    edx,0x2
c0013daf:	be 10 00 00 00       	mov    esi,0x10
c0013db4:	eb 0d                	jmp    c0013dc3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013db6:	83 f9 62             	cmp    ecx,0x62
c0013db9:	75 08                	jne    c0013dc3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013dbb:	83 c2 02             	add    edx,0x2
c0013dbe:	be 02 00 00 00       	mov    esi,0x2
c0013dc3:	01 d5                	add    ebp,edx
c0013dc5:	31 d2                	xor    edx,edx
c0013dc7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013dcb:	83 f9 0d             	cmp    ecx,0xd
c0013dce:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dd2:	0f 94 c3             	sete   bl
c0013dd5:	85 c9                	test   ecx,ecx
c0013dd7:	89 df                	mov    edi,ebx
c0013dd9:	0f 94 c3             	sete   bl
c0013ddc:	09 df                	or     edi,ebx
c0013dde:	89 fb                	mov    ebx,edi
c0013de0:	83 e7 01             	and    edi,0x1
c0013de3:	75 35                	jne    c0013e1a <Reg::readInt(char*, char*, int*)+0xd2>
c0013de5:	0f af d6             	imul   edx,esi
c0013de8:	83 fe 10             	cmp    esi,0x10
c0013deb:	75 26                	jne    c0013e13 <Reg::readInt(char*, char*, int*)+0xcb>
c0013ded:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013df1:	83 ef 41             	sub    edi,0x41
c0013df4:	89 fb                	mov    ebx,edi
c0013df6:	80 fb 05             	cmp    bl,0x5
c0013df9:	77 06                	ja     c0013e01 <Reg::readInt(char*, char*, int*)+0xb9>
c0013dfb:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013dff:	eb 16                	jmp    c0013e17 <Reg::readInt(char*, char*, int*)+0xcf>
c0013e01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e05:	83 eb 61             	sub    ebx,0x61
c0013e08:	80 fb 05             	cmp    bl,0x5
c0013e0b:	77 06                	ja     c0013e13 <Reg::readInt(char*, char*, int*)+0xcb>
c0013e0d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013e11:	eb 04                	jmp    c0013e17 <Reg::readInt(char*, char*, int*)+0xcf>
c0013e13:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013e17:	45                   	inc    ebp
c0013e18:	eb ad                	jmp    c0013dc7 <Reg::readInt(char*, char*, int*)+0x7f>
c0013e1a:	84 c0                	test   al,al
c0013e1c:	74 02                	je     c0013e20 <Reg::readInt(char*, char*, int*)+0xd8>
c0013e1e:	f7 da                	neg    edx
c0013e20:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013e27:	89 10                	mov    DWORD PTR [eax],edx
c0013e29:	88 d8                	mov    al,bl
c0013e2b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013e31:	5b                   	pop    ebx
c0013e32:	5e                   	pop    esi
c0013e33:	5f                   	pop    edi
c0013e34:	5d                   	pop    ebp
c0013e35:	c3                   	ret    

c0013e36 <Reg::readString(char*, char*, char*, int)>:
c0013e36:	57                   	push   edi
c0013e37:	56                   	push   esi
c0013e38:	53                   	push   ebx
c0013e39:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e3f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e46:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e4a:	57                   	push   edi
c0013e4b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e52:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e59:	e8 b3 fe ff ff       	call   c0013d11 <Reg::getLine(char*, char*, char*)>
c0013e5e:	83 c4 10             	add    esp,0x10
c0013e61:	89 c6                	mov    esi,eax
c0013e63:	84 c0                	test   al,al
c0013e65:	74 44                	je     c0013eab <Reg::readString(char*, char*, char*, int)+0x75>
c0013e67:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e6e:	31 c0                	xor    eax,eax
c0013e70:	4a                   	dec    edx
c0013e71:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e74:	84 c9                	test   cl,cl
c0013e76:	74 0f                	je     c0013e87 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e78:	39 c2                	cmp    edx,eax
c0013e7a:	7e 0b                	jle    c0013e87 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e7c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e7f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e84:	40                   	inc    eax
c0013e85:	eb ea                	jmp    c0013e71 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e87:	83 ec 0c             	sub    esp,0xc
c0013e8a:	53                   	push   ebx
c0013e8b:	e8 e0 c6 fe ff       	call   c0000570 <strlen>
c0013e90:	83 c4 10             	add    esp,0x10
c0013e93:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e98:	75 11                	jne    c0013eab <Reg::readString(char*, char*, char*, int)+0x75>
c0013e9a:	83 ec 0c             	sub    esp,0xc
c0013e9d:	53                   	push   ebx
c0013e9e:	e8 cd c6 fe ff       	call   c0000570 <strlen>
c0013ea3:	83 c4 10             	add    esp,0x10
c0013ea6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013eab:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013eb1:	89 f0                	mov    eax,esi
c0013eb3:	5b                   	pop    ebx
c0013eb4:	5e                   	pop    esi
c0013eb5:	5f                   	pop    edi
c0013eb6:	c3                   	ret    

c0013eb7 <Reg::readBool(char*, char*, bool*)>:
c0013eb7:	83 ec 20             	sub    esp,0x20
c0013eba:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ebe:	50                   	push   eax
c0013ebf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ec7:	e8 7c fe ff ff       	call   c0013d48 <Reg::readInt(char*, char*, int*)>
c0013ecc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ed1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013ed5:	0f 95 02             	setne  BYTE PTR [edx]
c0013ed8:	83 c4 2c             	add    esp,0x2c
c0013edb:	c3                   	ret    

c0013edc <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013edc:	53                   	push   ebx
c0013edd:	83 ec 1c             	sub    esp,0x1c
c0013ee0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013ee4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013ee8:	50                   	push   eax
c0013ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ef1:	e8 c1 ff ff ff       	call   c0013eb7 <Reg::readBool(char*, char*, bool*)>
c0013ef6:	83 c4 10             	add    esp,0x10
c0013ef9:	84 c0                	test   al,al
c0013efb:	74 04                	je     c0013f01 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013efd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013f01:	88 d8                	mov    al,bl
c0013f03:	83 c4 18             	add    esp,0x18
c0013f06:	5b                   	pop    ebx
c0013f07:	c3                   	ret    

c0013f08 <Reg::readIntWithDefault(char*, char*, int)>:
c0013f08:	53                   	push   ebx
c0013f09:	83 ec 1c             	sub    esp,0x1c
c0013f0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f14:	50                   	push   eax
c0013f15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f1d:	e8 26 fe ff ff       	call   c0013d48 <Reg::readInt(char*, char*, int*)>
c0013f22:	83 c4 10             	add    esp,0x10
c0013f25:	84 c0                	test   al,al
c0013f27:	74 04                	je     c0013f2d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013f29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013f2d:	89 d8                	mov    eax,ebx
c0013f2f:	83 c4 18             	add    esp,0x18
c0013f32:	5b                   	pop    ebx
c0013f33:	c3                   	ret    

c0013f34 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013f34:	57                   	push   edi
c0013f35:	56                   	push   esi
c0013f36:	56                   	push   esi
c0013f37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f3b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f3f:	56                   	push   esi
c0013f40:	57                   	push   edi
c0013f41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f49:	e8 e8 fe ff ff       	call   c0013e36 <Reg::readString(char*, char*, char*, int)>
c0013f4e:	83 c4 10             	add    esp,0x10
c0013f51:	84 c0                	test   al,al
c0013f53:	75 1a                	jne    c0013f6f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f55:	51                   	push   ecx
c0013f56:	56                   	push   esi
c0013f57:	6a 00                	push   0x0
c0013f59:	57                   	push   edi
c0013f5a:	e8 91 c5 fe ff       	call   c00004f0 <memset>
c0013f5f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f62:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f68:	83 c4 10             	add    esp,0x10
c0013f6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f6f:	89 f8                	mov    eax,edi
c0013f71:	5a                   	pop    edx
c0013f72:	5e                   	pop    esi
c0013f73:	5f                   	pop    edi
c0013f74:	c3                   	ret    

c0013f75 <SysEject(regs*)>:
c0013f75:	83 ec 0c             	sub    esp,0xc
c0013f78:	83 ca ff             	or     edx,0xffffffff
c0013f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f82:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f87:	83 e9 41             	sub    ecx,0x41
c0013f8a:	83 f9 19             	cmp    ecx,0x19
c0013f8d:	77 18                	ja     c0013fa7 <SysEject(regs*)+0x32>
c0013f8f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f96:	85 c9                	test   ecx,ecx
c0013f98:	74 0d                	je     c0013fa7 <SysEject(regs*)+0x32>
c0013f9a:	83 ec 0c             	sub    esp,0xc
c0013f9d:	51                   	push   ecx
c0013f9e:	e8 3b 9e ff ff       	call   c000ddde <LogicalDisk::eject()>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	99                   	cdq    
c0013fa7:	83 c4 0c             	add    esp,0xc
c0013faa:	c3                   	ret    

c0013fab <SysExit(regs*)>:
c0013fab:	83 ec 18             	sub    esp,0x18
c0013fae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fb2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fb5:	e8 46 2b 00 00       	call   c0016b00 <terminateTask(int)>
c0013fba:	83 c8 ff             	or     eax,0xffffffff
c0013fbd:	83 c4 1c             	add    esp,0x1c
c0013fc0:	89 c2                	mov    edx,eax
c0013fc2:	c3                   	ret    

c0013fc3 <SysGetCwd(regs*)>:
c0013fc3:	83 ec 10             	sub    esp,0x10
c0013fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fca:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013fcd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013fd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fd5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fd8:	e8 c5 78 ff ff       	call   c000b8a2 <Fs::getcwd(Process*, char*, int)>
c0013fdd:	83 c4 1c             	add    esp,0x1c
c0013fe0:	99                   	cdq    
c0013fe1:	c3                   	ret    

c0013fe2 <SysGetPID(regs*)>:
c0013fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fe7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fea:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fec:	99                   	cdq    
c0013fed:	c3                   	ret    

c0013fee <SysGetRAMData(regs*)>:
c0013fee:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013ff4:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013ffe:	99                   	cdq    
c0013fff:	f7 f9                	idiv   ecx
c0014001:	c1 e0 18             	shl    eax,0x18
c0014004:	09 c8                	or     eax,ecx
c0014006:	99                   	cdq    
c0014007:	c3                   	ret    

c0014008 <SysGetVGAPtr(regs*)>:
c0014008:	55                   	push   ebp
c0014009:	57                   	push   edi
c001400a:	56                   	push   esi
c001400b:	53                   	push   ebx
c001400c:	83 ec 18             	sub    esp,0x18
c001400f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0014013:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014016:	e8 b1 25 00 00       	call   c00165cc <Thr::processFromPID(int)>
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	89 c1                	mov    ecx,eax
c0014020:	b8 01 00 00 00       	mov    eax,0x1
c0014025:	85 c9                	test   ecx,ecx
c0014027:	74 57                	je     c0014080 <SysGetVGAPtr(regs*)+0x78>
c0014029:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001402f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014033:	74 0c                	je     c0014041 <SysGetVGAPtr(regs*)+0x39>
c0014035:	83 ec 0c             	sub    esp,0xc
c0014038:	55                   	push   ebp
c0014039:	e8 1b 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001403e:	83 c4 10             	add    esp,0x10
c0014041:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014044:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014047:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001404c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001404e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014051:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014054:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001405a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001405d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014060:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014066:	50                   	push   eax
c0014067:	50                   	push   eax
c0014068:	68 94 26 02 c0       	push   0xc0022694
c001406d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014070:	05 a8 0f 00 00       	add    eax,0xfa8
c0014075:	50                   	push   eax
c0014076:	e8 c5 c5 fe ff       	call   c0000640 <strcpy>
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	31 c0                	xor    eax,eax
c0014080:	83 c4 0c             	add    esp,0xc
c0014083:	31 d2                	xor    edx,edx
c0014085:	5b                   	pop    ebx
c0014086:	5e                   	pop    esi
c0014087:	5f                   	pop    edi
c0014088:	5d                   	pop    ebp
c0014089:	c3                   	ret    
c001408a:	66 90                	xchg   ax,ax

c001408c <SysKill(regs*)>:
c001408c:	53                   	push   ebx
c001408d:	83 ec 08             	sub    esp,0x8
c0014090:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014094:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014098:	75 16                	jne    c00140b0 <SysKill(regs*)+0x24>
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	68 9e 26 02 c0       	push   0xc002269e
c00140a2:	e8 18 d6 ff ff       	call   c00116bf <KePanic(char const*)>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	e9 89 00 00 00       	jmp    c0014138 <SysKill(regs*)+0xac>
c00140af:	90                   	nop
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140b8:	e8 ff bc 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140bd:	8d 76 00             	lea    esi,[esi+0x0]
c00140c0:	83 c4 10             	add    esp,0x10
c00140c3:	85 c0                	test   eax,eax
c00140c5:	74 19                	je     c00140e0 <SysKill(regs*)+0x54>
c00140c7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140ca:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140cd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140cf:	74 33                	je     c0014104 <SysKill(regs*)+0x78>
c00140d1:	52                   	push   edx
c00140d2:	52                   	push   edx
c00140d3:	50                   	push   eax
c00140d4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140d9:	e8 fe bf 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140de:	eb e0                	jmp    c00140c0 <SysKill(regs*)+0x34>
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140e8:	e8 cf bc 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	85 c0                	test   eax,eax
c00140f5:	74 41                	je     c0014138 <SysKill(regs*)+0xac>
c00140f7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140fa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140fd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140ff:	75 27                	jne    c0014128 <SysKill(regs*)+0x9c>
c0014101:	8d 76 00             	lea    esi,[esi+0x0]
c0014104:	51                   	push   ecx
c0014105:	51                   	push   ecx
c0014106:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001410e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014111:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014117:	e8 46 da ff ff       	call   c0011b62 <KeRaiseSignal(SigHandlerBlock*, int)>
c001411c:	83 c4 10             	add    esp,0x10
c001411f:	31 c0                	xor    eax,eax
c0014121:	31 d2                	xor    edx,edx
c0014123:	eb 1b                	jmp    c0014140 <SysKill(regs*)+0xb4>
c0014125:	8d 76 00             	lea    esi,[esi+0x0]
c0014128:	52                   	push   edx
c0014129:	52                   	push   edx
c001412a:	50                   	push   eax
c001412b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014130:	e8 a7 bf 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014135:	eb b9                	jmp    c00140f0 <SysKill(regs*)+0x64>
c0014137:	90                   	nop
c0014138:	83 c8 ff             	or     eax,0xffffffff
c001413b:	89 c2                	mov    edx,eax
c001413d:	8d 76 00             	lea    esi,[esi+0x0]
c0014140:	83 c4 08             	add    esp,0x8
c0014143:	5b                   	pop    ebx
c0014144:	c3                   	ret    

c0014145 <SysLoadDLL(regs*)>:
c0014145:	56                   	push   esi
c0014146:	53                   	push   ebx
c0014147:	31 d2                	xor    edx,edx
c0014149:	51                   	push   ecx
c001414a:	b8 01 00 00 00       	mov    eax,0x1
c001414f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014153:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014157:	0f 84 8c 00 00 00    	je     c00141e9 <SysLoadDLL(regs*)+0xa4>
c001415d:	83 ec 0c             	sub    esp,0xc
c0014160:	68 14 01 00 00       	push   0x114
c0014165:	e8 4c 39 ff ff       	call   c0007ab6 <malloc>
c001416a:	83 c4 0c             	add    esp,0xc
c001416d:	89 c3                	mov    ebx,eax
c001416f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014174:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014177:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001417a:	53                   	push   ebx
c001417b:	e8 6e 7a ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0014180:	83 c4 10             	add    esp,0x10
c0014183:	31 d2                	xor    edx,edx
c0014185:	b8 02 00 00 00       	mov    eax,0x2
c001418a:	85 db                	test   ebx,ebx
c001418c:	74 5b                	je     c00141e9 <SysLoadDLL(regs*)+0xa4>
c001418e:	83 ec 0c             	sub    esp,0xc
c0014191:	53                   	push   ebx
c0014192:	e8 39 7d ff ff       	call   c000bed0 <File::exists()>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	84 c0                	test   al,al
c001419c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001419e:	75 11                	jne    c00141b1 <SysLoadDLL(regs*)+0x6c>
c00141a0:	83 ec 0c             	sub    esp,0xc
c00141a3:	53                   	push   ebx
c00141a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141a7:	83 c4 10             	add    esp,0x10
c00141aa:	b8 03 00 00 00       	mov    eax,0x3
c00141af:	eb 36                	jmp    c00141e7 <SysLoadDLL(regs*)+0xa2>
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	53                   	push   ebx
c00141b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00141b8:	58                   	pop    eax
c00141b9:	5a                   	pop    edx
c00141ba:	6a 00                	push   0x0
c00141bc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00141bf:	e8 3b 15 00 00       	call   c00156ff <Thr::loadDLL(char const*, bool)>
c00141c4:	83 c4 10             	add    esp,0x10
c00141c7:	89 c1                	mov    ecx,eax
c00141c9:	31 d2                	xor    edx,edx
c00141cb:	b8 04 00 00 00       	mov    eax,0x4
c00141d0:	85 c9                	test   ecx,ecx
c00141d2:	74 15                	je     c00141e9 <SysLoadDLL(regs*)+0xa4>
c00141d4:	53                   	push   ebx
c00141d5:	53                   	push   ebx
c00141d6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141dc:	51                   	push   ecx
c00141dd:	e8 4e 17 00 00       	call   c0015930 <Thr::executeDLL(unsigned long, void*)>
c00141e2:	83 c4 10             	add    esp,0x10
c00141e5:	31 c0                	xor    eax,eax
c00141e7:	31 d2                	xor    edx,edx
c00141e9:	59                   	pop    ecx
c00141ea:	5b                   	pop    ebx
c00141eb:	5e                   	pop    esi
c00141ec:	c3                   	ret    

c00141ed <SysRead(regs*)>:
c00141ed:	57                   	push   edi
c00141ee:	56                   	push   esi
c00141ef:	53                   	push   ebx
c00141f0:	83 ec 10             	sub    esp,0x10
c00141f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141fa:	83 f8 02             	cmp    eax,0x2
c00141fd:	77 10                	ja     c001420f <SysRead(regs*)+0x22>
c00141ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014204:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014207:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001420d:	eb 0e                	jmp    c001421d <SysRead(regs*)+0x30>
c001420f:	83 ec 0c             	sub    esp,0xc
c0014212:	50                   	push   eax
c0014213:	e8 9b 52 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014218:	83 c4 10             	add    esp,0x10
c001421b:	89 c1                	mov    ecx,eax
c001421d:	83 c8 ff             	or     eax,0xffffffff
c0014220:	85 c9                	test   ecx,ecx
c0014222:	89 c2                	mov    edx,eax
c0014224:	74 28                	je     c001424e <SysRead(regs*)+0x61>
c0014226:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001422e:	31 ff                	xor    edi,edi
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014235:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014239:	52                   	push   edx
c001423a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001423d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014240:	57                   	push   edi
c0014241:	56                   	push   esi
c0014242:	51                   	push   ecx
c0014243:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014246:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001424a:	83 c4 20             	add    esp,0x20
c001424d:	99                   	cdq    
c001424e:	83 c4 10             	add    esp,0x10
c0014251:	5b                   	pop    ebx
c0014252:	5e                   	pop    esi
c0014253:	5f                   	pop    edi
c0014254:	c3                   	ret    

c0014255 <SysRegisterSignal(regs*)>:
c0014255:	83 ec 18             	sub    esp,0x18
c0014258:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001425c:	6a 00                	push   0x0
c001425e:	6a 00                	push   0x0
c0014260:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014263:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001426b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001426e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014274:	e8 b3 d8 ff ff       	call   c0011b2c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014279:	83 c4 2c             	add    esp,0x2c
c001427c:	99                   	cdq    
c001427d:	c3                   	ret    

c001427e <SysRegistryGetTypeFromPath(regs*)>:
c001427e:	57                   	push   edi
c001427f:	56                   	push   esi
c0014280:	53                   	push   ebx
c0014281:	81 ec 38 01 00 00    	sub    esp,0x138
c0014287:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001428e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014291:	68 bf 26 02 c0       	push   0xc00226bf
c0014296:	e8 aa 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001429b:	5a                   	pop    edx
c001429c:	59                   	pop    ecx
c001429d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142a3:	e8 4d f6 ff ff       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00142a8:	5f                   	pop    edi
c00142a9:	89 c6                	mov    esi,eax
c00142ab:	5a                   	pop    edx
c00142ac:	50                   	push   eax
c00142ad:	68 df 26 02 c0       	push   0xc00226df
c00142b2:	e8 8e 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142b7:	83 c4 10             	add    esp,0x10
c00142ba:	85 f6                	test   esi,esi
c00142bc:	74 28                	je     c00142e6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00142be:	50                   	push   eax
c00142bf:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142c3:	57                   	push   edi
c00142c4:	56                   	push   esi
c00142c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142c8:	e8 0c f2 ff ff       	call   c00134d9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142cd:	83 c4 0c             	add    esp,0xc
c00142d0:	89 c3                	mov    ebx,eax
c00142d2:	57                   	push   edi
c00142d3:	50                   	push   eax
c00142d4:	68 e7 26 02 c0       	push   0xc00226e7
c00142d9:	e8 67 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142de:	89 d8                	mov    eax,ebx
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	99                   	cdq    
c00142e4:	eb 05                	jmp    c00142eb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142e6:	83 c8 ff             	or     eax,0xffffffff
c00142e9:	89 c2                	mov    edx,eax
c00142eb:	81 c4 30 01 00 00    	add    esp,0x130
c00142f1:	5b                   	pop    ebx
c00142f2:	5e                   	pop    esi
c00142f3:	5f                   	pop    edi
c00142f4:	c3                   	ret    

c00142f5 <SysRegistryReadExtent(regs*)>:
c00142f5:	83 ec 1c             	sub    esp,0x1c
c00142f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142fc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142ff:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014302:	85 c0                	test   eax,eax
c0014304:	79 1f                	jns    c0014325 <SysRegistryReadExtent(regs*)+0x30>
c0014306:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001430b:	52                   	push   edx
c001430c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014310:	52                   	push   edx
c0014311:	50                   	push   eax
c0014312:	51                   	push   ecx
c0014313:	e8 b3 f0 ff ff       	call   c00133cb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014318:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001431c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	eb 14                	jmp    c0014339 <SysRegistryReadExtent(regs*)+0x44>
c0014325:	83 ec 04             	sub    esp,0x4
c0014328:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001432b:	50                   	push   eax
c001432c:	51                   	push   ecx
c001432d:	e8 33 eb ff ff       	call   c0012e65 <CmGetString(Reghive_Tag*, int, char*)>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	31 c0                	xor    eax,eax
c0014337:	31 d2                	xor    edx,edx
c0014339:	83 c4 1c             	add    esp,0x1c
c001433c:	c3                   	ret    

c001433d <SysRegistryPathToExtentLookup(regs*)>:
c001433d:	53                   	push   ebx
c001433e:	83 ec 10             	sub    esp,0x10
c0014341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014345:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014348:	68 fd 26 02 c0       	push   0xc00226fd
c001434d:	e8 f3 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014352:	58                   	pop    eax
c0014353:	5a                   	pop    edx
c0014354:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014357:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001435a:	e8 96 f5 ff ff       	call   c00138f5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001435f:	83 c4 18             	add    esp,0x18
c0014362:	99                   	cdq    
c0014363:	5b                   	pop    ebx
c0014364:	c3                   	ret    

c0014365 <SysRegistryEnterDirectory(regs*)>:
c0014365:	53                   	push   ebx
c0014366:	83 ec 10             	sub    esp,0x10
c0014369:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001436d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014370:	68 20 27 02 c0       	push   0xc0022720
c0014375:	e8 cb 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001437a:	58                   	pop    eax
c001437b:	5a                   	pop    edx
c001437c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001437f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014382:	e8 55 eb ff ff       	call   c0012edc <CmEnterDirectory(Reghive_Tag*, int)>
c0014387:	83 c4 18             	add    esp,0x18
c001438a:	99                   	cdq    
c001438b:	5b                   	pop    ebx
c001438c:	c3                   	ret    

c001438d <SysRegistryGetNext(regs*)>:
c001438d:	53                   	push   ebx
c001438e:	83 ec 10             	sub    esp,0x10
c0014391:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014395:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014398:	68 3e 27 02 c0       	push   0xc002273e
c001439d:	e8 a3 65 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00143a2:	58                   	pop    eax
c00143a3:	5a                   	pop    edx
c00143a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00143a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143aa:	e8 6c eb ff ff       	call   c0012f1b <CmGetNext(Reghive_Tag*, int)>
c00143af:	83 c4 18             	add    esp,0x18
c00143b2:	99                   	cdq    
c00143b3:	5b                   	pop    ebx
c00143b4:	c3                   	ret    

c00143b5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00143b5:	57                   	push   edi
c00143b6:	56                   	push   esi
c00143b7:	53                   	push   ebx
c00143b8:	81 ec 34 01 00 00    	sub    esp,0x134
c00143be:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00143c5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00143c9:	57                   	push   edi
c00143ca:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143cd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00143d0:	e8 04 f1 ff ff       	call   c00134d9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00143d5:	89 c3                	mov    ebx,eax
c00143d7:	58                   	pop    eax
c00143d8:	5a                   	pop    edx
c00143d9:	57                   	push   edi
c00143da:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143dd:	e8 5e c2 fe ff       	call   c0000640 <strcpy>
c00143e2:	89 d8                	mov    eax,ebx
c00143e4:	81 c4 40 01 00 00    	add    esp,0x140
c00143ea:	99                   	cdq    
c00143eb:	5b                   	pop    ebx
c00143ec:	5e                   	pop    esi
c00143ed:	5f                   	pop    edi
c00143ee:	c3                   	ret    

c00143ef <SysRegistryOpen(regs*)>:
c00143ef:	83 ec 18             	sub    esp,0x18
c00143f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143f6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143f9:	e8 f7 e8 ff ff       	call   c0012cf5 <CmOpen(char const*)>
c00143fe:	83 c4 1c             	add    esp,0x1c
c0014401:	99                   	cdq    
c0014402:	c3                   	ret    

c0014403 <SysRegistryClose(regs*)>:
c0014403:	83 ec 18             	sub    esp,0x18
c0014406:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001440a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001440d:	e8 01 ea ff ff       	call   c0012e13 <CmClose(Reghive_Tag*)>
c0014412:	31 c0                	xor    eax,eax
c0014414:	31 d2                	xor    edx,edx
c0014416:	83 c4 1c             	add    esp,0x1c
c0014419:	c3                   	ret    

c001441a <SysSbrk(regs*)>:
c001441a:	56                   	push   esi
c001441b:	53                   	push   ebx
c001441c:	50                   	push   eax
c001441d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014426:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014429:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001442c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014432:	85 db                	test   ebx,ebx
c0014434:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014437:	74 02                	je     c001443b <SysSbrk(regs*)+0x21>
c0014439:	79 06                	jns    c0014441 <SysSbrk(regs*)+0x27>
c001443b:	89 f0                	mov    eax,esi
c001443d:	31 d2                	xor    edx,edx
c001443f:	eb 2a                	jmp    c001446b <SysSbrk(regs*)+0x51>
c0014441:	83 c8 ff             	or     eax,0xffffffff
c0014444:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001444a:	89 c2                	mov    edx,eax
c001444c:	77 1d                	ja     c001446b <SysSbrk(regs*)+0x51>
c001444e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014454:	50                   	push   eax
c0014455:	c1 ea 0c             	shr    edx,0xc
c0014458:	68 07 0c 00 00       	push   0xc07
c001445d:	52                   	push   edx
c001445e:	51                   	push   ecx
c001445f:	e8 c0 59 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014464:	89 f0                	mov    eax,esi
c0014466:	31 d2                	xor    edx,edx
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	59                   	pop    ecx
c001446c:	5b                   	pop    ebx
c001446d:	5e                   	pop    esi
c001446e:	c3                   	ret    

c001446f <SysSetCwd(regs*)>:
c001446f:	83 ec 14             	sub    esp,0x14
c0014472:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014476:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014479:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001447e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014481:	e8 e9 7a ff ff       	call   c000bf6f <Fs::setcwd(Process*, char*)>
c0014486:	83 c4 1c             	add    esp,0x1c
c0014489:	99                   	cdq    
c001448a:	c3                   	ret    

c001448b <SysSetTime(regs*)>:
c001448b:	55                   	push   ebp
c001448c:	31 c9                	xor    ecx,ecx
c001448e:	57                   	push   edi
c001448f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014494:	56                   	push   esi
c0014495:	53                   	push   ebx
c0014496:	31 db                	xor    ebx,ebx
c0014498:	83 ec 10             	sub    esp,0x10
c001449b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001449f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00144a2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00144a5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00144a8:	89 c2                	mov    edx,eax
c00144aa:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00144b0:	83 e2 1f             	and    edx,0x1f
c00144b3:	c1 e7 10             	shl    edi,0x10
c00144b6:	42                   	inc    edx
c00144b7:	c1 e8 05             	shr    eax,0x5
c00144ba:	88 d1                	mov    cl,dl
c00144bc:	31 d2                	xor    edx,edx
c00144be:	f7 f5                	div    ebp
c00144c0:	89 dd                	mov    ebp,ebx
c00144c2:	88 d5                	mov    ch,dl
c00144c4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00144ca:	0f b7 c1             	movzx  eax,cx
c00144cd:	31 d2                	xor    edx,edx
c00144cf:	09 f8                	or     eax,edi
c00144d1:	bf 3c 00 00 00       	mov    edi,0x3c
c00144d6:	89 c1                	mov    ecx,eax
c00144d8:	89 f0                	mov    eax,esi
c00144da:	f7 f7                	div    edi
c00144dc:	c1 e2 10             	shl    edx,0x10
c00144df:	09 d5                	or     ebp,edx
c00144e1:	31 d2                	xor    edx,edx
c00144e3:	89 eb                	mov    ebx,ebp
c00144e5:	f7 f7                	div    edi
c00144e7:	bf 10 0e 00 00       	mov    edi,0xe10
c00144ec:	88 d7                	mov    bh,dl
c00144ee:	89 f0                	mov    eax,esi
c00144f0:	31 d2                	xor    edx,edx
c00144f2:	f7 f7                	div    edi
c00144f4:	bf 18 00 00 00       	mov    edi,0x18
c00144f9:	31 d2                	xor    edx,edx
c00144fb:	f7 f7                	div    edi
c00144fd:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014502:	88 d3                	mov    bl,dl
c0014504:	53                   	push   ebx
c0014505:	51                   	push   ecx
c0014506:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001450c:	e8 69 82 ff ff       	call   c000c77a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014511:	83 c4 1c             	add    esp,0x1c
c0014514:	83 f0 01             	xor    eax,0x1
c0014517:	5b                   	pop    ebx
c0014518:	0f b6 c0             	movzx  eax,al
c001451b:	5e                   	pop    esi
c001451c:	31 d2                	xor    edx,edx
c001451e:	5f                   	pop    edi
c001451f:	5d                   	pop    ebp
c0014520:	c3                   	ret    

c0014521 <SysSymlink(regs*)>:
c0014521:	53                   	push   ebx
c0014522:	83 c8 ff             	or     eax,0xffffffff
c0014525:	83 ec 08             	sub    esp,0x8
c0014528:	89 c2                	mov    edx,eax
c001452a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001452e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014531:	85 c9                	test   ecx,ecx
c0014533:	74 14                	je     c0014549 <SysSymlink(regs*)+0x28>
c0014535:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014538:	85 db                	test   ebx,ebx
c001453a:	74 0d                	je     c0014549 <SysSymlink(regs*)+0x28>
c001453c:	50                   	push   eax
c001453d:	50                   	push   eax
c001453e:	53                   	push   ebx
c001453f:	51                   	push   ecx
c0014540:	e8 04 6e ff ff       	call   c000b349 <KeCreateSymlink(char const*, char const*)>
c0014545:	83 c4 10             	add    esp,0x10
c0014548:	99                   	cdq    
c0014549:	83 c4 08             	add    esp,0x8
c001454c:	5b                   	pop    ebx
c001454d:	c3                   	ret    

c001454e <SysTimezone(regs*)>:
c001454e:	53                   	push   ebx
c001454f:	83 ec 08             	sub    esp,0x8
c0014552:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014556:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001455a:	75 17                	jne    c0014573 <SysTimezone(regs*)+0x25>
c001455c:	83 ec 0c             	sub    esp,0xc
c001455f:	68 55 27 02 c0       	push   0xc0022755
c0014564:	e8 dc 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014569:	83 c8 ff             	or     eax,0xffffffff
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	89 c2                	mov    edx,eax
c0014571:	eb 20                	jmp    c0014593 <SysTimezone(regs*)+0x45>
c0014573:	83 ec 0c             	sub    esp,0xc
c0014576:	68 6a 27 02 c0       	push   0xc002276a
c001457b:	e8 c5 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014580:	58                   	pop    eax
c0014581:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014584:	e8 5b 7f ff ff       	call   c000c4e4 <User::loadClockSettings(int)>
c0014589:	83 c4 10             	add    esp,0x10
c001458c:	b8 01 00 00 00       	mov    eax,0x1
c0014591:	31 d2                	xor    edx,edx
c0014593:	83 c4 08             	add    esp,0x8
c0014596:	5b                   	pop    ebx
c0014597:	c3                   	ret    

c0014598 <SysTruncate(regs*)>:
c0014598:	55                   	push   ebp
c0014599:	57                   	push   edi
c001459a:	31 ff                	xor    edi,edi
c001459c:	56                   	push   esi
c001459d:	53                   	push   ebx
c001459e:	83 ec 0c             	sub    esp,0xc
c00145a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145a8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145ab:	89 ce                	mov    esi,ecx
c00145ad:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145b1:	0f 84 9a 00 00 00    	je     c0014651 <SysTruncate(regs*)+0xb9>
c00145b7:	83 ec 0c             	sub    esp,0xc
c00145ba:	68 14 01 00 00       	push   0x114
c00145bf:	e8 f2 34 ff ff       	call   c0007ab6 <malloc>
c00145c4:	83 c4 0c             	add    esp,0xc
c00145c7:	89 c3                	mov    ebx,eax
c00145c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ce:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145d1:	55                   	push   ebp
c00145d2:	53                   	push   ebx
c00145d3:	e8 16 76 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c00145d8:	83 c4 10             	add    esp,0x10
c00145db:	31 d2                	xor    edx,edx
c00145dd:	b8 03 00 00 00       	mov    eax,0x3
c00145e2:	85 db                	test   ebx,ebx
c00145e4:	0f 84 a2 00 00 00    	je     c001468c <SysTruncate(regs*)+0xf4>
c00145ea:	51                   	push   ecx
c00145eb:	51                   	push   ecx
c00145ec:	6a 02                	push   0x2
c00145ee:	53                   	push   ebx
c00145ef:	e8 18 76 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c00145f4:	83 c4 10             	add    esp,0x10
c00145f7:	85 c0                	test   eax,eax
c00145f9:	74 13                	je     c001460e <SysTruncate(regs*)+0x76>
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014600:	53                   	push   ebx
c0014601:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014604:	83 c4 10             	add    esp,0x10
c0014607:	b8 04 00 00 00       	mov    eax,0x4
c001460c:	eb 7c                	jmp    c001468a <SysTruncate(regs*)+0xf2>
c001460e:	52                   	push   edx
c001460f:	57                   	push   edi
c0014610:	56                   	push   esi
c0014611:	53                   	push   ebx
c0014612:	e8 09 77 ff ff       	call   c000bd20 <File::truncate(unsigned long long)>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	85 c0                	test   eax,eax
c001461c:	74 1b                	je     c0014639 <SysTruncate(regs*)+0xa1>
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	53                   	push   ebx
c0014622:	e8 43 76 ff ff       	call   c000bc6a <File::close()>
c0014627:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014629:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001462c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001462f:	83 c4 10             	add    esp,0x10
c0014632:	b8 05 00 00 00       	mov    eax,0x5
c0014637:	eb 51                	jmp    c001468a <SysTruncate(regs*)+0xf2>
c0014639:	83 ec 0c             	sub    esp,0xc
c001463c:	53                   	push   ebx
c001463d:	e8 28 76 ff ff       	call   c000bc6a <File::close()>
c0014642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001464a:	83 c4 10             	add    esp,0x10
c001464d:	31 c0                	xor    eax,eax
c001464f:	eb 39                	jmp    c001468a <SysTruncate(regs*)+0xf2>
c0014651:	31 d2                	xor    edx,edx
c0014653:	b8 01 00 00 00       	mov    eax,0x1
c0014658:	83 fd 02             	cmp    ebp,0x2
c001465b:	7e 2f                	jle    c001468c <SysTruncate(regs*)+0xf4>
c001465d:	83 ec 0c             	sub    esp,0xc
c0014660:	51                   	push   ecx
c0014661:	e8 4d 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014666:	83 c4 10             	add    esp,0x10
c0014669:	89 c1                	mov    ecx,eax
c001466b:	31 d2                	xor    edx,edx
c001466d:	b8 02 00 00 00       	mov    eax,0x2
c0014672:	85 c9                	test   ecx,ecx
c0014674:	74 16                	je     c001468c <SysTruncate(regs*)+0xf4>
c0014676:	50                   	push   eax
c0014677:	57                   	push   edi
c0014678:	56                   	push   esi
c0014679:	51                   	push   ecx
c001467a:	e8 a1 76 ff ff       	call   c000bd20 <File::truncate(unsigned long long)>
c001467f:	83 c4 10             	add    esp,0x10
c0014682:	85 c0                	test   eax,eax
c0014684:	0f 95 c0             	setne  al
c0014687:	0f b6 c0             	movzx  eax,al
c001468a:	31 d2                	xor    edx,edx
c001468c:	83 c4 0c             	add    esp,0xc
c001468f:	5b                   	pop    ebx
c0014690:	5e                   	pop    esi
c0014691:	5f                   	pop    edi
c0014692:	5d                   	pop    ebp
c0014693:	c3                   	ret    

c0014694 <SysWrite(regs*)>:
c0014694:	57                   	push   edi
c0014695:	56                   	push   esi
c0014696:	53                   	push   ebx
c0014697:	83 ec 10             	sub    esp,0x10
c001469a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001469e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146a1:	83 f8 02             	cmp    eax,0x2
c00146a4:	77 10                	ja     c00146b6 <SysWrite(regs*)+0x22>
c00146a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146ab:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146ae:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146b4:	eb 0e                	jmp    c00146c4 <SysWrite(regs*)+0x30>
c00146b6:	83 ec 0c             	sub    esp,0xc
c00146b9:	50                   	push   eax
c00146ba:	e8 f4 4d ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	89 c1                	mov    ecx,eax
c00146c4:	83 c8 ff             	or     eax,0xffffffff
c00146c7:	85 c9                	test   ecx,ecx
c00146c9:	89 c2                	mov    edx,eax
c00146cb:	74 28                	je     c00146f5 <SysWrite(regs*)+0x61>
c00146cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146d5:	31 ff                	xor    edi,edi
c00146d7:	83 ec 0c             	sub    esp,0xc
c00146da:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146e0:	52                   	push   edx
c00146e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146e7:	57                   	push   edi
c00146e8:	56                   	push   esi
c00146e9:	51                   	push   ecx
c00146ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146f1:	83 c4 20             	add    esp,0x20
c00146f4:	99                   	cdq    
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	5b                   	pop    ebx
c00146f9:	5e                   	pop    esi
c00146fa:	5f                   	pop    edi
c00146fb:	c3                   	ret    

c00146fc <SysWsbe(regs*)>:
c00146fc:	57                   	push   edi
c00146fd:	b9 0b 00 00 00       	mov    ecx,0xb
c0014702:	56                   	push   esi
c0014703:	be a9 27 02 c0       	mov    esi,0xc00227a9
c0014708:	53                   	push   ebx
c0014709:	83 ec 30             	sub    esp,0x30
c001470c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014710:	fc                   	cld    
c0014711:	83 ec 0c             	sub    esp,0xc
c0014714:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001471a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001471f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014722:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014728:	8b 06                	mov    eax,DWORD PTR [esi]
c001472a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001472d:	57                   	push   edi
c001472e:	e8 3d be fe ff       	call   c0000570 <strlen>
c0014733:	5a                   	pop    edx
c0014734:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014738:	52                   	push   edx
c0014739:	31 d2                	xor    edx,edx
c001473b:	57                   	push   edi
c001473c:	52                   	push   edx
c001473d:	50                   	push   eax
c001473e:	56                   	push   esi
c001473f:	ff d3                	call   ebx
c0014741:	83 c4 14             	add    esp,0x14
c0014744:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014748:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001474b:	e8 b0 23 00 00       	call   c0016b00 <terminateTask(int)>
c0014750:	83 c4 40             	add    esp,0x40
c0014753:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014758:	5b                   	pop    ebx
c0014759:	31 d2                	xor    edx,edx
c001475b:	5e                   	pop    esi
c001475c:	5f                   	pop    edi
c001475d:	c3                   	ret    

c001475e <SysYield(regs*)>:
c001475e:	83 ec 0c             	sub    esp,0xc
c0014761:	fa                   	cli    
c0014762:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014768:	e8 f3 19 00 00       	call   c0016160 <schedule()>
c001476d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014772:	48                   	dec    eax
c0014773:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014778:	75 01                	jne    c001477b <SysYield(regs*)+0x1d>
c001477a:	fb                   	sti    
c001477b:	31 c0                	xor    eax,eax
c001477d:	31 d2                	xor    edx,edx
c001477f:	83 c4 0c             	add    esp,0xc
c0014782:	c3                   	ret    

c0014783 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014783:	55                   	push   ebp
c0014784:	57                   	push   edi
c0014785:	56                   	push   esi
c0014786:	53                   	push   ebx
c0014787:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001478d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014795:	0f 95 c0             	setne  al
c0014798:	31 d2                	xor    edx,edx
c001479a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147a2:	0f 94 c2             	sete   dl
c00147a5:	85 c2                	test   edx,eax
c00147a7:	74 34                	je     c00147dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147a9:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00147b4:	74 27                	je     c00147dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00147b6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00147bd:	05 00 10 00 00       	add    eax,0x1000
c00147c2:	89 c1                	mov    ecx,eax
c00147c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147c9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00147cf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00147d6:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00147dd:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147ed:	6a 01                	push   0x1
c00147ef:	e8 19 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00147f4:	83 c4 10             	add    esp,0x10
c00147f7:	89 c3                	mov    ebx,eax
c00147f9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00147ff:	0f 86 25 01 00 00    	jbe    c001492a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014805:	c1 ee 0c             	shr    esi,0xc
c0014808:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001480f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014813:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001481b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014822:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014826:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001482d:	29 ef                	sub    edi,ebp
c001482f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014833:	0f 83 f8 00 00 00    	jae    c0014931 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014839:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001483f:	76 05                	jbe    c0014846 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014841:	bf 00 10 00 00       	mov    edi,0x1000
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	31 d2                	xor    edx,edx
c001484b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014852:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014854:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014858:	50                   	push   eax
c0014859:	8d 74 24 30          	lea    esi,[esp+0x30]
c001485d:	56                   	push   esi
c001485e:	52                   	push   edx
c001485f:	57                   	push   edi
c0014860:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014867:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001486a:	83 c4 20             	add    esp,0x20
c001486d:	85 c0                	test   eax,eax
c001486f:	75 06                	jne    c0014877 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014871:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014875:	74 13                	je     c001488a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014877:	83 ec 0c             	sub    esp,0xc
c001487a:	53                   	push   ebx
c001487b:	e8 ab 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014880:	83 c4 10             	add    esp,0x10
c0014883:	31 c0                	xor    eax,eax
c0014885:	e9 7c 01 00 00       	jmp    c0014a06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001488a:	fa                   	cli    
c001488b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014891:	e8 29 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014896:	6a 07                	push   0x7
c0014898:	89 c7                	mov    edi,eax
c001489a:	53                   	push   ebx
c001489b:	50                   	push   eax
c001489c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148a4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148aa:	e8 71 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148af:	83 c4 0c             	add    esp,0xc
c00148b2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148b9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148bf:	6a 00                	push   0x0
c00148c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148cf:	e8 b2 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148d4:	58                   	pop    eax
c00148d5:	5a                   	pop    edx
c00148d6:	68 07 0c 00 00       	push   0xc07
c00148db:	55                   	push   ebp
c00148dc:	57                   	push   edi
c00148dd:	89 df                	mov    edi,ebx
c00148df:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148e6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ec:	6a 00                	push   0x0
c00148ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148fc:	e8 71 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014901:	b9 00 10 00 00       	mov    ecx,0x1000
c0014906:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014908:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001490d:	83 c4 20             	add    esp,0x20
c0014910:	48                   	dec    eax
c0014911:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014916:	85 c0                	test   eax,eax
c0014918:	75 01                	jne    c001491b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001491a:	fb                   	sti    
c001491b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014921:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014925:	e9 f1 fe ff ff       	jmp    c001481b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001492a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014931:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014938:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001493e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014944:	0f 86 ae 00 00 00    	jbe    c00149f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001494a:	fa                   	cli    
c001494b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014951:	c1 ee 0c             	shr    esi,0xc
c0014954:	51                   	push   ecx
c0014955:	31 ff                	xor    edi,edi
c0014957:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001495e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014964:	6a 00                	push   0x0
c0014966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001496b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001496e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014974:	e8 0d 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014979:	83 c4 10             	add    esp,0x10
c001497c:	e8 3e 34 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014981:	47                   	inc    edi
c0014982:	6a 07                	push   0x7
c0014984:	53                   	push   ebx
c0014985:	50                   	push   eax
c0014986:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001498a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014990:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014993:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014999:	e8 82 53 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001499e:	58                   	pop    eax
c001499f:	5a                   	pop    edx
c00149a0:	68 07 0c 00 00       	push   0xc07
c00149a5:	55                   	push   ebp
c00149a6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149b0:	50                   	push   eax
c00149b1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149b8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149be:	6a 00                	push   0x0
c00149c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149ce:	e8 9f 55 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149d3:	83 c4 1c             	add    esp,0x1c
c00149d6:	68 00 10 00 00       	push   0x1000
c00149db:	6a 00                	push   0x0
c00149dd:	53                   	push   ebx
c00149de:	e8 0d bb fe ff       	call   c00004f0 <memset>
c00149e3:	83 c4 10             	add    esp,0x10
c00149e6:	39 fe                	cmp    esi,edi
c00149e8:	77 92                	ja     c001497c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00149ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149ef:	48                   	dec    eax
c00149f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149f5:	75 01                	jne    c00149f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00149f7:	fb                   	sti    
c00149f8:	83 ec 0c             	sub    esp,0xc
c00149fb:	53                   	push   ebx
c00149fc:	e8 2a 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014a01:	83 c4 10             	add    esp,0x10
c0014a04:	b0 01                	mov    al,0x1
c0014a06:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a0c:	5b                   	pop    ebx
c0014a0d:	5e                   	pop    esi
c0014a0e:	5f                   	pop    edi
c0014a0f:	5d                   	pop    ebp
c0014a10:	c3                   	ret    

c0014a11 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a11:	55                   	push   ebp
c0014a12:	57                   	push   edi
c0014a13:	56                   	push   esi
c0014a14:	53                   	push   ebx
c0014a15:	83 ec 48             	sub    esp,0x48
c0014a18:	68 14 01 00 00       	push   0x114
c0014a1d:	e8 94 30 ff ff       	call   c0007ab6 <malloc>
c0014a22:	83 c4 0c             	add    esp,0xc
c0014a25:	89 c6                	mov    esi,eax
c0014a27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a2b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a2f:	50                   	push   eax
c0014a30:	e8 b9 71 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0014a35:	58                   	pop    eax
c0014a36:	5a                   	pop    edx
c0014a37:	6a 01                	push   0x1
c0014a39:	56                   	push   esi
c0014a3a:	e8 cd 71 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0014a3f:	83 c4 10             	add    esp,0x10
c0014a42:	85 c0                	test   eax,eax
c0014a44:	0f 85 43 01 00 00    	jne    c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a4a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	6a 34                	push   0x34
c0014a57:	e8 5a 30 ff ff       	call   c0007ab6 <malloc>
c0014a5c:	89 c3                	mov    ebx,eax
c0014a5e:	58                   	pop    eax
c0014a5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a61:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014a65:	57                   	push   edi
c0014a66:	53                   	push   ebx
c0014a67:	6a 00                	push   0x0
c0014a69:	6a 34                	push   0x34
c0014a6b:	56                   	push   esi
c0014a6c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a6f:	83 c4 20             	add    esp,0x20
c0014a72:	85 c0                	test   eax,eax
c0014a74:	0f 85 13 01 00 00    	jne    c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a7a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a80:	0f 85 07 01 00 00    	jne    c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a86:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a89:	85 c0                	test   eax,eax
c0014a8b:	0f 84 fc 00 00 00    	je     c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a91:	31 d2                	xor    edx,edx
c0014a93:	55                   	push   ebp
c0014a94:	52                   	push   edx
c0014a95:	50                   	push   eax
c0014a96:	56                   	push   esi
c0014a97:	e8 2e 72 ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014a9c:	83 c4 10             	add    esp,0x10
c0014a9f:	85 c0                	test   eax,eax
c0014aa1:	0f 85 e6 00 00 00    	jne    c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aa7:	83 ec 0c             	sub    esp,0xc
c0014aaa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014aad:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ab1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014ab5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ab9:	0f af c2             	imul   eax,edx
c0014abc:	50                   	push   eax
c0014abd:	e8 f4 2f ff ff       	call   c0007ab6 <malloc>
c0014ac2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014ac4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ac8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014acb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014acf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ad3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ad7:	0f af c2             	imul   eax,edx
c0014ada:	99                   	cdq    
c0014adb:	52                   	push   edx
c0014adc:	50                   	push   eax
c0014add:	56                   	push   esi
c0014ade:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ae1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014ae4:	83 c4 20             	add    esp,0x20
c0014ae7:	85 c0                	test   eax,eax
c0014ae9:	0f 84 9e 00 00 00    	je     c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aef:	31 d2                	xor    edx,edx
c0014af1:	51                   	push   ecx
c0014af2:	52                   	push   edx
c0014af3:	50                   	push   eax
c0014af4:	56                   	push   esi
c0014af5:	e8 d0 71 ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	85 c0                	test   eax,eax
c0014aff:	0f 85 88 00 00 00    	jne    c0014b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b05:	83 ec 0c             	sub    esp,0xc
c0014b08:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b0c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b10:	31 ed                	xor    ebp,ebp
c0014b12:	0f af c2             	imul   eax,edx
c0014b15:	50                   	push   eax
c0014b16:	e8 9b 2f ff ff       	call   c0007ab6 <malloc>
c0014b1b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b28:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b2c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b30:	0f af c2             	imul   eax,edx
c0014b33:	99                   	cdq    
c0014b34:	52                   	push   edx
c0014b35:	50                   	push   eax
c0014b36:	56                   	push   esi
c0014b37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b3a:	83 c4 20             	add    esp,0x20
c0014b3d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b45:	0f b7 fd             	movzx  edi,bp
c0014b48:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014b4c:	73 7d                	jae    c0014bcb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014b4e:	c1 e7 05             	shl    edi,0x5
c0014b51:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014b55:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014b58:	75 6b                	jne    c0014bc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014b5a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014b5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b61:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014b64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b68:	52                   	push   edx
c0014b69:	31 d2                	xor    edx,edx
c0014b6b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014b6e:	52                   	push   edx
c0014b6f:	50                   	push   eax
c0014b70:	56                   	push   esi
c0014b71:	e8 54 71 ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	85 c0                	test   eax,eax
c0014b7b:	74 17                	je     c0014b94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	68 d5 27 02 c0       	push   0xc00227d5
c0014b85:	e8 bb 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	31 c0                	xor    eax,eax
c0014b8f:	e9 87 00 00 00       	jmp    c0014c1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014b94:	83 ec 0c             	sub    esp,0xc
c0014b97:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014b9a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014b9d:	50                   	push   eax
c0014b9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ba6:	56                   	push   esi
c0014ba7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bab:	e8 d3 fb ff ff       	call   c0014783 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bb4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014bb8:	83 c4 20             	add    esp,0x20
c0014bbb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014bbf:	73 04                	jae    c0014bc5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014bc5:	45                   	inc    ebp
c0014bc6:	e9 7a ff ff ff       	jmp    c0014b45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014bcb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014bcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014bd7:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014bdd:	83 ec 0c             	sub    esp,0xc
c0014be0:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014be6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014beb:	05 00 10 00 00       	add    eax,0x1000
c0014bf0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014bf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bf7:	e8 ca 2e ff ff       	call   c0007ac6 <free>
c0014bfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bff:	e8 c2 2e ff ff       	call   c0007ac6 <free>
c0014c04:	58                   	pop    eax
c0014c05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c09:	e8 b8 2e ff ff       	call   c0007ac6 <free>
c0014c0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c11:	e8 54 70 ff ff       	call   c000bc6a <File::close()>
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	b0 01                	mov    al,0x1
c0014c1b:	83 c4 3c             	add    esp,0x3c
c0014c1e:	5b                   	pop    ebx
c0014c1f:	5e                   	pop    esi
c0014c20:	5f                   	pop    edi
c0014c21:	5d                   	pop    ebp
c0014c22:	c3                   	ret    

c0014c23 <Thr::runtimeReferenceHelper()>:
c0014c23:	83 ec 18             	sub    esp,0x18
c0014c26:	68 dd 27 02 c0       	push   0xc00227dd
c0014c2b:	e8 15 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014c30:	fa                   	cli    
c0014c31:	83 c4 10             	add    esp,0x10
c0014c34:	eb fe                	jmp    c0014c34 <Thr::runtimeReferenceHelper()+0x11>

c0014c36 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c36:	57                   	push   edi
c0014c37:	56                   	push   esi
c0014c38:	53                   	push   ebx
c0014c39:	31 db                	xor    ebx,ebx
c0014c3b:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c41:	7e 3c                	jle    c0014c7f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c43:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c4a:	31 ff                	xor    edi,edi
c0014c4c:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c53:	7e 27                	jle    c0014c7c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c55:	50                   	push   eax
c0014c56:	50                   	push   eax
c0014c57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c5d:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c64:	50                   	push   eax
c0014c65:	e8 e6 ba fe ff       	call   c0000750 <strcmp>
c0014c6a:	83 c4 10             	add    esp,0x10
c0014c6d:	85 c0                	test   eax,eax
c0014c6f:	75 05                	jne    c0014c76 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c71:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c74:	eb 0b                	jmp    c0014c81 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c76:	83 c6 10             	add    esi,0x10
c0014c79:	47                   	inc    edi
c0014c7a:	eb d0                	jmp    c0014c4c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c7c:	43                   	inc    ebx
c0014c7d:	eb bc                	jmp    c0014c3b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c7f:	31 c0                	xor    eax,eax
c0014c81:	5b                   	pop    ebx
c0014c82:	5e                   	pop    esi
c0014c83:	5f                   	pop    edi
c0014c84:	c3                   	ret    

c0014c85 <Thr::loadKernelSymbolTable(char const*)>:
c0014c85:	55                   	push   ebp
c0014c86:	57                   	push   edi
c0014c87:	56                   	push   esi
c0014c88:	53                   	push   ebx
c0014c89:	83 ec 68             	sub    esp,0x68
c0014c8c:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014c92:	68 14 01 00 00       	push   0x114
c0014c97:	e8 1a 2e ff ff       	call   c0007ab6 <malloc>
c0014c9c:	83 c4 0c             	add    esp,0xc
c0014c9f:	89 c3                	mov    ebx,eax
c0014ca1:	56                   	push   esi
c0014ca2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014ca6:	50                   	push   eax
c0014ca7:	e8 42 6f ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0014cac:	5e                   	pop    esi
c0014cad:	5f                   	pop    edi
c0014cae:	6a 01                	push   0x1
c0014cb0:	53                   	push   ebx
c0014cb1:	e8 56 6f ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0014cb6:	83 c4 10             	add    esp,0x10
c0014cb9:	85 c0                	test   eax,eax
c0014cbb:	74 0a                	je     c0014cc7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cbd:	83 ec 0c             	sub    esp,0xc
c0014cc0:	68 ff 27 02 c0       	push   0xc00227ff
c0014cc5:	eb 34                	jmp    c0014cfb <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014cc7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ccf:	83 ec 0c             	sub    esp,0xc
c0014cd2:	6a 34                	push   0x34
c0014cd4:	e8 dd 2d ff ff       	call   c0007ab6 <malloc>
c0014cd9:	59                   	pop    ecx
c0014cda:	89 c7                	mov    edi,eax
c0014cdc:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014ce0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ce2:	56                   	push   esi
c0014ce3:	57                   	push   edi
c0014ce4:	6a 00                	push   0x0
c0014ce6:	6a 34                	push   0x34
c0014ce8:	53                   	push   ebx
c0014ce9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014cec:	83 c4 20             	add    esp,0x20
c0014cef:	85 c0                	test   eax,eax
c0014cf1:	74 17                	je     c0014d0a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014cf3:	83 ec 0c             	sub    esp,0xc
c0014cf6:	68 16 28 02 c0       	push   0xc0022816
c0014cfb:	e8 bf c9 ff ff       	call   c00116bf <KePanic(char const*)>
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	31 c0                	xor    eax,eax
c0014d05:	e9 31 02 00 00       	jmp    c0014f3b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d0a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d10:	75 e1                	jne    c0014cf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d12:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d15:	85 c0                	test   eax,eax
c0014d17:	74 da                	je     c0014cf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d19:	52                   	push   edx
c0014d1a:	31 d2                	xor    edx,edx
c0014d1c:	52                   	push   edx
c0014d1d:	50                   	push   eax
c0014d1e:	53                   	push   ebx
c0014d1f:	e8 a6 6f ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	85 c0                	test   eax,eax
c0014d29:	75 c8                	jne    c0014cf3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d2b:	83 ec 0c             	sub    esp,0xc
c0014d2e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d32:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d36:	31 ed                	xor    ebp,ebp
c0014d38:	0f af c2             	imul   eax,edx
c0014d3b:	50                   	push   eax
c0014d3c:	e8 75 2d ff ff       	call   c0007ab6 <malloc>
c0014d41:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d4e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d52:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d56:	0f af c2             	imul   eax,edx
c0014d59:	99                   	cdq    
c0014d5a:	52                   	push   edx
c0014d5b:	50                   	push   eax
c0014d5c:	53                   	push   ebx
c0014d5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d60:	83 c4 20             	add    esp,0x20
c0014d63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d6b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d83:	0f b7 f5             	movzx  esi,bp
c0014d86:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d8a:	0f 83 a7 00 00 00    	jae    c0014e37 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014d90:	6b f6 28             	imul   esi,esi,0x28
c0014d93:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014d97:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014d9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d9e:	50                   	push   eax
c0014d9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014da3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014da7:	8b 16                	mov    edx,DWORD PTR [esi]
c0014da9:	6b c0 28             	imul   eax,eax,0x28
c0014dac:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014db0:	89 d0                	mov    eax,edx
c0014db2:	31 d2                	xor    edx,edx
c0014db4:	52                   	push   edx
c0014db5:	50                   	push   eax
c0014db6:	53                   	push   ebx
c0014db7:	e8 0e 6f ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014dbc:	83 c4 0c             	add    esp,0xc
c0014dbf:	6a 20                	push   0x20
c0014dc1:	6a 00                	push   0x0
c0014dc3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dc7:	52                   	push   edx
c0014dc8:	e8 23 b7 fe ff       	call   c00004f0 <memset>
c0014dcd:	58                   	pop    eax
c0014dce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dd0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014dd4:	51                   	push   ecx
c0014dd5:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014dd9:	52                   	push   edx
c0014dda:	6a 00                	push   0x0
c0014ddc:	6a 1f                	push   0x1f
c0014dde:	53                   	push   ebx
c0014ddf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014de2:	83 c4 18             	add    esp,0x18
c0014de5:	68 2d 28 02 c0       	push   0xc002282d
c0014dea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014dee:	52                   	push   edx
c0014def:	e8 5c b9 fe ff       	call   c0000750 <strcmp>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	85 c0                	test   eax,eax
c0014df9:	75 0f                	jne    c0014e0a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014dfb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014dfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e0a:	50                   	push   eax
c0014e0b:	50                   	push   eax
c0014e0c:	68 35 28 02 c0       	push   0xc0022835
c0014e11:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e15:	50                   	push   eax
c0014e16:	e8 35 b9 fe ff       	call   c0000750 <strcmp>
c0014e1b:	83 c4 10             	add    esp,0x10
c0014e1e:	85 c0                	test   eax,eax
c0014e20:	75 0f                	jne    c0014e31 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e22:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e31:	45                   	inc    ebp
c0014e32:	e9 4c ff ff ff       	jmp    c0014d83 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e37:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e3c:	75 10                	jne    c0014e4e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e3e:	83 ec 0c             	sub    esp,0xc
c0014e41:	68 3d 28 02 c0       	push   0xc002283d
c0014e46:	e8 74 c8 ff ff       	call   c00116bf <KePanic(char const*)>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e53:	75 10                	jne    c0014e65 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e55:	83 ec 0c             	sub    esp,0xc
c0014e58:	68 3d 28 02 c0       	push   0xc002283d
c0014e5d:	e8 5d c8 ff ff       	call   c00116bf <KePanic(char const*)>
c0014e62:	83 c4 10             	add    esp,0x10
c0014e65:	31 d2                	xor    edx,edx
c0014e67:	50                   	push   eax
c0014e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e6c:	52                   	push   edx
c0014e6d:	50                   	push   eax
c0014e6e:	53                   	push   ebx
c0014e6f:	e8 56 6e ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014e74:	5a                   	pop    edx
c0014e75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e79:	e8 38 2c ff ff       	call   c0007ab6 <malloc>
c0014e7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e86:	31 c9                	xor    ecx,ecx
c0014e88:	5e                   	pop    esi
c0014e89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e8b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014e8f:	55                   	push   ebp
c0014e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e94:	51                   	push   ecx
c0014e95:	52                   	push   edx
c0014e96:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014e9a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014e9e:	53                   	push   ebx
c0014e9f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ea2:	83 c4 14             	add    esp,0x14
c0014ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ea9:	e8 08 2c ff ff       	call   c0007ab6 <malloc>
c0014eae:	89 c6                	mov    esi,eax
c0014eb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eb2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014eb5:	56                   	push   esi
c0014eb6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014eba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014ebe:	51                   	push   ecx
c0014ebf:	52                   	push   edx
c0014ec0:	53                   	push   ebx
c0014ec1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ec4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ec8:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014ece:	83 c4 1c             	add    esp,0x1c
c0014ed1:	c1 e8 04             	shr    eax,0x4
c0014ed4:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014edb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014edf:	31 d2                	xor    edx,edx
c0014ee1:	52                   	push   edx
c0014ee2:	50                   	push   eax
c0014ee3:	53                   	push   ebx
c0014ee4:	e8 e1 6d ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014ee9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eeb:	31 d2                	xor    edx,edx
c0014eed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ef0:	56                   	push   esi
c0014ef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ef5:	52                   	push   edx
c0014ef6:	50                   	push   eax
c0014ef7:	53                   	push   ebx
c0014ef8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014efb:	83 c4 14             	add    esp,0x14
c0014efe:	53                   	push   ebx
c0014eff:	e8 66 6d ff ff       	call   c000bc6a <File::close()>
c0014f04:	5d                   	pop    ebp
c0014f05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f09:	e8 b8 2b ff ff       	call   c0007ac6 <free>
c0014f0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f11:	e8 b0 2b ff ff       	call   c0007ac6 <free>
c0014f16:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f1b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014f22:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f29:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f30:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	b0 01                	mov    al,0x1
c0014f3b:	83 c4 5c             	add    esp,0x5c
c0014f3e:	5b                   	pop    ebx
c0014f3f:	5e                   	pop    esi
c0014f40:	5f                   	pop    edi
c0014f41:	5d                   	pop    ebp
c0014f42:	c3                   	ret    

c0014f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f43:	55                   	push   ebp
c0014f44:	57                   	push   edi
c0014f45:	56                   	push   esi
c0014f46:	53                   	push   ebx
c0014f47:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f4d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f54:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014f5a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014f5e:	68 14 01 00 00       	push   0x114
c0014f63:	e8 4e 2b ff ff       	call   c0007ab6 <malloc>
c0014f68:	83 c4 0c             	add    esp,0xc
c0014f6b:	89 c5                	mov    ebp,eax
c0014f6d:	53                   	push   ebx
c0014f6e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f75:	50                   	push   eax
c0014f76:	e8 73 6c ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0014f7b:	5e                   	pop    esi
c0014f7c:	5f                   	pop    edi
c0014f7d:	6a 01                	push   0x1
c0014f7f:	55                   	push   ebp
c0014f80:	e8 87 6c ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	85 c0                	test   eax,eax
c0014f8a:	0f 85 aa 06 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f90:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014f98:	83 ec 0c             	sub    esp,0xc
c0014f9b:	6a 34                	push   0x34
c0014f9d:	e8 14 2b ff ff       	call   c0007ab6 <malloc>
c0014fa2:	5b                   	pop    ebx
c0014fa3:	89 c7                	mov    edi,eax
c0014fa5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014fa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fac:	53                   	push   ebx
c0014fad:	57                   	push   edi
c0014fae:	6a 00                	push   0x0
c0014fb0:	6a 34                	push   0x34
c0014fb2:	55                   	push   ebp
c0014fb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fb6:	83 c4 20             	add    esp,0x20
c0014fb9:	85 c0                	test   eax,eax
c0014fbb:	0f 85 79 06 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fc1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014fc7:	0f 85 6d 06 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fcd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014fd0:	85 c0                	test   eax,eax
c0014fd2:	0f 84 62 06 00 00    	je     c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fd8:	31 d2                	xor    edx,edx
c0014fda:	51                   	push   ecx
c0014fdb:	52                   	push   edx
c0014fdc:	50                   	push   eax
c0014fdd:	55                   	push   ebp
c0014fde:	e8 e7 6c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0014fe3:	83 c4 10             	add    esp,0x10
c0014fe6:	85 c0                	test   eax,eax
c0014fe8:	0f 85 4c 06 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fee:	83 ec 0c             	sub    esp,0xc
c0014ff1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014ff4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014ff8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014ffc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015000:	0f af c2             	imul   eax,edx
c0015003:	50                   	push   eax
c0015004:	e8 ad 2a ff ff       	call   c0007ab6 <malloc>
c0015009:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001500c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015013:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015017:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001501b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001501f:	0f af c2             	imul   eax,edx
c0015022:	99                   	cdq    
c0015023:	52                   	push   edx
c0015024:	50                   	push   eax
c0015025:	55                   	push   ebp
c0015026:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015029:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001502c:	83 c4 20             	add    esp,0x20
c001502f:	85 c0                	test   eax,eax
c0015031:	0f 84 03 06 00 00    	je     c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015037:	52                   	push   edx
c0015038:	31 d2                	xor    edx,edx
c001503a:	52                   	push   edx
c001503b:	50                   	push   eax
c001503c:	55                   	push   ebp
c001503d:	e8 88 6c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0015042:	83 c4 10             	add    esp,0x10
c0015045:	85 c0                	test   eax,eax
c0015047:	0f 85 ed 05 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001504d:	83 ec 0c             	sub    esp,0xc
c0015050:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015054:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015058:	31 f6                	xor    esi,esi
c001505a:	0f af c2             	imul   eax,edx
c001505d:	50                   	push   eax
c001505e:	e8 53 2a ff ff       	call   c0007ab6 <malloc>
c0015063:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015066:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001506a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001506d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015071:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015075:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015079:	0f af c2             	imul   eax,edx
c001507c:	99                   	cdq    
c001507d:	52                   	push   edx
c001507e:	50                   	push   eax
c001507f:	55                   	push   ebp
c0015080:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015083:	83 c4 20             	add    esp,0x20
c0015086:	0f b7 de             	movzx  ebx,si
c0015089:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001508d:	0f 83 87 00 00 00    	jae    c001511a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015093:	c1 e3 05             	shl    ebx,0x5
c0015096:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001509a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001509d:	75 75                	jne    c0015114 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001509f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00150a2:	31 d2                	xor    edx,edx
c00150a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00150ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150af:	50                   	push   eax
c00150b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00150b3:	52                   	push   edx
c00150b4:	50                   	push   eax
c00150b5:	55                   	push   ebp
c00150b6:	e8 0f 6c ff ff       	call   c000bcca <File::seek(unsigned long long)>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	85 c0                	test   eax,eax
c00150c0:	0f 85 74 05 00 00    	jne    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150c6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150d0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00150d4:	31 d2                	xor    edx,edx
c00150d6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00150da:	83 ec 0c             	sub    esp,0xc
c00150dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150e8:	50                   	push   eax
c00150e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f1:	52                   	push   edx
c00150f2:	50                   	push   eax
c00150f3:	55                   	push   ebp
c00150f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150f7:	83 c4 1c             	add    esp,0x1c
c00150fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00150fd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015100:	50                   	push   eax
c0015101:	6a 00                	push   0x0
c0015103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015107:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001510b:	50                   	push   eax
c001510c:	e8 df b3 fe ff       	call   c00004f0 <memset>
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	46                   	inc    esi
c0015115:	e9 6c ff ff ff       	jmp    c0015086 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001511a:	53                   	push   ebx
c001511b:	31 db                	xor    ebx,ebx
c001511d:	68 00 01 00 00       	push   0x100
c0015122:	6a 00                	push   0x0
c0015124:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015128:	50                   	push   eax
c0015129:	e8 c2 b3 fe ff       	call   c00004f0 <memset>
c001512e:	83 c4 0c             	add    esp,0xc
c0015131:	68 00 01 00 00       	push   0x100
c0015136:	6a 00                	push   0x0
c0015138:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001513f:	50                   	push   eax
c0015140:	e8 ab b3 fe ff       	call   c00004f0 <memset>
c0015145:	83 c4 10             	add    esp,0x10
c0015148:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015150:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015158:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015160:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015168:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015170:	0f b7 f3             	movzx  esi,bx
c0015173:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015177:	0f 83 2d 01 00 00    	jae    c00152aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001517d:	6b f6 28             	imul   esi,esi,0x28
c0015180:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015184:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001518b:	52                   	push   edx
c001518c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015190:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015194:	8b 06                	mov    eax,DWORD PTR [esi]
c0015196:	6b d2 28             	imul   edx,edx,0x28
c0015199:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001519d:	31 d2                	xor    edx,edx
c001519f:	52                   	push   edx
c00151a0:	50                   	push   eax
c00151a1:	55                   	push   ebp
c00151a2:	e8 23 6b ff ff       	call   c000bcca <File::seek(unsigned long long)>
c00151a7:	83 c4 0c             	add    esp,0xc
c00151aa:	6a 20                	push   0x20
c00151ac:	6a 00                	push   0x0
c00151ae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151b5:	51                   	push   ecx
c00151b6:	e8 35 b3 fe ff       	call   c00004f0 <memset>
c00151bb:	59                   	pop    ecx
c00151bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00151bf:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151c3:	52                   	push   edx
c00151c4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151cb:	51                   	push   ecx
c00151cc:	6a 00                	push   0x0
c00151ce:	6a 1f                	push   0x1f
c00151d0:	55                   	push   ebp
c00151d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151d4:	83 c4 1c             	add    esp,0x1c
c00151d7:	6a 09                	push   0x9
c00151d9:	68 57 28 02 c0       	push   0xc0022857
c00151de:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151e5:	51                   	push   ecx
c00151e6:	e8 95 b1 fe ff       	call   c0000380 <memcmp>
c00151eb:	83 c4 10             	add    esp,0x10
c00151ee:	85 c0                	test   eax,eax
c00151f0:	75 21                	jne    c0015213 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00151f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151fa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00151fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015202:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015205:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001520c:	89 d0                	mov    eax,edx
c001520e:	40                   	inc    eax
c001520f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015213:	50                   	push   eax
c0015214:	6a 09                	push   0x9
c0015216:	68 61 28 02 c0       	push   0xc0022861
c001521b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015222:	50                   	push   eax
c0015223:	e8 58 b1 fe ff       	call   c0000380 <memcmp>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	85 c0                	test   eax,eax
c001522d:	75 21                	jne    c0015250 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001522f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015233:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001523b:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001523f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015242:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015249:	89 d0                	mov    eax,edx
c001524b:	40                   	inc    eax
c001524c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015250:	50                   	push   eax
c0015251:	50                   	push   eax
c0015252:	68 2d 28 02 c0       	push   0xc002282d
c0015257:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001525e:	50                   	push   eax
c001525f:	e8 ec b4 fe ff       	call   c0000750 <strcmp>
c0015264:	83 c4 10             	add    esp,0x10
c0015267:	85 c0                	test   eax,eax
c0015269:	75 0f                	jne    c001527a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001526b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001526e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015272:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015276:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001527a:	50                   	push   eax
c001527b:	50                   	push   eax
c001527c:	68 35 28 02 c0       	push   0xc0022835
c0015281:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015288:	50                   	push   eax
c0015289:	e8 c2 b4 fe ff       	call   c0000750 <strcmp>
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	85 c0                	test   eax,eax
c0015293:	75 0f                	jne    c00152a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015295:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001529c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00152a4:	43                   	inc    ebx
c00152a5:	e9 c6 fe ff ff       	jmp    c0015170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00152aa:	31 d2                	xor    edx,edx
c00152ac:	50                   	push   eax
c00152ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152b1:	52                   	push   edx
c00152b2:	50                   	push   eax
c00152b3:	55                   	push   ebp
c00152b4:	e8 11 6a ff ff       	call   c000bcca <File::seek(unsigned long long)>
c00152b9:	58                   	pop    eax
c00152ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00152be:	e8 f3 27 ff ff       	call   c0007ab6 <malloc>
c00152c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00152ca:	31 d2                	xor    edx,edx
c00152cc:	58                   	pop    eax
c00152cd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00152d1:	53                   	push   ebx
c00152d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00152d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152da:	52                   	push   edx
c00152db:	50                   	push   eax
c00152dc:	55                   	push   ebp
c00152dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152e0:	83 c4 14             	add    esp,0x14
c00152e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152e7:	e8 ca 27 ff ff       	call   c0007ab6 <malloc>
c00152ec:	31 d2                	xor    edx,edx
c00152ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152f2:	83 c4 0c             	add    esp,0xc
c00152f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152f9:	52                   	push   edx
c00152fa:	50                   	push   eax
c00152fb:	55                   	push   ebp
c00152fc:	e8 c9 69 ff ff       	call   c000bcca <File::seek(unsigned long long)>
c0015301:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015304:	31 d2                	xor    edx,edx
c0015306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015309:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001530d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015311:	52                   	push   edx
c0015312:	50                   	push   eax
c0015313:	55                   	push   ebp
c0015314:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015317:	83 c4 20             	add    esp,0x20
c001531a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001531f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015327:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001532b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001532f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015333:	0f 84 05 03 00 00    	je     c001563e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015339:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015340:	31 d2                	xor    edx,edx
c0015342:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015346:	c1 e8 03             	shr    eax,0x3
c0015349:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001534d:	51                   	push   ecx
c001534e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015352:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015356:	52                   	push   edx
c0015357:	50                   	push   eax
c0015358:	55                   	push   ebp
c0015359:	e8 6c 69 ff ff       	call   c000bcca <File::seek(unsigned long long)>
c001535e:	5b                   	pop    ebx
c001535f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015363:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001536a:	e8 47 27 ff ff       	call   c0007ab6 <malloc>
c001536f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015372:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015376:	31 d2                	xor    edx,edx
c0015378:	5e                   	pop    esi
c0015379:	8d 44 24 58          	lea    eax,[esp+0x58]
c001537d:	50                   	push   eax
c001537e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015386:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001538d:	52                   	push   edx
c001538e:	50                   	push   eax
c001538f:	55                   	push   ebp
c0015390:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015393:	83 c4 20             	add    esp,0x20
c0015396:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001539e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00153a2:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00153a6:	0f 8d 76 02 00 00    	jge    c0015622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00153ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00153b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153b4:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00153b9:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00153bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153c4:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00153c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00153cc:	c1 e8 08             	shr    eax,0x8
c00153cf:	89 c6                	mov    esi,eax
c00153d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00153d5:	c1 e6 04             	shl    esi,0x4
c00153d8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00153dc:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00153df:	85 db                	test   ebx,ebx
c00153e1:	0f 85 b3 00 00 00    	jne    c001549a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00153e7:	83 ec 0c             	sub    esp,0xc
c00153ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153ee:	03 06                	add    eax,DWORD PTR [esi]
c00153f0:	50                   	push   eax
c00153f1:	e8 40 f8 ff ff       	call   c0014c36 <Thr::getAddressOfKernelSymbol(char const*)>
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	89 c3                	mov    ebx,eax
c00153fb:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015400:	85 c0                	test   eax,eax
c0015402:	0f 85 92 00 00 00    	jne    c001549a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001540f:	03 06                	add    eax,DWORD PTR [esi]
c0015411:	50                   	push   eax
c0015412:	e8 95 c4 ff ff       	call   c00118ac <KeResolveCompatibilitySymbol(char*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	89 c3                	mov    ebx,eax
c001541c:	85 c0                	test   eax,eax
c001541e:	75 7a                	jne    c001549a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015420:	51                   	push   ecx
c0015421:	51                   	push   ecx
c0015422:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015426:	03 06                	add    eax,DWORD PTR [esi]
c0015428:	50                   	push   eax
c0015429:	68 6b 28 02 c0       	push   0xc002286b
c001542e:	e8 12 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015433:	58                   	pop    eax
c0015434:	5a                   	pop    edx
c0015435:	68 85 28 02 c0       	push   0xc0022885
c001543a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015441:	50                   	push   eax
c0015442:	e8 f9 b1 fe ff       	call   c0000640 <strcpy>
c0015447:	59                   	pop    ecx
c0015448:	58                   	pop    eax
c0015449:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001544d:	03 06                	add    eax,DWORD PTR [esi]
c001544f:	50                   	push   eax
c0015450:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015457:	50                   	push   eax
c0015458:	e8 e3 b3 fe ff       	call   c0000840 <strcat>
c001545d:	58                   	pop    eax
c001545e:	5a                   	pop    edx
c001545f:	68 1b 29 02 c0       	push   0xc002291b
c0015464:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001546b:	50                   	push   eax
c001546c:	e8 cf b3 fe ff       	call   c0000840 <strcat>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015479:	0f 84 5d 01 00 00    	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001547f:	83 ec 0c             	sub    esp,0xc
c0015482:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015489:	50                   	push   eax
c001548a:	e8 30 c2 ff ff       	call   c00116bf <KePanic(char const*)>
c001548f:	83 c4 10             	add    esp,0x10
c0015492:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015496:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001549a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001549f:	83 f8 01             	cmp    eax,0x1
c00154a2:	0f 85 8f 00 00 00    	jne    c0015537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00154a8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00154af:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00154b3:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00154b7:	01 ce                	add    esi,ecx
c00154b9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00154c1:	0f 94 c0             	sete   al
c00154c4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00154cc:	0f 94 c2             	sete   dl
c00154cf:	09 c2                	or     edx,eax
c00154d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00154d3:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154d8:	0f b6 d2             	movzx  edx,dl
c00154db:	74 41                	je     c001551e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00154dd:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00154e0:	85 d2                	test   edx,edx
c00154e2:	75 15                	jne    c00154f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00154e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00154e8:	66 83 f8 0c          	cmp    ax,0xc
c00154ec:	76 05                	jbe    c00154f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00154ee:	b8 0c 00 00 00       	mov    eax,0xc
c00154f3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154f7:	76 37                	jbe    c0015530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00154f9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00154fd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015502:	0f 84 d4 00 00 00    	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	68 9c 28 02 c0       	push   0xc002289c
c0015510:	e8 aa c1 ff ff       	call   c00116bf <KePanic(char const*)>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001551c:	eb 12                	jmp    c0015530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001551e:	01 c1                	add    ecx,eax
c0015520:	85 d2                	test   edx,edx
c0015522:	75 0c                	jne    c0015530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015524:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015528:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001552c:	77 02                	ja     c0015530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001552e:	01 d9                	add    ecx,ebx
c0015530:	89 0e                	mov    DWORD PTR [esi],ecx
c0015532:	e9 e2 00 00 00       	jmp    c0015619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015537:	83 f8 02             	cmp    eax,0x2
c001553a:	75 77                	jne    c00155b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001553c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015543:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015547:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001554b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015553:	74 21                	je     c0015576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015555:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001555d:	74 17                	je     c0015576 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001555f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015563:	b8 0a 00 00 00       	mov    eax,0xa
c0015568:	83 fa 0e             	cmp    edx,0xe
c001556b:	77 03                	ja     c0015570 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001556d:	8d 42 fc             	lea    eax,[edx-0x4]
c0015570:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015574:	76 17                	jbe    c001558d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015576:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001557b:	74 5f                	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	68 b8 28 02 c0       	push   0xc00228b8
c0015585:	e8 35 c1 ff ff       	call   c00116bf <KePanic(char const*)>
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	8b 06                	mov    eax,DWORD PTR [esi]
c001558f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015594:	74 13                	je     c00155a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015596:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001559a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00155a1:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00155a5:	01 d0                	add    eax,edx
c00155a7:	eb 04                	jmp    c00155ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00155a9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00155ad:	01 c3                	add    ebx,eax
c00155af:	89 1e                	mov    DWORD PTR [esi],ebx
c00155b1:	eb 66                	jmp    c0015619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155b3:	52                   	push   edx
c00155b4:	52                   	push   edx
c00155b5:	50                   	push   eax
c00155b6:	68 d4 28 02 c0       	push   0xc00228d4
c00155bb:	e8 85 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155c8:	74 12                	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155ca:	83 ec 0c             	sub    esp,0xc
c00155cd:	68 df 28 02 c0       	push   0xc00228df
c00155d2:	e8 e8 c0 ff ff       	call   c00116bf <KePanic(char const*)>
c00155d7:	83 c4 10             	add    esp,0x10
c00155da:	eb 3d                	jmp    c0015619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00155dc:	83 ec 0c             	sub    esp,0xc
c00155df:	55                   	push   ebp
c00155e0:	e8 85 66 ff ff       	call   c000bc6a <File::close()>
c00155e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155e8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155ee:	59                   	pop    ecx
c00155ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155f3:	e8 ce 24 ff ff       	call   c0007ac6 <free>
c00155f8:	5b                   	pop    ebx
c00155f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155fd:	e8 c4 24 ff ff       	call   c0007ac6 <free>
c0015602:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015605:	e8 bc 24 ff ff       	call   c0007ac6 <free>
c001560a:	5e                   	pop    esi
c001560b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001560f:	e8 b2 24 ff ff       	call   c0007ac6 <free>
c0015614:	83 c4 10             	add    esp,0x10
c0015617:	eb 21                	jmp    c001563a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015619:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001561d:	e9 7c fd ff ff       	jmp    c001539e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015622:	83 ec 0c             	sub    esp,0xc
c0015625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015629:	e8 98 24 ff ff       	call   c0007ac6 <free>
c001562e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015632:	83 c4 10             	add    esp,0x10
c0015635:	e9 f1 fc ff ff       	jmp    c001532b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001563a:	31 c0                	xor    eax,eax
c001563c:	eb 33                	jmp    c0015671 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001563e:	83 ec 0c             	sub    esp,0xc
c0015641:	55                   	push   ebp
c0015642:	e8 23 66 ff ff       	call   c000bc6a <File::close()>
c0015647:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001564a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001564d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015650:	58                   	pop    eax
c0015651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015655:	e8 6c 24 ff ff       	call   c0007ac6 <free>
c001565a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001565d:	e8 64 24 ff ff       	call   c0007ac6 <free>
c0015662:	5a                   	pop    edx
c0015663:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015667:	e8 5a 24 ff ff       	call   c0007ac6 <free>
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	b0 01                	mov    al,0x1
c0015671:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015677:	5b                   	pop    ebx
c0015678:	5e                   	pop    esi
c0015679:	5f                   	pop    edi
c001567a:	5d                   	pop    ebp
c001567b:	c3                   	ret    

c001567c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001567c:	56                   	push   esi
c001567d:	31 d2                	xor    edx,edx
c001567f:	53                   	push   ebx
c0015680:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c0015686:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001568a:	39 d3                	cmp    ebx,edx
c001568c:	7e 1b                	jle    c00156a9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001568e:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c0015695:	39 c8                	cmp    eax,ecx
c0015697:	77 0d                	ja     c00156a6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015699:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156a0:	01 c6                	add    esi,eax
c00156a2:	39 ce                	cmp    esi,ecx
c00156a4:	77 05                	ja     c00156ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156a6:	42                   	inc    edx
c00156a7:	eb e1                	jmp    c001568a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156a9:	31 c0                	xor    eax,eax
c00156ab:	5b                   	pop    ebx
c00156ac:	5e                   	pop    esi
c00156ad:	c3                   	ret    

c00156ae <Thr::getDriverNameFromAddress(unsigned long)>:
c00156ae:	53                   	push   ebx
c00156af:	31 c0                	xor    eax,eax
c00156b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156b5:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156bb:	39 c3                	cmp    ebx,eax
c00156bd:	7e 22                	jle    c00156e1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156bf:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00156c6:	39 ca                	cmp    edx,ecx
c00156c8:	77 14                	ja     c00156de <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156ca:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156d1:	39 ca                	cmp    edx,ecx
c00156d3:	76 09                	jbe    c00156de <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156d5:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156dc:	eb 05                	jmp    c00156e3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156de:	40                   	inc    eax
c00156df:	eb da                	jmp    c00156bb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156e1:	31 c0                	xor    eax,eax
c00156e3:	5b                   	pop    ebx
c00156e4:	c3                   	ret    

c00156e5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00156e5:	53                   	push   ebx
c00156e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00156ea:	53                   	push   ebx
c00156eb:	e8 8c ff ff ff       	call   c001567c <Thr::getDriverBaseFromAddress(unsigned long)>
c00156f0:	5a                   	pop    edx
c00156f1:	31 d2                	xor    edx,edx
c00156f3:	85 c0                	test   eax,eax
c00156f5:	74 04                	je     c00156fb <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00156f7:	89 da                	mov    edx,ebx
c00156f9:	29 c2                	sub    edx,eax
c00156fb:	89 d0                	mov    eax,edx
c00156fd:	5b                   	pop    ebx
c00156fe:	c3                   	ret    

c00156ff <Thr::loadDLL(char const*, bool)>:
c00156ff:	55                   	push   ebp
c0015700:	57                   	push   edi
c0015701:	56                   	push   esi
c0015702:	53                   	push   ebx
c0015703:	81 ec 34 01 00 00    	sub    esp,0x134
c0015709:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015710:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015717:	56                   	push   esi
c0015718:	68 f7 28 02 c0       	push   0xc00228f7
c001571d:	e8 23 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015722:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015729:	e8 88 23 ff ff       	call   c0007ab6 <malloc>
c001572e:	83 c4 0c             	add    esp,0xc
c0015731:	89 c3                	mov    ebx,eax
c0015733:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015739:	56                   	push   esi
c001573a:	50                   	push   eax
c001573b:	e8 ae 64 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0015740:	83 c4 10             	add    esp,0x10
c0015743:	85 db                	test   ebx,ebx
c0015745:	75 3c                	jne    c0015783 <Thr::loadDLL(char const*, bool)+0x84>
c0015747:	89 f8                	mov    eax,edi
c0015749:	84 c0                	test   al,al
c001574b:	0f 84 d2 01 00 00    	je     c0015923 <Thr::loadDLL(char const*, bool)+0x224>
c0015751:	55                   	push   ebp
c0015752:	55                   	push   ebp
c0015753:	68 08 29 02 c0       	push   0xc0022908
c0015758:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001575c:	55                   	push   ebp
c001575d:	e8 de ae fe ff       	call   c0000640 <strcpy>
c0015762:	58                   	pop    eax
c0015763:	5a                   	pop    edx
c0015764:	56                   	push   esi
c0015765:	55                   	push   ebp
c0015766:	e8 d5 b0 fe ff       	call   c0000840 <strcat>
c001576b:	59                   	pop    ecx
c001576c:	58                   	pop    eax
c001576d:	68 1b 29 02 c0       	push   0xc002291b
c0015772:	55                   	push   ebp
c0015773:	e8 c8 b0 fe ff       	call   c0000840 <strcat>
c0015778:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001577b:	e8 3f bf ff ff       	call   c00116bf <KePanic(char const*)>
c0015780:	83 c4 10             	add    esp,0x10
c0015783:	51                   	push   ecx
c0015784:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015788:	50                   	push   eax
c0015789:	8d 44 24 20          	lea    eax,[esp+0x20]
c001578d:	50                   	push   eax
c001578e:	53                   	push   ebx
c001578f:	e8 7a 67 ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0015794:	83 c4 10             	add    esp,0x10
c0015797:	85 db                	test   ebx,ebx
c0015799:	74 0c                	je     c00157a7 <Thr::loadDLL(char const*, bool)+0xa8>
c001579b:	83 ec 0c             	sub    esp,0xc
c001579e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157a0:	53                   	push   ebx
c00157a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157ac:	75 0a                	jne    c00157b8 <Thr::loadDLL(char const*, bool)+0xb9>
c00157ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157b2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157b6:	75 3c                	jne    c00157f4 <Thr::loadDLL(char const*, bool)+0xf5>
c00157b8:	89 f8                	mov    eax,edi
c00157ba:	84 c0                	test   al,al
c00157bc:	0f 84 49 01 00 00    	je     c001590b <Thr::loadDLL(char const*, bool)+0x20c>
c00157c2:	51                   	push   ecx
c00157c3:	51                   	push   ecx
c00157c4:	68 08 29 02 c0       	push   0xc0022908
c00157c9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157cd:	53                   	push   ebx
c00157ce:	e8 6d ae fe ff       	call   c0000640 <strcpy>
c00157d3:	5d                   	pop    ebp
c00157d4:	58                   	pop    eax
c00157d5:	56                   	push   esi
c00157d6:	53                   	push   ebx
c00157d7:	e8 64 b0 fe ff       	call   c0000840 <strcat>
c00157dc:	58                   	pop    eax
c00157dd:	5a                   	pop    edx
c00157de:	68 1b 29 02 c0       	push   0xc002291b
c00157e3:	53                   	push   ebx
c00157e4:	e8 57 b0 fe ff       	call   c0000840 <strcat>
c00157e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157ec:	e8 ce be ff ff       	call   c00116bf <KePanic(char const*)>
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	52                   	push   edx
c00157f5:	6a 03                	push   0x3
c00157f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00157ff:	05 ff 0f 00 00       	add    eax,0xfff
c0015804:	83 d2 00             	adc    edx,0x0
c0015807:	0f ac d0 0c          	shrd   eax,edx,0xc
c001580b:	50                   	push   eax
c001580c:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015812:	e8 0d 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015817:	59                   	pop    ecx
c0015818:	89 c3                	mov    ebx,eax
c001581a:	5d                   	pop    ebp
c001581b:	50                   	push   eax
c001581c:	68 52 0e 02 c0       	push   0xc0020e52
c0015821:	e8 1f 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015826:	89 34 24             	mov    DWORD PTR [esp],esi
c0015829:	e8 42 ad fe ff       	call   c0000570 <strlen>
c001582e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015834:	40                   	inc    eax
c0015835:	89 04 24             	mov    DWORD PTR [esp],eax
c0015838:	e8 79 22 ff ff       	call   c0007ab6 <malloc>
c001583d:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015844:	58                   	pop    eax
c0015845:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001584a:	5a                   	pop    edx
c001584b:	56                   	push   esi
c001584c:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015853:	e8 e8 ad fe ff       	call   c0000640 <strcpy>
c0015858:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001585d:	8d 50 01             	lea    edx,[eax+0x1]
c0015860:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015867:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001586d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015871:	83 c4 0c             	add    esp,0xc
c0015874:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001587b:	6a 01                	push   0x1
c001587d:	53                   	push   ebx
c001587e:	56                   	push   esi
c001587f:	e8 bf f6 ff ff       	call   c0014f43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015884:	83 c4 10             	add    esp,0x10
c0015887:	0f b6 c0             	movzx  eax,al
c001588a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001588e:	85 c0                	test   eax,eax
c0015890:	0f 85 89 00 00 00    	jne    c001591f <Thr::loadDLL(char const*, bool)+0x220>
c0015896:	89 f8                	mov    eax,edi
c0015898:	84 c0                	test   al,al
c001589a:	74 73                	je     c001590f <Thr::loadDLL(char const*, bool)+0x210>
c001589c:	83 ec 0c             	sub    esp,0xc
c001589f:	68 1d 29 02 c0       	push   0xc002291d
c00158a4:	e8 16 be ff ff       	call   c00116bf <KePanic(char const*)>
c00158a9:	83 c4 10             	add    esp,0x10
c00158ac:	eb 61                	jmp    c001590f <Thr::loadDLL(char const*, bool)+0x210>
c00158ae:	50                   	push   eax
c00158af:	50                   	push   eax
c00158b0:	89 e8                	mov    eax,ebp
c00158b2:	c1 e0 0c             	shl    eax,0xc
c00158b5:	01 d8                	add    eax,ebx
c00158b7:	50                   	push   eax
c00158b8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00158be:	e8 49 40 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c8:	a8 60                	test   al,0x60
c00158ca:	75 11                	jne    c00158dd <Thr::loadDLL(char const*, bool)+0x1de>
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158d4:	50                   	push   eax
c00158d5:	e8 7c 24 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00158da:	83 c4 10             	add    esp,0x10
c00158dd:	45                   	inc    ebp
c00158de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158e6:	05 ff 0f 00 00       	add    eax,0xfff
c00158eb:	bf 00 00 00 00       	mov    edi,0x0
c00158f0:	83 d2 00             	adc    edx,0x0
c00158f3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158f7:	c1 ea 0c             	shr    edx,0xc
c00158fa:	39 c5                	cmp    ebp,eax
c00158fc:	89 d1                	mov    ecx,edx
c00158fe:	89 f8                	mov    eax,edi
c0015900:	19 c8                	sbb    eax,ecx
c0015902:	72 aa                	jb     c00158ae <Thr::loadDLL(char const*, bool)+0x1af>
c0015904:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015909:	75 18                	jne    c0015923 <Thr::loadDLL(char const*, bool)+0x224>
c001590b:	31 db                	xor    ebx,ebx
c001590d:	eb 14                	jmp    c0015923 <Thr::loadDLL(char const*, bool)+0x224>
c001590f:	83 ec 0c             	sub    esp,0xc
c0015912:	68 3c 29 02 c0       	push   0xc002293c
c0015917:	e8 a3 bd ff ff       	call   c00116bf <KePanic(char const*)>
c001591c:	83 c4 10             	add    esp,0x10
c001591f:	31 ed                	xor    ebp,ebp
c0015921:	eb bb                	jmp    c00158de <Thr::loadDLL(char const*, bool)+0x1df>
c0015923:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015929:	89 d8                	mov    eax,ebx
c001592b:	5b                   	pop    ebx
c001592c:	5e                   	pop    esi
c001592d:	5f                   	pop    edi
c001592e:	5d                   	pop    ebp
c001592f:	c3                   	ret    

c0015930 <Thr::executeDLL(unsigned long, void*)>:
c0015930:	56                   	push   esi
c0015931:	53                   	push   ebx
c0015932:	52                   	push   edx
c0015933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015937:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001593b:	85 db                	test   ebx,ebx
c001593d:	75 10                	jne    c001594f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001593f:	83 ec 0c             	sub    esp,0xc
c0015942:	68 58 29 02 c0       	push   0xc0022958
c0015947:	e8 73 bd ff ff       	call   c00116bf <KePanic(char const*)>
c001594c:	83 c4 10             	add    esp,0x10
c001594f:	50                   	push   eax
c0015950:	50                   	push   eax
c0015951:	53                   	push   ebx
c0015952:	68 82 29 02 c0       	push   0xc0022982
c0015957:	e8 e9 4f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001595c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015960:	89 d8                	mov    eax,ebx
c0015962:	83 c4 14             	add    esp,0x14
c0015965:	5b                   	pop    ebx
c0015966:	5e                   	pop    esi
c0015967:	ff e0                	jmp    eax
c0015969:	66 90                	xchg   ax,ax
c001596b:	90                   	nop

c001596c <userModeEntryPoint(void*)>:
c001596c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015971:	83 e8 01             	sub    eax,0x1
c0015974:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0015979:	75 01                	jne    c001597c <userModeEntryPoint(void*)+0x10>
c001597b:	fb                   	sti    
c001597c:	fb                   	sti    
c001597d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015982:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015985:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001598b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001598f:	e9 ab a8 fe ff       	jmp    c000023f <goToUsermode>

c0015994 <changeTSS>:
c0015994:	83 ec 14             	sub    esp,0x14
c0015997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001599c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001599f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159a4:	c1 e2 15             	shl    edx,0x15
c00159a7:	29 d0                	sub    eax,edx
c00159a9:	50                   	push   eax
c00159aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159b5:	05 7c 11 00 00       	add    eax,0x117c
c00159ba:	50                   	push   eax
c00159bb:	e8 94 35 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00159c0:	83 c4 1c             	add    esp,0x1c
c00159c3:	c3                   	ret    

c00159c4 <switchToThread(ThreadControlBlock*)>:
c00159c4:	57                   	push   edi
c00159c5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159cb:	56                   	push   esi
c00159cc:	85 c9                	test   ecx,ecx
c00159ce:	53                   	push   ebx
c00159cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159d3:	0f 85 8b 00 00 00    	jne    c0015a64 <switchToThread(ThreadControlBlock*)+0xa0>
c00159d9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00159dd:	81 fa ff 00 00 00    	cmp    edx,0xff
c00159e3:	74 7b                	je     c0015a60 <switchToThread(ThreadControlBlock*)+0x9c>
c00159e5:	b8 00 04 00 00       	mov    eax,0x400
c00159ea:	29 d0                	sub    eax,edx
c00159ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00159ef:	d1 f8                	sar    eax,1
c00159f1:	01 d0                	add    eax,edx
c00159f3:	90                   	nop
c00159f4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00159f7:	e8 1e 28 00 00       	call   c001821a <HalQueryPerformanceCounter()>
c00159fc:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a01:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a07:	89 c6                	mov    esi,eax
c0015a09:	89 d7                	mov    edi,edx
c0015a0b:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a11:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a16:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a1c:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a22:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a28:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a2e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a34:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a37:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a3a:	01 c6                	add    esi,eax
c0015a3c:	11 d7                	adc    edi,edx
c0015a3e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a41:	83 ec 0c             	sub    esp,0xc
c0015a44:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a47:	53                   	push   ebx
c0015a48:	e8 2a a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a4d:	0f 20 c0             	mov    eax,cr0
c0015a50:	83 c8 08             	or     eax,0x8
c0015a53:	0f 22 c0             	mov    cr0,eax
c0015a56:	83 c4 10             	add    esp,0x10
c0015a59:	5b                   	pop    ebx
c0015a5a:	5e                   	pop    esi
c0015a5b:	5f                   	pop    edi
c0015a5c:	c3                   	ret    
c0015a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a60:	31 c0                	xor    eax,eax
c0015a62:	eb 90                	jmp    c00159f4 <switchToThread(ThreadControlBlock*)+0x30>
c0015a64:	5b                   	pop    ebx
c0015a65:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a6f:	5e                   	pop    esi
c0015a70:	5f                   	pop    edi
c0015a71:	c3                   	ret    
c0015a72:	66 90                	xchg   ax,ax

c0015a74 <Process::addArgs(char**)>:
c0015a74:	57                   	push   edi
c0015a75:	56                   	push   esi
c0015a76:	53                   	push   ebx
c0015a77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015a7f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015a89:	85 ff                	test   edi,edi
c0015a8b:	74 4f                	je     c0015adc <Process::addArgs(char**)+0x68>
c0015a8d:	8b 07                	mov    eax,DWORD PTR [edi]
c0015a8f:	85 c0                	test   eax,eax
c0015a91:	74 49                	je     c0015adc <Process::addArgs(char**)+0x68>
c0015a93:	31 db                	xor    ebx,ebx
c0015a95:	8d 76 00             	lea    esi,[esi+0x0]
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	50                   	push   eax
c0015a9c:	e8 cf aa fe ff       	call   c0000570 <strlen>
c0015aa1:	83 c0 01             	add    eax,0x1
c0015aa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aa7:	e8 0a 20 ff ff       	call   c0007ab6 <malloc>
c0015aac:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015ab3:	5a                   	pop    edx
c0015ab4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015ab7:	59                   	pop    ecx
c0015ab8:	83 c3 01             	add    ebx,0x1
c0015abb:	52                   	push   edx
c0015abc:	50                   	push   eax
c0015abd:	e8 7e ab fe ff       	call   c0000640 <strcpy>
c0015ac2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	83 c1 01             	add    ecx,0x1
c0015ace:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015ad4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015ad7:	85 c0                	test   eax,eax
c0015ad9:	75 bd                	jne    c0015a98 <Process::addArgs(char**)+0x24>
c0015adb:	90                   	nop
c0015adc:	5b                   	pop    ebx
c0015add:	5e                   	pop    esi
c0015ade:	5f                   	pop    edi
c0015adf:	c3                   	ret    

c0015ae0 <Process::Process(char const*, Process*, char**)>:
c0015ae0:	56                   	push   esi
c0015ae1:	53                   	push   ebx
c0015ae2:	83 ec 14             	sub    esp,0x14
c0015ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae9:	05 0c 02 00 00       	add    eax,0x20c
c0015aee:	bb 07 00 00 00       	mov    ebx,0x7
c0015af3:	89 c6                	mov    esi,eax
c0015af5:	8d 76 00             	lea    esi,[esi+0x0]
c0015af8:	85 db                	test   ebx,ebx
c0015afa:	78 14                	js     c0015b10 <Process::Process(char const*, Process*, char**)+0x30>
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	56                   	push   esi
c0015b00:	e8 e3 a5 00 00       	call   c00200e8 <ThreadControlBlock::ThreadControlBlock()>
c0015b05:	83 c4 10             	add    esp,0x10
c0015b08:	83 c6 5f             	add    esi,0x5f
c0015b0b:	83 eb 01             	sub    ebx,0x1
c0015b0e:	eb e8                	jmp    c0015af8 <Process::Process(char const*, Process*, char**)+0x18>
c0015b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b26:	83 ec 0c             	sub    esp,0xc
c0015b29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b2d:	e8 82 b9 ff ff       	call   c00114b4 <KeNewProcessEnv(Process*)>
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	89 c2                	mov    edx,eax
c0015b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b45:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b4e:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015b53:	8d 50 01             	lea    edx,[eax+0x1]
c0015b56:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015b5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b60:	89 02                	mov    DWORD PTR [edx],eax
c0015b62:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b6a:	83 ec 0c             	sub    esp,0xc
c0015b6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b71:	e8 40 1f ff ff       	call   c0007ab6 <malloc>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	89 c3                	mov    ebx,eax
c0015b7b:	83 ec 08             	sub    esp,0x8
c0015b7e:	6a 00                	push   0x0
c0015b80:	53                   	push   ebx
c0015b81:	e8 e2 44 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b97:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ba9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015baf:	e8 26 bf ff ff       	call   c0011ada <KeInitSignals()>
c0015bb4:	89 c2                	mov    edx,eax
c0015bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bc4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bca:	85 c0                	test   eax,eax
c0015bcc:	74 42                	je     c0015c10 <Process::Process(char const*, Process*, char**)+0x130>
c0015bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bd2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bd8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bf2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfc:	05 0c 01 00 00       	add    eax,0x10c
c0015c01:	83 ec 08             	sub    esp,0x8
c0015c04:	52                   	push   edx
c0015c05:	50                   	push   eax
c0015c06:	e8 35 aa fe ff       	call   c0000640 <strcpy>
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	eb 64                	jmp    c0015c74 <Process::Process(char const*, Process*, char**)+0x194>
c0015c10:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c18:	83 ec 0c             	sub    esp,0xc
c0015c1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c1f:	e8 92 1e ff ff       	call   c0007ab6 <malloc>
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	89 c3                	mov    ebx,eax
c0015c29:	83 ec 08             	sub    esp,0x8
c0015c2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c30:	53                   	push   ebx
c0015c31:	e8 30 30 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015c36:	83 c4 10             	add    esp,0x10
c0015c39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c3d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c4d:	83 ec 0c             	sub    esp,0xc
c0015c50:	50                   	push   eax
c0015c51:	e8 ae 28 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015c56:	83 c4 10             	add    esp,0x10
c0015c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5d:	05 0c 01 00 00       	add    eax,0x10c
c0015c62:	83 ec 08             	sub    esp,0x8
c0015c65:	68 a1 29 02 c0       	push   0xc00229a1
c0015c6a:	50                   	push   eax
c0015c6b:	e8 d0 a9 fe ff       	call   c0000640 <strcpy>
c0015c70:	83 c4 10             	add    esp,0x10
c0015c73:	90                   	nop
c0015c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c78:	83 c0 0c             	add    eax,0xc
c0015c7b:	83 ec 08             	sub    esp,0x8
c0015c7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c82:	50                   	push   eax
c0015c83:	e8 b8 a9 fe ff       	call   c0000640 <strcpy>
c0015c88:	83 c4 10             	add    esp,0x10
c0015c8b:	83 ec 08             	sub    esp,0x8
c0015c8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015c92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c96:	e8 d9 fd ff ff       	call   c0015a74 <Process::addArgs(char**)>
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	83 ec 08             	sub    esp,0x8
c0015ca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca9:	e8 63 ed ff ff       	call   c0014a11 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cae:	83 c4 10             	add    esp,0x10
c0015cb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015cb9:	83 f0 01             	xor    eax,0x1
c0015cbc:	88 c2                	mov    dl,al
c0015cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015cc8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015ccd:	83 ec 04             	sub    esp,0x4
c0015cd0:	50                   	push   eax
c0015cd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cd5:	68 f8 29 02 c0       	push   0xc00229f8
c0015cda:	e8 66 4c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	90                   	nop
c0015ce3:	83 c4 14             	add    esp,0x14
c0015ce6:	5b                   	pop    ebx
c0015ce7:	5e                   	pop    esi
c0015ce8:	c3                   	ret    
c0015ce9:	90                   	nop
c0015cea:	66 90                	xchg   ax,ax

c0015cec <Process::Process(bool, char const*, Process*, char**)>:
c0015cec:	56                   	push   esi
c0015ced:	53                   	push   ebx
c0015cee:	83 ec 24             	sub    esp,0x24
c0015cf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015cf5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cfd:	05 0c 02 00 00       	add    eax,0x20c
c0015d02:	bb 07 00 00 00       	mov    ebx,0x7
c0015d07:	89 c6                	mov    esi,eax
c0015d09:	8d 76 00             	lea    esi,[esi+0x0]
c0015d0c:	85 db                	test   ebx,ebx
c0015d0e:	78 14                	js     c0015d24 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	56                   	push   esi
c0015d14:	e8 cf a3 00 00       	call   c00200e8 <ThreadControlBlock::ThreadControlBlock()>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 c6 5f             	add    esi,0x5f
c0015d1f:	83 eb 01             	sub    ebx,0x1
c0015d22:	eb e8                	jmp    c0015d0c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d28:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d33:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d3a:	83 ec 0c             	sub    esp,0xc
c0015d3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d41:	e8 6e b7 ff ff       	call   c00114b4 <KeNewProcessEnv(Process*)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	89 c2                	mov    edx,eax
c0015d4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d4f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d59:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d62:	a1 a0 3f 02 c0       	mov    eax,ds:0xc0023fa0
c0015d67:	8d 50 01             	lea    edx,[eax+0x1]
c0015d6a:	89 15 a0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa0,edx
c0015d70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d74:	89 02                	mov    DWORD PTR [edx],eax
c0015d76:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d85:	e8 2c 1d ff ff       	call   c0007ab6 <malloc>
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	89 c3                	mov    ebx,eax
c0015d8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d94:	83 ec 08             	sub    esp,0x8
c0015d97:	50                   	push   eax
c0015d98:	53                   	push   ebx
c0015d99:	e8 ca 42 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015d9e:	83 c4 10             	add    esp,0x10
c0015da1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015dab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015daf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015dc1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015dc7:	e8 0e bd ff ff       	call   c0011ada <KeInitSignals()>
c0015dcc:	89 c2                	mov    edx,eax
c0015dce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015dd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ddc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015de2:	85 c0                	test   eax,eax
c0015de4:	74 42                	je     c0015e28 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015de6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015df0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e14:	05 0c 01 00 00       	add    eax,0x10c
c0015e19:	83 ec 08             	sub    esp,0x8
c0015e1c:	52                   	push   edx
c0015e1d:	50                   	push   eax
c0015e1e:	e8 1d a8 fe ff       	call   c0000640 <strcpy>
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	eb 64                	jmp    c0015e8c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e28:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e30:	83 ec 0c             	sub    esp,0xc
c0015e33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e37:	e8 7a 1c ff ff       	call   c0007ab6 <malloc>
c0015e3c:	83 c4 10             	add    esp,0x10
c0015e3f:	89 c3                	mov    ebx,eax
c0015e41:	83 ec 08             	sub    esp,0x8
c0015e44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e48:	53                   	push   ebx
c0015e49:	e8 18 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e55:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e65:	83 ec 0c             	sub    esp,0xc
c0015e68:	50                   	push   eax
c0015e69:	e8 96 26 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e75:	05 0c 01 00 00       	add    eax,0x10c
c0015e7a:	83 ec 08             	sub    esp,0x8
c0015e7d:	68 a1 29 02 c0       	push   0xc00229a1
c0015e82:	50                   	push   eax
c0015e83:	e8 b8 a7 fe ff       	call   c0000640 <strcpy>
c0015e88:	83 c4 10             	add    esp,0x10
c0015e8b:	90                   	nop
c0015e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e90:	83 c0 0c             	add    eax,0xc
c0015e93:	83 ec 08             	sub    esp,0x8
c0015e96:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e9a:	50                   	push   eax
c0015e9b:	e8 a0 a7 fe ff       	call   c0000640 <strcpy>
c0015ea0:	83 c4 10             	add    esp,0x10
c0015ea3:	83 ec 08             	sub    esp,0x8
c0015ea6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015eaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015eae:	e8 c1 fb ff ff       	call   c0015a74 <Process::addArgs(char**)>
c0015eb3:	83 c4 10             	add    esp,0x10
c0015eb6:	90                   	nop
c0015eb7:	83 c4 24             	add    esp,0x24
c0015eba:	5b                   	pop    ebx
c0015ebb:	5e                   	pop    esi
c0015ebc:	c3                   	ret    
c0015ebd:	8d 76 00             	lea    esi,[esi+0x0]

c0015ec0 <taskStartupFunction>:
c0015ec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ec8:	c3                   	ret    
c0015ec9:	90                   	nop
c0015eca:	66 90                	xchg   ax,ax

c0015ecc <Semaphore::Semaphore(int)>:
c0015ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ed4:	89 10                	mov    DWORD PTR [eax],edx
c0015ed6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eda:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015ee1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015ef7:	90                   	nop
c0015ef8:	c3                   	ret    
c0015ef9:	90                   	nop
c0015efa:	66 90                	xchg   ax,ax

c0015efc <Mutex::Mutex()>:
c0015efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f00:	6a 01                	push   0x1
c0015f02:	50                   	push   eax
c0015f03:	e8 c4 ff ff ff       	call   c0015ecc <Semaphore::Semaphore(int)>
c0015f08:	83 c4 08             	add    esp,0x8
c0015f0b:	90                   	nop
c0015f0c:	c3                   	ret    
c0015f0d:	90                   	nop
c0015f0e:	66 90                	xchg   ax,ax

c0015f10 <Process::createThread(void (*)(void*), void*, int)>:
c0015f10:	57                   	push   edi
c0015f11:	31 c9                	xor    ecx,ecx
c0015f13:	56                   	push   esi
c0015f14:	53                   	push   ebx
c0015f15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f19:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f20:	89 f2                	mov    edx,esi
c0015f22:	66 90                	xchg   ax,ax
c0015f24:	0f b7 c2             	movzx  eax,dx
c0015f27:	80 e2 01             	and    dl,0x1
c0015f2a:	74 14                	je     c0015f40 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f2c:	d1 f8                	sar    eax,1
c0015f2e:	83 c1 01             	add    ecx,0x1
c0015f31:	89 c2                	mov    edx,eax
c0015f33:	83 f9 10             	cmp    ecx,0x10
c0015f36:	75 ec                	jne    c0015f24 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f38:	31 db                	xor    ebx,ebx
c0015f3a:	89 d8                	mov    eax,ebx
c0015f3c:	5b                   	pop    ebx
c0015f3d:	5e                   	pop    esi
c0015f3e:	5f                   	pop    edi
c0015f3f:	c3                   	ret    
c0015f40:	b8 01 00 00 00       	mov    eax,0x1
c0015f45:	d3 e0                	shl    eax,cl
c0015f47:	09 c6                	or     esi,eax
c0015f49:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f4c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f53:	01 c0                	add    eax,eax
c0015f55:	01 c8                	add    eax,ecx
c0015f57:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f5a:	01 d8                	add    eax,ebx
c0015f5c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f63:	75 0b                	jne    c0015f70 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f65:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f6f:	90                   	nop
c0015f70:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f76:	83 ec 0c             	sub    esp,0xc
c0015f79:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015f7c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015f7f:	01 c0                	add    eax,eax
c0015f81:	01 c8                	add    eax,ecx
c0015f83:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015f86:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015f89:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015f8f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015f95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f99:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015f9f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015fa5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015fab:	89 ca                	mov    edx,ecx
c0015fad:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015fb4:	f7 da                	neg    edx
c0015fb6:	c1 e2 15             	shl    edx,0x15
c0015fb9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015fbf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015fc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fc9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015fd3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015fd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fdd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015fe3:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015fed:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015ff7:	68 00 01 00 00       	push   0x100
c0015ffc:	e8 b5 1a ff ff       	call   c0007ab6 <malloc>
c0016001:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016004:	58                   	pop    eax
c0016005:	5a                   	pop    edx
c0016006:	53                   	push   ebx
c0016007:	68 e4 c6 02 c0       	push   0xc002c6e4
c001600c:	e8 6f 9e 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016011:	83 c4 10             	add    esp,0x10
c0016014:	89 d8                	mov    eax,ebx
c0016016:	5b                   	pop    ebx
c0016017:	5e                   	pop    esi
c0016018:	5f                   	pop    edi
c0016019:	c3                   	ret    
c001601a:	66 90                	xchg   ax,ax

c001601c <Process::createUserThread()>:
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 80 00 00 00       	push   0x80
c0016024:	6a 00                	push   0x0
c0016026:	68 6c 59 01 c0       	push   0xc001596c
c001602b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001602f:	50                   	push   eax
c0016030:	e8 db fe ff ff       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c0016035:	83 c4 1c             	add    esp,0x1c
c0016038:	c3                   	ret    
c0016039:	8d 76 00             	lea    esi,[esi+0x0]

c001603c <setupMultitasking(void (*)())>:
c001603c:	56                   	push   esi
c001603d:	53                   	push   ebx
c001603e:	83 ec 04             	sub    esp,0x4
c0016041:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016045:	eb 11                	jmp    c0016058 <setupMultitasking(void (*)())+0x1c>
c0016047:	90                   	nop
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016050:	e8 6f 9d 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016060:	e8 3b 9d 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016065:	83 c4 10             	add    esp,0x10
c0016068:	84 c0                	test   al,al
c001606a:	74 dc                	je     c0016048 <setupMultitasking(void (*)())+0xc>
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	68 24 07 00 00       	push   0x724
c0016074:	e8 3d 1a ff ff       	call   c0007ab6 <malloc>
c0016079:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016080:	89 c3                	mov    ebx,eax
c0016082:	6a 00                	push   0x0
c0016084:	68 a5 29 02 c0       	push   0xc00229a5
c0016089:	6a 01                	push   0x1
c001608b:	50                   	push   eax
c001608c:	e8 5b fc ff ff       	call   c0015cec <Process::Process(bool, char const*, Process*, char**)>
c0016091:	83 c4 14             	add    esp,0x14
c0016094:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001609a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160a0:	50                   	push   eax
c00160a1:	e8 b3 26 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00160a6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160ad:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160b7:	83 c8 01             	or     eax,0x1
c00160ba:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00160c1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160ca:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160d4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00160da:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160e0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00160ea:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00160f4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00160fe:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016104:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001610e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016114:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001611e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016125:	e8 8c 19 ff ff       	call   c0007ab6 <malloc>
c001612a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016130:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016136:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001613c:	5a                   	pop    edx
c001613d:	59                   	pop    ecx
c001613e:	68 a1 29 02 c0       	push   0xc00229a1
c0016143:	50                   	push   eax
c0016144:	e8 f7 a4 fe ff       	call   c0000640 <strcpy>
c0016149:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016150:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016154:	83 c4 14             	add    esp,0x14
c0016157:	5b                   	pop    ebx
c0016158:	5e                   	pop    esi
c0016159:	e9 0b a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001615e:	66 90                	xchg   ax,ax

c0016160 <schedule()>:
c0016160:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016166:	85 d2                	test   edx,edx
c0016168:	74 0e                	je     c0016178 <schedule()+0x18>
c001616a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016174:	c3                   	ret    
c0016175:	8d 76 00             	lea    esi,[esi+0x0]
c0016178:	53                   	push   ebx
c0016179:	83 ec 14             	sub    esp,0x14
c001617c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016181:	e8 1a 9c 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	84 c0                	test   al,al
c001618b:	75 3f                	jne    c00161cc <schedule()+0x6c>
c001618d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016192:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016195:	83 fa 01             	cmp    edx,0x1
c0016198:	74 3a                	je     c00161d4 <schedule()+0x74>
c001619a:	66 90                	xchg   ax,ax
c001619c:	83 ec 0c             	sub    esp,0xc
c001619f:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161a4:	e8 13 9c 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161a9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161b0:	89 c3                	mov    ebx,eax
c00161b2:	e8 0d 9c 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161b7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00161be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161c1:	e8 fe f7 ff ff       	call   c00159c4 <switchToThread(ThreadControlBlock*)>
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	83 c4 08             	add    esp,0x8
c00161cf:	5b                   	pop    ebx
c00161d0:	c3                   	ret    
c00161d1:	8d 76 00             	lea    esi,[esi+0x0]
c00161d4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161db:	83 ec 08             	sub    esp,0x8
c00161de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161e3:	50                   	push   eax
c00161e4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161e9:	e8 92 9c 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	eb a9                	jmp    c001619c <schedule()+0x3c>
c00161f3:	90                   	nop

c00161f4 <Semaphore::tryAcquire()>:
c00161f4:	53                   	push   ebx
c00161f5:	83 ec 08             	sub    esp,0x8
c00161f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00161fc:	fa                   	cli    
c00161fd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016202:	8d 50 01             	lea    edx,[eax+0x1]
c0016205:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001620b:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016211:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016214:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001621a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001621d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001621f:	7c 33                	jl     c0016254 <Semaphore::tryAcquire()+0x60>
c0016221:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016227:	85 d2                	test   edx,edx
c0016229:	75 0d                	jne    c0016238 <Semaphore::tryAcquire()+0x44>
c001622b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016231:	85 d2                	test   edx,edx
c0016233:	75 6f                	jne    c00162a4 <Semaphore::tryAcquire()+0xb0>
c0016235:	8d 76 00             	lea    esi,[esi+0x0]
c0016238:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001623d:	85 c0                	test   eax,eax
c001623f:	74 0b                	je     c001624c <Semaphore::tryAcquire()+0x58>
c0016241:	8d 76 00             	lea    esi,[esi+0x0]
c0016244:	31 c0                	xor    eax,eax
c0016246:	83 c4 08             	add    esp,0x8
c0016249:	5b                   	pop    ebx
c001624a:	c3                   	ret    
c001624b:	90                   	nop
c001624c:	fb                   	sti    
c001624d:	83 c4 08             	add    esp,0x8
c0016250:	5b                   	pop    ebx
c0016251:	c3                   	ret    
c0016252:	66 90                	xchg   ax,ax
c0016254:	83 c3 01             	add    ebx,0x1
c0016257:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001625d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016260:	85 d2                	test   edx,edx
c0016262:	75 24                	jne    c0016288 <Semaphore::tryAcquire()+0x94>
c0016264:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001626a:	85 c9                	test   ecx,ecx
c001626c:	74 1a                	je     c0016288 <Semaphore::tryAcquire()+0x94>
c001626e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016278:	e8 e3 fe ff ff       	call   c0016160 <schedule()>
c001627d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016282:	83 e8 01             	sub    eax,0x1
c0016285:	8d 76 00             	lea    esi,[esi+0x0]
c0016288:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001628d:	85 c0                	test   eax,eax
c001628f:	75 0b                	jne    c001629c <Semaphore::tryAcquire()+0xa8>
c0016291:	fb                   	sti    
c0016292:	b0 01                	mov    al,0x1
c0016294:	83 c4 08             	add    esp,0x8
c0016297:	5b                   	pop    ebx
c0016298:	c3                   	ret    
c0016299:	8d 76 00             	lea    esi,[esi+0x0]
c001629c:	b0 01                	mov    al,0x1
c001629e:	83 c4 08             	add    esp,0x8
c00162a1:	5b                   	pop    ebx
c00162a2:	c3                   	ret    
c00162a3:	90                   	nop
c00162a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162ae:	e8 ad fe ff ff       	call   c0016160 <schedule()>
c00162b3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162b8:	83 e8 01             	sub    eax,0x1
c00162bb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162c0:	85 c0                	test   eax,eax
c00162c2:	75 80                	jne    c0016244 <Semaphore::tryAcquire()+0x50>
c00162c4:	eb 86                	jmp    c001624c <Semaphore::tryAcquire()+0x58>
c00162c6:	66 90                	xchg   ax,ax

c00162c8 <Semaphore::assertLocked(char const*)>:
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162cf:	fa                   	cli    
c00162d0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00162d6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162db:	83 c1 01             	add    ecx,0x1
c00162de:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162e4:	8d 48 01             	lea    ecx,[eax+0x1]
c00162e7:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162ed:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162ef:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00162f2:	7c 28                	jl     c001631c <Semaphore::assertLocked(char const*)+0x54>
c00162f4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162f9:	85 c0                	test   eax,eax
c00162fb:	75 0b                	jne    c0016308 <Semaphore::assertLocked(char const*)+0x40>
c00162fd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016302:	85 c0                	test   eax,eax
c0016304:	75 32                	jne    c0016338 <Semaphore::assertLocked(char const*)+0x70>
c0016306:	66 90                	xchg   ax,ax
c0016308:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001630d:	83 e8 01             	sub    eax,0x1
c0016310:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016315:	75 01                	jne    c0016318 <Semaphore::assertLocked(char const*)+0x50>
c0016317:	fb                   	sti    
c0016318:	83 c4 0c             	add    esp,0xc
c001631b:	c3                   	ret    
c001631c:	83 ec 0c             	sub    esp,0xc
c001631f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016323:	52                   	push   edx
c0016324:	e8 96 b3 ff ff       	call   c00116bf <KePanic(char const*)>
c0016329:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001632e:	83 c4 10             	add    esp,0x10
c0016331:	83 e8 01             	sub    eax,0x1
c0016334:	eb be                	jmp    c00162f4 <Semaphore::assertLocked(char const*)+0x2c>
c0016336:	66 90                	xchg   ax,ax
c0016338:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016342:	e8 19 fe ff ff       	call   c0016160 <schedule()>
c0016347:	eb bf                	jmp    c0016308 <Semaphore::assertLocked(char const*)+0x40>
c0016349:	8d 76 00             	lea    esi,[esi+0x0]

c001634c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016358:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001635b:	e8 00 fe ff ff       	call   c0016160 <schedule()>
c0016360:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016365:	83 e8 01             	sub    eax,0x1
c0016368:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001636d:	75 01                	jne    c0016370 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001636f:	fb                   	sti    
c0016370:	83 c4 0c             	add    esp,0xc
c0016373:	c3                   	ret    

c0016374 <blockTask(TaskState)>:
c0016374:	83 ec 0c             	sub    esp,0xc
c0016377:	fa                   	cli    
c0016378:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001637d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016381:	83 c0 01             	add    eax,0x1
c0016384:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016391:	e8 ca fd ff ff       	call   c0016160 <schedule()>
c0016396:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001639b:	83 e8 01             	sub    eax,0x1
c001639e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a3:	75 03                	jne    c00163a8 <blockTask(TaskState)+0x34>
c00163a5:	fb                   	sti    
c00163a6:	66 90                	xchg   ax,ax
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    

c00163ac <waitTask(int, int*, int)>:
c00163ac:	83 ec 18             	sub    esp,0x18
c00163af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00163bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00163c7:	6a 07                	push   0x7
c00163c9:	e8 a6 ff ff ff       	call   c0016374 <blockTask(TaskState)>
c00163ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d3:	83 c4 10             	add    esp,0x10
c00163d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163d9:	85 d2                	test   edx,edx
c00163db:	74 0b                	je     c00163e8 <waitTask(int, int*, int)+0x3c>
c00163dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163e0:	89 02                	mov    DWORD PTR [edx],eax
c00163e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e7:	90                   	nop
c00163e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163eb:	83 c4 0c             	add    esp,0xc
c00163ee:	c3                   	ret    
c00163ef:	90                   	nop

c00163f0 <milliTenthSleepUntil(unsigned int)>:
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f7:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c00163fd:	76 05                	jbe    c0016404 <milliTenthSleepUntil(unsigned int)+0x14>
c00163ff:	90                   	nop
c0016400:	83 c4 0c             	add    esp,0xc
c0016403:	c3                   	ret    
c0016404:	fa                   	cli    
c0016405:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001640b:	83 ec 08             	sub    esp,0x8
c001640e:	83 c2 01             	add    edx,0x1
c0016411:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016417:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001641d:	83 c1 01             	add    ecx,0x1
c0016420:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016426:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001642c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001642f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016434:	50                   	push   eax
c0016435:	68 d8 c6 02 c0       	push   0xc002c6d8
c001643a:	e8 41 9a 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001643f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016446:	e8 29 ff ff ff       	call   c0016374 <blockTask(TaskState)>
c001644b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016450:	83 c4 10             	add    esp,0x10
c0016453:	83 e8 01             	sub    eax,0x1
c0016456:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001645b:	85 c0                	test   eax,eax
c001645d:	75 09                	jne    c0016468 <milliTenthSleepUntil(unsigned int)+0x78>
c001645f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016464:	85 c0                	test   eax,eax
c0016466:	75 14                	jne    c001647c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016468:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001646d:	83 e8 01             	sub    eax,0x1
c0016470:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016475:	75 89                	jne    c0016400 <milliTenthSleepUntil(unsigned int)+0x10>
c0016477:	fb                   	sti    
c0016478:	83 c4 0c             	add    esp,0xc
c001647b:	c3                   	ret    
c001647c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016486:	e8 d5 fc ff ff       	call   c0016160 <schedule()>
c001648b:	eb db                	jmp    c0016468 <milliTenthSleepUntil(unsigned int)+0x78>
c001648d:	8d 76 00             	lea    esi,[esi+0x0]

c0016490 <milliTenthSleep(unsigned int)>:
c0016490:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016494:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c0016499:	01 c2                	add    edx,eax
c001649b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001649f:	e9 4c ff ff ff       	jmp    c00163f0 <milliTenthSleepUntil(unsigned int)>

c00164a4 <sleep(unsigned int)>:
c00164a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164a8:	8d 04 80             	lea    eax,[eax+eax*4]
c00164ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00164ae:	8d 04 80             	lea    eax,[eax+eax*4]
c00164b1:	8d 04 80             	lea    eax,[eax+eax*4]
c00164b4:	c1 e0 04             	shl    eax,0x4
c00164b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164bb:	eb d3                	jmp    c0016490 <milliTenthSleep(unsigned int)>
c00164bd:	90                   	nop
c00164be:	66 90                	xchg   ax,ax

c00164c0 <Semaphore::acquire()>:
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164c7:	fa                   	cli    
c00164c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164cd:	83 c0 01             	add    eax,0x1
c00164d0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164d5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164da:	8d 48 01             	lea    ecx,[eax+0x1]
c00164dd:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164e3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00164e6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164e8:	7d 2e                	jge    c0016518 <Semaphore::acquire()+0x58>
c00164ea:	83 c1 01             	add    ecx,0x1
c00164ed:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164f0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164f5:	85 c0                	test   eax,eax
c00164f7:	75 0b                	jne    c0016504 <Semaphore::acquire()+0x44>
c00164f9:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00164fe:	85 c0                	test   eax,eax
c0016500:	75 66                	jne    c0016568 <Semaphore::acquire()+0xa8>
c0016502:	66 90                	xchg   ax,ax
c0016504:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016509:	83 e8 01             	sub    eax,0x1
c001650c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016511:	75 01                	jne    c0016514 <Semaphore::acquire()+0x54>
c0016513:	fb                   	sti    
c0016514:	83 c4 0c             	add    esp,0xc
c0016517:	c3                   	ret    
c0016518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001651d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016524:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016527:	85 c9                	test   ecx,ecx
c0016529:	74 51                	je     c001657c <Semaphore::acquire()+0xbc>
c001652b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001652e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016534:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016537:	90                   	nop
c0016538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001653d:	83 ec 0c             	sub    esp,0xc
c0016540:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016543:	68 24 2a 02 c0       	push   0xc0022a24
c0016548:	e8 f8 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001654d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016554:	e8 1b fe ff ff       	call   c0016374 <blockTask(TaskState)>
c0016559:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001655e:	83 c4 10             	add    esp,0x10
c0016561:	83 e8 01             	sub    eax,0x1
c0016564:	eb 8a                	jmp    c00164f0 <Semaphore::acquire()+0x30>
c0016566:	66 90                	xchg   ax,ax
c0016568:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016572:	e8 e9 fb ff ff       	call   c0016160 <schedule()>
c0016577:	eb 8b                	jmp    c0016504 <Semaphore::acquire()+0x44>
c0016579:	8d 76 00             	lea    esi,[esi+0x0]
c001657c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016581:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016584:	eb b2                	jmp    c0016538 <Semaphore::acquire()+0x78>
c0016586:	66 90                	xchg   ax,ax

c0016588 <taskReturned>:
c0016588:	83 ec 18             	sub    esp,0x18
c001658b:	68 44 2a 02 c0       	push   0xc0022a44
c0016590:	e8 2a b1 ff ff       	call   c00116bf <KePanic(char const*)>
c0016595:	83 c4 10             	add    esp,0x10
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	6a 02                	push   0x2
c001659d:	e8 d2 fd ff ff       	call   c0016374 <blockTask(TaskState)>
c00165a2:	fa                   	cli    
c00165a3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165a8:	83 c0 01             	add    eax,0x1
c00165ab:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b0:	e8 ab fb ff ff       	call   c0016160 <schedule()>
c00165b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165ba:	83 c4 10             	add    esp,0x10
c00165bd:	83 e8 01             	sub    eax,0x1
c00165c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165c5:	85 c0                	test   eax,eax
c00165c7:	75 cf                	jne    c0016598 <taskReturned+0x10>
c00165c9:	fb                   	sti    
c00165ca:	eb cc                	jmp    c0016598 <taskReturned+0x10>

c00165cc <Thr::processFromPID(int)>:
c00165cc:	57                   	push   edi
c00165cd:	56                   	push   esi
c00165ce:	53                   	push   ebx
c00165cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165d3:	fa                   	cli    
c00165d4:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00165da:	83 ec 0c             	sub    esp,0xc
c00165dd:	83 c1 01             	add    ecx,0x1
c00165e0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e5:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165eb:	e8 cc 97 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f0:	83 c4 10             	add    esp,0x10
c00165f3:	89 c7                	mov    edi,eax
c00165f5:	eb 15                	jmp    c001660c <Thr::processFromPID(int)+0x40>
c00165f7:	90                   	nop
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016600:	e8 b7 97 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	39 f8                	cmp    eax,edi
c001660a:	74 50                	je     c001665c <Thr::processFromPID(int)+0x90>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016614:	e8 a3 97 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016619:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016620:	89 c3                	mov    ebx,eax
c0016622:	e8 9d 97 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016627:	58                   	pop    eax
c0016628:	5a                   	pop    edx
c0016629:	53                   	push   ebx
c001662a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001662f:	e8 4c 98 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016634:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016637:	83 c4 10             	add    esp,0x10
c001663a:	39 30                	cmp    DWORD PTR [eax],esi
c001663c:	75 ba                	jne    c00165f8 <Thr::processFromPID(int)+0x2c>
c001663e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016643:	83 e8 01             	sub    eax,0x1
c0016646:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001664b:	74 0b                	je     c0016658 <Thr::processFromPID(int)+0x8c>
c001664d:	8d 76 00             	lea    esi,[esi+0x0]
c0016650:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016653:	5b                   	pop    ebx
c0016654:	5e                   	pop    esi
c0016655:	5f                   	pop    edi
c0016656:	c3                   	ret    
c0016657:	90                   	nop
c0016658:	fb                   	sti    
c0016659:	eb f5                	jmp    c0016650 <Thr::processFromPID(int)+0x84>
c001665b:	90                   	nop
c001665c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016661:	83 e8 01             	sub    eax,0x1
c0016664:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016669:	75 05                	jne    c0016670 <Thr::processFromPID(int)+0xa4>
c001666b:	fb                   	sti    
c001666c:	5b                   	pop    ebx
c001666d:	5e                   	pop    esi
c001666e:	5f                   	pop    edi
c001666f:	c3                   	ret    
c0016670:	5b                   	pop    ebx
c0016671:	31 c0                	xor    eax,eax
c0016673:	5e                   	pop    esi
c0016674:	5f                   	pop    edi
c0016675:	c3                   	ret    
c0016676:	66 90                	xchg   ax,ax

c0016678 <unblockTask(ThreadControlBlock*)>:
c0016678:	53                   	push   ebx
c0016679:	83 ec 08             	sub    esp,0x8
c001667c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016680:	fa                   	cli    
c0016681:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016686:	83 c0 01             	add    eax,0x1
c0016689:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001668e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016691:	85 c0                	test   eax,eax
c0016693:	74 67                	je     c00166fc <unblockTask(ThreadControlBlock*)+0x84>
c0016695:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016698:	83 f8 01             	cmp    eax,0x1
c001669b:	74 37                	je     c00166d4 <unblockTask(ThreadControlBlock*)+0x5c>
c001669d:	83 ec 0c             	sub    esp,0xc
c00166a0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166a5:	e8 12 97 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	85 c0                	test   eax,eax
c00166af:	75 1b                	jne    c00166cc <unblockTask(ThreadControlBlock*)+0x54>
c00166b1:	eb 5d                	jmp    c0016710 <unblockTask(ThreadControlBlock*)+0x98>
c00166b3:	90                   	nop
c00166b4:	83 ec 08             	sub    esp,0x8
c00166b7:	50                   	push   eax
c00166b8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166bd:	e8 1a 9a 00 00       	call   c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	85 c0                	test   eax,eax
c00166c7:	74 47                	je     c0016710 <unblockTask(ThreadControlBlock*)+0x98>
c00166c9:	8d 76 00             	lea    esi,[esi+0x0]
c00166cc:	39 c3                	cmp    ebx,eax
c00166ce:	75 e4                	jne    c00166b4 <unblockTask(ThreadControlBlock*)+0x3c>
c00166d0:	eb 12                	jmp    c00166e4 <unblockTask(ThreadControlBlock*)+0x6c>
c00166d2:	66 90                	xchg   ax,ax
c00166d4:	83 ec 0c             	sub    esp,0xc
c00166d7:	68 c3 29 02 c0       	push   0xc00229c3
c00166dc:	e8 64 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166e9:	83 e8 01             	sub    eax,0x1
c00166ec:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166f1:	75 01                	jne    c00166f4 <unblockTask(ThreadControlBlock*)+0x7c>
c00166f3:	fb                   	sti    
c00166f4:	83 c4 08             	add    esp,0x8
c00166f7:	5b                   	pop    ebx
c00166f8:	c3                   	ret    
c00166f9:	8d 76 00             	lea    esi,[esi+0x0]
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	68 ac 29 02 c0       	push   0xc00229ac
c0016704:	e8 3c 42 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016709:	83 c4 10             	add    esp,0x10
c001670c:	eb d6                	jmp    c00166e4 <unblockTask(ThreadControlBlock*)+0x6c>
c001670e:	66 90                	xchg   ax,ax
c0016710:	83 ec 08             	sub    esp,0x8
c0016713:	53                   	push   ebx
c0016714:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016719:	e8 62 97 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	eb c1                	jmp    c00166e4 <unblockTask(ThreadControlBlock*)+0x6c>
c0016723:	90                   	nop

c0016724 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016724:	55                   	push   ebp
c0016725:	57                   	push   edi
c0016726:	56                   	push   esi
c0016727:	53                   	push   ebx
c0016728:	83 ec 1c             	sub    esp,0x1c
c001672b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001672f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016732:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016738:	85 ed                	test   ebp,ebp
c001673a:	7e 28                	jle    c0016764 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001673c:	31 f6                	xor    esi,esi
c001673e:	66 90                	xchg   ax,ax
c0016740:	83 ec 0c             	sub    esp,0xc
c0016743:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001674a:	83 c6 01             	add    esi,0x1
c001674d:	57                   	push   edi
c001674e:	e8 73 13 ff ff       	call   c0007ac6 <free>
c0016753:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016756:	83 c4 10             	add    esp,0x10
c0016759:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001675f:	7f df                	jg     c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016761:	8d 76 00             	lea    esi,[esi+0x0]
c0016764:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001676e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016773:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016776:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016779:	d3 c0                	rol    eax,cl
c001677b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016782:	21 c8                	and    eax,ecx
c0016784:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001678b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001678e:	89 f7                	mov    edi,esi
c0016790:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016798:	0f 85 72 01 00 00    	jne    c0016910 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001679e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00167a4:	85 ed                	test   ebp,ebp
c00167a6:	74 1c                	je     c00167c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	55                   	push   ebp
c00167ac:	e8 1f ac ff ff       	call   c00113d0 <EnvVarContainer::~EnvVarContainer()>
c00167b1:	59                   	pop    ecx
c00167b2:	5e                   	pop    esi
c00167b3:	6a 0c                	push   0xc
c00167b5:	55                   	push   ebp
c00167b6:	e8 5d 40 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00167bb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167be:	83 c4 10             	add    esp,0x10
c00167c1:	89 f7                	mov    edi,esi
c00167c3:	90                   	nop
c00167c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167ca:	85 c0                	test   eax,eax
c00167cc:	0f 84 b2 00 00 00    	je     c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167d2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00167d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00167d9:	31 c9                	xor    ecx,ecx
c00167db:	eb 17                	jmp    c00167f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00167dd:	8d 76 00             	lea    esi,[esi+0x0]
c00167e0:	83 c1 01             	add    ecx,0x1
c00167e3:	83 f9 10             	cmp    ecx,0x10
c00167e6:	0f 84 98 00 00 00    	je     c0016884 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167f2:	66 90                	xchg   ax,ax
c00167f4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167fb:	d3 fa                	sar    edx,cl
c00167fd:	80 e2 01             	and    dl,0x1
c0016800:	74 de                	je     c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016802:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016805:	01 d2                	add    edx,edx
c0016807:	01 ca                	add    edx,ecx
c0016809:	8d 14 92             	lea    edx,[edx+edx*4]
c001680c:	01 d0                	add    eax,edx
c001680e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016814:	83 fd 07             	cmp    ebp,0x7
c0016817:	75 c7                	jne    c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016819:	05 40 02 00 00       	add    eax,0x240
c001681e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016821:	83 fd ff             	cmp    ebp,0xffffffff
c0016824:	0f 8c ee 00 00 00    	jl     c0016918 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001682a:	0f 84 ac 01 00 00    	je     c00169dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016830:	85 ed                	test   ebp,ebp
c0016832:	0f 84 90 01 00 00    	je     c00169c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016838:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001683a:	75 a4                	jne    c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001683c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016842:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016846:	01 d0                	add    eax,edx
c0016848:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016855:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016858:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001685e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016865:	50                   	push   eax
c0016866:	e8 0d fe ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016871:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016875:	89 f7                	mov    edi,esi
c0016877:	83 c1 01             	add    ecx,0x1
c001687a:	83 f9 10             	cmp    ecx,0x10
c001687d:	0f 85 69 ff ff ff    	jne    c00167ec <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016883:	90                   	nop
c0016884:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001688a:	85 c0                	test   eax,eax
c001688c:	74 62                	je     c00168f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001688e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016894:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001689a:	74 54                	je     c00168f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168a4:	e8 13 95 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168b0:	89 c7                	mov    edi,eax
c00168b2:	e8 e9 94 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	84 c0                	test   al,al
c00168bc:	0f 84 ce 00 00 00    	je     c0016990 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00168c2:	66 90                	xchg   ax,ax
c00168c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168c7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00168cd:	85 d2                	test   edx,edx
c00168cf:	74 0f                	je     c00168e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00168d1:	83 ec 0c             	sub    esp,0xc
c00168d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00168d6:	52                   	push   edx
c00168d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168da:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168dd:	83 c4 10             	add    esp,0x10
c00168e0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168ed:	8d 76 00             	lea    esi,[esi+0x0]
c00168f0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168f6:	85 db                	test   ebx,ebx
c00168f8:	74 16                	je     c0016910 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168fa:	83 ec 0c             	sub    esp,0xc
c00168fd:	53                   	push   ebx
c00168fe:	e8 af 32 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016903:	58                   	pop    eax
c0016904:	5a                   	pop    edx
c0016905:	6a 14                	push   0x14
c0016907:	53                   	push   ebx
c0016908:	e8 0b 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	83 c4 1c             	add    esp,0x1c
c0016913:	5b                   	pop    ebx
c0016914:	5e                   	pop    esi
c0016915:	5f                   	pop    edi
c0016916:	5d                   	pop    ebp
c0016917:	c3                   	ret    
c0016918:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	68 78 2a 02 c0       	push   0xc0022a78
c0016924:	e8 96 ad ff ff       	call   c00116bf <KePanic(char const*)>
c0016929:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001692c:	83 c4 10             	add    esp,0x10
c001692f:	89 f7                	mov    edi,esi
c0016931:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016935:	e9 a6 fe ff ff       	jmp    c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001693a:	66 90                	xchg   ax,ax
c001693c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016942:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016948:	75 1e                	jne    c0016968 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	68 e0 2a 02 c0       	push   0xc0022ae0
c0016952:	e8 ee 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016957:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001695e:	e8 11 fa ff ff       	call   c0016374 <blockTask(TaskState)>
c0016963:	83 c4 10             	add    esp,0x10
c0016966:	66 90                	xchg   ax,ax
c0016968:	83 ec 08             	sub    esp,0x8
c001696b:	56                   	push   esi
c001696c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016971:	e8 0a 95 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016976:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c001697d:	e8 3a 94 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	39 f8                	cmp    eax,edi
c0016987:	0f 84 37 ff ff ff    	je     c00168c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016998:	e8 1f 94 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169a4:	89 c6                	mov    esi,eax
c00169a6:	e8 19 94 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	39 f3                	cmp    ebx,esi
c00169b0:	74 b6                	je     c0016968 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169b2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169b8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00169be:	75 a8                	jne    c0016968 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169c0:	e9 77 ff ff ff       	jmp    c001693c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00169c5:	8d 76 00             	lea    esi,[esi+0x0]
c00169c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169cc:	83 ec 0c             	sub    esp,0xc
c00169cf:	68 ac 2a 02 c0       	push   0xc0022aac
c00169d4:	e9 4b ff ff ff       	jmp    c0016924 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00169de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169e2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00169e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169e8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169ee:	01 d7                	add    edi,edx
c00169f0:	89 f8                	mov    eax,edi
c00169f2:	e9 51 fe ff ff       	jmp    c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169f7:	90                   	nop

c00169f8 <cleanerTaskFunction(void*)>:
c00169f8:	53                   	push   ebx
c00169f9:	83 ec 08             	sub    esp,0x8
c00169fc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a01:	83 e8 01             	sub    eax,0x1
c0016a04:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a09:	75 01                	jne    c0016a0c <cleanerTaskFunction(void*)+0x14>
c0016a0b:	fb                   	sti    
c0016a0c:	fa                   	cli    
c0016a0d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a12:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a19:	8d 50 01             	lea    edx,[eax+0x1]
c0016a1c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a22:	0f 84 c4 00 00 00    	je     c0016aec <cleanerTaskFunction(void*)+0xf4>
c0016a28:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a2d:	85 c0                	test   eax,eax
c0016a2f:	75 03                	jne    c0016a34 <cleanerTaskFunction(void*)+0x3c>
c0016a31:	fb                   	sti    
c0016a32:	66 90                	xchg   ax,ax
c0016a34:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a3b:	fa                   	cli    
c0016a3c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a42:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a48:	83 c2 01             	add    edx,0x1
c0016a4b:	83 c1 01             	add    ecx,0x1
c0016a4e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a54:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a5a:	fa                   	cli    
c0016a5b:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a61:	83 c3 01             	add    ebx,0x1
c0016a64:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a6a:	eb 28                	jmp    c0016a94 <cleanerTaskFunction(void*)+0x9c>
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a74:	e8 43 93 00 00       	call   c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a79:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a80:	89 c3                	mov    ebx,eax
c0016a82:	e8 3d 93 00 00       	call   c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a8a:	e8 95 fc ff ff       	call   c0016724 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	83 ec 0c             	sub    esp,0xc
c0016a97:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a9c:	e8 ff 92 00 00       	call   c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	84 c0                	test   al,al
c0016aa6:	74 c4                	je     c0016a6c <cleanerTaskFunction(void*)+0x74>
c0016aa8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aad:	83 e8 01             	sub    eax,0x1
c0016ab0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab5:	75 01                	jne    c0016ab8 <cleanerTaskFunction(void*)+0xc0>
c0016ab7:	fb                   	sti    
c0016ab8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016abd:	83 e8 01             	sub    eax,0x1
c0016ac0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ac5:	0f 85 31 ff ff ff    	jne    c00169fc <cleanerTaskFunction(void*)+0x4>
c0016acb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ad0:	85 c0                	test   eax,eax
c0016ad2:	0f 84 24 ff ff ff    	je     c00169fc <cleanerTaskFunction(void*)+0x4>
c0016ad8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ae2:	e8 79 f6 ff ff       	call   c0016160 <schedule()>
c0016ae7:	e9 10 ff ff ff       	jmp    c00169fc <cleanerTaskFunction(void*)+0x4>
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	6a 02                	push   0x2
c0016af1:	e8 56 f8 ff ff       	call   c001634c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016af6:	83 c4 10             	add    esp,0x10
c0016af9:	e9 36 ff ff ff       	jmp    c0016a34 <cleanerTaskFunction(void*)+0x3c>
c0016afe:	66 90                	xchg   ax,ax

c0016b00 <terminateTask(int)>:
c0016b00:	83 ec 14             	sub    esp,0x14
c0016b03:	fa                   	cli    
c0016b04:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b0a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b10:	83 c2 01             	add    edx,0x1
c0016b13:	83 c1 01             	add    ecx,0x1
c0016b16:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b1c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b22:	fa                   	cli    
c0016b23:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b2c:	83 c0 01             	add    eax,0x1
c0016b2f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b39:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b41:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b44:	50                   	push   eax
c0016b45:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b4a:	e8 31 93 00 00       	call   c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b54:	83 c4 10             	add    esp,0x10
c0016b57:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b5e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b63:	85 c0                	test   eax,eax
c0016b65:	74 65                	je     c0016bcc <terminateTask(int)+0xcc>
c0016b67:	83 ec 0c             	sub    esp,0xc
c0016b6a:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b71:	50                   	push   eax
c0016b72:	e8 01 fb ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	66 90                	xchg   ax,ax
c0016b7c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b81:	83 e8 01             	sub    eax,0x1
c0016b84:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b89:	75 01                	jne    c0016b8c <terminateTask(int)+0x8c>
c0016b8b:	fb                   	sti    
c0016b8c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b91:	83 e8 01             	sub    eax,0x1
c0016b94:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b99:	75 09                	jne    c0016ba4 <terminateTask(int)+0xa4>
c0016b9b:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016ba2:	75 3c                	jne    c0016be0 <terminateTask(int)+0xe0>
c0016ba4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ba9:	83 e8 01             	sub    eax,0x1
c0016bac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb1:	75 01                	jne    c0016bb4 <terminateTask(int)+0xb4>
c0016bb3:	fb                   	sti    
c0016bb4:	fa                   	cli    
c0016bb5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bba:	83 c0 01             	add    eax,0x1
c0016bbd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bc2:	66 90                	xchg   ax,ax
c0016bc4:	e8 97 f5 ff ff       	call   c0016160 <schedule()>
c0016bc9:	eb d9                	jmp    c0016ba4 <terminateTask(int)+0xa4>
c0016bcb:	90                   	nop
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	68 da 29 02 c0       	push   0xc00229da
c0016bd4:	e8 6c 3d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	eb 9e                	jmp    c0016b7c <terminateTask(int)+0x7c>
c0016bde:	66 90                	xchg   ax,ax
c0016be0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bea:	eb d8                	jmp    c0016bc4 <terminateTask(int)+0xc4>

c0016bec <Thr::terminateFromIRQ(int)>:
c0016bec:	83 ec 18             	sub    esp,0x18
c0016bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf3:	50                   	push   eax
c0016bf4:	e8 07 ff ff ff       	call   c0016b00 <terminateTask(int)>
c0016bf9:	90                   	nop
c0016bfa:	66 90                	xchg   ax,ax

c0016bfc <Semaphore::release()>:
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c03:	fa                   	cli    
c0016c04:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c09:	83 c0 01             	add    eax,0x1
c0016c0c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c11:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c16:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c19:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c1f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c22:	85 c9                	test   ecx,ecx
c0016c24:	74 42                	je     c0016c68 <Semaphore::release()+0x6c>
c0016c26:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c2f:	51                   	push   ecx
c0016c30:	e8 43 fa ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c0016c35:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c3a:	83 c4 10             	add    esp,0x10
c0016c3d:	83 e8 01             	sub    eax,0x1
c0016c40:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c45:	85 c0                	test   eax,eax
c0016c47:	75 0b                	jne    c0016c54 <Semaphore::release()+0x58>
c0016c49:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c4e:	85 c0                	test   eax,eax
c0016c50:	75 22                	jne    c0016c74 <Semaphore::release()+0x78>
c0016c52:	66 90                	xchg   ax,ax
c0016c54:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c59:	83 e8 01             	sub    eax,0x1
c0016c5c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c61:	75 01                	jne    c0016c64 <Semaphore::release()+0x68>
c0016c63:	fb                   	sti    
c0016c64:	83 c4 0c             	add    esp,0xc
c0016c67:	c3                   	ret    
c0016c68:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c6b:	83 e9 01             	sub    ecx,0x1
c0016c6e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c71:	eb cd                	jmp    c0016c40 <Semaphore::release()+0x44>
c0016c73:	90                   	nop
c0016c74:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c7e:	e8 dd f4 ff ff       	call   c0016160 <schedule()>
c0016c83:	eb cf                	jmp    c0016c54 <Semaphore::release()+0x58>
c0016c85:	8d 76 00             	lea    esi,[esi+0x0]

c0016c88 <__static_initialization_and_destruction_0(int, int)>:
c0016c88:	83 ec 0c             	sub    esp,0xc
c0016c8b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c90:	0f 85 8e 00 00 00    	jne    c0016d24 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c96:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016c9e:	0f 85 80 00 00 00    	jne    c0016d24 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cac:	e8 83 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 04             	sub    esp,0x4
c0016cb7:	68 b0 36 02 c0       	push   0xc00236b0
c0016cbc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cc1:	68 e4 00 02 c0       	push   0xc00200e4
c0016cc6:	e8 fd 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cd6:	e8 59 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	83 ec 04             	sub    esp,0x4
c0016ce1:	68 b0 36 02 c0       	push   0xc00236b0
c0016ce6:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016ceb:	68 e4 00 02 c0       	push   0xc00200e4
c0016cf0:	e8 d3 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	83 ec 0c             	sub    esp,0xc
c0016cfb:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d00:	e8 2f 94 00 00       	call   c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d05:	83 c4 10             	add    esp,0x10
c0016d08:	83 ec 04             	sub    esp,0x4
c0016d0b:	68 b0 36 02 c0       	push   0xc00236b0
c0016d10:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d15:	68 e4 00 02 c0       	push   0xc00200e4
c0016d1a:	e8 a9 3a ff ff       	call   c000a7c8 <__cxa_atexit>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	66 90                	xchg   ax,ax
c0016d24:	90                   	nop
c0016d25:	83 c4 0c             	add    esp,0xc
c0016d28:	c3                   	ret    
c0016d29:	8d 76 00             	lea    esi,[esi+0x0]

c0016d2c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	83 ec 08             	sub    esp,0x8
c0016d32:	68 ff ff 00 00       	push   0xffff
c0016d37:	6a 01                	push   0x1
c0016d39:	e8 4a ff ff ff       	call   c0016c88 <__static_initialization_and_destruction_0(int, int)>
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	83 c4 0c             	add    esp,0xc
c0016d44:	c3                   	ret    

c0016d45 <Vm::inbv(unsigned short)>:
c0016d45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d49:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d4e:	75 06                	jne    c0016d56 <Vm::inbv(unsigned short)+0x11>
c0016d50:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d55:	c3                   	ret    
c0016d56:	ec                   	in     al,dx
c0016d57:	c3                   	ret    

c0016d58 <Vm::outbv(unsigned short, unsigned char)>:
c0016d58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d60:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d65:	75 25                	jne    c0016d8c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d67:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d6d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d70:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d76:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d7c:	83 fa 20             	cmp    edx,0x20
c0016d7f:	75 0c                	jne    c0016d8d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d81:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d8b:	c3                   	ret    
c0016d8c:	ee                   	out    dx,al
c0016d8d:	c3                   	ret    

c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d8e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d93:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d98:	c1 e0 04             	shl    eax,0x4
c0016d9b:	01 d0                	add    eax,edx
c0016d9d:	c3                   	ret    

c0016d9e <Vm::getSegment(unsigned int)>:
c0016d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016da2:	c1 e8 10             	shr    eax,0x10
c0016da5:	c3                   	ret    

c0016da6 <Vm::getOffset(unsigned int)>:
c0016da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016daa:	c3                   	ret    

c0016dab <Vm::mainloop2()>:
c0016dab:	83 ec 18             	sub    esp,0x18
c0016dae:	fa                   	cli    
c0016daf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016db5:	6a 02                	push   0x2
c0016db7:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016dbe:	e8 89 f5 ff ff       	call   c001634c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016dcc:	52                   	push   edx
c0016dcd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016dd1:	52                   	push   edx
c0016dd2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016dd6:	52                   	push   edx
c0016dd7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ddb:	50                   	push   eax
c0016ddc:	e8 2e 94 fe ff       	call   c000020f <goToVM86>
c0016de1:	83 c4 2c             	add    esp,0x2c
c0016de4:	c3                   	ret    

c0016de5 <Vm::mainVm8086Loop(void*)>:
c0016de5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dea:	48                   	dec    eax
c0016deb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016df0:	75 01                	jne    c0016df3 <Vm::mainVm8086Loop(void*)+0xe>
c0016df2:	fb                   	sti    
c0016df3:	eb b6                	jmp    c0016dab <Vm::mainloop2()>

c0016df5 <Vm::mainloop3(unsigned long)>:
c0016df5:	83 ec 18             	sub    esp,0x18
c0016df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dfc:	fa                   	cli    
c0016dfd:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e03:	6a 02                	push   0x2
c0016e05:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e0c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e11:	e8 36 f5 ff ff       	call   c001634c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e16:	83 c4 1c             	add    esp,0x1c
c0016e19:	eb 90                	jmp    c0016dab <Vm::mainloop2()>

c0016e1b <Vm::initialise8086()>:
c0016e1b:	83 ec 0c             	sub    esp,0xc
c0016e1e:	68 80 00 00 00       	push   0x80
c0016e23:	6a 00                	push   0x0
c0016e25:	68 e5 6d 01 c0       	push   0xc0016de5
c0016e2a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e30:	e8 db f0 ff ff       	call   c0015f10 <Process::createThread(void (*)(void*), void*, int)>
c0016e35:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e3c:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e41:	68 00 01 00 00       	push   0x100
c0016e46:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e4b:	6a 00                	push   0x0
c0016e4d:	6a 00                	push   0x0
c0016e4f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e55:	e8 c0 30 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e5a:	83 c4 2c             	add    esp,0x2c
c0016e5d:	c3                   	ret    

c0016e5e <Vm::finish8086()>:
c0016e5e:	53                   	push   ebx
c0016e5f:	83 ec 08             	sub    esp,0x8
c0016e62:	fa                   	cli    
c0016e63:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e69:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e70:	75 15                	jne    c0016e87 <Vm::finish8086()+0x29>
c0016e72:	e8 e9 f2 ff ff       	call   c0016160 <schedule()>
c0016e77:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e7c:	48                   	dec    eax
c0016e7d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e82:	75 de                	jne    c0016e62 <Vm::finish8086()+0x4>
c0016e84:	fb                   	sti    
c0016e85:	eb db                	jmp    c0016e62 <Vm::finish8086()+0x4>
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e90:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016e96:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e9d:	e8 d6 f7 ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c0016ea2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ea7:	83 c4 10             	add    esp,0x10
c0016eaa:	8d 50 ff             	lea    edx,[eax-0x1]
c0016ead:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016eb3:	85 d2                	test   edx,edx
c0016eb5:	75 01                	jne    c0016eb8 <Vm::finish8086()+0x5a>
c0016eb7:	fb                   	sti    
c0016eb8:	89 d8                	mov    eax,ebx
c0016eba:	83 c4 08             	add    esp,0x8
c0016ebd:	5b                   	pop    ebx
c0016ebe:	c3                   	ret    

c0016ebf <Vm::getOutput8086(unsigned char*)>:
c0016ebf:	57                   	push   edi
c0016ec0:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016ec6:	56                   	push   esi
c0016ec7:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016ecc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016ed0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed2:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016ed7:	5e                   	pop    esi
c0016ed8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ee2:	5f                   	pop    edi
c0016ee3:	c3                   	ret    

c0016ee4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ee4:	55                   	push   ebp
c0016ee5:	57                   	push   edi
c0016ee6:	56                   	push   esi
c0016ee7:	53                   	push   ebx
c0016ee8:	83 ec 0c             	sub    esp,0xc
c0016eeb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016eef:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016ef3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ef7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016efb:	fa                   	cli    
c0016efc:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f02:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f09:	75 15                	jne    c0016f20 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f0b:	e8 50 f2 ff ff       	call   c0016160 <schedule()>
c0016f10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f15:	48                   	dec    eax
c0016f16:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f1b:	75 de                	jne    c0016efb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f1d:	fb                   	sti    
c0016f1e:	eb db                	jmp    c0016efb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f20:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f25:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f2f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f33:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f37:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f3b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f3f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f43:	0f b7 ff             	movzx  edi,di
c0016f46:	0f b7 f6             	movzx  esi,si
c0016f49:	50                   	push   eax
c0016f4a:	6a 20                	push   0x20
c0016f4c:	6a 00                	push   0x0
c0016f4e:	68 40 c7 02 c0       	push   0xc002c740
c0016f53:	e8 98 95 fe ff       	call   c00004f0 <memset>
c0016f58:	5a                   	pop    edx
c0016f59:	59                   	pop    ecx
c0016f5a:	57                   	push   edi
c0016f5b:	56                   	push   esi
c0016f5c:	e8 2d fe ff ff       	call   c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	89 c7                	mov    edi,eax
c0016f66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f70:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f75:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f7c:	48                   	dec    eax
c0016f7d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f82:	75 01                	jne    c0016f85 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f84:	fb                   	sti    
c0016f85:	83 ec 0c             	sub    esp,0xc
c0016f88:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f8e:	e8 e5 f6 ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c0016f93:	83 c4 1c             	add    esp,0x1c
c0016f96:	b0 01                	mov    al,0x1
c0016f98:	5b                   	pop    ebx
c0016f99:	5e                   	pop    esi
c0016f9a:	5f                   	pop    edi
c0016f9b:	5d                   	pop    ebp
c0016f9c:	c3                   	ret    

c0016f9d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016f9d:	55                   	push   ebp
c0016f9e:	57                   	push   edi
c0016f9f:	56                   	push   esi
c0016fa0:	53                   	push   ebx
c0016fa1:	83 ec 34             	sub    esp,0x34
c0016fa4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016fa8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016fac:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016fb0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016fb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fbc:	68 08 2b 02 c0       	push   0xc0022b08
c0016fc1:	e8 7f 39 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016fc6:	83 c4 10             	add    esp,0x10
c0016fc9:	fa                   	cli    
c0016fca:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016fd0:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016fd6:	84 db                	test   bl,bl
c0016fd8:	75 15                	jne    c0016fef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016fda:	e8 81 f1 ff ff       	call   c0016160 <schedule()>
c0016fdf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe4:	48                   	dec    eax
c0016fe5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fea:	75 dd                	jne    c0016fc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fec:	fb                   	sti    
c0016fed:	eb da                	jmp    c0016fc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ff3:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016ff8:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0017002:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017006:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001700a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001700e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0017012:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017016:	50                   	push   eax
c0017017:	6a 20                	push   0x20
c0017019:	6a 00                	push   0x0
c001701b:	68 40 c7 02 c0       	push   0xc002c740
c0017020:	e8 cb 94 fe ff       	call   c00004f0 <memset>
c0017025:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001702c:	e8 85 0a ff ff       	call   c0007ab6 <malloc>
c0017031:	83 c4 0c             	add    esp,0xc
c0017034:	89 c5                	mov    ebp,eax
c0017036:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001703c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017040:	50                   	push   eax
c0017041:	e8 a8 4b ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	85 ed                	test   ebp,ebp
c001704b:	75 0a                	jne    c0017057 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c001704d:	83 ec 0c             	sub    esp,0xc
c0017050:	68 2a 2b 02 c0       	push   0xc0022b2a
c0017055:	eb 2b                	jmp    c0017082 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0017057:	50                   	push   eax
c0017058:	8d 44 24 17          	lea    eax,[esp+0x17]
c001705c:	50                   	push   eax
c001705d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017061:	50                   	push   eax
c0017062:	55                   	push   ebp
c0017063:	e8 a6 4e ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0017068:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001706c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017070:	83 c4 10             	add    esp,0x10
c0017073:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017078:	74 27                	je     c00170a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001707a:	83 ec 0c             	sub    esp,0xc
c001707d:	68 3e 2b 02 c0       	push   0xc0022b3e
c0017082:	e8 38 a6 ff ff       	call   c00116bf <KePanic(char const*)>
c0017087:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001708c:	83 c4 10             	add    esp,0x10
c001708f:	48                   	dec    eax
c0017090:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017095:	85 c0                	test   eax,eax
c0017097:	75 01                	jne    c001709a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017099:	fb                   	sti    
c001709a:	31 db                	xor    ebx,ebx
c001709c:	e9 90 00 00 00       	jmp    c0017131 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170a1:	51                   	push   ecx
c00170a2:	51                   	push   ecx
c00170a3:	6a 01                	push   0x1
c00170a5:	55                   	push   ebp
c00170a6:	e8 61 4b ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	85 c0                	test   eax,eax
c00170b0:	74 26                	je     c00170d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170b2:	83 ec 0c             	sub    esp,0xc
c00170b5:	68 57 2b 02 c0       	push   0xc0022b57
c00170ba:	e8 00 a6 ff ff       	call   c00116bf <KePanic(char const*)>
c00170bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	48                   	dec    eax
c00170c8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170cd:	85 c0                	test   eax,eax
c00170cf:	75 c9                	jne    c001709a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170d1:	fb                   	sti    
c00170d2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170d6:	eb 59                	jmp    c0017131 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170d8:	0f b7 ff             	movzx  edi,di
c00170db:	50                   	push   eax
c00170dc:	0f b7 f6             	movzx  esi,si
c00170df:	50                   	push   eax
c00170e0:	57                   	push   edi
c00170e1:	56                   	push   esi
c00170e2:	e8 a7 fc ff ff       	call   c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>
c00170e7:	5a                   	pop    edx
c00170e8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00170eb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00170ef:	51                   	push   ecx
c00170f0:	50                   	push   eax
c00170f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170f9:	55                   	push   ebp
c00170fa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00170fd:	83 c4 14             	add    esp,0x14
c0017100:	55                   	push   ebp
c0017101:	e8 64 4b ff ff       	call   c000bc6a <File::close()>
c0017106:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	48                   	dec    eax
c001710f:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017116:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001711b:	85 c0                	test   eax,eax
c001711d:	75 01                	jne    c0017120 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001711f:	fb                   	sti    
c0017120:	83 ec 0c             	sub    esp,0xc
c0017123:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017129:	e8 4a f5 ff ff       	call   c0016678 <unblockTask(ThreadControlBlock*)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	83 c4 2c             	add    esp,0x2c
c0017134:	88 d8                	mov    al,bl
c0017136:	5b                   	pop    ebx
c0017137:	5e                   	pop    esi
c0017138:	5f                   	pop    edi
c0017139:	5d                   	pop    ebp
c001713a:	c3                   	ret    

c001713b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001713b:	57                   	push   edi
c001713c:	56                   	push   esi
c001713d:	53                   	push   ebx
c001713e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017146:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001714a:	83 e8 06             	sub    eax,0x6
c001714d:	0f b7 c0             	movzx  eax,ax
c0017150:	50                   	push   eax
c0017151:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017156:	50                   	push   eax
c0017157:	e8 32 fc ff ff       	call   c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>
c001715c:	5a                   	pop    edx
c001715d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017160:	59                   	pop    ecx
c0017161:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017164:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017167:	81 e2 ff ff 00 00    	and    edx,0xffff
c001716d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017170:	8d 56 02             	lea    edx,[esi+0x2]
c0017173:	66 89 10             	mov    WORD PTR [eax],dx
c0017176:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001717a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001717e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017181:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017185:	0f b6 f1             	movzx  esi,cl
c0017188:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001718c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017192:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017196:	0f b6 d5             	movzx  edx,ch
c0017199:	74 0a                	je     c00171a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001719b:	c1 e2 08             	shl    edx,0x8
c001719e:	09 f2                	or     edx,esi
c00171a0:	80 ce 02             	or     dh,0x2
c00171a3:	eb 08                	jmp    c00171ad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00171a5:	c1 e2 08             	shl    edx,0x8
c00171a8:	09 f2                	or     edx,esi
c00171aa:	80 e6 fd             	and    dh,0xfd
c00171ad:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171b6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171ba:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171c2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171c5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171cd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171d0:	5b                   	pop    ebx
c00171d1:	5e                   	pop    esi
c00171d2:	5f                   	pop    edi
c00171d3:	c3                   	ret    

c00171d4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171d9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171de:	c1 e0 04             	shl    eax,0x4
c00171e1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00171e4:	c3                   	ret    

c00171e5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00171e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171ea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171ef:	c1 e0 04             	shl    eax,0x4
c00171f2:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171f6:	c3                   	ret    

c00171f7 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017201:	c1 e0 04             	shl    eax,0x4
c0017204:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017207:	c3                   	ret    

c0017208 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017208:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001720d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017212:	c1 e0 04             	shl    eax,0x4
c0017215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017219:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001721c:	c3                   	ret    

c001721d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001721d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017222:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017227:	c1 e0 04             	shl    eax,0x4
c001722a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001722e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017232:	c3                   	ret    

c0017233 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017233:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017238:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001723d:	c1 e0 04             	shl    eax,0x4
c0017240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017244:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017247:	c3                   	ret    

c0017248 <Vm::faultHandler(regs*)>:
c0017248:	55                   	push   ebp
c0017249:	57                   	push   edi
c001724a:	56                   	push   esi
c001724b:	53                   	push   ebx
c001724c:	83 ec 2c             	sub    esp,0x2c
c001724f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017253:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017256:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001725a:	0f b7 f8             	movzx  edi,ax
c001725d:	52                   	push   edx
c001725e:	0f b7 c0             	movzx  eax,ax
c0017261:	50                   	push   eax
c0017262:	e8 27 fb ff ff       	call   c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>
c0017267:	5a                   	pop    edx
c0017268:	59                   	pop    ecx
c0017269:	89 c1                	mov    ecx,eax
c001726b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001726e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017272:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001727b:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001727e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017282:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017287:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001728b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001728f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017293:	e8 f6 fa ff ff       	call   c0016d8e <Vm::realToLinear(unsigned short, unsigned short)>
c0017298:	5e                   	pop    esi
c0017299:	be 06 00 00 00       	mov    esi,0x6
c001729e:	5d                   	pop    ebp
c001729f:	31 ed                	xor    ebp,ebp
c00172a1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172a6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172a9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172af:	0f 84 74 02 00 00    	je     c0017529 <Vm::faultHandler(regs*)+0x2e1>
c00172b5:	0f 87 94 00 00 00    	ja     c001734f <Vm::faultHandler(regs*)+0x107>
c00172bb:	83 fa 66             	cmp    edx,0x66
c00172be:	0f 84 e2 01 00 00    	je     c00174a6 <Vm::faultHandler(regs*)+0x25e>
c00172c4:	77 47                	ja     c001730d <Vm::faultHandler(regs*)+0xc5>
c00172c6:	83 fa 36             	cmp    edx,0x36
c00172c9:	0f 84 ca 01 00 00    	je     c0017499 <Vm::faultHandler(regs*)+0x251>
c00172cf:	77 1a                	ja     c00172eb <Vm::faultHandler(regs*)+0xa3>
c00172d1:	83 fa 26             	cmp    edx,0x26
c00172d4:	0f 84 98 01 00 00    	je     c0017472 <Vm::faultHandler(regs*)+0x22a>
c00172da:	83 fa 2e             	cmp    edx,0x2e
c00172dd:	0f 85 21 06 00 00    	jne    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c00172e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172e6:	31 f6                	xor    esi,esi
c00172e8:	41                   	inc    ecx
c00172e9:	eb bb                	jmp    c00172a6 <Vm::faultHandler(regs*)+0x5e>
c00172eb:	83 fa 64             	cmp    edx,0x64
c00172ee:	0f 84 8b 01 00 00    	je     c001747f <Vm::faultHandler(regs*)+0x237>
c00172f4:	0f 87 92 01 00 00    	ja     c001748c <Vm::faultHandler(regs*)+0x244>
c00172fa:	83 fa 3e             	cmp    edx,0x3e
c00172fd:	0f 85 01 06 00 00    	jne    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c0017303:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017306:	be 01 00 00 00       	mov    esi,0x1
c001730b:	eb db                	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c001730d:	83 fa 6d             	cmp    edx,0x6d
c0017310:	0f 84 34 03 00 00    	je     c001764a <Vm::faultHandler(regs*)+0x402>
c0017316:	77 17                	ja     c001732f <Vm::faultHandler(regs*)+0xe7>
c0017318:	83 fa 67             	cmp    edx,0x67
c001731b:	0f 84 92 01 00 00    	je     c00174b3 <Vm::faultHandler(regs*)+0x26b>
c0017321:	83 fa 6c             	cmp    edx,0x6c
c0017324:	0f 84 b1 02 00 00    	je     c00175db <Vm::faultHandler(regs*)+0x393>
c001732a:	e9 d5 05 00 00       	jmp    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c001732f:	83 fa 6f             	cmp    edx,0x6f
c0017332:	0f 84 3d 04 00 00    	je     c0017775 <Vm::faultHandler(regs*)+0x52d>
c0017338:	0f 82 9f 03 00 00    	jb     c00176dd <Vm::faultHandler(regs*)+0x495>
c001733e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017344:	0f 84 76 01 00 00    	je     c00174c0 <Vm::faultHandler(regs*)+0x278>
c001734a:	e9 b5 05 00 00       	jmp    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c001734f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017355:	0f 84 51 05 00 00    	je     c00178ac <Vm::faultHandler(regs*)+0x664>
c001735b:	0f 87 a9 00 00 00    	ja     c001740a <Vm::faultHandler(regs*)+0x1c2>
c0017361:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017367:	0f 84 d0 04 00 00    	je     c001783d <Vm::faultHandler(regs*)+0x5f5>
c001736d:	77 78                	ja     c00173e7 <Vm::faultHandler(regs*)+0x19f>
c001736f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017375:	0f 84 0e 02 00 00    	je     c0017589 <Vm::faultHandler(regs*)+0x341>
c001737b:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017381:	0f 85 7d 05 00 00    	jne    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c0017387:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001738b:	89 d1                	mov    ecx,edx
c001738d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017390:	c1 e1 08             	shl    ecx,0x8
c0017393:	09 ca                	or     edx,ecx
c0017395:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017398:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001739c:	89 d1                	mov    ecx,edx
c001739e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173a2:	c1 e1 08             	shl    ecx,0x8
c00173a5:	09 ca                	or     edx,ecx
c00173a7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173aa:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173ae:	89 d1                	mov    ecx,edx
c00173b0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173b4:	c1 e1 08             	shl    ecx,0x8
c00173b7:	09 ca                	or     edx,ecx
c00173b9:	81 ca 00 02 02 00    	or     edx,0x20200
c00173bf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173c2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173cc:	d1 e8                	shr    eax,1
c00173ce:	83 e0 01             	and    eax,0x1
c00173d1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173d4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173d7:	83 c0 06             	add    eax,0x6
c00173da:	25 ff ff 00 00       	and    eax,0xffff
c00173df:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173e2:	e9 19 05 00 00       	jmp    c0017900 <Vm::faultHandler(regs*)+0x6b8>
c00173e7:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173ed:	0f 84 8f 04 00 00    	je     c0017882 <Vm::faultHandler(regs*)+0x63a>
c00173f3:	0f 82 60 04 00 00    	jb     c0017859 <Vm::faultHandler(regs*)+0x611>
c00173f9:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173ff:	0f 84 94 04 00 00    	je     c0017899 <Vm::faultHandler(regs*)+0x651>
c0017405:	e9 fa 04 00 00       	jmp    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c001740a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017410:	0f 84 d7 04 00 00    	je     c00178ed <Vm::faultHandler(regs*)+0x6a5>
c0017416:	77 2e                	ja     c0017446 <Vm::faultHandler(regs*)+0x1fe>
c0017418:	81 fa ed 00 00 00    	cmp    edx,0xed
c001741e:	0f 84 a4 04 00 00    	je     c00178c8 <Vm::faultHandler(regs*)+0x680>
c0017424:	81 fa ee 00 00 00    	cmp    edx,0xee
c001742a:	0f 85 d4 04 00 00    	jne    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c0017430:	50                   	push   eax
c0017431:	50                   	push   eax
c0017432:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017436:	50                   	push   eax
c0017437:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001743b:	50                   	push   eax
c001743c:	e8 17 f9 ff ff       	call   c0016d58 <Vm::outbv(unsigned short, unsigned char)>
c0017441:	e9 9f 04 00 00       	jmp    c00178e5 <Vm::faultHandler(regs*)+0x69d>
c0017446:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001744c:	0f 84 6d 01 00 00    	je     c00175bf <Vm::faultHandler(regs*)+0x377>
c0017452:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017458:	0f 84 6f 01 00 00    	je     c00175cd <Vm::faultHandler(regs*)+0x385>
c001745e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017464:	0f 85 9a 04 00 00    	jne    c0017904 <Vm::faultHandler(regs*)+0x6bc>
c001746a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001746d:	e9 76 fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c0017472:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017475:	be 02 00 00 00       	mov    esi,0x2
c001747a:	e9 69 fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c001747f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017482:	be 03 00 00 00       	mov    esi,0x3
c0017487:	e9 5c fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c001748c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001748f:	be 04 00 00 00       	mov    esi,0x4
c0017494:	e9 4f fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c0017499:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001749c:	be 05 00 00 00       	mov    esi,0x5
c00174a1:	e9 42 fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c00174a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174a9:	bd 01 00 00 00       	mov    ebp,0x1
c00174ae:	e9 35 fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c00174b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174bb:	e9 28 fe ff ff       	jmp    c00172e8 <Vm::faultHandler(regs*)+0xa0>
c00174c0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174c7:	83 e5 01             	and    ebp,0x1
c00174ca:	74 30                	je     c00174fc <Vm::faultHandler(regs*)+0x2b4>
c00174cc:	83 e9 04             	sub    ecx,0x4
c00174cf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174d5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174db:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174de:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174e1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174e7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174eb:	0f 84 0c 04 00 00    	je     c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00174f1:	80 ce 02             	or     dh,0x2
c00174f4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174f7:	e9 01 04 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00174fc:	83 e9 02             	sub    ecx,0x2
c00174ff:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017505:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017508:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001750c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017512:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017516:	74 05                	je     c001751d <Vm::faultHandler(regs*)+0x2d5>
c0017518:	80 ce 02             	or     dh,0x2
c001751b:	eb 03                	jmp    c0017520 <Vm::faultHandler(regs*)+0x2d8>
c001751d:	80 e6 fd             	and    dh,0xfd
c0017520:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017524:	e9 d4 03 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c0017529:	83 e5 01             	and    ebp,0x1
c001752c:	74 2a                	je     c0017558 <Vm::faultHandler(regs*)+0x310>
c001752e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017530:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017536:	81 ca 00 02 02 00    	or     edx,0x20200
c001753c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001753f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017541:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017547:	c1 e8 09             	shr    eax,0x9
c001754a:	83 e0 01             	and    eax,0x1
c001754d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017550:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017553:	83 c0 04             	add    eax,0x4
c0017556:	eb 24                	jmp    c001757c <Vm::faultHandler(regs*)+0x334>
c0017558:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001755b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017561:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017564:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017567:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001756d:	c1 e8 09             	shr    eax,0x9
c0017570:	83 e0 01             	and    eax,0x1
c0017573:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017576:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017579:	83 c0 02             	add    eax,0x2
c001757c:	25 ff ff 00 00       	and    eax,0xffff
c0017581:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017584:	e9 74 03 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c0017589:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001758d:	3d ee 00 00 00       	cmp    eax,0xee
c0017592:	75 10                	jne    c00175a4 <Vm::faultHandler(regs*)+0x35c>
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001759a:	e8 56 f8 ff ff       	call   c0016df5 <Vm::mainloop3(unsigned long)>
c001759f:	e9 44 03 00 00       	jmp    c00178e8 <Vm::faultHandler(regs*)+0x6a0>
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175af:	51                   	push   ecx
c00175b0:	50                   	push   eax
c00175b1:	53                   	push   ebx
c00175b2:	e8 84 fb ff ff       	call   c001713b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175b7:	83 c4 20             	add    esp,0x20
c00175ba:	e9 41 03 00 00       	jmp    c0017900 <Vm::faultHandler(regs*)+0x6b8>
c00175bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175c4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175c8:	e9 30 03 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00175cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175d2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175d6:	e9 22 03 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00175db:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175de:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175e3:	74 2b                	je     c0017610 <Vm::faultHandler(regs*)+0x3c8>
c00175e5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175ec:	76 22                	jbe    c0017610 <Vm::faultHandler(regs*)+0x3c8>
c00175ee:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175f2:	50                   	push   eax
c00175f3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175f7:	50                   	push   eax
c00175f8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175fc:	50                   	push   eax
c00175fd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017601:	50                   	push   eax
c0017602:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017606:	50                   	push   eax
c0017607:	6a 6c                	push   0x6c
c0017609:	6a 6c                	push   0x6c
c001760b:	e9 bd 01 00 00       	jmp    c00177cd <Vm::faultHandler(regs*)+0x585>
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017617:	0f b7 f6             	movzx  esi,si
c001761a:	50                   	push   eax
c001761b:	e8 25 f7 ff ff       	call   c0016d45 <Vm::inbv(unsigned short)>
c0017620:	83 c4 0c             	add    esp,0xc
c0017623:	0f b6 c0             	movzx  eax,al
c0017626:	50                   	push   eax
c0017627:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001762b:	50                   	push   eax
c001762c:	56                   	push   esi
c001762d:	e8 d6 fb ff ff       	call   c0017208 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017638:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001763c:	74 03                	je     c0017641 <Vm::faultHandler(regs*)+0x3f9>
c001763e:	48                   	dec    eax
c001763f:	eb 01                	jmp    c0017642 <Vm::faultHandler(regs*)+0x3fa>
c0017641:	40                   	inc    eax
c0017642:	0f b7 c0             	movzx  eax,ax
c0017645:	e9 8b 00 00 00       	jmp    c00176d5 <Vm::faultHandler(regs*)+0x48d>
c001764a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001764d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017650:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017655:	74 29                	je     c0017680 <Vm::faultHandler(regs*)+0x438>
c0017657:	3d ff ff 00 00       	cmp    eax,0xffff
c001765c:	76 22                	jbe    c0017680 <Vm::faultHandler(regs*)+0x438>
c001765e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017662:	50                   	push   eax
c0017663:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017667:	50                   	push   eax
c0017668:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001766c:	50                   	push   eax
c001766d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017671:	50                   	push   eax
c0017672:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017676:	50                   	push   eax
c0017677:	6a 6d                	push   0x6d
c0017679:	6a 6d                	push   0x6d
c001767b:	e9 4d 01 00 00       	jmp    c00177cd <Vm::faultHandler(regs*)+0x585>
c0017680:	0f b7 c8             	movzx  ecx,ax
c0017683:	0f b7 f6             	movzx  esi,si
c0017686:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017689:	83 e5 01             	and    ebp,0x1
c001768c:	74 20                	je     c00176ae <Vm::faultHandler(regs*)+0x466>
c001768e:	ed                   	in     eax,dx
c001768f:	55                   	push   ebp
c0017690:	50                   	push   eax
c0017691:	51                   	push   ecx
c0017692:	56                   	push   esi
c0017693:	e8 9b fb ff ff       	call   c0017233 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017698:	83 c4 10             	add    esp,0x10
c001769b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001769e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176a2:	74 05                	je     c00176a9 <Vm::faultHandler(regs*)+0x461>
c00176a4:	83 e8 04             	sub    eax,0x4
c00176a7:	eb 27                	jmp    c00176d0 <Vm::faultHandler(regs*)+0x488>
c00176a9:	83 c0 04             	add    eax,0x4
c00176ac:	eb 22                	jmp    c00176d0 <Vm::faultHandler(regs*)+0x488>
c00176ae:	66 ed                	in     ax,dx
c00176b0:	0f b7 c0             	movzx  eax,ax
c00176b3:	57                   	push   edi
c00176b4:	50                   	push   eax
c00176b5:	51                   	push   ecx
c00176b6:	56                   	push   esi
c00176b7:	e8 61 fb ff ff       	call   c001721d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176bc:	83 c4 10             	add    esp,0x10
c00176bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176c2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176c6:	74 05                	je     c00176cd <Vm::faultHandler(regs*)+0x485>
c00176c8:	83 e8 02             	sub    eax,0x2
c00176cb:	eb 03                	jmp    c00176d0 <Vm::faultHandler(regs*)+0x488>
c00176cd:	83 c0 02             	add    eax,0x2
c00176d0:	25 ff ff 00 00       	and    eax,0xffff
c00176d5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176d8:	e9 20 02 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00176dd:	8d 46 ff             	lea    eax,[esi-0x1]
c00176e0:	0f b6 f0             	movzx  esi,al
c00176e3:	83 fe 05             	cmp    esi,0x5
c00176e6:	77 23                	ja     c001770b <Vm::faultHandler(regs*)+0x4c3>
c00176e8:	ff 24 b5 cc 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd434]
c00176ef:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176f4:	eb 15                	jmp    c001770b <Vm::faultHandler(regs*)+0x4c3>
c00176f6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176fa:	eb 0f                	jmp    c001770b <Vm::faultHandler(regs*)+0x4c3>
c00176fc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017700:	eb 09                	jmp    c001770b <Vm::faultHandler(regs*)+0x4c3>
c0017702:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017706:	eb 03                	jmp    c001770b <Vm::faultHandler(regs*)+0x4c3>
c0017708:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001770b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001770e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017713:	74 29                	je     c001773e <Vm::faultHandler(regs*)+0x4f6>
c0017715:	3d ff ff 00 00       	cmp    eax,0xffff
c001771a:	76 22                	jbe    c001773e <Vm::faultHandler(regs*)+0x4f6>
c001771c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017720:	50                   	push   eax
c0017721:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017725:	50                   	push   eax
c0017726:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001772a:	50                   	push   eax
c001772b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001772f:	50                   	push   eax
c0017730:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017734:	50                   	push   eax
c0017735:	6a 6e                	push   0x6e
c0017737:	6a 6e                	push   0x6e
c0017739:	e9 8f 00 00 00       	jmp    c00177cd <Vm::faultHandler(regs*)+0x585>
c001773e:	0f b7 c0             	movzx  eax,ax
c0017741:	52                   	push   edx
c0017742:	52                   	push   edx
c0017743:	50                   	push   eax
c0017744:	57                   	push   edi
c0017745:	e8 8a fa ff ff       	call   c00171d4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001774a:	59                   	pop    ecx
c001774b:	0f b6 c0             	movzx  eax,al
c001774e:	5e                   	pop    esi
c001774f:	50                   	push   eax
c0017750:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017754:	50                   	push   eax
c0017755:	e8 fe f5 ff ff       	call   c0016d58 <Vm::outbv(unsigned short, unsigned char)>
c001775a:	83 c4 10             	add    esp,0x10
c001775d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017760:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017764:	74 03                	je     c0017769 <Vm::faultHandler(regs*)+0x521>
c0017766:	48                   	dec    eax
c0017767:	eb 01                	jmp    c001776a <Vm::faultHandler(regs*)+0x522>
c0017769:	40                   	inc    eax
c001776a:	0f b7 c0             	movzx  eax,ax
c001776d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017770:	e9 88 01 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c0017775:	8d 46 ff             	lea    eax,[esi-0x1]
c0017778:	0f b6 f0             	movzx  esi,al
c001777b:	83 fe 05             	cmp    esi,0x5
c001777e:	77 1e                	ja     c001779e <Vm::faultHandler(regs*)+0x556>
c0017780:	ff 24 b5 e4 2b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd41c]
c0017787:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001778b:	eb 11                	jmp    c001779e <Vm::faultHandler(regs*)+0x556>
c001778d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017790:	eb 0c                	jmp    c001779e <Vm::faultHandler(regs*)+0x556>
c0017792:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017795:	eb 07                	jmp    c001779e <Vm::faultHandler(regs*)+0x556>
c0017797:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001779a:	eb 02                	jmp    c001779e <Vm::faultHandler(regs*)+0x556>
c001779c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001779e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177a1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177a6:	74 37                	je     c00177df <Vm::faultHandler(regs*)+0x597>
c00177a8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177ae:	76 2f                	jbe    c00177df <Vm::faultHandler(regs*)+0x597>
c00177b0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177b4:	50                   	push   eax
c00177b5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177b9:	50                   	push   eax
c00177ba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177be:	50                   	push   eax
c00177bf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177c3:	50                   	push   eax
c00177c4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177c8:	50                   	push   eax
c00177c9:	6a 6f                	push   0x6f
c00177cb:	6a 6f                	push   0x6f
c00177cd:	68 70 2b 02 c0       	push   0xc0022b70
c00177d2:	e8 6e 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177d7:	83 c4 20             	add    esp,0x20
c00177da:	e9 83 01 00 00       	jmp    c0017962 <Vm::faultHandler(regs*)+0x71a>
c00177df:	0f b7 d7             	movzx  edx,di
c00177e2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00177e5:	0f b7 c6             	movzx  eax,si
c00177e8:	81 e1 00 04 00 00    	and    ecx,0x400
c00177ee:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177f1:	83 e5 01             	and    ebp,0x1
c00177f4:	74 1d                	je     c0017813 <Vm::faultHandler(regs*)+0x5cb>
c00177f6:	55                   	push   ebp
c00177f7:	55                   	push   ebp
c00177f8:	50                   	push   eax
c00177f9:	52                   	push   edx
c00177fa:	e8 f8 f9 ff ff       	call   c00171f7 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	89 fa                	mov    edx,edi
c0017804:	ef                   	out    dx,eax
c0017805:	85 c9                	test   ecx,ecx
c0017807:	74 05                	je     c001780e <Vm::faultHandler(regs*)+0x5c6>
c0017809:	83 ee 04             	sub    esi,0x4
c001780c:	eb 21                	jmp    c001782f <Vm::faultHandler(regs*)+0x5e7>
c001780e:	83 c6 04             	add    esi,0x4
c0017811:	eb 1c                	jmp    c001782f <Vm::faultHandler(regs*)+0x5e7>
c0017813:	55                   	push   ebp
c0017814:	55                   	push   ebp
c0017815:	50                   	push   eax
c0017816:	52                   	push   edx
c0017817:	e8 c9 f9 ff ff       	call   c00171e5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001781c:	83 c4 10             	add    esp,0x10
c001781f:	89 fa                	mov    edx,edi
c0017821:	66 ef                	out    dx,ax
c0017823:	85 c9                	test   ecx,ecx
c0017825:	74 05                	je     c001782c <Vm::faultHandler(regs*)+0x5e4>
c0017827:	83 ee 02             	sub    esi,0x2
c001782a:	eb 03                	jmp    c001782f <Vm::faultHandler(regs*)+0x5e7>
c001782c:	83 c6 02             	add    esi,0x2
c001782f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017835:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017838:	e9 c0 00 00 00       	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c001783d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001784b:	50                   	push   eax
c001784c:	e8 f4 f4 ff ff       	call   c0016d45 <Vm::inbv(unsigned short)>
c0017851:	0f b6 c0             	movzx  eax,al
c0017854:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017857:	eb 3a                	jmp    c0017893 <Vm::faultHandler(regs*)+0x64b>
c0017859:	83 e5 01             	and    ebp,0x1
c001785c:	74 07                	je     c0017865 <Vm::faultHandler(regs*)+0x61d>
c001785e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017862:	ed                   	in     eax,dx
c0017863:	eb 14                	jmp    c0017879 <Vm::faultHandler(regs*)+0x631>
c0017865:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017868:	66 31 f6             	xor    si,si
c001786b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001786e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017872:	66 ed                	in     ax,dx
c0017874:	0f b7 c0             	movzx  eax,ax
c0017877:	09 f0                	or     eax,esi
c0017879:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001787c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017880:	eb 7e                	jmp    c0017900 <Vm::faultHandler(regs*)+0x6b8>
c0017882:	52                   	push   edx
c0017883:	52                   	push   edx
c0017884:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017888:	50                   	push   eax
c0017889:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001788d:	50                   	push   eax
c001788e:	e8 c5 f4 ff ff       	call   c0016d58 <Vm::outbv(unsigned short, unsigned char)>
c0017893:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017897:	eb 4f                	jmp    c00178e8 <Vm::faultHandler(regs*)+0x6a0>
c0017899:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001789c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178a0:	83 e5 01             	and    ebp,0x1
c00178a3:	74 03                	je     c00178a8 <Vm::faultHandler(regs*)+0x660>
c00178a5:	ef                   	out    dx,eax
c00178a6:	eb d4                	jmp    c001787c <Vm::faultHandler(regs*)+0x634>
c00178a8:	66 ef                	out    dx,ax
c00178aa:	eb d0                	jmp    c001787c <Vm::faultHandler(regs*)+0x634>
c00178ac:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178b3:	83 ec 0c             	sub    esp,0xc
c00178b6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178ba:	50                   	push   eax
c00178bb:	e8 85 f4 ff ff       	call   c0016d45 <Vm::inbv(unsigned short)>
c00178c0:	0f b6 c0             	movzx  eax,al
c00178c3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178c6:	eb 1d                	jmp    c00178e5 <Vm::faultHandler(regs*)+0x69d>
c00178c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178cb:	83 e5 01             	and    ebp,0x1
c00178ce:	74 03                	je     c00178d3 <Vm::faultHandler(regs*)+0x68b>
c00178d0:	ed                   	in     eax,dx
c00178d1:	eb 0d                	jmp    c00178e0 <Vm::faultHandler(regs*)+0x698>
c00178d3:	66 ed                	in     ax,dx
c00178d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00178d8:	0f b7 c0             	movzx  eax,ax
c00178db:	66 31 d2             	xor    dx,dx
c00178de:	09 d0                	or     eax,edx
c00178e0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178e3:	eb 18                	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00178e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178e8:	83 c4 10             	add    esp,0x10
c00178eb:	eb 13                	jmp    c0017900 <Vm::faultHandler(regs*)+0x6b8>
c00178ed:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178f3:	83 e5 01             	and    ebp,0x1
c00178f6:	74 03                	je     c00178fb <Vm::faultHandler(regs*)+0x6b3>
c00178f8:	ef                   	out    dx,eax
c00178f9:	eb 02                	jmp    c00178fd <Vm::faultHandler(regs*)+0x6b5>
c00178fb:	66 ef                	out    dx,ax
c00178fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017900:	b0 01                	mov    al,0x1
c0017902:	eb 60                	jmp    c0017964 <Vm::faultHandler(regs*)+0x71c>
c0017904:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017908:	50                   	push   eax
c0017909:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001790d:	50                   	push   eax
c001790e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017912:	50                   	push   eax
c0017913:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017917:	50                   	push   eax
c0017918:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001791c:	50                   	push   eax
c001791d:	52                   	push   edx
c001791e:	52                   	push   edx
c001791f:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017924:	e8 1c 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017929:	83 c4 20             	add    esp,0x20
c001792c:	83 ec 0c             	sub    esp,0xc
c001792f:	6a 60                	push   0x60
c0017931:	e8 0f f4 ff ff       	call   c0016d45 <Vm::inbv(unsigned short)>
c0017936:	83 c4 10             	add    esp,0x10
c0017939:	0f b6 d0             	movzx  edx,al
c001793c:	83 fa 1c             	cmp    edx,0x1c
c001793f:	74 05                	je     c0017946 <Vm::faultHandler(regs*)+0x6fe>
c0017941:	83 fa 5a             	cmp    edx,0x5a
c0017944:	75 e6                	jne    c001792c <Vm::faultHandler(regs*)+0x6e4>
c0017946:	0f b6 c0             	movzx  eax,al
c0017949:	83 f8 1c             	cmp    eax,0x1c
c001794c:	74 05                	je     c0017953 <Vm::faultHandler(regs*)+0x70b>
c001794e:	83 f8 5a             	cmp    eax,0x5a
c0017951:	75 0f                	jne    c0017962 <Vm::faultHandler(regs*)+0x71a>
c0017953:	83 ec 0c             	sub    esp,0xc
c0017956:	6a 60                	push   0x60
c0017958:	e8 e8 f3 ff ff       	call   c0016d45 <Vm::inbv(unsigned short)>
c001795d:	83 c4 10             	add    esp,0x10
c0017960:	eb e4                	jmp    c0017946 <Vm::faultHandler(regs*)+0x6fe>
c0017962:	31 c0                	xor    eax,eax
c0017964:	83 c4 2c             	add    esp,0x2c
c0017967:	5b                   	pop    ebx
c0017968:	5e                   	pop    esi
c0017969:	5f                   	pop    edi
c001796a:	5d                   	pop    ebp
c001796b:	c3                   	ret    

c001796c <noCopro(unsigned long)>:
c001796c:	c3                   	ret    

c001796d <nmiHandler(regs*, void*)>:
c001796d:	83 ec 0c             	sub    esp,0xc
c0017970:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017975:	83 ec 0c             	sub    esp,0xc
c0017978:	50                   	push   eax
c0017979:	e8 38 f9 fe ff       	call   c00072b6 <Computer::handleNMI()>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	90                   	nop
c0017982:	83 c4 0c             	add    esp,0xc
c0017985:	c3                   	ret    

c0017986 <doubleFault(regs*, void*)>:
c0017986:	55                   	push   ebp
c0017987:	89 e5                	mov    ebp,esp
c0017989:	83 ec 08             	sub    esp,0x8
c001798c:	83 ec 0c             	sub    esp,0xc
c001798f:	68 fc 2b 02 c0       	push   0xc0022bfc
c0017994:	e8 26 9d ff ff       	call   c00116bf <KePanic(char const*)>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	90                   	nop
c001799d:	c9                   	leave  
c001799e:	c3                   	ret    

c001799f <displayDebugInfo(regs*)>:
c001799f:	83 ec 1c             	sub    esp,0x1c
c00179a2:	0f 20 c0             	mov    eax,cr0
c00179a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179a9:	0f 20 d0             	mov    eax,cr2
c00179ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179b0:	0f 20 d8             	mov    eax,cr3
c00179b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179b7:	0f 20 e0             	mov    eax,cr4
c00179ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00179bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00179c4:	83 ec 08             	sub    esp,0x8
c00179c7:	50                   	push   eax
c00179c8:	68 18 2c 02 c0       	push   0xc0022c18
c00179cd:	e8 73 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179d2:	83 c4 10             	add    esp,0x10
c00179d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179dc:	83 ec 08             	sub    esp,0x8
c00179df:	50                   	push   eax
c00179e0:	68 09 2c 02 c0       	push   0xc0022c09
c00179e5:	e8 5b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00179f4:	83 ec 08             	sub    esp,0x8
c00179f7:	50                   	push   eax
c00179f8:	68 14 2c 02 c0       	push   0xc0022c14
c00179fd:	e8 43 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a0c:	83 ec 08             	sub    esp,0x8
c0017a0f:	50                   	push   eax
c0017a10:	68 23 2c 02 c0       	push   0xc0022c23
c0017a15:	e8 2b 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a21:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a24:	83 ec 08             	sub    esp,0x8
c0017a27:	50                   	push   eax
c0017a28:	68 2e 2c 02 c0       	push   0xc0022c2e
c0017a2d:	e8 13 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	83 ec 08             	sub    esp,0x8
c0017a38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a3c:	68 39 2c 02 c0       	push   0xc0022c39
c0017a41:	e8 ff 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	83 ec 08             	sub    esp,0x8
c0017a4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a50:	68 44 2c 02 c0       	push   0xc0022c44
c0017a55:	e8 eb 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a5a:	83 c4 10             	add    esp,0x10
c0017a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a61:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a64:	c1 e0 05             	shl    eax,0x5
c0017a67:	8d 90 c0 3f 02 c0    	lea    edx,[eax-0x3ffdc040]
c0017a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a71:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a74:	83 ec 04             	sub    esp,0x4
c0017a77:	52                   	push   edx
c0017a78:	50                   	push   eax
c0017a79:	68 4f 2c 02 c0       	push   0xc0022c4f
c0017a7e:	e8 c2 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a83:	83 c4 10             	add    esp,0x10
c0017a86:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a91:	83 ec 0c             	sub    esp,0xc
c0017a94:	50                   	push   eax
c0017a95:	e8 bf 0c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017a9a:	83 c4 10             	add    esp,0x10
c0017a9d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa8:	83 ec 08             	sub    esp,0x8
c0017aab:	68 5e 2c 02 c0       	push   0xc0022c5e
c0017ab0:	50                   	push   eax
c0017ab1:	e8 f0 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ab6:	83 c4 10             	add    esp,0x10
c0017ab9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017abe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ac8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017acb:	83 ec 08             	sub    esp,0x8
c0017ace:	52                   	push   edx
c0017acf:	50                   	push   eax
c0017ad0:	e8 8b 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017add:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae3:	83 ec 08             	sub    esp,0x8
c0017ae6:	68 6c 2c 02 c0       	push   0xc0022c6c
c0017aeb:	50                   	push   eax
c0017aec:	e8 b5 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aff:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b04:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b06:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b09:	83 c2 0c             	add    edx,0xc
c0017b0c:	83 ec 08             	sub    esp,0x8
c0017b0f:	52                   	push   edx
c0017b10:	50                   	push   eax
c0017b11:	e8 90 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b24:	83 ec 08             	sub    esp,0x8
c0017b27:	68 75 2c 02 c0       	push   0xc0022c75
c0017b2c:	50                   	push   eax
c0017b2d:	e8 74 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b44:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b47:	83 ec 08             	sub    esp,0x8
c0017b4a:	52                   	push   edx
c0017b4b:	50                   	push   eax
c0017b4c:	e8 0f 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5f:	83 ec 08             	sub    esp,0x8
c0017b62:	68 7d 2c 02 c0       	push   0xc0022c7d
c0017b67:	50                   	push   eax
c0017b68:	e8 39 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b7f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b82:	83 ec 08             	sub    esp,0x8
c0017b85:	52                   	push   edx
c0017b86:	50                   	push   eax
c0017b87:	e8 d4 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b9a:	83 ec 08             	sub    esp,0x8
c0017b9d:	68 85 2c 02 c0       	push   0xc0022c85
c0017ba2:	50                   	push   eax
c0017ba3:	e8 fe 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bba:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017bbd:	83 ec 08             	sub    esp,0x8
c0017bc0:	52                   	push   edx
c0017bc1:	50                   	push   eax
c0017bc2:	e8 99 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd5:	83 ec 08             	sub    esp,0x8
c0017bd8:	68 8d 2c 02 c0       	push   0xc0022c8d
c0017bdd:	50                   	push   eax
c0017bde:	e8 c3 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017be3:	83 c4 10             	add    esp,0x10
c0017be6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017beb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bf1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bf5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017bf8:	83 ec 08             	sub    esp,0x8
c0017bfb:	52                   	push   edx
c0017bfc:	50                   	push   eax
c0017bfd:	e8 5e 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c02:	83 c4 10             	add    esp,0x10
c0017c05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c10:	83 ec 08             	sub    esp,0x8
c0017c13:	68 95 2c 02 c0       	push   0xc0022c95
c0017c18:	50                   	push   eax
c0017c19:	e8 88 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c30:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c33:	83 ec 08             	sub    esp,0x8
c0017c36:	52                   	push   edx
c0017c37:	50                   	push   eax
c0017c38:	e8 23 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c3d:	83 c4 10             	add    esp,0x10
c0017c40:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c4b:	83 ec 08             	sub    esp,0x8
c0017c4e:	68 9d 2c 02 c0       	push   0xc0022c9d
c0017c53:	50                   	push   eax
c0017c54:	e8 4d 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c59:	83 c4 10             	add    esp,0x10
c0017c5c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c6b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c6e:	83 ec 08             	sub    esp,0x8
c0017c71:	52                   	push   edx
c0017c72:	50                   	push   eax
c0017c73:	e8 e8 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c78:	83 c4 10             	add    esp,0x10
c0017c7b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c86:	83 ec 08             	sub    esp,0x8
c0017c89:	68 a5 2c 02 c0       	push   0xc0022ca5
c0017c8e:	50                   	push   eax
c0017c8f:	e8 12 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c94:	83 c4 10             	add    esp,0x10
c0017c97:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c9c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ca2:	83 ec 08             	sub    esp,0x8
c0017ca5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ca9:	50                   	push   eax
c0017caa:	e8 b1 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017caf:	83 c4 10             	add    esp,0x10
c0017cb2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cbd:	83 ec 08             	sub    esp,0x8
c0017cc0:	68 ae 2c 02 c0       	push   0xc0022cae
c0017cc5:	50                   	push   eax
c0017cc6:	e8 db 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ccb:	83 c4 10             	add    esp,0x10
c0017cce:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cd9:	83 ec 08             	sub    esp,0x8
c0017cdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ce0:	50                   	push   eax
c0017ce1:	e8 7a 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ce6:	83 c4 10             	add    esp,0x10
c0017ce9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cf4:	83 ec 08             	sub    esp,0x8
c0017cf7:	68 b6 2c 02 c0       	push   0xc0022cb6
c0017cfc:	50                   	push   eax
c0017cfd:	e8 a4 0d ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d10:	83 ec 08             	sub    esp,0x8
c0017d13:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d17:	50                   	push   eax
c0017d18:	e8 43 0d ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017d1d:	83 c4 10             	add    esp,0x10
c0017d20:	fa                   	cli    
c0017d21:	f4                   	hlt    
c0017d22:	eb fe                	jmp    c0017d22 <displayDebugInfo(regs*)+0x383>

c0017d24 <HalSystemIdle()>:
c0017d24:	56                   	push   esi
c0017d25:	53                   	push   ebx
c0017d26:	83 ec 14             	sub    esp,0x14
c0017d29:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d34:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d3a:	83 e0 04             	and    eax,0x4
c0017d3d:	0f b6 c0             	movzx  eax,al
c0017d40:	85 c0                	test   eax,eax
c0017d42:	0f 95 c0             	setne  al
c0017d45:	0f b6 c0             	movzx  eax,al
c0017d48:	85 c0                	test   eax,eax
c0017d4a:	74 4c                	je     c0017d98 <HalSystemIdle()+0x74>
c0017d4c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d51:	83 ec 08             	sub    esp,0x8
c0017d54:	68 e1 00 00 00       	push   0xe1
c0017d59:	50                   	push   eax
c0017d5a:	e8 61 f3 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017d5f:	83 c4 10             	add    esp,0x10
c0017d62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d6a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d73:	83 e2 02             	and    edx,0x2
c0017d76:	89 d3                	mov    ebx,edx
c0017d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d7c:	83 e2 00             	and    edx,0x0
c0017d7f:	89 d6                	mov    esi,edx
c0017d81:	56                   	push   esi
c0017d82:	53                   	push   ebx
c0017d83:	68 e1 00 00 00       	push   0xe1
c0017d88:	50                   	push   eax
c0017d89:	e8 5e f3 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	e8 fe 83 fe ff       	call   c0000194 <doTPAUSE>
c0017d96:	eb 01                	jmp    c0017d99 <HalSystemIdle()+0x75>
c0017d98:	f4                   	hlt    
c0017d99:	90                   	nop
c0017d9a:	83 c4 14             	add    esp,0x14
c0017d9d:	5b                   	pop    ebx
c0017d9e:	5e                   	pop    esi
c0017d9f:	c3                   	ret    

c0017da0 <displayProgramFault(char const*)>:
c0017da0:	83 ec 0c             	sub    esp,0xc
c0017da3:	83 ec 0c             	sub    esp,0xc
c0017da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017daa:	e8 96 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017daf:	83 c4 10             	add    esp,0x10
c0017db2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dbc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dc2:	85 c0                	test   eax,eax
c0017dc4:	74 21                	je     c0017de7 <displayProgramFault(char const*)+0x47>
c0017dc6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dd6:	6a 04                	push   0x4
c0017dd8:	6a 0f                	push   0xf
c0017dda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dde:	50                   	push   eax
c0017ddf:	e8 34 0d ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	90                   	nop
c0017de8:	83 c4 0c             	add    esp,0xc
c0017deb:	c3                   	ret    

c0017dec <gpFault(regs*, void*)>:
c0017dec:	83 ec 1c             	sub    esp,0x1c
c0017def:	c7 05 74 c7 02 c0 48 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017248
c0017df9:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017dfe:	85 c0                	test   eax,eax
c0017e00:	74 1e                	je     c0017e20 <gpFault(regs*, void*)+0x34>
c0017e02:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e07:	83 ec 0c             	sub    esp,0xc
c0017e0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e0e:	ff d0                	call   eax
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e17:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e1c:	85 c0                	test   eax,eax
c0017e1e:	75 2e                	jne    c0017e4e <gpFault(regs*, void*)+0x62>
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	68 be 2c 02 c0       	push   0xc0022cbe
c0017e28:	e8 73 ff ff ff       	call   c0017da0 <displayProgramFault(char const*)>
c0017e2d:	83 c4 10             	add    esp,0x10
c0017e30:	83 ec 0c             	sub    esp,0xc
c0017e33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e37:	e8 63 fb ff ff       	call   c001799f <displayDebugInfo(regs*)>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	83 ec 0c             	sub    esp,0xc
c0017e42:	6a 00                	push   0x0
c0017e44:	e8 a3 ed ff ff       	call   c0016bec <Thr::terminateFromIRQ(int)>
c0017e49:	83 c4 10             	add    esp,0x10
c0017e4c:	eb 01                	jmp    c0017e4f <gpFault(regs*, void*)+0x63>
c0017e4e:	90                   	nop
c0017e4f:	83 c4 1c             	add    esp,0x1c
c0017e52:	c3                   	ret    

c0017e53 <pgFault(regs*, void*)>:
c0017e53:	83 ec 1c             	sub    esp,0x1c
c0017e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e5a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e5d:	0f 20 d0             	mov    eax,cr2
c0017e60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e68:	83 ec 04             	sub    esp,0x4
c0017e6b:	52                   	push   edx
c0017e6c:	50                   	push   eax
c0017e6d:	68 9c 2d 02 c0       	push   0xc0022d9c
c0017e72:	e8 ce 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e84:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e8a:	0f 20 d2             	mov    edx,cr2
c0017e8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e95:	83 ec 08             	sub    esp,0x8
c0017e98:	52                   	push   edx
c0017e99:	50                   	push   eax
c0017e9a:	e8 f1 24 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017e9f:	83 c4 10             	add    esp,0x10
c0017ea2:	0f b6 c0             	movzx  eax,al
c0017ea5:	85 c0                	test   eax,eax
c0017ea7:	75 2e                	jne    c0017ed7 <pgFault(regs*, void*)+0x84>
c0017ea9:	83 ec 0c             	sub    esp,0xc
c0017eac:	68 d7 2c 02 c0       	push   0xc0022cd7
c0017eb1:	e8 ea fe ff ff       	call   c0017da0 <displayProgramFault(char const*)>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ec0:	e8 da fa ff ff       	call   c001799f <displayDebugInfo(regs*)>
c0017ec5:	83 c4 10             	add    esp,0x10
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	6a 00                	push   0x0
c0017ecd:	e8 1a ed ff ff       	call   c0016bec <Thr::terminateFromIRQ(int)>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	eb 01                	jmp    c0017ed8 <pgFault(regs*, void*)+0x85>
c0017ed7:	90                   	nop
c0017ed8:	83 c4 1c             	add    esp,0x1c
c0017edb:	c3                   	ret    

c0017edc <otherISRHandler(regs*, void*)>:
c0017edc:	83 ec 0c             	sub    esp,0xc
c0017edf:	83 ec 0c             	sub    esp,0xc
c0017ee2:	68 c4 2d 02 c0       	push   0xc0022dc4
c0017ee7:	e8 b4 fe ff ff       	call   c0017da0 <displayProgramFault(char const*)>
c0017eec:	83 c4 10             	add    esp,0x10
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ef6:	e8 a4 fa ff ff       	call   c001799f <displayDebugInfo(regs*)>
c0017efb:	83 c4 10             	add    esp,0x10
c0017efe:	83 ec 0c             	sub    esp,0xc
c0017f01:	6a 00                	push   0x0
c0017f03:	e8 e4 ec ff ff       	call   c0016bec <Thr::terminateFromIRQ(int)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	90                   	nop
c0017f0c:	83 c4 0c             	add    esp,0xc
c0017f0f:	c3                   	ret    

c0017f10 <opcodeFault(regs*, void*)>:
c0017f10:	55                   	push   ebp
c0017f11:	89 e5                	mov    ebp,esp
c0017f13:	83 ec 08             	sub    esp,0x8
c0017f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f1c:	83 ec 08             	sub    esp,0x8
c0017f1f:	50                   	push   eax
c0017f20:	68 e2 2c 02 c0       	push   0xc0022ce2
c0017f25:	e8 1b 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f38:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f3e:	0f b6 c0             	movzx  eax,al
c0017f41:	85 c0                	test   eax,eax
c0017f43:	74 21                	je     c0017f66 <opcodeFault(regs*, void*)+0x56>
c0017f45:	83 ec 0c             	sub    esp,0xc
c0017f48:	68 ec 2d 02 c0       	push   0xc0022dec
c0017f4d:	e8 f3 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f5b:	8d 50 19             	lea    edx,[eax+0x19]
c0017f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f61:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f64:	eb 2b                	jmp    c0017f91 <opcodeFault(regs*, void*)+0x81>
c0017f66:	83 ec 0c             	sub    esp,0xc
c0017f69:	68 f0 2c 02 c0       	push   0xc0022cf0
c0017f6e:	e8 2d fe ff ff       	call   c0017da0 <displayProgramFault(char const*)>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f7c:	e8 1e fa ff ff       	call   c001799f <displayDebugInfo(regs*)>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	6a 00                	push   0x0
c0017f89:	e8 5e ec ff ff       	call   c0016bec <Thr::terminateFromIRQ(int)>
c0017f8e:	83 c4 10             	add    esp,0x10
c0017f91:	c9                   	leave  
c0017f92:	c3                   	ret    

c0017f93 <i386SaveCoprocessor(void*)>:
c0017f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f97:	83 c0 3f             	add    eax,0x3f
c0017f9a:	83 e0 c0             	and    eax,0xffffffc0
c0017f9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fa1:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017fa7 <i386LoadCoprocessor(void*)>:
c0017fa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fab:	83 c0 3f             	add    eax,0x3f
c0017fae:	83 e0 c0             	and    eax,0xffffffc0
c0017fb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fb5:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017fbb <x87EmulHandler(regs*, void*)>:
c0017fbb:	53                   	push   ebx
c0017fbc:	83 ec 08             	sub    esp,0x8
c0017fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017fc8:	74 10                	je     c0017fda <x87EmulHandler(regs*, void*)+0x1f>
c0017fca:	83 ec 0c             	sub    esp,0xc
c0017fcd:	68 fd 2c 02 c0       	push   0xc0022cfd
c0017fd2:	e8 e8 96 ff ff       	call   c00116bf <KePanic(char const*)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	0f 20 c0             	mov    eax,cr0
c0017fdd:	a8 08                	test   al,0x8
c0017fdf:	74 59                	je     c001803a <x87EmulHandler(regs*, void*)+0x7f>
c0017fe1:	0f 06                	clts   
c0017fe3:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017fe8:	85 c0                	test   eax,eax
c0017fea:	74 0e                	je     c0017ffa <x87EmulHandler(regs*, void*)+0x3f>
c0017fec:	83 ec 0c             	sub    esp,0xc
c0017fef:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ff2:	e8 9c ff ff ff       	call   c0017f93 <i386SaveCoprocessor(void*)>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018000:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018004:	75 12                	jne    c0018018 <x87EmulHandler(regs*, void*)+0x5d>
c0018006:	83 ec 0c             	sub    esp,0xc
c0018009:	68 40 02 00 00       	push   0x240
c001800e:	e8 a3 fa fe ff       	call   c0007ab6 <malloc>
c0018013:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018016:	eb 10                	jmp    c0018028 <x87EmulHandler(regs*, void*)+0x6d>
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0018020:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018023:	e8 7f ff ff ff       	call   c0017fa7 <i386LoadCoprocessor(void*)>
c0018028:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0018035:	83 c4 08             	add    esp,0x8
c0018038:	5b                   	pop    ebx
c0018039:	c3                   	ret    
c001803a:	83 ec 0c             	sub    esp,0xc
c001803d:	68 11 2d 02 c0       	push   0xc0022d11
c0018042:	e8 fe 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0018047:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001804f:	83 c4 18             	add    esp,0x18
c0018052:	5b                   	pop    ebx
c0018053:	e9 94 eb ff ff       	jmp    c0016bec <Thr::terminateFromIRQ(int)>

c0018058 <HalInitialiseCoprocessor()>:
c0018058:	83 ec 10             	sub    esp,0x10
c001805b:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0018065:	6a 00                	push   0x0
c0018067:	68 bb 7f 01 c0       	push   0xc0017fbb
c001806c:	6a 07                	push   0x7
c001806e:	e8 27 4f ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018073:	e8 48 70 00 00       	call   c001f0c0 <avxDetect>
c0018078:	83 c4 10             	add    esp,0x10
c001807b:	85 c0                	test   eax,eax
c001807d:	74 1c                	je     c001809b <HalInitialiseCoprocessor()+0x43>
c001807f:	c7 05 70 c7 02 c0 ea f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f0ea
c0018089:	c7 05 6c c7 02 c0 fb f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f0fb
c0018093:	83 c4 0c             	add    esp,0xc
c0018096:	e9 71 70 00 00       	jmp    c001f10c <avxInit>
c001809b:	e8 b0 73 00 00       	call   c001f450 <absolutelyNoChanceInHell>
c00180a0:	85 c0                	test   eax,eax
c00180a2:	74 1c                	je     c00180c0 <HalInitialiseCoprocessor()+0x68>
c00180a4:	c7 05 70 c7 02 c0 68 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f468
c00180ae:	c7 05 6c c7 02 c0 70 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f470
c00180b8:	83 c4 0c             	add    esp,0xc
c00180bb:	e9 b8 73 00 00       	jmp    c001f478 <sseInit>
c00180c0:	e8 d1 73 00 00       	call   c001f496 <x87Detect>
c00180c5:	85 c0                	test   eax,eax
c00180c7:	74 1c                	je     c00180e5 <HalInitialiseCoprocessor()+0x8d>
c00180c9:	c7 05 70 c7 02 c0 b1 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4b1
c00180d3:	c7 05 6c c7 02 c0 b8 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4b8
c00180dd:	83 c4 0c             	add    esp,0xc
c00180e0:	e9 da 73 00 00       	jmp    c001f4bf <x87Init>
c00180e5:	c7 05 70 c7 02 c0 6c 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001796c
c00180ef:	c7 05 6c c7 02 c0 6c 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001796c
c00180f9:	0f 20 c0             	mov    eax,cr0
c00180fc:	83 c8 04             	or     eax,0x4
c00180ff:	0f 22 c0             	mov    cr0,eax
c0018102:	83 c4 0c             	add    esp,0xc
c0018105:	c3                   	ret    

c0018106 <HalPanic(char const*)>:
c0018106:	53                   	push   ebx
c0018107:	83 ec 10             	sub    esp,0x10
c001810a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001810e:	fa                   	cli    
c001810f:	53                   	push   ebx
c0018110:	68 27 2d 02 c0       	push   0xc0022d27
c0018115:	e8 2b 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001811a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	85 c0                	test   eax,eax
c0018124:	74 09                	je     c001812f <HalPanic(char const*)+0x29>
c0018126:	83 ec 0c             	sub    esp,0xc
c0018129:	53                   	push   ebx
c001812a:	ff d0                	call   eax
c001812c:	83 c4 10             	add    esp,0x10
c001812f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018134:	85 c0                	test   eax,eax
c0018136:	0f 84 dc 00 00 00    	je     c0018218 <HalPanic(char const*)+0x112>
c001813c:	52                   	push   edx
c001813d:	6a 01                	push   0x1
c001813f:	6a 0f                	push   0xf
c0018141:	50                   	push   eax
c0018142:	e8 6d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018147:	59                   	pop    ecx
c0018148:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001814e:	e8 51 06 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0018153:	58                   	pop    eax
c0018154:	5a                   	pop    edx
c0018155:	68 04 0f 02 c0       	push   0xc0020f04
c001815a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018160:	e8 87 04 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018165:	83 c4 0c             	add    esp,0xc
c0018168:	6a 01                	push   0x1
c001816a:	6a 0f                	push   0xf
c001816c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018172:	e8 3d 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018177:	59                   	pop    ecx
c0018178:	58                   	pop    eax
c0018179:	68 40 2d 02 c0       	push   0xc0022d40
c001817e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018184:	e8 1d 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018189:	83 c4 0c             	add    esp,0xc
c001818c:	6a 0f                	push   0xf
c001818e:	6a 01                	push   0x1
c0018190:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018196:	e8 19 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001819b:	58                   	pop    eax
c001819c:	5a                   	pop    edx
c001819d:	68 49 2d 02 c0       	push   0xc0022d49
c00181a2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a8:	e8 f9 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181ad:	83 c4 0c             	add    esp,0xc
c00181b0:	6a 01                	push   0x1
c00181b2:	6a 0f                	push   0xf
c00181b4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ba:	e8 f5 03 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181bf:	59                   	pop    ecx
c00181c0:	58                   	pop    eax
c00181c1:	68 8d 2d 02 c0       	push   0xc0022d8d
c00181c6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181cc:	e8 d5 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181d1:	58                   	pop    eax
c00181d2:	5a                   	pop    edx
c00181d3:	68 56 2d 02 c0       	push   0xc0022d56
c00181d8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181de:	e8 c3 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181e3:	59                   	pop    ecx
c00181e4:	58                   	pop    eax
c00181e5:	68 90 2d 02 c0       	push   0xc0022d90
c00181ea:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181f0:	e8 b1 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00181f5:	58                   	pop    eax
c00181f6:	5a                   	pop    edx
c00181f7:	53                   	push   ebx
c00181f8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181fe:	e8 a3 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018203:	59                   	pop    ecx
c0018204:	5b                   	pop    ebx
c0018205:	68 8d 2d 02 c0       	push   0xc0022d8d
c001820a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018210:	e8 91 08 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018215:	83 c4 10             	add    esp,0x10
c0018218:	eb fe                	jmp    c0018218 <HalPanic(char const*)+0x112>

c001821a <HalQueryPerformanceCounter()>:
c001821a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001821f:	31 d2                	xor    edx,edx
c0018221:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018227:	31 c0                	xor    eax,eax
c0018229:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018230:	74 02                	je     c0018234 <HalQueryPerformanceCounter()+0x1a>
c0018232:	0f 31                	rdtsc  
c0018234:	c3                   	ret    

c0018235 <HalInitialise()>:
c0018235:	53                   	push   ebx
c0018236:	83 ec 08             	sub    esp,0x8
c0018239:	e8 8c 4f ff ff       	call   c000d1ca <setupINTS()>
c001823e:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001824a:	75 0f                	jne    c001825b <HalInitialise()+0x26>
c001824c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018252:	83 e2 fe             	and    edx,0xfffffffe
c0018255:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001825b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018261:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018268:	83 e2 fe             	and    edx,0xfffffffe
c001826b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018271:	e8 9e 02 00 00       	call   c0018514 <picOpen()>
c0018276:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001827d:	74 0a                	je     c0018289 <HalInitialise()+0x54>
c001827f:	e8 e0 01 00 00       	call   c0018464 <picDisable()>
c0018284:	e8 ad 67 00 00       	call   c001ea36 <apicOpen()>
c0018289:	bb 0f 00 00 00       	mov    ebx,0xf
c001828e:	50                   	push   eax
c001828f:	6a 00                	push   0x0
c0018291:	68 dc 7e 01 c0       	push   0xc0017edc
c0018296:	6a 00                	push   0x0
c0018298:	e8 fd 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001829d:	83 c4 0c             	add    esp,0xc
c00182a0:	6a 00                	push   0x0
c00182a2:	68 dc 7e 01 c0       	push   0xc0017edc
c00182a7:	6a 01                	push   0x1
c00182a9:	e8 ec 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ae:	83 c4 0c             	add    esp,0xc
c00182b1:	6a 00                	push   0x0
c00182b3:	68 6d 79 01 c0       	push   0xc001796d
c00182b8:	6a 02                	push   0x2
c00182ba:	e8 db 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182bf:	83 c4 0c             	add    esp,0xc
c00182c2:	6a 00                	push   0x0
c00182c4:	68 dc 7e 01 c0       	push   0xc0017edc
c00182c9:	6a 03                	push   0x3
c00182cb:	e8 ca 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182d0:	83 c4 0c             	add    esp,0xc
c00182d3:	6a 00                	push   0x0
c00182d5:	68 dc 7e 01 c0       	push   0xc0017edc
c00182da:	6a 04                	push   0x4
c00182dc:	e8 b9 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182e1:	83 c4 0c             	add    esp,0xc
c00182e4:	6a 00                	push   0x0
c00182e6:	68 dc 7e 01 c0       	push   0xc0017edc
c00182eb:	6a 05                	push   0x5
c00182ed:	e8 a8 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182f2:	83 c4 0c             	add    esp,0xc
c00182f5:	6a 00                	push   0x0
c00182f7:	68 10 7f 01 c0       	push   0xc0017f10
c00182fc:	6a 06                	push   0x6
c00182fe:	e8 97 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018303:	83 c4 0c             	add    esp,0xc
c0018306:	6a 00                	push   0x0
c0018308:	68 86 79 01 c0       	push   0xc0017986
c001830d:	6a 08                	push   0x8
c001830f:	e8 86 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018314:	83 c4 0c             	add    esp,0xc
c0018317:	6a 00                	push   0x0
c0018319:	68 dc 7e 01 c0       	push   0xc0017edc
c001831e:	6a 09                	push   0x9
c0018320:	e8 75 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018325:	83 c4 0c             	add    esp,0xc
c0018328:	6a 00                	push   0x0
c001832a:	68 dc 7e 01 c0       	push   0xc0017edc
c001832f:	6a 0a                	push   0xa
c0018331:	e8 64 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018336:	83 c4 0c             	add    esp,0xc
c0018339:	6a 00                	push   0x0
c001833b:	68 dc 7e 01 c0       	push   0xc0017edc
c0018340:	6a 0b                	push   0xb
c0018342:	e8 53 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018347:	83 c4 0c             	add    esp,0xc
c001834a:	6a 00                	push   0x0
c001834c:	68 ec 7d 01 c0       	push   0xc0017dec
c0018351:	6a 0d                	push   0xd
c0018353:	e8 42 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018358:	83 c4 0c             	add    esp,0xc
c001835b:	6a 00                	push   0x0
c001835d:	68 53 7e 01 c0       	push   0xc0017e53
c0018362:	6a 0e                	push   0xe
c0018364:	e8 31 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018369:	83 c4 10             	add    esp,0x10
c001836c:	50                   	push   eax
c001836d:	6a 00                	push   0x0
c001836f:	68 dc 7e 01 c0       	push   0xc0017edc
c0018374:	53                   	push   ebx
c0018375:	43                   	inc    ebx
c0018376:	e8 1f 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001837b:	83 c4 10             	add    esp,0x10
c001837e:	83 fb 1e             	cmp    ebx,0x1e
c0018381:	75 e9                	jne    c001836c <HalInitialise()+0x137>
c0018383:	50                   	push   eax
c0018384:	6a 00                	push   0x0
c0018386:	68 58 2b 01 c0       	push   0xc0012b58
c001838b:	6a 60                	push   0x60
c001838d:	e8 08 4c ff ff       	call   c000cf9a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018392:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018397:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00183a1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00183a8:	e8 09 f7 fe ff       	call   c0007ab6 <malloc>
c00183ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00183b0:	89 c3                	mov    ebx,eax
c00183b2:	e8 3b 09 00 00       	call   c0018cf2 <RTC::RTC()>
c00183b7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00183c1:	5a                   	pop    edx
c00183c2:	59                   	pop    ecx
c00183c3:	53                   	push   ebx
c00183c4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183ca:	e8 97 46 ff ff       	call   c000ca66 <Device::addChild(Device*)>
c00183cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183d1:	6a 00                	push   0x0
c00183d3:	6a 00                	push   0x0
c00183d5:	6a 00                	push   0x0
c00183d7:	53                   	push   ebx
c00183d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183db:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183e0:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183e6:	83 c4 28             	add    esp,0x28
c00183e9:	5b                   	pop    ebx
c00183ea:	c3                   	ret    

c00183eb <HalMakeBeep(int)>:
c00183eb:	53                   	push   ebx
c00183ec:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183f0:	85 db                	test   ebx,ebx
c00183f2:	75 07                	jne    c00183fb <HalMakeBeep(int)+0x10>
c00183f4:	e4 61                	in     al,0x61
c00183f6:	83 e0 fc             	and    eax,0xfffffffc
c00183f9:	eb 26                	jmp    c0018421 <HalMakeBeep(int)+0x36>
c00183fb:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018400:	99                   	cdq    
c0018401:	f7 fb                	idiv   ebx
c0018403:	89 c1                	mov    ecx,eax
c0018405:	b0 b6                	mov    al,0xb6
c0018407:	e6 43                	out    0x43,al
c0018409:	88 c8                	mov    al,cl
c001840b:	e6 42                	out    0x42,al
c001840d:	89 c8                	mov    eax,ecx
c001840f:	c1 e8 08             	shr    eax,0x8
c0018412:	e6 42                	out    0x42,al
c0018414:	e4 61                	in     al,0x61
c0018416:	89 c2                	mov    edx,eax
c0018418:	83 ca 03             	or     edx,0x3
c001841b:	38 d0                	cmp    al,dl
c001841d:	74 04                	je     c0018423 <HalMakeBeep(int)+0x38>
c001841f:	88 d0                	mov    al,dl
c0018421:	e6 61                	out    0x61,al
c0018423:	5b                   	pop    ebx
c0018424:	c3                   	ret    

c0018425 <HalGetRand()>:
c0018425:	31 c0                	xor    eax,eax
c0018427:	c3                   	ret    

c0018428 <HalEndOfInterrupt(int)>:
c0018428:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001842f:	74 23                	je     c0018454 <HalEndOfInterrupt(int)+0x2c>
c0018431:	83 ec 14             	sub    esp,0x14
c0018434:	6a 1b                	push   0x1b
c0018436:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001843c:	e8 7f ec fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018441:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018446:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018450:	83 c4 1c             	add    esp,0x1c
c0018453:	c3                   	ret    
c0018454:	e9 3f 02 00 00       	jmp    c0018698 <picEOI(int)>

c0018459 <HalRestart()>:
c0018459:	c3                   	ret    

c001845a <HalShutdown()>:
c001845a:	c3                   	ret    

c001845b <HalSleep()>:
c001845b:	c3                   	ret    

c001845c <picIoWait()>:
c001845c:	eb 00                	jmp    c001845e <picIoWait()+0x2>
c001845e:	eb 00                	jmp    c0018460 <picIoWait()+0x4>
c0018460:	90                   	nop
c0018461:	c3                   	ret    
c0018462:	66 90                	xchg   ax,ax

c0018464 <picDisable()>:
c0018464:	83 ec 10             	sub    esp,0x10
c0018467:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001846e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018473:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018477:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001847c:	ee                   	out    dx,al
c001847d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018484:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018489:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001848d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018492:	ee                   	out    dx,al
c0018493:	90                   	nop
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	c3                   	ret    

c0018498 <picGetIRQReg(int)>:
c0018498:	83 ec 10             	sub    esp,0x10
c001849b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001849f:	0f b6 c0             	movzx  eax,al
c00184a2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184a9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184ad:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184b1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184b6:	ee                   	out    dx,al
c00184b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184bb:	0f b6 c0             	movzx  eax,al
c00184be:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00184c5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00184c9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00184cd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00184d2:	ee                   	out    dx,al
c00184d3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184da:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184df:	89 c2                	mov    edx,eax
c00184e1:	ec                   	in     al,dx
c00184e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184e6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184ea:	0f b6 c0             	movzx  eax,al
c00184ed:	c1 e0 08             	shl    eax,0x8
c00184f0:	89 c1                	mov    ecx,eax
c00184f2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00184f9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00184fe:	89 c2                	mov    edx,eax
c0018500:	ec                   	in     al,dx
c0018501:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018505:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018509:	0f b6 c0             	movzx  eax,al
c001850c:	09 c8                	or     eax,ecx
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	c3                   	ret    
c0018512:	66 90                	xchg   ax,ax

c0018514 <picOpen()>:
c0018514:	83 ec 50             	sub    esp,0x50
c0018517:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001851e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018523:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018527:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001852b:	ee                   	out    dx,al
c001852c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018533:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018538:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001853c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018540:	ee                   	out    dx,al
c0018541:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018549:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018551:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018558:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001855c:	89 c2                	mov    edx,eax
c001855e:	ec                   	in     al,dx
c001855f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018563:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018567:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001856b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018576:	89 c2                	mov    edx,eax
c0018578:	ec                   	in     al,dx
c0018579:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001857d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018581:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018585:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001858c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018591:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018599:	ee                   	out    dx,al
c001859a:	e8 bd fe ff ff       	call   c001845c <picIoWait()>
c001859f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00185a6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185ab:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185b3:	ee                   	out    dx,al
c00185b4:	e8 a3 fe ff ff       	call   c001845c <picIoWait()>
c00185b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185bd:	0f b6 c0             	movzx  eax,al
c00185c0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00185c7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00185cb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00185cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185d3:	ee                   	out    dx,al
c00185d4:	e8 83 fe ff ff       	call   c001845c <picIoWait()>
c00185d9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185dd:	0f b6 c0             	movzx  eax,al
c00185e0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185e7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185eb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00185f3:	ee                   	out    dx,al
c00185f4:	e8 63 fe ff ff       	call   c001845c <picIoWait()>
c00185f9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018600:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018605:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018609:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001860d:	ee                   	out    dx,al
c001860e:	e8 49 fe ff ff       	call   c001845c <picIoWait()>
c0018613:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001861a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001861f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018623:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018627:	ee                   	out    dx,al
c0018628:	e8 2f fe ff ff       	call   c001845c <picIoWait()>
c001862d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018634:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018639:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001863d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018641:	ee                   	out    dx,al
c0018642:	e8 15 fe ff ff       	call   c001845c <picIoWait()>
c0018647:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001864e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018653:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018657:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001865b:	ee                   	out    dx,al
c001865c:	e8 fb fd ff ff       	call   c001845c <picIoWait()>
c0018661:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018666:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001866d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018671:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018675:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018679:	ee                   	out    dx,al
c001867a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001867f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018686:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001868a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001868e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018692:	ee                   	out    dx,al
c0018693:	90                   	nop
c0018694:	83 c4 50             	add    esp,0x50
c0018697:	c3                   	ret    

c0018698 <picEOI(int)>:
c0018698:	83 ec 10             	sub    esp,0x10
c001869b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186a0:	75 1e                	jne    c00186c0 <picEOI(int)+0x28>
c00186a2:	6a 0b                	push   0xb
c00186a4:	e8 ef fd ff ff       	call   c0018498 <picGetIRQReg(int)>
c00186a9:	83 c4 04             	add    esp,0x4
c00186ac:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186b1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186b6:	25 80 00 00 00       	and    eax,0x80
c00186bb:	74 73                	je     c0018730 <picEOI(int)+0x98>
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00186c5:	75 31                	jne    c00186f8 <picEOI(int)+0x60>
c00186c7:	6a 0b                	push   0xb
c00186c9:	e8 ca fd ff ff       	call   c0018498 <picGetIRQReg(int)>
c00186ce:	83 c4 04             	add    esp,0x4
c00186d1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00186d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186da:	98                   	cwde   
c00186db:	85 c0                	test   eax,eax
c00186dd:	78 19                	js     c00186f8 <picEOI(int)+0x60>
c00186df:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186e6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00186f4:	ee                   	out    dx,al
c00186f5:	eb 3d                	jmp    c0018734 <picEOI(int)+0x9c>
c00186f7:	90                   	nop
c00186f8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186fd:	7e 19                	jle    c0018718 <picEOI(int)+0x80>
c00186ff:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018706:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001870b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001870f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018714:	ee                   	out    dx,al
c0018715:	8d 76 00             	lea    esi,[esi+0x0]
c0018718:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001871f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018724:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018728:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001872d:	ee                   	out    dx,al
c001872e:	eb 04                	jmp    c0018734 <picEOI(int)+0x9c>
c0018730:	90                   	nop
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	c3                   	ret    

c0018738 <RTC::open(int, int, void*)>:
c0018738:	31 c0                	xor    eax,eax
c001873a:	c3                   	ret    
c001873b:	90                   	nop

c001873c <RTC::close(int, int, void*)>:
c001873c:	31 c0                	xor    eax,eax
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <RTC::timeInSecondsUTC()>:
c0018740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018744:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001874a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018750:	c3                   	ret    
c0018751:	90                   	nop

c0018752 <RTC::timeInDatetimeUTC()>:
c0018752:	53                   	push   ebx
c0018753:	83 ec 14             	sub    esp,0x14
c0018756:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001875a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018760:	50                   	push   eax
c0018761:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018764:	83 c4 0c             	add    esp,0xc
c0018767:	52                   	push   edx
c0018768:	50                   	push   eax
c0018769:	53                   	push   ebx
c001876a:	e8 6b 40 ff ff       	call   c000c7da <secondsToDatetime(unsigned long long)>
c001876f:	89 d8                	mov    eax,ebx
c0018771:	83 c4 14             	add    esp,0x14
c0018774:	5b                   	pop    ebx
c0018775:	c2 04 00             	ret    0x4

c0018778 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018778:	56                   	push   esi
c0018779:	53                   	push   ebx
c001877a:	83 ec 14             	sub    esp,0x14
c001877d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018781:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018783:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018786:	8d 44 24 08          	lea    eax,[esp+0x8]
c001878a:	52                   	push   edx
c001878b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018793:	50                   	push   eax
c0018794:	e8 41 40 ff ff       	call   c000c7da <secondsToDatetime(unsigned long long)>
c0018799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001879d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187a5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00187a9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187ad:	89 f0                	mov    eax,esi
c00187af:	83 c4 20             	add    esp,0x20
c00187b2:	5b                   	pop    ebx
c00187b3:	5e                   	pop    esi
c00187b4:	ff e0                	jmp    eax

c00187b6 <RTC::~RTC()>:
c00187b6:	83 ec 0c             	sub    esp,0xc
c00187b9:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c00187be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c2:	89 10                	mov    DWORD PTR [eax],edx
c00187c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187c8:	83 ec 0c             	sub    esp,0xc
c00187cb:	50                   	push   eax
c00187cc:	e8 9b 3d ff ff       	call   c000c56c <Clock::~Clock()>
c00187d1:	83 c4 10             	add    esp,0x10
c00187d4:	90                   	nop
c00187d5:	83 c4 0c             	add    esp,0xc
c00187d8:	c3                   	ret    
c00187d9:	90                   	nop

c00187da <RTC::~RTC()>:
c00187da:	83 ec 0c             	sub    esp,0xc
c00187dd:	83 ec 0c             	sub    esp,0xc
c00187e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187e4:	e8 cd ff ff ff       	call   c00187b6 <RTC::~RTC()>
c00187e9:	83 c4 10             	add    esp,0x10
c00187ec:	83 ec 08             	sub    esp,0x8
c00187ef:	68 60 01 00 00       	push   0x160
c00187f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187f8:	e8 1b 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00187fd:	83 c4 10             	add    esp,0x10
c0018800:	83 c4 0c             	add    esp,0xc
c0018803:	c3                   	ret    

c0018804 <RTC::get_update_in_progress_flag()>:
c0018804:	83 ec 14             	sub    esp,0x14
c0018807:	6a 0a                	push   0xa
c0018809:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001880f:	e8 64 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018814:	83 c4 1c             	add    esp,0x1c
c0018817:	0f b6 c0             	movzx  eax,al
c001881a:	c1 e8 07             	shr    eax,0x7
c001881d:	c3                   	ret    

c001881e <RTC::completeRTCRefresh()>:
c001881e:	55                   	push   ebp
c001881f:	57                   	push   edi
c0018820:	56                   	push   esi
c0018821:	53                   	push   ebx
c0018822:	83 ec 3c             	sub    esp,0x3c
c0018825:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001882b:	83 ec 0c             	sub    esp,0xc
c001882e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018832:	e8 cd ff ff ff       	call   c0018804 <RTC::get_update_in_progress_flag()>
c0018837:	83 c4 10             	add    esp,0x10
c001883a:	84 c0                	test   al,al
c001883c:	74 0e                	je     c001884c <RTC::completeRTCRefresh()+0x2e>
c001883e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018844:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001884a:	73 df                	jae    c001882b <RTC::completeRTCRefresh()+0xd>
c001884c:	51                   	push   ecx
c001884d:	51                   	push   ecx
c001884e:	6a 00                	push   0x0
c0018850:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018856:	e8 1d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885b:	5b                   	pop    ebx
c001885c:	89 c7                	mov    edi,eax
c001885e:	5e                   	pop    esi
c001885f:	6a 02                	push   0x2
c0018861:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018867:	e8 0c e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001886c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018870:	5d                   	pop    ebp
c0018871:	58                   	pop    eax
c0018872:	6a 04                	push   0x4
c0018874:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887a:	e8 f9 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001887f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018883:	58                   	pop    eax
c0018884:	5a                   	pop    edx
c0018885:	6a 07                	push   0x7
c0018887:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001888d:	e8 e6 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018892:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018896:	59                   	pop    ecx
c0018897:	5b                   	pop    ebx
c0018898:	6a 08                	push   0x8
c001889a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188a0:	e8 d3 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188a5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188a9:	5e                   	pop    esi
c00188aa:	5d                   	pop    ebp
c00188ab:	6a 09                	push   0x9
c00188ad:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188b3:	e8 c0 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188b8:	0f b6 c0             	movzx  eax,al
c00188bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00188bf:	83 c4 10             	add    esp,0x10
c00188c2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188cf:	e8 30 ff ff ff       	call   c0018804 <RTC::get_update_in_progress_flag()>
c00188d4:	83 c4 10             	add    esp,0x10
c00188d7:	84 c0                	test   al,al
c00188d9:	74 0e                	je     c00188e9 <RTC::completeRTCRefresh()+0xcb>
c00188db:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188e1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188e7:	73 df                	jae    c00188c8 <RTC::completeRTCRefresh()+0xaa>
c00188e9:	51                   	push   ecx
c00188ea:	51                   	push   ecx
c00188eb:	6a 00                	push   0x0
c00188ed:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188f3:	e8 80 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00188f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00188fc:	5b                   	pop    ebx
c00188fd:	5e                   	pop    esi
c00188fe:	6a 02                	push   0x2
c0018900:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018906:	e8 6d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001890b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001890f:	5d                   	pop    ebp
c0018910:	58                   	pop    eax
c0018911:	6a 04                	push   0x4
c0018913:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018919:	e8 5a e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001891e:	88 c3                	mov    bl,al
c0018920:	58                   	pop    eax
c0018921:	5a                   	pop    edx
c0018922:	6a 07                	push   0x7
c0018924:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001892a:	e8 49 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001892f:	59                   	pop    ecx
c0018930:	89 c6                	mov    esi,eax
c0018932:	5d                   	pop    ebp
c0018933:	6a 08                	push   0x8
c0018935:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001893b:	e8 38 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018940:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018944:	58                   	pop    eax
c0018945:	5a                   	pop    edx
c0018946:	6a 09                	push   0x9
c0018948:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001894e:	e8 25 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018953:	89 f9                	mov    ecx,edi
c0018955:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018959:	0f b6 e8             	movzx  ebp,al
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018963:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018968:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001896d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018971:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018975:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018979:	0f 94 c0             	sete   al
c001897c:	0f b6 fb             	movzx  edi,bl
c001897f:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018983:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018988:	0f 94 c2             	sete   dl
c001898b:	21 d0                	and    eax,edx
c001898d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018991:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018995:	0f 94 c2             	sete   dl
c0018998:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001899c:	21 c2                	and    edx,eax
c001899e:	89 f0                	mov    eax,esi
c00189a0:	0f b6 c0             	movzx  eax,al
c00189a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189a7:	89 f0                	mov    eax,esi
c00189a9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189ad:	0f 94 c0             	sete   al
c00189b0:	21 d0                	and    eax,edx
c00189b2:	31 d2                	xor    edx,edx
c00189b4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189b8:	0f 94 c2             	sete   dl
c00189bb:	85 c2                	test   edx,eax
c00189bd:	75 27                	jne    c00189e6 <RTC::completeRTCRefresh()+0x1c8>
c00189bf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00189c3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00189c7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00189cb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00189cf:	89 f0                	mov    eax,esi
c00189d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00189d5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00189d9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189dd:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00189e1:	e9 dc fe ff ff       	jmp    c00188c2 <RTC::completeRTCRefresh()+0xa4>
c00189e6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189ea:	75 d3                	jne    c00189bf <RTC::completeRTCRefresh()+0x1a1>
c00189ec:	52                   	push   edx
c00189ed:	52                   	push   edx
c00189ee:	6a 0b                	push   0xb
c00189f0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189f6:	e8 7d e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00189fb:	83 c4 10             	add    esp,0x10
c00189fe:	a8 04                	test   al,0x4
c0018a00:	75 7a                	jne    c0018a7c <RTC::completeRTCRefresh()+0x25e>
c0018a02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a0a:	83 e1 0f             	and    ecx,0xf
c0018a0d:	c1 ea 04             	shr    edx,0x4
c0018a10:	c1 ef 04             	shr    edi,0x4
c0018a13:	6b d2 0a             	imul   edx,edx,0xa
c0018a16:	83 e6 0f             	and    esi,0xf
c0018a19:	01 d1                	add    ecx,edx
c0018a1b:	c1 ed 04             	shr    ebp,0x4
c0018a1e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a2a:	c1 ea 04             	shr    edx,0x4
c0018a2d:	83 e1 0f             	and    ecx,0xf
c0018a30:	6b d2 0a             	imul   edx,edx,0xa
c0018a33:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a36:	01 d1                	add    ecx,edx
c0018a38:	89 fa                	mov    edx,edi
c0018a3a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a3e:	83 e2 07             	and    edx,0x7
c0018a41:	89 d9                	mov    ecx,ebx
c0018a43:	6b d2 0a             	imul   edx,edx,0xa
c0018a46:	83 e1 0f             	and    ecx,0xf
c0018a49:	83 e3 80             	and    ebx,0xffffff80
c0018a4c:	01 d1                	add    ecx,edx
c0018a4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a52:	09 cb                	or     ebx,ecx
c0018a54:	c1 ea 04             	shr    edx,0x4
c0018a57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a5b:	6b d2 0a             	imul   edx,edx,0xa
c0018a5e:	83 e1 0f             	and    ecx,0xf
c0018a61:	01 d6                	add    esi,edx
c0018a63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a67:	c1 ea 04             	shr    edx,0x4
c0018a6a:	6b d2 0a             	imul   edx,edx,0xa
c0018a6d:	01 d1                	add    ecx,edx
c0018a6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a73:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a77:	83 e2 0f             	and    edx,0xf
c0018a7a:	01 d5                	add    ebp,edx
c0018a7c:	a8 02                	test   al,0x2
c0018a7e:	75 15                	jne    c0018a95 <RTC::completeRTCRefresh()+0x277>
c0018a80:	f6 c3 80             	test   bl,0x80
c0018a83:	74 10                	je     c0018a95 <RTC::completeRTCRefresh()+0x277>
c0018a85:	83 e3 7f             	and    ebx,0x7f
c0018a88:	b9 18 00 00 00       	mov    ecx,0x18
c0018a8d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a90:	99                   	cdq    
c0018a91:	f7 f9                	idiv   ecx
c0018a93:	88 d3                	mov    bl,dl
c0018a95:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018a9b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018aa1:	77 06                	ja     c0018aa9 <RTC::completeRTCRefresh()+0x28b>
c0018aa3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018aa9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018aae:	31 c9                	xor    ecx,ecx
c0018ab0:	c1 e0 10             	shl    eax,0x10
c0018ab3:	89 cd                	mov    ebp,ecx
c0018ab5:	c1 e7 10             	shl    edi,0x10
c0018ab8:	31 d2                	xor    edx,edx
c0018aba:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018ac0:	09 c5                	or     ebp,eax
c0018ac2:	89 f0                	mov    eax,esi
c0018ac4:	89 e9                	mov    ecx,ebp
c0018ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018aca:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018ace:	88 c2                	mov    dl,al
c0018ad0:	88 d9                	mov    cl,bl
c0018ad2:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018ad6:	0f b7 c2             	movzx  eax,dx
c0018ad9:	09 f8                	or     eax,edi
c0018adb:	89 c2                	mov    edx,eax
c0018add:	50                   	push   eax
c0018ade:	50                   	push   eax
c0018adf:	51                   	push   ecx
c0018ae0:	52                   	push   edx
c0018ae1:	e8 75 3b ff ff       	call   c000c65b <datetimeToSeconds(datetime_t)>
c0018ae6:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018aea:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018af0:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018af6:	83 c4 4c             	add    esp,0x4c
c0018af9:	5b                   	pop    ebx
c0018afa:	5e                   	pop    esi
c0018afb:	5f                   	pop    edi
c0018afc:	5d                   	pop    ebp
c0018afd:	c3                   	ret    

c0018afe <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018afe:	55                   	push   ebp
c0018aff:	57                   	push   edi
c0018b00:	56                   	push   esi
c0018b01:	53                   	push   ebx
c0018b02:	83 ec 30             	sub    esp,0x30
c0018b05:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b09:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b0d:	6a 00                	push   0x0
c0018b0f:	6a 00                	push   0x0
c0018b11:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b17:	e8 76 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b1c:	83 c4 0c             	add    esp,0xc
c0018b1f:	6a 00                	push   0x0
c0018b21:	6a 02                	push   0x2
c0018b23:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b29:	e8 64 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b2e:	31 d2                	xor    edx,edx
c0018b30:	89 f9                	mov    ecx,edi
c0018b32:	89 f8                	mov    eax,edi
c0018b34:	c1 e9 10             	shr    ecx,0x10
c0018b37:	0f b6 c4             	movzx  eax,ah
c0018b3a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b3e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b46:	b9 64 00 00 00       	mov    ecx,0x64
c0018b4b:	89 f0                	mov    eax,esi
c0018b4d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b51:	89 f0                	mov    eax,esi
c0018b53:	0f b6 c4             	movzx  eax,ah
c0018b56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b5a:	89 f0                	mov    eax,esi
c0018b5c:	c1 e8 10             	shr    eax,0x10
c0018b5f:	f7 f1                	div    ecx
c0018b61:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b65:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b69:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b6d:	59                   	pop    ecx
c0018b6e:	5b                   	pop    ebx
c0018b6f:	89 fb                	mov    ebx,edi
c0018b71:	6a 0b                	push   0xb
c0018b73:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b79:	e8 fa e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	89 c5                	mov    ebp,eax
c0018b83:	a8 04                	test   al,0x4
c0018b85:	75 6e                	jne    c0018bf5 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b87:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b8b:	31 d2                	xor    edx,edx
c0018b8d:	0f b6 c1             	movzx  eax,cl
c0018b90:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b95:	f7 f1                	div    ecx
c0018b97:	c1 e0 04             	shl    eax,0x4
c0018b9a:	09 d0                	or     eax,edx
c0018b9c:	31 d2                	xor    edx,edx
c0018b9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ba2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018ba7:	f7 f1                	div    ecx
c0018ba9:	c1 e0 04             	shl    eax,0x4
c0018bac:	09 d0                	or     eax,edx
c0018bae:	31 d2                	xor    edx,edx
c0018bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bb4:	0f b6 c3             	movzx  eax,bl
c0018bb7:	f7 f1                	div    ecx
c0018bb9:	c1 e0 04             	shl    eax,0x4
c0018bbc:	09 d0                	or     eax,edx
c0018bbe:	31 d2                	xor    edx,edx
c0018bc0:	89 c3                	mov    ebx,eax
c0018bc2:	89 f0                	mov    eax,esi
c0018bc4:	0f b6 c0             	movzx  eax,al
c0018bc7:	f7 f1                	div    ecx
c0018bc9:	c1 e0 04             	shl    eax,0x4
c0018bcc:	09 d0                	or     eax,edx
c0018bce:	31 d2                	xor    edx,edx
c0018bd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018bd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bd9:	f7 f1                	div    ecx
c0018bdb:	c1 e0 04             	shl    eax,0x4
c0018bde:	09 d0                	or     eax,edx
c0018be0:	31 d2                	xor    edx,edx
c0018be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018be6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bea:	f7 f1                	div    ecx
c0018bec:	c1 e0 04             	shl    eax,0x4
c0018bef:	09 d0                	or     eax,edx
c0018bf1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bf5:	83 e5 02             	and    ebp,0x2
c0018bf8:	75 1e                	jne    c0018c18 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018bfa:	0f b6 c3             	movzx  eax,bl
c0018bfd:	83 f8 0b             	cmp    eax,0xb
c0018c00:	76 10                	jbe    c0018c12 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c02:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c05:	88 d3                	mov    bl,dl
c0018c07:	84 d2                	test   dl,dl
c0018c09:	75 02                	jne    c0018c0d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c0b:	b3 0c                	mov    bl,0xc
c0018c0d:	83 cb 80             	or     ebx,0xffffff80
c0018c10:	eb 06                	jmp    c0018c18 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c12:	85 c0                	test   eax,eax
c0018c14:	75 02                	jne    c0018c18 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c16:	b3 0c                	mov    bl,0xc
c0018c18:	0f b6 db             	movzx  ebx,bl
c0018c1b:	50                   	push   eax
c0018c1c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c21:	52                   	push   edx
c0018c22:	6a 00                	push   0x0
c0018c24:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c2a:	e8 63 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c2f:	83 c4 0c             	add    esp,0xc
c0018c32:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c37:	50                   	push   eax
c0018c38:	6a 02                	push   0x2
c0018c3a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c40:	e8 4d e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c45:	83 c4 0c             	add    esp,0xc
c0018c48:	53                   	push   ebx
c0018c49:	6a 04                	push   0x4
c0018c4b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c51:	e8 3c e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c56:	83 c4 0c             	add    esp,0xc
c0018c59:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c5e:	52                   	push   edx
c0018c5f:	6a 07                	push   0x7
c0018c61:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c67:	e8 26 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c6c:	83 c4 0c             	add    esp,0xc
c0018c6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c74:	50                   	push   eax
c0018c75:	6a 08                	push   0x8
c0018c77:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c7d:	e8 10 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c82:	83 c4 0c             	add    esp,0xc
c0018c85:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c8a:	55                   	push   ebp
c0018c8b:	6a 09                	push   0x9
c0018c8d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c93:	e8 fa e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c98:	5a                   	pop    edx
c0018c99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018c9d:	e8 7c fb ff ff       	call   c001881e <RTC::completeRTCRefresh()>
c0018ca2:	83 c4 3c             	add    esp,0x3c
c0018ca5:	b0 01                	mov    al,0x1
c0018ca7:	5b                   	pop    ebx
c0018ca8:	5e                   	pop    esi
c0018ca9:	5f                   	pop    edi
c0018caa:	5d                   	pop    ebp
c0018cab:	c3                   	ret    

c0018cac <rtcIRQHandler(regs*, void*)>:
c0018cac:	53                   	push   ebx
c0018cad:	83 ec 10             	sub    esp,0x10
c0018cb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018cb4:	6a 0c                	push   0xc
c0018cb6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cbc:	e8 b7 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	a8 80                	test   al,0x80
c0018cc6:	74 24                	je     c0018cec <rtcIRQHandler(regs*, void*)+0x40>
c0018cc8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018ccf:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018cd6:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018cdd:	75 0d                	jne    c0018cec <rtcIRQHandler(regs*, void*)+0x40>
c0018cdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018ce3:	83 c4 08             	add    esp,0x8
c0018ce6:	5b                   	pop    ebx
c0018ce7:	e9 32 fb ff ff       	jmp    c001881e <RTC::completeRTCRefresh()>
c0018cec:	83 c4 08             	add    esp,0x8
c0018cef:	5b                   	pop    ebx
c0018cf0:	c3                   	ret    
c0018cf1:	90                   	nop

c0018cf2 <RTC::RTC()>:
c0018cf2:	83 ec 1c             	sub    esp,0x1c
c0018cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cf9:	83 ec 08             	sub    esp,0x8
c0018cfc:	68 0f 2e 02 c0       	push   0xc0022e0f
c0018d01:	50                   	push   eax
c0018d02:	e8 2f 38 ff ff       	call   c000c536 <Clock::Clock(char const*)>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c0018d0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d13:	89 10                	mov    DWORD PTR [eax],edx
c0018d15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d19:	83 ec 0c             	sub    esp,0xc
c0018d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d20:	6a 01                	push   0x1
c0018d22:	68 ac 8c 01 c0       	push   0xc0018cac
c0018d27:	6a 08                	push   0x8
c0018d29:	50                   	push   eax
c0018d2a:	e8 e3 3c ff ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d2f:	83 c4 20             	add    esp,0x20
c0018d32:	89 c2                	mov    edx,eax
c0018d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d38:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d3e:	fa                   	cli    
c0018d3f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d44:	83 c0 01             	add    eax,0x1
c0018d47:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d4c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d51:	83 ec 08             	sub    esp,0x8
c0018d54:	6a 0b                	push   0xb
c0018d56:	50                   	push   eax
c0018d57:	e8 1c e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018d5c:	83 c4 10             	add    esp,0x10
c0018d5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d63:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d68:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d6c:	83 ca 10             	or     edx,0x10
c0018d6f:	0f b6 d2             	movzx  edx,dl
c0018d72:	83 ec 04             	sub    esp,0x4
c0018d75:	52                   	push   edx
c0018d76:	6a 0b                	push   0xb
c0018d78:	50                   	push   eax
c0018d79:	e8 14 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d7e:	83 c4 10             	add    esp,0x10
c0018d81:	83 ec 0c             	sub    esp,0xc
c0018d84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d88:	e8 91 fa ff ff       	call   c001881e <RTC::completeRTCRefresh()>
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d95:	83 e8 01             	sub    eax,0x1
c0018d98:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d9d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018da2:	85 c0                	test   eax,eax
c0018da4:	75 01                	jne    c0018da7 <RTC::RTC()+0xb5>
c0018da6:	fb                   	sti    
c0018da7:	90                   	nop
c0018da8:	83 c4 1c             	add    esp,0x1c
c0018dab:	c3                   	ret    

c0018dac <HalConsoleScroll(int, int)>:
c0018dac:	83 ec 10             	sub    esp,0x10
c0018daf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018db7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018dbf:	90                   	nop
c0018dc0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018dc5:	0f 8f e1 00 00 00    	jg     c0018eac <HalConsoleScroll(int, int)+0x100>
c0018dcb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018dd3:	90                   	nop
c0018dd4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018ddc:	0f 8f be 00 00 00    	jg     c0018ea0 <HalConsoleScroll(int, int)+0xf4>
c0018de2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018de6:	89 d0                	mov    eax,edx
c0018de8:	c1 e0 02             	shl    eax,0x2
c0018deb:	01 d0                	add    eax,edx
c0018ded:	c1 e0 05             	shl    eax,0x5
c0018df0:	89 c2                	mov    edx,eax
c0018df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018df6:	01 d0                	add    eax,edx
c0018df8:	89 c2                	mov    edx,eax
c0018dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dfe:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e05:	89 d0                	mov    eax,edx
c0018e07:	c1 e0 02             	shl    eax,0x2
c0018e0a:	01 d0                	add    eax,edx
c0018e0c:	c1 e0 05             	shl    eax,0x5
c0018e0f:	89 c2                	mov    edx,eax
c0018e11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e15:	01 d0                	add    eax,edx
c0018e17:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e21:	01 c2                	add    edx,eax
c0018e23:	8a 01                	mov    al,BYTE PTR [ecx]
c0018e25:	88 02                	mov    BYTE PTR [edx],al
c0018e27:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e2c:	75 66                	jne    c0018e94 <HalConsoleScroll(int, int)+0xe8>
c0018e2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e32:	83 e0 01             	and    eax,0x1
c0018e35:	74 39                	je     c0018e70 <HalConsoleScroll(int, int)+0xc4>
c0018e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e3b:	83 e0 0f             	and    eax,0xf
c0018e3e:	88 c2                	mov    dl,al
c0018e40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e44:	c1 e0 04             	shl    eax,0x4
c0018e47:	09 d0                	or     eax,edx
c0018e49:	88 c1                	mov    cl,al
c0018e4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e4f:	89 d0                	mov    eax,edx
c0018e51:	c1 e0 02             	shl    eax,0x2
c0018e54:	01 d0                	add    eax,edx
c0018e56:	c1 e0 05             	shl    eax,0x5
c0018e59:	89 c2                	mov    edx,eax
c0018e5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e5f:	01 d0                	add    eax,edx
c0018e61:	89 c2                	mov    edx,eax
c0018e63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e67:	01 d0                	add    eax,edx
c0018e69:	88 ca                	mov    dl,cl
c0018e6b:	88 10                	mov    BYTE PTR [eax],dl
c0018e6d:	eb 25                	jmp    c0018e94 <HalConsoleScroll(int, int)+0xe8>
c0018e6f:	90                   	nop
c0018e70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e74:	89 d0                	mov    eax,edx
c0018e76:	c1 e0 02             	shl    eax,0x2
c0018e79:	01 d0                	add    eax,edx
c0018e7b:	c1 e0 05             	shl    eax,0x5
c0018e7e:	89 c2                	mov    edx,eax
c0018e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e84:	01 d0                	add    eax,edx
c0018e86:	89 c2                	mov    edx,eax
c0018e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e8c:	01 d0                	add    eax,edx
c0018e8e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e91:	8d 76 00             	lea    esi,[esi+0x0]
c0018e94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018e99:	e9 36 ff ff ff       	jmp    c0018dd4 <HalConsoleScroll(int, int)+0x28>
c0018e9e:	66 90                	xchg   ax,ax
c0018ea0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ea5:	e9 16 ff ff ff       	jmp    c0018dc0 <HalConsoleScroll(int, int)+0x14>
c0018eaa:	66 90                	xchg   ax,ax
c0018eac:	90                   	nop
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	c3                   	ret    
c0018eb1:	8d 76 00             	lea    esi,[esi+0x0]

c0018eb4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018eb4:	83 ec 14             	sub    esp,0x14
c0018eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ebb:	88 04 24             	mov    BYTE PTR [esp],al
c0018ebe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018ec1:	0f b6 c0             	movzx  eax,al
c0018ec4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ec8:	89 d1                	mov    ecx,edx
c0018eca:	83 e1 0f             	and    ecx,0xf
c0018ecd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ed1:	c1 e2 04             	shl    edx,0x4
c0018ed4:	0f b6 d2             	movzx  edx,dl
c0018ed7:	09 ca                	or     edx,ecx
c0018ed9:	c1 e2 08             	shl    edx,0x8
c0018edc:	09 d0                	or     eax,edx
c0018ede:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018ee3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018eeb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018eef:	89 d0                	mov    eax,edx
c0018ef1:	c1 e0 02             	shl    eax,0x2
c0018ef4:	01 d0                	add    eax,edx
c0018ef6:	c1 e0 04             	shl    eax,0x4
c0018ef9:	89 c2                	mov    edx,eax
c0018efb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018eff:	01 d0                	add    eax,edx
c0018f01:	01 c0                	add    eax,eax
c0018f03:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f0b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018f10:	66 89 02             	mov    WORD PTR [edx],ax
c0018f13:	90                   	nop
c0018f14:	83 c4 14             	add    esp,0x14
c0018f17:	c3                   	ret    

c0018f18 <HalConsoleCursorUpdate(int, int)>:
c0018f18:	83 ec 20             	sub    esp,0x20
c0018f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f1f:	89 c2                	mov    edx,eax
c0018f21:	c1 e2 02             	shl    edx,0x2
c0018f24:	01 d0                	add    eax,edx
c0018f26:	c1 e0 04             	shl    eax,0x4
c0018f29:	89 c2                	mov    edx,eax
c0018f2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f2f:	01 d0                	add    eax,edx
c0018f31:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f36:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f3d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f4a:	ee                   	out    dx,al
c0018f4b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f50:	0f b6 c0             	movzx  eax,al
c0018f53:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f5a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f5e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f66:	ee                   	out    dx,al
c0018f67:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f6e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f7b:	ee                   	out    dx,al
c0018f7c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f81:	c1 e8 08             	shr    eax,0x8
c0018f84:	0f b6 c0             	movzx  eax,al
c0018f87:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f8e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f92:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018f96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f9a:	ee                   	out    dx,al
c0018f9b:	90                   	nop
c0018f9c:	83 c4 20             	add    esp,0x20
c0018f9f:	c3                   	ret    

c0018fa0 <FAT::getName()>:
c0018fa0:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c0018fa5:	c3                   	ret    
c0018fa6:	66 90                	xchg   ax,ax

c0018fa8 <FAT::tell(void*, unsigned long long*)>:
c0018fa8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fad:	75 09                	jne    c0018fb8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018faf:	b8 04 00 00 00       	mov    eax,0x4
c0018fb4:	c3                   	ret    
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fbd:	75 09                	jne    c0018fc8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018fbf:	b8 04 00 00 00       	mov    eax,0x4
c0018fc4:	c3                   	ret    
c0018fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fcc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018fcf:	ba 00 00 00 00       	mov    edx,0x0
c0018fd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fd8:	89 01                	mov    DWORD PTR [ecx],eax
c0018fda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fdd:	b8 00 00 00 00       	mov    eax,0x0
c0018fe2:	c3                   	ret    
c0018fe3:	90                   	nop

c0018fe4 <FAT::stat(void*, unsigned long long*)>:
c0018fe4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fe9:	75 09                	jne    c0018ff4 <FAT::stat(void*, unsigned long long*)+0x10>
c0018feb:	b8 04 00 00 00       	mov    eax,0x4
c0018ff0:	c3                   	ret    
c0018ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ff9:	75 09                	jne    c0019004 <FAT::stat(void*, unsigned long long*)+0x20>
c0018ffb:	b8 04 00 00 00       	mov    eax,0x4
c0019000:	c3                   	ret    
c0019001:	8d 76 00             	lea    esi,[esi+0x0]
c0019004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019008:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001900b:	ba 00 00 00 00       	mov    edx,0x0
c0019010:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019014:	89 01                	mov    DWORD PTR [ecx],eax
c0019016:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019019:	b8 00 00 00 00       	mov    eax,0x0
c001901e:	c3                   	ret    
c001901f:	90                   	nop

c0019020 <FAT::~FAT()>:
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0019028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001902c:	89 10                	mov    DWORD PTR [eax],edx
c001902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019032:	83 ec 0c             	sub    esp,0xc
c0019035:	50                   	push   eax
c0019036:	e8 35 28 ff ff       	call   c000b870 <Filesystem::~Filesystem()>
c001903b:	83 c4 10             	add    esp,0x10
c001903e:	90                   	nop
c001903f:	83 c4 0c             	add    esp,0xc
c0019042:	c3                   	ret    
c0019043:	90                   	nop

c0019044 <FAT::~FAT()>:
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	83 ec 0c             	sub    esp,0xc
c001904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001904e:	e8 cd ff ff ff       	call   c0019020 <FAT::~FAT()>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	83 ec 08             	sub    esp,0x8
c0019059:	6a 08                	push   0x8
c001905b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001905f:	e8 b4 17 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	83 c4 0c             	add    esp,0xc
c001906a:	c3                   	ret    
c001906b:	90                   	nop

c001906c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001906c:	83 ec 1c             	sub    esp,0x1c
c001906f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019076:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001907b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001907f:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019086:	83 f8 ff             	cmp    eax,0xffffffff
c0019089:	75 35                	jne    c00190c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001908b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001908f:	88 c2                	mov    dl,al
c0019091:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019096:	01 d0                	add    eax,edx
c0019098:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001909c:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190a6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190ad:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190b6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190bd:	eb 19                	jmp    c00190d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00190bf:	90                   	nop
c00190c0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190c4:	88 c2                	mov    dl,al
c00190c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190ca:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190d1:	01 d0                	add    eax,edx
c00190d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190d7:	90                   	nop
c00190d8:	83 ec 04             	sub    esp,0x4
c00190db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190e3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190e7:	50                   	push   eax
c00190e8:	e8 e2 be fe ff       	call   c0004fcf <f_getlabel>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00190f9:	75 09                	jne    c0019104 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00190fb:	b8 00 00 00 00       	mov    eax,0x0
c0019100:	eb 0a                	jmp    c001910c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019102:	66 90                	xchg   ax,ax
c0019104:	b8 01 00 00 00       	mov    eax,0x1
c0019109:	8d 76 00             	lea    esi,[esi+0x0]
c001910c:	83 c4 1c             	add    esp,0x1c
c001910f:	c3                   	ret    

c0019110 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019110:	57                   	push   edi
c0019111:	83 ec 58             	sub    esp,0x58
c0019114:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001911c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019120:	b8 00 00 00 00       	mov    eax,0x0
c0019125:	b9 0f 00 00 00       	mov    ecx,0xf
c001912a:	fc                   	cld    
c001912b:	89 d7                	mov    edi,edx
c001912d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001912f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019133:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001913a:	83 f8 ff             	cmp    eax,0xffffffff
c001913d:	75 35                	jne    c0019174 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001913f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019143:	88 c2                	mov    dl,al
c0019145:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001914a:	01 d0                	add    eax,edx
c001914c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019150:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019156:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001915a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019161:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019166:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001916a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019171:	eb 19                	jmp    c001918c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019173:	90                   	nop
c0019174:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019178:	88 c2                	mov    dl,al
c001917a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001917e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019185:	01 d0                	add    eax,edx
c0019187:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001918b:	90                   	nop
c001918c:	83 ec 08             	sub    esp,0x8
c001918f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019193:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019197:	50                   	push   eax
c0019198:	e8 a3 76 fe ff       	call   c0000840 <strcat>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	83 ec 0c             	sub    esp,0xc
c00191a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a7:	50                   	push   eax
c00191a8:	e8 73 bf fe ff       	call   c0005120 <f_setlabel>
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00191b9:	75 09                	jne    c00191c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00191bb:	b8 00 00 00 00       	mov    eax,0x0
c00191c0:	eb 0a                	jmp    c00191cc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	b8 01 00 00 00       	mov    eax,0x1
c00191c9:	8d 76 00             	lea    esi,[esi+0x0]
c00191cc:	83 c4 58             	add    esp,0x58
c00191cf:	5f                   	pop    edi
c00191d0:	c3                   	ret    
c00191d1:	90                   	nop
c00191d2:	66 90                	xchg   ax,ax

c00191d4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191d4:	83 ec 2c             	sub    esp,0x2c
c00191d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00191df:	83 ec 08             	sub    esp,0x8
c00191e2:	68 84 2e 02 c0       	push   0xc0022e84
c00191e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191eb:	e8 60 75 fe ff       	call   c0000750 <strcmp>
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	85 c0                	test   eax,eax
c00191f5:	0f 94 c0             	sete   al
c00191f8:	0f b6 c0             	movzx  eax,al
c00191fb:	85 c0                	test   eax,eax
c00191fd:	74 0d                	je     c001920c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00191ff:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019207:	e9 c0 00 00 00       	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001920c:	83 ec 08             	sub    esp,0x8
c001920f:	68 76 2e 02 c0       	push   0xc0022e76
c0019214:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019218:	e8 33 75 fe ff       	call   c0000750 <strcmp>
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	85 c0                	test   eax,eax
c0019222:	0f 94 c0             	sete   al
c0019225:	0f b6 c0             	movzx  eax,al
c0019228:	85 c0                	test   eax,eax
c001922a:	74 10                	je     c001923c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001922c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019234:	e9 93 00 00 00       	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019239:	8d 76 00             	lea    esi,[esi+0x0]
c001923c:	83 ec 08             	sub    esp,0x8
c001923f:	68 7c 2e 02 c0       	push   0xc0022e7c
c0019244:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019248:	e8 03 75 fe ff       	call   c0000750 <strcmp>
c001924d:	83 c4 10             	add    esp,0x10
c0019250:	85 c0                	test   eax,eax
c0019252:	0f 94 c0             	sete   al
c0019255:	0f b6 c0             	movzx  eax,al
c0019258:	85 c0                	test   eax,eax
c001925a:	74 0c                	je     c0019268 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001925c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019264:	eb 66                	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019266:	66 90                	xchg   ax,ax
c0019268:	83 ec 08             	sub    esp,0x8
c001926b:	68 bc 05 02 c0       	push   0xc00205bc
c0019270:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019274:	e8 d7 74 fe ff       	call   c0000750 <strcmp>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	85 c0                	test   eax,eax
c001927e:	0f 94 c0             	sete   al
c0019281:	0f b6 c0             	movzx  eax,al
c0019284:	85 c0                	test   eax,eax
c0019286:	74 0c                	je     c0019294 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019288:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019290:	eb 3a                	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019292:	66 90                	xchg   ax,ax
c0019294:	83 ec 08             	sub    esp,0x8
c0019297:	68 82 2e 02 c0       	push   0xc0022e82
c001929c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192a0:	e8 ab 74 fe ff       	call   c0000750 <strcmp>
c00192a5:	83 c4 10             	add    esp,0x10
c00192a8:	85 c0                	test   eax,eax
c00192aa:	0f 94 c0             	sete   al
c00192ad:	0f b6 c0             	movzx  eax,al
c00192b0:	85 c0                	test   eax,eax
c00192b2:	74 0c                	je     c00192c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192b4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00192bc:	eb 0e                	jmp    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192be:	66 90                	xchg   ax,ax
c00192c0:	b8 08 00 00 00       	mov    eax,0x8
c00192c5:	e9 ea 00 00 00       	jmp    c00193b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192ca:	66 90                	xchg   ax,ax
c00192cc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192d3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00192d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00192dc:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00192e3:	83 f8 ff             	cmp    eax,0xffffffff
c00192e6:	75 34                	jne    c001931c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00192e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00192ec:	88 c2                	mov    dl,al
c00192ee:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192f3:	01 d0                	add    eax,edx
c00192f5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00192f9:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019303:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001930a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001930f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019313:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001931a:	eb 18                	jmp    c0019334 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001931c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019320:	88 c2                	mov    dl,al
c0019322:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019326:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001932d:	01 d0                	add    eax,edx
c001932f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019333:	90                   	nop
c0019334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019338:	88 04 24             	mov    BYTE PTR [esp],al
c001933b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001933f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019343:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001934b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019350:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	68 00 20 00 00       	push   0x2000
c0019360:	e8 51 e7 fe ff       	call   c0007ab6 <malloc>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001936c:	68 00 20 00 00       	push   0x2000
c0019371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019375:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019379:	50                   	push   eax
c001937a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001937e:	50                   	push   eax
c001937f:	e8 99 c0 fe ff       	call   c000541d <f_mkfs>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001938b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019390:	75 0a                	jne    c001939c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019392:	b8 00 00 00 00       	mov    eax,0x0
c0019397:	eb 1b                	jmp    c00193b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019399:	8d 76 00             	lea    esi,[esi+0x0]
c001939c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193a1:	75 09                	jne    c00193ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193a3:	b8 09 00 00 00       	mov    eax,0x9
c00193a8:	eb 0a                	jmp    c00193b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193aa:	66 90                	xchg   ax,ax
c00193ac:	b8 01 00 00 00       	mov    eax,0x1
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	83 c4 2c             	add    esp,0x2c
c00193b7:	c3                   	ret    

c00193b8 <FAT::tryMount(LogicalDisk*, int)>:
c00193b8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00193be:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193c3:	83 f8 14             	cmp    eax,0x14
c00193c6:	75 18                	jne    c00193e0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193c8:	83 ec 0c             	sub    esp,0xc
c00193cb:	68 88 2e 02 c0       	push   0xc0022e88
c00193d0:	e8 ea 82 ff ff       	call   c00116bf <KePanic(char const*)>
c00193d5:	83 c4 10             	add    esp,0x10
c00193d8:	b0 00                	mov    al,0x0
c00193da:	e9 ed 01 00 00       	jmp    c00195cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193df:	90                   	nop
c00193e0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00193e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00193ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00193f3:	3d 00 02 00 00       	cmp    eax,0x200
c00193f8:	74 0a                	je     c0019404 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00193fa:	b0 00                	mov    al,0x0
c00193fc:	e9 cb 01 00 00       	jmp    c00195cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019401:	8d 76 00             	lea    esi,[esi+0x0]
c0019404:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001940c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019413:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001941a:	83 f8 ff             	cmp    eax,0xffffffff
c001941d:	74 09                	je     c0019428 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001941f:	b0 01                	mov    al,0x1
c0019421:	e9 a6 01 00 00       	jmp    c00195cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019426:	66 90                	xchg   ax,ax
c0019428:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019432:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001943a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019441:	88 c2                	mov    dl,al
c0019443:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019448:	01 d0                	add    eax,edx
c001944a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019451:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019457:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001945e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019465:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001946a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019471:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019478:	83 ec 0c             	sub    esp,0xc
c001947b:	68 34 02 00 00       	push   0x234
c0019480:	e8 31 e6 fe ff       	call   c0007ab6 <malloc>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001948f:	83 ec 04             	sub    esp,0x4
c0019492:	6a 00                	push   0x0
c0019494:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001949b:	50                   	push   eax
c001949c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194a3:	e8 50 a7 fe ff       	call   c0003bf8 <f_mount>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194b2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00194ba:	74 1c                	je     c00194d8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194c6:	e8 0b e6 fe ff       	call   c0007ad6 <rfree>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	b0 00                	mov    al,0x0
c00194d0:	e9 f7 00 00 00       	jmp    c00195cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 ec 04             	sub    esp,0x4
c00194db:	68 00 01 00 00       	push   0x100
c00194e0:	6a 00                	push   0x0
c00194e2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00194e9:	50                   	push   eax
c00194ea:	e8 01 70 fe ff       	call   c00004f0 <memset>
c00194ef:	83 c4 10             	add    esp,0x10
c00194f2:	83 ec 08             	sub    esp,0x8
c00194f5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194fc:	50                   	push   eax
c00194fd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019504:	50                   	push   eax
c0019505:	e8 36 73 fe ff       	call   c0000840 <strcat>
c001950a:	83 c4 10             	add    esp,0x10
c001950d:	83 ec 08             	sub    esp,0x8
c0019510:	68 96 2e 02 c0       	push   0xc0022e96
c0019515:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001951c:	50                   	push   eax
c001951d:	e8 1e 73 fe ff       	call   c0000840 <strcat>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	83 ec 04             	sub    esp,0x4
c0019528:	6a 01                	push   0x1
c001952a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019531:	50                   	push   eax
c0019532:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019536:	50                   	push   eax
c0019537:	e8 1e a7 fe ff       	call   c0003c5a <f_open>
c001953c:	83 c4 10             	add    esp,0x10
c001953f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019546:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001954d:	85 c0                	test   eax,eax
c001954f:	74 0b                	je     c001955c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019551:	78 31                	js     c0019584 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019553:	83 e8 04             	sub    eax,0x4
c0019556:	83 f8 01             	cmp    eax,0x1
c0019559:	77 29                	ja     c0019584 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001955b:	90                   	nop
c001955c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019564:	83 ec 0c             	sub    esp,0xc
c0019567:	8d 44 24 14          	lea    eax,[esp+0x14]
c001956b:	50                   	push   eax
c001956c:	e8 b8 ae fe ff       	call   c0004429 <f_close>
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	90                   	nop
c0019575:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001957d:	85 c0                	test   eax,eax
c001957f:	74 43                	je     c00195c4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019581:	eb 31                	jmp    c00195b4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019583:	90                   	nop
c0019584:	83 ec 0c             	sub    esp,0xc
c0019587:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001958e:	e8 43 e5 fe ff       	call   c0007ad6 <rfree>
c0019593:	83 c4 10             	add    esp,0x10
c0019596:	83 ec 04             	sub    esp,0x4
c0019599:	6a 00                	push   0x0
c001959b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195a2:	50                   	push   eax
c00195a3:	6a 00                	push   0x0
c00195a5:	e8 4e a6 fe ff       	call   c0003bf8 <f_mount>
c00195aa:	83 c4 10             	add    esp,0x10
c00195ad:	b0 00                	mov    al,0x0
c00195af:	eb 1b                	jmp    c00195cc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195b1:	8d 76 00             	lea    esi,[esi+0x0]
c00195b4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00195b9:	83 c0 01             	add    eax,0x1
c00195bc:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195c1:	8d 76 00             	lea    esi,[esi+0x0]
c00195c4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195cb:	90                   	nop
c00195cc:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195d2:	c3                   	ret    
c00195d3:	90                   	nop

c00195d4 <FAT::allocateSwapfile(char const*, int)>:
c00195d4:	55                   	push   ebp
c00195d5:	57                   	push   edi
c00195d6:	56                   	push   esi
c00195d7:	53                   	push   ebx
c00195d8:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00195de:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00195e9:	83 ec 0c             	sub    esp,0xc
c00195ec:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00195f3:	e8 be e4 fe ff       	call   c0007ab6 <malloc>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	89 c7                	mov    edi,eax
c00195fd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019602:	83 ec 04             	sub    esp,0x4
c0019605:	50                   	push   eax
c0019606:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001960d:	57                   	push   edi
c001960e:	e8 db 25 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001961d:	83 ec 04             	sub    esp,0x4
c0019620:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019624:	50                   	push   eax
c0019625:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019629:	50                   	push   eax
c001962a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019631:	e8 d8 28 ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c0019636:	83 c4 10             	add    esp,0x10
c0019639:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019640:	c1 e0 14             	shl    eax,0x14
c0019643:	89 c7                	mov    edi,eax
c0019645:	89 c5                	mov    ebp,eax
c0019647:	c1 fd 1f             	sar    ebp,0x1f
c001964a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001964e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019652:	89 f9                	mov    ecx,edi
c0019654:	31 c1                	xor    ecx,eax
c0019656:	89 cb                	mov    ebx,ecx
c0019658:	89 e9                	mov    ecx,ebp
c001965a:	31 d1                	xor    ecx,edx
c001965c:	89 ce                	mov    esi,ecx
c001965e:	89 f0                	mov    eax,esi
c0019660:	09 d8                	or     eax,ebx
c0019662:	0f 84 9c 00 00 00    	je     c0019704 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019672:	e8 63 27 ff ff       	call   c000bdda <File::unlink()>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	83 ec 08             	sub    esp,0x8
c001967d:	6a 12                	push   0x12
c001967f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019686:	e8 81 25 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c001968b:	83 c4 10             	add    esp,0x10
c001968e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019695:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001969b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196a2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196a9:	c1 e0 14             	shl    eax,0x14
c00196ac:	83 ec 04             	sub    esp,0x4
c00196af:	6a 01                	push   0x1
c00196b1:	50                   	push   eax
c00196b2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00196b9:	e8 f2 bb fe ff       	call   c00052b0 <f_expand>
c00196be:	83 c4 10             	add    esp,0x10
c00196c1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00196ca:	83 c0 10             	add    eax,0x10
c00196cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00196cf:	83 ec 0c             	sub    esp,0xc
c00196d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196d6:	52                   	push   edx
c00196d7:	8d 54 24 30          	lea    edx,[esp+0x30]
c00196db:	52                   	push   edx
c00196dc:	6a 00                	push   0x0
c00196de:	68 00 04 00 00       	push   0x400
c00196e3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00196ea:	ff d0                	call   eax
c00196ec:	83 c4 20             	add    esp,0x20
c00196ef:	83 ec 0c             	sub    esp,0xc
c00196f2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196f9:	e8 6c 25 ff ff       	call   c000bc6a <File::close()>
c00196fe:	83 c4 10             	add    esp,0x10
c0019701:	8d 76 00             	lea    esi,[esi+0x0]
c0019704:	83 ec 08             	sub    esp,0x8
c0019707:	6a 01                	push   0x1
c0019709:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019710:	e8 f7 24 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001971f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019721:	83 c0 0c             	add    eax,0xc
c0019724:	8b 00                	mov    eax,DWORD PTR [eax]
c0019726:	83 ec 0c             	sub    esp,0xc
c0019729:	8d 54 24 24          	lea    edx,[esp+0x24]
c001972d:	52                   	push   edx
c001972e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019732:	52                   	push   edx
c0019733:	6a 00                	push   0x0
c0019735:	6a 04                	push   0x4
c0019737:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001973e:	ff d0                	call   eax
c0019740:	83 c4 20             	add    esp,0x20
c0019743:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001974a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019750:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019757:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001975e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019761:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019768:	83 ec 0c             	sub    esp,0xc
c001976b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019772:	e8 f3 24 ff ff       	call   c000bc6a <File::close()>
c0019777:	83 c4 10             	add    esp,0x10
c001977a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019781:	ba 00 00 00 00       	mov    edx,0x0
c0019786:	81 c4 3c 04 00 00    	add    esp,0x43c
c001978c:	5b                   	pop    ebx
c001978d:	5e                   	pop    esi
c001978e:	5f                   	pop    edi
c001978f:	5d                   	pop    ebp
c0019790:	c3                   	ret    
c0019791:	90                   	nop
c0019792:	66 90                	xchg   ax,ax

c0019794 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019794:	57                   	push   edi
c0019795:	56                   	push   esi
c0019796:	53                   	push   ebx
c0019797:	81 ec 50 02 00 00    	sub    esp,0x250
c001979d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197a5:	74 0d                	je     c00197b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197a7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197af:	75 0f                	jne    c00197c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197b1:	8d 76 00             	lea    esi,[esi+0x0]
c00197b4:	b8 04 00 00 00       	mov    eax,0x4
c00197b9:	e9 3a 01 00 00       	jmp    c00198f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197be:	66 90                	xchg   ax,ax
c00197c0:	83 ec 08             	sub    esp,0x8
c00197c3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197ca:	50                   	push   eax
c00197cb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197d2:	e8 1f af fe ff       	call   c00046f6 <f_readdir>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00197e1:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00197e8:	83 ec 0c             	sub    esp,0xc
c00197eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00197f2:	83 c0 16             	add    eax,0x16
c00197f5:	50                   	push   eax
c00197f6:	e8 75 6d fe ff       	call   c0000570 <strlen>
c00197fb:	83 c4 10             	add    esp,0x10
c00197fe:	ba 00 00 00 00       	mov    edx,0x0
c0019803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019807:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001980b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019812:	0f b6 c0             	movzx  eax,al
c0019815:	83 e0 10             	and    eax,0x10
c0019818:	74 0a                	je     c0019824 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001981a:	b8 02 00 00 00       	mov    eax,0x2
c001981f:	eb 0b                	jmp    c001982c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019821:	8d 76 00             	lea    esi,[esi+0x0]
c0019824:	b8 01 00 00 00       	mov    eax,0x1
c0019829:	8d 76 00             	lea    esi,[esi+0x0]
c001982c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019830:	83 ec 08             	sub    esp,0x8
c0019833:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001983a:	83 c0 16             	add    eax,0x16
c001983d:	50                   	push   eax
c001983e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019842:	83 c0 10             	add    eax,0x10
c0019845:	50                   	push   eax
c0019846:	e8 f5 6d fe ff       	call   c0000640 <strcpy>
c001984b:	83 c4 10             	add    esp,0x10
c001984e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019855:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001985c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019860:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019867:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001986e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019875:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001987c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019883:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001988a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019891:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019898:	89 c6                	mov    esi,eax
c001989a:	89 d7                	mov    edi,edx
c001989c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001989e:	89 c8                	mov    eax,ecx
c00198a0:	89 fa                	mov    edx,edi
c00198a2:	89 f3                	mov    ebx,esi
c00198a4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198ab:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198b2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00198b9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198c0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198c6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198cd:	0f be c0             	movsx  eax,al
c00198d0:	85 c0                	test   eax,eax
c00198d2:	75 08                	jne    c00198dc <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198d4:	b8 07 00 00 00       	mov    eax,0x7
c00198d9:	eb 1d                	jmp    c00198f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198db:	90                   	nop
c00198dc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00198e3:	85 c0                	test   eax,eax
c00198e5:	75 09                	jne    c00198f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00198e7:	b8 00 00 00 00       	mov    eax,0x0
c00198ec:	eb 0a                	jmp    c00198f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00198ee:	66 90                	xchg   ax,ax
c00198f0:	b8 01 00 00 00       	mov    eax,0x1
c00198f5:	8d 76 00             	lea    esi,[esi+0x0]
c00198f8:	81 c4 50 02 00 00    	add    esp,0x250
c00198fe:	5b                   	pop    ebx
c00198ff:	5e                   	pop    esi
c0019900:	5f                   	pop    edi
c0019901:	c3                   	ret    
c0019902:	66 90                	xchg   ax,ax

c0019904 <FAT::read(void*, unsigned long, void*, int*)>:
c0019904:	83 ec 1c             	sub    esp,0x1c
c0019907:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001990c:	74 0a                	je     c0019918 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001990e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019913:	75 0b                	jne    c0019920 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019915:	8d 76 00             	lea    esi,[esi+0x0]
c0019918:	b8 04 00 00 00       	mov    eax,0x4
c001991d:	eb 41                	jmp    c0019960 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001991f:	90                   	nop
c0019920:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019924:	50                   	push   eax
c0019925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019929:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001992d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019931:	e8 e7 a5 fe ff       	call   c0003f1d <f_read>
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001993d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019941:	89 c2                	mov    edx,eax
c0019943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019947:	89 10                	mov    DWORD PTR [eax],edx
c0019949:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001994d:	85 c0                	test   eax,eax
c001994f:	75 07                	jne    c0019958 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019951:	b8 00 00 00 00       	mov    eax,0x0
c0019956:	eb 08                	jmp    c0019960 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019958:	b8 01 00 00 00       	mov    eax,0x1
c001995d:	8d 76 00             	lea    esi,[esi+0x0]
c0019960:	83 c4 1c             	add    esp,0x1c
c0019963:	c3                   	ret    

c0019964 <FAT::write(void*, unsigned long, void*, int*)>:
c0019964:	83 ec 1c             	sub    esp,0x1c
c0019967:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001996c:	74 0a                	je     c0019978 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001996e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019973:	75 0b                	jne    c0019980 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	b8 04 00 00 00       	mov    eax,0x4
c001997d:	eb 41                	jmp    c00199c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001997f:	90                   	nop
c0019980:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019984:	50                   	push   eax
c0019985:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019989:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001998d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019991:	e8 86 a7 fe ff       	call   c000411c <f_write>
c0019996:	83 c4 10             	add    esp,0x10
c0019999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001999d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a1:	89 c2                	mov    edx,eax
c00199a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199a7:	89 10                	mov    DWORD PTR [eax],edx
c00199a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199ad:	85 c0                	test   eax,eax
c00199af:	75 07                	jne    c00199b8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199b1:	b8 00 00 00 00       	mov    eax,0x0
c00199b6:	eb 08                	jmp    c00199c0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199b8:	b8 01 00 00 00       	mov    eax,0x1
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	83 c4 1c             	add    esp,0x1c
c00199c3:	c3                   	ret    

c00199c4 <FAT::close(void*)>:
c00199c4:	83 ec 1c             	sub    esp,0x1c
c00199c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199cc:	75 0a                	jne    c00199d8 <FAT::close(void*)+0x14>
c00199ce:	b8 04 00 00 00       	mov    eax,0x4
c00199d3:	eb 3f                	jmp    c0019a14 <FAT::close(void*)+0x50>
c00199d5:	8d 76 00             	lea    esi,[esi+0x0]
c00199d8:	83 ec 0c             	sub    esp,0xc
c00199db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199df:	e8 45 aa fe ff       	call   c0004429 <f_close>
c00199e4:	83 c4 10             	add    esp,0x10
c00199e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199eb:	83 ec 0c             	sub    esp,0xc
c00199ee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199f2:	e8 cf e0 fe ff       	call   c0007ac6 <free>
c00199f7:	83 c4 10             	add    esp,0x10
c00199fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199fe:	85 c0                	test   eax,eax
c0019a00:	75 0a                	jne    c0019a0c <FAT::close(void*)+0x48>
c0019a02:	b8 00 00 00 00       	mov    eax,0x0
c0019a07:	eb 0b                	jmp    c0019a14 <FAT::close(void*)+0x50>
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	b8 01 00 00 00       	mov    eax,0x1
c0019a11:	8d 76 00             	lea    esi,[esi+0x0]
c0019a14:	83 c4 1c             	add    esp,0x1c
c0019a17:	c3                   	ret    

c0019a18 <FAT::closeDir(void*)>:
c0019a18:	83 ec 1c             	sub    esp,0x1c
c0019a1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a20:	75 0a                	jne    c0019a2c <FAT::closeDir(void*)+0x14>
c0019a22:	b8 04 00 00 00       	mov    eax,0x4
c0019a27:	eb 3f                	jmp    c0019a68 <FAT::closeDir(void*)+0x50>
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	83 ec 0c             	sub    esp,0xc
c0019a2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a33:	e8 9c ac fe ff       	call   c00046d4 <f_closedir>
c0019a38:	83 c4 10             	add    esp,0x10
c0019a3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a3f:	83 ec 0c             	sub    esp,0xc
c0019a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a46:	e8 7b e0 fe ff       	call   c0007ac6 <free>
c0019a4b:	83 c4 10             	add    esp,0x10
c0019a4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a52:	85 c0                	test   eax,eax
c0019a54:	75 0a                	jne    c0019a60 <FAT::closeDir(void*)+0x48>
c0019a56:	b8 00 00 00 00       	mov    eax,0x0
c0019a5b:	eb 0b                	jmp    c0019a68 <FAT::closeDir(void*)+0x50>
c0019a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a60:	b8 01 00 00 00       	mov    eax,0x1
c0019a65:	8d 76 00             	lea    esi,[esi+0x0]
c0019a68:	83 c4 1c             	add    esp,0x1c
c0019a6b:	c3                   	ret    

c0019a6c <FAT::truncate(void*, unsigned long long)>:
c0019a6c:	83 ec 2c             	sub    esp,0x2c
c0019a6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a7f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a84:	75 0a                	jne    c0019a90 <FAT::truncate(void*, unsigned long long)+0x24>
c0019a86:	b8 04 00 00 00       	mov    eax,0x4
c0019a8b:	eb 47                	jmp    c0019ad4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019a94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019aa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019aa7:	83 ec 08             	sub    esp,0x8
c0019aaa:	50                   	push   eax
c0019aab:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019aaf:	e8 a4 a9 fe ff       	call   c0004458 <f_lseek>
c0019ab4:	83 c4 10             	add    esp,0x10
c0019ab7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019abb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019abf:	85 c0                	test   eax,eax
c0019ac1:	75 09                	jne    c0019acc <FAT::truncate(void*, unsigned long long)+0x60>
c0019ac3:	b8 00 00 00 00       	mov    eax,0x0
c0019ac8:	eb 0a                	jmp    c0019ad4 <FAT::truncate(void*, unsigned long long)+0x68>
c0019aca:	66 90                	xchg   ax,ax
c0019acc:	b8 01 00 00 00       	mov    eax,0x1
c0019ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad4:	83 c4 2c             	add    esp,0x2c
c0019ad7:	c3                   	ret    

c0019ad8 <FAT::seek(void*, unsigned long long)>:
c0019ad8:	83 ec 2c             	sub    esp,0x2c
c0019adb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019adf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ae3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aeb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019af0:	75 0a                	jne    c0019afc <FAT::seek(void*, unsigned long long)+0x24>
c0019af2:	b8 04 00 00 00       	mov    eax,0x4
c0019af7:	eb 33                	jmp    c0019b2c <FAT::seek(void*, unsigned long long)+0x54>
c0019af9:	8d 76 00             	lea    esi,[esi+0x0]
c0019afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b00:	83 ec 08             	sub    esp,0x8
c0019b03:	50                   	push   eax
c0019b04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b08:	e8 4b a9 fe ff       	call   c0004458 <f_lseek>
c0019b0d:	83 c4 10             	add    esp,0x10
c0019b10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b18:	85 c0                	test   eax,eax
c0019b1a:	75 08                	jne    c0019b24 <FAT::seek(void*, unsigned long long)+0x4c>
c0019b1c:	b8 00 00 00 00       	mov    eax,0x0
c0019b21:	eb 09                	jmp    c0019b2c <FAT::seek(void*, unsigned long long)+0x54>
c0019b23:	90                   	nop
c0019b24:	b8 01 00 00 00       	mov    eax,0x1
c0019b29:	8d 76 00             	lea    esi,[esi+0x0]
c0019b2c:	83 c4 2c             	add    esp,0x2c
c0019b2f:	c3                   	ret    

c0019b30 <fatWrapperReadDisk>:
c0019b30:	53                   	push   ebx
c0019b31:	83 ec 18             	sub    esp,0x18
c0019b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b41:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b50:	ba 00 00 00 00       	mov    edx,0x0
c0019b55:	83 ec 0c             	sub    esp,0xc
c0019b58:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b5c:	53                   	push   ebx
c0019b5d:	52                   	push   edx
c0019b5e:	50                   	push   eax
c0019b5f:	51                   	push   ecx
c0019b60:	e8 e3 42 ff ff       	call   c000de48 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b65:	83 c4 20             	add    esp,0x20
c0019b68:	83 c4 18             	add    esp,0x18
c0019b6b:	5b                   	pop    ebx
c0019b6c:	c3                   	ret    
c0019b6d:	8d 76 00             	lea    esi,[esi+0x0]

c0019b70 <fatWrapperWriteDisk>:
c0019b70:	53                   	push   ebx
c0019b71:	83 ec 18             	sub    esp,0x18
c0019b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b81:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b90:	ba 00 00 00 00       	mov    edx,0x0
c0019b95:	83 ec 0c             	sub    esp,0xc
c0019b98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b9c:	53                   	push   ebx
c0019b9d:	52                   	push   edx
c0019b9e:	50                   	push   eax
c0019b9f:	51                   	push   ecx
c0019ba0:	e8 0f 43 ff ff       	call   c000deb4 <LogicalDisk::write(unsigned long long, int, void*)>
c0019ba5:	83 c4 20             	add    esp,0x20
c0019ba8:	83 c4 18             	add    esp,0x18
c0019bab:	5b                   	pop    ebx
c0019bac:	c3                   	ret    
c0019bad:	8d 76 00             	lea    esi,[esi+0x0]

c0019bb0 <fatWrapperIoctl>:
c0019bb0:	53                   	push   ebx
c0019bb1:	83 ec 28             	sub    esp,0x28
c0019bb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019bbc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019bc0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bc9:	83 f8 02             	cmp    eax,0x2
c0019bcc:	75 32                	jne    c0019c00 <fatWrapperIoctl+0x50>
c0019bce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bdb:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019be2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019be8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bf2:	66 89 02             	mov    WORD PTR [edx],ax
c0019bf5:	b8 00 00 00 00       	mov    eax,0x0
c0019bfa:	e9 c5 00 00 00       	jmp    c0019cc4 <fatWrapperIoctl+0x114>
c0019bff:	90                   	nop
c0019c00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c05:	83 f8 01             	cmp    eax,0x1
c0019c08:	75 6a                	jne    c0019c74 <fatWrapperIoctl+0xc4>
c0019c0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c17:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c24:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c2a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c30:	89 c8                	mov    eax,ecx
c0019c32:	89 da                	mov    edx,ebx
c0019c34:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c38:	c1 e0 0a             	shl    eax,0xa
c0019c3b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c40:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c47:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c4d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c53:	89 cb                	mov    ebx,ecx
c0019c55:	c1 fb 1f             	sar    ebx,0x1f
c0019c58:	53                   	push   ebx
c0019c59:	51                   	push   ecx
c0019c5a:	52                   	push   edx
c0019c5b:	50                   	push   eax
c0019c5c:	e8 6f 5b 00 00       	call   c001f7d0 <__udivdi3>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	89 c2                	mov    edx,eax
c0019c66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c6a:	89 10                	mov    DWORD PTR [eax],edx
c0019c6c:	b8 00 00 00 00       	mov    eax,0x0
c0019c71:	eb 51                	jmp    c0019cc4 <fatWrapperIoctl+0x114>
c0019c73:	90                   	nop
c0019c74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c79:	85 c0                	test   eax,eax
c0019c7b:	75 07                	jne    c0019c84 <fatWrapperIoctl+0xd4>
c0019c7d:	b8 00 00 00 00       	mov    eax,0x0
c0019c82:	eb 40                	jmp    c0019cc4 <fatWrapperIoctl+0x114>
c0019c84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c89:	83 f8 03             	cmp    eax,0x3
c0019c8c:	75 1a                	jne    c0019ca8 <fatWrapperIoctl+0xf8>
c0019c8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c9a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019ca0:	b8 00 00 00 00       	mov    eax,0x0
c0019ca5:	eb 1d                	jmp    c0019cc4 <fatWrapperIoctl+0x114>
c0019ca7:	90                   	nop
c0019ca8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cad:	83 f8 04             	cmp    eax,0x4
c0019cb0:	75 0a                	jne    c0019cbc <fatWrapperIoctl+0x10c>
c0019cb2:	b8 00 00 00 00       	mov    eax,0x0
c0019cb7:	eb 0b                	jmp    c0019cc4 <fatWrapperIoctl+0x114>
c0019cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cbc:	b8 04 00 00 00       	mov    eax,0x4
c0019cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc4:	83 c4 28             	add    esp,0x28
c0019cc7:	5b                   	pop    ebx
c0019cc8:	c3                   	ret    
c0019cc9:	90                   	nop
c0019cca:	66 90                	xchg   ax,ax

c0019ccc <FAT::FAT()>:
c0019ccc:	83 ec 1c             	sub    esp,0x1c
c0019ccf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cd3:	83 ec 0c             	sub    esp,0xc
c0019cd6:	50                   	push   eax
c0019cd7:	e8 70 1b ff ff       	call   c000b84c <Filesystem::Filesystem()>
c0019cdc:	83 c4 10             	add    esp,0x10
c0019cdf:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c0019ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ce8:	89 10                	mov    DWORD PTR [eax],edx
c0019cea:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019cf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cfc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d01:	7f 19                	jg     c0019d1c <FAT::FAT()+0x50>
c0019d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d07:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d12:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d17:	eb e3                	jmp    c0019cfc <FAT::FAT()+0x30>
c0019d19:	8d 76 00             	lea    esi,[esi+0x0]
c0019d1c:	90                   	nop
c0019d1d:	83 c4 1c             	add    esp,0x1c
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <FAT::fixFilepath(char*)>:
c0019d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d28:	8a 00                	mov    al,BYTE PTR [eax]
c0019d2a:	0f be c0             	movsx  eax,al
c0019d2d:	83 f8 40             	cmp    eax,0x40
c0019d30:	7e 2e                	jle    c0019d60 <FAT::fixFilepath(char*)+0x3c>
c0019d32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d36:	8a 00                	mov    al,BYTE PTR [eax]
c0019d38:	83 e8 41             	sub    eax,0x41
c0019d3b:	88 c2                	mov    dl,al
c0019d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d41:	88 10                	mov    BYTE PTR [eax],dl
c0019d43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d47:	8a 00                	mov    al,BYTE PTR [eax]
c0019d49:	0f be c0             	movsx  eax,al
c0019d4c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d53:	83 c0 30             	add    eax,0x30
c0019d56:	88 c2                	mov    dl,al
c0019d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d5c:	88 10                	mov    BYTE PTR [eax],dl
c0019d5e:	66 90                	xchg   ax,ax
c0019d60:	90                   	nop
c0019d61:	c3                   	ret    
c0019d62:	66 90                	xchg   ax,ax

c0019d64 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d72:	74 0c                	je     c0019d80 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019d74:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d7c:	75 0e                	jne    c0019d8c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019d7e:	66 90                	xchg   ax,ax
c0019d80:	b8 04 00 00 00       	mov    eax,0x4
c0019d85:	e9 46 01 00 00       	jmp    c0019ed0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d8a:	66 90                	xchg   ax,ax
c0019d8c:	83 ec 08             	sub    esp,0x8
c0019d8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d9a:	50                   	push   eax
c0019d9b:	e8 a0 68 fe ff       	call   c0000640 <strcpy>
c0019da0:	83 c4 10             	add    esp,0x10
c0019da3:	83 ec 08             	sub    esp,0x8
c0019da6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019daa:	50                   	push   eax
c0019dab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019db2:	e8 6d ff ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c0019db7:	83 c4 10             	add    esp,0x10
c0019dba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dc2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc9:	83 e0 01             	and    eax,0x1
c0019dcc:	74 12                	je     c0019de0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019dce:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019dd5:	83 c8 01             	or     eax,0x1
c0019dd8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ddf:	90                   	nop
c0019de0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019de7:	83 e0 04             	and    eax,0x4
c0019dea:	74 24                	je     c0019e10 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019dec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019df3:	83 c8 30             	or     eax,0x30
c0019df6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019dfd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e04:	83 c8 02             	or     eax,0x2
c0019e07:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e0e:	66 90                	xchg   ax,ax
c0019e10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e17:	83 e0 02             	and    eax,0x2
c0019e1a:	74 14                	je     c0019e30 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e1c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e23:	83 c8 02             	or     eax,0x2
c0019e26:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e37:	83 e0 08             	and    eax,0x8
c0019e3a:	74 14                	je     c0019e50 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e3c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e43:	83 c8 04             	or     eax,0x4
c0019e46:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e50:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e57:	83 e0 10             	and    eax,0x10
c0019e5a:	74 14                	je     c0019e70 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e5c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e63:	83 c8 08             	or     eax,0x8
c0019e66:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	68 28 02 00 00       	push   0x228
c0019e78:	e8 39 dc fe ff       	call   c0007ab6 <malloc>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	89 c2                	mov    edx,eax
c0019e82:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e89:	89 10                	mov    DWORD PTR [eax],edx
c0019e8b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e93:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e9c:	83 ec 04             	sub    esp,0x4
c0019e9f:	52                   	push   edx
c0019ea0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ea4:	52                   	push   edx
c0019ea5:	50                   	push   eax
c0019ea6:	e8 af 9d fe ff       	call   c0003c5a <f_open>
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019eb5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ebd:	74 09                	je     c0019ec8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019ebf:	b8 01 00 00 00       	mov    eax,0x1
c0019ec4:	eb 0a                	jmp    c0019ed0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ec6:	66 90                	xchg   ax,ax
c0019ec8:	b8 00 00 00 00       	mov    eax,0x0
c0019ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ed6:	c3                   	ret    
c0019ed7:	90                   	nop

c0019ed8 <FAT::openDir(char const*, void**)>:
c0019ed8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ede:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ee6:	74 0c                	je     c0019ef4 <FAT::openDir(char const*, void**)+0x1c>
c0019ee8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ef0:	75 0e                	jne    c0019f00 <FAT::openDir(char const*, void**)+0x28>
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	b8 04 00 00 00       	mov    eax,0x4
c0019ef9:	e9 82 00 00 00       	jmp    c0019f80 <FAT::openDir(char const*, void**)+0xa8>
c0019efe:	66 90                	xchg   ax,ax
c0019f00:	83 ec 08             	sub    esp,0x8
c0019f03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f0a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f0e:	50                   	push   eax
c0019f0f:	e8 2c 67 fe ff       	call   c0000640 <strcpy>
c0019f14:	83 c4 10             	add    esp,0x10
c0019f17:	83 ec 08             	sub    esp,0x8
c0019f1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f1e:	50                   	push   eax
c0019f1f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f26:	e8 f9 fd ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c0019f2b:	83 c4 10             	add    esp,0x10
c0019f2e:	83 ec 0c             	sub    esp,0xc
c0019f31:	6a 30                	push   0x30
c0019f33:	e8 7e db fe ff       	call   c0007ab6 <malloc>
c0019f38:	83 c4 10             	add    esp,0x10
c0019f3b:	89 c2                	mov    edx,eax
c0019f3d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f44:	89 10                	mov    DWORD PTR [eax],edx
c0019f46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f4f:	83 ec 08             	sub    esp,0x8
c0019f52:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f56:	52                   	push   edx
c0019f57:	50                   	push   eax
c0019f58:	e8 ac a6 fe ff       	call   c0004609 <f_opendir>
c0019f5d:	83 c4 10             	add    esp,0x10
c0019f60:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f67:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f6f:	74 07                	je     c0019f78 <FAT::openDir(char const*, void**)+0xa0>
c0019f71:	b8 01 00 00 00       	mov    eax,0x1
c0019f76:	eb 08                	jmp    c0019f80 <FAT::openDir(char const*, void**)+0xa8>
c0019f78:	b8 00 00 00 00       	mov    eax,0x0
c0019f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f80:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f86:	c3                   	ret    
c0019f87:	90                   	nop

c0019f88 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019f88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019f8e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019f96:	75 0c                	jne    c0019fa4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019f98:	b8 04 00 00 00       	mov    eax,0x4
c0019f9d:	e9 d6 00 00 00       	jmp    c001a078 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fa2:	66 90                	xchg   ax,ax
c0019fa4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019fac:	75 0a                	jne    c0019fb8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019fae:	b8 04 00 00 00       	mov    eax,0x4
c0019fb3:	e9 c0 00 00 00       	jmp    c001a078 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fb8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fc0:	75 0a                	jne    c0019fcc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fc2:	b8 04 00 00 00       	mov    eax,0x4
c0019fc7:	e9 ac 00 00 00       	jmp    c001a078 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fcc:	83 ec 08             	sub    esp,0x8
c0019fcf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019fd6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019fdd:	50                   	push   eax
c0019fde:	e8 5d 66 fe ff       	call   c0000640 <strcpy>
c0019fe3:	83 c4 10             	add    esp,0x10
c0019fe6:	83 ec 08             	sub    esp,0x8
c0019fe9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ff0:	50                   	push   eax
c0019ff1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ff8:	e8 27 fd ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	83 ec 08             	sub    esp,0x8
c001a003:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a007:	50                   	push   eax
c001a008:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a00f:	50                   	push   eax
c001a010:	e8 73 a7 fe ff       	call   c0004788 <f_stat>
c001a015:	83 c4 10             	add    esp,0x10
c001a018:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a01f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a026:	85 c0                	test   eax,eax
c001a028:	74 0a                	je     c001a034 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a02a:	83 f8 04             	cmp    eax,0x4
c001a02d:	74 39                	je     c001a068 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a02f:	eb 3f                	jmp    c001a070 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a038:	0f b6 c0             	movzx  eax,al
c001a03b:	83 e0 10             	and    eax,0x10
c001a03e:	0f 95 c2             	setne  dl
c001a041:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a048:	88 10                	mov    BYTE PTR [eax],dl
c001a04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a04e:	ba 00 00 00 00       	mov    edx,0x0
c001a053:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a05a:	89 01                	mov    DWORD PTR [ecx],eax
c001a05c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a05f:	b8 00 00 00 00       	mov    eax,0x0
c001a064:	eb 12                	jmp    c001a078 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a066:	66 90                	xchg   ax,ax
c001a068:	b8 02 00 00 00       	mov    eax,0x2
c001a06d:	eb 09                	jmp    c001a078 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a06f:	90                   	nop
c001a070:	b8 01 00 00 00       	mov    eax,0x1
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <FAT::unlink(char const*)>:
c001a080:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a086:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a08e:	75 08                	jne    c001a098 <FAT::unlink(char const*)+0x18>
c001a090:	b8 04 00 00 00       	mov    eax,0x4
c001a095:	eb 61                	jmp    c001a0f8 <FAT::unlink(char const*)+0x78>
c001a097:	90                   	nop
c001a098:	83 ec 08             	sub    esp,0x8
c001a09b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0a6:	50                   	push   eax
c001a0a7:	e8 94 65 fe ff       	call   c0000640 <strcpy>
c001a0ac:	83 c4 10             	add    esp,0x10
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0b6:	50                   	push   eax
c001a0b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0be:	e8 61 fc ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	83 ec 0c             	sub    esp,0xc
c001a0c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0cd:	50                   	push   eax
c001a0ce:	e8 27 a9 fe ff       	call   c00049fa <f_unlink>
c001a0d3:	83 c4 10             	add    esp,0x10
c001a0d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a0dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a0e4:	85 c0                	test   eax,eax
c001a0e6:	75 08                	jne    c001a0f0 <FAT::unlink(char const*)+0x70>
c001a0e8:	b8 00 00 00 00       	mov    eax,0x0
c001a0ed:	eb 09                	jmp    c001a0f8 <FAT::unlink(char const*)+0x78>
c001a0ef:	90                   	nop
c001a0f0:	b8 01 00 00 00       	mov    eax,0x1
c001a0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a0fe:	c3                   	ret    
c001a0ff:	90                   	nop

c001a100 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a100:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a106:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a10d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a114:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a118:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a11c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a124:	75 0a                	jne    c001a130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a126:	b8 04 00 00 00       	mov    eax,0x4
c001a12b:	e9 7c 01 00 00       	jmp    c001a2ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a130:	83 ec 08             	sub    esp,0x8
c001a133:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a13a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a13e:	50                   	push   eax
c001a13f:	e8 fc 64 fe ff       	call   c0000640 <strcpy>
c001a144:	83 c4 10             	add    esp,0x10
c001a147:	83 ec 08             	sub    esp,0x8
c001a14a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a14e:	50                   	push   eax
c001a14f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a156:	e8 c9 fb ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a15b:	83 c4 10             	add    esp,0x10
c001a15e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a166:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a16e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a173:	83 e0 01             	and    eax,0x1
c001a176:	74 14                	je     c001a18c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a178:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a17f:	83 c8 01             	or     eax,0x1
c001a182:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a189:	8d 76 00             	lea    esi,[esi+0x0]
c001a18c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a191:	83 e0 02             	and    eax,0x2
c001a194:	74 12                	je     c001a1a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a196:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a19d:	83 c8 20             	or     eax,0x20
c001a1a0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1a7:	90                   	nop
c001a1a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1ad:	83 e0 04             	and    eax,0x4
c001a1b0:	74 12                	je     c001a1c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a1b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1b9:	83 c8 04             	or     eax,0x4
c001a1bc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1c3:	90                   	nop
c001a1c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1c9:	83 e0 08             	and    eax,0x8
c001a1cc:	74 12                	je     c001a1e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a1ce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1d5:	83 c8 02             	or     eax,0x2
c001a1d8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1df:	90                   	nop
c001a1e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1e5:	83 e0 01             	and    eax,0x1
c001a1e8:	74 12                	je     c001a1fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a1ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a1f1:	83 c8 01             	or     eax,0x1
c001a1f4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a1fb:	90                   	nop
c001a1fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a201:	83 e0 02             	and    eax,0x2
c001a204:	74 12                	je     c001a218 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a206:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a20d:	83 c8 20             	or     eax,0x20
c001a210:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a217:	90                   	nop
c001a218:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a21d:	83 e0 04             	and    eax,0x4
c001a220:	74 12                	je     c001a234 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a222:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a229:	83 c8 04             	or     eax,0x4
c001a22c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a233:	90                   	nop
c001a234:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a239:	83 e0 08             	and    eax,0x8
c001a23c:	74 12                	je     c001a250 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a23e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a245:	83 c8 02             	or     eax,0x2
c001a248:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a24f:	90                   	nop
c001a250:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a257:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a25e:	09 d0                	or     eax,edx
c001a260:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a267:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a26f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a277:	83 ec 04             	sub    esp,0x4
c001a27a:	52                   	push   edx
c001a27b:	50                   	push   eax
c001a27c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a280:	50                   	push   eax
c001a281:	e8 e9 ab fe ff       	call   c0004e6f <f_chmod>
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a290:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a297:	85 c0                	test   eax,eax
c001a299:	75 09                	jne    c001a2a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a29b:	b8 00 00 00 00       	mov    eax,0x0
c001a2a0:	eb 0a                	jmp    c001a2ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a2a2:	66 90                	xchg   ax,ax
c001a2a4:	b8 01 00 00 00       	mov    eax,0x1
c001a2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop

c001a2b4 <FAT::rename(char const*, char const*)>:
c001a2b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2c2:	74 0c                	je     c001a2d0 <FAT::rename(char const*, char const*)+0x1c>
c001a2c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2cc:	75 0e                	jne    c001a2dc <FAT::rename(char const*, char const*)+0x28>
c001a2ce:	66 90                	xchg   ax,ax
c001a2d0:	b8 04 00 00 00       	mov    eax,0x4
c001a2d5:	e9 9e 00 00 00       	jmp    c001a378 <FAT::rename(char const*, char const*)+0xc4>
c001a2da:	66 90                	xchg   ax,ax
c001a2dc:	83 ec 08             	sub    esp,0x8
c001a2df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a2e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a2ed:	50                   	push   eax
c001a2ee:	e8 4d 63 fe ff       	call   c0000640 <strcpy>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	83 ec 08             	sub    esp,0x8
c001a2f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a300:	50                   	push   eax
c001a301:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a308:	e8 17 fa ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a30d:	83 c4 10             	add    esp,0x10
c001a310:	83 ec 08             	sub    esp,0x8
c001a313:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a31a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a31e:	50                   	push   eax
c001a31f:	e8 1c 63 fe ff       	call   c0000640 <strcpy>
c001a324:	83 c4 10             	add    esp,0x10
c001a327:	83 ec 08             	sub    esp,0x8
c001a32a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a32e:	50                   	push   eax
c001a32f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a336:	e8 e9 f9 ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	83 ec 08             	sub    esp,0x8
c001a341:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a345:	50                   	push   eax
c001a346:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a34d:	50                   	push   eax
c001a34e:	e8 64 a9 fe ff       	call   c0004cb7 <f_rename>
c001a353:	83 c4 10             	add    esp,0x10
c001a356:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a35d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a364:	85 c0                	test   eax,eax
c001a366:	75 08                	jne    c001a370 <FAT::rename(char const*, char const*)+0xbc>
c001a368:	b8 00 00 00 00       	mov    eax,0x0
c001a36d:	eb 09                	jmp    c001a378 <FAT::rename(char const*, char const*)+0xc4>
c001a36f:	90                   	nop
c001a370:	b8 01 00 00 00       	mov    eax,0x1
c001a375:	8d 76 00             	lea    esi,[esi+0x0]
c001a378:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a37e:	c3                   	ret    
c001a37f:	90                   	nop

c001a380 <FAT::mkdir(char const*)>:
c001a380:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a386:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a38e:	75 08                	jne    c001a398 <FAT::mkdir(char const*)+0x18>
c001a390:	b8 04 00 00 00       	mov    eax,0x4
c001a395:	eb 61                	jmp    c001a3f8 <FAT::mkdir(char const*)+0x78>
c001a397:	90                   	nop
c001a398:	83 ec 08             	sub    esp,0x8
c001a39b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3a6:	50                   	push   eax
c001a3a7:	e8 94 62 fe ff       	call   c0000640 <strcpy>
c001a3ac:	83 c4 10             	add    esp,0x10
c001a3af:	83 ec 08             	sub    esp,0x8
c001a3b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3b6:	50                   	push   eax
c001a3b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3be:	e8 61 f9 ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a3c3:	83 c4 10             	add    esp,0x10
c001a3c6:	83 ec 0c             	sub    esp,0xc
c001a3c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3cd:	50                   	push   eax
c001a3ce:	e8 49 a7 fe ff       	call   c0004b1c <f_mkdir>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a3dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a3e4:	85 c0                	test   eax,eax
c001a3e6:	75 08                	jne    c001a3f0 <FAT::mkdir(char const*)+0x70>
c001a3e8:	b8 00 00 00 00       	mov    eax,0x0
c001a3ed:	eb 09                	jmp    c001a3f8 <FAT::mkdir(char const*)+0x78>
c001a3ef:	90                   	nop
c001a3f0:	b8 01 00 00 00       	mov    eax,0x1
c001a3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a3fe:	c3                   	ret    
c001a3ff:	90                   	nop

c001a400 <FAT::exists(char const*)>:
c001a400:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a406:	83 ec 08             	sub    esp,0x8
c001a409:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a410:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a414:	50                   	push   eax
c001a415:	e8 26 62 fe ff       	call   c0000640 <strcpy>
c001a41a:	83 c4 10             	add    esp,0x10
c001a41d:	83 ec 08             	sub    esp,0x8
c001a420:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a424:	50                   	push   eax
c001a425:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a42c:	e8 f3 f8 ff ff       	call   c0019d24 <FAT::fixFilepath(char*)>
c001a431:	83 c4 10             	add    esp,0x10
c001a434:	83 ec 08             	sub    esp,0x8
c001a437:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a43e:	50                   	push   eax
c001a43f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a443:	50                   	push   eax
c001a444:	e8 3f a3 fe ff       	call   c0004788 <f_stat>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a453:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a45a:	85 c0                	test   eax,eax
c001a45c:	75 06                	jne    c001a464 <FAT::exists(char const*)+0x64>
c001a45e:	b0 01                	mov    al,0x1
c001a460:	eb 06                	jmp    c001a468 <FAT::exists(char const*)+0x68>
c001a462:	66 90                	xchg   ax,ax
c001a464:	b0 00                	mov    al,0x0
c001a466:	66 90                	xchg   ax,ax
c001a468:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a46e:	c3                   	ret    
c001a46f:	90                   	nop

c001a470 <isoReadDiscSectorHelper>:
c001a470:	83 ec 2c             	sub    esp,0x2c
c001a473:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a477:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a47b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a480:	83 e8 41             	sub    eax,0x41
c001a483:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a48a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a48e:	ba 00 00 00 00       	mov    edx,0x0
c001a493:	83 ec 0c             	sub    esp,0xc
c001a496:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a49a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a49e:	52                   	push   edx
c001a49f:	50                   	push   eax
c001a4a0:	51                   	push   ecx
c001a4a1:	e8 a2 39 ff ff       	call   c000de48 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4a6:	83 c4 20             	add    esp,0x20
c001a4a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4b2:	74 0c                	je     c001a4c0 <isoReadDiscSectorHelper+0x50>
c001a4b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4b8:	c1 e0 0b             	shl    eax,0xb
c001a4bb:	eb 0b                	jmp    c001a4c8 <isoReadDiscSectorHelper+0x58>
c001a4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c0:	b8 00 00 00 00       	mov    eax,0x0
c001a4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c8:	83 c4 2c             	add    esp,0x2c
c001a4cb:	c3                   	ret    

c001a4cc <iso_kprintf>:
c001a4cc:	83 ec 0c             	sub    esp,0xc
c001a4cf:	83 ec 08             	sub    esp,0x8
c001a4d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4d6:	68 5a 2c 02 c0       	push   0xc0022c5a
c001a4db:	e8 65 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4e0:	83 c4 10             	add    esp,0x10
c001a4e3:	90                   	nop
c001a4e4:	83 c4 0c             	add    esp,0xc
c001a4e7:	c3                   	ret    

c001a4e8 <iso_kprintfd>:
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	83 ec 08             	sub    esp,0x8
c001a4ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f2:	68 9a 13 02 c0       	push   0xc002139a
c001a4f7:	e8 49 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4fc:	83 c4 10             	add    esp,0x10
c001a4ff:	90                   	nop
c001a500:	83 c4 0c             	add    esp,0xc
c001a503:	c3                   	ret    

c001a504 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a504:	b8 08 00 00 00       	mov    eax,0x8
c001a509:	c3                   	ret    

c001a50a <ISO9660::truncate(void*, unsigned long long)>:
c001a50a:	b8 01 00 00 00       	mov    eax,0x1
c001a50f:	c3                   	ret    

c001a510 <ISO9660::getName()>:
c001a510:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c001a515:	c3                   	ret    

c001a516 <ISO9660::closeDir(void*)>:
c001a516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a51a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a51c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a51f:	90                   	nop

c001a520 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a520:	b8 01 00 00 00       	mov    eax,0x1
c001a525:	c3                   	ret    

c001a526 <ISO9660::unlink(char const*)>:
c001a526:	b8 01 00 00 00       	mov    eax,0x1
c001a52b:	c3                   	ret    

c001a52c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a52c:	b8 03 00 00 00       	mov    eax,0x3
c001a531:	c3                   	ret    

c001a532 <ISO9660::rename(char const*, char const*)>:
c001a532:	b8 01 00 00 00       	mov    eax,0x1
c001a537:	c3                   	ret    

c001a538 <ISO9660::mkdir(char const*)>:
c001a538:	b8 01 00 00 00       	mov    eax,0x1
c001a53d:	c3                   	ret    

c001a53e <ISO9660::~ISO9660()>:
c001a53e:	83 ec 0c             	sub    esp,0xc
c001a541:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001a546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54a:	89 10                	mov    DWORD PTR [eax],edx
c001a54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a550:	83 ec 0c             	sub    esp,0xc
c001a553:	50                   	push   eax
c001a554:	e8 17 13 ff ff       	call   c000b870 <Filesystem::~Filesystem()>
c001a559:	83 c4 10             	add    esp,0x10
c001a55c:	90                   	nop
c001a55d:	83 c4 0c             	add    esp,0xc
c001a560:	c3                   	ret    
c001a561:	90                   	nop

c001a562 <ISO9660::~ISO9660()>:
c001a562:	83 ec 0c             	sub    esp,0xc
c001a565:	83 ec 0c             	sub    esp,0xc
c001a568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a56c:	e8 cd ff ff ff       	call   c001a53e <ISO9660::~ISO9660()>
c001a571:	83 c4 10             	add    esp,0x10
c001a574:	83 ec 08             	sub    esp,0x8
c001a577:	6a 08                	push   0x8
c001a579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a57d:	e8 96 02 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	83 c4 0c             	add    esp,0xc
c001a588:	c3                   	ret    
c001a589:	90                   	nop

c001a58a <ISO9660::exists(char const*)>:
c001a58a:	83 ec 18             	sub    esp,0x18
c001a58d:	68 2b 2f 02 c0       	push   0xc0022f2b
c001a592:	e8 28 71 ff ff       	call   c00116bf <KePanic(char const*)>
c001a597:	31 c0                	xor    eax,eax
c001a599:	83 c4 1c             	add    esp,0x1c
c001a59c:	c3                   	ret    
c001a59d:	90                   	nop

c001a59e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a59e:	56                   	push   esi
c001a59f:	53                   	push   ebx
c001a5a0:	53                   	push   ebx
c001a5a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5a9:	85 db                	test   ebx,ebx
c001a5ab:	0f 84 ca 00 00 00    	je     c001a67b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5b1:	85 f6                	test   esi,esi
c001a5b3:	0f 84 c2 00 00 00    	je     c001a67b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5b9:	b8 03 00 00 00       	mov    eax,0x3
c001a5be:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5c3:	0f 85 b7 00 00 00    	jne    c001a680 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5c9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5cb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a5d2:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a5d8:	74 1b                	je     c001a5f5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a5da:	85 c0                	test   eax,eax
c001a5dc:	74 10                	je     c001a5ee <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	68 49 2f 02 c0       	push   0xc0022f49
c001a5e6:	e8 d4 70 ff ff       	call   c00116bf <KePanic(char const*)>
c001a5eb:	83 c4 10             	add    esp,0x10
c001a5ee:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5f0:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a5f5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5f8:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a5ff:	85 c0                	test   eax,eax
c001a601:	74 09                	je     c001a60c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a603:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a60a:	74 48                	je     c001a654 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a60c:	83 ec 0c             	sub    esp,0xc
c001a60f:	68 59 2f 02 c0       	push   0xc0022f59
c001a614:	e8 2c 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a619:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a626:	85 c0                	test   eax,eax
c001a628:	74 17                	je     c001a641 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a634:	68 79 2f 02 c0       	push   0xc0022f79
c001a639:	e8 07 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	83 ec 0c             	sub    esp,0xc
c001a644:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a64b:	50                   	push   eax
c001a64c:	e8 f5 c3 fe ff       	call   c0006a46 <init_percd>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	83 c3 03             	add    ebx,0x3
c001a657:	51                   	push   ecx
c001a658:	51                   	push   ecx
c001a659:	6a 00                	push   0x0
c001a65b:	53                   	push   ebx
c001a65c:	e8 ac be fe ff       	call   c000650d <iso_open>
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	89 c2                	mov    edx,eax
c001a666:	b8 01 00 00 00       	mov    eax,0x1
c001a66b:	83 fa ff             	cmp    edx,0xffffffff
c001a66e:	74 10                	je     c001a680 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a670:	83 c2 32             	add    edx,0x32
c001a673:	31 c0                	xor    eax,eax
c001a675:	01 d2                	add    edx,edx
c001a677:	89 16                	mov    DWORD PTR [esi],edx
c001a679:	eb 05                	jmp    c001a680 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a67b:	b8 04 00 00 00       	mov    eax,0x4
c001a680:	5a                   	pop    edx
c001a681:	5b                   	pop    ebx
c001a682:	5e                   	pop    esi
c001a683:	c3                   	ret    

c001a684 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a684:	53                   	push   ebx
c001a685:	83 ec 08             	sub    esp,0x8
c001a688:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a68c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a690:	85 c0                	test   eax,eax
c001a692:	74 2d                	je     c001a6c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a694:	85 db                	test   ebx,ebx
c001a696:	74 29                	je     c001a6c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a698:	b9 02 00 00 00       	mov    ecx,0x2
c001a69d:	52                   	push   edx
c001a69e:	99                   	cdq    
c001a69f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6a3:	f7 f9                	idiv   ecx
c001a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6a9:	83 e8 32             	sub    eax,0x32
c001a6ac:	50                   	push   eax
c001a6ad:	e8 03 bf fe ff       	call   c00065b5 <iso_read>
c001a6b2:	83 c4 10             	add    esp,0x10
c001a6b5:	89 03                	mov    DWORD PTR [ebx],eax
c001a6b7:	09 d0                	or     eax,edx
c001a6b9:	0f 94 c0             	sete   al
c001a6bc:	0f b6 c0             	movzx  eax,al
c001a6bf:	eb 05                	jmp    c001a6c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6c1:	b8 04 00 00 00       	mov    eax,0x4
c001a6c6:	83 c4 08             	add    esp,0x8
c001a6c9:	5b                   	pop    ebx
c001a6ca:	c3                   	ret    
c001a6cb:	90                   	nop

c001a6cc <ISO9660::seek(void*, unsigned long long)>:
c001a6cc:	57                   	push   edi
c001a6cd:	56                   	push   esi
c001a6ce:	b8 04 00 00 00       	mov    eax,0x4
c001a6d3:	51                   	push   ecx
c001a6d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6dc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a6e0:	85 d2                	test   edx,edx
c001a6e2:	74 26                	je     c001a70a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a6e4:	6a 00                	push   0x0
c001a6e6:	b9 02 00 00 00       	mov    ecx,0x2
c001a6eb:	57                   	push   edi
c001a6ec:	89 d0                	mov    eax,edx
c001a6ee:	56                   	push   esi
c001a6ef:	99                   	cdq    
c001a6f0:	f7 f9                	idiv   ecx
c001a6f2:	83 e8 32             	sub    eax,0x32
c001a6f5:	50                   	push   eax
c001a6f6:	e8 d0 bf fe ff       	call   c00066cb <iso_seek>
c001a6fb:	83 c4 10             	add    esp,0x10
c001a6fe:	31 f0                	xor    eax,esi
c001a700:	31 fa                	xor    edx,edi
c001a702:	09 d0                	or     eax,edx
c001a704:	0f 95 c0             	setne  al
c001a707:	0f b6 c0             	movzx  eax,al
c001a70a:	5a                   	pop    edx
c001a70b:	5e                   	pop    esi
c001a70c:	5f                   	pop    edi
c001a70d:	c3                   	ret    

c001a70e <ISO9660::tell(void*, unsigned long long*)>:
c001a70e:	53                   	push   ebx
c001a70f:	83 ec 08             	sub    esp,0x8
c001a712:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a716:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a71a:	85 c0                	test   eax,eax
c001a71c:	74 24                	je     c001a742 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a71e:	85 db                	test   ebx,ebx
c001a720:	74 20                	je     c001a742 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a722:	83 ec 0c             	sub    esp,0xc
c001a725:	b9 02 00 00 00       	mov    ecx,0x2
c001a72a:	99                   	cdq    
c001a72b:	f7 f9                	idiv   ecx
c001a72d:	83 e8 32             	sub    eax,0x32
c001a730:	50                   	push   eax
c001a731:	e8 19 c0 fe ff       	call   c000674f <iso_tell>
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	89 03                	mov    DWORD PTR [ebx],eax
c001a73b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a73e:	31 c0                	xor    eax,eax
c001a740:	eb 05                	jmp    c001a747 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a742:	b8 04 00 00 00       	mov    eax,0x4
c001a747:	83 c4 08             	add    esp,0x8
c001a74a:	5b                   	pop    ebx
c001a74b:	c3                   	ret    

c001a74c <ISO9660::stat(void*, unsigned long long*)>:
c001a74c:	53                   	push   ebx
c001a74d:	83 ec 14             	sub    esp,0x14
c001a750:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a754:	68 9d 2f 02 c0       	push   0xc0022f9d
c001a759:	e8 e7 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a75e:	83 c4 10             	add    esp,0x10
c001a761:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a766:	74 2c                	je     c001a794 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a768:	85 db                	test   ebx,ebx
c001a76a:	74 28                	je     c001a794 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a76c:	83 ec 0c             	sub    esp,0xc
c001a76f:	b9 02 00 00 00       	mov    ecx,0x2
c001a774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a778:	99                   	cdq    
c001a779:	f7 f9                	idiv   ecx
c001a77b:	83 e8 32             	sub    eax,0x32
c001a77e:	50                   	push   eax
c001a77f:	e8 fc bf fe ff       	call   c0006780 <iso_total>
c001a784:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a78b:	89 03                	mov    DWORD PTR [ebx],eax
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	31 c0                	xor    eax,eax
c001a792:	eb 05                	jmp    c001a799 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a794:	b8 04 00 00 00       	mov    eax,0x4
c001a799:	83 c4 08             	add    esp,0x8
c001a79c:	5b                   	pop    ebx
c001a79d:	c3                   	ret    

c001a79e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a79e:	55                   	push   ebp
c001a79f:	57                   	push   edi
c001a7a0:	56                   	push   esi
c001a7a1:	53                   	push   ebx
c001a7a2:	83 ec 18             	sub    esp,0x18
c001a7a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7b1:	68 a5 2f 02 c0       	push   0xc0022fa5
c001a7b6:	e8 8a 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	85 ff                	test   edi,edi
c001a7c0:	0f 94 c0             	sete   al
c001a7c3:	85 f6                	test   esi,esi
c001a7c5:	0f 94 c2             	sete   dl
c001a7c8:	09 d0                	or     eax,edx
c001a7ca:	a8 01                	test   al,0x1
c001a7cc:	0f 85 dd 00 00 00    	jne    c001a8af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7d2:	85 db                	test   ebx,ebx
c001a7d4:	0f 84 d5 00 00 00    	je     c001a8af <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a7da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7dd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a7e3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7ea:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7f1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a7f3:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a7f9:	74 1b                	je     c001a816 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a7fb:	85 c0                	test   eax,eax
c001a7fd:	74 10                	je     c001a80f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a7ff:	83 ec 0c             	sub    esp,0xc
c001a802:	68 49 2f 02 c0       	push   0xc0022f49
c001a807:	e8 b3 6e ff ff       	call   c00116bf <KePanic(char const*)>
c001a80c:	83 c4 10             	add    esp,0x10
c001a80f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a811:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a816:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a819:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a820:	85 c0                	test   eax,eax
c001a822:	74 09                	je     c001a82d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a824:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a82b:	74 51                	je     c001a87e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a82d:	83 ec 0c             	sub    esp,0xc
c001a830:	68 ad 2f 02 c0       	push   0xc0022fad
c001a835:	e8 0b 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a83a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a848:	74 21                	je     c001a86b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a84a:	83 ec 0c             	sub    esp,0xc
c001a84d:	68 cd 2f 02 c0       	push   0xc0022fcd
c001a852:	e8 ee 00 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a857:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a85a:	83 c4 10             	add    esp,0x10
c001a85d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a864:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a875:	50                   	push   eax
c001a876:	e8 cb c1 fe ff       	call   c0006a46 <init_percd>
c001a87b:	83 c4 10             	add    esp,0x10
c001a87e:	83 c3 03             	add    ebx,0x3
c001a881:	52                   	push   edx
c001a882:	52                   	push   edx
c001a883:	6a 00                	push   0x0
c001a885:	53                   	push   ebx
c001a886:	e8 82 bc fe ff       	call   c000650d <iso_open>
c001a88b:	83 c4 10             	add    esp,0x10
c001a88e:	89 c5                	mov    ebp,eax
c001a890:	83 f8 ff             	cmp    eax,0xffffffff
c001a893:	75 21                	jne    c001a8b6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a895:	50                   	push   eax
c001a896:	50                   	push   eax
c001a897:	6a 01                	push   0x1
c001a899:	53                   	push   ebx
c001a89a:	e8 6e bc fe ff       	call   c000650d <iso_open>
c001a89f:	83 c4 10             	add    esp,0x10
c001a8a2:	ba 02 00 00 00       	mov    edx,0x2
c001a8a7:	40                   	inc    eax
c001a8a8:	74 2b                	je     c001a8d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8aa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8ad:	eb 24                	jmp    c001a8d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8af:	ba 04 00 00 00       	mov    edx,0x4
c001a8b4:	eb 1f                	jmp    c001a8d5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8b6:	83 ec 0c             	sub    esp,0xc
c001a8b9:	50                   	push   eax
c001a8ba:	e8 c1 be fe ff       	call   c0006780 <iso_total>
c001a8bf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8c6:	89 07                	mov    DWORD PTR [edi],eax
c001a8c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8cb:	e8 c7 bc fe ff       	call   c0006597 <iso_close>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	31 d2                	xor    edx,edx
c001a8d5:	83 c4 0c             	add    esp,0xc
c001a8d8:	89 d0                	mov    eax,edx
c001a8da:	5b                   	pop    ebx
c001a8db:	5e                   	pop    esi
c001a8dc:	5f                   	pop    edi
c001a8dd:	5d                   	pop    ebp
c001a8de:	c3                   	ret    
c001a8df:	90                   	nop

c001a8e0 <ISO9660::close(void*)>:
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	b8 04 00 00 00       	mov    eax,0x4
c001a8e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8ec:	85 d2                	test   edx,edx
c001a8ee:	74 1b                	je     c001a90b <ISO9660::close(void*)+0x2b>
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	b9 02 00 00 00       	mov    ecx,0x2
c001a8f8:	89 d0                	mov    eax,edx
c001a8fa:	99                   	cdq    
c001a8fb:	f7 f9                	idiv   ecx
c001a8fd:	83 e8 32             	sub    eax,0x32
c001a900:	50                   	push   eax
c001a901:	e8 91 bc fe ff       	call   c0006597 <iso_close>
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	31 c0                	xor    eax,eax
c001a90b:	83 c4 0c             	add    esp,0xc
c001a90e:	c3                   	ret    
c001a90f:	90                   	nop

c001a910 <ISO9660::openDir(char const*, void**)>:
c001a910:	56                   	push   esi
c001a911:	53                   	push   ebx
c001a912:	50                   	push   eax
c001a913:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a917:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a91b:	85 db                	test   ebx,ebx
c001a91d:	0f 84 bd 00 00 00    	je     c001a9e0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a923:	85 f6                	test   esi,esi
c001a925:	0f 84 b5 00 00 00    	je     c001a9e0 <ISO9660::openDir(char const*, void**)+0xd0>
c001a92b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a92d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a934:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a93a:	74 1b                	je     c001a957 <ISO9660::openDir(char const*, void**)+0x47>
c001a93c:	85 c0                	test   eax,eax
c001a93e:	74 10                	je     c001a950 <ISO9660::openDir(char const*, void**)+0x40>
c001a940:	83 ec 0c             	sub    esp,0xc
c001a943:	68 49 2f 02 c0       	push   0xc0022f49
c001a948:	e8 72 6d ff ff       	call   c00116bf <KePanic(char const*)>
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	8a 03                	mov    al,BYTE PTR [ebx]
c001a952:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a957:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a95a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a961:	85 c0                	test   eax,eax
c001a963:	74 10                	je     c001a975 <ISO9660::openDir(char const*, void**)+0x65>
c001a965:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a96c:	74 1a                	je     c001a988 <ISO9660::openDir(char const*, void**)+0x78>
c001a96e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a97f:	50                   	push   eax
c001a980:	e8 c1 c0 fe ff       	call   c0006a46 <init_percd>
c001a985:	83 c4 10             	add    esp,0x10
c001a988:	83 c3 03             	add    ebx,0x3
c001a98b:	50                   	push   eax
c001a98c:	50                   	push   eax
c001a98d:	6a 01                	push   0x1
c001a98f:	53                   	push   ebx
c001a990:	e8 78 bb fe ff       	call   c000650d <iso_open>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	89 c3                	mov    ebx,eax
c001a99a:	83 f8 ff             	cmp    eax,0xffffffff
c001a99d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9a2:	75 1c                	jne    c001a9c0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9a4:	53                   	push   ebx
c001a9a5:	53                   	push   ebx
c001a9a6:	68 f1 2f 02 c0       	push   0xc0022ff1
c001a9ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9b1:	e8 f0 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	b8 01 00 00 00       	mov    eax,0x1
c001a9be:	eb 25                	jmp    c001a9e5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9c0:	01 db                	add    ebx,ebx
c001a9c2:	51                   	push   ecx
c001a9c3:	83 c3 65             	add    ebx,0x65
c001a9c6:	51                   	push   ecx
c001a9c7:	68 04 30 02 c0       	push   0xc0023004
c001a9cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9d2:	e8 cf e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a9d7:	89 1e                	mov    DWORD PTR [esi],ebx
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	31 c0                	xor    eax,eax
c001a9de:	eb 05                	jmp    c001a9e5 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9e0:	b8 04 00 00 00       	mov    eax,0x4
c001a9e5:	5a                   	pop    edx
c001a9e6:	5b                   	pop    ebx
c001a9e7:	5e                   	pop    esi
c001a9e8:	c3                   	ret    
c001a9e9:	90                   	nop

c001a9ea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a9ea:	55                   	push   ebp
c001a9eb:	57                   	push   edi
c001a9ec:	56                   	push   esi
c001a9ed:	53                   	push   ebx
c001a9ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9f4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a9fb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aa02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001aa0a:	0f 84 e7 00 00 00    	je     c001aaf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa10:	85 db                	test   ebx,ebx
c001aa12:	0f 84 df 00 00 00    	je     c001aaf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	68 17 30 02 c0       	push   0xc0023017
c001aa20:	e8 20 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001aa25:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aa2c:	b9 02 00 00 00       	mov    ecx,0x2
c001aa31:	99                   	cdq    
c001aa32:	f7 f9                	idiv   ecx
c001aa34:	83 e8 32             	sub    eax,0x32
c001aa37:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa3a:	e8 93 bd fe ff       	call   c00067d2 <iso_readdir>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	89 c6                	mov    esi,eax
c001aa44:	85 c0                	test   eax,eax
c001aa46:	75 37                	jne    c001aa7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001aa48:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa4d:	56                   	push   esi
c001aa4e:	56                   	push   esi
c001aa4f:	68 22 30 02 c0       	push   0xc0023022
c001aa54:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa5a:	e8 47 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa5f:	83 c4 0c             	add    esp,0xc
c001aa62:	68 10 01 00 00       	push   0x110
c001aa67:	6a 00                	push   0x0
c001aa69:	57                   	push   edi
c001aa6a:	e8 81 5a fe ff       	call   c00004f0 <memset>
c001aa6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001aa75:	83 c4 10             	add    esp,0x10
c001aa78:	b8 01 00 00 00       	mov    eax,0x1
c001aa7d:	eb 7d                	jmp    c001aafc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa7f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aa85:	8d 68 08             	lea    ebp,[eax+0x8]
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	55                   	push   ebp
c001aa8c:	e8 df 5a fe ff       	call   c0000570 <strlen>
c001aa91:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa9d:	83 c4 10             	add    esp,0x10
c001aaa0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001aaa4:	75 0a                	jne    c001aab0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001aaa6:	b8 02 00 00 00       	mov    eax,0x2
c001aaab:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001aaae:	74 05                	je     c001aab5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001aab0:	b8 01 00 00 00       	mov    eax,0x1
c001aab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aab9:	50                   	push   eax
c001aaba:	50                   	push   eax
c001aabb:	55                   	push   ebp
c001aabc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aac0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aac4:	50                   	push   eax
c001aac5:	e8 76 5b fe ff       	call   c0000640 <strcpy>
c001aaca:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aad1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aad3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aad9:	5a                   	pop    edx
c001aada:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aadf:	59                   	pop    ecx
c001aae0:	68 35 30 02 c0       	push   0xc0023035
c001aae5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aaeb:	e8 b6 df fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aaf0:	83 c4 10             	add    esp,0x10
c001aaf3:	31 c0                	xor    eax,eax
c001aaf5:	eb 05                	jmp    c001aafc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aaf7:	b8 04 00 00 00       	mov    eax,0x4
c001aafc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab02:	5b                   	pop    ebx
c001ab03:	5e                   	pop    esi
c001ab04:	5f                   	pop    edi
c001ab05:	5d                   	pop    ebp
c001ab06:	c3                   	ret    

c001ab07 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab07:	57                   	push   edi
c001ab08:	56                   	push   esi
c001ab09:	53                   	push   ebx
c001ab0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab12:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab16:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab1c:	0f be cb             	movsx  ecx,bl
c001ab1f:	75 0b                	jne    c001ab2c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab21:	0f be 05 60 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024260
c001ab28:	39 c8                	cmp    eax,ecx
c001ab2a:	74 47                	je     c001ab73 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	31 d2                	xor    edx,edx
c001ab31:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab36:	6a 01                	push   0x1
c001ab38:	52                   	push   edx
c001ab39:	56                   	push   esi
c001ab3a:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab41:	e8 02 33 ff ff       	call   c000de48 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab46:	83 c4 20             	add    esp,0x20
c001ab49:	85 c0                	test   eax,eax
c001ab4b:	75 0e                	jne    c001ab5b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab4d:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab53:	88 1d 60 42 02 c0    	mov    BYTE PTR ds:0xc0024260,bl
c001ab59:	eb 18                	jmp    c001ab73 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab5b:	50                   	push   eax
c001ab5c:	68 00 08 00 00       	push   0x800
c001ab61:	6a 00                	push   0x0
c001ab63:	57                   	push   edi
c001ab64:	e8 87 59 fe ff       	call   c00004f0 <memset>
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	b8 01 00 00 00       	mov    eax,0x1
c001ab71:	eb 0e                	jmp    c001ab81 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ab73:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001ab78:	b9 00 08 00 00       	mov    ecx,0x800
c001ab7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab7f:	31 c0                	xor    eax,eax
c001ab81:	5b                   	pop    ebx
c001ab82:	5e                   	pop    esi
c001ab83:	5f                   	pop    edi
c001ab84:	c3                   	ret    
c001ab85:	90                   	nop

c001ab86 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ab86:	53                   	push   ebx
c001ab87:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ab8d:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001ab97:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ab9e:	8d 58 41             	lea    ebx,[eax+0x41]
c001aba1:	0f be db             	movsx  ebx,bl
c001aba4:	53                   	push   ebx
c001aba5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aba9:	50                   	push   eax
c001abaa:	6a 10                	push   0x10
c001abac:	e8 56 ff ff ff       	call   c001ab07 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	31 d2                	xor    edx,edx
c001abb6:	85 c0                	test   eax,eax
c001abb8:	75 33                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abba:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abbf:	75 2c                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abc1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abc6:	75 25                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abc8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abcd:	75 1e                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abcf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001abd4:	75 17                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abd6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001abdb:	75 10                	jne    c001abed <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abdd:	83 ec 0c             	sub    esp,0xc
c001abe0:	53                   	push   ebx
c001abe1:	e8 60 be fe ff       	call   c0006a46 <init_percd>
c001abe6:	83 c4 10             	add    esp,0x10
c001abe9:	40                   	inc    eax
c001abea:	0f 95 c2             	setne  dl
c001abed:	88 d0                	mov    al,dl
c001abef:	81 c4 08 08 00 00    	add    esp,0x808
c001abf5:	5b                   	pop    ebx
c001abf6:	c3                   	ret    
c001abf7:	90                   	nop

c001abf8 <ISO9660::ISO9660()>:
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abff:	83 ec 0c             	sub    esp,0xc
c001ac02:	50                   	push   eax
c001ac03:	e8 44 0c ff ff       	call   c000b84c <Filesystem::Filesystem()>
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	ba 50 30 02 c0       	mov    edx,0xc0023050
c001ac10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac14:	89 10                	mov    DWORD PTR [eax],edx
c001ac16:	e8 3d bf fe ff       	call   c0006b58 <fs_iso9660_init>
c001ac1b:	90                   	nop
c001ac1c:	83 c4 0c             	add    esp,0xc
c001ac1f:	c3                   	ret    

c001ac20 <SoundCard::beginPlayback()>:
c001ac20:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ac28:	e9 92 6a ff ff       	jmp    c00116bf <KePanic(char const*)>
c001ac2d:	90                   	nop

c001ac2e <SoundCard::stopPlayback()>:
c001ac2e:	c7 44 24 04 b4 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230b4
c001ac36:	e9 84 6a ff ff       	jmp    c00116bf <KePanic(char const*)>
c001ac3b:	90                   	nop

c001ac3c <SoundCard::SoundCard(char const*)>:
c001ac3c:	83 ec 1c             	sub    esp,0x1c
c001ac3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac43:	83 ec 08             	sub    esp,0x8
c001ac46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac4a:	50                   	push   eax
c001ac4b:	e8 ae 1f ff ff       	call   c000cbfe <Device::Device(char const*)>
c001ac50:	83 c4 10             	add    esp,0x10
c001ac53:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001ac58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac5c:	89 10                	mov    DWORD PTR [eax],edx
c001ac5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac62:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac6d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ac77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac7b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001ac85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac89:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ac93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac97:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001aca1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aca9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acae:	7f 1a                	jg     c001acca <SoundCard::SoundCard(char const*)+0x8e>
c001acb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acb8:	83 c2 54             	add    edx,0x54
c001acbb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001acc3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001acc8:	eb df                	jmp    c001aca9 <SoundCard::SoundCard(char const*)+0x6d>
c001acca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acce:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001acd5:	90                   	nop
c001acd6:	83 c4 1c             	add    esp,0x1c
c001acd9:	c3                   	ret    

c001acda <SoundCard::~SoundCard()>:
c001acda:	83 ec 0c             	sub    esp,0xc
c001acdd:	ba 00 31 02 c0       	mov    edx,0xc0023100
c001ace2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace6:	89 10                	mov    DWORD PTR [eax],edx
c001ace8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acec:	83 ec 0c             	sub    esp,0xc
c001acef:	50                   	push   eax
c001acf0:	e8 73 1c ff ff       	call   c000c968 <Device::~Device()>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	90                   	nop
c001acf9:	83 c4 0c             	add    esp,0xc
c001acfc:	c3                   	ret    
c001acfd:	90                   	nop

c001acfe <SoundCard::~SoundCard()>:
c001acfe:	83 ec 0c             	sub    esp,0xc
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad08:	e8 cd ff ff ff       	call   c001acda <SoundCard::~SoundCard()>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	83 ec 08             	sub    esp,0x8
c001ad13:	68 e8 01 00 00       	push   0x1e8
c001ad18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad1c:	e8 f7 fa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ad21:	83 c4 10             	add    esp,0x10
c001ad24:	83 c4 0c             	add    esp,0xc
c001ad27:	c3                   	ret    

c001ad28 <SoundCard::configureRates(int, int, int)>:
c001ad28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad2c:	31 c0                	xor    eax,eax
c001ad2e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad35:	75 20                	jne    c001ad57 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad3b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad45:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad4f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad55:	b0 01                	mov    al,0x1
c001ad57:	c3                   	ret    

c001ad58 <SoundCard::getSamples16(int, short*)>:
c001ad58:	55                   	push   ebp
c001ad59:	57                   	push   edi
c001ad5a:	31 ff                	xor    edi,edi
c001ad5c:	56                   	push   esi
c001ad5d:	53                   	push   ebx
c001ad5e:	31 db                	xor    ebx,ebx
c001ad60:	83 ec 10             	sub    esp,0x10
c001ad63:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad67:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad6b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad6e:	50                   	push   eax
c001ad6f:	6a 00                	push   0x0
c001ad71:	55                   	push   ebp
c001ad72:	e8 79 57 fe ff       	call   c00004f0 <memset>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad7e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ad85:	85 c0                	test   eax,eax
c001ad87:	74 1b                	je     c001ada4 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad89:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad8d:	75 15                	jne    c001ada4 <SoundCard::getSamples16(int, short*)+0x4c>
c001ad8f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ad93:	55                   	push   ebp
c001ad94:	56                   	push   esi
c001ad95:	50                   	push   eax
c001ad96:	e8 f1 02 00 00       	call   c001b08c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	39 c7                	cmp    edi,eax
c001ada0:	7d 02                	jge    c001ada4 <SoundCard::getSamples16(int, short*)+0x4c>
c001ada2:	89 c7                	mov    edi,eax
c001ada4:	43                   	inc    ebx
c001ada5:	83 fb 20             	cmp    ebx,0x20
c001ada8:	75 d0                	jne    c001ad7a <SoundCard::getSamples16(int, short*)+0x22>
c001adaa:	83 c4 0c             	add    esp,0xc
c001adad:	89 f8                	mov    eax,edi
c001adaf:	5b                   	pop    ebx
c001adb0:	5e                   	pop    esi
c001adb1:	5f                   	pop    edi
c001adb2:	5d                   	pop    ebp
c001adb3:	c3                   	ret    

c001adb4 <SoundCard::getSamples32(int, int*)>:
c001adb4:	55                   	push   ebp
c001adb5:	57                   	push   edi
c001adb6:	31 ff                	xor    edi,edi
c001adb8:	56                   	push   esi
c001adb9:	31 f6                	xor    esi,esi
c001adbb:	53                   	push   ebx
c001adbc:	83 ec 10             	sub    esp,0x10
c001adbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adc3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001adc7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adcb:	c1 e0 02             	shl    eax,0x2
c001adce:	50                   	push   eax
c001adcf:	6a 00                	push   0x0
c001add1:	55                   	push   ebp
c001add2:	e8 19 57 fe ff       	call   c00004f0 <memset>
c001add7:	83 c4 10             	add    esp,0x10
c001adda:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ade1:	85 c0                	test   eax,eax
c001ade3:	74 1b                	je     c001ae00 <SoundCard::getSamples32(int, int*)+0x4c>
c001ade5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ade9:	75 15                	jne    c001ae00 <SoundCard::getSamples32(int, int*)+0x4c>
c001adeb:	53                   	push   ebx
c001adec:	55                   	push   ebp
c001aded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adf1:	50                   	push   eax
c001adf2:	e8 61 03 00 00       	call   c001b158 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	39 c6                	cmp    esi,eax
c001adfc:	7d 02                	jge    c001ae00 <SoundCard::getSamples32(int, int*)+0x4c>
c001adfe:	89 c6                	mov    esi,eax
c001ae00:	47                   	inc    edi
c001ae01:	83 ff 20             	cmp    edi,0x20
c001ae04:	75 d4                	jne    c001adda <SoundCard::getSamples32(int, int*)+0x26>
c001ae06:	85 f6                	test   esi,esi
c001ae08:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae0f:	75 0f                	jne    c001ae20 <SoundCard::getSamples32(int, int*)+0x6c>
c001ae11:	85 c0                	test   eax,eax
c001ae13:	74 1b                	je     c001ae30 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae15:	83 ec 0c             	sub    esp,0xc
c001ae18:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae1a:	53                   	push   ebx
c001ae1b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae1e:	eb 0d                	jmp    c001ae2d <SoundCard::getSamples32(int, int*)+0x79>
c001ae20:	85 c0                	test   eax,eax
c001ae22:	75 0c                	jne    c001ae30 <SoundCard::getSamples32(int, int*)+0x7c>
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae29:	53                   	push   ebx
c001ae2a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	83 c4 0c             	add    esp,0xc
c001ae33:	89 f0                	mov    eax,esi
c001ae35:	5b                   	pop    ebx
c001ae36:	5e                   	pop    esi
c001ae37:	5f                   	pop    edi
c001ae38:	5d                   	pop    ebp
c001ae39:	c3                   	ret    

c001ae3a <SoundCard::addChannel(SoundPort*)>:
c001ae3a:	83 ec 0c             	sub    esp,0xc
c001ae3d:	31 c0                	xor    eax,eax
c001ae3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae43:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae4b:	74 1b                	je     c001ae68 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae4d:	40                   	inc    eax
c001ae4e:	83 f8 20             	cmp    eax,0x20
c001ae51:	75 f0                	jne    c001ae43 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae53:	83 ec 0c             	sub    esp,0xc
c001ae56:	68 d9 30 02 c0       	push   0xc00230d9
c001ae5b:	e8 5f 68 ff ff       	call   c00116bf <KePanic(char const*)>
c001ae60:	83 c4 10             	add    esp,0x10
c001ae63:	83 c8 ff             	or     eax,0xffffffff
c001ae66:	eb 0b                	jmp    c001ae73 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae6c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ae73:	83 c4 0c             	add    esp,0xc
c001ae76:	c3                   	ret    
c001ae77:	90                   	nop

c001ae78 <SoundCard::removeChannel(int)>:
c001ae78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae80:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ae8b:	c3                   	ret    

c001ae8c <SoundPort::SoundPort(int, int, int, int)>:
c001ae8c:	83 ec 0c             	sub    esp,0xc
c001ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae93:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aeaa:	89 10                	mov    DWORD PTR [eax],edx
c001aeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aeb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aebf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aec2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aec7:	75 13                	jne    c001aedc <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aecf:	05 a0 0f 00 00       	add    eax,0xfa0
c001aed4:	01 c0                	add    eax,eax
c001aed6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aeda:	66 90                	xchg   ax,ax
c001aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aee4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeeb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aef9:	c1 e0 02             	shl    eax,0x2
c001aefc:	83 ec 0c             	sub    esp,0xc
c001aeff:	50                   	push   eax
c001af00:	e8 b1 cb fe ff       	call   c0007ab6 <malloc>
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	89 c2                	mov    edx,eax
c001af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af11:	90                   	nop
c001af12:	83 c4 0c             	add    esp,0xc
c001af15:	c3                   	ret    
c001af16:	66 90                	xchg   ax,ax

c001af18 <SoundPort::~SoundPort()>:
c001af18:	83 ec 0c             	sub    esp,0xc
c001af1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af22:	85 c0                	test   eax,eax
c001af24:	74 1e                	je     c001af44 <SoundPort::~SoundPort()+0x2c>
c001af26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af2d:	83 ec 0c             	sub    esp,0xc
c001af30:	50                   	push   eax
c001af31:	e8 90 cb fe ff       	call   c0007ac6 <free>
c001af36:	83 c4 10             	add    esp,0x10
c001af39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af44:	90                   	nop
c001af45:	83 c4 0c             	add    esp,0xc
c001af48:	c3                   	ret    
c001af49:	90                   	nop
c001af4a:	66 90                	xchg   ax,ax

c001af4c <SoundPort::unpause()>:
c001af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af50:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af54:	c3                   	ret    
c001af55:	90                   	nop
c001af56:	66 90                	xchg   ax,ax

c001af58 <SoundPort::pause()>:
c001af58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af5c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af60:	c3                   	ret    
c001af61:	90                   	nop
c001af62:	66 90                	xchg   ax,ax

c001af64 <SoundPort::getBufferUsed()>:
c001af64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af6b:	c3                   	ret    

c001af6c <SoundPort::getBufferSize()>:
c001af6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af73:	c3                   	ret    

c001af74 <SoundPort::buffer16(short*, int)>:
c001af74:	55                   	push   ebp
c001af75:	57                   	push   edi
c001af76:	56                   	push   esi
c001af77:	53                   	push   ebx
c001af78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af7c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001af80:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001af83:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001af86:	74 68                	je     c001aff0 <SoundPort::buffer16(short*, int)+0x7c>
c001af88:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af8c:	85 c9                	test   ecx,ecx
c001af8e:	7e 60                	jle    c001aff0 <SoundPort::buffer16(short*, int)+0x7c>
c001af90:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001af94:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af97:	c1 e1 0f             	shl    ecx,0xf
c001af9a:	8d 70 01             	lea    esi,[eax+0x1]
c001af9d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afa0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afa3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afa6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afa9:	74 4d                	je     c001aff8 <SoundPort::buffer16(short*, int)+0x84>
c001afab:	31 f6                	xor    esi,esi
c001afad:	eb 21                	jmp    c001afd0 <SoundPort::buffer16(short*, int)+0x5c>
c001afaf:	90                   	nop
c001afb0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001afb5:	8d 79 01             	lea    edi,[ecx+0x1]
c001afb8:	c1 e3 0f             	shl    ebx,0xf
c001afbb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afbe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afc1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001afc4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afc7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afca:	74 1c                	je     c001afe8 <SoundPort::buffer16(short*, int)+0x74>
c001afcc:	89 c6                	mov    esi,eax
c001afce:	66 90                	xchg   ax,ax
c001afd0:	8d 46 01             	lea    eax,[esi+0x1]
c001afd3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001afd7:	75 d7                	jne    c001afb0 <SoundPort::buffer16(short*, int)+0x3c>
c001afd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afdd:	8d 76 00             	lea    esi,[esi+0x0]
c001afe0:	5b                   	pop    ebx
c001afe1:	5e                   	pop    esi
c001afe2:	5f                   	pop    edi
c001afe3:	5d                   	pop    ebp
c001afe4:	c3                   	ret    
c001afe5:	8d 76 00             	lea    esi,[esi+0x0]
c001afe8:	5b                   	pop    ebx
c001afe9:	8d 46 02             	lea    eax,[esi+0x2]
c001afec:	5e                   	pop    esi
c001afed:	5f                   	pop    edi
c001afee:	5d                   	pop    ebp
c001afef:	c3                   	ret    
c001aff0:	5b                   	pop    ebx
c001aff1:	31 c0                	xor    eax,eax
c001aff3:	5e                   	pop    esi
c001aff4:	5f                   	pop    edi
c001aff5:	5d                   	pop    ebp
c001aff6:	c3                   	ret    
c001aff7:	90                   	nop
c001aff8:	b8 01 00 00 00       	mov    eax,0x1
c001affd:	eb e1                	jmp    c001afe0 <SoundPort::buffer16(short*, int)+0x6c>
c001afff:	90                   	nop

c001b000 <SoundPort::buffer32(int*, int)>:
c001b000:	55                   	push   ebp
c001b001:	57                   	push   edi
c001b002:	56                   	push   esi
c001b003:	53                   	push   ebx
c001b004:	83 ec 04             	sub    esp,0x4
c001b007:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b00b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b012:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b016:	89 04 24             	mov    DWORD PTR [esp],eax
c001b019:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b01c:	74 5a                	je     c001b078 <SoundPort::buffer32(int*, int)+0x78>
c001b01e:	85 c0                	test   eax,eax
c001b020:	7e 56                	jle    c001b078 <SoundPort::buffer32(int*, int)+0x78>
c001b022:	8d 71 01             	lea    esi,[ecx+0x1]
c001b025:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b028:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b02b:	8b 37                	mov    esi,DWORD PTR [edi]
c001b02d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b030:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b033:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b036:	74 4c                	je     c001b084 <SoundPort::buffer32(int*, int)+0x84>
c001b038:	31 f6                	xor    esi,esi
c001b03a:	eb 1c                	jmp    c001b058 <SoundPort::buffer32(int*, int)+0x58>
c001b03c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b03f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b042:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b045:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b048:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b04c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b04f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b052:	74 18                	je     c001b06c <SoundPort::buffer32(int*, int)+0x6c>
c001b054:	89 de                	mov    esi,ebx
c001b056:	66 90                	xchg   ax,ax
c001b058:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b05b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b05e:	75 dc                	jne    c001b03c <SoundPort::buffer32(int*, int)+0x3c>
c001b060:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b063:	90                   	nop
c001b064:	83 c4 04             	add    esp,0x4
c001b067:	5b                   	pop    ebx
c001b068:	5e                   	pop    esi
c001b069:	5f                   	pop    edi
c001b06a:	5d                   	pop    ebp
c001b06b:	c3                   	ret    
c001b06c:	83 c4 04             	add    esp,0x4
c001b06f:	8d 46 02             	lea    eax,[esi+0x2]
c001b072:	5b                   	pop    ebx
c001b073:	5e                   	pop    esi
c001b074:	5f                   	pop    edi
c001b075:	5d                   	pop    ebp
c001b076:	c3                   	ret    
c001b077:	90                   	nop
c001b078:	83 c4 04             	add    esp,0x4
c001b07b:	31 c0                	xor    eax,eax
c001b07d:	5b                   	pop    ebx
c001b07e:	5e                   	pop    esi
c001b07f:	5f                   	pop    edi
c001b080:	5d                   	pop    ebp
c001b081:	c3                   	ret    
c001b082:	66 90                	xchg   ax,ax
c001b084:	b8 01 00 00 00       	mov    eax,0x1
c001b089:	eb d9                	jmp    c001b064 <SoundPort::buffer32(int*, int)+0x64>
c001b08b:	90                   	nop

c001b08c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b08c:	57                   	push   edi
c001b08d:	56                   	push   esi
c001b08e:	53                   	push   ebx
c001b08f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b093:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b097:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b09d:	39 03                	cmp    DWORD PTR [ebx],eax
c001b09f:	74 13                	je     c001b0b4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b0a1:	83 ec 0c             	sub    esp,0xc
c001b0a4:	68 2c 31 02 c0       	push   0xc002312c
c001b0a9:	e8 11 66 ff ff       	call   c00116bf <KePanic(char const*)>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b0ba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0bd:	74 11                	je     c001b0d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 6b 31 02 c0       	push   0xc002316b
c001b0c7:	e8 f3 65 ff ff       	call   c00116bf <KePanic(char const*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	90                   	nop
c001b0d0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b0d6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b0d9:	74 11                	je     c001b0ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	68 6b 31 02 c0       	push   0xc002316b
c001b0e3:	e8 d7 65 ff ff       	call   c00116bf <KePanic(char const*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	90                   	nop
c001b0ec:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b0ef:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b0f3:	7e 07                	jle    c001b0fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b0f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0fc:	85 f6                	test   esi,esi
c001b0fe:	7e 2c                	jle    c001b12c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b100:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b104:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b107:	31 c9                	xor    ecx,ecx
c001b109:	01 d7                	add    edi,edx
c001b10b:	90                   	nop
c001b10c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b10f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b112:	85 c0                	test   eax,eax
c001b114:	79 06                	jns    c001b11c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b116:	05 ff 7f 00 00       	add    eax,0x7fff
c001b11b:	90                   	nop
c001b11c:	c1 f8 0f             	sar    eax,0xf
c001b11f:	83 c1 04             	add    ecx,0x4
c001b122:	66 01 02             	add    WORD PTR [edx],ax
c001b125:	83 c2 02             	add    edx,0x2
c001b128:	39 d7                	cmp    edi,edx
c001b12a:	75 e0                	jne    c001b10c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b12c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b12f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b132:	83 ec 04             	sub    esp,0x4
c001b135:	29 f0                	sub    eax,esi
c001b137:	c1 e0 02             	shl    eax,0x2
c001b13a:	50                   	push   eax
c001b13b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b13e:	50                   	push   eax
c001b13f:	52                   	push   edx
c001b140:	e8 8b 52 fe ff       	call   c00003d0 <memmove>
c001b145:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b148:	83 c4 10             	add    esp,0x10
c001b14b:	29 f0                	sub    eax,esi
c001b14d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b150:	89 f0                	mov    eax,esi
c001b152:	5b                   	pop    ebx
c001b153:	5e                   	pop    esi
c001b154:	5f                   	pop    edi
c001b155:	c3                   	ret    
c001b156:	66 90                	xchg   ax,ax

c001b158 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b158:	57                   	push   edi
c001b159:	56                   	push   esi
c001b15a:	53                   	push   ebx
c001b15b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b15f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b163:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b167:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b16d:	39 06                	cmp    DWORD PTR [esi],eax
c001b16f:	74 13                	je     c001b184 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b171:	83 ec 0c             	sub    esp,0xc
c001b174:	68 4c 31 02 c0       	push   0xc002314c
c001b179:	e8 41 65 ff ff       	call   c00116bf <KePanic(char const*)>
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	8d 76 00             	lea    esi,[esi+0x0]
c001b184:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b18a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b18d:	74 11                	je     c001b1a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b18f:	83 ec 0c             	sub    esp,0xc
c001b192:	68 87 31 02 c0       	push   0xc0023187
c001b197:	e8 23 65 ff ff       	call   c00116bf <KePanic(char const*)>
c001b19c:	83 c4 10             	add    esp,0x10
c001b19f:	90                   	nop
c001b1a0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b1a6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b1a9:	74 11                	je     c001b1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b1ab:	83 ec 0c             	sub    esp,0xc
c001b1ae:	68 87 31 02 c0       	push   0xc0023187
c001b1b3:	e8 07 65 ff ff       	call   c00116bf <KePanic(char const*)>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	90                   	nop
c001b1bc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b1bf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b1c3:	7e 07                	jle    c001b1cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b1c5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1cc:	85 ff                	test   edi,edi
c001b1ce:	7e 1c                	jle    c001b1ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b1d0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b1d7:	31 c0                	xor    eax,eax
c001b1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b1dc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1df:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b1e2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b1e5:	83 c0 04             	add    eax,0x4
c001b1e8:	39 c1                	cmp    ecx,eax
c001b1ea:	75 f0                	jne    c001b1dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b1ec:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b1ef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b1f2:	83 ec 04             	sub    esp,0x4
c001b1f5:	29 f8                	sub    eax,edi
c001b1f7:	c1 e0 02             	shl    eax,0x2
c001b1fa:	50                   	push   eax
c001b1fb:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b1fe:	50                   	push   eax
c001b1ff:	52                   	push   edx
c001b200:	e8 cb 51 fe ff       	call   c00003d0 <memmove>
c001b205:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	29 f8                	sub    eax,edi
c001b20d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b210:	89 f8                	mov    eax,edi
c001b212:	5b                   	pop    ebx
c001b213:	5e                   	pop    esi
c001b214:	5f                   	pop    edi
c001b215:	c3                   	ret    

c001b216 <PCI::open(int, int, void*)>:
c001b216:	83 ec 18             	sub    esp,0x18
c001b219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b21d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b221:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b227:	8b 10                	mov    edx,DWORD PTR [eax]
c001b229:	50                   	push   eax
c001b22a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b22d:	31 c0                	xor    eax,eax
c001b22f:	83 c4 1c             	add    esp,0x1c
c001b232:	c3                   	ret    
c001b233:	90                   	nop

c001b234 <PCI::close(int, int, void*)>:
c001b234:	31 c0                	xor    eax,eax
c001b236:	c3                   	ret    
c001b237:	90                   	nop

c001b238 <PCI::PCI()>:
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b23f:	83 ec 08             	sub    esp,0x8
c001b242:	68 a3 31 02 c0       	push   0xc00231a3
c001b247:	50                   	push   eax
c001b248:	e8 7b 11 ff ff       	call   c000c3c8 <Bus::Bus(char const*)>
c001b24d:	83 c4 10             	add    esp,0x10
c001b250:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c001b255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b259:	89 10                	mov    DWORD PTR [eax],edx
c001b25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b26d:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b276:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b27c:	0f b6 d0             	movzx  edx,al
c001b27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b283:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b294:	0f b6 d0             	movzx  edx,al
c001b297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b29b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2aa:	8d 50 01             	lea    edx,[eax+0x1]
c001b2ad:	88 d1                	mov    cl,dl
c001b2af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2b3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2b9:	0f b6 d0             	movzx  edx,al
c001b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2c4:	83 c9 c0             	or     ecx,0xffffffc0
c001b2c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b2cb:	90                   	nop
c001b2cc:	83 c4 0c             	add    esp,0xc
c001b2cf:	c3                   	ret    

c001b2d0 <PCI::readBAR8(unsigned int, int)>:
c001b2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2d8:	f6 c2 01             	test   dl,0x1
c001b2db:	74 07                	je     c001b2e4 <PCI::readBAR8(unsigned int, int)+0x14>
c001b2dd:	83 e2 fc             	and    edx,0xfffffffc
c001b2e0:	01 c2                	add    edx,eax
c001b2e2:	ec                   	in     al,dx
c001b2e3:	c3                   	ret    
c001b2e4:	83 e2 f0             	and    edx,0xfffffff0
c001b2e7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b2ea:	c3                   	ret    
c001b2eb:	90                   	nop

c001b2ec <PCI::readBAR16(unsigned int, int)>:
c001b2ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2f4:	f6 c2 01             	test   dl,0x1
c001b2f7:	74 08                	je     c001b301 <PCI::readBAR16(unsigned int, int)+0x15>
c001b2f9:	83 e2 fc             	and    edx,0xfffffffc
c001b2fc:	01 c2                	add    edx,eax
c001b2fe:	66 ed                	in     ax,dx
c001b300:	c3                   	ret    
c001b301:	83 e2 f0             	and    edx,0xfffffff0
c001b304:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b308:	c3                   	ret    
c001b309:	90                   	nop

c001b30a <PCI::readBAR32(unsigned int, int)>:
c001b30a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b30e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b312:	f6 c2 01             	test   dl,0x1
c001b315:	74 07                	je     c001b31e <PCI::readBAR32(unsigned int, int)+0x14>
c001b317:	83 e2 fc             	and    edx,0xfffffffc
c001b31a:	01 c2                	add    edx,eax
c001b31c:	ed                   	in     eax,dx
c001b31d:	c3                   	ret    
c001b31e:	83 e2 f0             	and    edx,0xfffffff0
c001b321:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b32e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b332:	f6 c2 01             	test   dl,0x1
c001b335:	74 07                	je     c001b33e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b337:	83 e2 fc             	and    edx,0xfffffffc
c001b33a:	01 ca                	add    edx,ecx
c001b33c:	ee                   	out    dx,al
c001b33d:	c3                   	ret    
c001b33e:	83 e2 f0             	and    edx,0xfffffff0
c001b341:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b344:	c3                   	ret    
c001b345:	90                   	nop

c001b346 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b346:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b34a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b352:	f6 c2 01             	test   dl,0x1
c001b355:	74 08                	je     c001b35f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b357:	83 e2 fc             	and    edx,0xfffffffc
c001b35a:	01 ca                	add    edx,ecx
c001b35c:	66 ef                	out    dx,ax
c001b35e:	c3                   	ret    
c001b35f:	83 e2 f0             	and    edx,0xfffffff0
c001b362:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b366:	c3                   	ret    
c001b367:	90                   	nop

c001b368 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b368:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b370:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b374:	f6 c2 01             	test   dl,0x1
c001b377:	74 07                	je     c001b380 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b379:	83 e2 fc             	and    edx,0xfffffffc
c001b37c:	01 ca                	add    edx,ecx
c001b37e:	ef                   	out    dx,eax
c001b37f:	c3                   	ret    
c001b380:	83 e2 f0             	and    edx,0xfffffff0
c001b383:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b386:	c3                   	ret    
c001b387:	90                   	nop

c001b388 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b388:	55                   	push   ebp
c001b389:	57                   	push   edi
c001b38a:	56                   	push   esi
c001b38b:	53                   	push   ebx
c001b38c:	83 ec 0c             	sub    esp,0xc
c001b38f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b394:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b398:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b39c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3a0:	83 fe 07             	cmp    esi,0x7
c001b3a3:	76 10                	jbe    c001b3b5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3a5:	83 ec 0c             	sub    esp,0xc
c001b3a8:	68 ab 31 02 c0       	push   0xc00231ab
c001b3ad:	e8 0d 63 ff ff       	call   c00116bf <KePanic(char const*)>
c001b3b2:	83 c4 10             	add    esp,0x10
c001b3b5:	0f b6 db             	movzx  ebx,bl
c001b3b8:	83 fb 0f             	cmp    ebx,0xf
c001b3bb:	76 10                	jbe    c001b3cd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	68 db 31 02 c0       	push   0xc00231db
c001b3c5:	e8 f5 62 ff ff       	call   c00116bf <KePanic(char const*)>
c001b3ca:	83 c4 10             	add    esp,0x10
c001b3cd:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3d0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b3d5:	83 c8 f0             	or     eax,0xfffffff0
c001b3d8:	ee                   	out    dx,al
c001b3d9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b3de:	89 e8                	mov    eax,ebp
c001b3e0:	ee                   	out    dx,al
c001b3e1:	83 c4 0c             	add    esp,0xc
c001b3e4:	89 d8                	mov    eax,ebx
c001b3e6:	89 f9                	mov    ecx,edi
c001b3e8:	c1 e0 08             	shl    eax,0x8
c001b3eb:	0f b6 d9             	movzx  ebx,cl
c001b3ee:	83 e3 fc             	and    ebx,0xfffffffc
c001b3f1:	09 d8                	or     eax,ebx
c001b3f3:	5b                   	pop    ebx
c001b3f4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b3f9:	5e                   	pop    esi
c001b3fa:	5f                   	pop    edi
c001b3fb:	5d                   	pop    ebp
c001b3fc:	c3                   	ret    
c001b3fd:	90                   	nop

c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3fe:	57                   	push   edi
c001b3ff:	56                   	push   esi
c001b400:	53                   	push   ebx
c001b401:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b405:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b409:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b40f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b413:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b417:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b41b:	83 ff 01             	cmp    edi,0x1
c001b41e:	75 3f                	jne    c001b45f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b420:	89 de                	mov    esi,ebx
c001b422:	0f b6 c0             	movzx  eax,al
c001b425:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b42b:	c1 e0 10             	shl    eax,0x10
c001b42e:	0f b6 c9             	movzx  ecx,cl
c001b431:	09 f0                	or     eax,esi
c001b433:	c1 e1 08             	shl    ecx,0x8
c001b436:	0f b6 d2             	movzx  edx,dl
c001b439:	09 c8                	or     eax,ecx
c001b43b:	c1 e2 0b             	shl    edx,0xb
c001b43e:	09 d0                	or     eax,edx
c001b440:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b445:	0d 00 00 00 80       	or     eax,0x80000000
c001b44a:	ef                   	out    dx,eax
c001b44b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b450:	ed                   	in     eax,dx
c001b451:	83 e3 02             	and    ebx,0x2
c001b454:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b45b:	d3 e8                	shr    eax,cl
c001b45d:	eb 44                	jmp    c001b4a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b45f:	83 ff 02             	cmp    edi,0x2
c001b462:	75 2d                	jne    c001b491 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	0f b6 c9             	movzx  ecx,cl
c001b46a:	0f b6 d2             	movzx  edx,dl
c001b46d:	0f b6 fb             	movzx  edi,bl
c001b470:	0f b6 c0             	movzx  eax,al
c001b473:	57                   	push   edi
c001b474:	51                   	push   ecx
c001b475:	52                   	push   edx
c001b476:	50                   	push   eax
c001b477:	56                   	push   esi
c001b478:	e8 0b ff ff ff       	call   c001b388 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b47d:	89 c2                	mov    edx,eax
c001b47f:	ed                   	in     eax,dx
c001b480:	83 e3 02             	and    ebx,0x2
c001b483:	83 c4 20             	add    esp,0x20
c001b486:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b48d:	d3 e8                	shr    eax,cl
c001b48f:	eb 12                	jmp    c001b4a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b491:	83 ec 0c             	sub    esp,0xc
c001b494:	68 0b 32 02 c0       	push   0xc002320b
c001b499:	e8 21 62 ff ff       	call   c00116bf <KePanic(char const*)>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	31 c0                	xor    eax,eax
c001b4a3:	5b                   	pop    ebx
c001b4a4:	5e                   	pop    esi
c001b4a5:	5f                   	pop    edi
c001b4a6:	c3                   	ret    
c001b4a7:	90                   	nop

c001b4a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4a8:	83 ec 18             	sub    esp,0x18
c001b4ab:	6a 00                	push   0x0
c001b4ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4b2:	50                   	push   eax
c001b4b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4b8:	50                   	push   eax
c001b4b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4be:	50                   	push   eax
c001b4bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4c3:	e8 36 ff ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4c8:	83 c4 2c             	add    esp,0x2c
c001b4cb:	c3                   	ret    

c001b4cc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b4cc:	83 ec 18             	sub    esp,0x18
c001b4cf:	6a 0e                	push   0xe
c001b4d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d6:	50                   	push   eax
c001b4d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4dc:	50                   	push   eax
c001b4dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e2:	50                   	push   eax
c001b4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4e7:	e8 12 ff ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ec:	83 c4 2c             	add    esp,0x2c
c001b4ef:	0f b6 c0             	movzx  eax,al
c001b4f2:	c3                   	ret    
c001b4f3:	90                   	nop

c001b4f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b4f4:	55                   	push   ebp
c001b4f5:	57                   	push   edi
c001b4f6:	56                   	push   esi
c001b4f7:	53                   	push   ebx
c001b4f8:	83 ec 18             	sub    esp,0x18
c001b4fb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b500:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b505:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b50a:	6a 0a                	push   0xa
c001b50c:	56                   	push   esi
c001b50d:	55                   	push   ebp
c001b50e:	57                   	push   edi
c001b50f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b513:	e8 e6 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b518:	83 c4 14             	add    esp,0x14
c001b51b:	89 c3                	mov    ebx,eax
c001b51d:	6a 0a                	push   0xa
c001b51f:	0f b6 db             	movzx  ebx,bl
c001b522:	56                   	push   esi
c001b523:	55                   	push   ebp
c001b524:	57                   	push   edi
c001b525:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b529:	e8 d0 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b52e:	83 c4 2c             	add    esp,0x2c
c001b531:	25 00 ff 00 00       	and    eax,0xff00
c001b536:	09 d8                	or     eax,ebx
c001b538:	5b                   	pop    ebx
c001b539:	5e                   	pop    esi
c001b53a:	5f                   	pop    edi
c001b53b:	5d                   	pop    ebp
c001b53c:	c3                   	ret    
c001b53d:	90                   	nop

c001b53e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b53e:	83 ec 18             	sub    esp,0x18
c001b541:	6a 08                	push   0x8
c001b543:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b548:	50                   	push   eax
c001b549:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b54e:	50                   	push   eax
c001b54f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b554:	50                   	push   eax
c001b555:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b559:	e8 a0 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b55e:	83 c4 2c             	add    esp,0x2c
c001b561:	0f b6 c4             	movzx  eax,ah
c001b564:	c3                   	ret    
c001b565:	90                   	nop

c001b566 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b566:	83 ec 18             	sub    esp,0x18
c001b569:	6a 08                	push   0x8
c001b56b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b570:	50                   	push   eax
c001b571:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b576:	50                   	push   eax
c001b577:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b57c:	50                   	push   eax
c001b57d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b581:	e8 78 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b586:	83 c4 2c             	add    esp,0x2c
c001b589:	c3                   	ret    

c001b58a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b58a:	83 ec 18             	sub    esp,0x18
c001b58d:	6a 3c                	push   0x3c
c001b58f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b594:	50                   	push   eax
c001b595:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b59a:	50                   	push   eax
c001b59b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5a0:	50                   	push   eax
c001b5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5a5:	e8 54 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5aa:	83 c4 2c             	add    esp,0x2c
c001b5ad:	c3                   	ret    

c001b5ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5ae:	83 ec 18             	sub    esp,0x18
c001b5b1:	6a 18                	push   0x18
c001b5b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b8:	50                   	push   eax
c001b5b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5be:	50                   	push   eax
c001b5bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5c4:	50                   	push   eax
c001b5c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5c9:	e8 30 fe ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ce:	83 c4 2c             	add    esp,0x2c
c001b5d1:	0f b6 c4             	movzx  eax,ah
c001b5d4:	c3                   	ret    
c001b5d5:	90                   	nop

c001b5d6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b5d6:	55                   	push   ebp
c001b5d7:	57                   	push   edi
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	83 ec 28             	sub    esp,0x28
c001b5dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b5e1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b5e6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b5eb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b5f0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b5f7:	8d 43 12             	lea    eax,[ebx+0x12]
c001b5fa:	83 c3 10             	add    ebx,0x10
c001b5fd:	0f b6 c0             	movzx  eax,al
c001b600:	0f b6 db             	movzx  ebx,bl
c001b603:	50                   	push   eax
c001b604:	51                   	push   ecx
c001b605:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b609:	57                   	push   edi
c001b60a:	55                   	push   ebp
c001b60b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b60f:	e8 ea fd ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b614:	83 c4 14             	add    esp,0x14
c001b617:	89 c6                	mov    esi,eax
c001b619:	53                   	push   ebx
c001b61a:	c1 e6 10             	shl    esi,0x10
c001b61d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b621:	51                   	push   ecx
c001b622:	57                   	push   edi
c001b623:	55                   	push   ebp
c001b624:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b628:	e8 d1 fd ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b62d:	83 c4 3c             	add    esp,0x3c
c001b630:	0f b7 c0             	movzx  eax,ax
c001b633:	5b                   	pop    ebx
c001b634:	09 f0                	or     eax,esi
c001b636:	5e                   	pop    esi
c001b637:	5f                   	pop    edi
c001b638:	5d                   	pop    ebp
c001b639:	c3                   	ret    

c001b63a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b63a:	55                   	push   ebp
c001b63b:	57                   	push   edi
c001b63c:	56                   	push   esi
c001b63d:	53                   	push   ebx
c001b63e:	83 ec 0c             	sub    esp,0xc
c001b641:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b645:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b649:	89 f5                	mov    ebp,esi
c001b64b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b651:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b655:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b659:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b65d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b661:	83 f9 01             	cmp    ecx,0x1
c001b664:	75 5d                	jne    c001b6c3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b666:	0f b6 c8             	movzx  ecx,al
c001b669:	0f b6 d2             	movzx  edx,dl
c001b66c:	c1 e1 10             	shl    ecx,0x10
c001b66f:	c1 e2 0b             	shl    edx,0xb
c001b672:	89 f0                	mov    eax,esi
c001b674:	25 fc 00 00 00       	and    eax,0xfc
c001b679:	09 c1                	or     ecx,eax
c001b67b:	89 e8                	mov    eax,ebp
c001b67d:	0f b6 c0             	movzx  eax,al
c001b680:	c1 e0 08             	shl    eax,0x8
c001b683:	09 c1                	or     ecx,eax
c001b685:	09 d1                	or     ecx,edx
c001b687:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b68c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b692:	89 c8                	mov    eax,ecx
c001b694:	ef                   	out    dx,eax
c001b695:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b69a:	ed                   	in     eax,dx
c001b69b:	0f b7 db             	movzx  ebx,bx
c001b69e:	83 e6 02             	and    esi,0x2
c001b6a1:	74 0a                	je     c001b6ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b6a3:	0f b7 d0             	movzx  edx,ax
c001b6a6:	c1 e3 10             	shl    ebx,0x10
c001b6a9:	09 d3                	or     ebx,edx
c001b6ab:	eb 05                	jmp    c001b6b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b6ad:	66 31 c0             	xor    ax,ax
c001b6b0:	09 c3                	or     ebx,eax
c001b6b2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6b7:	89 c8                	mov    eax,ecx
c001b6b9:	ef                   	out    dx,eax
c001b6ba:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6bf:	89 d8                	mov    eax,ebx
c001b6c1:	eb 41                	jmp    c001b704 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6c3:	83 f9 02             	cmp    ecx,0x2
c001b6c6:	75 45                	jne    c001b70d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b6c8:	83 ec 0c             	sub    esp,0xc
c001b6cb:	0f b6 d2             	movzx  edx,dl
c001b6ce:	89 f1                	mov    ecx,esi
c001b6d0:	0f b6 c0             	movzx  eax,al
c001b6d3:	0f b6 f1             	movzx  esi,cl
c001b6d6:	89 e9                	mov    ecx,ebp
c001b6d8:	56                   	push   esi
c001b6d9:	0f b6 c9             	movzx  ecx,cl
c001b6dc:	51                   	push   ecx
c001b6dd:	52                   	push   edx
c001b6de:	50                   	push   eax
c001b6df:	57                   	push   edi
c001b6e0:	e8 a3 fc ff ff       	call   c001b388 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6e5:	89 c2                	mov    edx,eax
c001b6e7:	ed                   	in     eax,dx
c001b6e8:	83 c4 20             	add    esp,0x20
c001b6eb:	0f b7 db             	movzx  ebx,bx
c001b6ee:	f6 c2 02             	test   dl,0x2
c001b6f1:	74 0c                	je     c001b6ff <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b6f3:	0f b7 c8             	movzx  ecx,ax
c001b6f6:	89 d8                	mov    eax,ebx
c001b6f8:	c1 e0 10             	shl    eax,0x10
c001b6fb:	09 c8                	or     eax,ecx
c001b6fd:	eb 05                	jmp    c001b704 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b6ff:	66 31 c0             	xor    ax,ax
c001b702:	09 d8                	or     eax,ebx
c001b704:	ef                   	out    dx,eax
c001b705:	83 c4 0c             	add    esp,0xc
c001b708:	5b                   	pop    ebx
c001b709:	5e                   	pop    esi
c001b70a:	5f                   	pop    edi
c001b70b:	5d                   	pop    ebp
c001b70c:	c3                   	ret    
c001b70d:	c7 44 24 20 0b 32 02 c0 	mov    DWORD PTR [esp+0x20],0xc002320b
c001b715:	83 c4 0c             	add    esp,0xc
c001b718:	5b                   	pop    ebx
c001b719:	5e                   	pop    esi
c001b71a:	5f                   	pop    edi
c001b71b:	5d                   	pop    ebp
c001b71c:	e9 9e 5f ff ff       	jmp    c00116bf <KePanic(char const*)>
c001b721:	90                   	nop

c001b722 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b722:	55                   	push   ebp
c001b723:	57                   	push   edi
c001b724:	56                   	push   esi
c001b725:	53                   	push   ebx
c001b726:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b72c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b733:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b73a:	0f 85 bd 00 00 00    	jne    c001b7fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	68 14 01 00 00       	push   0x114
c001b748:	e8 69 c3 fe ff       	call   c0007ab6 <malloc>
c001b74d:	83 c4 0c             	add    esp,0xc
c001b750:	89 c3                	mov    ebx,eax
c001b752:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b758:	68 11 32 02 c0       	push   0xc0023211
c001b75d:	50                   	push   eax
c001b75e:	e8 8b 04 ff ff       	call   c000bbee <File::File(char const*, Process*)>
c001b763:	83 c4 10             	add    esp,0x10
c001b766:	85 db                	test   ebx,ebx
c001b768:	0f 84 67 02 00 00    	je     c001b9d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b76e:	56                   	push   esi
c001b76f:	56                   	push   esi
c001b770:	6a 01                	push   0x1
c001b772:	53                   	push   ebx
c001b773:	e8 94 04 ff ff       	call   c000bc0c <File::open(FileOpenMode)>
c001b778:	83 c4 10             	add    esp,0x10
c001b77b:	85 c0                	test   eax,eax
c001b77d:	0f 85 52 02 00 00    	jne    c001b9d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b783:	52                   	push   edx
c001b784:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b788:	50                   	push   eax
c001b789:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b78d:	50                   	push   eax
c001b78e:	53                   	push   ebx
c001b78f:	e8 7a 07 ff ff       	call   c000bf0e <File::stat(unsigned long long*, bool*)>
c001b794:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b798:	40                   	inc    eax
c001b799:	89 04 24             	mov    DWORD PTR [esp],eax
c001b79c:	e8 15 c3 fe ff       	call   c0007ab6 <malloc>
c001b7a1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7a5:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7aa:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7ae:	59                   	pop    ecx
c001b7af:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7b1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7b5:	51                   	push   ecx
c001b7b6:	50                   	push   eax
c001b7b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7bf:	53                   	push   ebx
c001b7c0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7c3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7c7:	83 c4 20             	add    esp,0x20
c001b7ca:	89 c8                	mov    eax,ecx
c001b7cc:	99                   	cdq    
c001b7cd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b7d1:	0f 85 fe 01 00 00    	jne    c001b9d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7d7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b7db:	0f 85 f4 01 00 00    	jne    c001b9d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b7e1:	83 ec 0c             	sub    esp,0xc
c001b7e4:	53                   	push   ebx
c001b7e5:	e8 80 04 ff ff       	call   c000bc6a <File::close()>
c001b7ea:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7ee:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b7f5:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b7fa:	83 c4 10             	add    esp,0x10
c001b7fd:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b802:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b808:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b80c:	31 f6                	xor    esi,esi
c001b80e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b816:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b81d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b822:	31 c9                	xor    ecx,ecx
c001b824:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b82c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b831:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b839:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b83d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b845:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b849:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b84d:	0f 8e 82 01 00 00    	jle    c001b9d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b853:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b856:	d4 40                	aam    0x40
c001b858:	d5 39                	aad    0x39
c001b85a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b85e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b862:	d4 40                	aam    0x40
c001b864:	d5 39                	aad    0x39
c001b866:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b86a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b86e:	d4 40                	aam    0x40
c001b870:	d5 39                	aad    0x39
c001b872:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b876:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b87a:	d4 40                	aam    0x40
c001b87c:	d5 39                	aad    0x39
c001b87e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b882:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b886:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b88a:	3c 56                	cmp    al,0x56
c001b88c:	74 43                	je     c001b8d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b88e:	d4 40                	aam    0x40
c001b890:	d5 39                	aad    0x39
c001b892:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b895:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b899:	0f b6 c9             	movzx  ecx,cl
c001b89c:	c1 e1 04             	shl    ecx,0x4
c001b89f:	d4 40                	aam    0x40
c001b8a1:	d5 39                	aad    0x39
c001b8a3:	83 e8 30             	sub    eax,0x30
c001b8a6:	0f b6 c0             	movzx  eax,al
c001b8a9:	09 c1                	or     ecx,eax
c001b8ab:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b8af:	c1 e1 04             	shl    ecx,0x4
c001b8b2:	d4 40                	aam    0x40
c001b8b4:	d5 39                	aad    0x39
c001b8b6:	83 e8 30             	sub    eax,0x30
c001b8b9:	0f b6 c0             	movzx  eax,al
c001b8bc:	09 c1                	or     ecx,eax
c001b8be:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b8c2:	c1 e1 04             	shl    ecx,0x4
c001b8c5:	d4 40                	aam    0x40
c001b8c7:	d5 39                	aad    0x39
c001b8c9:	83 e8 30             	sub    eax,0x30
c001b8cc:	0f b6 c0             	movzx  eax,al
c001b8cf:	09 c1                	or     ecx,eax
c001b8d1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b8d5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b8d9:	3c 58                	cmp    al,0x58
c001b8db:	74 47                	je     c001b924 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b8dd:	d4 40                	aam    0x40
c001b8df:	d5 39                	aad    0x39
c001b8e1:	8d 50 d0             	lea    edx,[eax-0x30]
c001b8e4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b8e8:	0f b6 d2             	movzx  edx,dl
c001b8eb:	c1 e2 04             	shl    edx,0x4
c001b8ee:	d4 40                	aam    0x40
c001b8f0:	d5 39                	aad    0x39
c001b8f2:	83 e8 30             	sub    eax,0x30
c001b8f5:	0f b6 c0             	movzx  eax,al
c001b8f8:	09 c2                	or     edx,eax
c001b8fa:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b8fe:	c1 e2 04             	shl    edx,0x4
c001b901:	d4 40                	aam    0x40
c001b903:	d5 39                	aad    0x39
c001b905:	83 e8 30             	sub    eax,0x30
c001b908:	0f b6 c0             	movzx  eax,al
c001b90b:	09 c2                	or     edx,eax
c001b90d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b911:	c1 e2 04             	shl    edx,0x4
c001b914:	d4 40                	aam    0x40
c001b916:	d5 39                	aad    0x39
c001b918:	83 e8 30             	sub    eax,0x30
c001b91b:	0f b6 c0             	movzx  eax,al
c001b91e:	09 c2                	or     edx,eax
c001b920:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b924:	83 c6 10             	add    esi,0x10
c001b927:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b92b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b92f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b933:	83 fa 0a             	cmp    edx,0xa
c001b936:	74 0b                	je     c001b943 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b938:	47                   	inc    edi
c001b939:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b93d:	75 19                	jne    c001b958 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b93f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b943:	31 c0                	xor    eax,eax
c001b945:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b94a:	0f 94 c0             	sete   al
c001b94d:	01 c6                	add    esi,eax
c001b94f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b954:	75 0b                	jne    c001b961 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b956:	eb 14                	jmp    c001b96c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b958:	46                   	inc    esi
c001b959:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b95c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b95f:	eb ca                	jmp    c001b92b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b961:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b966:	0f 85 dd fe ff ff    	jne    c001b849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b96c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b971:	74 10                	je     c001b983 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b973:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b978:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b97d:	0f 85 c6 fe ff ff    	jne    c001b849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b983:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b987:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b98b:	83 e8 30             	sub    eax,0x30
c001b98e:	83 ef 30             	sub    edi,0x30
c001b991:	c1 e0 04             	shl    eax,0x4
c001b994:	09 f8                	or     eax,edi
c001b996:	0f b6 c0             	movzx  eax,al
c001b999:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b99d:	0f 85 a6 fe ff ff    	jne    c001b849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b9ab:	83 e8 30             	sub    eax,0x30
c001b9ae:	83 ef 30             	sub    edi,0x30
c001b9b1:	c1 e0 04             	shl    eax,0x4
c001b9b4:	09 f8                	or     eax,edi
c001b9b6:	0f b6 c0             	movzx  eax,al
c001b9b9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9bd:	0f 85 86 fe ff ff    	jne    c001b849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b9c3:	50                   	push   eax
c001b9c4:	50                   	push   eax
c001b9c5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b9c9:	50                   	push   eax
c001b9ca:	55                   	push   ebp
c001b9cb:	e8 70 4c fe ff       	call   c0000640 <strcpy>
c001b9d0:	83 c4 10             	add    esp,0x10
c001b9d3:	eb 06                	jmp    c001b9db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b9d5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b9d9:	31 ed                	xor    ebp,ebp
c001b9db:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b9e1:	89 e8                	mov    eax,ebp
c001b9e3:	5b                   	pop    ebx
c001b9e4:	5e                   	pop    esi
c001b9e5:	5f                   	pop    edi
c001b9e6:	5d                   	pop    ebp
c001b9e7:	c3                   	ret    

c001b9e8 <PCI::checkBus(unsigned char)>:
c001b9e8:	56                   	push   esi
c001b9e9:	53                   	push   ebx
c001b9ea:	31 db                	xor    ebx,ebx
c001b9ec:	51                   	push   ecx
c001b9ed:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b9f2:	52                   	push   edx
c001b9f3:	53                   	push   ebx
c001b9f4:	43                   	inc    ebx
c001b9f5:	56                   	push   esi
c001b9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9fa:	e8 03 03 00 00       	call   c001bd02 <PCI::checkDevice(unsigned char, unsigned char)>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	83 fb 20             	cmp    ebx,0x20
c001ba05:	75 eb                	jne    c001b9f2 <PCI::checkBus(unsigned char)+0xa>
c001ba07:	58                   	pop    eax
c001ba08:	5b                   	pop    ebx
c001ba09:	5e                   	pop    esi
c001ba0a:	c3                   	ret    
c001ba0b:	90                   	nop

c001ba0c <PCI::foundDevice(PCIDeviceInfo)>:
c001ba0c:	55                   	push   ebp
c001ba0d:	57                   	push   edi
c001ba0e:	56                   	push   esi
c001ba0f:	53                   	push   ebx
c001ba10:	83 ec 1c             	sub    esp,0x1c
c001ba13:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba1c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba21:	0f 84 57 01 00 00    	je     c001bb7e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ba27:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba2c:	66 3d 06 04          	cmp    ax,0x406
c001ba30:	75 2c                	jne    c001ba5e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba32:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba37:	50                   	push   eax
c001ba38:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba3d:	50                   	push   eax
c001ba3e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba43:	50                   	push   eax
c001ba44:	53                   	push   ebx
c001ba45:	e8 64 fb ff ff       	call   c001b5ae <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba4a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba4e:	0f b6 c0             	movzx  eax,al
c001ba51:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba55:	83 c4 2c             	add    esp,0x2c
c001ba58:	5b                   	pop    ebx
c001ba59:	5e                   	pop    esi
c001ba5a:	5f                   	pop    edi
c001ba5b:	5d                   	pop    ebp
c001ba5c:	eb 8a                	jmp    c001b9e8 <PCI::checkBus(unsigned char)>
c001ba5e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ba62:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ba68:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ba6c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ba70:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ba75:	85 d2                	test   edx,edx
c001ba77:	74 36                	je     c001baaf <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ba79:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ba7c:	85 c9                	test   ecx,ecx
c001ba7e:	74 2b                	je     c001baab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba80:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ba86:	31 ee                	xor    esi,ebp
c001ba88:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ba8e:	75 1b                	jne    c001baab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba90:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ba94:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ba9a:	75 0f                	jne    c001baab <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ba9c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001baa3:	39 f9                	cmp    ecx,edi
c001baa5:	0f 84 d3 00 00 00    	je     c001bb7e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001baab:	8b 12                	mov    edx,DWORD PTR [edx]
c001baad:	eb c6                	jmp    c001ba75 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001baaf:	3d 01 06 00 00       	cmp    eax,0x601
c001bab4:	75 19                	jne    c001bacf <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001bab6:	83 ec 0c             	sub    esp,0xc
c001bab9:	68 64 01 00 00       	push   0x164
c001babe:	e8 f3 bf fe ff       	call   c0007ab6 <malloc>
c001bac3:	89 c5                	mov    ebp,eax
c001bac5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bac8:	e8 a1 0e 00 00       	call   c001c96e <SATABus::SATABus()>
c001bacd:	eb 1e                	jmp    c001baed <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001bacf:	3d 01 01 00 00       	cmp    eax,0x101
c001bad4:	75 62                	jne    c001bb38 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001bad6:	83 ec 0c             	sub    esp,0xc
c001bad9:	68 70 02 00 00       	push   0x270
c001bade:	e8 d3 bf fe ff       	call   c0007ab6 <malloc>
c001bae3:	89 c5                	mov    ebp,eax
c001bae5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bae8:	e8 e5 02 00 00       	call   c001bdd2 <IDE::IDE()>
c001baed:	5f                   	pop    edi
c001baee:	58                   	pop    eax
c001baef:	55                   	push   ebp
c001baf0:	53                   	push   ebx
c001baf1:	e8 70 0f ff ff       	call   c000ca66 <Device::addChild(Device*)>
c001baf6:	83 ec 1c             	sub    esp,0x1c
c001baf9:	b9 09 00 00 00       	mov    ecx,0x9
c001bafe:	fc                   	cld    
c001baff:	89 e7                	mov    edi,esp
c001bb01:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb05:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb07:	55                   	push   ebp
c001bb08:	e8 9f 0e ff ff       	call   c000c9ac <Device::preOpenPCI(PCIDeviceInfo)>
c001bb0d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb10:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb14:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb1c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb24:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb2c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb2f:	83 c4 4c             	add    esp,0x4c
c001bb32:	5b                   	pop    ebx
c001bb33:	5e                   	pop    esi
c001bb34:	5f                   	pop    edi
c001bb35:	5d                   	pop    ebp
c001bb36:	ff e0                	jmp    eax
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	68 58 01 00 00       	push   0x158
c001bb40:	e8 71 bf fe ff       	call   c0007ab6 <malloc>
c001bb45:	89 c5                	mov    ebp,eax
c001bb47:	58                   	pop    eax
c001bb48:	5a                   	pop    edx
c001bb49:	68 2a 32 02 c0       	push   0xc002322a
c001bb4e:	55                   	push   ebp
c001bb4f:	e8 b0 11 ff ff       	call   c000cd04 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb54:	59                   	pop    ecx
c001bb55:	5e                   	pop    esi
c001bb56:	55                   	push   ebp
c001bb57:	53                   	push   ebx
c001bb58:	e8 09 0f ff ff       	call   c000ca66 <Device::addChild(Device*)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	b9 09 00 00 00       	mov    ecx,0x9
c001bb65:	fc                   	cld    
c001bb66:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bb6a:	89 fe                	mov    esi,edi
c001bb6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb6e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001bb72:	83 c4 1c             	add    esp,0x1c
c001bb75:	5b                   	pop    ebx
c001bb76:	5e                   	pop    esi
c001bb77:	5f                   	pop    edi
c001bb78:	5d                   	pop    ebp
c001bb79:	e9 2e 0e ff ff       	jmp    c000c9ac <Device::preOpenPCI(PCIDeviceInfo)>
c001bb7e:	83 c4 1c             	add    esp,0x1c
c001bb81:	5b                   	pop    ebx
c001bb82:	5e                   	pop    esi
c001bb83:	5f                   	pop    edi
c001bb84:	5d                   	pop    ebp
c001bb85:	c3                   	ret    

c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bb86:	55                   	push   ebp
c001bb87:	57                   	push   edi
c001bb88:	56                   	push   esi
c001bb89:	53                   	push   ebx
c001bb8a:	83 ec 68             	sub    esp,0x68
c001bb8d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bb91:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bb98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bb9c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bba3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bba8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbb3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bbb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bbbc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bbc1:	6a 0c                	push   0xc
c001bbc3:	57                   	push   edi
c001bbc4:	53                   	push   ebx
c001bbc5:	56                   	push   esi
c001bbc6:	55                   	push   ebp
c001bbc7:	e8 32 f8 ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbcc:	83 c4 20             	add    esp,0x20
c001bbcf:	57                   	push   edi
c001bbd0:	53                   	push   ebx
c001bbd1:	56                   	push   esi
c001bbd2:	55                   	push   ebp
c001bbd3:	e8 1c f9 ff ff       	call   c001b4f4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bbd8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bbdd:	57                   	push   edi
c001bbde:	53                   	push   ebx
c001bbdf:	56                   	push   esi
c001bbe0:	55                   	push   ebp
c001bbe1:	e8 a4 f9 ff ff       	call   c001b58a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bbe6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bbea:	83 c4 14             	add    esp,0x14
c001bbed:	6a 3c                	push   0x3c
c001bbef:	57                   	push   edi
c001bbf0:	53                   	push   ebx
c001bbf1:	56                   	push   esi
c001bbf2:	55                   	push   ebp
c001bbf3:	e8 06 f8 ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbf8:	0f b6 c4             	movzx  eax,ah
c001bbfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbff:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc03:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc07:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc0c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc12:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc18:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc1c:	83 c4 20             	add    esp,0x20
c001bc1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc24:	74 30                	je     c001bc56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc26:	31 c0                	xor    eax,eax
c001bc28:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc2c:	7e 28                	jle    c001bc56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc2e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc36:	39 cb                	cmp    ebx,ecx
c001bc38:	75 19                	jne    c001bc53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc3a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc42:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc46:	75 0b                	jne    c001bc53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc48:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc4f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc53:	40                   	inc    eax
c001bc54:	eb d2                	jmp    c001bc28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc56:	31 d2                	xor    edx,edx
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	57                   	push   edi
c001bc5c:	53                   	push   ebx
c001bc5d:	56                   	push   esi
c001bc5e:	52                   	push   edx
c001bc5f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bc63:	55                   	push   ebp
c001bc64:	e8 6d f9 ff ff       	call   c001b5d6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bc6d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bc71:	42                   	inc    edx
c001bc72:	83 c4 20             	add    esp,0x20
c001bc75:	83 fa 06             	cmp    edx,0x6
c001bc78:	75 de                	jne    c001bc58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bc7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc82:	c1 e2 08             	shl    edx,0x8
c001bc85:	83 ec 0c             	sub    esp,0xc
c001bc88:	0f b6 c4             	movzx  eax,ah
c001bc8b:	09 d0                	or     eax,edx
c001bc8d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bc92:	6a 02                	push   0x2
c001bc94:	57                   	push   edi
c001bc95:	53                   	push   ebx
c001bc96:	56                   	push   esi
c001bc97:	55                   	push   ebp
c001bc98:	e8 61 f7 ff ff       	call   c001b3fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc9d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bca2:	83 c4 20             	add    esp,0x20
c001bca5:	57                   	push   edi
c001bca6:	53                   	push   ebx
c001bca7:	56                   	push   esi
c001bca8:	55                   	push   ebp
c001bca9:	e8 90 f8 ff ff       	call   c001b53e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcb2:	57                   	push   edi
c001bcb3:	53                   	push   ebx
c001bcb4:	56                   	push   esi
c001bcb5:	55                   	push   ebp
c001bcb6:	e8 ed f7 ff ff       	call   c001b4a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcbb:	b9 09 00 00 00       	mov    ecx,0x9
c001bcc0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bcc5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bcc9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bccd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bcd1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bcd5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bcd9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bcdd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bce1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bce5:	83 ec 0c             	sub    esp,0xc
c001bce8:	fc                   	cld    
c001bce9:	89 e7                	mov    edi,esp
c001bceb:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bcef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bcf1:	55                   	push   ebp
c001bcf2:	e8 15 fd ff ff       	call   c001ba0c <PCI::foundDevice(PCIDeviceInfo)>
c001bcf7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bcfd:	5b                   	pop    ebx
c001bcfe:	5e                   	pop    esi
c001bcff:	5f                   	pop    edi
c001bd00:	5d                   	pop    ebp
c001bd01:	c3                   	ret    

c001bd02 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd02:	55                   	push   ebp
c001bd03:	57                   	push   edi
c001bd04:	56                   	push   esi
c001bd05:	53                   	push   ebx
c001bd06:	83 ec 0c             	sub    esp,0xc
c001bd09:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd0d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd12:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd17:	6a 00                	push   0x0
c001bd19:	56                   	push   esi
c001bd1a:	57                   	push   edi
c001bd1b:	55                   	push   ebp
c001bd1c:	e8 87 f7 ff ff       	call   c001b4a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd21:	6a 00                	push   0x0
c001bd23:	56                   	push   esi
c001bd24:	57                   	push   edi
c001bd25:	55                   	push   ebp
c001bd26:	e8 5b fe ff ff       	call   c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd2b:	83 c4 20             	add    esp,0x20
c001bd2e:	6a 00                	push   0x0
c001bd30:	56                   	push   esi
c001bd31:	57                   	push   edi
c001bd32:	55                   	push   ebp
c001bd33:	e8 94 f7 ff ff       	call   c001b4cc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd38:	83 c4 10             	add    esp,0x10
c001bd3b:	a8 80                	test   al,0x80
c001bd3d:	74 2d                	je     c001bd6c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd3f:	bb 01 00 00 00       	mov    ebx,0x1
c001bd44:	53                   	push   ebx
c001bd45:	56                   	push   esi
c001bd46:	57                   	push   edi
c001bd47:	55                   	push   ebp
c001bd48:	e8 5b f7 ff ff       	call   c001b4a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd4d:	83 c4 10             	add    esp,0x10
c001bd50:	0f b7 c0             	movzx  eax,ax
c001bd53:	3d ff ff 00 00       	cmp    eax,0xffff
c001bd58:	74 0c                	je     c001bd66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bd5a:	53                   	push   ebx
c001bd5b:	56                   	push   esi
c001bd5c:	57                   	push   edi
c001bd5d:	55                   	push   ebp
c001bd5e:	e8 23 fe ff ff       	call   c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd63:	83 c4 10             	add    esp,0x10
c001bd66:	43                   	inc    ebx
c001bd67:	83 fb 08             	cmp    ebx,0x8
c001bd6a:	75 d8                	jne    c001bd44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bd6c:	83 c4 0c             	add    esp,0xc
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	5f                   	pop    edi
c001bd72:	5d                   	pop    ebp
c001bd73:	c3                   	ret    

c001bd74 <PCI::detect()>:
c001bd74:	56                   	push   esi
c001bd75:	53                   	push   ebx
c001bd76:	53                   	push   ebx
c001bd77:	31 db                	xor    ebx,ebx
c001bd79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd7d:	6a 00                	push   0x0
c001bd7f:	6a 00                	push   0x0
c001bd81:	6a 00                	push   0x0
c001bd83:	56                   	push   esi
c001bd84:	e8 43 f7 ff ff       	call   c001b4cc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	a8 80                	test   al,0x80
c001bd8e:	75 21                	jne    c001bdb1 <PCI::detect()+0x3d>
c001bd90:	51                   	push   ecx
c001bd91:	51                   	push   ecx
c001bd92:	6a 00                	push   0x0
c001bd94:	56                   	push   esi
c001bd95:	e8 4e fc ff ff       	call   c001b9e8 <PCI::checkBus(unsigned char)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	eb 2a                	jmp    c001bdc9 <PCI::detect()+0x55>
c001bd9f:	52                   	push   edx
c001bda0:	52                   	push   edx
c001bda1:	53                   	push   ebx
c001bda2:	43                   	inc    ebx
c001bda3:	56                   	push   esi
c001bda4:	e8 3f fc ff ff       	call   c001b9e8 <PCI::checkBus(unsigned char)>
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	83 fb 08             	cmp    ebx,0x8
c001bdaf:	74 18                	je     c001bdc9 <PCI::detect()+0x55>
c001bdb1:	53                   	push   ebx
c001bdb2:	6a 00                	push   0x0
c001bdb4:	6a 00                	push   0x0
c001bdb6:	56                   	push   esi
c001bdb7:	e8 ec f6 ff ff       	call   c001b4a8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	0f b7 c0             	movzx  eax,ax
c001bdc2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdc7:	74 d6                	je     c001bd9f <PCI::detect()+0x2b>
c001bdc9:	58                   	pop    eax
c001bdca:	5b                   	pop    ebx
c001bdcb:	5e                   	pop    esi
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <IDE::close(int, int, void*)>:
c001bdce:	83 c8 ff             	or     eax,0xffffffff
c001bdd1:	c3                   	ret    

c001bdd2 <IDE::IDE()>:
c001bdd2:	83 ec 0c             	sub    esp,0xc
c001bdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdd9:	83 ec 08             	sub    esp,0x8
c001bddc:	68 70 32 02 c0       	push   0xc0023270
c001bde1:	50                   	push   eax
c001bde2:	e8 c1 0f ff ff       	call   c000cda8 <HardDiskController::HardDiskController(char const*)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	ba 00 33 02 c0       	mov    edx,0xc0023300
c001bdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf3:	89 10                	mov    DWORD PTR [eax],edx
c001bdf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be00:	90                   	nop
c001be01:	83 c4 0c             	add    esp,0xc
c001be04:	c3                   	ret    
c001be05:	90                   	nop

c001be06 <IDE::prepareInterrupt(unsigned char)>:
c001be06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be0f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be17:	c3                   	ret    

c001be18 <selectDrive(unsigned char, unsigned char)>:
c001be18:	c3                   	ret    
c001be19:	90                   	nop

c001be1a <IDE::getBase(unsigned char)>:
c001be1a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be23:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be2b:	c3                   	ret    

c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be2c:	55                   	push   ebp
c001be2d:	57                   	push   edi
c001be2e:	56                   	push   esi
c001be2f:	53                   	push   ebx
c001be30:	83 ec 1c             	sub    esp,0x1c
c001be33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be42:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be46:	80 f9 03             	cmp    cl,0x3
c001be49:	77 4f                	ja     c001be9a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be4f:	0f b6 fa             	movzx  edi,dl
c001be52:	0f b6 db             	movzx  ebx,bl
c001be55:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be58:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be5d:	80 ca 80             	or     dl,0x80
c001be60:	52                   	push   edx
c001be61:	6a 0c                	push   0xc
c001be63:	57                   	push   edi
c001be64:	56                   	push   esi
c001be65:	e8 c2 ff ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be6a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001be6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be73:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001be77:	ee                   	out    dx,al
c001be78:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be7d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001be81:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be89:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be91:	83 c4 2c             	add    esp,0x2c
c001be94:	5b                   	pop    ebx
c001be95:	5e                   	pop    esi
c001be96:	5f                   	pop    edi
c001be97:	5d                   	pop    ebp
c001be98:	eb 92                	jmp    c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be9a:	0f b6 cb             	movzx  ecx,bl
c001be9d:	83 f9 07             	cmp    ecx,0x7
c001bea0:	77 12                	ja     c001beb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bea2:	0f b6 d2             	movzx  edx,dl
c001bea5:	0f b6 db             	movzx  ebx,bl
c001bea8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001beb0:	01 da                	add    edx,ebx
c001beb2:	eb 2f                	jmp    c001bee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001beb4:	83 f9 0d             	cmp    ecx,0xd
c001beb7:	77 13                	ja     c001becc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001beb9:	0f b6 d2             	movzx  edx,dl
c001bebc:	0f b6 db             	movzx  ebx,bl
c001bebf:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bec6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001beca:	eb 17                	jmp    c001bee3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001becc:	83 f9 15             	cmp    ecx,0x15
c001becf:	77 13                	ja     c001bee4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bed1:	0f b6 d2             	movzx  edx,dl
c001bed4:	0f b6 db             	movzx  ebx,bl
c001bed7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bedf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bee3:	ee                   	out    dx,al
c001bee4:	83 c4 1c             	add    esp,0x1c
c001bee7:	5b                   	pop    ebx
c001bee8:	5e                   	pop    esi
c001bee9:	5f                   	pop    edi
c001beea:	5d                   	pop    ebp
c001beeb:	c3                   	ret    

c001beec <IDE::read(unsigned char, unsigned char)>:
c001beec:	55                   	push   ebp
c001beed:	57                   	push   edi
c001beee:	56                   	push   esi
c001beef:	53                   	push   ebx
c001bef0:	83 ec 1c             	sub    esp,0x1c
c001bef3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bef7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001befb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001befe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bf02:	3c 03                	cmp    al,0x3
c001bf04:	77 40                	ja     c001bf46 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bf06:	0f b6 f9             	movzx  edi,cl
c001bf09:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bf0c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf11:	0c 80                	or     al,0x80
c001bf13:	50                   	push   eax
c001bf14:	6a 0c                	push   0xc
c001bf16:	57                   	push   edi
c001bf17:	56                   	push   esi
c001bf18:	e8 0f ff ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf1d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf22:	0f b6 d3             	movzx  edx,bl
c001bf25:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf29:	ec                   	in     al,dx
c001bf2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf2e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bf33:	52                   	push   edx
c001bf34:	6a 0c                	push   0xc
c001bf36:	57                   	push   edi
c001bf37:	56                   	push   esi
c001bf38:	e8 ef fe ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf3d:	83 c4 20             	add    esp,0x20
c001bf40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bf44:	eb 4c                	jmp    c001bf92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf46:	0f b6 d3             	movzx  edx,bl
c001bf49:	83 fa 07             	cmp    edx,0x7
c001bf4c:	77 12                	ja     c001bf60 <IDE::read(unsigned char, unsigned char)+0x74>
c001bf4e:	0f b6 c9             	movzx  ecx,cl
c001bf51:	0f b6 d3             	movzx  edx,bl
c001bf54:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bf5c:	01 c2                	add    edx,eax
c001bf5e:	eb 31                	jmp    c001bf91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf60:	83 fa 0d             	cmp    edx,0xd
c001bf63:	77 13                	ja     c001bf78 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bf65:	0f b6 c9             	movzx  ecx,cl
c001bf68:	0f b6 d3             	movzx  edx,bl
c001bf6b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bf72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf76:	eb 19                	jmp    c001bf91 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bf78:	31 c0                	xor    eax,eax
c001bf7a:	83 fa 15             	cmp    edx,0x15
c001bf7d:	77 13                	ja     c001bf92 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bf7f:	0f b6 c9             	movzx  ecx,cl
c001bf82:	0f b6 d3             	movzx  edx,bl
c001bf85:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bf8d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf91:	ec                   	in     al,dx
c001bf92:	83 c4 1c             	add    esp,0x1c
c001bf95:	5b                   	pop    ebx
c001bf96:	5e                   	pop    esi
c001bf97:	5f                   	pop    edi
c001bf98:	5d                   	pop    ebp
c001bf99:	c3                   	ret    

c001bf9a <IDE::waitInterrupt(unsigned char)>:
c001bf9a:	55                   	push   ebp
c001bf9b:	57                   	push   edi
c001bf9c:	56                   	push   esi
c001bf9d:	53                   	push   ebx
c001bf9e:	31 db                	xor    ebx,ebx
c001bfa0:	83 ec 0c             	sub    esp,0xc
c001bfa3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bfa7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bfac:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bfb4:	89 e8                	mov    eax,ebp
c001bfb6:	84 c0                	test   al,al
c001bfb8:	75 30                	jne    c001bfea <IDE::waitInterrupt(unsigned char)+0x50>
c001bfba:	50                   	push   eax
c001bfbb:	6a 0c                	push   0xc
c001bfbd:	56                   	push   esi
c001bfbe:	57                   	push   edi
c001bfbf:	e8 28 ff ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001bfc4:	83 c4 10             	add    esp,0x10
c001bfc7:	a8 01                	test   al,0x1
c001bfc9:	75 27                	jne    c001bff2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfcb:	f6 c3 04             	test   bl,0x4
c001bfce:	75 12                	jne    c001bfe2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfd0:	83 fb 32             	cmp    ebx,0x32
c001bfd3:	7e 0d                	jle    c001bfe2 <IDE::waitInterrupt(unsigned char)+0x48>
c001bfd5:	83 ec 0c             	sub    esp,0xc
c001bfd8:	6a 64                	push   0x64
c001bfda:	e8 b1 a4 ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001bfdf:	83 c4 10             	add    esp,0x10
c001bfe2:	83 fb 3c             	cmp    ebx,0x3c
c001bfe5:	74 0b                	je     c001bff2 <IDE::waitInterrupt(unsigned char)+0x58>
c001bfe7:	43                   	inc    ebx
c001bfe8:	eb c2                	jmp    c001bfac <IDE::waitInterrupt(unsigned char)+0x12>
c001bfea:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bff2:	83 c4 0c             	add    esp,0xc
c001bff5:	89 e8                	mov    eax,ebp
c001bff7:	5b                   	pop    ebx
c001bff8:	5e                   	pop    esi
c001bff9:	5f                   	pop    edi
c001bffa:	5d                   	pop    ebp
c001bffb:	c3                   	ret    

c001bffc <ideChannel0IRQHandler(regs*, void*)>:
c001bffc:	83 ec 10             	sub    esp,0x10
c001bfff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c003:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c00a:	6a 07                	push   0x7
c001c00c:	6a 00                	push   0x0
c001c00e:	50                   	push   eax
c001c00f:	e8 d8 fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c014:	83 c4 1c             	add    esp,0x1c
c001c017:	c3                   	ret    

c001c018 <ideChannel1IRQHandler(regs*, void*)>:
c001c018:	83 ec 10             	sub    esp,0x10
c001c01b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c01f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c026:	6a 07                	push   0x7
c001c028:	6a 01                	push   0x1
c001c02a:	50                   	push   eax
c001c02b:	e8 bc fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c030:	83 c4 1c             	add    esp,0x1c
c001c033:	c3                   	ret    

c001c034 <IDE::enableIRQs(unsigned char, bool)>:
c001c034:	57                   	push   edi
c001c035:	b8 02 00 00 00       	mov    eax,0x2
c001c03a:	56                   	push   esi
c001c03b:	53                   	push   ebx
c001c03c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c040:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c044:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c049:	74 02                	je     c001c04d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c04b:	31 c0                	xor    eax,eax
c001c04d:	0f b6 db             	movzx  ebx,bl
c001c050:	bf 04 00 00 00       	mov    edi,0x4
c001c055:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c05c:	50                   	push   eax
c001c05d:	6a 0c                	push   0xc
c001c05f:	53                   	push   ebx
c001c060:	56                   	push   esi
c001c061:	e8 c6 fd ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c066:	83 c4 10             	add    esp,0x10
c001c069:	50                   	push   eax
c001c06a:	6a 0c                	push   0xc
c001c06c:	53                   	push   ebx
c001c06d:	56                   	push   esi
c001c06e:	e8 79 fe ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	4f                   	dec    edi
c001c077:	75 f0                	jne    c001c069 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c079:	5b                   	pop    ebx
c001c07a:	5e                   	pop    esi
c001c07b:	5f                   	pop    edi
c001c07c:	c3                   	ret    
c001c07d:	90                   	nop

c001c07e <IDE::open(int, int, void*)>:
c001c07e:	55                   	push   ebp
c001c07f:	57                   	push   edi
c001c080:	56                   	push   esi
c001c081:	53                   	push   ebx
c001c082:	83 ec 1c             	sub    esp,0x1c
c001c085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c089:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c092:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c09b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0a2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0a9:	0f 85 de 02 00 00    	jne    c001c38d <IDE::open(int, int, void*)+0x30f>
c001c0af:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c0b5:	88 04 24             	mov    BYTE PTR [esp],al
c001c0b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c0bb:	83 e0 7f             	and    eax,0x7f
c001c0be:	83 f8 05             	cmp    eax,0x5
c001c0c1:	74 05                	je     c001c0c8 <IDE::open(int, int, void*)+0x4a>
c001c0c3:	83 f8 0f             	cmp    eax,0xf
c001c0c6:	75 32                	jne    c001c0fa <IDE::open(int, int, void*)+0x7c>
c001c0c8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c0ce:	83 e0 fc             	and    eax,0xfffffffc
c001c0d1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c0d8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c0de:	83 e0 fc             	and    eax,0xfffffffc
c001c0e1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c0e8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c0ee:	83 e0 fc             	and    eax,0xfffffffc
c001c0f1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c0f8:	eb 14                	jmp    c001c10e <IDE::open(int, int, void*)+0x90>
c001c0fa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c104:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c10e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c115:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c11c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c120:	89 c6                	mov    esi,eax
c001c122:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c127:	c1 e6 10             	shl    esi,0x10
c001c12a:	89 e8                	mov    eax,ebp
c001c12c:	89 fa                	mov    edx,edi
c001c12e:	c1 e0 0b             	shl    eax,0xb
c001c131:	09 f0                	or     eax,esi
c001c133:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c13a:	c1 e6 08             	shl    esi,0x8
c001c13d:	09 c6                	or     esi,eax
c001c13f:	89 f0                	mov    eax,esi
c001c141:	0d 08 00 00 80       	or     eax,0x80000008
c001c146:	ef                   	out    dx,eax
c001c147:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c14c:	89 ca                	mov    edx,ecx
c001c14e:	ed                   	in     eax,dx
c001c14f:	c1 e8 10             	shr    eax,0x10
c001c152:	3d ff ff 00 00       	cmp    eax,0xffff
c001c157:	0f 84 f9 00 00 00    	je     c001c256 <IDE::open(int, int, void*)+0x1d8>
c001c15d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c163:	89 fa                	mov    edx,edi
c001c165:	89 f0                	mov    eax,esi
c001c167:	ef                   	out    dx,eax
c001c168:	b0 fe                	mov    al,0xfe
c001c16a:	89 ca                	mov    edx,ecx
c001c16c:	ee                   	out    dx,al
c001c16d:	89 f0                	mov    eax,esi
c001c16f:	89 fa                	mov    edx,edi
c001c171:	ef                   	out    dx,eax
c001c172:	89 ca                	mov    edx,ecx
c001c174:	ed                   	in     eax,dx
c001c175:	3c fe                	cmp    al,0xfe
c001c177:	0f 85 a9 00 00 00    	jne    c001c226 <IDE::open(int, int, void*)+0x1a8>
c001c17d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c183:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c18a:	74 33                	je     c001c1bf <IDE::open(int, int, void*)+0x141>
c001c18c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c192:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c196:	40                   	inc    eax
c001c197:	83 ec 0c             	sub    esp,0xc
c001c19a:	0f b6 c0             	movzx  eax,al
c001c19d:	50                   	push   eax
c001c19e:	55                   	push   ebp
c001c19f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1a3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1a9:	51                   	push   ecx
c001c1aa:	e8 29 38 ff ff       	call   c000f9d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1af:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c1b4:	83 c4 1c             	add    esp,0x1c
c001c1b7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c1bd:	eb 0a                	jmp    c001c1c9 <IDE::open(int, int, void*)+0x14b>
c001c1bf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c1c9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c1d0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c1d7:	c1 e1 10             	shl    ecx,0x10
c001c1da:	c1 e0 08             	shl    eax,0x8
c001c1dd:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c1e2:	09 c1                	or     ecx,eax
c001c1e4:	89 fa                	mov    edx,edi
c001c1e6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c1ed:	c1 e0 0b             	shl    eax,0xb
c001c1f0:	09 c1                	or     ecx,eax
c001c1f2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1f8:	89 c8                	mov    eax,ecx
c001c1fa:	ef                   	out    dx,eax
c001c1fb:	be fc 0c 00 00       	mov    esi,0xcfc
c001c200:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c206:	89 f2                	mov    edx,esi
c001c208:	ee                   	out    dx,al
c001c209:	89 c8                	mov    eax,ecx
c001c20b:	89 fa                	mov    edx,edi
c001c20d:	ef                   	out    dx,eax
c001c20e:	89 f2                	mov    edx,esi
c001c210:	ed                   	in     eax,dx
c001c211:	0f b6 c0             	movzx  eax,al
c001c214:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c21a:	74 4a                	je     c001c266 <IDE::open(int, int, void*)+0x1e8>
c001c21c:	83 ec 0c             	sub    esp,0xc
c001c21f:	68 88 32 02 c0       	push   0xc0023288
c001c224:	eb 38                	jmp    c001c25e <IDE::open(int, int, void*)+0x1e0>
c001c226:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c22f:	75 1b                	jne    c001c24c <IDE::open(int, int, void*)+0x1ce>
c001c231:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c235:	3d 80 00 00 00       	cmp    eax,0x80
c001c23a:	74 07                	je     c001c243 <IDE::open(int, int, void*)+0x1c5>
c001c23c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c241:	75 09                	jne    c001c24c <IDE::open(int, int, void*)+0x1ce>
c001c243:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c24a:	eb 1a                	jmp    c001c266 <IDE::open(int, int, void*)+0x1e8>
c001c24c:	83 ec 0c             	sub    esp,0xc
c001c24f:	68 90 32 02 c0       	push   0xc0023290
c001c254:	eb 08                	jmp    c001c25e <IDE::open(int, int, void*)+0x1e0>
c001c256:	83 ec 0c             	sub    esp,0xc
c001c259:	68 c1 32 02 c0       	push   0xc00232c1
c001c25e:	e8 5c 54 ff ff       	call   c00116bf <KePanic(char const*)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c26d:	74 1a                	je     c001c289 <IDE::open(int, int, void*)+0x20b>
c001c26f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c275:	83 e0 fc             	and    eax,0xfffffffc
c001c278:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c27f:	83 c0 08             	add    eax,0x8
c001c282:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c289:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c28f:	89 c2                	mov    edx,eax
c001c291:	83 e2 0f             	and    edx,0xf
c001c294:	83 fa 08             	cmp    edx,0x8
c001c297:	75 0a                	jne    c001c2a3 <IDE::open(int, int, void*)+0x225>
c001c299:	83 e8 02             	sub    eax,0x2
c001c29c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2a3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2a9:	89 c2                	mov    edx,eax
c001c2ab:	83 e2 0f             	and    edx,0xf
c001c2ae:	83 fa 08             	cmp    edx,0x8
c001c2b1:	75 0a                	jne    c001c2bd <IDE::open(int, int, void*)+0x23f>
c001c2b3:	83 e8 02             	sub    eax,0x2
c001c2b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2bd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c2c4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c2cb:	89 d0                	mov    eax,edx
c001c2cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2d0:	8d 7a 01             	lea    edi,[edx+0x1]
c001c2d3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2d7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c2db:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c2df:	83 e1 3f             	and    ecx,0x3f
c001c2e2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c2e6:	89 f9                	mov    ecx,edi
c001c2e8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c2ef:	0f b6 c9             	movzx  ecx,cl
c001c2f2:	8d 78 02             	lea    edi,[eax+0x2]
c001c2f5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c2f8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c2fc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c300:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c304:	83 e2 3f             	and    edx,0x3f
c001c307:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c30b:	89 f9                	mov    ecx,edi
c001c30d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c313:	0f b6 d1             	movzx  edx,cl
c001c316:	8d 78 03             	lea    edi,[eax+0x3]
c001c319:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c31c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c320:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c324:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c328:	83 e1 3f             	and    ecx,0x3f
c001c32b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c32f:	89 f9                	mov    ecx,edi
c001c331:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c337:	0f b6 c9             	movzx  ecx,cl
c001c33a:	8d 78 04             	lea    edi,[eax+0x4]
c001c33d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c340:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c344:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c348:	89 fa                	mov    edx,edi
c001c34a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c350:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c354:	83 e2 3f             	and    edx,0x3f
c001c357:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c35b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c362:	66 85 f6             	test   si,si
c001c365:	74 65                	je     c001c3cc <IDE::open(int, int, void*)+0x34e>
c001c367:	89 f9                	mov    ecx,edi
c001c369:	83 c0 05             	add    eax,0x5
c001c36c:	0f b6 d1             	movzx  edx,cl
c001c36f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c372:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c376:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c37a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c380:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c384:	83 e0 3f             	and    eax,0x3f
c001c387:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c38b:	eb 3f                	jmp    c001c3cc <IDE::open(int, int, void*)+0x34e>
c001c38d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c393:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c39a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3a1:	05 06 02 00 00       	add    eax,0x206
c001c3a6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3ad:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3b4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c3bb:	05 06 02 00 00       	add    eax,0x206
c001c3c0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c3c7:	e9 bd fe ff ff       	jmp    c001c289 <IDE::open(int, int, void*)+0x20b>
c001c3cc:	50                   	push   eax
c001c3cd:	50                   	push   eax
c001c3ce:	6a 00                	push   0x0
c001c3d0:	53                   	push   ebx
c001c3d1:	e8 30 fa ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001c3d6:	5a                   	pop    edx
c001c3d7:	59                   	pop    ecx
c001c3d8:	6a 01                	push   0x1
c001c3da:	53                   	push   ebx
c001c3db:	e8 26 fa ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001c3e0:	83 c4 0c             	add    esp,0xc
c001c3e3:	6a 00                	push   0x0
c001c3e5:	6a 00                	push   0x0
c001c3e7:	53                   	push   ebx
c001c3e8:	e8 47 fc ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001c3ed:	83 c4 0c             	add    esp,0xc
c001c3f0:	6a 00                	push   0x0
c001c3f2:	6a 01                	push   0x1
c001c3f4:	53                   	push   ebx
c001c3f5:	e8 3a fc ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001c3fa:	83 c4 10             	add    esp,0x10
c001c3fd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c404:	74 34                	je     c001c43a <IDE::open(int, int, void*)+0x3bc>
c001c406:	83 ec 0c             	sub    esp,0xc
c001c409:	53                   	push   ebx
c001c40a:	6a 01                	push   0x1
c001c40c:	68 fc bf 01 c0       	push   0xc001bffc
c001c411:	6a 0e                	push   0xe
c001c413:	53                   	push   ebx
c001c414:	e8 f9 05 ff ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c419:	83 c4 14             	add    esp,0x14
c001c41c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c422:	53                   	push   ebx
c001c423:	6a 01                	push   0x1
c001c425:	68 18 c0 01 c0       	push   0xc001c018
c001c42a:	6a 0f                	push   0xf
c001c42c:	53                   	push   ebx
c001c42d:	e8 e0 05 ff ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c432:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c438:	eb 38                	jmp    c001c472 <IDE::open(int, int, void*)+0x3f4>
c001c43a:	83 ec 0c             	sub    esp,0xc
c001c43d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c447:	53                   	push   ebx
c001c448:	6a 00                	push   0x0
c001c44a:	68 fc bf 01 c0       	push   0xc001bffc
c001c44f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c455:	53                   	push   ebx
c001c456:	e8 b7 05 ff ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c45b:	83 c4 14             	add    esp,0x14
c001c45e:	53                   	push   ebx
c001c45f:	6a 00                	push   0x0
c001c461:	68 18 c0 01 c0       	push   0xc001c018
c001c466:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c46c:	53                   	push   ebx
c001c46d:	e8 a0 05 ff ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c472:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c474:	83 c4 20             	add    esp,0x20
c001c477:	83 ec 0c             	sub    esp,0xc
c001c47a:	53                   	push   ebx
c001c47b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c47e:	83 c4 0c             	add    esp,0xc
c001c481:	6a 07                	push   0x7
c001c483:	6a 00                	push   0x0
c001c485:	53                   	push   ebx
c001c486:	e8 61 fa ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c48b:	83 c4 0c             	add    esp,0xc
c001c48e:	6a 07                	push   0x7
c001c490:	6a 01                	push   0x1
c001c492:	53                   	push   ebx
c001c493:	e8 54 fa ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c498:	83 c4 0c             	add    esp,0xc
c001c49b:	6a 01                	push   0x1
c001c49d:	6a 00                	push   0x0
c001c49f:	53                   	push   ebx
c001c4a0:	e8 8f fb ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001c4a5:	83 c4 0c             	add    esp,0xc
c001c4a8:	6a 01                	push   0x1
c001c4aa:	6a 01                	push   0x1
c001c4ac:	53                   	push   ebx
c001c4ad:	e8 82 fb ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001c4b2:	83 c4 2c             	add    esp,0x2c
c001c4b5:	31 c0                	xor    eax,eax
c001c4b7:	5b                   	pop    ebx
c001c4b8:	5e                   	pop    esi
c001c4b9:	5f                   	pop    edi
c001c4ba:	5d                   	pop    ebp
c001c4bb:	c3                   	ret    

c001c4bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c4bc:	55                   	push   ebp
c001c4bd:	57                   	push   edi
c001c4be:	56                   	push   esi
c001c4bf:	53                   	push   ebx
c001c4c0:	83 ec 1c             	sub    esp,0x1c
c001c4c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c4c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4cb:	8d 42 f8             	lea    eax,[edx-0x8]
c001c4ce:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4d2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c4d6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c4da:	3c 03                	cmp    al,0x3
c001c4dc:	77 5a                	ja     c001c538 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c4de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c4e6:	0f b6 db             	movzx  ebx,bl
c001c4e9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c4ec:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c4f1:	0c 80                	or     al,0x80
c001c4f3:	50                   	push   eax
c001c4f4:	6a 0c                	push   0xc
c001c4f6:	53                   	push   ebx
c001c4f7:	56                   	push   esi
c001c4f8:	e8 2f f9 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4fd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c502:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c506:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c50a:	0f b6 d2             	movzx  edx,dl
c001c50d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c511:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c513:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c518:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c51c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c520:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c524:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c52c:	83 c4 2c             	add    esp,0x2c
c001c52f:	5b                   	pop    ebx
c001c530:	5e                   	pop    esi
c001c531:	5f                   	pop    edi
c001c532:	5d                   	pop    ebp
c001c533:	e9 f4 f8 ff ff       	jmp    c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c538:	0f b6 c2             	movzx  eax,dl
c001c53b:	83 f8 07             	cmp    eax,0x7
c001c53e:	77 12                	ja     c001c552 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c540:	0f b6 c2             	movzx  eax,dl
c001c543:	0f b6 db             	movzx  ebx,bl
c001c546:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c54e:	01 c2                	add    edx,eax
c001c550:	eb 2f                	jmp    c001c581 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c552:	83 f8 0d             	cmp    eax,0xd
c001c555:	77 13                	ja     c001c56a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c557:	0f b6 db             	movzx  ebx,bl
c001c55a:	0f b6 d2             	movzx  edx,dl
c001c55d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c564:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c568:	eb 17                	jmp    c001c581 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c56a:	83 f8 15             	cmp    eax,0x15
c001c56d:	77 14                	ja     c001c583 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c56f:	0f b6 db             	movzx  ebx,bl
c001c572:	0f b6 d2             	movzx  edx,dl
c001c575:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c57d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c581:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c583:	83 c4 1c             	add    esp,0x1c
c001c586:	5b                   	pop    ebx
c001c587:	5e                   	pop    esi
c001c588:	5f                   	pop    edi
c001c589:	5d                   	pop    ebp
c001c58a:	c3                   	ret    
c001c58b:	90                   	nop

c001c58c <IDE::detect()>:
c001c58c:	55                   	push   ebp
c001c58d:	57                   	push   edi
c001c58e:	56                   	push   esi
c001c58f:	53                   	push   ebx
c001c590:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c596:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c59d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5a4:	0f 85 a4 02 00 00    	jne    c001c84e <IDE::detect()+0x2c2>
c001c5aa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5b1:	31 f6                	xor    esi,esi
c001c5b3:	31 ed                	xor    ebp,ebp
c001c5b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5bd:	89 e8                	mov    eax,ebp
c001c5bf:	c1 e0 06             	shl    eax,0x6
c001c5c2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c5ca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c5ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d6:	c1 e0 04             	shl    eax,0x4
c001c5d9:	83 c8 a0             	or     eax,0xffffffa0
c001c5dc:	0f b6 c0             	movzx  eax,al
c001c5df:	50                   	push   eax
c001c5e0:	6a 06                	push   0x6
c001c5e2:	56                   	push   esi
c001c5e3:	53                   	push   ebx
c001c5e4:	e8 43 f8 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e9:	83 c4 0c             	add    esp,0xc
c001c5ec:	6a 0c                	push   0xc
c001c5ee:	56                   	push   esi
c001c5ef:	53                   	push   ebx
c001c5f0:	e8 f7 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c5f5:	83 c4 0c             	add    esp,0xc
c001c5f8:	6a 0c                	push   0xc
c001c5fa:	56                   	push   esi
c001c5fb:	53                   	push   ebx
c001c5fc:	e8 eb f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c601:	83 c4 0c             	add    esp,0xc
c001c604:	6a 0c                	push   0xc
c001c606:	56                   	push   esi
c001c607:	53                   	push   ebx
c001c608:	e8 df f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c60d:	83 c4 0c             	add    esp,0xc
c001c610:	6a 0c                	push   0xc
c001c612:	56                   	push   esi
c001c613:	53                   	push   ebx
c001c614:	e8 d3 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c619:	68 ec 00 00 00       	push   0xec
c001c61e:	6a 07                	push   0x7
c001c620:	56                   	push   esi
c001c621:	53                   	push   ebx
c001c622:	e8 05 f8 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c627:	83 c4 1c             	add    esp,0x1c
c001c62a:	6a 0c                	push   0xc
c001c62c:	56                   	push   esi
c001c62d:	53                   	push   ebx
c001c62e:	e8 b9 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c633:	83 c4 0c             	add    esp,0xc
c001c636:	6a 0c                	push   0xc
c001c638:	56                   	push   esi
c001c639:	53                   	push   ebx
c001c63a:	e8 ad f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c63f:	83 c4 0c             	add    esp,0xc
c001c642:	6a 0c                	push   0xc
c001c644:	56                   	push   esi
c001c645:	53                   	push   ebx
c001c646:	e8 a1 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c64b:	83 c4 0c             	add    esp,0xc
c001c64e:	6a 0c                	push   0xc
c001c650:	56                   	push   esi
c001c651:	53                   	push   ebx
c001c652:	e8 95 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c657:	83 c4 0c             	add    esp,0xc
c001c65a:	6a 0c                	push   0xc
c001c65c:	56                   	push   esi
c001c65d:	53                   	push   ebx
c001c65e:	e8 89 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	84 c0                	test   al,al
c001c668:	0f 84 60 01 00 00    	je     c001c7ce <IDE::detect()+0x242>
c001c66e:	31 ff                	xor    edi,edi
c001c670:	50                   	push   eax
c001c671:	6a 0c                	push   0xc
c001c673:	56                   	push   esi
c001c674:	53                   	push   ebx
c001c675:	e8 72 f8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	a8 01                	test   al,0x1
c001c67f:	0f 85 6a 01 00 00    	jne    c001c7ef <IDE::detect()+0x263>
c001c685:	a8 80                	test   al,0x80
c001c687:	75 04                	jne    c001c68d <IDE::detect()+0x101>
c001c689:	a8 08                	test   al,0x8
c001c68b:	75 23                	jne    c001c6b0 <IDE::detect()+0x124>
c001c68d:	47                   	inc    edi
c001c68e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c694:	7e da                	jle    c001c670 <IDE::detect()+0xe4>
c001c696:	83 ec 0c             	sub    esp,0xc
c001c699:	6a 32                	push   0x32
c001c69b:	e8 f0 9d ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c6a9:	75 c5                	jne    c001c670 <IDE::detect()+0xe4>
c001c6ab:	e9 3f 01 00 00       	jmp    c001c7ef <IDE::detect()+0x263>
c001c6b0:	31 c9                	xor    ecx,ecx
c001c6b2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c6b6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c6ba:	83 ec 0c             	sub    esp,0xc
c001c6bd:	68 80 00 00 00       	push   0x80
c001c6c2:	57                   	push   edi
c001c6c3:	6a 00                	push   0x0
c001c6c5:	56                   	push   esi
c001c6c6:	53                   	push   ebx
c001c6c7:	e8 f0 fd ff ff       	call   c001c4bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c6cc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c6d1:	89 e8                	mov    eax,ebp
c001c6d3:	89 d1                	mov    ecx,edx
c001c6d5:	c1 e0 06             	shl    eax,0x6
c001c6d8:	01 d8                	add    eax,ebx
c001c6da:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c6e1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c6e8:	89 f2                	mov    edx,esi
c001c6ea:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c6f0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c6f4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c6fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c6fe:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c705:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c70d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c714:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c71c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c722:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c729:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c72f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c733:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c737:	83 c4 20             	add    esp,0x20
c001c73a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c73d:	83 c0 02             	add    eax,0x2
c001c740:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c746:	83 c7 02             	add    edi,0x2
c001c749:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c74c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c752:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c756:	75 e2                	jne    c001c73a <IDE::detect()+0x1ae>
c001c758:	89 e8                	mov    eax,ebp
c001c75a:	c1 e0 06             	shl    eax,0x6
c001c75d:	01 d8                	add    eax,ebx
c001c75f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c766:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c76d:	c1 ea 09             	shr    edx,0x9
c001c770:	83 e2 01             	and    edx,0x1
c001c773:	80 e1 01             	and    cl,0x1
c001c776:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c77c:	75 22                	jne    c001c7a0 <IDE::detect()+0x214>
c001c77e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c785:	74 46                	je     c001c7cd <IDE::detect()+0x241>
c001c787:	83 ec 0c             	sub    esp,0xc
c001c78a:	68 7c 01 00 00       	push   0x17c
c001c78f:	e8 22 b3 fe ff       	call   c0007ab6 <malloc>
c001c794:	89 c7                	mov    edi,eax
c001c796:	89 04 24             	mov    DWORD PTR [esp],eax
c001c799:	e8 1a 05 00 00       	call   c001ccb8 <ATA::ATA()>
c001c79e:	eb 17                	jmp    c001c7b7 <IDE::detect()+0x22b>
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	68 84 01 00 00       	push   0x184
c001c7a8:	e8 09 b3 fe ff       	call   c0007ab6 <malloc>
c001c7ad:	89 c7                	mov    edi,eax
c001c7af:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7b2:	e8 45 0e 00 00       	call   c001d5fc <ATAPI::ATAPI()>
c001c7b7:	5a                   	pop    edx
c001c7b8:	59                   	pop    ecx
c001c7b9:	57                   	push   edi
c001c7ba:	53                   	push   ebx
c001c7bb:	e8 a6 02 ff ff       	call   c000ca66 <Device::addChild(Device*)>
c001c7c0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c7c2:	53                   	push   ebx
c001c7c3:	55                   	push   ebp
c001c7c4:	6a 00                	push   0x0
c001c7c6:	57                   	push   edi
c001c7c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c7ca:	83 c4 20             	add    esp,0x20
c001c7cd:	45                   	inc    ebp
c001c7ce:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c7d3:	74 0d                	je     c001c7e2 <IDE::detect()+0x256>
c001c7d5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c7dd:	e9 db fd ff ff       	jmp    c001c5bd <IDE::detect()+0x31>
c001c7e2:	4e                   	dec    esi
c001c7e3:	74 69                	je     c001c84e <IDE::detect()+0x2c2>
c001c7e5:	be 01 00 00 00       	mov    esi,0x1
c001c7ea:	e9 c6 fd ff ff       	jmp    c001c5b5 <IDE::detect()+0x29>
c001c7ef:	50                   	push   eax
c001c7f0:	6a 04                	push   0x4
c001c7f2:	56                   	push   esi
c001c7f3:	53                   	push   ebx
c001c7f4:	e8 f3 f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c7f9:	83 c4 0c             	add    esp,0xc
c001c7fc:	89 c7                	mov    edi,eax
c001c7fe:	6a 05                	push   0x5
c001c800:	56                   	push   esi
c001c801:	53                   	push   ebx
c001c802:	e8 e5 f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	89 f9                	mov    ecx,edi
c001c80c:	0f b6 c0             	movzx  eax,al
c001c80f:	0f b6 f9             	movzx  edi,cl
c001c812:	83 ff 14             	cmp    edi,0x14
c001c815:	75 07                	jne    c001c81e <IDE::detect()+0x292>
c001c817:	3d eb 00 00 00       	cmp    eax,0xeb
c001c81c:	eb 0a                	jmp    c001c828 <IDE::detect()+0x29c>
c001c81e:	3d 96 00 00 00       	cmp    eax,0x96
c001c823:	75 a9                	jne    c001c7ce <IDE::detect()+0x242>
c001c825:	83 ff 69             	cmp    edi,0x69
c001c828:	75 a4                	jne    c001c7ce <IDE::detect()+0x242>
c001c82a:	68 a1 00 00 00       	push   0xa1
c001c82f:	6a 07                	push   0x7
c001c831:	56                   	push   esi
c001c832:	53                   	push   ebx
c001c833:	e8 f4 f5 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c838:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c83f:	e8 4c 9c ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001c844:	83 c4 10             	add    esp,0x10
c001c847:	b1 01                	mov    cl,0x1
c001c849:	e9 64 fe ff ff       	jmp    c001c6b2 <IDE::detect()+0x126>
c001c84e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c854:	5b                   	pop    ebx
c001c855:	5e                   	pop    esi
c001c856:	5f                   	pop    edi
c001c857:	5d                   	pop    ebp
c001c858:	c3                   	ret    
c001c859:	90                   	nop

c001c85a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c85a:	55                   	push   ebp
c001c85b:	57                   	push   edi
c001c85c:	56                   	push   esi
c001c85d:	53                   	push   ebx
c001c85e:	83 ec 1c             	sub    esp,0x1c
c001c861:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c865:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c86d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c871:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c875:	88 c3                	mov    bl,al
c001c877:	25 ff 00 00 00       	and    eax,0xff
c001c87c:	0f 84 88 00 00 00    	je     c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c882:	83 ec 0c             	sub    esp,0xc
c001c885:	89 c7                	mov    edi,eax
c001c887:	68 eb 32 02 c0       	push   0xc00232eb
c001c88c:	e8 b4 e0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	83 ff 01             	cmp    edi,0x1
c001c897:	74 6b                	je     c001c904 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c899:	83 ff 02             	cmp    edi,0x2
c001c89c:	75 58                	jne    c001c8f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c89e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8a3:	01 ff                	add    edi,edi
c001c8a5:	50                   	push   eax
c001c8a6:	09 fe                	or     esi,edi
c001c8a8:	6a 01                	push   0x1
c001c8aa:	89 f0                	mov    eax,esi
c001c8ac:	0f b6 f0             	movzx  esi,al
c001c8af:	c1 e6 06             	shl    esi,0x6
c001c8b2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8ba:	50                   	push   eax
c001c8bb:	55                   	push   ebp
c001c8bc:	e8 2b f6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c8c1:	83 c4 10             	add    esp,0x10
c001c8c4:	a8 01                	test   al,0x1
c001c8c6:	74 02                	je     c001c8ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c8c8:	b3 07                	mov    bl,0x7
c001c8ca:	a8 02                	test   al,0x2
c001c8cc:	74 02                	je     c001c8d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c8ce:	b3 03                	mov    bl,0x3
c001c8d0:	a8 04                	test   al,0x4
c001c8d2:	74 02                	je     c001c8d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c8d4:	b3 14                	mov    bl,0x14
c001c8d6:	a8 08                	test   al,0x8
c001c8d8:	74 02                	je     c001c8dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c8da:	b3 03                	mov    bl,0x3
c001c8dc:	a8 10                	test   al,0x10
c001c8de:	74 02                	je     c001c8e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c8e0:	b3 15                	mov    bl,0x15
c001c8e2:	a8 20                	test   al,0x20
c001c8e4:	74 02                	je     c001c8e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c8e6:	b3 03                	mov    bl,0x3
c001c8e8:	a8 40                	test   al,0x40
c001c8ea:	74 02                	je     c001c8ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c8ec:	b3 16                	mov    bl,0x16
c001c8ee:	a8 80                	test   al,0x80
c001c8f0:	74 18                	je     c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f2:	b3 0d                	mov    bl,0xd
c001c8f4:	eb 14                	jmp    c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8f6:	83 ff 03             	cmp    edi,0x3
c001c8f9:	74 0d                	je     c001c908 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c8fb:	83 ff 04             	cmp    edi,0x4
c001c8fe:	75 0a                	jne    c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c900:	b3 08                	mov    bl,0x8
c001c902:	eb 06                	jmp    c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c904:	b3 13                	mov    bl,0x13
c001c906:	eb 02                	jmp    c001c90a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c908:	b3 17                	mov    bl,0x17
c001c90a:	83 c4 1c             	add    esp,0x1c
c001c90d:	88 d8                	mov    al,bl
c001c90f:	5b                   	pop    ebx
c001c910:	5e                   	pop    esi
c001c911:	5f                   	pop    edi
c001c912:	5d                   	pop    ebp
c001c913:	c3                   	ret    

c001c914 <IDE::polling(unsigned char, unsigned int)>:
c001c914:	57                   	push   edi
c001c915:	56                   	push   esi
c001c916:	53                   	push   ebx
c001c917:	bb 04 00 00 00       	mov    ebx,0x4
c001c91c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c920:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c925:	52                   	push   edx
c001c926:	6a 0c                	push   0xc
c001c928:	56                   	push   esi
c001c929:	57                   	push   edi
c001c92a:	e8 bd f5 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	4b                   	dec    ebx
c001c933:	75 f0                	jne    c001c925 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c935:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c93a:	50                   	push   eax
c001c93b:	6a 0c                	push   0xc
c001c93d:	56                   	push   esi
c001c93e:	57                   	push   edi
c001c93f:	e8 a8 f5 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001c944:	83 c4 10             	add    esp,0x10
c001c947:	a8 01                	test   al,0x1
c001c949:	75 17                	jne    c001c962 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c94b:	a8 20                	test   al,0x20
c001c94d:	75 0f                	jne    c001c95e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c94f:	4b                   	dec    ebx
c001c950:	74 10                	je     c001c962 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c952:	a8 80                	test   al,0x80
c001c954:	75 e4                	jne    c001c93a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c956:	a8 08                	test   al,0x8
c001c958:	74 e0                	je     c001c93a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c95a:	31 c0                	xor    eax,eax
c001c95c:	eb 06                	jmp    c001c964 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c95e:	b0 01                	mov    al,0x1
c001c960:	eb 02                	jmp    c001c964 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c962:	b0 02                	mov    al,0x2
c001c964:	5b                   	pop    ebx
c001c965:	5e                   	pop    esi
c001c966:	5f                   	pop    edi
c001c967:	c3                   	ret    

c001c968 <SATABus::close(int, int, void*)>:
c001c968:	31 c0                	xor    eax,eax
c001c96a:	c3                   	ret    
c001c96b:	90                   	nop

c001c96c <SATABus::detect()>:
c001c96c:	c3                   	ret    
c001c96d:	90                   	nop

c001c96e <SATABus::SATABus()>:
c001c96e:	83 ec 0c             	sub    esp,0xc
c001c971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c975:	83 ec 08             	sub    esp,0x8
c001c978:	68 24 33 02 c0       	push   0xc0023324
c001c97d:	50                   	push   eax
c001c97e:	e8 25 04 ff ff       	call   c000cda8 <HardDiskController::HardDiskController(char const*)>
c001c983:	83 c4 10             	add    esp,0x10
c001c986:	ba 50 33 02 c0       	mov    edx,0xc0023350
c001c98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98f:	89 10                	mov    DWORD PTR [eax],edx
c001c991:	83 ec 0c             	sub    esp,0xc
c001c994:	6a 50                	push   0x50
c001c996:	e8 f3 b4 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c99b:	83 c4 10             	add    esp,0x10
c001c99e:	89 c2                	mov    edx,eax
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	6a 50                	push   0x50
c001c9af:	e8 59 cc fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c9b4:	83 c4 10             	add    esp,0x10
c001c9b7:	89 c2                	mov    edx,eax
c001c9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c9c3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c9c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9cc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c9d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	6a 03                	push   0x3
c001c9e1:	6a 50                	push   0x50
c001c9e3:	51                   	push   ecx
c001c9e4:	52                   	push   edx
c001c9e5:	50                   	push   eax
c001c9e6:	e8 2f d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c9eb:	83 c4 20             	add    esp,0x20
c001c9ee:	90                   	nop
c001c9ef:	83 c4 0c             	add    esp,0xc
c001c9f2:	c3                   	ret    
c001c9f3:	90                   	nop

c001c9f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9f8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c9fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c9fe:	09 c2                	or     edx,eax
c001ca00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca0a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca0c:	31 c0                	xor    eax,eax
c001ca0e:	c1 e9 08             	shr    ecx,0x8
c001ca11:	83 e1 0f             	and    ecx,0xf
c001ca14:	39 c8                	cmp    eax,ecx
c001ca16:	74 0a                	je     c001ca22 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca18:	f6 c2 01             	test   dl,0x1
c001ca1b:	74 08                	je     c001ca25 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca1d:	d1 ea                	shr    edx,1
c001ca1f:	40                   	inc    eax
c001ca20:	eb f2                	jmp    c001ca14 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca22:	83 c8 ff             	or     eax,0xffffffff
c001ca25:	c3                   	ret    

c001ca26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca2a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca2d:	89 c2                	mov    edx,eax
c001ca2f:	c1 ea 08             	shr    edx,0x8
c001ca32:	83 e2 0f             	and    edx,0xf
c001ca35:	4a                   	dec    edx
c001ca36:	75 32                	jne    c001ca6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca38:	83 e0 0f             	and    eax,0xf
c001ca3b:	83 f8 03             	cmp    eax,0x3
c001ca3e:	75 2a                	jne    c001ca6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca40:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca43:	b8 02 00 00 00       	mov    eax,0x2
c001ca48:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca4e:	74 1c                	je     c001ca6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca50:	b8 04 00 00 00       	mov    eax,0x4
c001ca55:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca5b:	74 0f                	je     c001ca6c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca5d:	31 c0                	xor    eax,eax
c001ca5f:	83 fa 03             	cmp    edx,0x3
c001ca62:	0f 94 c0             	sete   al
c001ca65:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ca69:	c3                   	ret    
c001ca6a:	31 c0                	xor    eax,eax
c001ca6c:	c3                   	ret    
c001ca6d:	90                   	nop

c001ca6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca75:	0f ba e2 0f          	bt     edx,0xf
c001ca79:	72 f7                	jb     c001ca72 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ca7b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca7e:	83 ca 10             	or     edx,0x10
c001ca81:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca84:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca87:	83 ca 01             	or     edx,0x1
c001ca8a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca8d:	c3                   	ret    

c001ca8e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ca8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca95:	83 e2 fe             	and    edx,0xfffffffe
c001ca98:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ca9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ca9e:	83 e2 ef             	and    edx,0xffffffef
c001caa1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001caa4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caa7:	0f ba e2 0e          	bt     edx,0xe
c001caab:	72 f7                	jb     c001caa4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cab0:	0f ba e2 0f          	bt     edx,0xf
c001cab4:	72 ee                	jb     c001caa4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cab6:	c3                   	ret    
c001cab7:	90                   	nop

c001cab8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cab8:	55                   	push   ebp
c001cab9:	57                   	push   edi
c001caba:	56                   	push   esi
c001cabb:	53                   	push   ebx
c001cabc:	83 ec 1c             	sub    esp,0x1c
c001cabf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cac7:	53                   	push   ebx
c001cac8:	56                   	push   esi
c001cac9:	e8 c0 ff ff ff       	call   c001ca8e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cace:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cad2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cad8:	83 ec 0c             	sub    esp,0xc
c001cadb:	c1 e5 0a             	shl    ebp,0xa
c001cade:	01 e8                	add    eax,ebp
c001cae0:	89 03                	mov    DWORD PTR [ebx],eax
c001cae2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cae4:	68 00 04 00 00       	push   0x400
c001cae9:	6a 00                	push   0x0
c001caeb:	50                   	push   eax
c001caec:	e8 ff 39 fe ff       	call   c00004f0 <memset>
c001caf1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001caf7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001cafb:	01 e8                	add    eax,ebp
c001cafd:	83 c4 1c             	add    esp,0x1c
c001cb00:	89 03                	mov    DWORD PTR [ebx],eax
c001cb02:	c1 e2 08             	shl    edx,0x8
c001cb05:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb0c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001cb12:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001cb18:	01 f8                	add    eax,edi
c001cb1a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb20:	68 00 01 00 00       	push   0x100
c001cb25:	6a 00                	push   0x0
c001cb27:	50                   	push   eax
c001cb28:	e8 c3 39 fe ff       	call   c00004f0 <memset>
c001cb2d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001cb33:	01 fa                	add    edx,edi
c001cb35:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cb39:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001cb3c:	c1 e7 0d             	shl    edi,0xd
c001cb3f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb46:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001cb4c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001cb52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb56:	31 ff                	xor    edi,edi
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001cb61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb65:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001cb6b:	83 c5 20             	add    ebp,0x20
c001cb6e:	01 f8                	add    eax,edi
c001cb70:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cb73:	52                   	push   edx
c001cb74:	68 00 01 00 00       	push   0x100
c001cb79:	6a 00                	push   0x0
c001cb7b:	50                   	push   eax
c001cb7c:	e8 6f 39 fe ff       	call   c00004f0 <memset>
c001cb81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb85:	83 c4 10             	add    esp,0x10
c001cb88:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cb8e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cb95:	01 f8                	add    eax,edi
c001cb97:	81 c7 00 01 00 00    	add    edi,0x100
c001cb9d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cba0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cba6:	75 b3                	jne    c001cb5b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cba8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbaf:	50                   	push   eax
c001cbb0:	50                   	push   eax
c001cbb1:	53                   	push   ebx
c001cbb2:	56                   	push   esi
c001cbb3:	e8 b6 fe ff ff       	call   c001ca6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbb8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbbf:	83 c4 2c             	add    esp,0x2c
c001cbc2:	5b                   	pop    ebx
c001cbc3:	5e                   	pop    esi
c001cbc4:	5f                   	pop    edi
c001cbc5:	5d                   	pop    ebp
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cbc8:	55                   	push   ebp
c001cbc9:	57                   	push   edi
c001cbca:	56                   	push   esi
c001cbcb:	53                   	push   ebx
c001cbcc:	31 db                	xor    ebx,ebx
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbd5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cbd9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cbdc:	f7 c7 01 00 00 00    	test   edi,0x1
c001cbe2:	74 7a                	je     c001cc5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cbe4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cbe8:	89 d8                	mov    eax,ebx
c001cbea:	c1 e0 07             	shl    eax,0x7
c001cbed:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cbf4:	55                   	push   ebp
c001cbf5:	56                   	push   esi
c001cbf6:	e8 2b fe ff ff       	call   c001ca26 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cbfb:	5a                   	pop    edx
c001cbfc:	83 f8 01             	cmp    eax,0x1
c001cbff:	59                   	pop    ecx
c001cc00:	75 21                	jne    c001cc23 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc02:	50                   	push   eax
c001cc03:	53                   	push   ebx
c001cc04:	55                   	push   ebp
c001cc05:	56                   	push   esi
c001cc06:	e8 ad fe ff ff       	call   c001cab8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc0b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc12:	e8 9f ae fe ff       	call   c0007ab6 <malloc>
c001cc17:	89 c5                	mov    ebp,eax
c001cc19:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc1c:	e8 99 10 00 00       	call   c001dcba <SATA::SATA()>
c001cc21:	eb 24                	jmp    c001cc47 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc23:	83 f8 04             	cmp    eax,0x4
c001cc26:	75 36                	jne    c001cc5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc28:	51                   	push   ecx
c001cc29:	53                   	push   ebx
c001cc2a:	55                   	push   ebp
c001cc2b:	56                   	push   esi
c001cc2c:	e8 87 fe ff ff       	call   c001cab8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc31:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc38:	e8 79 ae fe ff       	call   c0007ab6 <malloc>
c001cc3d:	89 c5                	mov    ebp,eax
c001cc3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc42:	e8 d5 17 00 00       	call   c001e41c <SATAPI::SATAPI()>
c001cc47:	58                   	pop    eax
c001cc48:	5a                   	pop    edx
c001cc49:	55                   	push   ebp
c001cc4a:	56                   	push   esi
c001cc4b:	e8 16 fe fe ff       	call   c000ca66 <Device::addChild(Device*)>
c001cc50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc53:	56                   	push   esi
c001cc54:	6a 00                	push   0x0
c001cc56:	53                   	push   ebx
c001cc57:	55                   	push   ebp
c001cc58:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cc5b:	83 c4 20             	add    esp,0x20
c001cc5e:	d1 ef                	shr    edi,1
c001cc60:	43                   	inc    ebx
c001cc61:	83 fb 20             	cmp    ebx,0x20
c001cc64:	0f 85 72 ff ff ff    	jne    c001cbdc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cc6a:	83 c4 0c             	add    esp,0xc
c001cc6d:	5b                   	pop    ebx
c001cc6e:	5e                   	pop    esi
c001cc6f:	5f                   	pop    edi
c001cc70:	5d                   	pop    ebp
c001cc71:	c3                   	ret    

c001cc72 <SATABus::open(int, int, void*)>:
c001cc72:	83 ec 14             	sub    esp,0x14
c001cc75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc79:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cc7f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cc85:	52                   	push   edx
c001cc86:	50                   	push   eax
c001cc87:	e8 3c ff ff ff       	call   c001cbc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cc8c:	31 c0                	xor    eax,eax
c001cc8e:	83 c4 1c             	add    esp,0x1c
c001cc91:	c3                   	ret    

c001cc92 <ATA::close(int, int, void*)>:
c001cc92:	83 ec 0c             	sub    esp,0xc
c001cc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc9f:	85 c0                	test   eax,eax
c001cca1:	74 0c                	je     c001ccaf <ATA::close(int, int, void*)+0x1d>
c001cca3:	83 ec 0c             	sub    esp,0xc
c001cca6:	8b 10                	mov    edx,DWORD PTR [eax]
c001cca8:	50                   	push   eax
c001cca9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccac:	83 c4 10             	add    esp,0x10
c001ccaf:	31 c0                	xor    eax,eax
c001ccb1:	83 c4 0c             	add    esp,0xc
c001ccb4:	c3                   	ret    
c001ccb5:	90                   	nop

c001ccb6 <ATA::powerSaving(PowerSavingLevel)>:
c001ccb6:	c3                   	ret    
c001ccb7:	90                   	nop

c001ccb8 <ATA::ATA()>:
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbf:	83 ec 04             	sub    esp,0x4
c001ccc2:	68 00 02 00 00       	push   0x200
c001ccc7:	68 1d 34 02 c0       	push   0xc002341d
c001cccc:	50                   	push   eax
c001cccd:	e8 60 01 ff ff       	call   c000ce32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ccd2:	83 c4 10             	add    esp,0x10
c001ccd5:	ba 90 33 02 c0       	mov    edx,0xc0023390
c001ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccde:	89 10                	mov    DWORD PTR [eax],edx
c001cce0:	90                   	nop
c001cce1:	83 c4 0c             	add    esp,0xc
c001cce4:	c3                   	ret    
c001cce5:	90                   	nop

c001cce6 <ATA::flush(bool)>:
c001cce6:	53                   	push   ebx
c001cce7:	83 ec 08             	sub    esp,0x8
c001ccea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ccf3:	83 f8 01             	cmp    eax,0x1
c001ccf6:	19 c0                	sbb    eax,eax
c001ccf8:	83 e0 fd             	and    eax,0xfffffffd
c001ccfb:	05 ea 00 00 00       	add    eax,0xea
c001cd00:	50                   	push   eax
c001cd01:	6a 07                	push   0x7
c001cd03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd0a:	50                   	push   eax
c001cd0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd11:	e8 16 f1 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd16:	83 c4 0c             	add    esp,0xc
c001cd19:	6a 00                	push   0x0
c001cd1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd22:	50                   	push   eax
c001cd23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd29:	e8 e6 fb ff ff       	call   c001c914 <IDE::polling(unsigned char, unsigned int)>
c001cd2e:	83 c4 18             	add    esp,0x18
c001cd31:	5b                   	pop    ebx
c001cd32:	c3                   	ret    
c001cd33:	90                   	nop

c001cd34 <ATA::readyForCommand()>:
c001cd34:	56                   	push   esi
c001cd35:	53                   	push   ebx
c001cd36:	53                   	push   ebx
c001cd37:	31 db                	xor    ebx,ebx
c001cd39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd3d:	51                   	push   ecx
c001cd3e:	6a 0c                	push   0xc
c001cd40:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd47:	50                   	push   eax
c001cd48:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd4e:	e8 99 f1 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001cd53:	83 c4 10             	add    esp,0x10
c001cd56:	a8 88                	test   al,0x88
c001cd58:	74 1f                	je     c001cd79 <ATA::readyForCommand()+0x45>
c001cd5a:	43                   	inc    ebx
c001cd5b:	83 fb 63             	cmp    ebx,0x63
c001cd5e:	7e dd                	jle    c001cd3d <ATA::readyForCommand()+0x9>
c001cd60:	83 ec 0c             	sub    esp,0xc
c001cd63:	6a 0a                	push   0xa
c001cd65:	e8 26 97 ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cd73:	75 c8                	jne    c001cd3d <ATA::readyForCommand()+0x9>
c001cd75:	31 c0                	xor    eax,eax
c001cd77:	eb 02                	jmp    c001cd7b <ATA::readyForCommand()+0x47>
c001cd79:	b0 01                	mov    al,0x1
c001cd7b:	5a                   	pop    edx
c001cd7c:	5b                   	pop    ebx
c001cd7d:	5e                   	pop    esi
c001cd7e:	c3                   	ret    
c001cd7f:	90                   	nop

c001cd80 <ATA::access(unsigned long long, int, void*, bool)>:
c001cd80:	55                   	push   ebp
c001cd81:	57                   	push   edi
c001cd82:	56                   	push   esi
c001cd83:	53                   	push   ebx
c001cd84:	83 ec 2c             	sub    esp,0x2c
c001cd87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cd8b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cd8f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cd93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd97:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cd9b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cd9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cda3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cda9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdad:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdb7:	c1 e0 06             	shl    eax,0x6
c001cdba:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cdc2:	74 5d                	je     c001ce21 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001cdc4:	89 fa                	mov    edx,edi
c001cdc6:	89 f0                	mov    eax,esi
c001cdc8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cdcc:	c1 ea 1c             	shr    edx,0x1c
c001cdcf:	89 d1                	mov    ecx,edx
c001cdd1:	09 c1                	or     ecx,eax
c001cdd3:	74 25                	je     c001cdfa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cdd5:	31 ed                	xor    ebp,ebp
c001cdd7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cdde:	89 fa                	mov    edx,edi
c001cde0:	89 f0                	mov    eax,esi
c001cde2:	0f ad d0             	shrd   eax,edx,cl
c001cde5:	d3 ea                	shr    edx,cl
c001cde7:	f6 c1 20             	test   cl,0x20
c001cdea:	74 02                	je     c001cdee <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cdec:	89 d0                	mov    eax,edx
c001cdee:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cdf2:	45                   	inc    ebp
c001cdf3:	83 fd 06             	cmp    ebp,0x6
c001cdf6:	75 df                	jne    c001cdd7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cdf8:	eb 76                	jmp    c001ce70 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cdfa:	89 f0                	mov    eax,esi
c001cdfc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce01:	89 fa                	mov    edx,edi
c001ce03:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce0a:	0f ac d0 10          	shrd   eax,edx,0x10
c001ce0e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce13:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce17:	c1 ee 18             	shr    esi,0x18
c001ce1a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ce1f:	eb 56                	jmp    c001ce77 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce21:	6a 00                	push   0x0
c001ce23:	6a 3f                	push   0x3f
c001ce25:	57                   	push   edi
c001ce26:	56                   	push   esi
c001ce27:	e8 a4 2a 00 00       	call   c001f8d0 <__umoddi3>
c001ce2c:	83 c4 10             	add    esp,0x10
c001ce2f:	40                   	inc    eax
c001ce30:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce34:	6a 00                	push   0x0
c001ce36:	68 f0 03 00 00       	push   0x3f0
c001ce3b:	57                   	push   edi
c001ce3c:	56                   	push   esi
c001ce3d:	e8 8e 29 00 00       	call   c001f7d0 <__udivdi3>
c001ce42:	83 c4 10             	add    esp,0x10
c001ce45:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce4a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce51:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce56:	6a 00                	push   0x0
c001ce58:	6a 3f                	push   0x3f
c001ce5a:	57                   	push   edi
c001ce5b:	56                   	push   esi
c001ce5c:	e8 6f 29 00 00       	call   c001f7d0 <__udivdi3>
c001ce61:	83 c4 10             	add    esp,0x10
c001ce64:	83 e0 0f             	and    eax,0xf
c001ce67:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ce6c:	89 c6                	mov    esi,eax
c001ce6e:	eb 07                	jmp    c001ce77 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001ce70:	31 f6                	xor    esi,esi
c001ce72:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ce77:	bf 01 00 00 00       	mov    edi,0x1
c001ce7c:	50                   	push   eax
c001ce7d:	6a 00                	push   0x0
c001ce7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce86:	50                   	push   eax
c001ce87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce8b:	e8 a4 f1 ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001ce90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce93:	e8 9c fe ff ff       	call   c001cd34 <ATA::readyForCommand()>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	84 c0                	test   al,al
c001ce9d:	0f 84 69 02 00 00    	je     c001d10c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cea3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cea9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ceaf:	c1 e0 04             	shl    eax,0x4
c001ceb2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ceb9:	09 c6                	or     esi,eax
c001cebb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cec0:	75 05                	jne    c001cec7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cec2:	83 ce a0             	or     esi,0xffffffa0
c001cec5:	eb 03                	jmp    c001ceca <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cec7:	83 ce e0             	or     esi,0xffffffe0
c001ceca:	89 f0                	mov    eax,esi
c001cecc:	0f b6 f0             	movzx  esi,al
c001cecf:	56                   	push   esi
c001ced0:	6a 06                	push   0x6
c001ced2:	51                   	push   ecx
c001ced3:	52                   	push   edx
c001ced4:	e8 53 ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced9:	83 c4 10             	add    esp,0x10
c001cedc:	6a 00                	push   0x0
c001cede:	6a 01                	push   0x1
c001cee0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee7:	50                   	push   eax
c001cee8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceee:	e8 39 ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cef3:	83 c4 10             	add    esp,0x10
c001cef6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cefb:	83 f8 02             	cmp    eax,0x2
c001cefe:	75 6e                	jne    c001cf6e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cf00:	6a 00                	push   0x0
c001cf02:	6a 08                	push   0x8
c001cf04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf0b:	50                   	push   eax
c001cf0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf12:	e8 15 ef ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf17:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf1c:	50                   	push   eax
c001cf1d:	6a 09                	push   0x9
c001cf1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf26:	50                   	push   eax
c001cf27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf2d:	e8 fa ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf32:	83 c4 20             	add    esp,0x20
c001cf35:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf3a:	50                   	push   eax
c001cf3b:	6a 0a                	push   0xa
c001cf3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf44:	50                   	push   eax
c001cf45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4b:	e8 dc ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf50:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf55:	50                   	push   eax
c001cf56:	6a 0b                	push   0xb
c001cf58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf5f:	50                   	push   eax
c001cf60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf66:	e8 c1 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6b:	83 c4 20             	add    esp,0x20
c001cf6e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cf73:	50                   	push   eax
c001cf74:	6a 02                	push   0x2
c001cf76:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf7d:	50                   	push   eax
c001cf7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf84:	e8 a3 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf89:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cf8e:	50                   	push   eax
c001cf8f:	6a 03                	push   0x3
c001cf91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf98:	50                   	push   eax
c001cf99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf9f:	e8 88 ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfa4:	83 c4 20             	add    esp,0x20
c001cfa7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cfac:	50                   	push   eax
c001cfad:	6a 04                	push   0x4
c001cfaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfb6:	50                   	push   eax
c001cfb7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfbd:	e8 6a ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cfc7:	50                   	push   eax
c001cfc8:	6a 05                	push   0x5
c001cfca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfd1:	50                   	push   eax
c001cfd2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfd8:	e8 4f ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfdd:	83 c4 20             	add    esp,0x20
c001cfe0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfe5:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cfea:	74 11                	je     c001cffd <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cfec:	b8 30 00 00 00       	mov    eax,0x30
c001cff1:	83 fa 02             	cmp    edx,0x2
c001cff4:	75 16                	jne    c001d00c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cff6:	b8 34 00 00 00       	mov    eax,0x34
c001cffb:	eb 0f                	jmp    c001d00c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cffd:	b8 20 00 00 00       	mov    eax,0x20
c001d002:	83 fa 02             	cmp    edx,0x2
c001d005:	75 05                	jne    c001d00c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001d007:	b8 24 00 00 00       	mov    eax,0x24
c001d00c:	50                   	push   eax
c001d00d:	6a 07                	push   0x7
c001d00f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d016:	50                   	push   eax
c001d017:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01d:	e8 0a ee ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d022:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d02e:	85 f6                	test   esi,esi
c001d030:	0f 84 b3 00 00 00    	je     c001d0e9 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001d036:	50                   	push   eax
c001d037:	6a 01                	push   0x1
c001d039:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d040:	50                   	push   eax
c001d041:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d047:	e8 c8 f8 ff ff       	call   c001c914 <IDE::polling(unsigned char, unsigned int)>
c001d04c:	83 c4 10             	add    esp,0x10
c001d04f:	0f b6 f8             	movzx  edi,al
c001d052:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d058:	85 ff                	test   edi,edi
c001d05a:	74 1d                	je     c001d079 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001d05c:	57                   	push   edi
c001d05d:	0f b6 d2             	movzx  edx,dl
c001d060:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d067:	50                   	push   eax
c001d068:	52                   	push   edx
c001d069:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d06f:	e8 e6 f7 ff ff       	call   c001c85a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d074:	e9 90 00 00 00       	jmp    c001d109 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001d079:	85 ed                	test   ebp,ebp
c001d07b:	74 3b                	je     c001d0b8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001d07d:	31 c9                	xor    ecx,ecx
c001d07f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d083:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d087:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001d08b:	50                   	push   eax
c001d08c:	50                   	push   eax
c001d08d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d094:	50                   	push   eax
c001d095:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d09b:	e8 7a ed ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d0a0:	89 c2                	mov    edx,eax
c001d0a2:	89 f8                	mov    eax,edi
c001d0a4:	66 ef                	out    dx,ax
c001d0a6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d0aa:	83 c4 10             	add    esp,0x10
c001d0ad:	41                   	inc    ecx
c001d0ae:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d0b4:	75 c9                	jne    c001d07f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001d0b6:	eb 23                	jmp    c001d0db <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001d0b8:	0f b6 d2             	movzx  edx,dl
c001d0bb:	51                   	push   ecx
c001d0bc:	51                   	push   ecx
c001d0bd:	52                   	push   edx
c001d0be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0c4:	e8 51 ed ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d0c9:	b9 00 01 00 00       	mov    ecx,0x100
c001d0ce:	89 c2                	mov    edx,eax
c001d0d0:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d0d4:	fc                   	cld    
c001d0d5:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d0e3:	4e                   	dec    esi
c001d0e4:	e9 45 ff ff ff       	jmp    c001d02e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d0e9:	31 ff                	xor    edi,edi
c001d0eb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d0f0:	74 1a                	je     c001d10c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d0f2:	50                   	push   eax
c001d0f3:	50                   	push   eax
c001d0f4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d0f9:	83 f8 02             	cmp    eax,0x2
c001d0fc:	0f 94 c0             	sete   al
c001d0ff:	0f b6 c0             	movzx  eax,al
c001d102:	50                   	push   eax
c001d103:	53                   	push   ebx
c001d104:	e8 dd fb ff ff       	call   c001cce6 <ATA::flush(bool)>
c001d109:	83 c4 10             	add    esp,0x10
c001d10c:	83 c4 2c             	add    esp,0x2c
c001d10f:	89 f8                	mov    eax,edi
c001d111:	5b                   	pop    ebx
c001d112:	5e                   	pop    esi
c001d113:	5f                   	pop    edi
c001d114:	5d                   	pop    ebp
c001d115:	c3                   	ret    

c001d116 <ATA::detectCHS()>:
c001d116:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d11a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d120:	c1 e0 06             	shl    eax,0x6
c001d123:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d129:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d133:	c7 44 24 04 74 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023374
c001d13b:	e9 7f 45 ff ff       	jmp    c00116bf <KePanic(char const*)>

c001d140 <ATA::open(int, int, void*)>:
c001d140:	53                   	push   ebx
c001d141:	83 ec 08             	sub    esp,0x8
c001d144:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d14c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d150:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d156:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d15c:	c1 e0 06             	shl    eax,0x6
c001d15f:	01 d0                	add    eax,edx
c001d161:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d168:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d16e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d175:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d17f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d185:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d18c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d193:	75 0c                	jne    c001d1a1 <ATA::open(int, int, void*)+0x61>
c001d195:	83 ec 0c             	sub    esp,0xc
c001d198:	53                   	push   ebx
c001d199:	e8 78 ff ff ff       	call   c001d116 <ATA::detectCHS()>
c001d19e:	83 c4 10             	add    esp,0x10
c001d1a1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d1a7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d1ad:	c1 e0 06             	shl    eax,0x6
c001d1b0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d1b7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d1c1:	d1 e8                	shr    eax,1
c001d1c3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d1c9:	6a 04                	push   0x4
c001d1cb:	6a 0c                	push   0xc
c001d1cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1d4:	50                   	push   eax
c001d1d5:	52                   	push   edx
c001d1d6:	e8 51 ec ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1db:	90                   	nop
c001d1dc:	90                   	nop
c001d1dd:	6a 00                	push   0x0
c001d1df:	6a 0c                	push   0xc
c001d1e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1e8:	50                   	push   eax
c001d1e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1ef:	e8 38 ec ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1f4:	83 c4 14             	add    esp,0x14
c001d1f7:	53                   	push   ebx
c001d1f8:	e8 9d fc fe ff       	call   c000ce9a <PhysicalDisk::startCache()>
c001d1fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d200:	e8 d9 0e ff ff       	call   c000e0de <createPartitionsForDisk(PhysicalDisk*)>
c001d205:	31 c0                	xor    eax,eax
c001d207:	83 c4 18             	add    esp,0x18
c001d20a:	5b                   	pop    ebx
c001d20b:	c3                   	ret    

c001d20c <combineCharAndColour(char, unsigned char)>:
c001d20c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d211:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d217:	c1 e0 08             	shl    eax,0x8
c001d21a:	09 d0                	or     eax,edx
c001d21c:	c3                   	ret    

c001d21d <combineColours(unsigned char, unsigned char)>:
c001d21d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d222:	c1 e0 04             	shl    eax,0x4
c001d225:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d229:	c3                   	ret    

c001d22a <ATA::read(unsigned long long, int, void*)>:
c001d22a:	55                   	push   ebp
c001d22b:	57                   	push   edi
c001d22c:	56                   	push   esi
c001d22d:	be 04 00 00 00       	mov    esi,0x4
c001d232:	53                   	push   ebx
c001d233:	83 ec 0c             	sub    esp,0xc
c001d236:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d23a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d23e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d241:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d245:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d249:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d24f:	0f 87 a1 01 00 00    	ja     c001d3f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d255:	be 06 00 00 00       	mov    esi,0x6
c001d25a:	85 c9                	test   ecx,ecx
c001d25c:	0f 84 94 01 00 00    	je     c001d3f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d262:	55                   	push   ebp
c001d263:	55                   	push   ebp
c001d264:	6a 00                	push   0x0
c001d266:	51                   	push   ecx
c001d267:	53                   	push   ebx
c001d268:	52                   	push   edx
c001d269:	50                   	push   eax
c001d26a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d26e:	e8 0d fb ff ff       	call   c001cd80 <ATA::access(unsigned long long, int, void*, bool)>
c001d273:	83 c4 20             	add    esp,0x20
c001d276:	89 c6                	mov    esi,eax
c001d278:	85 c0                	test   eax,eax
c001d27a:	0f 85 71 01 00 00    	jne    c001d3f1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d280:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d286:	89 da                	mov    edx,ebx
c001d288:	50                   	push   eax
c001d289:	bd 10 27 00 00       	mov    ebp,0x2710
c001d28e:	50                   	push   eax
c001d28f:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d295:	6a 0f                	push   0xf
c001d297:	6a 00                	push   0x0
c001d299:	e8 7f ff ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001d29e:	59                   	pop    ecx
c001d29f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d2a4:	5b                   	pop    ebx
c001d2a5:	0f b6 d8             	movzx  ebx,al
c001d2a8:	89 d0                	mov    eax,edx
c001d2aa:	53                   	push   ebx
c001d2ab:	99                   	cdq    
c001d2ac:	f7 fd                	idiv   ebp
c001d2ae:	99                   	cdq    
c001d2af:	f7 f9                	idiv   ecx
c001d2b1:	83 c2 30             	add    edx,0x30
c001d2b4:	0f b6 d2             	movzx  edx,dl
c001d2b7:	52                   	push   edx
c001d2b8:	e8 4f ff ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d2bd:	5f                   	pop    edi
c001d2be:	bf e8 03 00 00       	mov    edi,0x3e8
c001d2c3:	5a                   	pop    edx
c001d2c4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d2ca:	53                   	push   ebx
c001d2cb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2d0:	99                   	cdq    
c001d2d1:	f7 ff                	idiv   edi
c001d2d3:	99                   	cdq    
c001d2d4:	f7 f9                	idiv   ecx
c001d2d6:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d9:	0f b6 c0             	movzx  eax,al
c001d2dc:	50                   	push   eax
c001d2dd:	e8 2a ff ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d2e2:	5f                   	pop    edi
c001d2e3:	bf 64 00 00 00       	mov    edi,0x64
c001d2e8:	5a                   	pop    edx
c001d2e9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d2ef:	53                   	push   ebx
c001d2f0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d2f5:	99                   	cdq    
c001d2f6:	f7 ff                	idiv   edi
c001d2f8:	99                   	cdq    
c001d2f9:	f7 f9                	idiv   ecx
c001d2fb:	8d 42 30             	lea    eax,[edx+0x30]
c001d2fe:	0f b6 c0             	movzx  eax,al
c001d301:	50                   	push   eax
c001d302:	e8 05 ff ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d307:	5a                   	pop    edx
c001d308:	5a                   	pop    edx
c001d309:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d30f:	53                   	push   ebx
c001d310:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d315:	99                   	cdq    
c001d316:	f7 f9                	idiv   ecx
c001d318:	99                   	cdq    
c001d319:	f7 f9                	idiv   ecx
c001d31b:	8d 42 30             	lea    eax,[edx+0x30]
c001d31e:	0f b6 c0             	movzx  eax,al
c001d321:	50                   	push   eax
c001d322:	e8 e5 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d327:	5a                   	pop    edx
c001d328:	5a                   	pop    edx
c001d329:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d32f:	53                   	push   ebx
c001d330:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d335:	99                   	cdq    
c001d336:	f7 f9                	idiv   ecx
c001d338:	83 c2 30             	add    edx,0x30
c001d33b:	0f b6 d2             	movzx  edx,dl
c001d33e:	52                   	push   edx
c001d33f:	e8 c8 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d344:	5a                   	pop    edx
c001d345:	5a                   	pop    edx
c001d346:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d34c:	53                   	push   ebx
c001d34d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d352:	99                   	cdq    
c001d353:	f7 fd                	idiv   ebp
c001d355:	99                   	cdq    
c001d356:	f7 f9                	idiv   ecx
c001d358:	8d 42 30             	lea    eax,[edx+0x30]
c001d35b:	0f b6 c0             	movzx  eax,al
c001d35e:	50                   	push   eax
c001d35f:	e8 a8 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d364:	5d                   	pop    ebp
c001d365:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d36a:	5a                   	pop    edx
c001d36b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d371:	53                   	push   ebx
c001d372:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d377:	99                   	cdq    
c001d378:	f7 fd                	idiv   ebp
c001d37a:	99                   	cdq    
c001d37b:	f7 f9                	idiv   ecx
c001d37d:	8d 42 30             	lea    eax,[edx+0x30]
c001d380:	0f b6 c0             	movzx  eax,al
c001d383:	50                   	push   eax
c001d384:	e8 83 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d389:	5d                   	pop    ebp
c001d38a:	5a                   	pop    edx
c001d38b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d391:	53                   	push   ebx
c001d392:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d397:	99                   	cdq    
c001d398:	f7 ff                	idiv   edi
c001d39a:	99                   	cdq    
c001d39b:	f7 f9                	idiv   ecx
c001d39d:	8d 42 30             	lea    eax,[edx+0x30]
c001d3a0:	0f b6 c0             	movzx  eax,al
c001d3a3:	50                   	push   eax
c001d3a4:	e8 63 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d3a9:	5f                   	pop    edi
c001d3aa:	5d                   	pop    ebp
c001d3ab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d3b1:	53                   	push   ebx
c001d3b2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3b7:	99                   	cdq    
c001d3b8:	f7 f9                	idiv   ecx
c001d3ba:	99                   	cdq    
c001d3bb:	f7 f9                	idiv   ecx
c001d3bd:	8d 42 30             	lea    eax,[edx+0x30]
c001d3c0:	0f b6 c0             	movzx  eax,al
c001d3c3:	50                   	push   eax
c001d3c4:	e8 43 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d3c9:	5a                   	pop    edx
c001d3ca:	5f                   	pop    edi
c001d3cb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d3d1:	53                   	push   ebx
c001d3d2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3d7:	99                   	cdq    
c001d3d8:	f7 f9                	idiv   ecx
c001d3da:	83 c2 30             	add    edx,0x30
c001d3dd:	0f b6 d2             	movzx  edx,dl
c001d3e0:	52                   	push   edx
c001d3e1:	e8 26 fe ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d3ef:	eb 05                	jmp    c001d3f6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d3f1:	be 01 00 00 00       	mov    esi,0x1
c001d3f6:	83 c4 0c             	add    esp,0xc
c001d3f9:	89 f0                	mov    eax,esi
c001d3fb:	5b                   	pop    ebx
c001d3fc:	5e                   	pop    esi
c001d3fd:	5f                   	pop    edi
c001d3fe:	5d                   	pop    ebp
c001d3ff:	c3                   	ret    

c001d400 <ATA::write(unsigned long long, int, void*)>:
c001d400:	55                   	push   ebp
c001d401:	57                   	push   edi
c001d402:	56                   	push   esi
c001d403:	be 04 00 00 00       	mov    esi,0x4
c001d408:	53                   	push   ebx
c001d409:	83 ec 0c             	sub    esp,0xc
c001d40c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d410:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d414:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d417:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d41b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d41f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d425:	0f 87 9c 01 00 00    	ja     c001d5c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d42b:	be 06 00 00 00       	mov    esi,0x6
c001d430:	85 c9                	test   ecx,ecx
c001d432:	0f 84 8f 01 00 00    	je     c001d5c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d438:	55                   	push   ebp
c001d439:	55                   	push   ebp
c001d43a:	6a 01                	push   0x1
c001d43c:	51                   	push   ecx
c001d43d:	53                   	push   ebx
c001d43e:	52                   	push   edx
c001d43f:	50                   	push   eax
c001d440:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d444:	e8 37 f9 ff ff       	call   c001cd80 <ATA::access(unsigned long long, int, void*, bool)>
c001d449:	83 c4 20             	add    esp,0x20
c001d44c:	89 c6                	mov    esi,eax
c001d44e:	85 c0                	test   eax,eax
c001d450:	0f 85 6c 01 00 00    	jne    c001d5c2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d456:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d45c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d461:	50                   	push   eax
c001d462:	50                   	push   eax
c001d463:	6a 0f                	push   0xf
c001d465:	6a 00                	push   0x0
c001d467:	e8 b1 fd ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001d46c:	5a                   	pop    edx
c001d46d:	0f b6 d8             	movzx  ebx,al
c001d470:	59                   	pop    ecx
c001d471:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d476:	53                   	push   ebx
c001d477:	b9 0a 00 00 00       	mov    ecx,0xa
c001d47c:	99                   	cdq    
c001d47d:	f7 fd                	idiv   ebp
c001d47f:	99                   	cdq    
c001d480:	f7 f9                	idiv   ecx
c001d482:	8d 42 30             	lea    eax,[edx+0x30]
c001d485:	0f b6 c0             	movzx  eax,al
c001d488:	50                   	push   eax
c001d489:	e8 7e fd ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d48e:	5f                   	pop    edi
c001d48f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d494:	5a                   	pop    edx
c001d495:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d49b:	53                   	push   ebx
c001d49c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4a1:	99                   	cdq    
c001d4a2:	f7 ff                	idiv   edi
c001d4a4:	99                   	cdq    
c001d4a5:	f7 f9                	idiv   ecx
c001d4a7:	8d 42 30             	lea    eax,[edx+0x30]
c001d4aa:	0f b6 c0             	movzx  eax,al
c001d4ad:	50                   	push   eax
c001d4ae:	e8 59 fd ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d4b3:	5f                   	pop    edi
c001d4b4:	bf 64 00 00 00       	mov    edi,0x64
c001d4b9:	5a                   	pop    edx
c001d4ba:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d4c0:	53                   	push   ebx
c001d4c1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4c6:	99                   	cdq    
c001d4c7:	f7 ff                	idiv   edi
c001d4c9:	99                   	cdq    
c001d4ca:	f7 f9                	idiv   ecx
c001d4cc:	8d 42 30             	lea    eax,[edx+0x30]
c001d4cf:	0f b6 c0             	movzx  eax,al
c001d4d2:	50                   	push   eax
c001d4d3:	e8 34 fd ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d4d8:	5a                   	pop    edx
c001d4d9:	5a                   	pop    edx
c001d4da:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4e0:	53                   	push   ebx
c001d4e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4e6:	99                   	cdq    
c001d4e7:	f7 f9                	idiv   ecx
c001d4e9:	99                   	cdq    
c001d4ea:	f7 f9                	idiv   ecx
c001d4ec:	8d 42 30             	lea    eax,[edx+0x30]
c001d4ef:	0f b6 c0             	movzx  eax,al
c001d4f2:	50                   	push   eax
c001d4f3:	e8 14 fd ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d4f8:	5a                   	pop    edx
c001d4f9:	5a                   	pop    edx
c001d4fa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d500:	53                   	push   ebx
c001d501:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d506:	99                   	cdq    
c001d507:	f7 f9                	idiv   ecx
c001d509:	8d 42 30             	lea    eax,[edx+0x30]
c001d50c:	0f b6 c0             	movzx  eax,al
c001d50f:	50                   	push   eax
c001d510:	e8 f7 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d515:	5a                   	pop    edx
c001d516:	5a                   	pop    edx
c001d517:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d51d:	53                   	push   ebx
c001d51e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d523:	99                   	cdq    
c001d524:	f7 fd                	idiv   ebp
c001d526:	99                   	cdq    
c001d527:	f7 f9                	idiv   ecx
c001d529:	8d 42 30             	lea    eax,[edx+0x30]
c001d52c:	0f b6 c0             	movzx  eax,al
c001d52f:	50                   	push   eax
c001d530:	e8 d7 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d535:	5d                   	pop    ebp
c001d536:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d53b:	5a                   	pop    edx
c001d53c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d542:	53                   	push   ebx
c001d543:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d548:	99                   	cdq    
c001d549:	f7 fd                	idiv   ebp
c001d54b:	99                   	cdq    
c001d54c:	f7 f9                	idiv   ecx
c001d54e:	8d 42 30             	lea    eax,[edx+0x30]
c001d551:	0f b6 c0             	movzx  eax,al
c001d554:	50                   	push   eax
c001d555:	e8 b2 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d55a:	5d                   	pop    ebp
c001d55b:	5a                   	pop    edx
c001d55c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d562:	53                   	push   ebx
c001d563:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d568:	99                   	cdq    
c001d569:	f7 ff                	idiv   edi
c001d56b:	99                   	cdq    
c001d56c:	f7 f9                	idiv   ecx
c001d56e:	8d 42 30             	lea    eax,[edx+0x30]
c001d571:	0f b6 c0             	movzx  eax,al
c001d574:	50                   	push   eax
c001d575:	e8 92 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d57a:	5f                   	pop    edi
c001d57b:	5d                   	pop    ebp
c001d57c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d582:	53                   	push   ebx
c001d583:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d588:	99                   	cdq    
c001d589:	f7 f9                	idiv   ecx
c001d58b:	99                   	cdq    
c001d58c:	f7 f9                	idiv   ecx
c001d58e:	8d 42 30             	lea    eax,[edx+0x30]
c001d591:	0f b6 c0             	movzx  eax,al
c001d594:	50                   	push   eax
c001d595:	e8 72 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d59a:	5a                   	pop    edx
c001d59b:	5f                   	pop    edi
c001d59c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5a2:	53                   	push   ebx
c001d5a3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5a8:	99                   	cdq    
c001d5a9:	f7 f9                	idiv   ecx
c001d5ab:	83 c2 30             	add    edx,0x30
c001d5ae:	0f b6 d2             	movzx  edx,dl
c001d5b1:	52                   	push   edx
c001d5b2:	e8 55 fc ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5c0:	eb 05                	jmp    c001d5c7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d5c2:	be 01 00 00 00       	mov    esi,0x1
c001d5c7:	83 c4 0c             	add    esp,0xc
c001d5ca:	89 f0                	mov    eax,esi
c001d5cc:	5b                   	pop    ebx
c001d5cd:	5e                   	pop    esi
c001d5ce:	5f                   	pop    edi
c001d5cf:	5d                   	pop    ebp
c001d5d0:	c3                   	ret    
c001d5d1:	90                   	nop

c001d5d2 <ATAPI::write(unsigned long long, int, void*)>:
c001d5d2:	b8 03 00 00 00       	mov    eax,0x3
c001d5d7:	c3                   	ret    

c001d5d8 <ATAPI::close(int, int, void*)>:
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5e5:	85 c0                	test   eax,eax
c001d5e7:	74 0c                	je     c001d5f5 <ATAPI::close(int, int, void*)+0x1d>
c001d5e9:	83 ec 0c             	sub    esp,0xc
c001d5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5ee:	50                   	push   eax
c001d5ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	31 c0                	xor    eax,eax
c001d5f7:	83 c4 0c             	add    esp,0xc
c001d5fa:	c3                   	ret    
c001d5fb:	90                   	nop

c001d5fc <ATAPI::ATAPI()>:
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d603:	83 ec 04             	sub    esp,0x4
c001d606:	68 00 08 00 00       	push   0x800
c001d60b:	68 bd 34 02 c0       	push   0xc00234bd
c001d610:	50                   	push   eax
c001d611:	e8 1c f8 fe ff       	call   c000ce32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c001d61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d622:	89 10                	mov    DWORD PTR [eax],edx
c001d624:	90                   	nop
c001d625:	83 c4 0c             	add    esp,0xc
c001d628:	c3                   	ret    
c001d629:	90                   	nop

c001d62a <ATAPI::readyForCommand()>:
c001d62a:	56                   	push   esi
c001d62b:	53                   	push   ebx
c001d62c:	53                   	push   ebx
c001d62d:	31 db                	xor    ebx,ebx
c001d62f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d633:	51                   	push   ecx
c001d634:	6a 0c                	push   0xc
c001d636:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d63d:	50                   	push   eax
c001d63e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d644:	e8 a3 e8 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d649:	83 c4 10             	add    esp,0x10
c001d64c:	a8 88                	test   al,0x88
c001d64e:	74 25                	je     c001d675 <ATAPI::readyForCommand()+0x4b>
c001d650:	43                   	inc    ebx
c001d651:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d657:	7e da                	jle    c001d633 <ATAPI::readyForCommand()+0x9>
c001d659:	83 ec 0c             	sub    esp,0xc
c001d65c:	68 5e 01 00 00       	push   0x15e
c001d661:	e8 2a 8e ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d66f:	75 c2                	jne    c001d633 <ATAPI::readyForCommand()+0x9>
c001d671:	31 c0                	xor    eax,eax
c001d673:	eb 02                	jmp    c001d677 <ATAPI::readyForCommand()+0x4d>
c001d675:	b0 01                	mov    al,0x1
c001d677:	5a                   	pop    edx
c001d678:	5b                   	pop    ebx
c001d679:	5e                   	pop    esi
c001d67a:	c3                   	ret    
c001d67b:	90                   	nop

c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d67c:	55                   	push   ebp
c001d67d:	57                   	push   edi
c001d67e:	56                   	push   esi
c001d67f:	53                   	push   ebx
c001d680:	83 ec 20             	sub    esp,0x20
c001d683:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d687:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d68b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d68f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d693:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d697:	6a 01                	push   0x1
c001d699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a0:	50                   	push   eax
c001d6a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a7:	e8 88 e9 ff ff       	call   c001c034 <IDE::enableIRQs(unsigned char, bool)>
c001d6ac:	5e                   	pop    esi
c001d6ad:	58                   	pop    eax
c001d6ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6b5:	50                   	push   eax
c001d6b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6bc:	e8 45 e7 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d6c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6c4:	e8 61 ff ff ff       	call   c001d62a <ATAPI::readyForCommand()>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	84 c0                	test   al,al
c001d6ce:	75 0a                	jne    c001d6da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d6d0:	bb 01 00 00 00       	mov    ebx,0x1
c001d6d5:	e9 60 02 00 00       	jmp    c001d93a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6da:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d6e0:	c1 e0 04             	shl    eax,0x4
c001d6e3:	0f b6 c0             	movzx  eax,al
c001d6e6:	50                   	push   eax
c001d6e7:	6a 06                	push   0x6
c001d6e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f0:	50                   	push   eax
c001d6f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6f7:	e8 30 e7 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6fc:	6a 00                	push   0x0
c001d6fe:	6a 01                	push   0x1
c001d700:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d707:	50                   	push   eax
c001d708:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d70e:	e8 19 e7 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d713:	83 c4 20             	add    esp,0x20
c001d716:	0f b6 c3             	movzx  eax,bl
c001d719:	0f b6 df             	movzx  ebx,bh
c001d71c:	50                   	push   eax
c001d71d:	6a 04                	push   0x4
c001d71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d726:	50                   	push   eax
c001d727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d72d:	e8 fa e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d732:	53                   	push   ebx
c001d733:	6a 05                	push   0x5
c001d735:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d73c:	50                   	push   eax
c001d73d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d743:	e8 e4 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d748:	83 c4 20             	add    esp,0x20
c001d74b:	68 a0 00 00 00       	push   0xa0
c001d750:	6a 07                	push   0x7
c001d752:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d759:	50                   	push   eax
c001d75a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d760:	e8 c7 e6 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d765:	83 c4 0c             	add    esp,0xc
c001d768:	6a 01                	push   0x1
c001d76a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d771:	50                   	push   eax
c001d772:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d778:	e8 97 f1 ff ff       	call   c001c914 <IDE::polling(unsigned char, unsigned int)>
c001d77d:	83 c4 10             	add    esp,0x10
c001d780:	0f b6 d8             	movzx  ebx,al
c001d783:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d789:	85 db                	test   ebx,ebx
c001d78b:	74 20                	je     c001d7ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d78d:	53                   	push   ebx
c001d78e:	0f b6 c0             	movzx  eax,al
c001d791:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d798:	52                   	push   edx
c001d799:	50                   	push   eax
c001d79a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7a0:	e8 b5 f0 ff ff       	call   c001c85a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	e9 8d 01 00 00       	jmp    c001d93a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d7ad:	0f b6 c0             	movzx  eax,al
c001d7b0:	53                   	push   ebx
c001d7b1:	53                   	push   ebx
c001d7b2:	50                   	push   eax
c001d7b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7b9:	e8 5c e6 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d7be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d7c2:	b9 06 00 00 00       	mov    ecx,0x6
c001d7c7:	89 c2                	mov    edx,eax
c001d7c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d7cc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d7d0:	83 c4 10             	add    esp,0x10
c001d7d3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d7d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7e9:	85 db                	test   ebx,ebx
c001d7eb:	0f 84 ec 00 00 00    	je     c001d8dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d7f1:	51                   	push   ecx
c001d7f2:	51                   	push   ecx
c001d7f3:	52                   	push   edx
c001d7f4:	50                   	push   eax
c001d7f5:	e8 a0 e7 ff ff       	call   c001bf9a <IDE::waitInterrupt(unsigned char)>
c001d7fa:	83 c4 10             	add    esp,0x10
c001d7fd:	84 c0                	test   al,al
c001d7ff:	0f 84 cb fe ff ff    	je     c001d6d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d805:	56                   	push   esi
c001d806:	56                   	push   esi
c001d807:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d80e:	50                   	push   eax
c001d80f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d815:	e8 ec e5 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d81a:	83 c4 0c             	add    esp,0xc
c001d81d:	6a 04                	push   0x4
c001d81f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d826:	50                   	push   eax
c001d827:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d82d:	e8 ba e6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d832:	83 c4 0c             	add    esp,0xc
c001d835:	89 c6                	mov    esi,eax
c001d837:	6a 05                	push   0x5
c001d839:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d840:	50                   	push   eax
c001d841:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d847:	e8 a0 e6 ff ff       	call   c001beec <IDE::read(unsigned char, unsigned char)>
c001d84c:	89 f1                	mov    ecx,esi
c001d84e:	0f b6 c0             	movzx  eax,al
c001d851:	0f b6 f1             	movzx  esi,cl
c001d854:	c1 e0 08             	shl    eax,0x8
c001d857:	09 c6                	or     esi,eax
c001d859:	d1 fe                	sar    esi,1
c001d85b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d867:	74 41                	je     c001d8aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d869:	31 c9                	xor    ecx,ecx
c001d86b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d871:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d878:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d87c:	75 0a                	jne    c001d888 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d87e:	01 c9                	add    ecx,ecx
c001d880:	01 cd                	add    ebp,ecx
c001d882:	4b                   	dec    ebx
c001d883:	e9 54 ff ff ff       	jmp    c001d7dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d888:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d88d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d891:	51                   	push   ecx
c001d892:	51                   	push   ecx
c001d893:	52                   	push   edx
c001d894:	50                   	push   eax
c001d895:	e8 80 e5 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d89a:	89 c2                	mov    edx,eax
c001d89c:	89 f0                	mov    eax,esi
c001d89e:	66 ef                	out    dx,ax
c001d8a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d8a4:	83 c4 10             	add    esp,0x10
c001d8a7:	41                   	inc    ecx
c001d8a8:	eb c1                	jmp    c001d86b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d8aa:	31 f6                	xor    esi,esi
c001d8ac:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8b2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8b9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d8bd:	75 06                	jne    c001d8c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d8bf:	01 f6                	add    esi,esi
c001d8c1:	01 f5                	add    ebp,esi
c001d8c3:	eb bd                	jmp    c001d882 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d8c5:	51                   	push   ecx
c001d8c6:	51                   	push   ecx
c001d8c7:	52                   	push   edx
c001d8c8:	50                   	push   eax
c001d8c9:	e8 4c e5 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d8ce:	89 c2                	mov    edx,eax
c001d8d0:	66 ed                	in     ax,dx
c001d8d2:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d8d7:	83 c4 10             	add    esp,0x10
c001d8da:	46                   	inc    esi
c001d8db:	eb cf                	jmp    c001d8ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d8dd:	51                   	push   ecx
c001d8de:	51                   	push   ecx
c001d8df:	52                   	push   edx
c001d8e0:	50                   	push   eax
c001d8e1:	e8 b4 e6 ff ff       	call   c001bf9a <IDE::waitInterrupt(unsigned char)>
c001d8e6:	83 c4 10             	add    esp,0x10
c001d8e9:	84 c0                	test   al,al
c001d8eb:	0f 84 df fd ff ff    	je     c001d6d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d8f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d8f6:	52                   	push   edx
c001d8f7:	52                   	push   edx
c001d8f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8ff:	50                   	push   eax
c001d900:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d906:	e8 fb e4 ff ff       	call   c001be06 <IDE::prepareInterrupt(unsigned char)>
c001d90b:	83 c4 10             	add    esp,0x10
c001d90e:	50                   	push   eax
c001d90f:	50                   	push   eax
c001d910:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d917:	50                   	push   eax
c001d918:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d91e:	e8 f7 e4 ff ff       	call   c001be1a <IDE::getBase(unsigned char)>
c001d923:	8d 50 07             	lea    edx,[eax+0x7]
c001d926:	ec                   	in     al,dx
c001d927:	83 c4 10             	add    esp,0x10
c001d92a:	a8 88                	test   al,0x88
c001d92c:	74 0a                	je     c001d938 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d92e:	4b                   	dec    ebx
c001d92f:	75 dd                	jne    c001d90e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d931:	bb 02 00 00 00       	mov    ebx,0x2
c001d936:	eb 02                	jmp    c001d93a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d938:	31 db                	xor    ebx,ebx
c001d93a:	83 c4 1c             	add    esp,0x1c
c001d93d:	89 d8                	mov    eax,ebx
c001d93f:	5b                   	pop    ebx
c001d940:	5e                   	pop    esi
c001d941:	5f                   	pop    edi
c001d942:	5d                   	pop    ebp
c001d943:	c3                   	ret    

c001d944 <ATAPI::diskRemoved()>:
c001d944:	53                   	push   ebx
c001d945:	83 ec 14             	sub    esp,0x14
c001d948:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d94c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d953:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d959:	e8 70 04 ff ff       	call   c000ddce <LogicalDisk::unmount()>
c001d95e:	58                   	pop    eax
c001d95f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d965:	e8 46 0e ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c001d96a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d970:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d974:	83 c4 18             	add    esp,0x18
c001d977:	5b                   	pop    ebx
c001d978:	e9 23 0e ff ff       	jmp    c000e7a0 <VCache::invalidateReadBuffer()>
c001d97d:	90                   	nop

c001d97e <ATAPI::eject()>:
c001d97e:	57                   	push   edi
c001d97f:	b9 03 00 00 00       	mov    ecx,0x3
c001d984:	53                   	push   ebx
c001d985:	83 ec 14             	sub    esp,0x14
c001d988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d98c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d990:	fc                   	cld    
c001d991:	31 c0                	xor    eax,eax
c001d993:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d995:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d99a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d99f:	50                   	push   eax
c001d9a0:	50                   	push   eax
c001d9a1:	6a 00                	push   0x0
c001d9a3:	6a 00                	push   0x0
c001d9a5:	6a 00                	push   0x0
c001d9a7:	6a 02                	push   0x2
c001d9a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d9ad:	50                   	push   eax
c001d9ae:	53                   	push   ebx
c001d9af:	e8 c8 fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9b4:	83 c4 14             	add    esp,0x14
c001d9b7:	53                   	push   ebx
c001d9b8:	e8 87 ff ff ff       	call   c001d944 <ATAPI::diskRemoved()>
c001d9bd:	83 c4 24             	add    esp,0x24
c001d9c0:	31 c0                	xor    eax,eax
c001d9c2:	5b                   	pop    ebx
c001d9c3:	5f                   	pop    edi
c001d9c4:	c3                   	ret    
c001d9c5:	90                   	nop

c001d9c6 <ATAPI::diskInserted()>:
c001d9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9ca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d9d1:	c3                   	ret    

c001d9d2 <ATAPI::detectMedia()>:
c001d9d2:	56                   	push   esi
c001d9d3:	53                   	push   ebx
c001d9d4:	83 ec 28             	sub    esp,0x28
c001d9d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9db:	6a 0c                	push   0xc
c001d9dd:	6a 00                	push   0x0
c001d9df:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d9e3:	56                   	push   esi
c001d9e4:	e8 07 2b fe ff       	call   c00004f0 <memset>
c001d9e9:	58                   	pop    eax
c001d9ea:	5a                   	pop    edx
c001d9eb:	6a 00                	push   0x0
c001d9ed:	6a 00                	push   0x0
c001d9ef:	6a 00                	push   0x0
c001d9f1:	6a 00                	push   0x0
c001d9f3:	56                   	push   esi
c001d9f4:	53                   	push   ebx
c001d9f5:	e8 82 fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d9fa:	83 c4 1c             	add    esp,0x1c
c001d9fd:	6a 0c                	push   0xc
c001d9ff:	6a 00                	push   0x0
c001da01:	56                   	push   esi
c001da02:	e8 e9 2a fe ff       	call   c00004f0 <memset>
c001da07:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da0c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da11:	59                   	pop    ecx
c001da12:	58                   	pop    eax
c001da13:	6a 01                	push   0x1
c001da15:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da19:	50                   	push   eax
c001da1a:	6a 00                	push   0x0
c001da1c:	6a 12                	push   0x12
c001da1e:	56                   	push   esi
c001da1f:	53                   	push   ebx
c001da20:	e8 57 fc ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da25:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da29:	83 c4 20             	add    esp,0x20
c001da2c:	83 e0 7f             	and    eax,0x7f
c001da2f:	83 f8 70             	cmp    eax,0x70
c001da32:	74 15                	je     c001da49 <ATAPI::detectMedia()+0x77>
c001da34:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da3b:	75 0c                	jne    c001da49 <ATAPI::detectMedia()+0x77>
c001da3d:	83 ec 0c             	sub    esp,0xc
c001da40:	53                   	push   ebx
c001da41:	e8 80 ff ff ff       	call   c001d9c6 <ATAPI::diskInserted()>
c001da46:	83 c4 10             	add    esp,0x10
c001da49:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001da4d:	83 e0 0f             	and    eax,0xf
c001da50:	83 f8 02             	cmp    eax,0x2
c001da53:	75 1b                	jne    c001da70 <ATAPI::detectMedia()+0x9e>
c001da55:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001da5a:	75 2d                	jne    c001da89 <ATAPI::detectMedia()+0xb7>
c001da5c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da63:	74 24                	je     c001da89 <ATAPI::detectMedia()+0xb7>
c001da65:	83 ec 0c             	sub    esp,0xc
c001da68:	53                   	push   ebx
c001da69:	e8 d6 fe ff ff       	call   c001d944 <ATAPI::diskRemoved()>
c001da6e:	eb 16                	jmp    c001da86 <ATAPI::detectMedia()+0xb4>
c001da70:	85 c0                	test   eax,eax
c001da72:	75 15                	jne    c001da89 <ATAPI::detectMedia()+0xb7>
c001da74:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da7b:	75 0c                	jne    c001da89 <ATAPI::detectMedia()+0xb7>
c001da7d:	83 ec 0c             	sub    esp,0xc
c001da80:	53                   	push   ebx
c001da81:	e8 40 ff ff ff       	call   c001d9c6 <ATAPI::diskInserted()>
c001da86:	83 c4 10             	add    esp,0x10
c001da89:	83 c4 24             	add    esp,0x24
c001da8c:	5b                   	pop    ebx
c001da8d:	5e                   	pop    esi
c001da8e:	c3                   	ret    
c001da8f:	90                   	nop

c001da90 <ATAPI::open(int, int, void*)>:
c001da90:	56                   	push   esi
c001da91:	53                   	push   ebx
c001da92:	50                   	push   eax
c001da93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da9f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001daa5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daab:	c1 e0 06             	shl    eax,0x6
c001daae:	01 d0                	add    eax,edx
c001dab0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dab7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dabd:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dac4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dace:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dad4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001dadb:	6a 04                	push   0x4
c001dadd:	6a 0c                	push   0xc
c001dadf:	51                   	push   ecx
c001dae0:	52                   	push   edx
c001dae1:	e8 46 e3 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dae6:	90                   	nop
c001dae7:	90                   	nop
c001dae8:	6a 00                	push   0x0
c001daea:	6a 0c                	push   0xc
c001daec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daf3:	50                   	push   eax
c001daf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dafa:	e8 2d e3 ff ff       	call   c001be2c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001daff:	83 c4 14             	add    esp,0x14
c001db02:	68 78 01 00 00       	push   0x178
c001db07:	e8 aa 9f fe ff       	call   c0007ab6 <malloc>
c001db0c:	83 c4 0c             	add    esp,0xc
c001db0f:	89 c6                	mov    esi,eax
c001db11:	6a 00                	push   0x0
c001db13:	68 ff ff ff 7f       	push   0x7fffffff
c001db18:	6a 00                	push   0x0
c001db1a:	6a 00                	push   0x0
c001db1c:	53                   	push   ebx
c001db1d:	68 6f 35 02 c0       	push   0xc002356f
c001db22:	50                   	push   eax
c001db23:	e8 e4 00 ff ff       	call   c000dc0c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db28:	83 c4 14             	add    esp,0x14
c001db2b:	56                   	push   esi
c001db2c:	e8 9b 01 ff ff       	call   c000dccc <LogicalDisk::assignDriveLetter()>
c001db31:	5a                   	pop    edx
c001db32:	0f be c0             	movsx  eax,al
c001db35:	59                   	pop    ecx
c001db36:	50                   	push   eax
c001db37:	68 c0 33 02 c0       	push   0xc00233c0
c001db3c:	e8 04 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001db41:	58                   	pop    eax
c001db42:	5a                   	pop    edx
c001db43:	56                   	push   esi
c001db44:	53                   	push   ebx
c001db45:	e8 1c ef fe ff       	call   c000ca66 <Device::addChild(Device*)>
c001db4a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001db50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db53:	e8 42 f3 fe ff       	call   c000ce9a <PhysicalDisk::startCache()>
c001db58:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001db5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db62:	e8 6b fe ff ff       	call   c001d9d2 <ATAPI::detectMedia()>
c001db67:	83 c4 14             	add    esp,0x14
c001db6a:	31 c0                	xor    eax,eax
c001db6c:	5b                   	pop    ebx
c001db6d:	5e                   	pop    esi
c001db6e:	c3                   	ret    
c001db6f:	90                   	nop

c001db70 <ATAPI::read(unsigned long long, int, void*)>:
c001db70:	55                   	push   ebp
c001db71:	57                   	push   edi
c001db72:	56                   	push   esi
c001db73:	53                   	push   ebx
c001db74:	83 ec 1c             	sub    esp,0x1c
c001db77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db7b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001db7f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db83:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db8a:	74 3c                	je     c001dbc8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001db8c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001db90:	b9 03 00 00 00       	mov    ecx,0x3
c001db95:	fc                   	cld    
c001db96:	31 c0                	xor    eax,eax
c001db98:	0f ce                	bswap  esi
c001db9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db9c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dba1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dba5:	89 e8                	mov    eax,ebp
c001dba7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dbab:	50                   	push   eax
c001dbac:	50                   	push   eax
c001dbad:	55                   	push   ebp
c001dbae:	c1 e5 0b             	shl    ebp,0xb
c001dbb1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbb5:	6a 00                	push   0x0
c001dbb7:	55                   	push   ebp
c001dbb8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dbbc:	50                   	push   eax
c001dbbd:	53                   	push   ebx
c001dbbe:	e8 b9 fa ff ff       	call   c001d67c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dbc3:	83 c4 20             	add    esp,0x20
c001dbc6:	eb 1a                	jmp    c001dbe2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	53                   	push   ebx
c001dbcc:	e8 01 fe ff ff       	call   c001d9d2 <ATAPI::detectMedia()>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbdb:	75 af                	jne    c001db8c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dbdd:	b8 02 00 00 00       	mov    eax,0x2
c001dbe2:	83 c4 1c             	add    esp,0x1c
c001dbe5:	5b                   	pop    ebx
c001dbe6:	5e                   	pop    esi
c001dbe7:	5f                   	pop    edi
c001dbe8:	5d                   	pop    ebp
c001dbe9:	c3                   	ret    

c001dbea <SATA::close(int, int, void*)>:
c001dbea:	83 ec 0c             	sub    esp,0xc
c001dbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dbf7:	85 c0                	test   eax,eax
c001dbf9:	74 0c                	je     c001dc07 <SATA::close(int, int, void*)+0x1d>
c001dbfb:	83 ec 0c             	sub    esp,0xc
c001dbfe:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc00:	50                   	push   eax
c001dc01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	31 c0                	xor    eax,eax
c001dc09:	83 c4 0c             	add    esp,0xc
c001dc0c:	c3                   	ret    
c001dc0d:	90                   	nop

c001dc0e <SATA::powerSaving(PowerSavingLevel)>:
c001dc0e:	c3                   	ret    
c001dc0f:	90                   	nop

c001dc10 <SATA::open(int, int, void*)>:
c001dc10:	56                   	push   esi
c001dc11:	53                   	push   ebx
c001dc12:	50                   	push   eax
c001dc13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc1b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc25:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc2b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dc35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dc49:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc50:	e8 6a a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc55:	89 c6                	mov    esi,eax
c001dc57:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dc5d:	81 c6 00 10 00 00    	add    esi,0x1000
c001dc63:	e8 57 a1 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001dc68:	39 c6                	cmp    esi,eax
c001dc6a:	74 10                	je     c001dc7c <SATA::open(int, int, void*)+0x6c>
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	68 08 34 02 c0       	push   0xc0023408
c001dc74:	e8 46 3a ff ff       	call   c00116bf <KePanic(char const*)>
c001dc79:	83 c4 10             	add    esp,0x10
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	6a 02                	push   0x2
c001dc81:	e8 87 b9 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dc86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc8c:	6a 03                	push   0x3
c001dc8e:	50                   	push   eax
c001dc8f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dc95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dc9b:	e8 80 c0 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dca0:	83 c4 14             	add    esp,0x14
c001dca3:	53                   	push   ebx
c001dca4:	e8 f1 f1 fe ff       	call   c000ce9a <PhysicalDisk::startCache()>
c001dca9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dcac:	e8 2d 04 ff ff       	call   c000e0de <createPartitionsForDisk(PhysicalDisk*)>
c001dcb1:	83 c4 14             	add    esp,0x14
c001dcb4:	31 c0                	xor    eax,eax
c001dcb6:	5b                   	pop    ebx
c001dcb7:	5e                   	pop    esi
c001dcb8:	c3                   	ret    
c001dcb9:	90                   	nop

c001dcba <SATA::SATA()>:
c001dcba:	83 ec 0c             	sub    esp,0xc
c001dcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc1:	83 ec 04             	sub    esp,0x4
c001dcc4:	68 00 02 00 00       	push   0x200
c001dcc9:	68 1c 34 02 c0       	push   0xc002341c
c001dcce:	50                   	push   eax
c001dccf:	e8 5e f1 fe ff       	call   c000ce32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcd4:	83 c4 10             	add    esp,0x10
c001dcd7:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c001dcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce0:	89 10                	mov    DWORD PTR [eax],edx
c001dce2:	90                   	nop
c001dce3:	83 c4 0c             	add    esp,0xc
c001dce6:	c3                   	ret    
c001dce7:	90                   	nop

c001dce8 <SATA::access(unsigned long long, int, void*, bool)>:
c001dce8:	55                   	push   ebp
c001dce9:	57                   	push   edi
c001dcea:	56                   	push   esi
c001dceb:	53                   	push   ebx
c001dcec:	83 ec 2c             	sub    esp,0x2c
c001dcef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcf3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dcf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dcfb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dcff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd03:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd0c:	7e 10                	jle    c001dd1e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dd0e:	83 ec 0c             	sub    esp,0xc
c001dd11:	68 2c 34 02 c0       	push   0xc002342c
c001dd16:	e8 a4 39 ff ff       	call   c00116bf <KePanic(char const*)>
c001dd1b:	83 c4 10             	add    esp,0x10
c001dd1e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dd24:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd34:	89 d0                	mov    eax,edx
c001dd36:	c1 e0 07             	shl    eax,0x7
c001dd39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd3d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dd47:	51                   	push   ecx
c001dd48:	8d 42 02             	lea    eax,[edx+0x2]
c001dd4b:	51                   	push   ecx
c001dd4c:	c1 e0 07             	shl    eax,0x7
c001dd4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd57:	50                   	push   eax
c001dd58:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dd5e:	e8 91 ec ff ff       	call   c001c9f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dd63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dd6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd73:	0f 84 57 01 00 00    	je     c001ded0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dd79:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd7d:	c1 e0 09             	shl    eax,0x9
c001dd80:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd89:	74 0e                	je     c001dd99 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dd8b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dd91:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dd95:	89 c1                	mov    ecx,eax
c001dd97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd99:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd9f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dda3:	8d 42 02             	lea    eax,[edx+0x2]
c001dda6:	c1 e0 07             	shl    eax,0x7
c001dda9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ddad:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddaf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ddb5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ddbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddbf:	c1 e1 05             	shl    ecx,0x5
c001ddc2:	01 c8                	add    eax,ecx
c001ddc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddc8:	83 e1 01             	and    ecx,0x1
c001ddcb:	89 ce                	mov    esi,ecx
c001ddcd:	8a 08                	mov    cl,BYTE PTR [eax]
c001ddcf:	c1 e6 06             	shl    esi,0x6
c001ddd2:	83 e1 bf             	and    ecx,0xffffffbf
c001ddd5:	09 f1                	or     ecx,esi
c001ddd7:	88 08                	mov    BYTE PTR [eax],cl
c001ddd9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dddb:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dde1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dde7:	89 08                	mov    DWORD PTR [eax],ecx
c001dde9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ddef:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ddf5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ddfb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ddfe:	50                   	push   eax
c001ddff:	68 90 00 00 00       	push   0x90
c001de04:	6a 00                	push   0x0
c001de06:	56                   	push   esi
c001de07:	e8 e4 26 fe ff       	call   c00004f0 <memset>
c001de0c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de12:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de1c:	83 c4 10             	add    esp,0x10
c001de1f:	48                   	dec    eax
c001de20:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de25:	89 c1                	mov    ecx,eax
c001de27:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de2d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de32:	09 c8                	or     eax,ecx
c001de34:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001de3a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001de40:	83 c8 80             	or     eax,0xffffff80
c001de43:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001de49:	66 8b 06             	mov    ax,WORD PTR [esi]
c001de4c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de50:	25 00 7f 00 00       	and    eax,0x7f00
c001de55:	0d 27 80 ff ff       	or     eax,0xffff8027
c001de5a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de5f:	66 89 06             	mov    WORD PTR [esi],ax
c001de62:	b0 35                	mov    al,0x35
c001de64:	75 02                	jne    c001de68 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001de66:	b0 25                	mov    al,0x25
c001de68:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001de6b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001de6f:	89 e8                	mov    eax,ebp
c001de71:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001de75:	c1 e8 10             	shr    eax,0x10
c001de78:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001de7b:	89 e8                	mov    eax,ebp
c001de7d:	c1 e8 18             	shr    eax,0x18
c001de80:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001de83:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001de87:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001de8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de8e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001de91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001de95:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001de99:	89 d6                	mov    esi,edx
c001de9b:	31 c0                	xor    eax,eax
c001de9d:	c1 e6 07             	shl    esi,0x7
c001dea0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001dea4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001deaa:	80 e1 88             	and    cl,0x88
c001dead:	74 0a                	je     c001deb9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001deaf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001deb4:	74 0a                	je     c001dec0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001deb6:	40                   	inc    eax
c001deb7:	eb eb                	jmp    c001dea4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001deb9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001debe:	75 17                	jne    c001ded7 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dec0:	83 ec 0c             	sub    esp,0xc
c001dec3:	68 65 34 02 c0       	push   0xc0023465
c001dec8:	e8 78 ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	b8 01 00 00 00       	mov    eax,0x1
c001ded5:	eb 5d                	jmp    c001df34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ded7:	b8 01 00 00 00       	mov    eax,0x1
c001dedc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001dee0:	c1 e2 07             	shl    edx,0x7
c001dee3:	d3 e0                	shl    eax,cl
c001dee5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001dee9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001deef:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001def5:	85 c8                	test   eax,ecx
c001def7:	74 16                	je     c001df0f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001def9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001deff:	0f ba e1 1e          	bt     ecx,0x1e
c001df03:	73 ea                	jae    c001deef <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001df05:	83 ec 0c             	sub    esp,0xc
c001df08:	68 73 34 02 c0       	push   0xc0023473
c001df0d:	eb b9                	jmp    c001dec8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df0f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df15:	0f ba e0 1e          	bt     eax,0x1e
c001df19:	72 b5                	jb     c001ded0 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df1b:	31 c0                	xor    eax,eax
c001df1d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001df22:	75 10                	jne    c001df34 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001df24:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df2a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df34:	83 c4 2c             	add    esp,0x2c
c001df37:	5b                   	pop    ebx
c001df38:	5e                   	pop    esi
c001df39:	5f                   	pop    edi
c001df3a:	5d                   	pop    ebp
c001df3b:	c3                   	ret    

c001df3c <SATA::read(unsigned long long, int, void*)>:
c001df3c:	55                   	push   ebp
c001df3d:	57                   	push   edi
c001df3e:	56                   	push   esi
c001df3f:	be 04 00 00 00       	mov    esi,0x4
c001df44:	53                   	push   ebx
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001df4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df50:	8d 7b ff             	lea    edi,[ebx-0x1]
c001df53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001df5b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001df61:	0f 87 1a 02 00 00    	ja     c001e181 <SATA::read(unsigned long long, int, void*)+0x245>
c001df67:	be 06 00 00 00       	mov    esi,0x6
c001df6c:	85 c9                	test   ecx,ecx
c001df6e:	0f 84 0d 02 00 00    	je     c001e181 <SATA::read(unsigned long long, int, void*)+0x245>
c001df74:	56                   	push   esi
c001df75:	56                   	push   esi
c001df76:	6a 00                	push   0x0
c001df78:	51                   	push   ecx
c001df79:	53                   	push   ebx
c001df7a:	52                   	push   edx
c001df7b:	50                   	push   eax
c001df7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df80:	e8 63 fd ff ff       	call   c001dce8 <SATA::access(unsigned long long, int, void*, bool)>
c001df85:	83 c4 20             	add    esp,0x20
c001df88:	89 c6                	mov    esi,eax
c001df8a:	85 c0                	test   eax,eax
c001df8c:	0f 85 ea 01 00 00    	jne    c001e17c <SATA::read(unsigned long long, int, void*)+0x240>
c001df92:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001df98:	bb 0a 00 00 00       	mov    ebx,0xa
c001df9d:	50                   	push   eax
c001df9e:	50                   	push   eax
c001df9f:	6a 0f                	push   0xf
c001dfa1:	6a 00                	push   0x0
c001dfa3:	e8 75 f2 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001dfa8:	5a                   	pop    edx
c001dfa9:	0f b6 c0             	movzx  eax,al
c001dfac:	59                   	pop    ecx
c001dfad:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfb2:	50                   	push   eax
c001dfb3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfb8:	99                   	cdq    
c001dfb9:	f7 f9                	idiv   ecx
c001dfbb:	99                   	cdq    
c001dfbc:	f7 fb                	idiv   ebx
c001dfbe:	8d 42 30             	lea    eax,[edx+0x30]
c001dfc1:	0f b6 c0             	movzx  eax,al
c001dfc4:	50                   	push   eax
c001dfc5:	e8 42 f2 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001dfca:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dfd0:	5f                   	pop    edi
c001dfd1:	5d                   	pop    ebp
c001dfd2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dfd7:	6a 0f                	push   0xf
c001dfd9:	6a 00                	push   0x0
c001dfdb:	e8 3d f2 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001dfe0:	5a                   	pop    edx
c001dfe1:	0f b6 c0             	movzx  eax,al
c001dfe4:	59                   	pop    ecx
c001dfe5:	50                   	push   eax
c001dfe6:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfeb:	99                   	cdq    
c001dfec:	f7 fd                	idiv   ebp
c001dfee:	99                   	cdq    
c001dfef:	f7 fb                	idiv   ebx
c001dff1:	8d 42 30             	lea    eax,[edx+0x30]
c001dff4:	0f b6 c0             	movzx  eax,al
c001dff7:	50                   	push   eax
c001dff8:	e8 0f f2 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001dffd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e003:	5f                   	pop    edi
c001e004:	bf 64 00 00 00       	mov    edi,0x64
c001e009:	58                   	pop    eax
c001e00a:	6a 0f                	push   0xf
c001e00c:	6a 00                	push   0x0
c001e00e:	e8 0a f2 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e013:	5a                   	pop    edx
c001e014:	0f b6 c0             	movzx  eax,al
c001e017:	59                   	pop    ecx
c001e018:	50                   	push   eax
c001e019:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e01e:	99                   	cdq    
c001e01f:	f7 ff                	idiv   edi
c001e021:	99                   	cdq    
c001e022:	f7 fb                	idiv   ebx
c001e024:	8d 42 30             	lea    eax,[edx+0x30]
c001e027:	0f b6 c0             	movzx  eax,al
c001e02a:	50                   	push   eax
c001e02b:	e8 dc f1 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e030:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e036:	58                   	pop    eax
c001e037:	5a                   	pop    edx
c001e038:	6a 0f                	push   0xf
c001e03a:	6a 00                	push   0x0
c001e03c:	e8 dc f1 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e041:	59                   	pop    ecx
c001e042:	0f b6 c0             	movzx  eax,al
c001e045:	5a                   	pop    edx
c001e046:	50                   	push   eax
c001e047:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e04c:	99                   	cdq    
c001e04d:	f7 fb                	idiv   ebx
c001e04f:	99                   	cdq    
c001e050:	f7 fb                	idiv   ebx
c001e052:	8d 42 30             	lea    eax,[edx+0x30]
c001e055:	0f b6 c0             	movzx  eax,al
c001e058:	50                   	push   eax
c001e059:	e8 ae f1 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e05e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e064:	59                   	pop    ecx
c001e065:	58                   	pop    eax
c001e066:	6a 0f                	push   0xf
c001e068:	6a 00                	push   0x0
c001e06a:	e8 ae f1 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e06f:	5a                   	pop    edx
c001e070:	0f b6 c0             	movzx  eax,al
c001e073:	59                   	pop    ecx
c001e074:	50                   	push   eax
c001e075:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e07a:	99                   	cdq    
c001e07b:	f7 fb                	idiv   ebx
c001e07d:	8d 42 30             	lea    eax,[edx+0x30]
c001e080:	0f b6 c0             	movzx  eax,al
c001e083:	50                   	push   eax
c001e084:	e8 83 f1 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e089:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e08f:	58                   	pop    eax
c001e090:	5a                   	pop    edx
c001e091:	6a 0f                	push   0xf
c001e093:	6a 00                	push   0x0
c001e095:	e8 83 f1 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e09a:	59                   	pop    ecx
c001e09b:	0f b6 c0             	movzx  eax,al
c001e09e:	5a                   	pop    edx
c001e09f:	b9 10 27 00 00       	mov    ecx,0x2710
c001e0a4:	50                   	push   eax
c001e0a5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0aa:	99                   	cdq    
c001e0ab:	f7 f9                	idiv   ecx
c001e0ad:	99                   	cdq    
c001e0ae:	f7 fb                	idiv   ebx
c001e0b0:	8d 42 30             	lea    eax,[edx+0x30]
c001e0b3:	0f b6 c0             	movzx  eax,al
c001e0b6:	50                   	push   eax
c001e0b7:	e8 50 f1 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e0bc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e0c2:	59                   	pop    ecx
c001e0c3:	58                   	pop    eax
c001e0c4:	6a 0f                	push   0xf
c001e0c6:	6a 00                	push   0x0
c001e0c8:	e8 50 f1 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e0cd:	5a                   	pop    edx
c001e0ce:	0f b6 c0             	movzx  eax,al
c001e0d1:	59                   	pop    ecx
c001e0d2:	50                   	push   eax
c001e0d3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e0d8:	99                   	cdq    
c001e0d9:	f7 fd                	idiv   ebp
c001e0db:	99                   	cdq    
c001e0dc:	f7 fb                	idiv   ebx
c001e0de:	8d 42 30             	lea    eax,[edx+0x30]
c001e0e1:	0f b6 c0             	movzx  eax,al
c001e0e4:	50                   	push   eax
c001e0e5:	e8 22 f1 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e0ea:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e0f0:	5d                   	pop    ebp
c001e0f1:	58                   	pop    eax
c001e0f2:	6a 0f                	push   0xf
c001e0f4:	6a 00                	push   0x0
c001e0f6:	e8 22 f1 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e0fb:	5a                   	pop    edx
c001e0fc:	0f b6 c0             	movzx  eax,al
c001e0ff:	59                   	pop    ecx
c001e100:	50                   	push   eax
c001e101:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e106:	99                   	cdq    
c001e107:	f7 ff                	idiv   edi
c001e109:	99                   	cdq    
c001e10a:	f7 fb                	idiv   ebx
c001e10c:	8d 42 30             	lea    eax,[edx+0x30]
c001e10f:	0f b6 c0             	movzx  eax,al
c001e112:	50                   	push   eax
c001e113:	e8 f4 f0 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e118:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e11e:	5f                   	pop    edi
c001e11f:	5d                   	pop    ebp
c001e120:	6a 0f                	push   0xf
c001e122:	6a 00                	push   0x0
c001e124:	e8 f4 f0 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e129:	5a                   	pop    edx
c001e12a:	0f b6 c0             	movzx  eax,al
c001e12d:	59                   	pop    ecx
c001e12e:	50                   	push   eax
c001e12f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e134:	99                   	cdq    
c001e135:	f7 fb                	idiv   ebx
c001e137:	99                   	cdq    
c001e138:	f7 fb                	idiv   ebx
c001e13a:	8d 42 30             	lea    eax,[edx+0x30]
c001e13d:	0f b6 c0             	movzx  eax,al
c001e140:	50                   	push   eax
c001e141:	e8 c6 f0 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e146:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e14c:	5f                   	pop    edi
c001e14d:	5d                   	pop    ebp
c001e14e:	6a 0f                	push   0xf
c001e150:	6a 00                	push   0x0
c001e152:	e8 c6 f0 ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e157:	5a                   	pop    edx
c001e158:	0f b6 c0             	movzx  eax,al
c001e15b:	59                   	pop    ecx
c001e15c:	50                   	push   eax
c001e15d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e162:	99                   	cdq    
c001e163:	f7 fb                	idiv   ebx
c001e165:	83 c2 30             	add    edx,0x30
c001e168:	0f b6 d2             	movzx  edx,dl
c001e16b:	52                   	push   edx
c001e16c:	e8 9b f0 ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e17a:	eb 05                	jmp    c001e181 <SATA::read(unsigned long long, int, void*)+0x245>
c001e17c:	be 01 00 00 00       	mov    esi,0x1
c001e181:	83 c4 0c             	add    esp,0xc
c001e184:	89 f0                	mov    eax,esi
c001e186:	5b                   	pop    ebx
c001e187:	5e                   	pop    esi
c001e188:	5f                   	pop    edi
c001e189:	5d                   	pop    ebp
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <SATA::write(unsigned long long, int, void*)>:
c001e18c:	55                   	push   ebp
c001e18d:	b8 04 00 00 00       	mov    eax,0x4
c001e192:	57                   	push   edi
c001e193:	56                   	push   esi
c001e194:	53                   	push   ebx
c001e195:	83 ec 1c             	sub    esp,0x1c
c001e198:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e19c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1a0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e1a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e1a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e1ab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e1b1:	0f 87 32 02 00 00    	ja     c001e3e9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1b7:	b8 06 00 00 00       	mov    eax,0x6
c001e1bc:	85 ff                	test   edi,edi
c001e1be:	0f 84 25 02 00 00    	je     c001e3e9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e1c4:	89 ee                	mov    esi,ebp
c001e1c6:	c1 e6 09             	shl    esi,0x9
c001e1c9:	01 fe                	add    esi,edi
c001e1cb:	89 c8                	mov    eax,ecx
c001e1cd:	89 da                	mov    edx,ebx
c001e1cf:	83 c0 01             	add    eax,0x1
c001e1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e1d6:	83 d2 00             	adc    edx,0x0
c001e1d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1dd:	50                   	push   eax
c001e1de:	50                   	push   eax
c001e1df:	6a 01                	push   0x1
c001e1e1:	57                   	push   edi
c001e1e2:	81 c7 00 02 00 00    	add    edi,0x200
c001e1e8:	6a 01                	push   0x1
c001e1ea:	53                   	push   ebx
c001e1eb:	51                   	push   ecx
c001e1ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e1f0:	e8 f3 fa ff ff       	call   c001dce8 <SATA::access(unsigned long long, int, void*, bool)>
c001e1f5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e1fd:	83 c4 20             	add    esp,0x20
c001e200:	39 f7                	cmp    edi,esi
c001e202:	75 c7                	jne    c001e1cb <SATA::write(unsigned long long, int, void*)+0x3f>
c001e204:	bb 0a 00 00 00       	mov    ebx,0xa
c001e209:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e20f:	bd 10 27 00 00       	mov    ebp,0x2710
c001e214:	50                   	push   eax
c001e215:	50                   	push   eax
c001e216:	6a 0f                	push   0xf
c001e218:	6a 00                	push   0x0
c001e21a:	e8 fe ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e21f:	5a                   	pop    edx
c001e220:	0f b6 c0             	movzx  eax,al
c001e223:	59                   	pop    ecx
c001e224:	50                   	push   eax
c001e225:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e22a:	99                   	cdq    
c001e22b:	f7 fd                	idiv   ebp
c001e22d:	99                   	cdq    
c001e22e:	f7 fb                	idiv   ebx
c001e230:	8d 42 30             	lea    eax,[edx+0x30]
c001e233:	0f b6 c0             	movzx  eax,al
c001e236:	50                   	push   eax
c001e237:	e8 d0 ef ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e23c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e242:	5e                   	pop    esi
c001e243:	5f                   	pop    edi
c001e244:	bf e8 03 00 00       	mov    edi,0x3e8
c001e249:	6a 0f                	push   0xf
c001e24b:	6a 00                	push   0x0
c001e24d:	e8 cb ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e252:	5a                   	pop    edx
c001e253:	0f b6 c0             	movzx  eax,al
c001e256:	59                   	pop    ecx
c001e257:	50                   	push   eax
c001e258:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e25d:	99                   	cdq    
c001e25e:	f7 ff                	idiv   edi
c001e260:	99                   	cdq    
c001e261:	f7 fb                	idiv   ebx
c001e263:	8d 42 30             	lea    eax,[edx+0x30]
c001e266:	0f b6 c0             	movzx  eax,al
c001e269:	50                   	push   eax
c001e26a:	e8 9d ef ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e26f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e275:	5e                   	pop    esi
c001e276:	be 64 00 00 00       	mov    esi,0x64
c001e27b:	58                   	pop    eax
c001e27c:	6a 0f                	push   0xf
c001e27e:	6a 00                	push   0x0
c001e280:	e8 98 ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e285:	5a                   	pop    edx
c001e286:	0f b6 c0             	movzx  eax,al
c001e289:	59                   	pop    ecx
c001e28a:	50                   	push   eax
c001e28b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e290:	99                   	cdq    
c001e291:	f7 fe                	idiv   esi
c001e293:	99                   	cdq    
c001e294:	f7 fb                	idiv   ebx
c001e296:	8d 42 30             	lea    eax,[edx+0x30]
c001e299:	0f b6 c0             	movzx  eax,al
c001e29c:	50                   	push   eax
c001e29d:	e8 6a ef ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e2a2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e2a8:	58                   	pop    eax
c001e2a9:	5a                   	pop    edx
c001e2aa:	6a 0f                	push   0xf
c001e2ac:	6a 00                	push   0x0
c001e2ae:	e8 6a ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e2b3:	59                   	pop    ecx
c001e2b4:	0f b6 c0             	movzx  eax,al
c001e2b7:	5a                   	pop    edx
c001e2b8:	50                   	push   eax
c001e2b9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2be:	99                   	cdq    
c001e2bf:	f7 fb                	idiv   ebx
c001e2c1:	99                   	cdq    
c001e2c2:	f7 fb                	idiv   ebx
c001e2c4:	8d 42 30             	lea    eax,[edx+0x30]
c001e2c7:	0f b6 c0             	movzx  eax,al
c001e2ca:	50                   	push   eax
c001e2cb:	e8 3c ef ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e2d0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e2d6:	59                   	pop    ecx
c001e2d7:	58                   	pop    eax
c001e2d8:	6a 0f                	push   0xf
c001e2da:	6a 00                	push   0x0
c001e2dc:	e8 3c ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e2e1:	5a                   	pop    edx
c001e2e2:	0f b6 c0             	movzx  eax,al
c001e2e5:	59                   	pop    ecx
c001e2e6:	50                   	push   eax
c001e2e7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2ec:	99                   	cdq    
c001e2ed:	f7 fb                	idiv   ebx
c001e2ef:	83 c2 30             	add    edx,0x30
c001e2f2:	0f b6 d2             	movzx  edx,dl
c001e2f5:	52                   	push   edx
c001e2f6:	e8 11 ef ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e2fb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e301:	58                   	pop    eax
c001e302:	5a                   	pop    edx
c001e303:	6a 0f                	push   0xf
c001e305:	6a 00                	push   0x0
c001e307:	e8 11 ef ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e30c:	59                   	pop    ecx
c001e30d:	0f b6 c0             	movzx  eax,al
c001e310:	5a                   	pop    edx
c001e311:	50                   	push   eax
c001e312:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e317:	99                   	cdq    
c001e318:	f7 fd                	idiv   ebp
c001e31a:	99                   	cdq    
c001e31b:	f7 fb                	idiv   ebx
c001e31d:	8d 42 30             	lea    eax,[edx+0x30]
c001e320:	0f b6 c0             	movzx  eax,al
c001e323:	50                   	push   eax
c001e324:	e8 e3 ee ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e329:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e32f:	59                   	pop    ecx
c001e330:	5d                   	pop    ebp
c001e331:	6a 0f                	push   0xf
c001e333:	6a 00                	push   0x0
c001e335:	e8 e3 ee ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e33a:	5a                   	pop    edx
c001e33b:	0f b6 c0             	movzx  eax,al
c001e33e:	59                   	pop    ecx
c001e33f:	50                   	push   eax
c001e340:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e345:	99                   	cdq    
c001e346:	f7 ff                	idiv   edi
c001e348:	99                   	cdq    
c001e349:	f7 fb                	idiv   ebx
c001e34b:	8d 42 30             	lea    eax,[edx+0x30]
c001e34e:	0f b6 c0             	movzx  eax,al
c001e351:	50                   	push   eax
c001e352:	e8 b5 ee ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e357:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e35d:	5f                   	pop    edi
c001e35e:	5d                   	pop    ebp
c001e35f:	6a 0f                	push   0xf
c001e361:	6a 00                	push   0x0
c001e363:	e8 b5 ee ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e368:	5a                   	pop    edx
c001e369:	0f b6 c0             	movzx  eax,al
c001e36c:	59                   	pop    ecx
c001e36d:	50                   	push   eax
c001e36e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e373:	99                   	cdq    
c001e374:	f7 fe                	idiv   esi
c001e376:	99                   	cdq    
c001e377:	f7 fb                	idiv   ebx
c001e379:	8d 42 30             	lea    eax,[edx+0x30]
c001e37c:	0f b6 c0             	movzx  eax,al
c001e37f:	50                   	push   eax
c001e380:	e8 87 ee ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e385:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e38b:	5e                   	pop    esi
c001e38c:	5f                   	pop    edi
c001e38d:	6a 0f                	push   0xf
c001e38f:	6a 00                	push   0x0
c001e391:	e8 87 ee ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e396:	5d                   	pop    ebp
c001e397:	0f b6 c0             	movzx  eax,al
c001e39a:	5a                   	pop    edx
c001e39b:	50                   	push   eax
c001e39c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3a1:	99                   	cdq    
c001e3a2:	f7 fb                	idiv   ebx
c001e3a4:	99                   	cdq    
c001e3a5:	f7 fb                	idiv   ebx
c001e3a7:	8d 42 30             	lea    eax,[edx+0x30]
c001e3aa:	0f b6 c0             	movzx  eax,al
c001e3ad:	50                   	push   eax
c001e3ae:	e8 59 ee ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e3b3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e3b9:	59                   	pop    ecx
c001e3ba:	5e                   	pop    esi
c001e3bb:	6a 0f                	push   0xf
c001e3bd:	6a 00                	push   0x0
c001e3bf:	e8 59 ee ff ff       	call   c001d21d <combineColours(unsigned char, unsigned char)>
c001e3c4:	5f                   	pop    edi
c001e3c5:	0f b6 c0             	movzx  eax,al
c001e3c8:	5d                   	pop    ebp
c001e3c9:	50                   	push   eax
c001e3ca:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3cf:	99                   	cdq    
c001e3d0:	f7 fb                	idiv   ebx
c001e3d2:	83 c2 30             	add    edx,0x30
c001e3d5:	0f b6 d2             	movzx  edx,dl
c001e3d8:	52                   	push   edx
c001e3d9:	e8 2e ee ff ff       	call   c001d20c <combineCharAndColour(char, unsigned char)>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e3e7:	31 c0                	xor    eax,eax
c001e3e9:	83 c4 1c             	add    esp,0x1c
c001e3ec:	5b                   	pop    ebx
c001e3ed:	5e                   	pop    esi
c001e3ee:	5f                   	pop    edi
c001e3ef:	5d                   	pop    ebp
c001e3f0:	c3                   	ret    
c001e3f1:	90                   	nop

c001e3f2 <SATAPI::write(unsigned long long, int, void*)>:
c001e3f2:	b8 03 00 00 00       	mov    eax,0x3
c001e3f7:	c3                   	ret    

c001e3f8 <SATAPI::close(int, int, void*)>:
c001e3f8:	83 ec 0c             	sub    esp,0xc
c001e3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e405:	85 c0                	test   eax,eax
c001e407:	74 0c                	je     c001e415 <SATAPI::close(int, int, void*)+0x1d>
c001e409:	83 ec 0c             	sub    esp,0xc
c001e40c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e40e:	50                   	push   eax
c001e40f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e412:	83 c4 10             	add    esp,0x10
c001e415:	31 c0                	xor    eax,eax
c001e417:	83 c4 0c             	add    esp,0xc
c001e41a:	c3                   	ret    
c001e41b:	90                   	nop

c001e41c <SATAPI::SATAPI()>:
c001e41c:	83 ec 0c             	sub    esp,0xc
c001e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e423:	83 ec 04             	sub    esp,0x4
c001e426:	68 00 08 00 00       	push   0x800
c001e42b:	68 bc 34 02 c0       	push   0xc00234bc
c001e430:	50                   	push   eax
c001e431:	e8 fc e9 fe ff       	call   c000ce32 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c001e43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e442:	89 10                	mov    DWORD PTR [eax],edx
c001e444:	90                   	nop
c001e445:	83 c4 0c             	add    esp,0xc
c001e448:	c3                   	ret    
c001e449:	90                   	nop

c001e44a <SATAPI::diskRemoved()>:
c001e44a:	c3                   	ret    
c001e44b:	90                   	nop

c001e44c <SATAPI::diskInserted()>:
c001e44c:	83 ec 18             	sub    esp,0x18
c001e44f:	68 c8 34 02 c0       	push   0xc00234c8
c001e454:	e8 ec c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e45d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e464:	83 c4 1c             	add    esp,0x1c
c001e467:	c3                   	ret    

c001e468 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e468:	55                   	push   ebp
c001e469:	57                   	push   edi
c001e46a:	56                   	push   esi
c001e46b:	53                   	push   ebx
c001e46c:	83 ec 34             	sub    esp,0x34
c001e46f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e473:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e477:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e47b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e47f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e483:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e489:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e48f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e493:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e499:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e49d:	83 c0 02             	add    eax,0x2
c001e4a0:	c1 e0 07             	shl    eax,0x7
c001e4a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4af:	c1 e0 07             	shl    eax,0x7
c001e4b2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e4b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4ba:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e4c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4c8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4ce:	e8 21 e5 ff ff       	call   c001c9f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e4d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4d7:	83 c4 10             	add    esp,0x10
c001e4da:	b8 01 00 00 00       	mov    eax,0x1
c001e4df:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e4e4:	0f 84 53 02 00 00    	je     c001e73d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e4ea:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4f6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4fc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e502:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e506:	c1 e1 05             	shl    ecx,0x5
c001e509:	01 c8                	add    eax,ecx
c001e50b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e50d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e513:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e519:	89 08                	mov    DWORD PTR [eax],ecx
c001e51b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e521:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e527:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e52d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e530:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e533:	50                   	push   eax
c001e534:	68 90 00 00 00       	push   0x90
c001e539:	6a 00                	push   0x0
c001e53b:	53                   	push   ebx
c001e53c:	e8 af 1f fe ff       	call   c00004f0 <memset>
c001e541:	b9 0c 00 00 00       	mov    ecx,0xc
c001e546:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e54a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e54c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e552:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e556:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e55c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e560:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e564:	48                   	dec    eax
c001e565:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e56a:	89 c1                	mov    ecx,eax
c001e56c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e572:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e577:	09 c8                	or     eax,ecx
c001e579:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e57f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e585:	83 c8 80             	or     eax,0xffffff80
c001e588:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e58e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e591:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e595:	25 00 7f 00 00       	and    eax,0x7f00
c001e59a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e59e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5a3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e5a6:	89 d0                	mov    eax,edx
c001e5a8:	c1 ea 18             	shr    edx,0x18
c001e5ab:	c1 e8 10             	shr    eax,0x10
c001e5ae:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e5b1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e5b4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e5b8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5bf:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e5c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e5c6:	83 c4 10             	add    esp,0x10
c001e5c9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e5cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5d1:	31 c0                	xor    eax,eax
c001e5d3:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e5d9:	80 e1 88             	and    cl,0x88
c001e5dc:	74 0a                	je     c001e5e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e5de:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5e3:	74 0a                	je     c001e5ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e5e5:	40                   	inc    eax
c001e5e6:	eb eb                	jmp    c001e5d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e5e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5ed:	75 43                	jne    c001e632 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	68 e0 34 02 c0       	push   0xc00234e0
c001e5f7:	e8 49 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5fc:	58                   	pop    eax
c001e5fd:	5a                   	pop    edx
c001e5fe:	68 f5 34 02 c0       	push   0xc00234f5
c001e603:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e609:	e8 98 a4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e60e:	59                   	pop    ecx
c001e60f:	5b                   	pop    ebx
c001e610:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e614:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e61a:	e8 6f e4 ff ff       	call   c001ca8e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e61f:	5e                   	pop    esi
c001e620:	5f                   	pop    edi
c001e621:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e625:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e62b:	e8 3e e4 ff ff       	call   c001ca6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e630:	eb 48                	jmp    c001e67a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e632:	be 01 00 00 00       	mov    esi,0x1
c001e637:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e63b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e63f:	d3 e6                	shl    esi,cl
c001e641:	c1 e7 07             	shl    edi,0x7
c001e644:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e64a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e64f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e653:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e659:	85 c6                	test   esi,eax
c001e65b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e661:	0f 84 a3 00 00 00    	je     c001e70a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e667:	0f ba e0 1e          	bt     eax,0x1e
c001e66b:	73 1a                	jae    c001e687 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e66d:	83 ec 0c             	sub    esp,0xc
c001e670:	68 07 35 02 c0       	push   0xc0023507
c001e675:	e8 cb c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e67a:	83 c4 10             	add    esp,0x10
c001e67d:	b8 01 00 00 00       	mov    eax,0x1
c001e682:	e9 b6 00 00 00       	jmp    c001e73d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e687:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e68d:	83 f8 0d             	cmp    eax,0xd
c001e690:	77 0a                	ja     c001e69c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e692:	83 ec 0c             	sub    esp,0xc
c001e695:	68 c8 00 00 00       	push   0xc8
c001e69a:	eb 28                	jmp    c001e6c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e69c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e6a2:	83 f8 0d             	cmp    eax,0xd
c001e6a5:	77 0a                	ja     c001e6b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e6a7:	83 ec 0c             	sub    esp,0xc
c001e6aa:	68 58 02 00 00       	push   0x258
c001e6af:	eb 13                	jmp    c001e6c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e6b1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e6b7:	83 f8 06             	cmp    eax,0x6
c001e6ba:	77 10                	ja     c001e6cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 dc 05 00 00       	push   0x5dc
c001e6c4:	e8 c7 7d ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e6d0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e6d3:	75 06                	jne    c001e6db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e6d5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e6d9:	74 15                	je     c001e6f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6db:	83 fb 06             	cmp    ebx,0x6
c001e6de:	77 10                	ja     c001e6f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	68 c4 09 00 00       	push   0x9c4
c001e6e8:	e8 a3 7d ff ff       	call   c0016490 <milliTenthSleep(unsigned int)>
c001e6ed:	83 c4 10             	add    esp,0x10
c001e6f0:	43                   	inc    ebx
c001e6f1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e6f7:	0f 85 56 ff ff ff    	jne    c001e653 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e6fd:	83 ec 0c             	sub    esp,0xc
c001e700:	68 1a 35 02 c0       	push   0xc002351a
c001e705:	e9 6b ff ff ff       	jmp    c001e675 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e70a:	0f ba e0 1e          	bt     eax,0x1e
c001e70e:	73 0d                	jae    c001e71d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e710:	83 ec 0c             	sub    esp,0xc
c001e713:	68 2e 35 02 c0       	push   0xc002352e
c001e718:	e9 58 ff ff ff       	jmp    c001e675 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e71d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e722:	74 17                	je     c001e73b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e724:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e729:	74 10                	je     c001e73b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e72b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e731:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e735:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e739:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e73b:	31 c0                	xor    eax,eax
c001e73d:	83 c4 2c             	add    esp,0x2c
c001e740:	5b                   	pop    ebx
c001e741:	5e                   	pop    esi
c001e742:	5f                   	pop    edi
c001e743:	5d                   	pop    ebp
c001e744:	c3                   	ret    
c001e745:	90                   	nop

c001e746 <SATAPI::eject()>:
c001e746:	57                   	push   edi
c001e747:	b9 03 00 00 00       	mov    ecx,0x3
c001e74c:	83 ec 18             	sub    esp,0x18
c001e74f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e753:	fc                   	cld    
c001e754:	31 c0                	xor    eax,eax
c001e756:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e758:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e75d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e762:	50                   	push   eax
c001e763:	6a 00                	push   0x0
c001e765:	6a 00                	push   0x0
c001e767:	6a 00                	push   0x0
c001e769:	6a 00                	push   0x0
c001e76b:	6a 02                	push   0x2
c001e76d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e771:	50                   	push   eax
c001e772:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e776:	e8 ed fc ff ff       	call   c001e468 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e77b:	31 c0                	xor    eax,eax
c001e77d:	83 c4 38             	add    esp,0x38
c001e780:	5f                   	pop    edi
c001e781:	c3                   	ret    

c001e782 <SATAPI::detectMedia()>:
c001e782:	53                   	push   ebx
c001e783:	83 ec 14             	sub    esp,0x14
c001e786:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e78a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e790:	e8 1b 00 ff ff       	call   c000e7b0 <VCache::writeWriteBuffer()>
c001e795:	59                   	pop    ecx
c001e796:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e79c:	e8 ff ff fe ff       	call   c000e7a0 <VCache::invalidateReadBuffer()>
c001e7a1:	c7 04 24 43 35 02 c0 	mov    DWORD PTR [esp],0xc0023543
c001e7a8:	e8 98 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e7ad:	83 c4 10             	add    esp,0x10
c001e7b0:	31 c0                	xor    eax,eax
c001e7b2:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e7b9:	85 d2                	test   edx,edx
c001e7bb:	74 0f                	je     c001e7cc <SATAPI::detectMedia()+0x4a>
c001e7bd:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e7c3:	75 07                	jne    c001e7cc <SATAPI::detectMedia()+0x4a>
c001e7c5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e7cc:	40                   	inc    eax
c001e7cd:	83 f8 1a             	cmp    eax,0x1a
c001e7d0:	75 e0                	jne    c001e7b2 <SATAPI::detectMedia()+0x30>
c001e7d2:	83 c4 08             	add    esp,0x8
c001e7d5:	5b                   	pop    ebx
c001e7d6:	c3                   	ret    
c001e7d7:	90                   	nop

c001e7d8 <SATAPI::open(int, int, void*)>:
c001e7d8:	56                   	push   esi
c001e7d9:	53                   	push   ebx
c001e7da:	51                   	push   ecx
c001e7db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7e3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e7ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e7f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e7fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e801:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e80b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e811:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e818:	e8 a2 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e81d:	89 c6                	mov    esi,eax
c001e81f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e825:	81 c6 00 10 00 00    	add    esi,0x1000
c001e82b:	e8 8f 95 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e830:	39 c6                	cmp    esi,eax
c001e832:	74 10                	je     c001e844 <SATAPI::open(int, int, void*)+0x6c>
c001e834:	83 ec 0c             	sub    esp,0xc
c001e837:	68 58 35 02 c0       	push   0xc0023558
c001e83c:	e8 7e 2e ff ff       	call   c00116bf <KePanic(char const*)>
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	83 ec 0c             	sub    esp,0xc
c001e847:	6a 02                	push   0x2
c001e849:	e8 bf ad fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e84e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e854:	6a 03                	push   0x3
c001e856:	50                   	push   eax
c001e857:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e85d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e863:	e8 b8 b4 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e868:	83 c4 14             	add    esp,0x14
c001e86b:	68 78 01 00 00       	push   0x178
c001e870:	e8 41 92 fe ff       	call   c0007ab6 <malloc>
c001e875:	83 c4 0c             	add    esp,0xc
c001e878:	89 c6                	mov    esi,eax
c001e87a:	6a 00                	push   0x0
c001e87c:	68 ff ff ff 7f       	push   0x7fffffff
c001e881:	6a 00                	push   0x0
c001e883:	6a 00                	push   0x0
c001e885:	53                   	push   ebx
c001e886:	68 6e 35 02 c0       	push   0xc002356e
c001e88b:	50                   	push   eax
c001e88c:	e8 7b f3 fe ff       	call   c000dc0c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e891:	83 c4 14             	add    esp,0x14
c001e894:	56                   	push   esi
c001e895:	e8 32 f4 fe ff       	call   c000dccc <LogicalDisk::assignDriveLetter()>
c001e89a:	5a                   	pop    edx
c001e89b:	0f be c0             	movsx  eax,al
c001e89e:	59                   	pop    ecx
c001e89f:	50                   	push   eax
c001e8a0:	68 c0 33 02 c0       	push   0xc00233c0
c001e8a5:	e8 9b c0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e8aa:	58                   	pop    eax
c001e8ab:	5a                   	pop    edx
c001e8ac:	56                   	push   esi
c001e8ad:	53                   	push   ebx
c001e8ae:	e8 b3 e1 fe ff       	call   c000ca66 <Device::addChild(Device*)>
c001e8b3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e8b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8bc:	e8 d9 e5 fe ff       	call   c000ce9a <PhysicalDisk::startCache()>
c001e8c1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e8c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8cb:	e8 b2 fe ff ff       	call   c001e782 <SATAPI::detectMedia()>
c001e8d0:	83 c4 14             	add    esp,0x14
c001e8d3:	31 c0                	xor    eax,eax
c001e8d5:	5b                   	pop    ebx
c001e8d6:	5e                   	pop    esi
c001e8d7:	c3                   	ret    

c001e8d8 <SATAPI::read(unsigned long long, int, void*)>:
c001e8d8:	57                   	push   edi
c001e8d9:	56                   	push   esi
c001e8da:	53                   	push   ebx
c001e8db:	83 ec 30             	sub    esp,0x30
c001e8de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e8e2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e8e6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e8ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e8ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e8f6:	83 fe 04             	cmp    esi,0x4
c001e8f9:	7e 10                	jle    c001e90b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	68 7c 35 02 c0       	push   0xc002357c
c001e903:	e8 b7 2d ff ff       	call   c00116bf <KePanic(char const*)>
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e911:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e917:	51                   	push   ecx
c001e918:	50                   	push   eax
c001e919:	83 c0 02             	add    eax,0x2
c001e91c:	c1 e0 07             	shl    eax,0x7
c001e91f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e925:	50                   	push   eax
c001e926:	52                   	push   edx
c001e927:	e8 8c e1 ff ff       	call   c001cab8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e92c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e930:	b9 03 00 00 00       	mov    ecx,0x3
c001e935:	fc                   	cld    
c001e936:	31 c0                	xor    eax,eax
c001e938:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e93a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e93f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e944:	83 c4 0c             	add    esp,0xc
c001e947:	6a 00                	push   0x0
c001e949:	6a 00                	push   0x0
c001e94b:	6a 00                	push   0x0
c001e94d:	6a 00                	push   0x0
c001e94f:	6a 02                	push   0x2
c001e951:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e955:	50                   	push   eax
c001e956:	53                   	push   ebx
c001e957:	e8 0c fb ff ff       	call   c001e468 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e95c:	83 c4 20             	add    esp,0x20
c001e95f:	85 c0                	test   eax,eax
c001e961:	75 44                	jne    c001e9a7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e963:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e967:	b9 03 00 00 00       	mov    ecx,0x3
c001e96c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e972:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e977:	0f c8                	bswap  eax
c001e979:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e97d:	89 f0                	mov    eax,esi
c001e97f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e983:	50                   	push   eax
c001e984:	56                   	push   esi
c001e985:	c1 e6 0b             	shl    esi,0xb
c001e988:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e98c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e990:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e994:	56                   	push   esi
c001e995:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e999:	50                   	push   eax
c001e99a:	53                   	push   ebx
c001e99b:	e8 c8 fa ff ff       	call   c001e468 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9a0:	83 c4 20             	add    esp,0x20
c001e9a3:	85 c0                	test   eax,eax
c001e9a5:	74 14                	je     c001e9bb <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e9a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9ab:	83 ec 0c             	sub    esp,0xc
c001e9ae:	53                   	push   ebx
c001e9af:	e8 ce fd ff ff       	call   c001e782 <SATAPI::detectMedia()>
c001e9b4:	83 c4 10             	add    esp,0x10
c001e9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9bb:	83 c4 30             	add    esp,0x30
c001e9be:	5b                   	pop    ebx
c001e9bf:	5e                   	pop    esi
c001e9c0:	5f                   	pop    edi
c001e9c1:	c3                   	ret    

c001e9c2 <IOAPIC::close(int, int, void*)>:
c001e9c2:	b8 00 00 00 00       	mov    eax,0x0
c001e9c7:	c3                   	ret    

c001e9c8 <apicGetBase()>:
c001e9c8:	55                   	push   ebp
c001e9c9:	89 e5                	mov    ebp,esp
c001e9cb:	83 ec 18             	sub    esp,0x18
c001e9ce:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e9d9:	83 e0 08             	and    eax,0x8
c001e9dc:	0f b6 c0             	movzx  eax,al
c001e9df:	85 c0                	test   eax,eax
c001e9e1:	75 07                	jne    c001e9ea <apicGetBase()+0x22>
c001e9e3:	b8 00 00 00 00       	mov    eax,0x0
c001e9e8:	eb 21                	jmp    c001ea0b <apicGetBase()+0x43>
c001e9ea:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9ef:	83 ec 08             	sub    esp,0x8
c001e9f2:	6a 1b                	push   0x1b
c001e9f4:	50                   	push   eax
c001e9f5:	e8 c6 86 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e9fa:	83 c4 10             	add    esp,0x10
c001e9fd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea00:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea06:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea0b:	c9                   	leave  
c001ea0c:	c3                   	ret    
c001ea0d:	90                   	nop

c001ea0e <IOAPIC::IOAPIC()>:
c001ea0e:	83 ec 0c             	sub    esp,0xc
c001ea11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea15:	83 ec 08             	sub    esp,0x8
c001ea18:	68 e0 35 02 c0       	push   0xc00235e0
c001ea1d:	50                   	push   eax
c001ea1e:	e8 db e1 fe ff       	call   c000cbfe <Device::Device(char const*)>
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c001ea2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2f:	89 10                	mov    DWORD PTR [eax],edx
c001ea31:	90                   	nop
c001ea32:	83 c4 0c             	add    esp,0xc
c001ea35:	c3                   	ret    

c001ea36 <apicOpen()>:
c001ea36:	55                   	push   ebp
c001ea37:	89 e5                	mov    ebp,esp
c001ea39:	53                   	push   ebx
c001ea3a:	83 ec 34             	sub    esp,0x34
c001ea3d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001ea42:	83 f0 01             	xor    eax,0x1
c001ea45:	0f b6 c0             	movzx  eax,al
c001ea48:	85 c0                	test   eax,eax
c001ea4a:	0f 84 a3 00 00 00    	je     c001eaf3 <apicOpen()+0xbd>
c001ea50:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ea54:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001ea59:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea5d:	0f b6 c0             	movzx  eax,al
c001ea60:	39 c2                	cmp    edx,eax
c001ea62:	0f 83 84 00 00 00    	jae    c001eaec <apicOpen()+0xb6>
c001ea68:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ea6f:	83 ec 0c             	sub    esp,0xc
c001ea72:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ea75:	e8 3c 90 fe ff       	call   c0007ab6 <malloc>
c001ea7a:	83 c4 10             	add    esp,0x10
c001ea7d:	89 c3                	mov    ebx,eax
c001ea7f:	83 ec 0c             	sub    esp,0xc
c001ea82:	53                   	push   ebx
c001ea83:	e8 86 ff ff ff       	call   c001ea0e <IOAPIC::IOAPIC()>
c001ea88:	83 c4 10             	add    esp,0x10
c001ea8b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ea8e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ea92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea95:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001ea9c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eaa1:	83 c0 01             	add    eax,0x1
c001eaa4:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eaa9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eaae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eab4:	83 ec 08             	sub    esp,0x8
c001eab7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eaba:	50                   	push   eax
c001eabb:	e8 a6 df fe ff       	call   c000ca66 <Device::addChild(Device*)>
c001eac0:	83 c4 10             	add    esp,0x10
c001eac3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eac6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac8:	83 c0 08             	add    eax,0x8
c001eacb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eacd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ead1:	6a 00                	push   0x0
c001ead3:	6a 00                	push   0x0
c001ead5:	52                   	push   edx
c001ead6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ead9:	ff d0                	call   eax
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eae1:	83 c0 01             	add    eax,0x1
c001eae4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eae7:	e9 68 ff ff ff       	jmp    c001ea54 <apicOpen()+0x1e>
c001eaec:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eaf3:	e8 d0 fe ff ff       	call   c001e9c8 <apicGetBase()>
c001eaf8:	05 f0 00 00 00       	add    eax,0xf0
c001eafd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb03:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb05:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb08:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb0f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb19:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb1c:	89 10                	mov    DWORD PTR [eax],edx
c001eb1e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb25:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb2a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb2d:	7d 7c                	jge    c001ebab <apicOpen()+0x175>
c001eb2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb32:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb39:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001eb3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb3f:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb46:	c1 e8 08             	shr    eax,0x8
c001eb49:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001eb4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb50:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eb57:	c1 e8 18             	shr    eax,0x18
c001eb5a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eb5d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eb61:	3d ff 00 00 00       	cmp    eax,0xff
c001eb66:	75 3a                	jne    c001eba2 <apicOpen()+0x16c>
c001eb68:	e8 5b fe ff ff       	call   c001e9c8 <apicGetBase()>
c001eb6d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eb71:	83 fa 01             	cmp    edx,0x1
c001eb74:	75 07                	jne    c001eb7d <apicOpen()+0x147>
c001eb76:	ba 60 03 00 00       	mov    edx,0x360
c001eb7b:	eb 05                	jmp    c001eb82 <apicOpen()+0x14c>
c001eb7d:	ba 50 03 00 00       	mov    edx,0x350
c001eb82:	01 d0                	add    eax,edx
c001eb84:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eb87:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb8c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eb8f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eb96:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eb9a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eb9d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eba0:	89 10                	mov    DWORD PTR [eax],edx
c001eba2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eba6:	e9 7a ff ff ff       	jmp    c001eb25 <apicOpen()+0xef>
c001ebab:	90                   	nop
c001ebac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ebaf:	c9                   	leave  
c001ebb0:	c3                   	ret    
c001ebb1:	90                   	nop

c001ebb2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ebb2:	55                   	push   ebp
c001ebb3:	89 e5                	mov    ebp,esp
c001ebb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ebbe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebc1:	72 1d                	jb     c001ebe0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ebcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebcf:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ebd5:	01 d0                	add    eax,edx
c001ebd7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ebda:	73 04                	jae    c001ebe0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ebdc:	b0 01                	mov    al,0x1
c001ebde:	eb 02                	jmp    c001ebe2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ebe0:	b0 00                	mov    al,0x0
c001ebe2:	5d                   	pop    ebp
c001ebe3:	c3                   	ret    

c001ebe4 <IOAPIC::read(int)>:
c001ebe4:	55                   	push   ebp
c001ebe5:	89 e5                	mov    ebp,esp
c001ebe7:	83 ec 10             	sub    esp,0x10
c001ebea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebf3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebf9:	0f b6 d0             	movzx  edx,al
c001ebfc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebff:	89 10                	mov    DWORD PTR [eax],edx
c001ec01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec04:	83 c0 10             	add    eax,0x10
c001ec07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec09:	c9                   	leave  
c001ec0a:	c3                   	ret    
c001ec0b:	90                   	nop

c001ec0c <IOAPIC::open(int, int, void*)>:
c001ec0c:	55                   	push   ebp
c001ec0d:	89 e5                	mov    ebp,esp
c001ec0f:	57                   	push   edi
c001ec10:	56                   	push   esi
c001ec11:	53                   	push   ebx
c001ec12:	83 ec 04             	sub    esp,0x4
c001ec15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec24:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec2a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec43:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ec4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec4d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ec53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec56:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ec5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec65:	0f b6 f0             	movzx  esi,al
c001ec68:	89 d0                	mov    eax,edx
c001ec6a:	ba 00 00 00 00       	mov    edx,0x0
c001ec6f:	89 c7                	mov    edi,eax
c001ec71:	83 e7 ff             	and    edi,0xffffffff
c001ec74:	89 f9                	mov    ecx,edi
c001ec76:	0f b6 da             	movzx  ebx,dl
c001ec79:	89 c8                	mov    eax,ecx
c001ec7b:	89 da                	mov    edx,ebx
c001ec7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ec80:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ec83:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec87:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec8b:	83 e0 00             	and    eax,0x0
c001ec8e:	09 d0                	or     eax,edx
c001ec90:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec9d:	8d 50 01             	lea    edx,[eax+0x1]
c001eca0:	88 d1                	mov    cl,dl
c001eca2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eca5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ecab:	0f b6 d0             	movzx  edx,al
c001ecae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecb1:	83 c2 08             	add    edx,0x8
c001ecb4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ecb8:	0f b6 c9             	movzx  ecx,cl
c001ecbb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ecc1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ecc5:	6a 01                	push   0x1
c001ecc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecca:	e8 15 ff ff ff       	call   c001ebe4 <IOAPIC::read(int)>
c001eccf:	83 c4 08             	add    esp,0x8
c001ecd2:	c1 f8 10             	sar    eax,0x10
c001ecd5:	0f b6 c0             	movzx  eax,al
c001ecd8:	8d 50 01             	lea    edx,[eax+0x1]
c001ecdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecde:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ece4:	b8 00 00 00 00       	mov    eax,0x0
c001ece9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ecec:	5b                   	pop    ebx
c001eced:	5e                   	pop    esi
c001ecee:	5f                   	pop    edi
c001ecef:	5d                   	pop    ebp
c001ecf0:	c3                   	ret    
c001ecf1:	90                   	nop

c001ecf2 <IOAPIC::write(int, int)>:
c001ecf2:	55                   	push   ebp
c001ecf3:	89 e5                	mov    ebp,esp
c001ecf5:	83 ec 10             	sub    esp,0x10
c001ecf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecfb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed07:	0f b6 d0             	movzx  edx,al
c001ed0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed0d:	89 10                	mov    DWORD PTR [eax],edx
c001ed0f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed12:	8d 50 10             	lea    edx,[eax+0x10]
c001ed15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed18:	89 02                	mov    DWORD PTR [edx],eax
c001ed1a:	90                   	nop
c001ed1b:	c9                   	leave  
c001ed1c:	c3                   	ret    
c001ed1d:	90                   	nop

c001ed1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed1e:	55                   	push   ebp
c001ed1f:	89 e5                	mov    ebp,esp
c001ed21:	53                   	push   ebx
c001ed22:	83 ec 2c             	sub    esp,0x2c
c001ed25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed28:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed2b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed2e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ed34:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed37:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ed3a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ed3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ed40:	88 d8                	mov    al,bl
c001ed42:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ed45:	88 c8                	mov    al,cl
c001ed47:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ed4a:	88 d0                	mov    al,dl
c001ed4c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ed4f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed53:	83 c0 08             	add    eax,0x8
c001ed56:	01 c0                	add    eax,eax
c001ed58:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ed5b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ed5f:	83 c0 08             	add    eax,0x8
c001ed62:	01 c0                	add    eax,eax
c001ed64:	83 c0 01             	add    eax,0x1
c001ed67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed6d:	50                   	push   eax
c001ed6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed71:	e8 6e fe ff ff       	call   c001ebe4 <IOAPIC::read(int)>
c001ed76:	83 c4 08             	add    esp,0x8
c001ed79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ed7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ed83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ed86:	c1 e0 18             	shl    eax,0x18
c001ed89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ed8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed92:	52                   	push   edx
c001ed93:	50                   	push   eax
c001ed94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed97:	e8 56 ff ff ff       	call   c001ecf2 <IOAPIC::write(int, int)>
c001ed9c:	83 c4 0c             	add    esp,0xc
c001ed9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eda2:	50                   	push   eax
c001eda3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eda6:	e8 39 fe ff ff       	call   c001ebe4 <IOAPIC::read(int)>
c001edab:	83 c4 08             	add    esp,0x8
c001edae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001edb1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001edb8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001edbf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001edc6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001edca:	85 c0                	test   eax,eax
c001edcc:	74 09                	je     c001edd7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001edce:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001edd5:	eb 07                	jmp    c001edde <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001edd7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001edde:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ede2:	85 c0                	test   eax,eax
c001ede4:	74 09                	je     c001edef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ede6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eded:	eb 07                	jmp    c001edf6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001edef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001edf6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001edfd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee01:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee04:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee0a:	52                   	push   edx
c001ee0b:	50                   	push   eax
c001ee0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee0f:	e8 de fe ff ff       	call   c001ecf2 <IOAPIC::write(int, int)>
c001ee14:	83 c4 0c             	add    esp,0xc
c001ee17:	90                   	nop
c001ee18:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee1b:	c9                   	leave  
c001ee1c:	c3                   	ret    
c001ee1d:	66 90                	xchg   ax,ax
c001ee1f:	90                   	nop

c001ee20 <APICTimer::close(int, int, void*)>:
c001ee20:	b8 00 00 00 00       	mov    eax,0x0
c001ee25:	c3                   	ret    
c001ee26:	66 90                	xchg   ax,ax

c001ee28 <apicTimerHandler(regs*, void*)>:
c001ee28:	83 ec 0c             	sub    esp,0xc
c001ee2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee31:	b8 10 27 00 00       	mov    eax,0x2710
c001ee36:	ba 00 00 00 00       	mov    edx,0x0
c001ee3b:	f7 f1                	div    ecx
c001ee3d:	83 ec 0c             	sub    esp,0xc
c001ee40:	50                   	push   eax
c001ee41:	e8 82 f6 fe ff       	call   c000e4c8 <timerHandler(unsigned int)>
c001ee46:	83 c4 10             	add    esp,0x10
c001ee49:	90                   	nop
c001ee4a:	83 c4 0c             	add    esp,0xc
c001ee4d:	c3                   	ret    
c001ee4e:	66 90                	xchg   ax,ax

c001ee50 <APICTimer::open(int, int, void*)>:
c001ee50:	83 ec 0c             	sub    esp,0xc
c001ee53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee59:	83 c0 24             	add    eax,0x24
c001ee5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee5e:	83 ec 08             	sub    esp,0x8
c001ee61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee69:	ff d0                	call   eax
c001ee6b:	83 c4 10             	add    esp,0x10
c001ee6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee76:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee84:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee8e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	51                   	push   ecx
c001ee98:	6a 01                	push   0x1
c001ee9a:	68 28 ee 01 c0       	push   0xc001ee28
c001ee9f:	52                   	push   edx
c001eea0:	50                   	push   eax
c001eea1:	e8 6c db fe ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eea6:	83 c4 20             	add    esp,0x20
c001eea9:	89 c2                	mov    edx,eax
c001eeab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeaf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eeb5:	b8 00 00 00 00       	mov    eax,0x0
c001eeba:	83 c4 0c             	add    esp,0xc
c001eebd:	c3                   	ret    
c001eebe:	66 90                	xchg   ax,ax

c001eec0 <APICTimer::write(int)>:
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	83 ec 0c             	sub    esp,0xc
c001eec6:	68 14 36 02 c0       	push   0xc0023614
c001eecb:	e8 ef 27 ff ff       	call   c00116bf <KePanic(char const*)>
c001eed0:	83 c4 10             	add    esp,0x10
c001eed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eedb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eee1:	90                   	nop
c001eee2:	83 c4 0c             	add    esp,0xc
c001eee5:	c3                   	ret    
c001eee6:	66 90                	xchg   ax,ax

c001eee8 <APICTimer::APICTimer()>:
c001eee8:	83 ec 0c             	sub    esp,0xc
c001eeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeef:	83 ec 08             	sub    esp,0x8
c001eef2:	68 24 36 02 c0       	push   0xc0023624
c001eef7:	50                   	push   eax
c001eef8:	e8 ff f4 fe ff       	call   c000e3fc <Timer::Timer(char const*)>
c001eefd:	83 c4 10             	add    esp,0x10
c001ef00:	ba 38 36 02 c0       	mov    edx,0xc0023638
c001ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef09:	89 10                	mov    DWORD PTR [eax],edx
c001ef0b:	90                   	nop
c001ef0c:	83 c4 0c             	add    esp,0xc
c001ef0f:	c3                   	ret    

c001ef10 <PIT::write(int)>:
c001ef10:	83 ec 10             	sub    esp,0x10
c001ef13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef1b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef25:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef2a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef2f:	89 c2                	mov    edx,eax
c001ef31:	c1 fa 1f             	sar    edx,0x1f
c001ef34:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ef38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef3c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ef43:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ef48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ef4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef51:	ee                   	out    dx,al
c001ef52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef56:	0f b6 c0             	movzx  eax,al
c001ef59:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef60:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef64:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef6d:	ee                   	out    dx,al
c001ef6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef72:	c1 f8 08             	sar    eax,0x8
c001ef75:	0f b6 c0             	movzx  eax,al
c001ef78:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef7f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef8c:	ee                   	out    dx,al
c001ef8d:	90                   	nop
c001ef8e:	83 c4 10             	add    esp,0x10
c001ef91:	c3                   	ret    
c001ef92:	66 90                	xchg   ax,ax

c001ef94 <pitHandler(regs*, void*)>:
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ef9d:	b8 10 27 00 00       	mov    eax,0x2710
c001efa2:	89 c2                	mov    edx,eax
c001efa4:	c1 fa 1f             	sar    edx,0x1f
c001efa7:	f7 f9                	idiv   ecx
c001efa9:	83 ec 0c             	sub    esp,0xc
c001efac:	50                   	push   eax
c001efad:	e8 16 f5 fe ff       	call   c000e4c8 <timerHandler(unsigned int)>
c001efb2:	83 c4 10             	add    esp,0x10
c001efb5:	90                   	nop
c001efb6:	83 c4 0c             	add    esp,0xc
c001efb9:	c3                   	ret    
c001efba:	66 90                	xchg   ax,ax

c001efbc <PIT::open(int, int, void*)>:
c001efbc:	83 ec 0c             	sub    esp,0xc
c001efbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc3:	8b 00                	mov    eax,DWORD PTR [eax]
c001efc5:	83 c0 24             	add    eax,0x24
c001efc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001efca:	83 ec 08             	sub    esp,0x8
c001efcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd5:	ff d0                	call   eax
c001efd7:	83 c4 10             	add    esp,0x10
c001efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efde:	83 ec 0c             	sub    esp,0xc
c001efe1:	6a 00                	push   0x0
c001efe3:	6a 01                	push   0x1
c001efe5:	68 94 ef 01 c0       	push   0xc001ef94
c001efea:	6a 00                	push   0x0
c001efec:	50                   	push   eax
c001efed:	e8 20 da fe ff       	call   c000ca12 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eff2:	83 c4 20             	add    esp,0x20
c001eff5:	89 c2                	mov    edx,eax
c001eff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f001:	b8 00 00 00 00       	mov    eax,0x0
c001f006:	83 c4 0c             	add    esp,0xc
c001f009:	c3                   	ret    
c001f00a:	66 90                	xchg   ax,ax

c001f00c <PIT::close(int, int, void*)>:
c001f00c:	83 ec 0c             	sub    esp,0xc
c001f00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f013:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f021:	6a 01                	push   0x1
c001f023:	68 94 ef 01 c0       	push   0xc001ef94
c001f028:	6a 00                	push   0x0
c001f02a:	50                   	push   eax
c001f02b:	e8 18 da fe ff       	call   c000ca48 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f030:	83 c4 10             	add    esp,0x10
c001f033:	b8 00 00 00 00       	mov    eax,0x0
c001f038:	83 c4 0c             	add    esp,0xc
c001f03b:	c3                   	ret    

c001f03c <PIT::PIT()>:
c001f03c:	83 ec 0c             	sub    esp,0xc
c001f03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f043:	83 ec 08             	sub    esp,0x8
c001f046:	68 60 36 02 c0       	push   0xc0023660
c001f04b:	50                   	push   eax
c001f04c:	e8 ab f3 fe ff       	call   c000e3fc <Timer::Timer(char const*)>
c001f051:	83 c4 10             	add    esp,0x10
c001f054:	ba 88 36 02 c0       	mov    edx,0xc0023688
c001f059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05d:	89 10                	mov    DWORD PTR [eax],edx
c001f05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f063:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f069:	0f b6 d0             	movzx  edx,al
c001f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f070:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f081:	0f b6 d0             	movzx  edx,al
c001f084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f088:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f091:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f097:	8d 50 01             	lea    edx,[eax+0x1]
c001f09a:	88 d1                	mov    cl,dl
c001f09c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0a0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f0a6:	0f b6 d0             	movzx  edx,al
c001f0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f0b1:	83 e1 3f             	and    ecx,0x3f
c001f0b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f0b8:	90                   	nop
c001f0b9:	83 c4 0c             	add    esp,0xc
c001f0bc:	c3                   	ret    
c001f0bd:	66 90                	xchg   ax,ax
c001f0bf:	90                   	nop

c001f0c0 <avxDetect>:
c001f0c0:	b8 01 00 00 00       	mov    eax,0x1
c001f0c5:	0f a2                	cpuid  
c001f0c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f0cd:	74 15                	je     c001f0e4 <avxDetect.noAVX>
c001f0cf:	b8 01 00 00 00       	mov    eax,0x1
c001f0d4:	0f a2                	cpuid  
c001f0d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f0dc:	74 06                	je     c001f0e4 <avxDetect.noAVX>
c001f0de:	b8 01 00 00 00       	mov    eax,0x1
c001f0e3:	c3                   	ret    

c001f0e4 <avxDetect.noAVX>:
c001f0e4:	b8 00 00 00 00       	mov    eax,0x0
c001f0e9:	c3                   	ret    

c001f0ea <avxSave>:
c001f0ea:	53                   	push   ebx
c001f0eb:	52                   	push   edx
c001f0ec:	31 c0                	xor    eax,eax
c001f0ee:	48                   	dec    eax
c001f0ef:	89 c2                	mov    edx,eax
c001f0f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0f5:	0f ae 23             	xsave  [ebx]
c001f0f8:	5a                   	pop    edx
c001f0f9:	5b                   	pop    ebx
c001f0fa:	c3                   	ret    

c001f0fb <avxLoad>:
c001f0fb:	53                   	push   ebx
c001f0fc:	52                   	push   edx
c001f0fd:	31 c0                	xor    eax,eax
c001f0ff:	48                   	dec    eax
c001f100:	89 c2                	mov    edx,eax
c001f102:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f106:	0f ae 2b             	xrstor [ebx]
c001f109:	5a                   	pop    edx
c001f10a:	5b                   	pop    ebx
c001f10b:	c3                   	ret    

c001f10c <avxInit>:
c001f10c:	e8 67 03 00 00       	call   c001f478 <sseInit>
c001f111:	50                   	push   eax
c001f112:	51                   	push   ecx
c001f113:	0f 20 e0             	mov    eax,cr4
c001f116:	0d 00 00 04 00       	or     eax,0x40000
c001f11b:	0f 22 e0             	mov    cr4,eax
c001f11e:	31 c9                	xor    ecx,ecx
c001f120:	0f 01 d0             	xgetbv 
c001f123:	0d 07 00 00 00       	or     eax,0x7
c001f128:	0f 01 d1             	xsetbv 
c001f12b:	59                   	pop    ecx
c001f12c:	58                   	pop    eax
c001f12d:	c3                   	ret    

c001f12e <avxClose>:
c001f12e:	c3                   	ret    

c001f12f <wouldSheSayYes>:
c001f12f:	c3                   	ret    
c001f130:	49                   	dec    ecx
c001f131:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f135:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f139:	75 20                	jne    c001f15b <isr0+0xb>
c001f13b:	4e                   	dec    esi
c001f13c:	79 61                	jns    c001f19f <isr7+0x3>
c001f13e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f143:	66 90                	xchg   ax,ax
c001f145:	66 90                	xchg   ax,ax
c001f147:	66 90                	xchg   ax,ax
c001f149:	66 90                	xchg   ax,ax
c001f14b:	66 90                	xchg   ax,ax
c001f14d:	66 90                	xchg   ax,ax
c001f14f:	90                   	nop

c001f150 <isr0>:
c001f150:	fa                   	cli    
c001f151:	68 00 00 00 00       	push   0x0
c001f156:	68 00 00 00 00       	push   0x0
c001f15b:	e9 56 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f160 <isr1>:
c001f160:	fa                   	cli    
c001f161:	6a 00                	push   0x0
c001f163:	6a 01                	push   0x1
c001f165:	e9 4c 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f16a <isr2>:
c001f16a:	fa                   	cli    
c001f16b:	6a 00                	push   0x0
c001f16d:	6a 02                	push   0x2
c001f16f:	e9 42 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f174 <isr3>:
c001f174:	fa                   	cli    
c001f175:	6a 00                	push   0x0
c001f177:	6a 03                	push   0x3
c001f179:	e9 38 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f17e <isr4>:
c001f17e:	fa                   	cli    
c001f17f:	6a 00                	push   0x0
c001f181:	6a 04                	push   0x4
c001f183:	e9 2e 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f188 <isr5>:
c001f188:	fa                   	cli    
c001f189:	6a 00                	push   0x0
c001f18b:	6a 05                	push   0x5
c001f18d:	e9 24 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f192 <isr6>:
c001f192:	fa                   	cli    
c001f193:	6a 00                	push   0x0
c001f195:	6a 06                	push   0x6
c001f197:	e9 1a 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f19c <isr7>:
c001f19c:	fa                   	cli    
c001f19d:	6a 00                	push   0x0
c001f19f:	6a 07                	push   0x7
c001f1a1:	e9 10 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1a6 <isr8>:
c001f1a6:	fa                   	cli    
c001f1a7:	6a 08                	push   0x8
c001f1a9:	e9 08 01 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1ae <isr9>:
c001f1ae:	fa                   	cli    
c001f1af:	6a 00                	push   0x0
c001f1b1:	6a 09                	push   0x9
c001f1b3:	e9 fe 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1b8 <isr10>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 0a                	push   0xa
c001f1bb:	e9 f6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1c0 <isr11>:
c001f1c0:	fa                   	cli    
c001f1c1:	6a 0b                	push   0xb
c001f1c3:	e9 ee 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1c8 <isr12>:
c001f1c8:	fa                   	cli    
c001f1c9:	6a 0c                	push   0xc
c001f1cb:	e9 e6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1d0 <isr13>:
c001f1d0:	fa                   	cli    
c001f1d1:	6a 0d                	push   0xd
c001f1d3:	53                   	push   ebx
c001f1d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f1d8:	81 fb a6 f3 01 c0    	cmp    ebx,0xc001f3a6
c001f1de:	5b                   	pop    ebx
c001f1df:	0f 84 c3 01 00 00    	je     c001f3a8 <finishSignal2>
c001f1e5:	e9 cc 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1ea <isr14>:
c001f1ea:	fa                   	cli    
c001f1eb:	6a 0e                	push   0xe
c001f1ed:	e9 c4 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1f2 <isr15>:
c001f1f2:	fa                   	cli    
c001f1f3:	6a 00                	push   0x0
c001f1f5:	6a 0f                	push   0xf
c001f1f7:	e9 ba 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f1fc <isr16>:
c001f1fc:	fa                   	cli    
c001f1fd:	6a 00                	push   0x0
c001f1ff:	6a 10                	push   0x10
c001f201:	e9 b0 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f206 <isr17>:
c001f206:	fa                   	cli    
c001f207:	6a 00                	push   0x0
c001f209:	6a 11                	push   0x11
c001f20b:	e9 a6 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f210 <isr18>:
c001f210:	fa                   	cli    
c001f211:	6a 00                	push   0x0
c001f213:	6a 12                	push   0x12
c001f215:	e9 9c 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f21a <irq3>:
c001f21a:	fa                   	cli    
c001f21b:	6a 00                	push   0x0
c001f21d:	6a 23                	push   0x23
c001f21f:	e9 92 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f224 <irq4>:
c001f224:	fa                   	cli    
c001f225:	6a 00                	push   0x0
c001f227:	6a 24                	push   0x24
c001f229:	e9 88 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f22e <irq5>:
c001f22e:	fa                   	cli    
c001f22f:	6a 00                	push   0x0
c001f231:	6a 25                	push   0x25
c001f233:	e9 7e 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f238 <irq6>:
c001f238:	fa                   	cli    
c001f239:	6a 00                	push   0x0
c001f23b:	6a 26                	push   0x26
c001f23d:	e9 74 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f242 <irq7>:
c001f242:	fa                   	cli    
c001f243:	6a 00                	push   0x0
c001f245:	6a 27                	push   0x27
c001f247:	e9 6a 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f24c <irq8>:
c001f24c:	fa                   	cli    
c001f24d:	6a 00                	push   0x0
c001f24f:	6a 28                	push   0x28
c001f251:	e9 60 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f256 <irq9>:
c001f256:	fa                   	cli    
c001f257:	6a 00                	push   0x0
c001f259:	6a 29                	push   0x29
c001f25b:	e9 56 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f260 <irq10>:
c001f260:	fa                   	cli    
c001f261:	6a 00                	push   0x0
c001f263:	6a 2a                	push   0x2a
c001f265:	e9 4c 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f26a <irq11>:
c001f26a:	fa                   	cli    
c001f26b:	6a 00                	push   0x0
c001f26d:	6a 2b                	push   0x2b
c001f26f:	e9 42 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f274 <irq12>:
c001f274:	fa                   	cli    
c001f275:	6a 00                	push   0x0
c001f277:	6a 2c                	push   0x2c
c001f279:	e9 38 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f27e <irq13>:
c001f27e:	fa                   	cli    
c001f27f:	6a 00                	push   0x0
c001f281:	6a 2d                	push   0x2d
c001f283:	e9 2e 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f288 <irq14>:
c001f288:	fa                   	cli    
c001f289:	6a 00                	push   0x0
c001f28b:	6a 2e                	push   0x2e
c001f28d:	e9 24 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f292 <irq15>:
c001f292:	fa                   	cli    
c001f293:	6a 00                	push   0x0
c001f295:	6a 2f                	push   0x2f
c001f297:	e9 1a 00 00 00       	jmp    c001f2b6 <int_common_stub>

c001f29c <irq1>:
c001f29c:	fa                   	cli    
c001f29d:	6a 00                	push   0x0
c001f29f:	6a 21                	push   0x21
c001f2a1:	eb 13                	jmp    c001f2b6 <int_common_stub>

c001f2a3 <irq2>:
c001f2a3:	fa                   	cli    
c001f2a4:	6a 00                	push   0x0
c001f2a6:	6a 22                	push   0x22
c001f2a8:	eb 0c                	jmp    c001f2b6 <int_common_stub>

c001f2aa <isr96>:
c001f2aa:	6a 00                	push   0x0
c001f2ac:	6a 60                	push   0x60
c001f2ae:	fb                   	sti    
c001f2af:	eb 37                	jmp    c001f2e8 <syscall_common_stub>

c001f2b1 <irq0>:
c001f2b1:	fa                   	cli    
c001f2b2:	6a 00                	push   0x0
c001f2b4:	6a 20                	push   0x20

c001f2b6 <int_common_stub>:
c001f2b6:	60                   	pusha  
c001f2b7:	1e                   	push   ds
c001f2b8:	06                   	push   es
c001f2b9:	0f a0                	push   fs
c001f2bb:	0f a8                	push   gs
c001f2bd:	66 b8 10 00          	mov    ax,0x10
c001f2c1:	66 8e d8             	mov    ds,ax
c001f2c4:	66 8e c0             	mov    es,ax
c001f2c7:	66 8e e0             	mov    fs,ax
c001f2ca:	66 8e e8             	mov    gs,ax
c001f2cd:	54                   	push   esp
c001f2ce:	fc                   	cld    
c001f2cf:	e8 3c dc fe ff       	call   c000cf10 <int_handler>
c001f2d4:	81 c4 04 00 00 00    	add    esp,0x4
c001f2da:	0f a9                	pop    gs
c001f2dc:	0f a1                	pop    fs
c001f2de:	07                   	pop    es
c001f2df:	1f                   	pop    ds
c001f2e0:	61                   	popa   
c001f2e1:	81 c4 08 00 00 00    	add    esp,0x8
c001f2e7:	cf                   	iret   

c001f2e8 <syscall_common_stub>:
c001f2e8:	60                   	pusha  
c001f2e9:	1e                   	push   ds
c001f2ea:	06                   	push   es
c001f2eb:	0f a0                	push   fs
c001f2ed:	0f a8                	push   gs
c001f2ef:	66 b8 10 00          	mov    ax,0x10
c001f2f3:	66 8e d8             	mov    ds,ax
c001f2f6:	66 8e c0             	mov    es,ax
c001f2f9:	66 8e e0             	mov    fs,ax
c001f2fc:	66 8e e8             	mov    gs,ax
c001f2ff:	54                   	push   esp
c001f300:	fc                   	cld    
c001f301:	e8 0a dc fe ff       	call   c000cf10 <int_handler>
c001f306:	81 c4 04 00 00 00    	add    esp,0x4
c001f30c:	0f a9                	pop    gs
c001f30e:	0f a1                	pop    fs
c001f310:	07                   	pop    es
c001f311:	1f                   	pop    ds
c001f312:	e8 bf 29 ff ff       	call   c0011cd6 <KiCheckSignalZ>
c001f317:	3d 00 00 00 00       	cmp    eax,0x0
c001f31c:	0f 84 c0 00 00 00    	je     c001f3e2 <skipSignals>
c001f322:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f327:	61                   	popa   
c001f328:	53                   	push   ebx
c001f329:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f32f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f332:	5b                   	pop    ebx
c001f333:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f338:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f33b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f33e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f341:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f344:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f347:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f34a:	81 c4 08 00 00 00    	add    esp,0x8
c001f350:	5e                   	pop    esi
c001f351:	5b                   	pop    ebx
c001f352:	59                   	pop    ecx
c001f353:	5a                   	pop    edx
c001f354:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f357:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f35a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f35d:	52                   	push   edx
c001f35e:	51                   	push   ecx
c001f35f:	53                   	push   ebx
c001f360:	56                   	push   esi
c001f361:	81 ec 08 00 00 00    	sub    esp,0x8
c001f367:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f36a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f36d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f370:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f373:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f376:	60                   	pusha  
c001f377:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f37d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f380:	89 e3                	mov    ebx,esp
c001f382:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f385:	52                   	push   edx
c001f386:	68 a6 f3 01 c0       	push   0xc001f3a6
c001f38b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f38e:	89 dc                	mov    esp,ebx
c001f390:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f393:	68 23 00 00 00       	push   0x23
c001f398:	51                   	push   ecx
c001f399:	68 02 02 00 00       	push   0x202
c001f39e:	68 1b 00 00 00       	push   0x1b
c001f3a3:	ff 36                	push   DWORD PTR [esi]
c001f3a5:	cf                   	iret   

c001f3a6 <finishSignal>:
c001f3a6:	cd 0f                	int    0xf

c001f3a8 <finishSignal2>:
c001f3a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f3ae:	e8 a0 29 ff ff       	call   c0011d53 <KiFinishSignalZ>
c001f3b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f3b9:	68 23 00 00 00       	push   0x23
c001f3be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f3c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f3c4:	68 1b 00 00 00       	push   0x1b
c001f3c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f3cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f3cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f3d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f3d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f3d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f3db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f3de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f3e1:	cf                   	iret   

c001f3e2 <skipSignals>:
c001f3e2:	61                   	popa   
c001f3e3:	81 c4 08 00 00 00    	add    esp,0x8
c001f3e9:	cf                   	iret   
c001f3ea:	90                   	nop
c001f3eb:	90                   	nop

c001f3ec <irq16>:
c001f3ec:	fa                   	cli    
c001f3ed:	6a 00                	push   0x0
c001f3ef:	6a 30                	push   0x30
c001f3f1:	e9 c0 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f3f6 <irq17>:
c001f3f6:	fa                   	cli    
c001f3f7:	6a 00                	push   0x0
c001f3f9:	6a 31                	push   0x31
c001f3fb:	e9 b6 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f400 <irq18>:
c001f400:	fa                   	cli    
c001f401:	6a 00                	push   0x0
c001f403:	6a 32                	push   0x32
c001f405:	e9 ac fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f40a <irq19>:
c001f40a:	fa                   	cli    
c001f40b:	6a 00                	push   0x0
c001f40d:	6a 33                	push   0x33
c001f40f:	e9 a2 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f414 <irq20>:
c001f414:	fa                   	cli    
c001f415:	6a 00                	push   0x0
c001f417:	6a 34                	push   0x34
c001f419:	e9 98 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f41e <irq21>:
c001f41e:	fa                   	cli    
c001f41f:	6a 00                	push   0x0
c001f421:	6a 35                	push   0x35
c001f423:	e9 8e fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f428 <irq22>:
c001f428:	fa                   	cli    
c001f429:	6a 00                	push   0x0
c001f42b:	6a 36                	push   0x36
c001f42d:	e9 84 fe ff ff       	jmp    c001f2b6 <int_common_stub>

c001f432 <irq23>:
c001f432:	fa                   	cli    
c001f433:	6a 00                	push   0x0
c001f435:	6a 37                	push   0x37
c001f437:	e9 7a fe ff ff       	jmp    c001f2b6 <int_common_stub>
c001f43c:	66 90                	xchg   ax,ax
c001f43e:	66 90                	xchg   ax,ax

c001f440 <i386GetRDRAND>:
c001f440:	b9 64 00 00 00       	mov    ecx,0x64

c001f445 <retry>:
c001f445:	0f c7 f0             	rdrand eax
c001f448:	72 05                	jb     c001f44f <retry.done>
c001f44a:	e2 f9                	loop   c001f445 <retry>

c001f44c <retry.fail>:
c001f44c:	31 c0                	xor    eax,eax
c001f44e:	c3                   	ret    

c001f44f <retry.done>:
c001f44f:	c3                   	ret    

c001f450 <absolutelyNoChanceInHell>:
c001f450:	b8 01 00 00 00       	mov    eax,0x1
c001f455:	0f a2                	cpuid  
c001f457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f45d:	74 06                	je     c001f465 <sseDetect.noSSE>
c001f45f:	b8 01 00 00 00       	mov    eax,0x1
c001f464:	c3                   	ret    

c001f465 <sseDetect.noSSE>:
c001f465:	31 c0                	xor    eax,eax
c001f467:	c3                   	ret    

c001f468 <sseSave>:
c001f468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46c:	0f ae 00             	fxsave [eax]
c001f46f:	c3                   	ret    

c001f470 <sseLoad>:
c001f470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f474:	0f ae 08             	fxrstor [eax]
c001f477:	c3                   	ret    

c001f478 <sseInit>:
c001f478:	e8 42 00 00 00       	call   c001f4bf <x87Init>
c001f47d:	0f 20 e0             	mov    eax,cr4
c001f480:	66 0d 00 06          	or     ax,0x600
c001f484:	0f 22 e0             	mov    cr4,eax
c001f487:	c3                   	ret    

c001f488 <sseClose>:
c001f488:	c3                   	ret    
c001f489:	66 90                	xchg   ax,ax
c001f48b:	66 90                	xchg   ax,ax
c001f48d:	66 90                	xchg   ax,ax
c001f48f:	90                   	nop

c001f490 <value_37F>:
c001f490:	7f 03                	jg     c001f495 <value_37A+0x1>

c001f492 <value_37E>:
c001f492:	7e 03                	jle    c001f497 <x87Detect+0x1>

c001f494 <value_37A>:
c001f494:	7a 03                	jp     c001f499 <x87Detect+0x3>

c001f496 <x87Detect>:
c001f496:	b8 01 00 00 00       	mov    eax,0x1
c001f49b:	0f a2                	cpuid  
c001f49d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f4a3:	74 06                	je     c001f4ab <x87Detect.nox87>
c001f4a5:	b8 01 00 00 00       	mov    eax,0x1
c001f4aa:	c3                   	ret    

c001f4ab <x87Detect.nox87>:
c001f4ab:	b8 00 00 00 00       	mov    eax,0x0
c001f4b0:	c3                   	ret    

c001f4b1 <x87Save>:
c001f4b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4b5:	dd 30                	fnsave [eax]
c001f4b7:	c3                   	ret    

c001f4b8 <x87Load>:
c001f4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4bc:	dd 20                	frstor [eax]
c001f4be:	c3                   	ret    

c001f4bf <x87Init>:
c001f4bf:	0f 20 c0             	mov    eax,cr0
c001f4c2:	66 25 fb ff          	and    ax,0xfffb
c001f4c6:	66 0d 22 00          	or     ax,0x22
c001f4ca:	0f 22 c0             	mov    cr0,eax
c001f4cd:	db e3                	fninit 
c001f4cf:	0f 06                	clts   
c001f4d1:	d9 2d 94 f4 01 c0    	fldcw  WORD PTR ds:0xc001f494
c001f4d7:	c3                   	ret    

c001f4d8 <x87Close>:
c001f4d8:	c3                   	ret    
c001f4d9:	66 90                	xchg   ax,ax
c001f4db:	90                   	nop

c001f4dc <__do_global_ctors_aux>:
c001f4dc:	a1 90 04 02 c0       	mov    eax,ds:0xc0020490
c001f4e1:	83 f8 ff             	cmp    eax,0xffffffff
c001f4e4:	74 1a                	je     c001f500 <__do_global_ctors_aux+0x24>
c001f4e6:	55                   	push   ebp
c001f4e7:	89 e5                	mov    ebp,esp
c001f4e9:	53                   	push   ebx
c001f4ea:	52                   	push   edx
c001f4eb:	bb 90 04 02 c0       	mov    ebx,0xc0020490
c001f4f0:	ff d0                	call   eax
c001f4f2:	83 eb 04             	sub    ebx,0x4
c001f4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f4f7:	83 f8 ff             	cmp    eax,0xffffffff
c001f4fa:	75 f4                	jne    c001f4f0 <__do_global_ctors_aux+0x14>
c001f4fc:	58                   	pop    eax
c001f4fd:	5b                   	pop    ebx
c001f4fe:	5d                   	pop    ebp
c001f4ff:	c3                   	ret    
c001f500:	c3                   	ret    
c001f501:	66 90                	xchg   ax,ax
c001f503:	90                   	nop

c001f504 <__divdi3>:
c001f504:	55                   	push   ebp
c001f505:	57                   	push   edi
c001f506:	56                   	push   esi
c001f507:	53                   	push   ebx
c001f508:	83 ec 1c             	sub    esp,0x1c
c001f50b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f50f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f513:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f516:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f51a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f51e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f522:	85 db                	test   ebx,ebx
c001f524:	0f 88 8e 00 00 00    	js     c001f5b8 <__divdi3+0xb4>
c001f52a:	89 dd                	mov    ebp,ebx
c001f52c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f534:	89 d3                	mov    ebx,edx
c001f536:	85 d2                	test   edx,edx
c001f538:	79 0d                	jns    c001f547 <__divdi3+0x43>
c001f53a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f53e:	f7 d8                	neg    eax
c001f540:	83 d2 00             	adc    edx,0x0
c001f543:	f7 da                	neg    edx
c001f545:	89 d3                	mov    ebx,edx
c001f547:	89 c7                	mov    edi,eax
c001f549:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f54c:	85 db                	test   ebx,ebx
c001f54e:	75 48                	jne    c001f598 <__divdi3+0x94>
c001f550:	39 ef                	cmp    edi,ebp
c001f552:	76 24                	jbe    c001f578 <__divdi3+0x74>
c001f554:	89 ea                	mov    edx,ebp
c001f556:	f7 f7                	div    edi
c001f558:	89 c1                	mov    ecx,eax
c001f55a:	31 f6                	xor    esi,esi
c001f55c:	89 c8                	mov    eax,ecx
c001f55e:	89 f2                	mov    edx,esi
c001f560:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f564:	85 c9                	test   ecx,ecx
c001f566:	74 07                	je     c001f56f <__divdi3+0x6b>
c001f568:	f7 d8                	neg    eax
c001f56a:	83 d2 00             	adc    edx,0x0
c001f56d:	f7 da                	neg    edx
c001f56f:	83 c4 1c             	add    esp,0x1c
c001f572:	5b                   	pop    ebx
c001f573:	5e                   	pop    esi
c001f574:	5f                   	pop    edi
c001f575:	5d                   	pop    ebp
c001f576:	c3                   	ret    
c001f577:	90                   	nop
c001f578:	85 ff                	test   edi,edi
c001f57a:	75 0b                	jne    c001f587 <__divdi3+0x83>
c001f57c:	b8 01 00 00 00       	mov    eax,0x1
c001f581:	31 d2                	xor    edx,edx
c001f583:	f7 f3                	div    ebx
c001f585:	89 c7                	mov    edi,eax
c001f587:	31 d2                	xor    edx,edx
c001f589:	89 e8                	mov    eax,ebp
c001f58b:	f7 f7                	div    edi
c001f58d:	89 c6                	mov    esi,eax
c001f58f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f592:	f7 f7                	div    edi
c001f594:	89 c1                	mov    ecx,eax
c001f596:	eb c4                	jmp    c001f55c <__divdi3+0x58>
c001f598:	39 eb                	cmp    ebx,ebp
c001f59a:	77 3c                	ja     c001f5d8 <__divdi3+0xd4>
c001f59c:	0f bd f3             	bsr    esi,ebx
c001f59f:	83 f6 1f             	xor    esi,0x1f
c001f5a2:	75 40                	jne    c001f5e4 <__divdi3+0xe0>
c001f5a4:	39 eb                	cmp    ebx,ebp
c001f5a6:	72 09                	jb     c001f5b1 <__divdi3+0xad>
c001f5a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f5ab:	0f 87 97 00 00 00    	ja     c001f648 <__divdi3+0x144>
c001f5b1:	b9 01 00 00 00       	mov    ecx,0x1
c001f5b6:	eb a4                	jmp    c001f55c <__divdi3+0x58>
c001f5b8:	f7 d9                	neg    ecx
c001f5ba:	83 d3 00             	adc    ebx,0x0
c001f5bd:	f7 db                	neg    ebx
c001f5bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f5c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f5c6:	89 dd                	mov    ebp,ebx
c001f5c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f5d0:	e9 5f ff ff ff       	jmp    c001f534 <__divdi3+0x30>
c001f5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f5d8:	31 f6                	xor    esi,esi
c001f5da:	31 c9                	xor    ecx,ecx
c001f5dc:	e9 7b ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f5e4:	b8 20 00 00 00       	mov    eax,0x20
c001f5e9:	29 f0                	sub    eax,esi
c001f5eb:	89 f1                	mov    ecx,esi
c001f5ed:	d3 e3                	shl    ebx,cl
c001f5ef:	89 fa                	mov    edx,edi
c001f5f1:	88 c1                	mov    cl,al
c001f5f3:	d3 ea                	shr    edx,cl
c001f5f5:	09 da                	or     edx,ebx
c001f5f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f5fb:	89 f1                	mov    ecx,esi
c001f5fd:	d3 e7                	shl    edi,cl
c001f5ff:	89 eb                	mov    ebx,ebp
c001f601:	88 c1                	mov    cl,al
c001f603:	d3 eb                	shr    ebx,cl
c001f605:	89 f1                	mov    ecx,esi
c001f607:	d3 e5                	shl    ebp,cl
c001f609:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f60c:	88 c1                	mov    cl,al
c001f60e:	d3 ea                	shr    edx,cl
c001f610:	09 d5                	or     ebp,edx
c001f612:	89 e8                	mov    eax,ebp
c001f614:	89 da                	mov    edx,ebx
c001f616:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f61a:	89 d3                	mov    ebx,edx
c001f61c:	89 c5                	mov    ebp,eax
c001f61e:	f7 e7                	mul    edi
c001f620:	39 d3                	cmp    ebx,edx
c001f622:	72 18                	jb     c001f63c <__divdi3+0x138>
c001f624:	74 0a                	je     c001f630 <__divdi3+0x12c>
c001f626:	89 e9                	mov    ecx,ebp
c001f628:	31 f6                	xor    esi,esi
c001f62a:	e9 2d ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f62f:	90                   	nop
c001f630:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f633:	89 f1                	mov    ecx,esi
c001f635:	d3 e7                	shl    edi,cl
c001f637:	39 c7                	cmp    edi,eax
c001f639:	73 eb                	jae    c001f626 <__divdi3+0x122>
c001f63b:	90                   	nop
c001f63c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f63f:	31 f6                	xor    esi,esi
c001f641:	e9 16 ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f646:	66 90                	xchg   ax,ax
c001f648:	31 c9                	xor    ecx,ecx
c001f64a:	e9 0d ff ff ff       	jmp    c001f55c <__divdi3+0x58>
c001f64f:	90                   	nop

c001f650 <__moddi3>:
c001f650:	55                   	push   ebp
c001f651:	57                   	push   edi
c001f652:	56                   	push   esi
c001f653:	53                   	push   ebx
c001f654:	83 ec 2c             	sub    esp,0x2c
c001f657:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f65b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f65f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f663:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f667:	85 db                	test   ebx,ebx
c001f669:	0f 88 85 00 00 00    	js     c001f6f4 <__moddi3+0xa4>
c001f66f:	89 de                	mov    esi,ebx
c001f671:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f679:	89 d7                	mov    edi,edx
c001f67b:	85 d2                	test   edx,edx
c001f67d:	79 09                	jns    c001f688 <__moddi3+0x38>
c001f67f:	f7 d8                	neg    eax
c001f681:	83 d2 00             	adc    edx,0x0
c001f684:	f7 da                	neg    edx
c001f686:	89 d7                	mov    edi,edx
c001f688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f68c:	89 cd                	mov    ebp,ecx
c001f68e:	85 ff                	test   edi,edi
c001f690:	75 52                	jne    c001f6e4 <__moddi3+0x94>
c001f692:	89 c3                	mov    ebx,eax
c001f694:	39 f0                	cmp    eax,esi
c001f696:	76 24                	jbe    c001f6bc <__moddi3+0x6c>
c001f698:	89 c8                	mov    eax,ecx
c001f69a:	89 f2                	mov    edx,esi
c001f69c:	f7 f3                	div    ebx
c001f69e:	89 d6                	mov    esi,edx
c001f6a0:	89 f0                	mov    eax,esi
c001f6a2:	31 d2                	xor    edx,edx
c001f6a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6a8:	85 c9                	test   ecx,ecx
c001f6aa:	74 07                	je     c001f6b3 <__moddi3+0x63>
c001f6ac:	f7 d8                	neg    eax
c001f6ae:	83 d2 00             	adc    edx,0x0
c001f6b1:	f7 da                	neg    edx
c001f6b3:	83 c4 2c             	add    esp,0x2c
c001f6b6:	5b                   	pop    ebx
c001f6b7:	5e                   	pop    esi
c001f6b8:	5f                   	pop    edi
c001f6b9:	5d                   	pop    ebp
c001f6ba:	c3                   	ret    
c001f6bb:	90                   	nop
c001f6bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f6c0:	85 db                	test   ebx,ebx
c001f6c2:	75 0d                	jne    c001f6d1 <__moddi3+0x81>
c001f6c4:	b8 01 00 00 00       	mov    eax,0x1
c001f6c9:	31 d2                	xor    edx,edx
c001f6cb:	f7 f7                	div    edi
c001f6cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6d1:	89 f0                	mov    eax,esi
c001f6d3:	31 d2                	xor    edx,edx
c001f6d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f6d9:	f7 f7                	div    edi
c001f6db:	89 e8                	mov    eax,ebp
c001f6dd:	f7 f7                	div    edi
c001f6df:	89 d6                	mov    esi,edx
c001f6e1:	eb bd                	jmp    c001f6a0 <__moddi3+0x50>
c001f6e3:	90                   	nop
c001f6e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f6e8:	39 f7                	cmp    edi,esi
c001f6ea:	76 20                	jbe    c001f70c <__moddi3+0xbc>
c001f6ec:	89 c8                	mov    eax,ecx
c001f6ee:	89 f2                	mov    edx,esi
c001f6f0:	eb b2                	jmp    c001f6a4 <__moddi3+0x54>
c001f6f2:	66 90                	xchg   ax,ax
c001f6f4:	f7 d9                	neg    ecx
c001f6f6:	83 d3 00             	adc    ebx,0x0
c001f6f9:	f7 db                	neg    ebx
c001f6fb:	89 de                	mov    esi,ebx
c001f6fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f705:	e9 6f ff ff ff       	jmp    c001f679 <__moddi3+0x29>
c001f70a:	66 90                	xchg   ax,ax
c001f70c:	0f bd c7             	bsr    eax,edi
c001f70f:	83 f0 1f             	xor    eax,0x1f
c001f712:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f716:	75 24                	jne    c001f73c <__moddi3+0xec>
c001f718:	39 f7                	cmp    edi,esi
c001f71a:	72 06                	jb     c001f722 <__moddi3+0xd2>
c001f71c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f720:	77 0c                	ja     c001f72e <__moddi3+0xde>
c001f722:	89 e9                	mov    ecx,ebp
c001f724:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f728:	19 fe                	sbb    esi,edi
c001f72a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f72e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f732:	89 f2                	mov    edx,esi
c001f734:	e9 6b ff ff ff       	jmp    c001f6a4 <__moddi3+0x54>
c001f739:	8d 76 00             	lea    esi,[esi+0x0]
c001f73c:	b8 20 00 00 00       	mov    eax,0x20
c001f741:	89 c2                	mov    edx,eax
c001f743:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f747:	29 da                	sub    edx,ebx
c001f749:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f74d:	88 d9                	mov    cl,bl
c001f74f:	d3 e7                	shl    edi,cl
c001f751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f755:	88 d1                	mov    cl,dl
c001f757:	d3 e8                	shr    eax,cl
c001f759:	09 c7                	or     edi,eax
c001f75b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f75f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f763:	89 d8                	mov    eax,ebx
c001f765:	88 d9                	mov    cl,bl
c001f767:	d3 e7                	shl    edi,cl
c001f769:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f76d:	89 f3                	mov    ebx,esi
c001f76f:	88 d1                	mov    cl,dl
c001f771:	d3 eb                	shr    ebx,cl
c001f773:	89 c7                	mov    edi,eax
c001f775:	88 c1                	mov    cl,al
c001f777:	d3 e6                	shl    esi,cl
c001f779:	89 e8                	mov    eax,ebp
c001f77b:	88 d1                	mov    cl,dl
c001f77d:	d3 e8                	shr    eax,cl
c001f77f:	09 f0                	or     eax,esi
c001f781:	89 f9                	mov    ecx,edi
c001f783:	d3 e5                	shl    ebp,cl
c001f785:	89 da                	mov    edx,ebx
c001f787:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f78b:	89 d3                	mov    ebx,edx
c001f78d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f791:	89 c6                	mov    esi,eax
c001f793:	89 d1                	mov    ecx,edx
c001f795:	39 d3                	cmp    ebx,edx
c001f797:	72 27                	jb     c001f7c0 <__moddi3+0x170>
c001f799:	74 21                	je     c001f7bc <__moddi3+0x16c>
c001f79b:	29 f5                	sub    ebp,esi
c001f79d:	19 cb                	sbb    ebx,ecx
c001f79f:	89 de                	mov    esi,ebx
c001f7a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f7a5:	d3 e6                	shl    esi,cl
c001f7a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f7ab:	89 f9                	mov    ecx,edi
c001f7ad:	d3 ed                	shr    ebp,cl
c001f7af:	09 ee                	or     esi,ebp
c001f7b1:	89 f0                	mov    eax,esi
c001f7b3:	d3 eb                	shr    ebx,cl
c001f7b5:	89 da                	mov    edx,ebx
c001f7b7:	e9 e8 fe ff ff       	jmp    c001f6a4 <__moddi3+0x54>
c001f7bc:	39 c5                	cmp    ebp,eax
c001f7be:	73 db                	jae    c001f79b <__moddi3+0x14b>
c001f7c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f7c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f7c8:	89 d1                	mov    ecx,edx
c001f7ca:	89 c6                	mov    esi,eax
c001f7cc:	eb cd                	jmp    c001f79b <__moddi3+0x14b>
c001f7ce:	66 90                	xchg   ax,ax

c001f7d0 <__udivdi3>:
c001f7d0:	55                   	push   ebp
c001f7d1:	57                   	push   edi
c001f7d2:	56                   	push   esi
c001f7d3:	53                   	push   ebx
c001f7d4:	83 ec 1c             	sub    esp,0x1c
c001f7d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f7df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7e7:	85 d2                	test   edx,edx
c001f7e9:	75 41                	jne    c001f82c <__udivdi3+0x5c>
c001f7eb:	39 f7                	cmp    edi,esi
c001f7ed:	76 15                	jbe    c001f804 <__udivdi3+0x34>
c001f7ef:	89 e8                	mov    eax,ebp
c001f7f1:	89 f2                	mov    edx,esi
c001f7f3:	f7 f7                	div    edi
c001f7f5:	31 db                	xor    ebx,ebx
c001f7f7:	89 da                	mov    edx,ebx
c001f7f9:	83 c4 1c             	add    esp,0x1c
c001f7fc:	5b                   	pop    ebx
c001f7fd:	5e                   	pop    esi
c001f7fe:	5f                   	pop    edi
c001f7ff:	5d                   	pop    ebp
c001f800:	c3                   	ret    
c001f801:	8d 76 00             	lea    esi,[esi+0x0]
c001f804:	89 f9                	mov    ecx,edi
c001f806:	85 ff                	test   edi,edi
c001f808:	75 0b                	jne    c001f815 <__udivdi3+0x45>
c001f80a:	b8 01 00 00 00       	mov    eax,0x1
c001f80f:	31 d2                	xor    edx,edx
c001f811:	f7 f7                	div    edi
c001f813:	89 c1                	mov    ecx,eax
c001f815:	31 d2                	xor    edx,edx
c001f817:	89 f0                	mov    eax,esi
c001f819:	f7 f1                	div    ecx
c001f81b:	89 c3                	mov    ebx,eax
c001f81d:	89 e8                	mov    eax,ebp
c001f81f:	f7 f1                	div    ecx
c001f821:	89 da                	mov    edx,ebx
c001f823:	83 c4 1c             	add    esp,0x1c
c001f826:	5b                   	pop    ebx
c001f827:	5e                   	pop    esi
c001f828:	5f                   	pop    edi
c001f829:	5d                   	pop    ebp
c001f82a:	c3                   	ret    
c001f82b:	90                   	nop
c001f82c:	39 f2                	cmp    edx,esi
c001f82e:	77 1c                	ja     c001f84c <__udivdi3+0x7c>
c001f830:	0f bd da             	bsr    ebx,edx
c001f833:	83 f3 1f             	xor    ebx,0x1f
c001f836:	75 24                	jne    c001f85c <__udivdi3+0x8c>
c001f838:	39 f2                	cmp    edx,esi
c001f83a:	72 08                	jb     c001f844 <__udivdi3+0x74>
c001f83c:	39 ef                	cmp    edi,ebp
c001f83e:	0f 87 84 00 00 00    	ja     c001f8c8 <__udivdi3+0xf8>
c001f844:	b8 01 00 00 00       	mov    eax,0x1
c001f849:	eb ac                	jmp    c001f7f7 <__udivdi3+0x27>
c001f84b:	90                   	nop
c001f84c:	31 db                	xor    ebx,ebx
c001f84e:	31 c0                	xor    eax,eax
c001f850:	89 da                	mov    edx,ebx
c001f852:	83 c4 1c             	add    esp,0x1c
c001f855:	5b                   	pop    ebx
c001f856:	5e                   	pop    esi
c001f857:	5f                   	pop    edi
c001f858:	5d                   	pop    ebp
c001f859:	c3                   	ret    
c001f85a:	66 90                	xchg   ax,ax
c001f85c:	b8 20 00 00 00       	mov    eax,0x20
c001f861:	29 d8                	sub    eax,ebx
c001f863:	88 d9                	mov    cl,bl
c001f865:	d3 e2                	shl    edx,cl
c001f867:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f86b:	89 fa                	mov    edx,edi
c001f86d:	88 c1                	mov    cl,al
c001f86f:	d3 ea                	shr    edx,cl
c001f871:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f875:	09 d1                	or     ecx,edx
c001f877:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f87b:	88 d9                	mov    cl,bl
c001f87d:	d3 e7                	shl    edi,cl
c001f87f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f883:	89 f7                	mov    edi,esi
c001f885:	88 c1                	mov    cl,al
c001f887:	d3 ef                	shr    edi,cl
c001f889:	88 d9                	mov    cl,bl
c001f88b:	d3 e6                	shl    esi,cl
c001f88d:	89 ea                	mov    edx,ebp
c001f88f:	88 c1                	mov    cl,al
c001f891:	d3 ea                	shr    edx,cl
c001f893:	09 d6                	or     esi,edx
c001f895:	89 f0                	mov    eax,esi
c001f897:	89 fa                	mov    edx,edi
c001f899:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f89d:	89 d7                	mov    edi,edx
c001f89f:	89 c6                	mov    esi,eax
c001f8a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8a5:	39 d7                	cmp    edi,edx
c001f8a7:	72 13                	jb     c001f8bc <__udivdi3+0xec>
c001f8a9:	74 09                	je     c001f8b4 <__udivdi3+0xe4>
c001f8ab:	89 f0                	mov    eax,esi
c001f8ad:	31 db                	xor    ebx,ebx
c001f8af:	e9 43 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8b4:	88 d9                	mov    cl,bl
c001f8b6:	d3 e5                	shl    ebp,cl
c001f8b8:	39 c5                	cmp    ebp,eax
c001f8ba:	73 ef                	jae    c001f8ab <__udivdi3+0xdb>
c001f8bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f8bf:	31 db                	xor    ebx,ebx
c001f8c1:	e9 31 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8c6:	66 90                	xchg   ax,ax
c001f8c8:	31 c0                	xor    eax,eax
c001f8ca:	e9 28 ff ff ff       	jmp    c001f7f7 <__udivdi3+0x27>
c001f8cf:	90                   	nop

c001f8d0 <__umoddi3>:
c001f8d0:	55                   	push   ebp
c001f8d1:	57                   	push   edi
c001f8d2:	56                   	push   esi
c001f8d3:	53                   	push   ebx
c001f8d4:	83 ec 1c             	sub    esp,0x1c
c001f8d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f8db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f8e7:	89 da                	mov    edx,ebx
c001f8e9:	85 c0                	test   eax,eax
c001f8eb:	75 37                	jne    c001f924 <__umoddi3+0x54>
c001f8ed:	39 df                	cmp    edi,ebx
c001f8ef:	76 13                	jbe    c001f904 <__umoddi3+0x34>
c001f8f1:	89 f0                	mov    eax,esi
c001f8f3:	f7 f7                	div    edi
c001f8f5:	89 d0                	mov    eax,edx
c001f8f7:	31 d2                	xor    edx,edx
c001f8f9:	83 c4 1c             	add    esp,0x1c
c001f8fc:	5b                   	pop    ebx
c001f8fd:	5e                   	pop    esi
c001f8fe:	5f                   	pop    edi
c001f8ff:	5d                   	pop    ebp
c001f900:	c3                   	ret    
c001f901:	8d 76 00             	lea    esi,[esi+0x0]
c001f904:	89 fd                	mov    ebp,edi
c001f906:	85 ff                	test   edi,edi
c001f908:	75 0b                	jne    c001f915 <__umoddi3+0x45>
c001f90a:	b8 01 00 00 00       	mov    eax,0x1
c001f90f:	31 d2                	xor    edx,edx
c001f911:	f7 f7                	div    edi
c001f913:	89 c5                	mov    ebp,eax
c001f915:	89 d8                	mov    eax,ebx
c001f917:	31 d2                	xor    edx,edx
c001f919:	f7 f5                	div    ebp
c001f91b:	89 f0                	mov    eax,esi
c001f91d:	f7 f5                	div    ebp
c001f91f:	89 d0                	mov    eax,edx
c001f921:	eb d4                	jmp    c001f8f7 <__umoddi3+0x27>
c001f923:	90                   	nop
c001f924:	89 f1                	mov    ecx,esi
c001f926:	39 d8                	cmp    eax,ebx
c001f928:	76 0a                	jbe    c001f934 <__umoddi3+0x64>
c001f92a:	89 f0                	mov    eax,esi
c001f92c:	83 c4 1c             	add    esp,0x1c
c001f92f:	5b                   	pop    ebx
c001f930:	5e                   	pop    esi
c001f931:	5f                   	pop    edi
c001f932:	5d                   	pop    ebp
c001f933:	c3                   	ret    
c001f934:	0f bd e8             	bsr    ebp,eax
c001f937:	83 f5 1f             	xor    ebp,0x1f
c001f93a:	75 1c                	jne    c001f958 <__umoddi3+0x88>
c001f93c:	39 d8                	cmp    eax,ebx
c001f93e:	72 04                	jb     c001f944 <__umoddi3+0x74>
c001f940:	39 f7                	cmp    edi,esi
c001f942:	77 08                	ja     c001f94c <__umoddi3+0x7c>
c001f944:	89 da                	mov    edx,ebx
c001f946:	29 fe                	sub    esi,edi
c001f948:	19 c2                	sbb    edx,eax
c001f94a:	89 f1                	mov    ecx,esi
c001f94c:	89 c8                	mov    eax,ecx
c001f94e:	83 c4 1c             	add    esp,0x1c
c001f951:	5b                   	pop    ebx
c001f952:	5e                   	pop    esi
c001f953:	5f                   	pop    edi
c001f954:	5d                   	pop    ebp
c001f955:	c3                   	ret    
c001f956:	66 90                	xchg   ax,ax
c001f958:	ba 20 00 00 00       	mov    edx,0x20
c001f95d:	29 ea                	sub    edx,ebp
c001f95f:	89 e9                	mov    ecx,ebp
c001f961:	d3 e0                	shl    eax,cl
c001f963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f967:	89 f8                	mov    eax,edi
c001f969:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f96d:	88 d1                	mov    cl,dl
c001f96f:	d3 e8                	shr    eax,cl
c001f971:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f975:	09 c1                	or     ecx,eax
c001f977:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f97b:	89 e9                	mov    ecx,ebp
c001f97d:	d3 e7                	shl    edi,cl
c001f97f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f983:	89 d8                	mov    eax,ebx
c001f985:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f989:	88 d1                	mov    cl,dl
c001f98b:	d3 e8                	shr    eax,cl
c001f98d:	89 c7                	mov    edi,eax
c001f98f:	89 e9                	mov    ecx,ebp
c001f991:	d3 e3                	shl    ebx,cl
c001f993:	89 f0                	mov    eax,esi
c001f995:	88 d1                	mov    cl,dl
c001f997:	d3 e8                	shr    eax,cl
c001f999:	09 d8                	or     eax,ebx
c001f99b:	89 e9                	mov    ecx,ebp
c001f99d:	d3 e6                	shl    esi,cl
c001f99f:	89 f3                	mov    ebx,esi
c001f9a1:	89 fa                	mov    edx,edi
c001f9a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f9a7:	89 d1                	mov    ecx,edx
c001f9a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f9ad:	89 c6                	mov    esi,eax
c001f9af:	89 d7                	mov    edi,edx
c001f9b1:	39 d1                	cmp    ecx,edx
c001f9b3:	72 27                	jb     c001f9dc <__umoddi3+0x10c>
c001f9b5:	74 21                	je     c001f9d8 <__umoddi3+0x108>
c001f9b7:	89 ca                	mov    edx,ecx
c001f9b9:	29 f3                	sub    ebx,esi
c001f9bb:	19 fa                	sbb    edx,edi
c001f9bd:	89 d0                	mov    eax,edx
c001f9bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f9c3:	d3 e0                	shl    eax,cl
c001f9c5:	89 e9                	mov    ecx,ebp
c001f9c7:	d3 eb                	shr    ebx,cl
c001f9c9:	09 d8                	or     eax,ebx
c001f9cb:	d3 ea                	shr    edx,cl
c001f9cd:	83 c4 1c             	add    esp,0x1c
c001f9d0:	5b                   	pop    ebx
c001f9d1:	5e                   	pop    esi
c001f9d2:	5f                   	pop    edi
c001f9d3:	5d                   	pop    ebp
c001f9d4:	c3                   	ret    
c001f9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9d8:	39 c3                	cmp    ebx,eax
c001f9da:	73 db                	jae    c001f9b7 <__umoddi3+0xe7>
c001f9dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f9e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f9e4:	89 d7                	mov    edi,edx
c001f9e6:	89 c6                	mov    esi,eax
c001f9e8:	eb cd                	jmp    c001f9b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f9ea <_init>:
c001f9ea:	55                   	push   ebp
c001f9eb:	89 e5                	mov    ebp,esp
c001f9ed:	e8 02 07 fe ff       	call   c00000f4 <frame_dummy>
c001f9f2:	e8 e5 fa ff ff       	call   c001f4dc <__do_global_ctors_aux>
c001f9f7:	5d                   	pop    ebp
c001f9f8:	c3                   	ret    

Disassembly of section .fini:

c001f9f9 <_fini>:
c001f9f9:	55                   	push   ebp
c001f9fa:	89 e5                	mov    ebp,esp
c001f9fc:	e8 83 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa01:	5d                   	pop    ebp
c001fa02:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa04 <Computer::~Computer()>:
c001fa04:	83 ec 0c             	sub    esp,0xc
c001fa07:	ba 14 0d 02 c0       	mov    edx,0xc0020d14
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	89 10                	mov    DWORD PTR [eax],edx
c001fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa16:	83 ec 0c             	sub    esp,0xc
c001fa19:	50                   	push   eax
c001fa1a:	e8 49 cf fe ff       	call   c000c968 <Device::~Device()>
c001fa1f:	83 c4 10             	add    esp,0x10
c001fa22:	90                   	nop
c001fa23:	83 c4 0c             	add    esp,0xc
c001fa26:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa28 <Computer::~Computer()>:
c001fa28:	83 ec 0c             	sub    esp,0xc
c001fa2b:	83 ec 0c             	sub    esp,0xc
c001fa2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa32:	e8 cd ff ff ff       	call   c001fa04 <Computer::~Computer()>
c001fa37:	83 c4 10             	add    esp,0x10
c001fa3a:	83 ec 08             	sub    esp,0x8
c001fa3d:	68 70 01 00 00       	push   0x170
c001fa42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa46:	e8 cd ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	83 c4 0c             	add    esp,0xc
c001fa51:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fa52 <idleCommon()>:
c001fa52:	83 ec 0c             	sub    esp,0xc
c001fa55:	fa                   	cli    
c001fa56:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001fa5c:	e8 ff 66 ff ff       	call   c0016160 <schedule()>
c001fa61:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fa66:	48                   	dec    eax
c001fa67:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fa6c:	75 01                	jne    c001fa6f <idleCommon()+0x1d>
c001fa6e:	fb                   	sti    
c001fa6f:	83 c4 0c             	add    esp,0xc
c001fa72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fa74 <LinkedList<UnixFile>::~LinkedList()>:
c001fa74:	90                   	nop
c001fa75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fa76 <LinkedList<UnixFile>::LinkedList()>:
c001fa76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fab6:	90                   	nop
c001fab7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fab8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fab8:	83 ec 0c             	sub    esp,0xc
c001fabb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fac0:	75 10                	jne    c001fad2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fac2:	83 ec 0c             	sub    esp,0xc
c001fac5:	68 28 0f 02 c0       	push   0xc0020f28
c001faca:	e8 f0 1b ff ff       	call   c00116bf <KePanic(char const*)>
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad6:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad8:	85 c0                	test   eax,eax
c001fada:	74 34                	je     c001fb10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fae3:	85 c0                	test   eax,eax
c001fae5:	74 29                	je     c001fb10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fafd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb0e:	eb 65                	jmp    c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb16:	85 c0                	test   eax,eax
c001fb18:	75 4b                	jne    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb21:	85 c0                	test   eax,eax
c001fb23:	75 40                	jne    c001fb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb2d:	89 10                	mov    DWORD PTR [eax],edx
c001fb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb4f:	85 c0                	test   eax,eax
c001fb51:	74 22                	je     c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb53:	83 ec 0c             	sub    esp,0xc
c001fb56:	68 4a 0f 02 c0       	push   0xc0020f4a
c001fb5b:	e8 5f 1b ff ff       	call   c00116bf <KePanic(char const*)>
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	eb 10                	jmp    c001fb75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb65:	83 ec 0c             	sub    esp,0xc
c001fb68:	68 54 0f 02 c0       	push   0xc0020f54
c001fb6d:	e8 4d 1b ff ff       	call   c00116bf <KePanic(char const*)>
c001fb72:	83 c4 10             	add    esp,0x10
c001fb75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb7c:	8d 50 01             	lea    edx,[eax+0x1]
c001fb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb86:	90                   	nop
c001fb87:	83 c4 0c             	add    esp,0xc
c001fb8a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fb8c <LinkedList<UnixFile>::getFirstElement()>:
c001fb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fb94 <LinkedList<UnixFile>::removeFirst()>:
c001fb94:	83 ec 0c             	sub    esp,0xc
c001fb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb9d:	85 c0                	test   eax,eax
c001fb9f:	75 12                	jne    c001fbb3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fba1:	83 ec 0c             	sub    esp,0xc
c001fba4:	68 60 0f 02 c0       	push   0xc0020f60
c001fba9:	e8 11 1b ff ff       	call   c00116bf <KePanic(char const*)>
c001fbae:	83 c4 10             	add    esp,0x10
c001fbb1:	eb 7e                	jmp    c001fc31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fbb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbbd:	85 c0                	test   eax,eax
c001fbbf:	74 10                	je     c001fbd1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fbc1:	83 ec 0c             	sub    esp,0xc
c001fbc4:	68 ab 0f 02 c0       	push   0xc0020fab
c001fbc9:	e8 f1 1a ff ff       	call   c00116bf <KePanic(char const*)>
c001fbce:	83 c4 10             	add    esp,0x10
c001fbd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbda:	85 c0                	test   eax,eax
c001fbdc:	75 33                	jne    c001fc11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbfa:	83 f8 01             	cmp    eax,0x1
c001fbfd:	74 21                	je     c001fc20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fbff:	83 ec 0c             	sub    esp,0xc
c001fc02:	68 84 0f 02 c0       	push   0xc0020f84
c001fc07:	e8 b3 1a ff ff       	call   c00116bf <KePanic(char const*)>
c001fc0c:	83 c4 10             	add    esp,0x10
c001fc0f:	eb 0f                	jmp    c001fc20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc15:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	89 10                	mov    DWORD PTR [eax],edx
c001fc20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc27:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc31:	83 c4 0c             	add    esp,0xc
c001fc34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fc36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fc36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fc3e <DriverlessDevice::~DriverlessDevice()>:
c001fc3e:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c001fc43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc47:	89 10                	mov    DWORD PTR [eax],edx
c001fc49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4d:	50                   	push   eax
c001fc4e:	e8 15 cd fe ff       	call   c000c968 <Device::~Device()>
c001fc53:	83 c4 04             	add    esp,0x4
c001fc56:	90                   	nop
c001fc57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fc58 <DriverlessDevice::~DriverlessDevice()>:
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc62:	e8 d7 ff ff ff       	call   c001fc3e <DriverlessDevice::~DriverlessDevice()>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	83 ec 08             	sub    esp,0x8
c001fc6d:	68 58 01 00 00       	push   0x158
c001fc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc76:	e8 9d ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	83 c4 0c             	add    esp,0xc
c001fc81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fc82 <LinkedList<Device>::addElement(Device*)>:
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc8a:	75 10                	jne    c001fc9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	68 28 0f 02 c0       	push   0xc0020f28
c001fc94:	e8 26 1a ff ff       	call   c00116bf <KePanic(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca2:	85 c0                	test   eax,eax
c001fca4:	74 3a                	je     c001fce0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcad:	85 c0                	test   eax,eax
c001fcaf:	74 2f                	je     c001fce0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcbc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcd4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fcde:	eb 68                	jmp    c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce6:	85 c0                	test   eax,eax
c001fce8:	75 4e                	jne    c001fd38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf1:	85 c0                	test   eax,eax
c001fcf3:	75 43                	jne    c001fd38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcfd:	89 10                	mov    DWORD PTR [eax],edx
c001fcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd22:	85 c0                	test   eax,eax
c001fd24:	74 22                	je     c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd26:	83 ec 0c             	sub    esp,0xc
c001fd29:	68 4a 0f 02 c0       	push   0xc0020f4a
c001fd2e:	e8 8c 19 ff ff       	call   c00116bf <KePanic(char const*)>
c001fd33:	83 c4 10             	add    esp,0x10
c001fd36:	eb 10                	jmp    c001fd48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	68 54 0f 02 c0       	push   0xc0020f54
c001fd40:	e8 7a 19 ff ff       	call   c00116bf <KePanic(char const*)>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd4f:	8d 50 01             	lea    edx,[eax+0x1]
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd59:	90                   	nop
c001fd5a:	83 c4 0c             	add    esp,0xc
c001fd5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fd5e <LinkedList<Device>::LinkedList()>:
c001fd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fd9e:	90                   	nop
c001fd9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fda0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda6:	85 c0                	test   eax,eax
c001fda8:	75 0e                	jne    c001fdb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb1:	85 c0                	test   eax,eax
c001fdb3:	75 03                	jne    c001fdb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fdb5:	b0 01                	mov    al,0x1
c001fdb7:	c3                   	ret    
c001fdb8:	b0 00                	mov    al,0x0
c001fdba:	90                   	nop
c001fdbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fdbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fdbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fdc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdcd:	85 c0                	test   eax,eax
c001fdcf:	75 17                	jne    c001fde8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fdd1:	83 ec 0c             	sub    esp,0xc
c001fdd4:	68 60 0f 02 c0       	push   0xc0020f60
c001fdd9:	e8 e1 18 ff ff       	call   c00116bf <KePanic(char const*)>
c001fdde:	83 c4 10             	add    esp,0x10
c001fde1:	e9 96 00 00 00       	jmp    c001fe7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fde6:	66 90                	xchg   ax,ax
c001fde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdf2:	85 c0                	test   eax,eax
c001fdf4:	0f 95 c0             	setne  al
c001fdf7:	0f b6 c0             	movzx  eax,al
c001fdfa:	85 c0                	test   eax,eax
c001fdfc:	74 12                	je     c001fe10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fdfe:	83 ec 0c             	sub    esp,0xc
c001fe01:	68 ab 0f 02 c0       	push   0xc0020fab
c001fe06:	e8 b4 18 ff ff       	call   c00116bf <KePanic(char const*)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	66 90                	xchg   ax,ax
c001fe10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe19:	85 c0                	test   eax,eax
c001fe1b:	0f 94 c0             	sete   al
c001fe1e:	0f b6 c0             	movzx  eax,al
c001fe21:	85 c0                	test   eax,eax
c001fe23:	74 33                	je     c001fe58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe41:	83 f8 01             	cmp    eax,0x1
c001fe44:	74 22                	je     c001fe68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	68 84 0f 02 c0       	push   0xc0020f84
c001fe4e:	e8 6c 18 ff ff       	call   c00116bf <KePanic(char const*)>
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	eb 10                	jmp    c001fe68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fe61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe65:	89 10                	mov    DWORD PTR [eax],edx
c001fe67:	90                   	nop
c001fe68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe6f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe79:	8d 76 00             	lea    esi,[esi+0x0]
c001fe7c:	83 c4 0c             	add    esp,0xc
c001fe7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fe80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe88:	75 12                	jne    c001fe9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fe8a:	83 ec 0c             	sub    esp,0xc
c001fe8d:	68 28 0f 02 c0       	push   0xc0020f28
c001fe92:	e8 28 18 ff ff       	call   c00116bf <KePanic(char const*)>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	66 90                	xchg   ax,ax
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea2:	85 c0                	test   eax,eax
c001fea4:	74 36                	je     c001fedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fead:	85 c0                	test   eax,eax
c001feaf:	74 2b                	je     c001fedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001febc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001febf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fec7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001feca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fed1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fed8:	eb 6a                	jmp    c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001feda:	66 90                	xchg   ax,ax
c001fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee2:	85 c0                	test   eax,eax
c001fee4:	75 4e                	jne    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feed:	85 c0                	test   eax,eax
c001feef:	75 43                	jne    c001ff34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fef9:	89 10                	mov    DWORD PTR [eax],edx
c001fefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff1b:	85 c0                	test   eax,eax
c001ff1d:	74 25                	je     c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	68 4a 0f 02 c0       	push   0xc0020f4a
c001ff27:	e8 93 17 ff ff       	call   c00116bf <KePanic(char const*)>
c001ff2c:	83 c4 10             	add    esp,0x10
c001ff2f:	eb 13                	jmp    c001ff44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff31:	8d 76 00             	lea    esi,[esi+0x0]
c001ff34:	83 ec 0c             	sub    esp,0xc
c001ff37:	68 54 0f 02 c0       	push   0xc0020f54
c001ff3c:	e8 7e 17 ff ff       	call   c00116bf <KePanic(char const*)>
c001ff41:	83 c4 10             	add    esp,0x10
c001ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff4b:	8d 50 01             	lea    edx,[eax+0x1]
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff55:	90                   	nop
c001ff56:	83 c4 0c             	add    esp,0xc
c001ff59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ff5c <ACPI::~ACPI()>:
c001ff5c:	83 ec 0c             	sub    esp,0xc
c001ff5f:	ba c4 21 02 c0       	mov    edx,0xc00221c4
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	89 10                	mov    DWORD PTR [eax],edx
c001ff6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	50                   	push   eax
c001ff72:	e8 f1 c9 fe ff       	call   c000c968 <Device::~Device()>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	90                   	nop
c001ff7b:	83 c4 0c             	add    esp,0xc
c001ff7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ff80 <ACPI::~ACPI()>:
c001ff80:	83 ec 0c             	sub    esp,0xc
c001ff83:	83 ec 0c             	sub    esp,0xc
c001ff86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8a:	e8 cd ff ff ff       	call   c001ff5c <ACPI::~ACPI()>
c001ff8f:	83 c4 10             	add    esp,0x10
c001ff92:	83 ec 08             	sub    esp,0x8
c001ff95:	68 64 12 00 00       	push   0x1264
c001ff9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff9e:	e8 75 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffa3:	83 c4 10             	add    esp,0x10
c001ffa6:	83 c4 0c             	add    esp,0xc
c001ffa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ffac <LinkedList<Device>::~LinkedList()>:
c001ffac:	90                   	nop
c001ffad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ffb0 <LinkedList<Device>::isEmpty()>:
c001ffb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffb6:	85 c0                	test   eax,eax
c001ffb8:	75 0e                	jne    c001ffc8 <LinkedList<Device>::isEmpty()+0x18>
c001ffba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffc1:	85 c0                	test   eax,eax
c001ffc3:	75 03                	jne    c001ffc8 <LinkedList<Device>::isEmpty()+0x18>
c001ffc5:	b0 01                	mov    al,0x1
c001ffc7:	c3                   	ret    
c001ffc8:	b0 00                	mov    al,0x0
c001ffca:	90                   	nop
c001ffcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ffcc <LinkedList<Device>::getFirstElement()>:
c001ffcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ffd4 <LinkedList<Device>::removeFirst()>:
c001ffd4:	83 ec 0c             	sub    esp,0xc
c001ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffdd:	85 c0                	test   eax,eax
c001ffdf:	75 17                	jne    c001fff8 <LinkedList<Device>::removeFirst()+0x24>
c001ffe1:	83 ec 0c             	sub    esp,0xc
c001ffe4:	68 60 0f 02 c0       	push   0xc0020f60
c001ffe9:	e8 d1 16 ff ff       	call   c00116bf <KePanic(char const*)>
c001ffee:	83 c4 10             	add    esp,0x10
c001fff1:	e9 92 00 00 00       	jmp    c0020088 <LinkedList<Device>::removeFirst()+0xb4>
c001fff6:	66 90                	xchg   ax,ax
c001fff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020005:	85 c0                	test   eax,eax
c0020007:	74 13                	je     c002001c <LinkedList<Device>::removeFirst()+0x48>
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	68 ab 0f 02 c0       	push   0xc0020fab
c0020011:	e8 a9 16 ff ff       	call   c00116bf <KePanic(char const*)>
c0020016:	83 c4 10             	add    esp,0x10
c0020019:	8d 76 00             	lea    esi,[esi+0x0]
c002001c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020028:	85 c0                	test   eax,eax
c002002a:	75 34                	jne    c0020060 <LinkedList<Device>::removeFirst()+0x8c>
c002002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020030:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020045:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020048:	83 f8 01             	cmp    eax,0x1
c002004b:	74 27                	je     c0020074 <LinkedList<Device>::removeFirst()+0xa0>
c002004d:	83 ec 0c             	sub    esp,0xc
c0020050:	68 84 0f 02 c0       	push   0xc0020f84
c0020055:	e8 65 16 ff ff       	call   c00116bf <KePanic(char const*)>
c002005a:	83 c4 10             	add    esp,0x10
c002005d:	eb 15                	jmp    c0020074 <LinkedList<Device>::removeFirst()+0xa0>
c002005f:	90                   	nop
c0020060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020064:	8b 00                	mov    eax,DWORD PTR [eax]
c0020066:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002006c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020070:	89 10                	mov    DWORD PTR [eax],edx
c0020072:	66 90                	xchg   ax,ax
c0020074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020078:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002007b:	8d 50 ff             	lea    edx,[eax-0x1]
c002007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020085:	8d 76 00             	lea    esi,[esi+0x0]
c0020088:	83 c4 0c             	add    esp,0xc
c002008b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002008c <CPU::~CPU()>:
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	ba 6c 23 02 c0       	mov    edx,0xc002236c
c0020094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020098:	89 10                	mov    DWORD PTR [eax],edx
c002009a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009e:	83 ec 0c             	sub    esp,0xc
c00200a1:	50                   	push   eax
c00200a2:	e8 c1 c8 fe ff       	call   c000c968 <Device::~Device()>
c00200a7:	83 c4 10             	add    esp,0x10
c00200aa:	90                   	nop
c00200ab:	83 c4 0c             	add    esp,0xc
c00200ae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00200b0 <CPU::~CPU()>:
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ba:	e8 cd ff ff ff       	call   c002008c <CPU::~CPU()>
c00200bf:	83 c4 10             	add    esp,0x10
c00200c2:	83 ec 08             	sub    esp,0x8
c00200c5:	68 94 11 00 00       	push   0x1194
c00200ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ce:	e8 45 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	83 c4 0c             	add    esp,0xc
c00200d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00200dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00200dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00200e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00200e4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00200e4:	90                   	nop
c00200e5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00200e8 <ThreadControlBlock::ThreadControlBlock()>:
c00200e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00200f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00200fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020102:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020118:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002011f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020123:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020127:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002012b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002012f:	90                   	nop
c0020130:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020134 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002013e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020142:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002014d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020162:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002016d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020174:	90                   	nop
c0020175:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020176 <PCI::~PCI()>:
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	ba 4c 32 02 c0       	mov    edx,0xc002324c
c002017e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020182:	89 10                	mov    DWORD PTR [eax],edx
c0020184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020188:	83 ec 0c             	sub    esp,0xc
c002018b:	50                   	push   eax
c002018c:	e8 6f c2 fe ff       	call   c000c400 <Bus::~Bus()>
c0020191:	83 c4 10             	add    esp,0x10
c0020194:	90                   	nop
c0020195:	83 c4 0c             	add    esp,0xc
c0020198:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002019a <PCI::~PCI()>:
c002019a:	83 ec 0c             	sub    esp,0xc
c002019d:	83 ec 0c             	sub    esp,0xc
c00201a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a4:	e8 cd ff ff ff       	call   c0020176 <PCI::~PCI()>
c00201a9:	83 c4 10             	add    esp,0x10
c00201ac:	83 ec 08             	sub    esp,0x8
c00201af:	68 5c 01 00 00       	push   0x15c
c00201b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b8:	e8 5b a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201bd:	83 c4 10             	add    esp,0x10
c00201c0:	83 c4 0c             	add    esp,0xc
c00201c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00201c4 <IDE::~IDE()>:
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	ba 00 33 02 c0       	mov    edx,0xc0023300
c00201cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d0:	89 10                	mov    DWORD PTR [eax],edx
c00201d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	50                   	push   eax
c00201da:	e8 01 cc fe ff       	call   c000cde0 <HardDiskController::~HardDiskController()>
c00201df:	83 c4 10             	add    esp,0x10
c00201e2:	90                   	nop
c00201e3:	83 c4 0c             	add    esp,0xc
c00201e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00201e8 <IDE::~IDE()>:
c00201e8:	83 ec 0c             	sub    esp,0xc
c00201eb:	83 ec 0c             	sub    esp,0xc
c00201ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f2:	e8 cd ff ff ff       	call   c00201c4 <IDE::~IDE()>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	83 ec 08             	sub    esp,0x8
c00201fd:	68 70 02 00 00       	push   0x270
c0020202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020206:	e8 0d a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002020b:	83 c4 10             	add    esp,0x10
c002020e:	83 c4 0c             	add    esp,0xc
c0020211:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020212 <SATABus::~SATABus()>:
c0020212:	83 ec 0c             	sub    esp,0xc
c0020215:	ba 50 33 02 c0       	mov    edx,0xc0023350
c002021a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021e:	89 10                	mov    DWORD PTR [eax],edx
c0020220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	50                   	push   eax
c0020228:	e8 b3 cb fe ff       	call   c000cde0 <HardDiskController::~HardDiskController()>
c002022d:	83 c4 10             	add    esp,0x10
c0020230:	90                   	nop
c0020231:	83 c4 0c             	add    esp,0xc
c0020234:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020236 <SATABus::~SATABus()>:
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020240:	e8 cd ff ff ff       	call   c0020212 <SATABus::~SATABus()>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	83 ec 08             	sub    esp,0x8
c002024b:	68 64 01 00 00       	push   0x164
c0020250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020254:	e8 bf a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020259:	83 c4 10             	add    esp,0x10
c002025c:	83 c4 0c             	add    esp,0xc
c002025f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020260 <ATA::~ATA()>:
c0020260:	83 ec 0c             	sub    esp,0xc
c0020263:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0020268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026c:	89 10                	mov    DWORD PTR [eax],edx
c002026e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020272:	83 ec 0c             	sub    esp,0xc
c0020275:	50                   	push   eax
c0020276:	e8 47 cc fe ff       	call   c000cec2 <PhysicalDisk::~PhysicalDisk()>
c002027b:	83 c4 10             	add    esp,0x10
c002027e:	90                   	nop
c002027f:	83 c4 0c             	add    esp,0xc
c0020282:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020284 <ATA::~ATA()>:
c0020284:	83 ec 0c             	sub    esp,0xc
c0020287:	83 ec 0c             	sub    esp,0xc
c002028a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002028e:	e8 cd ff ff ff       	call   c0020260 <ATA::~ATA()>
c0020293:	83 c4 10             	add    esp,0x10
c0020296:	83 ec 08             	sub    esp,0x8
c0020299:	68 7c 01 00 00       	push   0x17c
c002029e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a2:	e8 71 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202a7:	83 c4 10             	add    esp,0x10
c00202aa:	83 c4 0c             	add    esp,0xc
c00202ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00202ae <ATAPI::~ATAPI()>:
c00202ae:	83 ec 0c             	sub    esp,0xc
c00202b1:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c00202b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ba:	89 10                	mov    DWORD PTR [eax],edx
c00202bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c0:	83 ec 0c             	sub    esp,0xc
c00202c3:	50                   	push   eax
c00202c4:	e8 f9 cb fe ff       	call   c000cec2 <PhysicalDisk::~PhysicalDisk()>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	90                   	nop
c00202cd:	83 c4 0c             	add    esp,0xc
c00202d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00202d2 <ATAPI::~ATAPI()>:
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202dc:	e8 cd ff ff ff       	call   c00202ae <ATAPI::~ATAPI()>
c00202e1:	83 c4 10             	add    esp,0x10
c00202e4:	83 ec 08             	sub    esp,0x8
c00202e7:	68 84 01 00 00       	push   0x184
c00202ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f0:	e8 23 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	83 c4 0c             	add    esp,0xc
c00202fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00202fc <SATA::~SATA()>:
c00202fc:	83 ec 0c             	sub    esp,0xc
c00202ff:	ba 8c 34 02 c0       	mov    edx,0xc002348c
c0020304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020308:	89 10                	mov    DWORD PTR [eax],edx
c002030a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030e:	83 ec 0c             	sub    esp,0xc
c0020311:	50                   	push   eax
c0020312:	e8 ab cb fe ff       	call   c000cec2 <PhysicalDisk::~PhysicalDisk()>
c0020317:	83 c4 10             	add    esp,0x10
c002031a:	90                   	nop
c002031b:	83 c4 0c             	add    esp,0xc
c002031e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020320 <SATA::~SATA()>:
c0020320:	83 ec 0c             	sub    esp,0xc
c0020323:	83 ec 0c             	sub    esp,0xc
c0020326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002032a:	e8 cd ff ff ff       	call   c00202fc <SATA::~SATA()>
c002032f:	83 c4 10             	add    esp,0x10
c0020332:	83 ec 08             	sub    esp,0x8
c0020335:	68 7c 01 00 00       	push   0x17c
c002033a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033e:	e8 d5 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020343:	83 c4 10             	add    esp,0x10
c0020346:	83 c4 0c             	add    esp,0xc
c0020349:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002034a <SATAPI::~SATAPI()>:
c002034a:	83 ec 0c             	sub    esp,0xc
c002034d:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c0020352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020356:	89 10                	mov    DWORD PTR [eax],edx
c0020358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	50                   	push   eax
c0020360:	e8 5d cb fe ff       	call   c000cec2 <PhysicalDisk::~PhysicalDisk()>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	90                   	nop
c0020369:	83 c4 0c             	add    esp,0xc
c002036c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002036e <SATAPI::~SATAPI()>:
c002036e:	83 ec 0c             	sub    esp,0xc
c0020371:	83 ec 0c             	sub    esp,0xc
c0020374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020378:	e8 cd ff ff ff       	call   c002034a <SATAPI::~SATAPI()>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	83 ec 08             	sub    esp,0x8
c0020383:	68 84 01 00 00       	push   0x184
c0020388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002038c:	e8 87 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020391:	83 c4 10             	add    esp,0x10
c0020394:	83 c4 0c             	add    esp,0xc
c0020397:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020398 <IOAPIC::~IOAPIC()>:
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	ba f0 35 02 c0       	mov    edx,0xc00235f0
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	50                   	push   eax
c00203ae:	e8 b5 c5 fe ff       	call   c000c968 <Device::~Device()>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	90                   	nop
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00203bc <IOAPIC::~IOAPIC()>:
c00203bc:	83 ec 0c             	sub    esp,0xc
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c6:	e8 cd ff ff ff       	call   c0020398 <IOAPIC::~IOAPIC()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	83 ec 08             	sub    esp,0x8
c00203d1:	68 68 01 00 00       	push   0x168
c00203d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203da:	e8 39 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203df:	83 c4 10             	add    esp,0x10
c00203e2:	83 c4 0c             	add    esp,0xc
c00203e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00203e8 <APICTimer::~APICTimer()>:
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	ba 38 36 02 c0       	mov    edx,0xc0023638
c00203f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f4:	89 10                	mov    DWORD PTR [eax],edx
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	83 ec 0c             	sub    esp,0xc
c00203fd:	50                   	push   eax
c00203fe:	e8 31 e0 fe ff       	call   c000e434 <Timer::~Timer()>
c0020403:	83 c4 10             	add    esp,0x10
c0020406:	90                   	nop
c0020407:	83 c4 0c             	add    esp,0xc
c002040a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002040c <APICTimer::~APICTimer()>:
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020416:	e8 cd ff ff ff       	call   c00203e8 <APICTimer::~APICTimer()>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	83 ec 08             	sub    esp,0x8
c0020421:	68 60 01 00 00       	push   0x160
c0020426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002042a:	e8 e9 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	83 c4 0c             	add    esp,0xc
c0020435:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020438 <PIT::~PIT()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	ba 88 36 02 c0       	mov    edx,0xc0023688
c0020440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020444:	89 10                	mov    DWORD PTR [eax],edx
c0020446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	50                   	push   eax
c002044e:	e8 e1 df fe ff       	call   c000e434 <Timer::~Timer()>
c0020453:	83 c4 10             	add    esp,0x10
c0020456:	90                   	nop
c0020457:	83 c4 0c             	add    esp,0xc
c002045a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002045c <PIT::~PIT()>:
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	83 ec 0c             	sub    esp,0xc
c0020462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020466:	e8 cd ff ff ff       	call   c0020438 <PIT::~PIT()>
c002046b:	83 c4 10             	add    esp,0x10
c002046e:	83 ec 08             	sub    esp,0x8
c0020471:	68 5c 01 00 00       	push   0x15c
c0020476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047a:	e8 99 a3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	83 c4 0c             	add    esp,0xc
c0020485:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 24 02 c0       	mov    esi,0xc002249d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 24 02 c0       	mov    esi,0xc00224b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
